[
    {
        "title": "Unique Binary Search Trees II",
        "question_content": "Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\n&nbsp;\nExample 1:\n\nInput: n = 3\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n\nExample 2:\n\nInput: n = 1\nOutput: [[1]]\n\n&nbsp;\nConstraints:\n\n\t1 <= n <= 8",
        "solutions": [
            {
                "id": 31508,
                "title": "divide-and-conquer-f-i-g-i-1-g-n-i",
                "content": "This problem is a variant of the problem of [Unique Binary Search Trees][1]. \\n\\nI provided a solution along with explanation for the above problem, in the question [\"DP solution in 6 lines with explanation\"](https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n)-G(i-1)-*-G(n-i))\\n\\nIt is intuitive to solve this problem by following the same algorithm. Here is the code in a divide-and-conquer style. \\n\\n    public List<TreeNode> generateTrees(int n) {\\n    \\treturn generateSubtrees(1, n);\\n    }\\n \\n\\tprivate List<TreeNode> generateSubtrees(int s, int e) {\\n\\t\\tList<TreeNode> res = new LinkedList<TreeNode>();\\n\\t\\tif (s > e) {\\n\\t\\t\\tres.add(null); // empty tree\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\n\\t\\tfor (int i = s; i <= e; ++i) {\\n\\t\\t\\tList<TreeNode> leftSubtrees = generateSubtrees(s, i - 1);\\n\\t\\t\\tList<TreeNode> rightSubtrees = generateSubtrees(i + 1, e);\\n\\n\\t\\t\\tfor (TreeNode left : leftSubtrees) {\\n\\t\\t\\t\\tfor (TreeNode right : rightSubtrees) {\\n\\t\\t\\t\\t\\tTreeNode root = new TreeNode(i);\\n\\t\\t\\t\\t\\troot.left = left;\\n\\t\\t\\t\\t\\troot.right = right;\\n\\t\\t\\t\\t\\tres.add(root);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n\\n  [1]: https://oj.leetcode.com/problems/unique-binary-search-trees/\\n  [2]: https://oj.leetcode.com/discuss/24282/dp-solution-in-6-lines-with-explanation-f-i-g-i-1-g-n-i",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer"
                ],
                "code": "This problem is a variant of the problem of [Unique Binary Search Trees][1]. \\n\\nI provided a solution along with explanation for the above problem, in the question [\"DP solution in 6 lines with explanation\"](https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n)-G(i-1)-*-G(n-i))\\n\\nIt is intuitive to solve this problem by following the same algorithm. Here is the code in a divide-and-conquer style. \\n\\n    public List<TreeNode> generateTrees(int n) {\\n    \\treturn generateSubtrees(1, n);\\n    }\\n \\n\\tprivate List<TreeNode> generateSubtrees(int s, int e) {\\n\\t\\tList<TreeNode> res = new LinkedList<TreeNode>();\\n\\t\\tif (s > e) {\\n\\t\\t\\tres.add(null); // empty tree\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\n\\t\\tfor (int i = s; i <= e; ++i) {\\n\\t\\t\\tList<TreeNode> leftSubtrees = generateSubtrees(s, i - 1);\\n\\t\\t\\tList<TreeNode> rightSubtrees = generateSubtrees(i + 1, e);\\n\\n\\t\\t\\tfor (TreeNode left : leftSubtrees) {\\n\\t\\t\\t\\tfor (TreeNode right : rightSubtrees) {\\n\\t\\t\\t\\t\\tTreeNode root = new TreeNode(i);\\n\\t\\t\\t\\t\\troot.left = left;\\n\\t\\t\\t\\t\\troot.right = right;\\n\\t\\t\\t\\t\\tres.add(root);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn res;\\n\\t}\\n\\n  [1]: https://oj.leetcode.com/problems/unique-binary-search-trees/\\n  [2]: https://oj.leetcode.com/discuss/24282/dp-solution-in-6-lines-with-explanation-f-i-g-i-1-g-n-i",
                "codeTag": "Unknown"
            },
            {
                "id": 31493,
                "title": "java-solution-with-dp",
                "content": "Here is my java solution with DP:\\n\\n\\n    public static List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[] result = new List[n + 1];\\n        result[0] = new ArrayList<TreeNode>();\\n        if (n == 0) {\\n            return result[0];\\n        }\\n\\n        result[0].add(null);\\n        for (int len = 1; len <= n; len++) {\\n            result[len] = new ArrayList<TreeNode>();\\n            for (int j = 0; j < len; j++) {\\n                for (TreeNode nodeL : result[j]) {\\n                    for (TreeNode nodeR : result[len - j - 1]) {\\n                        TreeNode node = new TreeNode(j + 1);\\n                        node.left = nodeL;\\n                        node.right = clone(nodeR, j + 1);\\n                        result[len].add(node);\\n                    }\\n                }\\n            }\\n        }\\n        return result[n];\\n    }\\n\\n    private static TreeNode clone(TreeNode n, int offset) {\\n        if (n == null) {\\n            return null;\\n        }\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = clone(n.left, offset);\\n        node.right = clone(n.right, offset);\\n        return node;\\n    }\\n\\n\\n\\n**result[i]** stores the result until length **i**. For the result for length i+1, select the root node j from 0 to i, combine the result from left side and right side. Note for the right side we have to clone the nodes as the value will be offsetted by **j**.",
                "solutionTags": [
                    "Java"
                ],
                "code": "Here is my java solution with DP:\\n\\n\\n    public static List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[] result = new List[n + 1];\\n        result[0] = new ArrayList<TreeNode>();\\n        if (n == 0) {\\n            return result[0];\\n        }\\n\\n        result[0].add(null);\\n        for (int len = 1; len <= n; len++) {\\n            result[len] = new ArrayList<TreeNode>();\\n            for (int j = 0; j < len; j++) {\\n                for (TreeNode nodeL : result[j]) {\\n                    for (TreeNode nodeR : result[len - j - 1]) {\\n                        TreeNode node = new TreeNode(j + 1);\\n                        node.left = nodeL;\\n                        node.right = clone(nodeR, j + 1);\\n                        result[len].add(node);\\n                    }\\n                }\\n            }\\n        }\\n        return result[n];\\n    }\\n\\n    private static TreeNode clone(TreeNode n, int offset) {\\n        if (n == null) {\\n            return null;\\n        }\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = clone(n.left, offset);\\n        node.right = clone(n.right, offset);\\n        return node;\\n    }\\n\\n\\n\\n**result[i]** stores the result until length **i**. For the result for length i+1, select the root node j from 0 to i, combine the result from left side and right side. Note for the right side we have to clone the nodes as the value will be offsetted by **j**.",
                "codeTag": "Unknown"
            },
            {
                "id": 1849266,
                "title": "c-detailed-explanation-recursive-tree-with-comments",
                "content": "**Problem**\\n> Given n, find all structurally unique BST\\'s (binary search trees) that has n nodes with unique values from 1 to n\\n\\n**Strategy:**\\nWe will use a **recursive helper function** `bst(start, end)` that receives a range (*start to end*, within n) and returns all BST\\'s rooted in that range.\\n\\nNow let\\'s look how our helper function will work!\\n* As there will be trees with root as 1, 2, 3...n.  Iterate through all values from start to end to construct tree rooted at i and construct its left and right subtree recursively.\\n* We know that in Binary Search Tree all nodes in left subtree are smaller than root and in right subtree are larger than root. So for start = 1 and end = n, if we have ith number as root, all numbers from 1 to i-1 will be in left subtree and i+1 to n will be in right subtree. \\n**Therefore, we will build the tree recursively for left and right subtrees rooted at i as `leftSubTree = bst(start, i-1)` and `rightSubtree = bst(i + 1, end)`**\\n* So, till what moment we will recursively find the left and right subtrees?? Answer is until **start < end**!! \\n`So when start > end, add NULL to the list and return`\\nThis will be our base case!\\n* Now, we have leftSubtree and rightSubtree for node with root i. The last thing we need to do is connect leftSubTree and rightSubTree with root and add this tree(rooted at i) to the ans list!\\n\\uD83D\\uDCCC Here, we can have multiple left and right subtrees. So we need to loop through all left and right subtrees and connect every left subTree to right subTree and to current root(i) one by one.\\n\\n**Recursive Tree**\\nSee below recursive tree for more details, expanded for n = 5 and 3 as root!\\n![image](https://assets.leetcode.com/users/images/0b63aeae-a4dd-4f27-80d6-90e94695619a_1647273543.8265834.jpeg)\\n\\n\\t\\n\\t\\t\\n**Code**\\n```cpp\\nvector<TreeNode*> buildTree(int start, int end) {\\n\\tvector<TreeNode*> ans;\\n        \\n    // If start > end, then subtree will be empty so add NULL in the ans and return it.\\n    if(start > end) {\\n\\t\\tans.push_back(NULL);\\n        return ans;\\n    }\\n\\n    // Iterate through all values from start to end to construct left and right subtree recursively\\n\\tfor(int i = start; i <= end; ++i) {\\n\\t\\tvector<TreeNode*> leftSubTree = buildTree(start, i - 1);    // Construct left subtree\\n        vector<TreeNode*> rightSubTree = buildTree(i + 1, end);     // Construct right subtree\\n            \\n\\t\\t// loop through all left and right subtrees and connect them to ith root  \\n\\t\\tfor(int j = 0; j < leftSubTree.size(); j++) {\\n\\t\\t\\tfor(int k = 0; k < rightSubTree.size(); k++) {\\n\\t\\t\\t\\tTreeNode* root = new TreeNode(i);   // Create root with value i\\n\\t\\t\\t\\troot->left = leftSubTree[j];   // Connect left subtree rooted at leftSubTree[j]\\n                root->right = rightSubTree[k];   // Connect right subtree rooted at rightSubTree[k]\\n\\t\\t\\t\\tans.push_back(root);    // Add this tree(rooted at i) to ans data-structure\\n\\t\\t\\t}\\n\\t\\t}\\n    }\\n        \\n\\treturn ans;\\n}\\n    \\nvector<TreeNode*> generateTrees(int n) {\\n\\treturn buildTree(1, n);\\n}\\n```\\n",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```cpp\\nvector<TreeNode*> buildTree(int start, int end) {\\n\\tvector<TreeNode*> ans;\\n        \\n    // If start > end, then subtree will be empty so add NULL in the ans and return it.\\n    if(start > end) {\\n\\t\\tans.push_back(NULL);\\n        return ans;\\n    }\\n\\n    // Iterate through all values from start to end to construct left and right subtree recursively\\n\\tfor(int i = start; i <= end; ++i) {\\n\\t\\tvector<TreeNode*> leftSubTree = buildTree(start, i - 1);    // Construct left subtree\\n        vector<TreeNode*> rightSubTree = buildTree(i + 1, end);     // Construct right subtree\\n            \\n\\t\\t// loop through all left and right subtrees and connect them to ith root  \\n\\t\\tfor(int j = 0; j < leftSubTree.size(); j++) {\\n\\t\\t\\tfor(int k = 0; k < rightSubTree.size(); k++) {\\n\\t\\t\\t\\tTreeNode* root = new TreeNode(i);   // Create root with value i\\n\\t\\t\\t\\troot->left = leftSubTree[j];   // Connect left subtree rooted at leftSubTree[j]\\n                root->right = rightSubTree[k];   // Connect right subtree rooted at rightSubTree[k]\\n\\t\\t\\t\\tans.push_back(root);    // Add this tree(rooted at i) to ans data-structure\\n\\t\\t\\t}\\n\\t\\t}\\n    }\\n        \\n\\treturn ans;\\n}\\n    \\nvector<TreeNode*> generateTrees(int n) {\\n\\treturn buildTree(1, n);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 31495,
                "title": "should-be-6-liner",
                "content": "If only LeetCode had a `TreeNode(val, left, right)` constructor... sigh. Then I wouldn't need to provide my own and my solution would be six lines instead of eleven.\\n\\n    def generateTrees(self, n):\\n        def node(val, left, right):\\n            node = TreeNode(val)\\n            node.left = left\\n            node.right = right\\n            return node\\n        def trees(first, last):\\n            return [node(root, left, right)\\n                    for root in range(first, last+1)\\n                    for left in trees(first, root-1)\\n                    for right in trees(root+1, last)] or [None]\\n        return trees(1, n)\\n\\nOr even just **four** lines, if it's not forbidden to add an optional argument:\\n\\n    def node(val, left, right):\\n        node = TreeNode(val)\\n        node.left = left\\n        node.right = right\\n        return node\\n    \\n    class Solution:\\n        def generateTrees(self, last, first=1):\\n            return [node(root, left, right)\\n                    for root in range(first, last+1)\\n                    for left in self.generateTrees(root-1, first)\\n                    for right in self.generateTrees(last, root+1)] or [None]\\n\\nJust another version, using loops instead of list comprehension:\\n\\n    def generateTrees(self, n):\\n        def generate(first, last):\\n            trees = []\\n            for root in range(first, last+1):\\n                for left in generate(first, root-1):\\n                    for right in generate(root+1, last):\\n                        node = TreeNode(root)\\n                        node.left = left\\n                        node.right = right\\n                        trees += node,\\n            return trees or [None]\\n        return generate(1, n)",
                "solutionTags": [
                    "Python"
                ],
                "code": "If only LeetCode had a `TreeNode(val, left, right)` constructor... sigh. Then I wouldn't need to provide my own and my solution would be six lines instead of eleven.\\n\\n    def generateTrees(self, n):\\n        def node(val, left, right):\\n            node = TreeNode(val)\\n            node.left = left\\n            node.right = right\\n            return node\\n        def trees(first, last):\\n            return [node(root, left, right)\\n                    for root in range(first, last+1)\\n                    for left in trees(first, root-1)\\n                    for right in trees(root+1, last)] or [None]\\n        return trees(1, n)\\n\\nOr even just **four** lines, if it's not forbidden to add an optional argument:\\n\\n    def node(val, left, right):\\n        node = TreeNode(val)\\n        node.left = left\\n        node.right = right\\n        return node\\n    \\n    class Solution:\\n        def generateTrees(self, last, first=1):\\n            return [node(root, left, right)\\n                    for root in range(first, last+1)\\n                    for left in self.generateTrees(root-1, first)\\n                    for right in self.generateTrees(last, root+1)] or [None]\\n\\nJust another version, using loops instead of list comprehension:\\n\\n    def generateTrees(self, n):\\n        def generate(first, last):\\n            trees = []\\n            for root in range(first, last+1):\\n                for left in generate(first, root-1):\\n                    for right in generate(root+1, last):\\n                        node = TreeNode(root)\\n                        node.left = left\\n                        node.right = right\\n                        trees += node,\\n            return trees or [None]\\n        return generate(1, n)",
                "codeTag": "Java"
            },
            {
                "id": 1440128,
                "title": "python-dfs-with-memoization-clean-concise",
                "content": "**Idea**\\n- Let `dfs(left, right)` return all valid BSTs where values in the BST in range `[left..right]`.\\n- Then `dfs(1, n)` is our result.\\n- To solve `dfs(left, right)`, we just\\n\\t- Generate `root` value in range `[left...right]`\\n\\t- Get left subtrees by `leftNodes = dfs(left, root-1)`\\n\\t- Get right subtrees by `rightNodes = dfs(root+1, right)`.\\n\\t- Add all combination between `leftNodes` and `rightNodes` to form `root` trees.\\n- Can we cache the result of `dfs(left, right)` to prevent it to re-compute multiple time.\\n- There is a simillar problem, which is **[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/)**, try to solve it yourself.\\n```python\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        @lru_cache(None)\\n        def dfs(left, right):\\n            if left > right: return [None]\\n            if left == right: return [TreeNode(left)]\\n            ans = []\\n            for root in range(left, right+1):\\n                leftNodes = dfs(left, root - 1)\\n                rightNodes = dfs(root+1, right)\\n                for leftNode in leftNodes:\\n                    for rightNode in rightNodes:\\n                        rootNode = TreeNode(root, leftNode, rightNode)\\n                        ans.append(rootNode)\\n            return ans\\n        \\n        return dfs(1, n)\\n```\\n**Complexity**\\n- Time: `O(C0+C1+...Cn)`, where `Cn` is the [Catalan number](https://en.wikipedia.org/wiki/Catalan_number), `n <= 8`. Can check this problem [96. Unique Binary Search Trees](https://leetcode.com/problems/unique-binary-search-trees/) to know why the number of nodes in the BST with `n` nodes is a Catalan number.\\n\\t- The Catalan numbers for `n = 0, 1, 2, 3, 4, 5, 6, 7, 8` are `1, 1, 2, 5, 14, 42, 132, 429, 1430`.\\n- Space: `O(n * Cn)`, there is total `Cn` BSTs, each BST has `n` nodes.\\n\\nIf you think this **post is useful**, I\\'m happy if you **give a vote**. Any **questions or discussions are welcome!** Thank a lot.",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        @lru_cache(None)\\n        def dfs(left, right):\\n            if left > right: return [None]\\n            if left == right: return [TreeNode(left)]\\n            ans = []\\n            for root in range(left, right+1):\\n                leftNodes = dfs(left, root - 1)\\n                rightNodes = dfs(root+1, right)\\n                for leftNode in leftNodes:\\n                    for rightNode in rightNodes:\\n                        rootNode = TreeNode(root, leftNode, rightNode)\\n                        ans.append(rootNode)\\n            return ans\\n        \\n        return dfs(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31516,
                "title": "share-a-c-dp-solution-with-o-1-space",
                "content": "The basic idea is that we can construct the result of n node tree just from the result of n-1 node tree.\\nHere's how we do it: only 2 conditions: 1)  The nth node is the new root, so `newroot->left = oldroot;`\\n2) the nth node is not root, we traverse the old tree, every time the node in the old tree has a right child, we can perform: `old node->right = nth node, nth node ->left = right child;` and when we reach the end of the tree, don't forget we can also add the nth node here.\\nOne thing to notice is that every time we push a TreeNode in our result, I push the clone version of the root, and I recover what I do to the old node immediately. This is because you may use the old tree for several times.\\n   \\n\\n     class Solution {\\n        public:\\n            TreeNode* clone(TreeNode* root){\\n                if(root == nullptr)\\n                    return nullptr;\\n                TreeNode* newroot = new TreeNode(root->val);\\n                newroot->left = clone(root->left);\\n                newroot->right = clone(root->right);\\n                return newroot;\\n            }\\n            vector<TreeNode *> generateTrees(int n) {\\n                vector<TreeNode *> res(1,nullptr);\\n                for(int i = 1; i <= n; i++){\\n                    vector<TreeNode *> tmp;\\n                    for(int j = 0; j<res.size();j++){\\n                        TreeNode* oldroot = res[j];\\n                        TreeNode* root = new TreeNode(i);\\n                        TreeNode* target = clone(oldroot);\\n                        root->left = target;\\n                        tmp.push_back(root);\\n                       \\n                        if(oldroot!=nullptr){\\n                            TreeNode* tmpold = oldroot;\\n                            while(tmpold->right!=nullptr){\\n                                TreeNode* nonroot = new TreeNode(i);\\n                                TreeNode *tright = tmpold->right;\\n                                tmpold->right = nonroot;\\n                                nonroot->left = tright;\\n                                TreeNode *target = clone(oldroot);\\n                                tmp.push_back(target);\\n                                tmpold->right = tright;\\n                                tmpold = tmpold->right;\\n                            }\\n                            tmpold->right = new TreeNode(i);\\n                            TreeNode *target = clone(oldroot);\\n                            tmp.push_back(target);\\n                            tmpold->right = nullptr;\\n                        }\\n                    }\\n                    res=tmp;\\n                }\\n                return res;\\n            }\\n        };",
                "solutionTags": [],
                "code": "class Solution {\\n        public:\\n            TreeNode* clone(TreeNode* root){\\n                if(root == nullptr)\\n                    return nullptr;\\n                TreeNode* newroot = new TreeNode(root->val);\\n                newroot->left = clone(root->left);\\n                newroot->right = clone(root->right);\\n                return newroot;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 31563,
                "title": "my-accepted-c-solution-recursive-less-than-30-lines",
                "content": "**explaination:**\\nGiven a tree which n nodes, it has the follwing form: \\n(0)root(n-1)\\n(1)root(n-2)\\n(2)root(n-3)\\nwhere (x) denotes the trees with x  nodes.\\n\\nNow take n=3 for example. Given n=3, we have [1 2 3] in which each of them can be used as the tree root.\\n\\nwhen root=1: [1 # 2 # 3]; [1 # 3 2];\\nwhen root=2: [2 1 3]; \\nwhen root=3: (similar with the situations when root=1.)\\n\\nThus, if we write a recursive function who generates a group of trees in which the numbers range from *f* to *t*, we have to generate the left trees and right trees of each tree in the vector. \\n\\nI give the following recursive code and expect to see non-recursive ones. please! \\n\\n**code:**\\n\\n    vector<TreeNode *> generateTree(int from, int to)\\n    {\\n        vector<TreeNode *> ret;\\n        if(to - from < 0) ret.push_back(0);\\n        if(to - from == 0) ret.push_back(new TreeNode(from));\\n        if(to - from > 0)\\n        {\\n            for(int i=from; i<=to; i++)\\n            {\\n                vector<TreeNode *> l = generateTree(from, i-1);\\n                vector<TreeNode *> r = generateTree(i+1, to);\\n\\n                for(int j=0; j<l.size(); j++)\\n                {\\n                    for(int k=0; k<r.size(); k++)\\n                    {\\n                        TreeNode * h = new TreeNode (i);\\n                        h->left = l[j];\\n                        h->right = r[k];\\n                        ret.push_back(h);\\n                    }\\n                }\\n            }\\n        }\\n        return ret;\\n    }\\n    \\n    vector<TreeNode *> generateTrees(int n) {\\n        return generateTree(1, n);\\n    }",
                "solutionTags": [],
                "code": "**explaination:**\\nGiven a tree which n nodes, it has the follwing form: \\n(0)root(n-1)\\n(1)root(n-2)\\n(2)root(n-3)\\nwhere (x) denotes the trees with x  nodes.\\n\\nNow take n=3 for example. Given n=3, we have [1 2 3] in which each of them can be used as the tree root.\\n\\nwhen root=1: [1 # 2 # 3]; [1 # 3 2];\\nwhen root=2: [2 1 3]; \\nwhen root=3: (similar with the situations when root=1.)\\n\\nThus, if we write a recursive function who generates a group of trees in which the numbers range from *f* to *t*, we have to generate the left trees and right trees of each tree in the vector. \\n\\nI give the following recursive code and expect to see non-recursive ones. please! \\n\\n**code:**\\n\\n    vector<TreeNode *> generateTree(int from, int to)\\n    {\\n        vector<TreeNode *> ret;\\n        if(to - from < 0) ret.push_back(0);\\n        if(to - from == 0) ret.push_back(new TreeNode(from));\\n        if(to - from > 0)\\n        {\\n            for(int i=from; i<=to; i++)\\n            {\\n                vector<TreeNode *> l = generateTree(from, i-1);\\n                vector<TreeNode *> r = generateTree(i+1, to);\\n\\n                for(int j=0; j<l.size(); j++)\\n                {\\n                    for(int k=0; k<r.size(); k++)\\n                    {\\n                        TreeNode * h = new TreeNode (i);\\n                        h->left = l[j];\\n                        h->right = r[k];\\n                        ret.push_back(h);\\n                    }\\n                }\\n            }\\n        }\\n        return ret;\\n    }\\n    \\n    vector<TreeNode *> generateTrees(int n) {\\n        return generateTree(1, n);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 3864900,
                "title": "recursion-dp-video-catalan-number-unique-bst",
                "content": "Given an integer \\\\( n \\\\), the task is to return all the structurally unique BST\\'s (binary search trees) that have exactly \\\\( n \\\\) nodes of unique values from \\\\( 1 \\\\) to \\\\( n \\\\).\\n\\n# Intuition Recursion & Dynamic Programming\\nThe problem can be solved by utilizing the properties of a BST, where the left subtree has all values less than the root and the right subtree has values greater than the root. We can explore both recursive and dynamic programming (DP) approaches to generate all possible combinations of unique BSTs.\\n\\n# Live Coding & Explenation Recursion\\nhttps://youtu.be/HeB6Oufsg_o\\n\\n# n-th Catalan number\\n\\nIn the context of this task, the \\\\(n\\\\)-th Catalan number gives the number of distinct binary search trees that can be formed with \\\\(n\\\\) unique values. The \\\\(n\\\\)-th Catalan number is given by the formula:\\n\\n$$\\nC_n = \\\\frac{1}{n+1} \\\\binom{2n}{n} = \\\\frac{(2n)!}{(n+1)!n!}\\n$$\\n\\nThe time and space complexity of generating these trees are both $$O(C_n)$$, which is equivalent to $$O\\\\left(\\\\frac{4^n}{n\\\\sqrt{n}}\\\\right)$$.\\n\\nHere\\'s how it relates to the task:\\n\\n1. **Choosing the Root**: For each root value, we\\'re essentially dividing the problem into two subproblems (left and right subtrees), and the number of combinations for each division aligns with the recursive definition of the Catalan numbers.\\n   \\n2. **Recursive and Dynamic Programming Solutions**: Both approaches inherently follow the recursive nature of the Catalan numbers. The recursive approach directly corresponds to the recursive formula for the Catalan numbers, while the dynamic programming approach leverages the computed results for smaller subproblems to build up to the solution.\\n\\n3. **Number of Unique BSTs**: The fact that there are \\\\(C_n\\\\) unique BSTs with \\\\(n\\\\) nodes is a direct application of the Catalan numbers. The complexity of generating all these trees is thus closely tied to the value of the \\\\(n\\\\)-th Catalan number.\\n\\nIn conclusion, the complexity of the problem is inherently linked to the Catalan numbers, as they precisely describe the number of unique structures that can be formed, which in turn dictates the computational resources required to enumerate them.\\n\\n# Approach Short\\n\\n1. **Recursion**: Recursively construct left and right subtrees and combine them with each root.\\n2. **Dynamic Programming**: Use dynamic programming to store the result of subproblems (subtrees) and utilize them for constructing unique BSTs.\\n\\n## Approach Differences\\nThe recursive approach constructs the trees from scratch every time, while the DP approach reuses previously computed subtrees to avoid redundant work.\\n\\n# Approach Recursion\\n\\nThe recursive approach involves the following steps:\\n\\n1. **Base Case**: If the start index is greater than the end index, return a list containing `None`. This represents an empty tree and serves as the base case for the recursion.\\n\\n2. **Choose Root**: For every number \\\\( i \\\\) in the range from `start` to `end`, consider \\\\( i \\\\) as the root of the tree.\\n\\n3. **Generate Left Subtrees**: Recursively call the function to generate all possible left subtrees using numbers from `start` to \\\\( i-1 \\\\). This forms the left child of the root.\\n\\n4. **Generate Right Subtrees**: Recursively call the function to generate all possible right subtrees using numbers from \\\\( i+1 \\\\) to `end`. This forms the right child of the root.\\n\\n5. **Combine Subtrees**: For each combination of left and right subtrees, create a new tree with \\\\( i \\\\) as the root and the corresponding left and right subtrees. Append this tree to the list of all possible trees.\\n\\n6. **Return Trees**: Finally, return the list of all trees generated.\\n\\n# Complexity Recursion\\n- Time complexity: $$O(\\\\frac{4^n}{n\\\\sqrt{n}})$$\\n- Space complexity: $$ O(\\\\frac{4^n}{n\\\\sqrt{n}}) $$\\n\\n# Performance Recursion\\n\\n| Language   | Runtime (ms) | Beats (%) | Memory (MB) | Beats (%) |\\n|------------|--------------|-----------|-------------|-----------|\\n| Rust       | 0            | 100       | 2.5         | 80        |\\n| Java       | 1            | 99.88     | 43.7        | 66.87     |\\n| Go         | 3            | 56.88     | 4.4         | 63.30     |\\n| C++        | 16           | 75.53     | 16.2        | 20.99     |\\n| Python3    | 53           | 97.4      | 18.1        | 27.83     |\\n| JavaScript | 74           | 89.61     | 48.4        | 55.19     |\\n| C#         | 91           | 88.76     | 39.8        | 19.10     |\\n\\n![performance_recursion_updated.png](https://assets.leetcode.com/users/images/bede177d-f334-42bd-85ec-517c600b7ef7_1691199606.5911264.png)\\n\\n\\n# Code Recursion\\n``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        def generate_trees(start, end):\\n            if start > end:\\n                return [None,]\\n            \\n            all_trees = []\\n            for i in range(start, end + 1):\\n                left_trees = generate_trees(start, i - 1)\\n                right_trees = generate_trees(i + 1, end)\\n                \\n                for l in left_trees:\\n                    for r in right_trees:\\n                        current_tree = TreeNode(i)\\n                        current_tree.left = l\\n                        current_tree.right = r\\n                        all_trees.append(current_tree)\\n            \\n            return all_trees\\n        \\n        return generate_trees(1, n) if n else []\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n ? generate_trees(1, n) : vector<TreeNode*>();\\n    }\\n\\nprivate:\\n    vector<TreeNode*> generate_trees(int start, int end) {\\n        if (start > end) return {nullptr};\\n\\n        vector<TreeNode*> all_trees;\\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left_trees = generate_trees(start, i - 1);\\n            vector<TreeNode*> right_trees = generate_trees(i + 1, end);\\n\\n            for (TreeNode* l : left_trees) {\\n                for (TreeNode* r : right_trees) {\\n                    TreeNode* current_tree = new TreeNode(i);\\n                    current_tree->left = l;\\n                    current_tree->right = r;\\n                    all_trees.push_back(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n};\\n```\\n``` Java []\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return n > 0 ? generate_trees(1, n) : new ArrayList<>();\\n    }\\n\\n    private List<TreeNode> generate_trees(int start, int end) {\\n        List<TreeNode> all_trees = new ArrayList<>();\\n        if (start > end) {\\n            all_trees.add(null);\\n            return all_trees;\\n        }\\n\\n        for (int i = start; i <= end; i++) {\\n            List<TreeNode> left_trees = generate_trees(start, i - 1);\\n            List<TreeNode> right_trees = generate_trees(i + 1, end);\\n\\n            for (TreeNode l : left_trees) {\\n                for (TreeNode r : right_trees) {\\n                    TreeNode current_tree = new TreeNode(i);\\n                    current_tree.left = l;\\n                    current_tree.right = r;\\n                    all_trees.add(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n}\\n```\\n``` JavaScript []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    function generate_trees(start, end) {\\n        if (start > end) return [null];\\n\\n        const all_trees = [];\\n        for (let i = start; i <= end; i++) {\\n            const left_trees = generate_trees(start, i - 1);\\n            const right_trees = generate_trees(i + 1, end);\\n\\n            for (const l of left_trees) {\\n                for (const r of right_trees) {\\n                    const current_tree = new TreeNode(i);\\n                    current_tree.left = l;\\n                    current_tree.right = r;\\n                    all_trees.push(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n\\n    return generate_trees(1, n);\\n};\\n```\\n``` C# []\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        return n > 0 ? GenerateTrees(1, n) : new List<TreeNode>();\\n    }\\n\\n    private IList<TreeNode> GenerateTrees(int start, int end) {\\n        if (start > end) return new List<TreeNode> {null};\\n\\n        var all_trees = new List<TreeNode>();\\n        for (int i = start; i <= end; i++) {\\n            var left_trees = GenerateTrees(start, i - 1);\\n            var right_trees = GenerateTrees(i + 1, end);\\n\\n            foreach (var l in left_trees) {\\n                foreach (var r in right_trees) {\\n                    var current_tree = new TreeNode(i, l, r);\\n                    all_trees.Add(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n}\\n```\\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n        Self::generate(1, n)\\n    }\\n\\n    fn generate(start: i32, end: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if start > end {\\n            return vec![None];\\n        }\\n\\n        let mut all_trees = Vec::new();\\n        for i in start..=end {\\n            let left_trees = Self::generate(start, i - 1);\\n            let right_trees = Self::generate(i + 1, end);\\n\\n            for l in &left_trees {\\n                for r in &right_trees {\\n                    let current_tree = Some(Rc::new(RefCell::new(TreeNode::new(i))));\\n                    current_tree.as_ref().unwrap().borrow_mut().left = l.clone();\\n                    current_tree.as_ref().unwrap().borrow_mut().right = r.clone();\\n                    all_trees.push(current_tree);\\n                }\\n            }\\n        }\\n        all_trees\\n    }\\n}\\n```\\n``` Go []\\nfunc generateTrees(n int) []*TreeNode {\\n\\tif n == 0 {\\n\\t\\treturn []*TreeNode{}\\n\\t}\\n\\treturn generate(1, n)\\n}\\n\\nfunc generate(start, end int) []*TreeNode {\\n\\tif start > end {\\n\\t\\treturn []*TreeNode{nil}\\n\\t}\\n\\n\\tvar allTrees []*TreeNode\\n\\tfor i := start; i <= end; i++ {\\n\\t\\tleftTrees := generate(start, i-1)\\n\\t\\trightTrees := generate(i+1, end)\\n\\n\\t\\tfor _, l := range leftTrees {\\n\\t\\t\\tfor _, r := range rightTrees {\\n\\t\\t\\t\\tcurrentTree := &TreeNode{Val: i, Left: l, Right: r}\\n\\t\\t\\t\\tallTrees = append(allTrees, currentTree)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allTrees\\n}\\n```\\n\\n# Approach Dynamic Programming\\n\\n1. **Initialization**: Create a DP table `dp` where `dp[i]` will store all the unique BSTs with `i` nodes. Initialize `dp[0]` with a single `None` value representing an empty tree.\\n\\n2. **Iterate Over Number of Nodes**: For every number `nodes` from 1 to `n`, iterate and construct all possible trees with `nodes` number of nodes.\\n\\n3. **Choose Root**: For every possible root value within the current `nodes`, iterate and use the root to build trees.\\n\\n4. **Use Previously Computed Subtrees**: For the chosen root, use the previously computed `dp[root - 1]` for left subtrees and `dp[nodes - root]` for right subtrees.\\n\\n5. **Clone Right Subtree**: Since the right subtree\\'s values will be affected by the choice of the root, clone the right subtree with an offset equal to the root value. The `clone` function handles this.\\n\\n6. **Combine Subtrees**: Create a new tree by combining the current root with the left and right subtrees. Append this tree to `dp[nodes]`.\\n\\n7. **Return Result**: Finally, return the trees stored in `dp[n]`.\\n\\n# Complexity Dynamic Programming\\n- Time complexity: $$O(\\\\frac{4^n}{n\\\\sqrt{n}})$$\\n- Space complexity: $$ O(\\\\frac{4^n}{n\\\\sqrt{n}}) $$\\n\\n# Performance Dynamic Programming\\n\\n| Language   | Runtime (ms) | Beats (%) | Memory (MB) | Beats (%) |\\n|------------|--------------|-----------|-------------|-----------|\\n| Rust       | 0            | 100       | 2.7         | 20        |\\n| Java       | 1            | 99.88     | 44.1        | 8.87      |\\n| Go         | 3            | 56.88     | 4.2         | 90.83     |\\n| C++        | 10           | 96.72     | 12.5        | 86.56     |\\n| JavaScript | 67           | 96.75     | 48.5        | 55.19     |\\n| Python3    | 49           | 98.84     | 18.1        | 21.91     |\\n| C#         | 91           | 88.76     | 38.5        | 80.90     |\\n\\n![performance_dynamic_programming.png](https://assets.leetcode.com/users/images/172a4ebb-facf-4b20-8c7b-1c59a891ea05_1691199566.481603.png)\\n\\n\\n# Code Dynamic Programming\\n``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        if n == 0:\\n            return []\\n\\n        dp = [[] for _ in range(n + 1)]\\n        dp[0].append(None)\\n        for nodes in range(1, n + 1):\\n            for root in range(1, nodes + 1):\\n                for left_tree in dp[root - 1]:\\n                    for right_tree in dp[nodes - root]:\\n                        root_node = TreeNode(root)\\n                        root_node.left = left_tree\\n                        root_node.right = self.clone(right_tree, root)\\n                        dp[nodes].append(root_node)\\n        return dp[n]\\n    \\n    def clone(self, n: TreeNode, offset: int) -> TreeNode:\\n        if n:\\n            node = TreeNode(n.val + offset)\\n            node.left = self.clone(n.left, offset)\\n            node.right = self.clone(n.right, offset)\\n            return node\\n        return None\\n```\\n``` C++ []\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) return {};\\n\\n        vector<vector<TreeNode*>> dp(n + 1);\\n        dp[0].push_back(nullptr);\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            for (int root = 1; root <= nodes; root++) {\\n                for (TreeNode* left_tree : dp[root - 1]) {\\n                    for (TreeNode* right_tree : dp[nodes - root]) {\\n                        TreeNode* root_node = new TreeNode(root);\\n                        root_node->left = left_tree;\\n                        root_node->right = clone(right_tree, root);\\n                        dp[nodes].push_back(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\nprivate:\\n    TreeNode* clone(TreeNode* n, int offset) {\\n        if (n == nullptr) return nullptr;\\n        TreeNode* node = new TreeNode(n->val + offset);\\n        node->left = clone(n->left, offset);\\n        node->right = clone(n->right, offset);\\n        return node;\\n    }\\n};\\n```\\n``` Java []\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) return new ArrayList<>();\\n\\n        List<TreeNode>[] dp = new ArrayList[n + 1];\\n        dp[0] = new ArrayList<>();\\n        dp[0].add(null);\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            dp[nodes] = new ArrayList<>();\\n            for (int root = 1; root <= nodes; root++) {\\n                for (TreeNode left_tree : dp[root - 1]) {\\n                    for (TreeNode right_tree : dp[nodes - root]) {\\n                        TreeNode root_node = new TreeNode(root);\\n                        root_node.left = left_tree;\\n                        root_node.right = clone(right_tree, root);\\n                        dp[nodes].add(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\n    private TreeNode clone(TreeNode n, int offset) {\\n        if (n == null) return null;\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = clone(n.left, offset);\\n        node.right = clone(n.right, offset);\\n        return node;\\n    }\\n}\\n```\\n``` JavaScript []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```\\n``` C# []\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>();\\n\\n        var dp = new List<TreeNode>[n + 1];\\n        dp[0] = new List<TreeNode> { null };\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            dp[nodes] = new List<TreeNode>();\\n            for (int root = 1; root <= nodes; root++) {\\n                foreach (var left_tree in dp[root - 1]) {\\n                    foreach (var right_tree in dp[nodes - root]) {\\n                        TreeNode root_node = new TreeNode(root);\\n                        root_node.left = left_tree;\\n                        root_node.right = Clone(right_tree, root);\\n                        dp[nodes].Add(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\n    private TreeNode Clone(TreeNode n, int offset) {\\n        if (n == null) return null;\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = Clone(n.left, offset);\\n        node.right = Clone(n.right, offset);\\n        return node;\\n    }\\n}\\n```\\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n\\n        let mut dp = vec![Vec::new(); (n + 1) as usize];\\n        dp[0].push(None);\\n        for nodes in 1..=n {\\n            let mut trees_per_node = Vec::new();\\n            for root in 1..=nodes {\\n                let left_trees = &dp[(root - 1) as usize];\\n                let right_trees = &dp[(nodes - root) as usize];\\n                for left_tree in left_trees {\\n                    for right_tree in right_trees {\\n                        let root_node = Some(Rc::new(RefCell::new(TreeNode::new(root))));\\n                        root_node.as_ref().unwrap().borrow_mut().left = left_tree.clone();\\n                        root_node.as_ref().unwrap().borrow_mut().right = Solution::clone(right_tree.clone(), root);\\n                        trees_per_node.push(root_node);\\n                    }\\n                }\\n            }\\n            dp[nodes as usize] = trees_per_node;\\n        }\\n        dp[n as usize].clone()\\n    }\\n\\n    fn clone(tree: Option<Rc<RefCell<TreeNode>>>, offset: i32) -> Option<Rc<RefCell<TreeNode>>> {\\n        tree.map(|node| {\\n            Rc::new(RefCell::new(TreeNode {\\n                val: node.borrow().val + offset,\\n                left: Solution::clone(node.borrow().left.clone(), offset),\\n                right: Solution::clone(node.borrow().right.clone(), offset),\\n            }))\\n        })\\n    }\\n}\\n```\\n``` Go []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```\\n\\nThe time and space complexity for both approaches are the same. The $$ O(\\\\frac{4^n}{n\\\\sqrt{n}}) $$ complexity arises from the Catalan number, which gives the number of BSTs for a given \\\\( n \\\\).\\n\\nI hope you find this solution helpful in understanding how to generate all structurally unique Binary Search Trees (BSTs) for a given number n. If you have any further questions or need additional clarifications, please don\\'t hesitate to ask. If you understood the solution and found it beneficial, please consider giving it an upvote. Happy coding, and may your coding journey be filled with success and satisfaction! \\uD83D\\uDE80\\uD83D\\uDC68\\u200D\\uD83D\\uDCBB\\uD83D\\uDC69\\u200D\\uD83D\\uDCBB",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "C#",
                    "JavaScript",
                    "Go",
                    "Rust",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        def generate_trees(start, end):\\n            if start > end:\\n                return [None,]\\n            \\n            all_trees = []\\n            for i in range(start, end + 1):\\n                left_trees = generate_trees(start, i - 1)\\n                right_trees = generate_trees(i + 1, end)\\n                \\n                for l in left_trees:\\n                    for r in right_trees:\\n                        current_tree = TreeNode(i)\\n                        current_tree.left = l\\n                        current_tree.right = r\\n                        all_trees.append(current_tree)\\n            \\n            return all_trees\\n        \\n        return generate_trees(1, n) if n else []\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n ? generate_trees(1, n) : vector<TreeNode*>();\\n    }\\n\\nprivate:\\n    vector<TreeNode*> generate_trees(int start, int end) {\\n        if (start > end) return {nullptr};\\n\\n        vector<TreeNode*> all_trees;\\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left_trees = generate_trees(start, i - 1);\\n            vector<TreeNode*> right_trees = generate_trees(i + 1, end);\\n\\n            for (TreeNode* l : left_trees) {\\n                for (TreeNode* r : right_trees) {\\n                    TreeNode* current_tree = new TreeNode(i);\\n                    current_tree->left = l;\\n                    current_tree->right = r;\\n                    all_trees.push_back(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n};\\n```\n``` Java []\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return n > 0 ? generate_trees(1, n) : new ArrayList<>();\\n    }\\n\\n    private List<TreeNode> generate_trees(int start, int end) {\\n        List<TreeNode> all_trees = new ArrayList<>();\\n        if (start > end) {\\n            all_trees.add(null);\\n            return all_trees;\\n        }\\n\\n        for (int i = start; i <= end; i++) {\\n            List<TreeNode> left_trees = generate_trees(start, i - 1);\\n            List<TreeNode> right_trees = generate_trees(i + 1, end);\\n\\n            for (TreeNode l : left_trees) {\\n                for (TreeNode r : right_trees) {\\n                    TreeNode current_tree = new TreeNode(i);\\n                    current_tree.left = l;\\n                    current_tree.right = r;\\n                    all_trees.add(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n}\\n```\n``` JavaScript []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    function generate_trees(start, end) {\\n        if (start > end) return [null];\\n\\n        const all_trees = [];\\n        for (let i = start; i <= end; i++) {\\n            const left_trees = generate_trees(start, i - 1);\\n            const right_trees = generate_trees(i + 1, end);\\n\\n            for (const l of left_trees) {\\n                for (const r of right_trees) {\\n                    const current_tree = new TreeNode(i);\\n                    current_tree.left = l;\\n                    current_tree.right = r;\\n                    all_trees.push(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n\\n    return generate_trees(1, n);\\n};\\n```\n``` C# []\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        return n > 0 ? GenerateTrees(1, n) : new List<TreeNode>();\\n    }\\n\\n    private IList<TreeNode> GenerateTrees(int start, int end) {\\n        if (start > end) return new List<TreeNode> {null};\\n\\n        var all_trees = new List<TreeNode>();\\n        for (int i = start; i <= end; i++) {\\n            var left_trees = GenerateTrees(start, i - 1);\\n            var right_trees = GenerateTrees(i + 1, end);\\n\\n            foreach (var l in left_trees) {\\n                foreach (var r in right_trees) {\\n                    var current_tree = new TreeNode(i, l, r);\\n                    all_trees.Add(current_tree);\\n                }\\n            }\\n        }\\n        return all_trees;\\n    }\\n}\\n```\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n        Self::generate(1, n)\\n    }\\n\\n    fn generate(start: i32, end: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if start > end {\\n            return vec![None];\\n        }\\n\\n        let mut all_trees = Vec::new();\\n        for i in start..=end {\\n            let left_trees = Self::generate(start, i - 1);\\n            let right_trees = Self::generate(i + 1, end);\\n\\n            for l in &left_trees {\\n                for r in &right_trees {\\n                    let current_tree = Some(Rc::new(RefCell::new(TreeNode::new(i))));\\n                    current_tree.as_ref().unwrap().borrow_mut().left = l.clone();\\n                    current_tree.as_ref().unwrap().borrow_mut().right = r.clone();\\n                    all_trees.push(current_tree);\\n                }\\n            }\\n        }\\n        all_trees\\n    }\\n}\\n```\n``` Go []\\nfunc generateTrees(n int) []*TreeNode {\\n\\tif n == 0 {\\n\\t\\treturn []*TreeNode{}\\n\\t}\\n\\treturn generate(1, n)\\n}\\n\\nfunc generate(start, end int) []*TreeNode {\\n\\tif start > end {\\n\\t\\treturn []*TreeNode{nil}\\n\\t}\\n\\n\\tvar allTrees []*TreeNode\\n\\tfor i := start; i <= end; i++ {\\n\\t\\tleftTrees := generate(start, i-1)\\n\\t\\trightTrees := generate(i+1, end)\\n\\n\\t\\tfor _, l := range leftTrees {\\n\\t\\t\\tfor _, r := range rightTrees {\\n\\t\\t\\t\\tcurrentTree := &TreeNode{Val: i, Left: l, Right: r}\\n\\t\\t\\t\\tallTrees = append(allTrees, currentTree)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn allTrees\\n}\\n```\n``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        if n == 0:\\n            return []\\n\\n        dp = [[] for _ in range(n + 1)]\\n        dp[0].append(None)\\n        for nodes in range(1, n + 1):\\n            for root in range(1, nodes + 1):\\n                for left_tree in dp[root - 1]:\\n                    for right_tree in dp[nodes - root]:\\n                        root_node = TreeNode(root)\\n                        root_node.left = left_tree\\n                        root_node.right = self.clone(right_tree, root)\\n                        dp[nodes].append(root_node)\\n        return dp[n]\\n    \\n    def clone(self, n: TreeNode, offset: int) -> TreeNode:\\n        if n:\\n            node = TreeNode(n.val + offset)\\n            node.left = self.clone(n.left, offset)\\n            node.right = self.clone(n.right, offset)\\n            return node\\n        return None\\n```\n``` C++ []\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) return {};\\n\\n        vector<vector<TreeNode*>> dp(n + 1);\\n        dp[0].push_back(nullptr);\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            for (int root = 1; root <= nodes; root++) {\\n                for (TreeNode* left_tree : dp[root - 1]) {\\n                    for (TreeNode* right_tree : dp[nodes - root]) {\\n                        TreeNode* root_node = new TreeNode(root);\\n                        root_node->left = left_tree;\\n                        root_node->right = clone(right_tree, root);\\n                        dp[nodes].push_back(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\nprivate:\\n    TreeNode* clone(TreeNode* n, int offset) {\\n        if (n == nullptr) return nullptr;\\n        TreeNode* node = new TreeNode(n->val + offset);\\n        node->left = clone(n->left, offset);\\n        node->right = clone(n->right, offset);\\n        return node;\\n    }\\n};\\n```\n``` Java []\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) return new ArrayList<>();\\n\\n        List<TreeNode>[] dp = new ArrayList[n + 1];\\n        dp[0] = new ArrayList<>();\\n        dp[0].add(null);\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            dp[nodes] = new ArrayList<>();\\n            for (int root = 1; root <= nodes; root++) {\\n                for (TreeNode left_tree : dp[root - 1]) {\\n                    for (TreeNode right_tree : dp[nodes - root]) {\\n                        TreeNode root_node = new TreeNode(root);\\n                        root_node.left = left_tree;\\n                        root_node.right = clone(right_tree, root);\\n                        dp[nodes].add(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\n    private TreeNode clone(TreeNode n, int offset) {\\n        if (n == null) return null;\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = clone(n.left, offset);\\n        node.right = clone(n.right, offset);\\n        return node;\\n    }\\n}\\n```\n``` JavaScript []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```\n``` C# []\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>();\\n\\n        var dp = new List<TreeNode>[n + 1];\\n        dp[0] = new List<TreeNode> { null };\\n        for (int nodes = 1; nodes <= n; nodes++) {\\n            dp[nodes] = new List<TreeNode>();\\n            for (int root = 1; root <= nodes; root++) {\\n                foreach (var left_tree in dp[root - 1]) {\\n                    foreach (var right_tree in dp[nodes - root]) {\\n                        TreeNode root_node = new TreeNode(root);\\n                        root_node.left = left_tree;\\n                        root_node.right = Clone(right_tree, root);\\n                        dp[nodes].Add(root_node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n\\n    private TreeNode Clone(TreeNode n, int offset) {\\n        if (n == null) return null;\\n        TreeNode node = new TreeNode(n.val + offset);\\n        node.left = Clone(n.left, offset);\\n        node.right = Clone(n.right, offset);\\n        return node;\\n    }\\n}\\n```\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n\\n        let mut dp = vec![Vec::new(); (n + 1) as usize];\\n        dp[0].push(None);\\n        for nodes in 1..=n {\\n            let mut trees_per_node = Vec::new();\\n            for root in 1..=nodes {\\n                let left_trees = &dp[(root - 1) as usize];\\n                let right_trees = &dp[(nodes - root) as usize];\\n                for left_tree in left_trees {\\n                    for right_tree in right_trees {\\n                        let root_node = Some(Rc::new(RefCell::new(TreeNode::new(root))));\\n                        root_node.as_ref().unwrap().borrow_mut().left = left_tree.clone();\\n                        root_node.as_ref().unwrap().borrow_mut().right = Solution::clone(right_tree.clone(), root);\\n                        trees_per_node.push(root_node);\\n                    }\\n                }\\n            }\\n            dp[nodes as usize] = trees_per_node;\\n        }\\n        dp[n as usize].clone()\\n    }\\n\\n    fn clone(tree: Option<Rc<RefCell<TreeNode>>>, offset: i32) -> Option<Rc<RefCell<TreeNode>>> {\\n        tree.map(|node| {\\n            Rc::new(RefCell::new(TreeNode {\\n                val: node.borrow().val + offset,\\n                left: Solution::clone(node.borrow().left.clone(), offset),\\n                right: Solution::clone(node.borrow().right.clone(), offset),\\n            }))\\n        })\\n    }\\n}\\n```\n``` Go []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31592,
                "title": "recursive-python-solution",
                "content": "    class Solution(object):\\n        def generateTrees(self, n):\\n            \"\"\"\\n            :type n: int\\n            :rtype: List[TreeNode]\\n            \"\"\"\\n            if n == 0:\\n                return [[]]\\n            return self.dfs(1, n+1)\\n            \\n        def dfs(self, start, end):\\n            if start == end:\\n                return None\\n            result = []\\n            for i in xrange(start, end):\\n                for l in self.dfs(start, i) or [None]:\\n                    for r in self.dfs(i+1, end) or [None]:\\n                        node = TreeNode(i)\\n                        node.left, node.right  = l, r\\n                        result.append(node)\\n            return result\\n\\nUse start/end instead of actual nodes to bosst the program.",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution(object):\\n        def generateTrees(self, n):\\n            \"\"\"\\n            :type n: int\\n            :rtype: List[TreeNode]\\n            \"\"\"\\n            if n == 0:\\n                return [[]]\\n            return self.dfs(1, n+1)\\n            \\n        def dfs(self, start, end):\\n            if start == end:\\n                return None\\n            result = []\\n            for i in xrange(start, end):\\n                for l in self.dfs(start, i) or [None]:\\n                    for r in self.dfs(i+1, end) or [None]:\\n                        node = TreeNode(i)\\n                        node.left, node.right  = l, r\\n                        result.append(node)\\n            return result\\n\\nUse start/end instead of actual nodes to bosst the program.",
                "codeTag": "Java"
            },
            {
                "id": 1440883,
                "title": "small-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s)\\n            return {nullptr};\\n\\t\\t\\t\\n\\t\\t// Consider every number in range [s,n] as root \\n        for(int i=s; i<=n; i++) {\\n\\t\\t\\n\\t\\t\\t// generate all possible trees in range [s,i)\\n            for(auto left: generateTrees(i-1, s)) {\\n\\t\\t\\t\\n\\t\\t\\t\\t// generate all possible trees in range (i,e]\\n                for(auto right: generateTrees(n, i+1))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// make new trees with i as the root\\n                    ans.push_back(new TreeNode(i, left, right));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s)\\n            return {nullptr};\\n\\t\\t\\t\\n\\t\\t// Consider every number in range [s,n] as root \\n        for(int i=s; i<=n; i++) {\\n\\t\\t\\n\\t\\t\\t// generate all possible trees in range [s,i)\\n            for(auto left: generateTrees(i-1, s)) {\\n\\t\\t\\t\\n\\t\\t\\t\\t// generate all possible trees in range (i,e]\\n                for(auto right: generateTrees(n, i+1))\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// make new trees with i as the root\\n                    ans.push_back(new TreeNode(i, left, right));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31552,
                "title": "java-dp-solution-and-brute-force-recursive-solution",
                "content": "The first method that came to mind was the brute force solution as below. \\n\\n     public List<TreeNode> generateTrees(int n) {\\n         return generateTrees(1,n);\\n     }\\n    \\n    public List<TreeNode> generateTrees(int start,int end){             \\n        List<TreeNode> trees = new ArrayList<TreeNode>();\\n        if(start>end){  trees.add(null); return trees;}\\n    \\n        for(int rootValue=start;rootValue<=end;rootValue++){\\n            List<TreeNode> leftSubTrees=generateTrees(start,rootValue-1);\\n            List<TreeNode> rightSubTrees=generateTrees(rootValue+1,end);\\n    \\n            for(TreeNode leftSubTree:leftSubTrees){\\n                for(TreeNode rightSubTree:rightSubTrees){\\n                    TreeNode root=new TreeNode(rootValue);\\n                    root.left=leftSubTree;\\n                    root.right=rightSubTree;\\n                    trees.add(root);\\n                }\\n            }\\n        }\\n        return trees;\\n    }\\n\\n\\n\\nThen @6219221 reminded me it is unnecessary to create the BSTs with all brand new nodes. \\nAssume you have a list of all BSTs with values from 1 to n-1, every possible way to insert value n only involves changing the right tree (root inclusive) because n is always greater than root.val and the left subtree structure is fixed. So all we gotta do is to create a new copy of the right part of the tree and point the new root.left to the original left subtree. This way we reuse the left tree, which saves time and space.\\n\\nHow to insert Node n into the right subtree?\\nGiven any BST on the n - 1 level, it will be only valid to put n on the root.right, root.right.right or root.right.....right locations and then move the right subtree of n.right...right to become the left child of n, in order to keep n on the right-most position as the greatest value in the tree.\\n\\nHere is my implementation. Note that I do the dp from [n] back to [n to 1]. Therefore all the right subtree structures are fixed and new values are inserted into the left side, opposite to making BSTs from 1 to [1 to n].\\n\\n        public List<TreeNode> generateTrees(int n) {\\n            List<TreeNode> res = new ArrayList<>();\\n            res.add(null);\\n            for(; n > 0; n--) {\\n                List<TreeNode> next = new ArrayList<>();\\n                for(TreeNode node: res) {\\n                    //the special case when Node(n) is root of new tree\\n                    TreeNode root = new TreeNode(n); \\n                    root.right = node;\\n                    next.add(root);\\n                   //while loop inserts new value to every possible position into the left tree side\\n                    while(node != null) {\\n                        TreeNode cRoot = new TreeNode(root.right.val);\\n                        //clone left subtree\\n                        cRoot.left = copyTree(root.right.left);\\n                        //reusing - point new root.right to the original right subtree\\n                        cRoot.right = root.right.right;\\n                        //curr is the cutoff node whose right child will be replaced by the new n \\n                        TreeNode curr = getValNode(cRoot, node.val); \\n                        //place n as curr's right child, make curr's original right child as the left child of n.\\n                        TreeNode tmp = curr.left;\\n                        curr.left = new TreeNode(n);\\n                        curr.left.right = tmp;\\n\\n                        next.add(cRoot);\\n                        node = node.left;\\n                    }\\n                }\\n                res = next;\\n            }\\n            return res;\\n        }\\n        private TreeNode getValNode(TreeNode n, int val) { //find the cutoff node in the new tree\\n            while(n != null) {\\n                if(n.val == val) break;\\n                n = n.left;\\n            }\\n            return n;\\n        }\\n\\n        private TreeNode copyTree(TreeNode root) { //clone the right subtree\\n            if(root == null) return null;\\n            TreeNode cRoot = new TreeNode(root.val);\\n            cRoot.left = copyTree(root.left);\\n            cRoot.right = copyTree(root.right);\\n            return cRoot;\\n        }",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "The first method that came to mind was the brute force solution as below. \\n\\n     public List<TreeNode> generateTrees(int n) {\\n         return generateTrees(1,n);\\n     }\\n    \\n    public List<TreeNode> generateTrees(int start,int end){             \\n        List<TreeNode> trees = new ArrayList<TreeNode>();\\n        if(start>end){  trees.add(null); return trees;}\\n    \\n        for(int rootValue=start;rootValue<=end;rootValue++){\\n            List<TreeNode> leftSubTrees=generateTrees(start,rootValue-1);\\n            List<TreeNode> rightSubTrees=generateTrees(rootValue+1,end);\\n    \\n            for(TreeNode leftSubTree:leftSubTrees){\\n                for(TreeNode rightSubTree:rightSubTrees){\\n                    TreeNode root=new TreeNode(rootValue);\\n                    root.left=leftSubTree;\\n                    root.right=rightSubTree;\\n                    trees.add(root);\\n                }\\n            }\\n        }\\n        return trees;\\n    }\\n\\n\\n\\nThen @6219221 reminded me it is unnecessary to create the BSTs with all brand new nodes. \\nAssume you have a list of all BSTs with values from 1 to n-1, every possible way to insert value n only involves changing the right tree (root inclusive) because n is always greater than root.val and the left subtree structure is fixed. So all we gotta do is to create a new copy of the right part of the tree and point the new root.left to the original left subtree. This way we reuse the left tree, which saves time and space.\\n\\nHow to insert Node n into the right subtree?\\nGiven any BST on the n - 1 level, it will be only valid to put n on the root.right, root.right.right or root.right.....right locations and then move the right subtree of n.right...right to become the left child of n, in order to keep n on the right-most position as the greatest value in the tree.\\n\\nHere is my implementation. Note that I do the dp from [n] back to [n to 1]. Therefore all the right subtree structures are fixed and new values are inserted into the left side, opposite to making BSTs from 1 to [1 to n].\\n\\n        public List<TreeNode> generateTrees(int n) {\\n            List<TreeNode> res = new ArrayList<>();\\n            res.add(null);\\n            for(; n > 0; n--) {\\n                List<TreeNode> next = new ArrayList<>();\\n                for(TreeNode node: res) {\\n                    //the special case when Node(n) is root of new tree\\n                    TreeNode root = new TreeNode(n); \\n                    root.right = node;\\n                    next.add(root);\\n                   //while loop inserts new value to every possible position into the left tree side\\n                    while(node != null) {\\n                        TreeNode cRoot = new TreeNode(root.right.val);\\n                        //clone left subtree\\n                        cRoot.left = copyTree(root.right.left);\\n                        //reusing - point new root.right to the original right subtree\\n                        cRoot.right = root.right.right;\\n                        //curr is the cutoff node whose right child will be replaced by the new n \\n                        TreeNode curr = getValNode(cRoot, node.val); \\n                        //place n as curr's right child, make curr's original right child as the left child of n.\\n                        TreeNode tmp = curr.left;\\n                        curr.left = new TreeNode(n);\\n                        curr.left.right = tmp;\\n\\n                        next.add(cRoot);\\n                        node = node.left;\\n                    }\\n                }\\n                res = next;\\n            }\\n            return res;\\n        }\\n        private TreeNode getValNode(TreeNode n, int val) { //find the cutoff node in the new tree\\n            while(n != null) {\\n                if(n.val == val) break;\\n                n = n.left;\\n            }\\n            return n;\\n        }\\n\\n        private TreeNode copyTree(TreeNode root) { //clone the right subtree\\n            if(root == null) return null;\\n            TreeNode cRoot = new TreeNode(root.val);\\n            cRoot.left = copyTree(root.left);\\n            cRoot.right = copyTree(root.right);\\n            return cRoot;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 703236,
                "title": "c-simple-and-short",
                "content": "***Plz upvote if you like it***\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> helper(int start,int end) {\\n        vector<TreeNode*> v;\\n        if(start > end) {\\n            v.push_back(NULL);\\n            return v;\\n        }\\n        for(int i = start; i <= end; i++){\\n            auto left = helper(start,i-1);\\n            auto right = helper(i+1,end);\\n            for(auto l : left) {\\n                for(auto r : right){\\n                    TreeNode* newNode = new TreeNode(i, l, r);\\n                    v.push_back(newNode);\\n                }\\n            }\\n        }\\n        return v;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) \\n            return vector<TreeNode*>();\\n        auto ans = helper(1,n);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> helper(int start,int end) {\\n        vector<TreeNode*> v;\\n        if(start > end) {\\n            v.push_back(NULL);\\n            return v;\\n        }\\n        for(int i = start; i <= end; i++){\\n            auto left = helper(start,i-1);\\n            auto right = helper(i+1,end);\\n            for(auto l : left) {\\n                for(auto r : right){\\n                    TreeNode* newNode = new TreeNode(i, l, r);\\n                    v.push_back(newNode);\\n                }\\n            }\\n        }\\n        return v;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) \\n            return vector<TreeNode*>();\\n        auto ans = helper(1,n);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1023791,
                "title": "java-recursion-along-with-recursion-tree-figure-explanation",
                "content": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        return helper(1, n);\\n    }\\n    \\n    private List<TreeNode> helper(int lo, int hi) {\\n        List<TreeNode> result = new ArrayList<>();\\n        //base case\\n        if (lo > hi) {\\n            result.add(null);\\n            return result;\\n        }\\n        \\n        //subproblem to reach boootm\\n        for (int i = lo; i <= hi; i++) {\\n            List<TreeNode> left = helper(lo, i - 1);\\n            List<TreeNode> right = helper(i + 1, hi);\\n            //reconstruct tree from bottom to up\\n            for (TreeNode l : left) {\\n                for (TreeNode r : right) {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = l;\\n                    root.right = r;\\n                    result.add(root);\\n                }\\n            }\\n        }\\n        //return list of root to last layer\\n        return result;\\n    }\\n}\\n```\\n![image](https://assets.leetcode.com/users/images/12370c10-2924-4705-9b20-4c93fe83945d_1611015319.6731772.png)\\n",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        return helper(1, n);\\n    }\\n    \\n    private List<TreeNode> helper(int lo, int hi) {\\n        List<TreeNode> result = new ArrayList<>();\\n        //base case\\n        if (lo > hi) {\\n            result.add(null);\\n            return result;\\n        }\\n        \\n        //subproblem to reach boootm\\n        for (int i = lo; i <= hi; i++) {\\n            List<TreeNode> left = helper(lo, i - 1);\\n            List<TreeNode> right = helper(i + 1, hi);\\n            //reconstruct tree from bottom to up\\n            for (TreeNode l : left) {\\n                for (TreeNode r : right) {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = l;\\n                    root.right = r;\\n                    result.add(root);\\n                }\\n            }\\n        }\\n        //return list of root to last layer\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31575,
                "title": "24ms-c-easy-understanding-solution",
                "content": "    class Solution {\\n    private:\\n        vector<TreeNode*> helper(int start, int end){\\n            vector<TreeNode*> res;\\n            if(start > end) {\\n                res.push_back(NULL);\\n                return res;\\n            }\\n            for(int i = start; i <= end; i++){\\n                vector<TreeNode*> lefts = helper(start, i - 1);\\n                vector<TreeNode*> rights = helper(i + 1, end);\\n                for(int j = 0; j < (int)lefts.size(); j++){\\n                    for(int k = 0; k < (int)rights.size(); k++){\\n                        TreeNode* root = new TreeNode(i);\\n                        root->left = lefts[j];\\n                        root->right = rights[k];\\n                        res.push_back(root);\\n                    }\\n                }\\n            }\\n            return res;\\n        }\\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            if(n == 0) return vector<TreeNode*>(0);\\n            return helper(1,n);\\n        }\\n    };",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n    private:\\n        vector<TreeNode*> helper(int start, int end){\\n            vector<TreeNode*> res;\\n            if(start > end) {\\n                res.push_back(NULL);\\n                return res;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1440190,
                "title": "c-python-simple-and-short-recursive-solutions-with-explanation",
                "content": "**Idea:**\\nWe will use a recursive helper function that recieves a range (within n) and returns all subtrees in that range.\\nWe have a few cases:\\n1. if `start > end`, which is not supposed to happen, we return a list that contains only a null.\\n2. if `start == end` it means we reached a leaf and we will return a list containing a tree that has only that node.\\n3. Otherwise:\\nfor each option of root, we get all possible subtrees with that root for `left` and `right` children.\\nThen for each possible pair of `left` and `right` we add to the result a new tree.\\n\\n**C++:**\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> rec(int start, int end) {\\n        vector<TreeNode*> res;\\n        if (start > end) return {NULL};\\n        \\n        if (start == end) return {new TreeNode(start)};\\n        \\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left = rec(start, i-1), right = rec(i+1, end);\\n            \\n            for (auto l : left)\\n                for (auto r : right)\\n                    res.push_back(new TreeNode(i, l, r));\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res = rec(1, n);\\n        return res;\\n    }\\n};\\n```\\n**Python:**\\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def rec(start, end):\\n\\t\\t\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        \\n        res = rec(1,n)\\n        return res\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> rec(int start, int end) {\\n        vector<TreeNode*> res;\\n        if (start > end) return {NULL};\\n        \\n        if (start == end) return {new TreeNode(start)};\\n        \\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left = rec(start, i-1), right = rec(i+1, end);\\n            \\n            for (auto l : left)\\n                for (auto r : right)\\n                    res.push_back(new TreeNode(i, l, r));\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res = rec(1, n);\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def rec(start, end):\\n\\t\\t\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        \\n        res = rec(1,n)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31609,
                "title": "simple-python-solution",
                "content": "    class Solution(object):\\n    def generateTrees(self, n):\\n        return self.cal([i for i in xrange(1, n+1)])\\n        \\n    def cal(self, lst):\\n        if not lst: return [None]\\n        res=[]\\n        for i in xrange(len(lst)):\\n            for left in self.cal(lst[:i]):\\n                for right in self.cal(lst[i+1:]):\\n                    node, node.left, node.right=TreeNode(lst[i]), left, right\\n                    res+=[node]\\n        return res",
                "solutionTags": [],
                "code": "    class Solution(object):\\n    def generateTrees(self, n):\\n        return self.cal([i for i in xrange(1, n+1)])\\n        \\n    def cal(self, lst):\\n        if not lst: return [None]\\n        res=[]\\n        for i in xrange(len(lst)):\\n            for left in self.cal(lst[:i]):\\n                for right in self.cal(lst[i+1:]):\\n                    node, node.left, node.right=TreeNode(lst[i]), left, right\\n                    res+=[node]\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 167055,
                "title": "c-recursive-and-iterative-solutions-beats-100-and-doesn-t-create-frankenstein-trees",
                "content": "# TL;DR\\n### Recursive solution\\n```cpp\\n  /// Returns all insert orderings of [first, last) that will produce a unique tree when inserted into a tree\\n  std::vector<std::vector<int>> unique_orderings(int first, int last)\\n  {\\n    std::vector<std::vector<int>> ret;\\n    if (first == last) {\\n      ret.emplace_back();\\n    } else {\\n      // For each possible root digit\\n      for (int digit = first; digit != last; ++digit) {\\n        \\n        // Get all the orderings to build unique left branches\\n        auto left_orders = unique_orderings(first, digit);\\n        \\n        // Get all the orderings to build unique right branches\\n        auto right_orders = unique_orderings(digit + 1, last);\\n        \\n        // Combine all the possibilities together\\n        for (auto& left : left_orders) {\\n          for (auto& right : right_orders) {\\n            ret.emplace_back(1, digit);\\n            ret.reserve(left.size() + 1 + right.size());\\n            std::copy(left.begin(), left.end(), std::back_inserter(ret.back()));\\n            std::copy(right.begin(), right.end(), std::back_inserter(ret.back()));\\n          }\\n        }\\n      }\\n    }\\n    return ret;\\n  }\\n\\n  vector<TreeNode*> generateTrees(int n) {\\n    std::vector<TreeNode*> ret;\\n    \\n    // Get the orderings that will produce unique unique tress using the numbers from [1, n]\\n    // For example, when n is 3, will return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]].\\n    // Each ordering will produce a unique tree when inserted from left to right.\\n    auto orderings = unique_orderings(1, n + 1);\\n    if (!orderings.front().empty()) {\\n      std::fill_n(std::back_inserter(ret), orderings.size(), nullptr);\\n      \\n      // Make each unique tree by inserting the digits of each orderings into a tree.\\n      for (int i = 0; i < orderings.size(); ++i) {\\n        for (auto digit : orderings[i]) {\\n          TreeNode** curr = &ret[i];\\n          while (*curr) {\\n            curr = (digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n          }\\n          *curr = new TreeNode(digit);\\n        }\\n      }\\n    }\\n    \\n    return ret;\\n  }\\n```\\n### Iterative solution. Using cache for maximum speed\\n```cpp\\n  vector<TreeNode*> generateTrees(int n) {\\n    std::vector<TreeNode*> ret;\\n    \\n    std::vector<std::vector<std::vector<int>>> patterns(1, std::vector<std::vector<int>>(1));\\n   \\n    // Create a template for each level from 0 to n - 1. This lists all the unique patterns for that level. If you take a pattern \\n    // and create a tree by inserting the digits in order, you will produce a unique tree that no other pattern creates\\n    for (int lvl = 1; lvl < n; ++lvl) {\\n      patterns.emplace_back();\\n      // For each possible root digit\\n      for (int digit = 1; digit <= lvl; ++digit) {\\n        // For each possible unique pattern that can be made using digits less than the root\\n        for (auto& left : patterns[digit - 1]) {\\n          // For each possible unique pattern that can be made using digits greater than the root\\n          for (auto& right : patterns[lvl - digit]) {\\n            patterns[lvl].emplace_back();\\n            patterns[lvl].reserve(left.size() + 1 + right.size());\\n            auto it = std::back_inserter(patterns.back().back());\\n            // Add root\\n            *it++ = digit;\\n            \\n            // Add left branch pattern\\n            it = std::copy(left.begin(), left.end(), it);\\n            \\n            // Add right branch pattern, but offsetting the numbers by the root value\\n            it = std::generate_n(it, right.size(), [digit, r_it = right.begin()] () mutable { return digit + *r_it++; });\\n          }\\n        }\\n      }\\n    }\\n\\n    // We now have a template for each level 0 to n - 1. Time to build level n, but this time we must create it as\\n    // actual trees\\n    \\n    // For each possible root digit\\n    for (int digit = 1; digit <= n; ++digit) {\\n      // For each possible unique pattern that can be made using digits less than the root\\n      for (auto& left : patterns[digit - 1]) {\\n        // For each possible unique pattern that can be made using digits greater than the root\\n        for (auto& right : patterns[n - digit]) {\\n          ret.emplace_back(new TreeNode(digit));\\n   \\n          // Create left branch\\n          for (int left_digit : left) {\\n            TreeNode** curr = &ret.back()->left;\\n            while (*curr) {\\n              curr = (left_digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n            }\\n            *curr = new TreeNode(left_digit);\\n          }\\n          \\n          // Create right branch, remembering to add the offset\\n          for (int right_digit : right) {\\n            TreeNode** curr = &ret.back()->right;\\n            while (*curr) {\\n              curr = (right_digit + digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n            }\\n            *curr = new TreeNode(right_digit + digit);\\n          }\\n        }\\n      }\\n    } \\n    \\n    return ret;\\n  }\\n```\\n# Details\\n### Background\\nMy solutions are an expansion of [unique binary search tree](https://leetcode.com/problems/unique-binary-search-trees/discuss/166725/c++-extremely-short-stl-solution.-4-lines.-With-detailed-explaination). The idea being that if you choose a root node _r_, then there are [1, _r_) numbers to use to build the left branch and [_r_ + 1, _n_) numbers to use to build the right branch. Focusing on the left branch for the moment, it is obviously just the same problem except instead of needing to use the numbers [1, _n_], we now use [1, _r_), where _r_ <= _n_. So we have a decreasing, recursive problem. The right branch is actually exactly the same, just with a different offset, starting position.\\n\\nSo lets get down to how to use this.\\n### Recursive solution\\nA convient way to represent a unique tree is by indicating the order of numbers to be inserted. For example [1, 2, 3] would be;\\n```\\n1\\n \\\\\\n  2\\n   \\\\\\n    3\\n```\\n[3, 1, 2, 4]\\n```\\n  3\\n / \\\\\\n1   4\\n \\\\\\n  2\\n```\\nThis is convient because from above, we will be dividing the numbers around a root. What we\\'re aiming for is a list of numbers like `[root, <left branch>, <right branch>]`. This is what the recursive function `unique_orderings` is producing. Given a range [first, last), return all the unique insert orderings for that range. All that is left to do after that is actually build all the trees to return.\\n\\n**Note: After I implemented my solution, I checked out other peoples solutions. I found a large number of them were returning trees directly from their recursive function. These would then be directly linked to. This results in trees _sharing_ branches. Not something I expect the question is looking for.**\\n```cpp\\nstd::vector<TreeNode*> branches(...)\\n{\\n  ...\\n  auto left = branches(...);\\n  auto right = branches(...);\\n  for (auto l : left) {\\n    for (auto r : right) {\\n      TreeNode* root = new TreeNode(root_val);\\n      root->left = l;    // Every tree points to the _same_ left branch\\n      root->right = r;   // Every tree points to the _same_ right branch\\n      ...\\n    }\\n  }\\n}\\n```\\nIt\\'s hard to visualise, in ascii, but the trees [3, 2, 1, 5, 4] and [3, 2, 1, 4, 5] will be linked very stranglely. Using the same node for node _2_.\\n```\\n   -------\\\\\\n  /\\t   \\\\\\n /   3      \\\\    3\\n \\\\ /   \\\\     ---/ \\\\\\n  2     5          4\\n /     /            \\\\\\n1      4             5\\n```\\t \\nThis is why I choose to build the trees outside of the recursive function. To avoid such an a quirk.\\n### Iterative\\nYou will notice that the recursive solution actually generates the same branches over and over again. To make it faster, we could instead cache our branches, so every time the branch options for [1, 4) was requested, the same values would be returned. We can go further than this though. Consider the case of a _n_ = 7 and using a root node of 4. The left branch with use the range [1, 4), while the right branch will need to use [5, 8). The number of options will be the same for both branches as they have the same, just the starting number will be different. My solution uses this to build all branches from a _pattern_, where each node value is offset to adjust for different start values.\\n\\nThe solution is very fast while still being relatively memory efficent. Once again it doesn\\'t create Frankenstein trees that are share branches.\\n\\n**Please give me a thumbs up if this helped explain this problem for you**",
                "solutionTags": [
                    "C",
                    "Recursion",
                    "Iterator"
                ],
                "code": "```cpp\\n  /// Returns all insert orderings of [first, last) that will produce a unique tree when inserted into a tree\\n  std::vector<std::vector<int>> unique_orderings(int first, int last)\\n  {\\n    std::vector<std::vector<int>> ret;\\n    if (first == last) {\\n      ret.emplace_back();\\n    } else {\\n      // For each possible root digit\\n      for (int digit = first; digit != last; ++digit) {\\n        \\n        // Get all the orderings to build unique left branches\\n        auto left_orders = unique_orderings(first, digit);\\n        \\n        // Get all the orderings to build unique right branches\\n        auto right_orders = unique_orderings(digit + 1, last);\\n        \\n        // Combine all the possibilities together\\n        for (auto& left : left_orders) {\\n          for (auto& right : right_orders) {\\n            ret.emplace_back(1, digit);\\n            ret.reserve(left.size() + 1 + right.size());\\n            std::copy(left.begin(), left.end(), std::back_inserter(ret.back()));\\n            std::copy(right.begin(), right.end(), std::back_inserter(ret.back()));\\n          }\\n        }\\n      }\\n    }\\n    return ret;\\n  }\\n\\n  vector<TreeNode*> generateTrees(int n) {\\n    std::vector<TreeNode*> ret;\\n    \\n    // Get the orderings that will produce unique unique tress using the numbers from [1, n]\\n    // For example, when n is 3, will return [[1, 2, 3], [1, 3, 2], [2, 1, 3], [3, 1, 2], [3, 2, 1]].\\n    // Each ordering will produce a unique tree when inserted from left to right.\\n    auto orderings = unique_orderings(1, n + 1);\\n    if (!orderings.front().empty()) {\\n      std::fill_n(std::back_inserter(ret), orderings.size(), nullptr);\\n      \\n      // Make each unique tree by inserting the digits of each orderings into a tree.\\n      for (int i = 0; i < orderings.size(); ++i) {\\n        for (auto digit : orderings[i]) {\\n          TreeNode** curr = &ret[i];\\n          while (*curr) {\\n            curr = (digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n          }\\n          *curr = new TreeNode(digit);\\n        }\\n      }\\n    }\\n    \\n    return ret;\\n  }\\n```\n```cpp\\n  vector<TreeNode*> generateTrees(int n) {\\n    std::vector<TreeNode*> ret;\\n    \\n    std::vector<std::vector<std::vector<int>>> patterns(1, std::vector<std::vector<int>>(1));\\n   \\n    // Create a template for each level from 0 to n - 1. This lists all the unique patterns for that level. If you take a pattern \\n    // and create a tree by inserting the digits in order, you will produce a unique tree that no other pattern creates\\n    for (int lvl = 1; lvl < n; ++lvl) {\\n      patterns.emplace_back();\\n      // For each possible root digit\\n      for (int digit = 1; digit <= lvl; ++digit) {\\n        // For each possible unique pattern that can be made using digits less than the root\\n        for (auto& left : patterns[digit - 1]) {\\n          // For each possible unique pattern that can be made using digits greater than the root\\n          for (auto& right : patterns[lvl - digit]) {\\n            patterns[lvl].emplace_back();\\n            patterns[lvl].reserve(left.size() + 1 + right.size());\\n            auto it = std::back_inserter(patterns.back().back());\\n            // Add root\\n            *it++ = digit;\\n            \\n            // Add left branch pattern\\n            it = std::copy(left.begin(), left.end(), it);\\n            \\n            // Add right branch pattern, but offsetting the numbers by the root value\\n            it = std::generate_n(it, right.size(), [digit, r_it = right.begin()] () mutable { return digit + *r_it++; });\\n          }\\n        }\\n      }\\n    }\\n\\n    // We now have a template for each level 0 to n - 1. Time to build level n, but this time we must create it as\\n    // actual trees\\n    \\n    // For each possible root digit\\n    for (int digit = 1; digit <= n; ++digit) {\\n      // For each possible unique pattern that can be made using digits less than the root\\n      for (auto& left : patterns[digit - 1]) {\\n        // For each possible unique pattern that can be made using digits greater than the root\\n        for (auto& right : patterns[n - digit]) {\\n          ret.emplace_back(new TreeNode(digit));\\n   \\n          // Create left branch\\n          for (int left_digit : left) {\\n            TreeNode** curr = &ret.back()->left;\\n            while (*curr) {\\n              curr = (left_digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n            }\\n            *curr = new TreeNode(left_digit);\\n          }\\n          \\n          // Create right branch, remembering to add the offset\\n          for (int right_digit : right) {\\n            TreeNode** curr = &ret.back()->right;\\n            while (*curr) {\\n              curr = (right_digit + digit <= (**curr).val) ? &((**curr).left): &((**curr).right);\\n            }\\n            *curr = new TreeNode(right_digit + digit);\\n          }\\n        }\\n      }\\n    } \\n    \\n    return ret;\\n  }\\n```\n```\\n1\\n \\\\\\n  2\\n   \\\\\\n    3\\n```\n```\\n  3\\n / \\\\\\n1   4\\n \\\\\\n  2\\n```\n```cpp\\nstd::vector<TreeNode*> branches(...)\\n{\\n  ...\\n  auto left = branches(...);\\n  auto right = branches(...);\\n  for (auto l : left) {\\n    for (auto r : right) {\\n      TreeNode* root = new TreeNode(root_val);\\n      root->left = l;    // Every tree points to the _same_ left branch\\n      root->right = r;   // Every tree points to the _same_ right branch\\n      ...\\n    }\\n  }\\n}\\n```\n```\\n   -------\\\\\\n  /\\t   \\\\\\n /   3      \\\\    3\\n \\\\ /   \\\\     ---/ \\\\\\n  2     5          4\\n /     /            \\\\\\n1      4             5\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3865536,
                "title": "ex-amazon-explains-a-solution-with-a-video-python-javascript-java-and-c",
                "content": "# Intuition\\nThere 3 important things. \\n\\nOne is we try to create subtrees with some range between start(minimum) and end(maximum) value.\\n\\nSecond is calculation of the range. left range should be between start and current root - 1 as end value because all values of left side must be smaller than current root. right range should be between current root + 1 and end becuase all values on the right side should be greater than current root value.\\n\\nThrid is we call the same funtion recursively, so it\\'s good idea to keep results of current start and end, so that we can use the results later. It\\'s time saving.\\n\\n---\\n\\n# Solution Video\\n## *** Please upvote for this article. *** \\n\\nhttps://youtu.be/5G-Kwx8Lm5Q\\n\\n# Subscribe to my channel from here. I have 240 videos as of August 5th\\nhttp://www.youtube.com/channel/UC9RMNwYTL3SXCP6ShLWVFww?sub_confirmation=1\\n\\n---\\n\\n# Approach\\nThis is based on Python. Other might be different a bit.\\n\\n1. Define a class `Solution` containing a method `generateTrees` which takes an integer `n` as input and returns a list of optional `TreeNode` objects.\\n\\n2. Check if `n` is 0. If it is, return an empty list since there are no possible trees with 0 nodes.\\n\\n3. Initialize an empty dictionary called `memo`. This dictionary will be used to store previously computed results for specific ranges of values to avoid redundant calculations.\\n\\n4. Define an inner function called `generate_trees` that takes two parameters: `start` and `end`, which represent the range of values for which binary search trees need to be generated.\\n\\n5. Inside the `generate_trees` function:\\n   - Check if the tuple `(start, end)` exists as a key in the `memo` dictionary. If it does, return the corresponding value from the `memo` dictionary.\\n   - Initialize an empty list called `trees`. This list will store the generated trees for the current range.\\n   - If `start` is greater than `end`, append `None` to the `trees` list, indicating an empty subtree, and return the `trees` list.\\n   - Loop through each value `root_val` in the range `[start, end]` (inclusive):\\n     - Recursively call the `generate_trees` function for the left subtree with the range `[start, root_val - 1]` and store the result in `left_trees`.\\n     - Recursively call the `generate_trees` function for the right subtree with the range `[root_val + 1, end]` and store the result in `right_trees`.\\n     - Nested loop through each combination of `left_tree` in `left_trees` and `right_tree` in `right_trees`:\\n       - Create a new `TreeNode` instance with `root_val` as the value, `left_tree` as the left child, and `right_tree` as the right child.\\n       - Append the new `TreeNode` to the `trees` list.\\n   - Store the `trees` list in the `memo` dictionary with the key `(start, end)`.\\n   - Return the `trees` list.\\n\\n6. Outside the `generate_trees` function, call `generate_trees` initially with arguments `1` and `n` to generate all unique binary search trees with `n` nodes.\\n\\n7. Return the list of generated trees.\\n\\nThis algorithm generates all possible unique binary search trees with `n` nodes by considering different ranges of root values and recursively generating left and right subtrees for each possible root value. The `memo` dictionary is used to store previously computed results, reducing redundant calculations and improving the efficiency of the algorithm.\\n\\n# Complexity\\n- Time complexity: O(C(n))\\nC is Catalan number.\\n\\n- Space complexity: O(C(n))\\nC is Catalan number.\\n\\nCatalan number\\nhttps://en.wikipedia.org/wiki/Catalan_number\\n\\n```python []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        if n == 0:\\n            return []\\n        \\n        memo = {}\\n\\n        def generate_trees(start, end):\\n            if (start, end) in memo:\\n                return memo[(start, end)]\\n            \\n            trees = []\\n            if start > end:\\n                trees.append(None)\\n                return trees\\n            \\n            for root_val in range(start, end + 1):\\n                left_trees = generate_trees(start, root_val - 1)\\n                right_trees = generate_trees(root_val + 1, end)\\n            \\n                for left_tree in left_trees:\\n                    for right_tree in right_trees:\\n                        root = TreeNode(root_val, left_tree, right_tree)\\n                        trees.append(root)\\n            \\n            memo[(start, end)] = trees\\n            return trees\\n\\n        return generate_trees(1, n)\\n```\\n```javascript []\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number} n\\n * @return {TreeNode[]}\\n */\\nvar generateTrees = function(n) {\\n   if (n === 0) {\\n        return [];\\n    }\\n    \\n    const memo = new Map();\\n\\n    function generateTreesHelper(start, end) {\\n        if (memo.has(`${start}-${end}`)) {\\n            return memo.get(`${start}-${end}`);\\n        }\\n        \\n        const trees = [];\\n        if (start > end) {\\n            trees.push(null);\\n            return trees;\\n        }\\n        \\n        for (let rootVal = start; rootVal <= end; rootVal++) {\\n            const leftTrees = generateTreesHelper(start, rootVal - 1);\\n            const rightTrees = generateTreesHelper(rootVal + 1, end);\\n            \\n            for (const leftTree of leftTrees) {\\n                for (const rightTree of rightTrees) {\\n                    const root = new TreeNode(rootVal, leftTree, rightTree);\\n                    trees.push(root);\\n                }\\n            }\\n        }\\n        \\n        memo.set(`${start}-${end}`, trees);\\n        return trees;\\n    }\\n\\n    return generateTreesHelper(1, n);    \\n};\\n```\\n```java []\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        \\n        Map<String, List<TreeNode>> memo = new HashMap<>();\\n\\n        return generateTreesHelper(1, n, memo);        \\n    }\\n\\n    private List<TreeNode> generateTreesHelper(int start, int end, Map<String, List<TreeNode>> memo) {\\n        String key = start + \"-\" + end;\\n        if (memo.containsKey(key)) {\\n            return memo.get(key);\\n        }\\n        \\n        List<TreeNode> trees = new ArrayList<>();\\n        if (start > end) {\\n            trees.add(null);\\n            return trees;\\n        }\\n        \\n        for (int rootVal = start; rootVal <= end; rootVal++) {\\n            List<TreeNode> leftTrees = generateTreesHelper(start, rootVal - 1, memo);\\n            List<TreeNode> rightTrees = generateTreesHelper(rootVal + 1, end, memo);\\n            \\n            for (TreeNode leftTree : leftTrees) {\\n                for (TreeNode rightTree : rightTrees) {\\n                    TreeNode root = new TreeNode(rootVal);\\n                    root.left = leftTree;\\n                    root.right = rightTree;\\n                    trees.add(root);\\n                }\\n            }\\n        }\\n        \\n        memo.put(key, trees);\\n        return trees;\\n    }\\n}\\n```\\n```C++ []\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) {\\n            return vector<TreeNode*>();\\n        }\\n        \\n        unordered_map<string, vector<TreeNode*>> memo;\\n\\n        return generateTreesHelper(1, n, memo);        \\n    }\\n\\nprivate:\\n    vector<TreeNode*> generateTreesHelper(int start, int end, unordered_map<string, vector<TreeNode*>>& memo) {\\n        string key = to_string(start) + \"-\" + to_string(end);\\n        if (memo.find(key) != memo.end()) {\\n            return memo[key];\\n        }\\n        \\n        vector<TreeNode*> trees;\\n        if (start > end) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n        \\n        for (int rootVal = start; rootVal <= end; rootVal++) {\\n            vector<TreeNode*> leftTrees = generateTreesHelper(start, rootVal - 1, memo);\\n            vector<TreeNode*> rightTrees = generateTreesHelper(rootVal + 1, end, memo);\\n            \\n            for (TreeNode* leftTree : leftTrees) {\\n                for (TreeNode* rightTree : rightTrees) {\\n                    TreeNode* root = new TreeNode(rootVal);\\n                    root->left = leftTree;\\n                    root->right = rightTree;\\n                    trees.push_back(root);\\n                }\\n            }\\n        }\\n        \\n        memo[key] = trees;\\n        return trees;\\n    }    \\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3",
                    "JavaScript"
                ],
                "code": "```python []\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        if n == 0:\\n            return []\\n        \\n        memo = {}\\n\\n        def generate_trees(start, end):\\n            if (start, end) in memo:\\n                return memo[(start, end)]\\n            \\n            trees = []\\n            if start > end:\\n                trees.append(None)\\n                return trees\\n            \\n            for root_val in range(start, end + 1):\\n                left_trees = generate_trees(start, root_val - 1)\\n                right_trees = generate_trees(root_val + 1, end)\\n            \\n                for left_tree in left_trees:\\n                    for right_tree in right_trees:\\n                        root = TreeNode(root_val, left_tree, right_tree)\\n                        trees.append(root)\\n            \\n            memo[(start, end)] = trees\\n            return trees\\n\\n        return generate_trees(1, n)\\n```\n```javascript []\\n/**\\n * Definition for a binary tree node.\\n * function TreeNode(val, left, right) {\\n *     this.val = (val===undefined ? 0 : val)\\n *     this.left = (left===undefined ? null : left)\\n *     this.right = (right===undefined ? null : right)\\n * }\\n */\\n/**\\n * @param {number} n\\n * @return {TreeNode[]}\\n */\\nvar generateTrees = function(n) {\\n   if (n === 0) {\\n        return [];\\n    }\\n    \\n    const memo = new Map();\\n\\n    function generateTreesHelper(start, end) {\\n        if (memo.has(`${start}-${end}`)) {\\n            return memo.get(`${start}-${end}`);\\n        }\\n        \\n        const trees = [];\\n        if (start > end) {\\n            trees.push(null);\\n            return trees;\\n        }\\n        \\n        for (let rootVal = start; rootVal <= end; rootVal++) {\\n            const leftTrees = generateTreesHelper(start, rootVal - 1);\\n            const rightTrees = generateTreesHelper(rootVal + 1, end);\\n            \\n            for (const leftTree of leftTrees) {\\n                for (const rightTree of rightTrees) {\\n                    const root = new TreeNode(rootVal, leftTree, rightTree);\\n                    trees.push(root);\\n                }\\n            }\\n        }\\n        \\n        memo.set(`${start}-${end}`, trees);\\n        return trees;\\n    }\\n\\n    return generateTreesHelper(1, n);    \\n};\\n```\n```java []\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        \\n        Map<String, List<TreeNode>> memo = new HashMap<>();\\n\\n        return generateTreesHelper(1, n, memo);        \\n    }\\n\\n    private List<TreeNode> generateTreesHelper(int start, int end, Map<String, List<TreeNode>> memo) {\\n        String key = start + \"-\" + end;\\n        if (memo.containsKey(key)) {\\n            return memo.get(key);\\n        }\\n        \\n        List<TreeNode> trees = new ArrayList<>();\\n        if (start > end) {\\n            trees.add(null);\\n            return trees;\\n        }\\n        \\n        for (int rootVal = start; rootVal <= end; rootVal++) {\\n            List<TreeNode> leftTrees = generateTreesHelper(start, rootVal - 1, memo);\\n            List<TreeNode> rightTrees = generateTreesHelper(rootVal + 1, end, memo);\\n            \\n            for (TreeNode leftTree : leftTrees) {\\n                for (TreeNode rightTree : rightTrees) {\\n                    TreeNode root = new TreeNode(rootVal);\\n                    root.left = leftTree;\\n                    root.right = rightTree;\\n                    trees.add(root);\\n                }\\n            }\\n        }\\n        \\n        memo.put(key, trees);\\n        return trees;\\n    }\\n}\\n```\n```C++ []\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) {\\n            return vector<TreeNode*>();\\n        }\\n        \\n        unordered_map<string, vector<TreeNode*>> memo;\\n\\n        return generateTreesHelper(1, n, memo);        \\n    }\\n\\nprivate:\\n    vector<TreeNode*> generateTreesHelper(int start, int end, unordered_map<string, vector<TreeNode*>>& memo) {\\n        string key = to_string(start) + \"-\" + to_string(end);\\n        if (memo.find(key) != memo.end()) {\\n            return memo[key];\\n        }\\n        \\n        vector<TreeNode*> trees;\\n        if (start > end) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n        \\n        for (int rootVal = start; rootVal <= end; rootVal++) {\\n            vector<TreeNode*> leftTrees = generateTreesHelper(start, rootVal - 1, memo);\\n            vector<TreeNode*> rightTrees = generateTreesHelper(rootVal + 1, end, memo);\\n            \\n            for (TreeNode* leftTree : leftTrees) {\\n                for (TreeNode* rightTree : rightTrees) {\\n                    TreeNode* root = new TreeNode(rootVal);\\n                    root->left = leftTree;\\n                    root->right = rightTree;\\n                    trees.push_back(root);\\n                }\\n            }\\n        }\\n        \\n        memo[key] = trees;\\n        return trees;\\n    }    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1440118,
                "title": "python-divide-and-conquer-with-dp-explained",
                "content": "We can use `dp` technique here, where in `dp[i][j]` we keep all possible trees from numbers `i ... j`. We can also keep only one dimensional `dp`, but then we need to `clone` trees, adding the same values to all elements. However, number of trees is exponential, and I think it is not worth to make this optimization from `O(n^2)` to `O(n)` memory, because problem can be solved for only small `n <= 50`.\\n\\n#### Complexity\\nTime and space complexity is `O(C_{2n}^n)` approximately, because we have Catalan number of trees.\\n\\n#### Code\\n```python\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(i, j):\\n            if i > j: return [None]\\n            ans = []\\n            \\n            for k in range(i, j + 1):\\n                for lft, rgh in product(dp(i, k-1), dp(k+1, j)):\\n                    root = ListNode(k)\\n                    root.left = lft\\n                    root.right = rgh\\n                    ans.append(root)            \\n            return ans\\n        \\n        return dp(1, n)\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Divide and Conquer",
                    "Dynamic Programming"
                ],
                "code": "```python\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(i, j):\\n            if i > j: return [None]\\n            ans = []\\n            \\n            for k in range(i, j + 1):\\n                for lft, rgh in product(dp(i, k-1), dp(k+1, j)):\\n                    root = ListNode(k)\\n                    root.left = lft\\n                    root.right = rgh\\n                    ans.append(root)            \\n            return ans\\n        \\n        return dp(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 759719,
                "title": "c-very-easy-to-understand-recursive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*>V;\\n        \\n        if(begin>end)\\n        {\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode();\\n                    root->val = i;\\n                    root->left = l;\\n                    root->right = r;\\n                    V.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        return V;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>V;\\n        if(n==0) return V;\\n        \\n        return generateBST(1,n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*>V;\\n        \\n        if(begin>end)\\n        {\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode();\\n                    root->val = i;\\n                    root->left = l;\\n                    root->right = r;\\n                    V.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        return V;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>V;\\n        if(n==0) return V;\\n        \\n        return generateBST(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31597,
                "title": "30-ms-c-solution",
                "content": "    /**\\n     * Definition for binary tree\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Solution {\\n    public:\\n        vector<TreeNode *> generateTrees(int n) {\\n            return helper(1,n);\\n        }\\n        \\n        vector<TreeNode*> helper(int s, int e) {\\n            if (s > e) {\\n                 return vector<TreeNode*>(1,NULL);\\n            }\\n            \\n            vector<TreeNode*> result;\\n            for (int i=s; i <= e; ++i) {\\n                vector<TreeNode*> left, right;\\n                    left = helper(s,i-1);\\n                    right = helper(i+1,e);\\n                    for (int j = 0; j < left.size(); ++j) {\\n                        for (int k = 0; k < right.size(); ++k) {\\n                            TreeNode* root = new TreeNode(i);\\n                            root->left = left[j];\\n                            root->right = right[k];\\n                            result.push_back(root);\\n                        }\\n                    }\\n            }\\n            \\n            return result;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        vector<TreeNode *> generateTrees(int n) {\\n            return helper(1,n);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 31535,
                "title": "20ms-c-top-down-dp-solution",
                "content": "a bottom up solution looks much better, but I find it's also a little bit harder to understand. Top-down solution is straight forward,\\n\\n   \\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> ret;\\n        vector<vector<vector<TreeNode*>>> dp(n,vector<vector<TreeNode*>>(n));\\n        helper(1,n,ret,dp);\\n        return ret;\\n    }\\n    \\n    void helper(int start, int end, vector<TreeNode*> &ret,vector<vector<vector<TreeNode*>>> &dp) {\\n        if (start > end) {\\n            ret.push_back(NULL); return;\\n        }\\n        if (!dp[start-1][end-1].empty())  {\\n            ret = dp[start-1][end-1]; return;\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            vector<TreeNode*> left, right;\\n            helper(start, i-1,left,dp);\\n            helper(i+1,end,right,dp);\\n            for(int j = 0; j < left.size(); ++j) {\\n                for (int k = 0; k < right.size(); ++k) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = left[j];\\n                    node->right = right[k];\\n                    ret.push_back(node);\\n                }\\n            }\\n        }\\n        dp[start-1][end-1] = ret;\\n    }",
                "solutionTags": [
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "a bottom up solution looks much better, but I find it's also a little bit harder to understand. Top-down solution is straight forward,\\n\\n   \\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> ret;\\n        vector<vector<vector<TreeNode*>>> dp(n,vector<vector<TreeNode*>>(n));\\n        helper(1,n,ret,dp);\\n        return ret;\\n    }\\n    \\n    void helper(int start, int end, vector<TreeNode*> &ret,vector<vector<vector<TreeNode*>>> &dp) {\\n        if (start > end) {\\n            ret.push_back(NULL); return;\\n        }\\n        if (!dp[start-1][end-1].empty())  {\\n            ret = dp[start-1][end-1]; return;\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            vector<TreeNode*> left, right;\\n            helper(start, i-1,left,dp);\\n            helper(i+1,end,right,dp);\\n            for(int j = 0; j < left.size(); ++j) {\\n                for (int k = 0; k < right.size(); ++k) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = left[j];\\n                    node->right = right[k];\\n                    ret.push_back(node);\\n                }\\n            }\\n        }\\n        dp[start-1][end-1] = ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 536107,
                "title": "python-recursive-solution-explained-beats-99-56",
                "content": "The basic idea is to recursively split the conceptual array `[1, ..., n]` in half. During every split, make a new root node for every different combination of left/right subtree structures. For the time complexity of this algorithm, please check the comment below.\\n```python\\ndef generateTrees(self, n: int) -> List[TreeNode]:\\n    def generate(l, r):   # split between [l, r)\\n        if l == r:\\n            return [None]\\n        nodes = []\\n        for i in range(l, r):\\n            for lchild in generate(l, i):\\n                for rchild in generate(i+1, r):\\n                    node = TreeNode(i+1)   # +1 to convert the index to the actual value\\n                    node.left = lchild\\n                    node.right = rchild\\n                    nodes.append(node)\\n        return nodes\\n    return generate(0, n) if n else []\\n```\\nVote up if you find this helpful, thanks!",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```python\\ndef generateTrees(self, n: int) -> List[TreeNode]:\\n    def generate(l, r):   # split between [l, r)\\n        if l == r:\\n            return [None]\\n        nodes = []\\n        for i in range(l, r):\\n            for lchild in generate(l, i):\\n                for rchild in generate(i+1, r):\\n                    node = TreeNode(i+1)   # +1 to convert the index to the actual value\\n                    node.left = lchild\\n                    node.right = rchild\\n                    nodes.append(node)\\n        return nodes\\n    return generate(0, n) if n else []\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2503720,
                "title": "6-liner-c-recursive",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s) return {nullptr};                              \\n         for(int i=s; i<=n; i++) {                \\t                 // Consider every number in range [s,n] as root  \\n            for(auto left: generateTrees(i-1, s)) {                  // generate all possible trees in range [s,i)\\n                for(auto right: generateTrees(n, i+1))               // generate all possible trees in range (i,e]\\n                    ans.push_back(new TreeNode(i, left, right));     // make new trees with i as the root\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n**Please Upvote \\nthank you**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s) return {nullptr};                              \\n         for(int i=s; i<=n; i++) {                \\t                 // Consider every number in range [s,n] as root  \\n            for(auto left: generateTrees(i-1, s)) {                  // generate all possible trees in range [s,i)\\n                for(auto right: generateTrees(n, i+1))               // generate all possible trees in range (i,e]\\n                    ans.push_back(new TreeNode(i, left, right));     // make new trees with i as the root\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441066,
                "title": "unique-binary-search-trees-ii-recursion-w-approach-c-python",
                "content": "**Idea**:\\n* We will use a recursive helper function that recieves a range `(within n)` and returns all subtrees in that range.\\n* We have a few cases:\\n\\t* if `start > end`, which is not supposed to happen, we return a list that contains only a `null`.\\n\\t* if `start == end` it means we reached a `leaf` and we will return a `list containing a tree` that has only that node.\\n\\t* Otherwise:\\n\\t\\t* for each option of root, we get `all possible subtrees` with that root for left and right children. Then for each possible pair of left and right we add to the result a new tree.\\n\\n**Solution**\\n`In C++`\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> rec(int start, int end) {\\n        vector<TreeNode*> res;\\n        if (start > end) return {NULL};\\n        if (start == end) return {new TreeNode(start)};\\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left = rec(start, i-1), right = rec(i+1, end);\\n            for (auto l : left)\\n                for (auto r : right)\\n                    res.push_back(new TreeNode(i, l, r));\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res = rec(1, n);\\n        return res;\\n    }\\n};\\n```\\n`In Python`\\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def rec(start, end):\\n\\t\\t\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        \\n        res = rec(1,n)\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> rec(int start, int end) {\\n        vector<TreeNode*> res;\\n        if (start > end) return {NULL};\\n        if (start == end) return {new TreeNode(start)};\\n        for (int i = start; i <= end; i++) {\\n            vector<TreeNode*> left = rec(start, i-1), right = rec(i+1, end);\\n            for (auto l : left)\\n                for (auto r : right)\\n                    res.push_back(new TreeNode(i, l, r));\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res = rec(1, n);\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def rec(start, end):\\n\\t\\t\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        \\n        res = rec(1,n)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1566092,
                "title": "c-easy-recursive-solution",
                "content": "Let us start by understanding how many unique BSTs are possible for keys 1-n.\\n\\nTo form a structurally unique BST of n nodes, we can take any of the 1-n keys as the root. Let us take key i (1<=i<=n) as the root. Now the left subtrees can contain nodes with keys 1 to i-1 (Since all the values in the left subtree must be smaller than that in the root) and the right subtrees can contain nodes with keys i+1 to n. \\nFor example if n=3, i can be 1 (or) 2 (or) 3\\n```\\n  1           1                2                3               3\\n\\t\\\\           \\\\              / \\\\              /               /\\n\\t 3            2           1   3            2               1\\n    /              \\\\                         /                  \\\\\\n   2                3                      1                     2\\n          i = 1               i = 2                    i = 3   \\n```\\nSo, to construct a BST with a given root, we need to know the number of possible left subtrees(LSTs) and number of possible right subtrees(RSTs).\\nLet the no. possible LSTs be *numTrees(i-1)* and no. of possible BSTs be *numTrees(n-i)* . So the total no. of BSTs possible when i is the root are : *numTrees(i-1) * numTrees(n-i)*\\n\\n**Code :**\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> constructTrees(int start, int end){\\n        vector<TreeNode*> result;\\n\\t\\t\\n        if(start==end){\\n            TreeNode *root = new TreeNode(start);\\n            result.push_back(root);\\n            return result;\\n        }\\n        if(start>end){\\n            result.push_back(NULL);\\n            return result;\\n        }\\n        \\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> leftTrees = constructTrees(start, i-1); /*Total no. of LSTs possible when  is the root*/\\n            vector<TreeNode*> rightTrees = constructTrees(i+1, end); \\n\\t\\t\\t/*Join each left and right subtree to the root to form different BSTs*/\\n            for(auto l: leftTrees){\\n                for(auto r: rightTrees){\\n                    TreeNode *root = new TreeNode(i); \\n                    root->left = l;\\n                    root->right = r;\\n                    result.push_back(root);  /*Add the root of the resulting BST each time to the vector result*/\\n                }\\n            }\\n        }\\n        return result;\\n        \\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return constructTrees(1, n);\\n    }\\n};\\n```\\n\\nPlease upvote if u like the solution\\uD83D\\uDE4F\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\n  1           1                2                3               3\\n\\t\\\\           \\\\              / \\\\              /               /\\n\\t 3            2           1   3            2               1\\n    /              \\\\                         /                  \\\\\\n   2                3                      1                     2\\n          i = 1               i = 2                    i = 3   \\n```\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> constructTrees(int start, int end){\\n        vector<TreeNode*> result;\\n\\t\\t\\n        if(start==end){\\n            TreeNode *root = new TreeNode(start);\\n            result.push_back(root);\\n            return result;\\n        }\\n        if(start>end){\\n            result.push_back(NULL);\\n            return result;\\n        }\\n        \\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> leftTrees = constructTrees(start, i-1); /*Total no. of LSTs possible when  is the root*/\\n            vector<TreeNode*> rightTrees = constructTrees(i+1, end); \\n\\t\\t\\t/*Join each left and right subtree to the root to form different BSTs*/\\n            for(auto l: leftTrees){\\n                for(auto r: rightTrees){\\n                    TreeNode *root = new TreeNode(i); \\n                    root->left = l;\\n                    root->right = r;\\n                    result.push_back(root);  /*Add the root of the resulting BST each time to the vector result*/\\n                }\\n            }\\n        }\\n        return result;\\n        \\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return constructTrees(1, n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1440312,
                "title": "an-intuitive-explanation-with-diagrams",
                "content": "***BASICS***\\nBST? A node `x` has node `z` to right with value `z>x` and node `y` to the left with `y<x`.\\n\\n![image](https://assets.leetcode.com/users/images/3c9045fe-eaed-456a-a20b-3bcb09a6b4a2_1630574055.9780717.png)\\n\\n***BUILDING THE INTUITION: OBSERVATIONS***\\n- n = 1 case is trivial\\n- n = 2 case suggests\\n\\t- either swapping is important\\n\\t- or, changing the root is\\n![image](https://assets.leetcode.com/users/images/3f9339f0-279e-42fa-80b9-66d0c40b0939_1630574123.1668983.png)\\n\\n- n = 3 shows us:\\n\\t- swapping idea is too complex for > 2 nodes\\n\\t- the root idea works out better, we can **recursively** find the subtrees\\n\\t- there are repeating structures **DP**\\n![image](https://assets.leetcode.com/users/images/1757d47f-d667-4c66-9d4d-cbc0c621b197_1630574306.0539086.png)\\n\\n***SAMPLE CASE***\\nConsider the case: curr is 4. We split into left and right parts - for which we will call a recursive function again. I have considered the right sub-tree case:\\n![image](https://assets.leetcode.com/users/images/0af12d87-261d-4af0-9b5e-1085b58882c7_1630574322.4836857.png)\\n\\nEach recursion returns the total number of BSTs formed.\\n\\n***CODE***\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        \\n        @lru_cache(None)\\n        def recurse(l, r):\\n            if l > r: return [None]\\n            trees = []\\n            for i in range(l, r+1):\\n                lefts = recurse(l, i-1)\\n                rights = recurse(i+1, r)\\n            \\n                for left in lefts:\\n                    for right in rights:\\n                        tree = TreeNode(i)\\n                        tree.left = left\\n                        tree.right = right\\n                        trees.append(tree)\\n            \\n            return trees\\n        \\n        return recurse(1, n)\\n```\\n\\n**Upvote if this helps! It gives me feedback :)**",
                "solutionTags": [],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        \\n        @lru_cache(None)\\n        def recurse(l, r):\\n            if l > r: return [None]\\n            trees = []\\n            for i in range(l, r+1):\\n                lefts = recurse(l, i-1)\\n                rights = recurse(i+1, r)\\n            \\n                for left in lefts:\\n                    for right in rights:\\n                        tree = TreeNode(i)\\n                        tree.left = left\\n                        tree.right = right\\n                        trees.append(tree)\\n            \\n            return trees\\n        \\n        return recurse(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31581,
                "title": "sharing-top-down-dp-python-solution-beats-93-33",
                "content": "    def generateTrees(self, n):\\n        \\n        def gen_trees(s, e, memo):\\n            if e < s:\\n                return [None]\\n            ret_list = []\\n            if (s, e) in memo:\\n                return memo[s, e]\\n            for i in range(s, e + 1):\\n                list_left = gen_trees(s, i - 1, memo)\\n                list_right = gen_trees(i + 1, e, memo)\\n                for left in list_left:\\n                    for right in list_right:\\n                        root = TreeNode(i)\\n                        root.left = left\\n                        root.right = right\\n                        ret_list.append(root)\\n            memo[s, e] = ret_list\\n            return ret_list\\n        \\n        if n == 0:\\n            return []\\n        return gen_trees(1, n, {})",
                "solutionTags": [
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "    def generateTrees(self, n):\\n        \\n        def gen_trees(s, e, memo):\\n            if e < s:\\n                return [None]\\n            ret_list = []\\n            if (s, e) in memo:\\n                return memo[s, e]\\n            for i in range(s, e + 1):\\n                list_left = gen_trees(s, i - 1, memo)\\n                list_right = gen_trees(i + 1, e, memo)\\n                for left in list_left:\\n                    for right in list_right:\\n                        root = TreeNode(i)\\n                        root.left = left\\n                        root.right = right\\n                        ret_list.append(root)\\n            memo[s, e] = ret_list\\n            return ret_list\\n        \\n        if n == 0:\\n            return []\\n        return gen_trees(1, n, {})",
                "codeTag": "Python3"
            },
            {
                "id": 3866363,
                "title": "c-recursion-day-5",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTree(int size,int s,int e) {\\n        if(size==0){\\n            return {NULL};\\n        }\\n        if(size==1){\\n            TreeNode* temp = new TreeNode(s);\\n            return {temp};\\n        }\\n       vector<TreeNode*>ans;\\n        for(int i=s;i<=e;i++){\\n            vector<TreeNode*>v1 = generateTree(i-s,s,i-1);\\n             vector<TreeNode*>v2 = generateTree(e-i,i+1,e);\\n             for(int j=0;j<v1.size();j++){\\n                 for(int k=0;k<v2.size();k++){\\n                     TreeNode* temp = new TreeNode(i);\\n                     temp->left = v1[j];\\n                     temp->right = v2[k];\\n                     ans.push_back(temp);\\n                 }\\n             }   \\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generateTree(n,1,n);\\n    }\\n};\\n```\\n![upvote (2).jpg](https://assets.leetcode.com/users/images/abcf0777-a48c-4c76-ab0a-0c126e6b8ca7_1691226748.0385122.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTree(int size,int s,int e) {\\n        if(size==0){\\n            return {NULL};\\n        }\\n        if(size==1){\\n            TreeNode* temp = new TreeNode(s);\\n            return {temp};\\n        }\\n       vector<TreeNode*>ans;\\n        for(int i=s;i<=e;i++){\\n            vector<TreeNode*>v1 = generateTree(i-s,s,i-1);\\n             vector<TreeNode*>v2 = generateTree(e-i,i+1,e);\\n             for(int j=0;j<v1.size();j++){\\n                 for(int k=0;k<v2.size();k++){\\n                     TreeNode* temp = new TreeNode(i);\\n                     temp->left = v1[j];\\n                     temp->right = v2[k];\\n                     ans.push_back(temp);\\n                 }\\n             }   \\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generateTree(n,1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865068,
                "title": "beats-100-video-java-c-python",
                "content": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/4Ca9t6LYRDI\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\\n\\n```\\nclass Solution {\\n    Map<Pair<Integer, Integer>, List<TreeNode>> dp; \\n    public List<TreeNode> generateTrees(int n) {\\n        dp = new HashMap<>();\\n        return helper(1, n);\\n    }\\n    \\n    public List<TreeNode> helper(int start, int end) {\\n        List<TreeNode> variations = new ArrayList<>();\\n        if (start > end) {\\n            variations.add(null);\\n            return variations;\\n        }\\n        if (dp.containsKey(new Pair<>(start, end))) {\\n            return dp.get(new Pair<>(start, end));\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            List<TreeNode> leftSubTrees = helper(start, i - 1);\\n            List<TreeNode> rightSubTrees = helper(i + 1, end);\\n            for (TreeNode left: leftSubTrees) {\\n                for (TreeNode right: rightSubTrees) {\\n                    TreeNode root = new TreeNode(i, left, right);\\n                    variations.add(root);\\n                }\\n            }\\n        }\\n        dp.put(new Pair<>(start, end), variations);\\n        return variations;\\n    }   \\n}\\n```\\n\\n```\\nclass Solution {\\npublic:\\n    map<pair<int, int>, vector<TreeNode*>> dp; \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return helper(1, n);\\n    }\\n    \\n    vector<TreeNode*> helper(int start, int end) {\\n        vector<TreeNode*> variations;\\n        if (start > end) {\\n            variations.push_back(nullptr);\\n            return variations;\\n        }\\n        if (dp.find(make_pair(start, end)) != dp.end()) {\\n            return dp[make_pair(start, end)];\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            vector<TreeNode*> leftSubTrees = helper(start, i - 1);\\n            vector<TreeNode*> rightSubTrees = helper(i + 1, end);\\n            for (TreeNode* left : leftSubTrees) {\\n                for (TreeNode* right : rightSubTrees) {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = left;\\n                    root->right = right;\\n                    variations.push_back(root);\\n                }\\n            }\\n        }\\n        dp[make_pair(start, end)] = variations;\\n        return variations;\\n    }\\n};\\n\\n```\\n\\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def helper(start, end):\\n            variations = []\\n            if start > end:\\n                variations.append(None)\\n                return variations\\n            if (start, end) in dp:\\n                return dp[(start, end)]\\n            for i in range(start, end + 1):\\n                leftSubTrees = helper(start, i - 1)\\n                rightSubTrees = helper(i + 1, end)\\n                for left in leftSubTrees:\\n                    for right in rightSubTrees:\\n                        root = TreeNode(i)\\n                        root.left = left\\n                        root.right = right\\n                        variations.append(root)\\n            dp[(start, end)] = variations\\n            return variations\\n        \\n        dp = {}\\n        return helper(1, n)\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\n    Map<Pair<Integer, Integer>, List<TreeNode>> dp; \\n    public List<TreeNode> generateTrees(int n) {\\n        dp = new HashMap<>();\\n        return helper(1, n);\\n    }\\n    \\n    public List<TreeNode> helper(int start, int end) {\\n        List<TreeNode> variations = new ArrayList<>();\\n        if (start > end) {\\n            variations.add(null);\\n            return variations;\\n        }\\n        if (dp.containsKey(new Pair<>(start, end))) {\\n            return dp.get(new Pair<>(start, end));\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            List<TreeNode> leftSubTrees = helper(start, i - 1);\\n            List<TreeNode> rightSubTrees = helper(i + 1, end);\\n            for (TreeNode left: leftSubTrees) {\\n                for (TreeNode right: rightSubTrees) {\\n                    TreeNode root = new TreeNode(i, left, right);\\n                    variations.add(root);\\n                }\\n            }\\n        }\\n        dp.put(new Pair<>(start, end), variations);\\n        return variations;\\n    }   \\n}\\n```\n```\\nclass Solution {\\npublic:\\n    map<pair<int, int>, vector<TreeNode*>> dp; \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return helper(1, n);\\n    }\\n    \\n    vector<TreeNode*> helper(int start, int end) {\\n        vector<TreeNode*> variations;\\n        if (start > end) {\\n            variations.push_back(nullptr);\\n            return variations;\\n        }\\n        if (dp.find(make_pair(start, end)) != dp.end()) {\\n            return dp[make_pair(start, end)];\\n        }\\n        for (int i = start; i <= end; ++i) {\\n            vector<TreeNode*> leftSubTrees = helper(start, i - 1);\\n            vector<TreeNode*> rightSubTrees = helper(i + 1, end);\\n            for (TreeNode* left : leftSubTrees) {\\n                for (TreeNode* right : rightSubTrees) {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = left;\\n                    root->right = right;\\n                    variations.push_back(root);\\n                }\\n            }\\n        }\\n        dp[make_pair(start, end)] = variations;\\n        return variations;\\n    }\\n};\\n\\n```\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def helper(start, end):\\n            variations = []\\n            if start > end:\\n                variations.append(None)\\n                return variations\\n            if (start, end) in dp:\\n                return dp[(start, end)]\\n            for i in range(start, end + 1):\\n                leftSubTrees = helper(start, i - 1)\\n                rightSubTrees = helper(i + 1, end)\\n                for left in leftSubTrees:\\n                    for right in rightSubTrees:\\n                        root = TreeNode(i)\\n                        root.left = left\\n                        root.right = right\\n                        variations.append(root)\\n            dp[(start, end)] = variations\\n            return variations\\n        \\n        dp = {}\\n        return helper(1, n)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1926204,
                "title": "100-fastest-swift-solution",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func generateTrees(_ n: Int) -> [TreeNode?] {\\n        var nums: [Int] = []\\n        \\n        func copyNodes(_ node: TreeNode?, _ left: TreeNode?, _ right: TreeNode?) -> TreeNode? {\\n            if node == nil { return nil } \\n            else {\\n                let newNode = TreeNode(node!.val)\\n                newNode.left = copyNodes(left, left?.left, left?.right)\\n                newNode.right = copyNodes(right, right?.left, right?.right)\\n                return newNode\\n            }\\n        }\\n\\n        func generateNodes(_ node: TreeNode?, _ left: [TreeNode?], _ right: [TreeNode?]) -> [TreeNode?] {\\n            let leftCount = left.count > 0 ? left.count : 1\\n            let rightCount = right.count > 0 ? right.count : 1\\n            var res: [TreeNode?] = []\\n            \\n            for i in 0..<leftCount {\\n                let leftNode = left.count > 0 ? left[i] : nil\\n                for j in 0..<rightCount {\\n                    let rightNode = right.count > 0 ? right[j] : nil\\n                    res.append(copyNodes(node, leftNode, rightNode))\\n                }\\n            }\\n            return res\\n        }\\n\\n        func nodes(_ nums: [Int]) -> [TreeNode?] {\\n            if nums.count == 0 { return [] }\\n            var res: [TreeNode?] = []\\n\\n            for (i, num) in nums.enumerated() {\\n                let node = TreeNode(num)\\n                let leftNodes = i > 0 ? nodes(Array(nums[0..<i])) : nodes([])\\n                let rightNodes = i < nums.count - 1 ? nodes(Array(nums[i + 1...nums.count - 1])) : nodes([])\\n                res += generateNodes(node, leftNodes, rightNodes)\\n            }\\n            return res\\n        }\\n        \\n        for num in 1...n { nums.append(num) }\\n        return nodes(nums)\\n    }\\n\\n}\\n```\\n\\nLet me know in comments if you have any doubts. I will be happy to answer.\\n\\nPlease upvote if you found the solution useful.",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public var val: Int\\n *     public var left: TreeNode?\\n *     public var right: TreeNode?\\n *     public init() { self.val = 0; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int) { self.val = val; self.left = nil; self.right = nil; }\\n *     public init(_ val: Int, _ left: TreeNode?, _ right: TreeNode?) {\\n *         self.val = val\\n *         self.left = left\\n *         self.right = right\\n *     }\\n * }\\n */\\n\\nclass Solution {\\n    func generateTrees(_ n: Int) -> [TreeNode?] {\\n        var nums: [Int] = []\\n        \\n        func copyNodes(_ node: TreeNode?, _ left: TreeNode?, _ right: TreeNode?) -> TreeNode? {\\n            if node == nil { return nil } \\n            else {\\n                let newNode = TreeNode(node!.val)\\n                newNode.left = copyNodes(left, left?.left, left?.right)\\n                newNode.right = copyNodes(right, right?.left, right?.right)\\n                return newNode\\n            }\\n        }\\n\\n        func generateNodes(_ node: TreeNode?, _ left: [TreeNode?], _ right: [TreeNode?]) -> [TreeNode?] {\\n            let leftCount = left.count > 0 ? left.count : 1\\n            let rightCount = right.count > 0 ? right.count : 1\\n            var res: [TreeNode?] = []\\n            \\n            for i in 0..<leftCount {\\n                let leftNode = left.count > 0 ? left[i] : nil\\n                for j in 0..<rightCount {\\n                    let rightNode = right.count > 0 ? right[j] : nil\\n                    res.append(copyNodes(node, leftNode, rightNode))\\n                }\\n            }\\n            return res\\n        }\\n\\n        func nodes(_ nums: [Int]) -> [TreeNode?] {\\n            if nums.count == 0 { return [] }\\n            var res: [TreeNode?] = []\\n\\n            for (i, num) in nums.enumerated() {\\n                let node = TreeNode(num)\\n                let leftNodes = i > 0 ? nodes(Array(nums[0..<i])) : nodes([])\\n                let rightNodes = i < nums.count - 1 ? nodes(Array(nums[i + 1...nums.count - 1])) : nodes([])\\n                res += generateNodes(node, leftNodes, rightNodes)\\n            }\\n            return res\\n        }\\n        \\n        for num in 1...n { nums.append(num) }\\n        return nodes(nums)\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 410074,
                "title": "java-recursion-iteration-solutions-dp-clone-memoization",
                "content": "Reference: [LeetCode](https://leetcode.com/problems/unique-binary-search-trees-ii/)\\nDifficulty: <span class=\"orange\">Medium</span>\\n\\n## Problem\\n\\n> Given an integer `n`, generate all structurally unique BST\\'s (binary search trees) that store values `1 ... n`.\\n\\n**Example:**\\n\\n```java\\nInput: 3\\nOutput:\\n[\\n  [1,null,3,2],\\n  [3,2,null,1],\\n  [3,1,null,null,2],\\n  [2,1,3],\\n  [1,null,2,null,3]\\n]\\nExplanation:\\nThe above output corresponds to the 5 unique BST\\'s shown below:\\n\\n   1         3     3      2      1\\n    \\\\       /     /      / \\\\      \\\\\\n     3     2     1      1   3      2\\n    /     /       \\\\                 \\\\\\n   2     1         2                 3\\n```\\n\\n\\n## Analysis\\n\\n### Recursion\\n\\nIf we directly apply the solution in `96. Unique Binary Search Trees`, we have an incorrect result. Consider the following example.\\n\\n```java\\nn = 5, i = 3\\n2 left nodes:  [1, 2]\\n2 right nodes: [4, 5]\\n\\nn = 10, i = 8\\n7 left nodes:  [1, 2, 3, 4, 5, 6, 7]\\n2 right nodes: [9, 10]\\n```\\n\\nAs you can see, although there are still 2 nodes in the right subtrees, the values are not the same. In the previous approach, it did not handle this situation.\\n\\nSo rather than passing a parameter `n` (number of nodes), we now pass down two parameters `lo` and `hi` indicating the range of values of a tree.\\n\\nFor example, `generateTrees(1, 5)` generate trees whose values range from `1` to `5`, and each of them has a chance to be the root, which also includes the information of number of nodes `n`. Say when the root is `3`, we calculate `generateTrees(1, 2)` and `generateTrees(4, 5)`.\\n\\n**Note:** When `n == 0`, it returns `[]` instead of `[[null]]`.\\n\\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  if (n == 0) {\\n    return new ArrayList<>();\\n  }\\n  return generateTrees(1, n);\\n}\\n\\nprivate List<TreeNode> generateTrees(int lo, int hi) {\\n  int n = hi - lo + 1;\\n  if (n == 0) {\\n    List<TreeNode> L = new ArrayList<>();\\n    L.add(null);\\n    return L;\\n  }\\n  List<TreeNode> result = new ArrayList<>();\\n  for (int i = lo; i <= hi; ++i) {\\n    List<TreeNode> leftSubtrees = generateTrees(lo, i - 1);\\n    List<TreeNode> rightSubtrees = generateTrees(i + 1, hi);\\n    for (TreeNode leftSub : leftSubtrees) {\\n      for (TreeNode rightSub : rightSubtrees) {\\n        TreeNode newTree = new TreeNode(i);\\n        newTree.left = leftSub;\\n        newTree.right = rightSub;\\n        result.add(newTree);\\n      }\\n    }\\n  }\\n  return result;\\n}\\n```\\n\\n**Time:** It is at most bounded by `O(N x N!)`. A tighter bound would be Catalan number times `N` since we\\'ve done `N` times, which is `N x G_N = O(Nx\\\\frac{4^N}{N^{3/2}}) = O(\\\\frac{4^N}{N^{1/2}})`.\\n**Space:** `O(N x G_N) = O(\\\\frac{4^N}{N^{1/2}})`\\n\\n\\n\\n### DP (Clone)\\n\\nReference: [link](https://leetcode.wang/leetCode-95-Unique-Binary-Search-TreesII.html)\\n\\nLet\\'s denote `tree[i]` as the list of trees of size `i`. Think of `tree[i]` as our building blocks for a larger tree.\\n\\n```java\\nExample: n = 3\\n\\ntree[0]:\\nnull\\n\\ntree[1]:\\n[1]\\n[2]\\n[3]\\n\\ntree[2]:\\n[1 2]\\n1\\n \\\\\\n  2      // 2 structures\\n  2\\n /\\n1\\n[2 3]\\n2\\n \\\\\\n  3\\n  3\\n /\\n2        // [1 3] is not possible\\n\\ntree[3]:  // (based on tree[1], tree[2])\\n   3\\n  /\\n[1 2]\\n   1\\n    \\\\\\n   [2 3]\\n   2\\n /  \\\\\\n[1] [3]\\n```\\n\\nSo we can compute all possible trees for `tree[1]`, `tree[2]`, ..., then we can construct `tree[n]` by previous results.\\n\\nFor a small `n = 3` , we notice that when we calculate `tree[2]` we want all possible combinations for `tree[2]` (`[1 2]`, `[2 3]`). **Furthermore**, if we have a large `n = 100`, we want all the combinations as follows `[1 2]`, `[2 3]`, `[3 4]`, ..., `[99 100]` (each of them has two structures).\\n\\nSince these trees have the same two types of structures:\\n\\n```java\\nx       y\\n \\\\     /\\n  y   x\\n```\\n\\nWe can actually construct all the trees by `[1 2]` plus some constant, say `offset`. For example, `[5 6]` can be constructed as follows:\\n\\n```java\\n1    +4    5\\n \\\\          \\\\\\n  2    +4    6\\n------------------\\n  2    +4    6\\n /          /\\n1    +4    5\\n```\\n\\nSay the problem is `n = 100`. During the execution of the algorithm when `i = 98`, we want to get all possible trees for `i = 98` as the root. The size of the left subtree is `97` and the subtree is picked from `tree[97]`; the size of the right subtree is `2` and the subtree is picked from `tree[2]`.\\n\\nFor the left subtree, we already have `tree[97]` computed as `[1 2 3 ... 97]`.\\n\\nFor the right subtree, we want `[99 100]`, which can be computed by `[1 2]` plus `offset = 98`.\\n\\n```java\\n1    +98    99\\n \\\\            \\\\\\n  2    +98    100\\n------------------\\n  2    +98    100\\n /            /\\n1    +98     99\\n```\\n\\nTherefore, given a tree `root`, we can generate a new tree by cloning with an `offset`.\\n\\n```java\\n// adding offset to each node of a tree root\\nprivate TreeNode clone(TreeNode root, int offset) {\\n  if (n == null) {\\n    return null;\\n  }\\n  TreeNode node = new TreeNode(root.val + offset);\\n  node.left = clone(root.left, offset);\\n  node.right = clone(root.right, offset);\\n  return node;\\n}\\n```\\n\\nFor input `n`, the result we want is `tree[n]` (`[1 2 3 ... n]`). Here is the code for `generateTrees(n)`:\\n\\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  List<TreeNode>[] tree = new ArrayList[n + 1];\\n  tree[0] = new ArrayList<>();\\n  if (n == 0) {\\n    return tree[0];\\n  }\\n  tree[0].add(null);\\n  // Calculate all lengths\\n  for (int len = 1; len <= n; ++len) {\\n    tree[len] = new ArrayList<>(); // contains all trees we construct\\n    // Consider each as the root\\n    for (int i = 1; i <= len; ++i) {\\n      int leftSize = i - 1;\\n      int rightSize = len - i;\\n      for (TreeNode leftTree : tree[leftSize]) [\\n        for (TreeNode rightTree : tree[rightSize]) {\\n          TreeNode tree = new TreeNode(i);\\n          tree.left = leftTree;  // left subtree requires no cloning\\n          tree.right = clone(rightTree, i); // add i as the offset\\n          tree[len].add(tree);\\n        }\\n      ]\\n    }\\n  }\\n  return tree[n];\\n}\\n```\\n\\n**Time:** <span class=\"purple\">N/A</span> (I don\\'t know T_T)\\n**Space:** <span class=\"purple\">N/A</span> (I don\\'t know T_T)\\n\\n\\n### DP (2D)\\n\\nJudge: `1ms`, faster than `99.95%`. I have nothing to say.\\n\\n![](https://bloggg-1254259681.cos.na-siliconvalley.myqcloud.com/sz3zr.jpg)\\n\\nHere is the code I wrote:\\n\\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  if (n == 0) {\\n    return new ArrayList<>();\\n  }\\n  List<TreeNode>[][] g = new ArrayList[n + 1][n + 1];\\n  // init\\n  List<TreeNode> nullList = new ArrayList<>(); nullList.add(null);\\n  g[0][0] = nullList;\\n  for (int k = 1; k <= n; ++k) { // g(0, k)\\n    g[0][k] = nullList;\\n  }\\n  for (int k = 1; k <= n; ++k) { // diagonal: one node (itself)\\n    List<TreeNode> oneList = new ArrayList<>(); oneList.add(new TreeNode(k));\\n    g[k][k] = oneList;\\n  }\\n  for (int k = 1; k <= n; ++k) { // one node above diagonal: nullList\\n    g[k][k - 1] = nullList;\\n  }\\n  // dp\\n  for (int i = n - 1; i >= 1; --i) {\\n    for (int j = i + 1; j <= n; ++j) {\\n      List<TreeNode> result = new ArrayList<>();\\n      for (int k = i ; k <= j; ++k) { // for each k as root [i, j]\\n        List<TreeNode> leftList = (k - 1 <= n) ? g[i][k - 1] : nullList;\\n        List<TreeNode> rightList = (k + 1 <= n) ? g[k + 1][j] : nullList;\\n        for (TreeNode left : leftList) {\\n          for (TreeNode right: rightList) {\\n            TreeNode newTree = new TreeNode(k);\\n            newTree.left = left;\\n            newTree.right = right;\\n            result.add(newTree);\\n          }\\n        }\\n      }\\n      g[i][j] = result;\\n    }\\n  }\\n  return g[1][n];\\n}\\n```\\n\\n**Time:** <span class=\"purple\">N/A</span> (I don\\'t know T_T)\\n**Space:** <span class=\"purple\">N/A</span> (I don\\'t know T_T)",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```java\\nInput: 3\\nOutput:\\n[\\n  [1,null,3,2],\\n  [3,2,null,1],\\n  [3,1,null,null,2],\\n  [2,1,3],\\n  [1,null,2,null,3]\\n]\\nExplanation:\\nThe above output corresponds to the 5 unique BST\\'s shown below:\\n\\n   1         3     3      2      1\\n    \\\\       /     /      / \\\\      \\\\\\n     3     2     1      1   3      2\\n    /     /       \\\\                 \\\\\\n   2     1         2                 3\\n```\n```java\\nn = 5, i = 3\\n2 left nodes:  [1, 2]\\n2 right nodes: [4, 5]\\n\\nn = 10, i = 8\\n7 left nodes:  [1, 2, 3, 4, 5, 6, 7]\\n2 right nodes: [9, 10]\\n```\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  if (n == 0) {\\n    return new ArrayList<>();\\n  }\\n  return generateTrees(1, n);\\n}\\n\\nprivate List<TreeNode> generateTrees(int lo, int hi) {\\n  int n = hi - lo + 1;\\n  if (n == 0) {\\n    List<TreeNode> L = new ArrayList<>();\\n    L.add(null);\\n    return L;\\n  }\\n  List<TreeNode> result = new ArrayList<>();\\n  for (int i = lo; i <= hi; ++i) {\\n    List<TreeNode> leftSubtrees = generateTrees(lo, i - 1);\\n    List<TreeNode> rightSubtrees = generateTrees(i + 1, hi);\\n    for (TreeNode leftSub : leftSubtrees) {\\n      for (TreeNode rightSub : rightSubtrees) {\\n        TreeNode newTree = new TreeNode(i);\\n        newTree.left = leftSub;\\n        newTree.right = rightSub;\\n        result.add(newTree);\\n      }\\n    }\\n  }\\n  return result;\\n}\\n```\n```java\\nExample: n = 3\\n\\ntree[0]:\\nnull\\n\\ntree[1]:\\n[1]\\n[2]\\n[3]\\n\\ntree[2]:\\n[1 2]\\n1\\n \\\\\\n  2      // 2 structures\\n  2\\n /\\n1\\n[2 3]\\n2\\n \\\\\\n  3\\n  3\\n /\\n2        // [1 3] is not possible\\n\\ntree[3]:  // (based on tree[1], tree[2])\\n   3\\n  /\\n[1 2]\\n   1\\n    \\\\\\n   [2 3]\\n   2\\n /  \\\\\\n[1] [3]\\n```\n```java\\nx       y\\n \\\\     /\\n  y   x\\n```\n```java\\n1    +4    5\\n \\\\          \\\\\\n  2    +4    6\\n------------------\\n  2    +4    6\\n /          /\\n1    +4    5\\n```\n```java\\n1    +98    99\\n \\\\            \\\\\\n  2    +98    100\\n------------------\\n  2    +98    100\\n /            /\\n1    +98     99\\n```\n```java\\n// adding offset to each node of a tree root\\nprivate TreeNode clone(TreeNode root, int offset) {\\n  if (n == null) {\\n    return null;\\n  }\\n  TreeNode node = new TreeNode(root.val + offset);\\n  node.left = clone(root.left, offset);\\n  node.right = clone(root.right, offset);\\n  return node;\\n}\\n```\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  List<TreeNode>[] tree = new ArrayList[n + 1];\\n  tree[0] = new ArrayList<>();\\n  if (n == 0) {\\n    return tree[0];\\n  }\\n  tree[0].add(null);\\n  // Calculate all lengths\\n  for (int len = 1; len <= n; ++len) {\\n    tree[len] = new ArrayList<>(); // contains all trees we construct\\n    // Consider each as the root\\n    for (int i = 1; i <= len; ++i) {\\n      int leftSize = i - 1;\\n      int rightSize = len - i;\\n      for (TreeNode leftTree : tree[leftSize]) [\\n        for (TreeNode rightTree : tree[rightSize]) {\\n          TreeNode tree = new TreeNode(i);\\n          tree.left = leftTree;  // left subtree requires no cloning\\n          tree.right = clone(rightTree, i); // add i as the offset\\n          tree[len].add(tree);\\n        }\\n      ]\\n    }\\n  }\\n  return tree[n];\\n}\\n```\n```java\\npublic List<TreeNode> generateTrees(int n) {\\n  if (n == 0) {\\n    return new ArrayList<>();\\n  }\\n  List<TreeNode>[][] g = new ArrayList[n + 1][n + 1];\\n  // init\\n  List<TreeNode> nullList = new ArrayList<>(); nullList.add(null);\\n  g[0][0] = nullList;\\n  for (int k = 1; k <= n; ++k) { // g(0, k)\\n    g[0][k] = nullList;\\n  }\\n  for (int k = 1; k <= n; ++k) { // diagonal: one node (itself)\\n    List<TreeNode> oneList = new ArrayList<>(); oneList.add(new TreeNode(k));\\n    g[k][k] = oneList;\\n  }\\n  for (int k = 1; k <= n; ++k) { // one node above diagonal: nullList\\n    g[k][k - 1] = nullList;\\n  }\\n  // dp\\n  for (int i = n - 1; i >= 1; --i) {\\n    for (int j = i + 1; j <= n; ++j) {\\n      List<TreeNode> result = new ArrayList<>();\\n      for (int k = i ; k <= j; ++k) { // for each k as root [i, j]\\n        List<TreeNode> leftList = (k - 1 <= n) ? g[i][k - 1] : nullList;\\n        List<TreeNode> rightList = (k + 1 <= n) ? g[k + 1][j] : nullList;\\n        for (TreeNode left : leftList) {\\n          for (TreeNode right: rightList) {\\n            TreeNode newTree = new TreeNode(k);\\n            newTree.left = left;\\n            newTree.right = right;\\n            result.add(newTree);\\n          }\\n        }\\n      }\\n      g[i][j] = result;\\n    }\\n  }\\n  return g[1][n];\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 332563,
                "title": "explanation-with-diagrams-dp-solution",
                "content": "Again I am going to explain a DP solution using diagrams.\\nFirst I define a two-dimension list res[0..n][0..n].(res[0][0] is of no use,just for readability,so we will ignore them later.)\\nres[i][j] stores the root TreeNode of all possible BST formed by integers from i to j.Then our goal is res[1][n].\\nTo calculate res[1][n],we can review last problem,to find out the recursion formula.\\nTake n=3 into consideration first,we want to know res[1][3].\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855139.png)\\n\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855122.png)\\nFrom the picture we can find that solving res[1][3] needs res[2][3],res[1][1],res[3][3] and res[1][2].\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855224.png)\\n\\nTo be specific,for instance,if we have known res[2][3],by simply set \\n```\\nfor oneNode of res[2][3] :\\n    t = TreeNode(1)\\n    t.left = null\\n    t.right = oneNode\\n    res[1][3].append(t)\\n```\\nwe can get some possible solution of res[1][3].By the same method we can solve out all solutions of res[1][3].\\nThen we turn to res[2][3].As is the same,res[2][3] rely on res[2][2] and res[3][3]\\n,and res[1][2] rely on res[1][1] and res[2][2].\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855195.png)\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855252.png)\\nIt is obvious that res[i][i] = [i].\\nSo we only need to fill the matrix along every diagonal line one by one,from middle diagonal line to the right-top corner.\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855271.png)\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855278.png)\\n![image](https://assets.leetcode.com/users/planegoose/image_1562855281.png)\\nThen we can use bottom-up DP to solve every diagonal line,and finally get res[1][n].\\n\\n**Supplement**\\n(res begins at 0,ends at n,just for readability.Of course it will occupy less space if we let it end at n-1.)\\n(There are many vacant grid occupied(colored in gray) at left-bottom.Maybe we can improve the algorithms in this term.)\\n(My code is somewhat too long,though excelling 98% in time and 97% in space,but I haven\\'t compacted it,so I feel shamed to put it up.)\\n\\n",
                "solutionTags": [
                    "Dynamic Programming"
                ],
                "code": "```\\nfor oneNode of res[2][3] :\\n    t = TreeNode(1)\\n    t.left = null\\n    t.right = oneNode\\n    res[1][3].append(t)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 151394,
                "title": "javascript-dfs-with-memo",
                "content": "```js\\nfunction generateTrees(n) {\\n  if (n < 1) return [];\\n  const dp = [...Array(n+1)].map(r => Array(n+1));\\n  return generate(1, n);\\n  \\n  function generate(s, e) {\\n    if (s > e) return [null];\\n    if (dp[s][e]) return dp[s][e];\\n    \\n    const res = [];\\n    for (let root = s; root <= e; root++) {\\n      for (let left of generate(s, root-1)) {\\n        for (let right of generate(root+1, e)) {\\n          const newTree = new TreeNode(root);\\n          newTree.left = left;\\n          newTree.right = right;\\n          res.push(newTree);\\n        }\\n      }\\n    }\\n    \\n    dp[s][e] = res;\\n    return res;\\n  }\\n}\\n```",
                "solutionTags": [],
                "code": "```js\\nfunction generateTrees(n) {\\n  if (n < 1) return [];\\n  const dp = [...Array(n+1)].map(r => Array(n+1));\\n  return generate(1, n);\\n  \\n  function generate(s, e) {\\n    if (s > e) return [null];\\n    if (dp[s][e]) return dp[s][e];\\n    \\n    const res = [];\\n    for (let root = s; root <= e; root++) {\\n      for (let left of generate(s, root-1)) {\\n        for (let right of generate(root+1, e)) {\\n          const newTree = new TreeNode(root);\\n          newTree.left = left;\\n          newTree.right = right;\\n          res.push(newTree);\\n        }\\n      }\\n    }\\n    \\n    dp[s][e] = res;\\n    return res;\\n  }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1670103,
                "title": "easy-to-understand-dp-solution-iterative-space-optimised-better-runtime",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    TreeNode* newTreeRight(TreeNode* root, int j){\\n        if(root==NULL){\\n            return root;\\n        }\\n        TreeNode* newRoot = new TreeNode(root->val + j);\\n        newRoot->left = newTreeRight(root->left, j);\\n        newRoot->right = newTreeRight(root->right, j);\\n        return newRoot;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==1){\\n            return {new TreeNode(1)};\\n        }\\n        vector<vector<TreeNode*>> dp(n+1);\\n        TreeNode* root = new TreeNode(1);\\n        dp[1].push_back(root);\\n        for(int i = 2; i<=n; i++){\\n            for(int j = 1; j<=i; j++){\\n                int left = j-1;\\n                int right = i-j;\\n                if(left==0){\\n                    for(int k = 0; k<dp[right].size(); k++){\\n                        root = new TreeNode(j);\\n                        TreeNode *newRoot = newTreeRight(dp[right][k], j);\\n                        root->right = newRoot;\\n                        dp[i].push_back(root);\\n                    }\\n                }else if(right==0){\\n                    for(int k = 0; k<dp[left].size(); k++){\\n                        root = new TreeNode(j);\\n                        root->left = dp[left][k];\\n                        dp[i].push_back(root);\\n                    }\\n                }else{\\n                    for(int k = 0; k<dp[left].size(); k++){\\n                        for(int l = 0; l<dp[right].size(); l++){\\n                            root = new TreeNode(j);\\n                            root->left = dp[left][k];\\n                            TreeNode *newRoot = newTreeRight(dp[right][l], j);\\n                            root->right = newRoot;\\n                            dp[i].push_back(root);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    TreeNode* newTreeRight(TreeNode* root, int j){\\n        if(root==NULL){\\n            return root;\\n        }\\n        TreeNode* newRoot = new TreeNode(root->val + j);\\n        newRoot->left = newTreeRight(root->left, j);\\n        newRoot->right = newTreeRight(root->right, j);\\n        return newRoot;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==1){\\n            return {new TreeNode(1)};\\n        }\\n        vector<vector<TreeNode*>> dp(n+1);\\n        TreeNode* root = new TreeNode(1);\\n        dp[1].push_back(root);\\n        for(int i = 2; i<=n; i++){\\n            for(int j = 1; j<=i; j++){\\n                int left = j-1;\\n                int right = i-j;\\n                if(left==0){\\n                    for(int k = 0; k<dp[right].size(); k++){\\n                        root = new TreeNode(j);\\n                        TreeNode *newRoot = newTreeRight(dp[right][k], j);\\n                        root->right = newRoot;\\n                        dp[i].push_back(root);\\n                    }\\n                }else if(right==0){\\n                    for(int k = 0; k<dp[left].size(); k++){\\n                        root = new TreeNode(j);\\n                        root->left = dp[left][k];\\n                        dp[i].push_back(root);\\n                    }\\n                }else{\\n                    for(int k = 0; k<dp[left].size(); k++){\\n                        for(int l = 0; l<dp[right].size(); l++){\\n                            root = new TreeNode(j);\\n                            root->left = dp[left][k];\\n                            TreeNode *newRoot = newTreeRight(dp[right][l], j);\\n                            root->right = newRoot;\\n                            dp[i].push_back(root);\\n                        }\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31631,
                "title": "a-simple-bottom-up-dp-solution",
                "content": "The optimal substructure is that for any BST with nodes 1 to n, pick i-th node as root, then the left subtree will contain nodes from 1 to (i-1), and the right subtree will contain nodes from (i+1) to n. I use a 3-d vector to store all possible trees for subtrees with nodes from i to j (0 <= i <= j <=n+1 ), if i==j, there is only one-node tree; if j = i-1, then there is no actual node(storing NULL pointer).  Use a bottom up solution to generate all possible subtrees with nodes i to j. Finally the result will be the subtree set with nodes 1 to n, \\n    \\n    \\tvector<TreeNode *> generateTrees(int n) {\\n\\t\\tif(n == 0)\\treturn vector<TreeNode *>(1, NULL);\\n\\t\\tvector<vector<vector<TreeNode*>>> subtree(n+2, vector<vector<TreeNode*>>(n+2, vector<TreeNode*>()));\\n\\t\\tfor(int i=1; i<=n+1; ++i){\\n\\t\\t\\tsubtree[i][i].push_back(new TreeNode(i));\\n\\t\\t    subtree[i][i-1].push_back(NULL);\\t\\n\\t\\t}\\n\\t\\tfor(int l=2; l<=n; ++l){\\n\\t\\t\\tfor(int i=1; i<=n-l+1; ++i){\\n\\t\\t\\t\\tfor(int j=i; j<=i+l-1; ++j){\\n\\t\\t\\t\\t\\tfor(int k=0; k<subtree[j+1][i+l-1].size(); ++k){\\n\\t\\t\\t\\t\\t    for(int m=0; m<subtree[i][j-1].size(); ++m){\\n\\t\\t\\t\\t\\t        TreeNode *T = new TreeNode(j);\\n\\t\\t\\t\\t\\t        T->left = subtree[i][j-1][m];\\n\\t\\t\\t\\t\\t        T->right = subtree[j+1][i+l-1][k];\\n\\t\\t\\t\\t            subtree[i][i+l-1].push_back(T);    \\n\\t\\t\\t\\t\\t    }\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn subtree[1][n];\\n\\t}",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Tree"
                ],
                "code": "The optimal substructure is that for any BST with nodes 1 to n, pick i-th node as root, then the left subtree will contain nodes from 1 to (i-1), and the right subtree will contain nodes from (i+1) to n. I use a 3-d vector to store all possible trees for subtrees with nodes from i to j (0 <= i <= j <=n+1 ), if i==j, there is only one-node tree; if j = i-1, then there is no actual node(storing NULL pointer).  Use a bottom up solution to generate all possible subtrees with nodes i to j. Finally the result will be the subtree set with nodes 1 to n, \\n    \\n    \\tvector<TreeNode *> generateTrees(int n) {\\n\\t\\tif(n == 0)\\treturn vector<TreeNode *>(1, NULL);\\n\\t\\tvector<vector<vector<TreeNode*>>> subtree(n+2, vector<vector<TreeNode*>>(n+2, vector<TreeNode*>()));\\n\\t\\tfor(int i=1; i<=n+1; ++i){\\n\\t\\t\\tsubtree[i][i].push_back(new TreeNode(i));\\n\\t\\t    subtree[i][i-1].push_back(NULL);\\t\\n\\t\\t}\\n\\t\\tfor(int l=2; l<=n; ++l){\\n\\t\\t\\tfor(int i=1; i<=n-l+1; ++i){\\n\\t\\t\\t\\tfor(int j=i; j<=i+l-1; ++j){\\n\\t\\t\\t\\t\\tfor(int k=0; k<subtree[j+1][i+l-1].size(); ++k){\\n\\t\\t\\t\\t\\t    for(int m=0; m<subtree[i][j-1].size(); ++m){\\n\\t\\t\\t\\t\\t        TreeNode *T = new TreeNode(j);\\n\\t\\t\\t\\t\\t        T->left = subtree[i][j-1][m];\\n\\t\\t\\t\\t\\t        T->right = subtree[j+1][i+l-1][k];\\n\\t\\t\\t\\t            subtree[i][i+l-1].push_back(T);    \\n\\t\\t\\t\\t\\t    }\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn subtree[1][n];\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1321506,
                "title": "java-easy-solution-recursion",
                "content": "```\\n\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return recursion(1,n);\\n    }\\n    List<TreeNode> recursion(int start ,int end)\\n    {\\n        List<TreeNode> list = new ArrayList<>();\\n        if(start > end)\\n        {\\n            list.add(null);\\n            return list;\\n        }\\n        if(start == end)\\n        {\\n            list.add(new TreeNode(start));\\n            return list;\\n        }\\n        List<TreeNode> left,right;\\n        for(int i = start;i<=end;i++)\\n        {\\n            left = recursion(start,i-1);\\n            right = recursion(i+1,end);\\n            for(TreeNode lst : left)\\n            {\\n                for(TreeNode rst : right)\\n                {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = lst;\\n                    root.right = rst;\\n                    list.add(root);\\n                }\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```\\nPlease upvote if u find my code easy to understand",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\n\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return recursion(1,n);\\n    }\\n    List<TreeNode> recursion(int start ,int end)\\n    {\\n        List<TreeNode> list = new ArrayList<>();\\n        if(start > end)\\n        {\\n            list.add(null);\\n            return list;\\n        }\\n        if(start == end)\\n        {\\n            list.add(new TreeNode(start));\\n            return list;\\n        }\\n        List<TreeNode> left,right;\\n        for(int i = start;i<=end;i++)\\n        {\\n            left = recursion(start,i-1);\\n            right = recursion(i+1,end);\\n            for(TreeNode lst : left)\\n            {\\n                for(TreeNode rst : right)\\n                {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = lst;\\n                    root.right = rst;\\n                    list.add(root);\\n                }\\n            }\\n        }\\n        return list;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865004,
                "title": "c-recursion",
                "content": "**Connect with me on LinkedIn**: https://www.linkedin.com/in/abhay5349singh/\\n\\n![image](https://assets.leetcode.com/users/images/5be019ea-898c-4178-b92a-afdd521465c9_1691201173.537878.jpeg)\\n\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> build(int start, int end){\\n        if(start>end) return {NULL};\\n        if(start==end) return {new TreeNode(start)};\\n        \\n        vector<TreeNode*> ans;\\n        for(int i=start;i<=end;i++){\\n            // inorder of BST is sorted i.e left -> root-> right\\n            vector<TreeNode*> left=build(start,i-1);\\n            vector<TreeNode*> right=build(i+1,end);\\n            \\n            // building all possible combinations with left having smaller than root & right having bigger values than root\\n            for(TreeNode* l : left){\\n                for(TreeNode* r : right){\\n                    TreeNode* root=new TreeNode(i);\\n                    root->left=l;\\n                    root->right=r;\\n                    \\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return build(1,n);\\n    }\\n};\\n```\\n\\n**Do upvote if it helps :)**",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> build(int start, int end){\\n        if(start>end) return {NULL};\\n        if(start==end) return {new TreeNode(start)};\\n        \\n        vector<TreeNode*> ans;\\n        for(int i=start;i<=end;i++){\\n            // inorder of BST is sorted i.e left -> root-> right\\n            vector<TreeNode*> left=build(start,i-1);\\n            vector<TreeNode*> right=build(i+1,end);\\n            \\n            // building all possible combinations with left having smaller than root & right having bigger values than root\\n            for(TreeNode* l : left){\\n                for(TreeNode* r : right){\\n                    TreeNode* root=new TreeNode(i);\\n                    root->left=l;\\n                    root->right=r;\\n                    \\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return build(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2280436,
                "title": "c-pure-recursion-to-dp-only-with-addition-of-2-lines",
                "content": "There is a significant amount of improvement in the 2nd solution compared to the effort made to code that one over the inital recursive un-memoized solution.\\n\\n# 1. Pure Recursion (43 ms)\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> buildTrees(int l, int r) {\\n        \\n        if(l > r) return {nullptr};\\n        \\n        vector<TreeNode*> ans;\\n        \\n        for(int i=l; i<=r; ++i)\\n        {\\n\\t\\t\\t// set of BST\\'s we can make using values [l, i-1] \\n\\t\\t\\t\\n            vector<TreeNode*> left = buildTrees(l, i-1);\\n            \\n\\t\\t\\t// set of BST\\'s we can make using values [i+1, r]\\n\\t\\t\\t\\n            vector<TreeNode*> right = buildTrees(i+1, r);\\n            \\n\\t\\t\\t// creating all the possible different combinations using left and right vectors\\n\\t\\t\\t\\n            for(int j=0; j<left.size(); ++j)\\n            {\\n                for(int k=0; k<right.size(); ++k)\\n                {\\n                    ans.push_back(new TreeNode(i, left[j], right[k]));\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTrees(1, n);\\n    }\\n};\\n```\\n\\n# 2. Top-Down DP (11 ms)\\n```\\nclass Solution {\\npublic:\\n    map<pair<int,int>, vector<TreeNode*>> m; //Line #1\\n    \\n    vector<TreeNode*> buildTrees(int l, int r) {\\n        \\n        if(l > r) return {nullptr};\\n        \\n        if(m.find({l, r}) != m.end()) return m[{l, r}]; //Line #2\\n        \\n        vector<TreeNode*> ans;\\n        \\n        for(int i=l; i<=r; ++i)\\n        {\\n            vector<TreeNode*> left = buildTrees(l, i-1);\\n            \\n            vector<TreeNode*> right = buildTrees(i+1, r);\\n            \\n            for(int j=0; j<left.size(); ++j)\\n            {\\n                for(int k=0; k<right.size(); ++k)\\n                {\\n                    ans.push_back(new TreeNode(i, left[j], right[k]));\\n                }\\n            }\\n        }\\n        \\n        return m[{l, r}] = ans; //Line #3\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTrees(1, n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> buildTrees(int l, int r) {\\n        \\n        if(l > r) return {nullptr};\\n        \\n        vector<TreeNode*> ans;\\n        \\n        for(int i=l; i<=r; ++i)\\n        {\\n\\t\\t\\t// set of BST\\'s we can make using values [l, i-1] \\n\\t\\t\\t\\n            vector<TreeNode*> left = buildTrees(l, i-1);\\n            \\n\\t\\t\\t// set of BST\\'s we can make using values [i+1, r]\\n\\t\\t\\t\\n            vector<TreeNode*> right = buildTrees(i+1, r);\\n            \\n\\t\\t\\t// creating all the possible different combinations using left and right vectors\\n\\t\\t\\t\\n            for(int j=0; j<left.size(); ++j)\\n            {\\n                for(int k=0; k<right.size(); ++k)\\n                {\\n                    ans.push_back(new TreeNode(i, left[j], right[k]));\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTrees(1, n);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    map<pair<int,int>, vector<TreeNode*>> m; //Line #1\\n    \\n    vector<TreeNode*> buildTrees(int l, int r) {\\n        \\n        if(l > r) return {nullptr};\\n        \\n        if(m.find({l, r}) != m.end()) return m[{l, r}]; //Line #2\\n        \\n        vector<TreeNode*> ans;\\n        \\n        for(int i=l; i<=r; ++i)\\n        {\\n            vector<TreeNode*> left = buildTrees(l, i-1);\\n            \\n            vector<TreeNode*> right = buildTrees(i+1, r);\\n            \\n            for(int j=0; j<left.size(); ++j)\\n            {\\n                for(int k=0; k<right.size(); ++k)\\n                {\\n                    ans.push_back(new TreeNode(i, left[j], right[k]));\\n                }\\n            }\\n        }\\n        \\n        return m[{l, r}] = ans; //Line #3\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTrees(1, n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1337271,
                "title": "recursive-c-solution-faster-than-97-c-submissions",
                "content": "**INTUTION:**\\nFor every element in range 1 to n lets say (temp), we try to find its corresponding left and right subtrees by helper(start,i-1) && helper(i+1,end) iterate through all possibilities of them and set temp\\'s left and right sub trees and push back to some vector and return.\\n```\\nvector<TreeNode*> generateTrees(int n) \\n    {\\n        return helper(1,n);\\n    }\\n    \\n    vector<TreeNode*> helper(int start,int end)\\n    {\\n        vector<TreeNode*> ans;\\n        if(start>end)\\n        {\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i=start;i<=end;i++)\\n        {\\n            vector<TreeNode*> left = helper(start,i-1);\\n            vector<TreeNode*> right = helper(i+1,end);\\n            \\n            for(int j=0;j<left.size();j++)\\n            {\\n                for(int k=0;k<right.size();k++)\\n                {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left=left[j];\\n                    root->right=right[k];\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "**INTUTION:**\\nFor every element in range 1 to n lets say (temp), we try to find its corresponding left and right subtrees by helper(start,i-1) && helper(i+1,end) iterate through all possibilities of them and set temp\\'s left and right sub trees and push back to some vector and return.\\n```\\nvector<TreeNode*> generateTrees(int n) \\n    {\\n        return helper(1,n);\\n    }\\n    \\n    vector<TreeNode*> helper(int start,int end)\\n    {\\n        vector<TreeNode*> ans;\\n        if(start>end)\\n        {\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i=start;i<=end;i++)\\n        {\\n            vector<TreeNode*> left = helper(start,i-1);\\n            vector<TreeNode*> right = helper(i+1,end);\\n            \\n            for(int j=0;j<left.size();j++)\\n            {\\n                for(int k=0;k<right.size();k++)\\n                {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left=left[j];\\n                    root->right=right[k];\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1172462,
                "title": "approach-code",
                "content": "Honestly I was not able to solve the problem in one go. I was able to get the idea to solve the problem but wasn\\'t able to implement it. \\nFirstly try to solve the problem Unique Binary Search Tree\\nSo here is my approach:\\n1) We need to generate a ***BST*** which means that left child will contain the node value lesser than root and right child will contain the value greater than the value of root.\\n2) And also I have ***n*** number of choices for the root node. \\n3) So i will iterate from ***1 to n*** and will generate left and rightsubtree recursivly.\\n4) Then create a tree from all the possible left and right subtree an then finally add to the solution list.\\n5) Also do not forget to add the base condition.\\nBase condition will be when my ***start>end***\\nSo here is my code:\\n```\\n vector<TreeNode*> generate(int start,int end)\\n    { vector<TreeNode*>list;\\n        if(start>end)\\n        {\\n            list.push_back(nullptr);\\n            return list;\\n        }\\n        for(int i=start;i<=end;i++)\\n        {\\n           vector<TreeNode*>leftsubtree=generate(start,i-1);\\n           vector<TreeNode*>rightsubtree=generate(i+1,end);\\n            for(int j=0;j<leftsubtree.size();j++)\\n            {\\n                TreeNode* left=leftsubtree[j];\\n                for(int k=0;k<rightsubtree.size();k++)\\n                {\\n                    TreeNode* right=rightsubtree[k];\\n                    TreeNode* node=new TreeNode(i);\\n                    node->left=left;\\n                    node->right=right;\\n                  list.push_back(node);\\n                }\\n            }\\n           \\n            \\n        }\\n     return list;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n   // binary search tree left node contain ->(1,i-1)and right child contain (i+1,n)\\n     vector<TreeNode*>ans=generate(1,n);   \\n        return ans;\\n    }\\n\\t//HappyCoding\\n\\t//Stay Safe and healthy\\n\\t//Also if you like the post do upvote and comment",
                "solutionTags": [],
                "code": "Honestly I was not able to solve the problem in one go. I was able to get the idea to solve the problem but wasn\\'t able to implement it. \\nFirstly try to solve the problem Unique Binary Search Tree\\nSo here is my approach:\\n1) We need to generate a ***BST*** which means that left child will contain the node value lesser than root and right child will contain the value greater than the value of root.\\n2) And also I have ***n*** number of choices for the root node. \\n3) So i will iterate from ***1 to n*** and will generate left and rightsubtree recursivly.\\n4) Then create a tree from all the possible left and right subtree an then finally add to the solution list.\\n5) Also do not forget to add the base condition.\\nBase condition will be when my ***start>end***\\nSo here is my code:\\n```\\n vector<TreeNode*> generate(int start,int end)\\n    { vector<TreeNode*>list;\\n        if(start>end)\\n        {\\n            list.push_back(nullptr);\\n            return list;\\n        }\\n        for(int i=start;i<=end;i++)\\n        {\\n           vector<TreeNode*>leftsubtree=generate(start,i-1);\\n           vector<TreeNode*>rightsubtree=generate(i+1,end);\\n            for(int j=0;j<leftsubtree.size();j++)\\n            {\\n                TreeNode* left=leftsubtree[j];\\n                for(int k=0;k<rightsubtree.size();k++)\\n                {\\n                    TreeNode* right=rightsubtree[k];\\n                    TreeNode* node=new TreeNode(i);\\n                    node->left=left;\\n                    node->right=right;\\n                  list.push_back(node);\\n                }\\n            }\\n           \\n            \\n        }\\n     return list;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n   // binary search tree left node contain ->(1,i-1)and right child contain (i+1,n)\\n     vector<TreeNode*>ans=generate(1,n);   \\n        return ans;\\n    }\\n\\t//HappyCoding\\n\\t//Stay Safe and healthy\\n\\t//Also if you like the post do upvote and comment",
                "codeTag": "Unknown"
            },
            {
                "id": 164932,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def generateTrees(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: List[TreeNode]\\n        \"\"\"\\n        def generate(i,j):\\n            if j-i < 0:\\n                return [None]\\n            elif j-i == 0:\\n                return [TreeNode(i)]\\n            else:\\n                res = []\\n                for k in range(i,j+1):\\n                    left = generate(i,k-1)\\n                    right = generate(k+1,j)\\n                    for l in left:\\n                        for r in right:\\n                            root = TreeNode(k)\\n                            root.left = l\\n                            root.right = r\\n                            res.append(root)\\n                return res\\n        if n == 0:\\n            return []\\n        else:\\n            return generate(1,n)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def generateTrees(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: List[TreeNode]\\n        \"\"\"\\n        def generate(i,j):\\n            if j-i < 0:\\n                return [None]\\n            elif j-i == 0:\\n                return [TreeNode(i)]\\n            else:\\n                res = []\\n                for k in range(i,j+1):\\n                    left = generate(i,k-1)\\n                    right = generate(k+1,j)\\n                    for l in left:\\n                        for r in right:\\n                            root = TreeNode(k)\\n                            root.left = l\\n                            root.right = r\\n                            res.append(root)\\n                return res\\n        if n == 0:\\n            return []\\n        else:\\n            return generate(1,n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31523,
                "title": "dp-solution-in-python",
                "content": "----------\\n\\nclass Solution:\\n    # @return a list of tree node\\n\\n    def generateTrees(self, n):\\n        if n == 0:\\n            return [None]\\n        tree_list = [[[None]] * (n + 2) for i in range(n + 2)]\\n        for i in range(1, n + 1):\\n            tree_list[i][i] = [TreeNode(i)]\\n            for j in reversed(range(1, i)):\\n                tree_list[j][i] = []\\n                for k in range(j, i + 1):\\n                    for left in tree_list[j][k - 1]:\\n                        for right in tree_list[k + 1][i]:\\n                            root = TreeNode(k)\\n                            (root.left, root.right) = (left, right)\\n                            tree_list[j][i].append(root)\\n        return tree_list[1][n]",
                "solutionTags": [],
                "code": "----------\\n\\nclass Solution:\\n    # @return a list of tree node\\n\\n    def generateTrees(self, n):\\n        if n == 0:\\n            return [None]\\n        tree_list = [[[None]] * (n + 2) for i in range(n + 2)]\\n        for i in range(1, n + 1):\\n            tree_list[i][i] = [TreeNode(i)]\\n            for j in reversed(range(1, i)):\\n                tree_list[j][i] = []\\n                for k in range(j, i + 1):\\n                    for left in tree_list[j][k - 1]:\\n                        for right in tree_list[k + 1][i]:\\n                            root = TreeNode(k)\\n                            (root.left, root.right) = (left, right)\\n                            tree_list[j][i].append(root)\\n        return tree_list[1][n]",
                "codeTag": "Java"
            },
            {
                "id": 31639,
                "title": "help-simplify-my-code-the-second-one",
                "content": "    class Solution {\\n    private:\\n    \\tvector<TreeNode*> generateTreesRec(int start, int end){\\n    \\t\\tvector<TreeNode*> v;\\n    \\t\\tif(start > end){\\n    \\t\\t\\tv.push_back(NULL);\\n    \\t\\t\\treturn v;\\n    \\t\\t}\\n    \\t\\tfor(int i = start; i <= end; ++i){\\n    \\t\\t\\tvector<TreeNode*> left = generateTreesRec(start, i - 1);\\n    \\t\\t\\tvector<TreeNode*> right = generateTreesRec(i + 1, end);\\n    \\t\\t\\tTreeNode *node;\\n    \\t\\t\\tfor(int j = 0; j < left.size(); ++j){\\n    \\t\\t\\t\\tfor(int k = 0; k < right.size(); ++k){\\n    \\t\\t\\t\\t\\tnode = new TreeNode(i);\\n    \\t\\t\\t\\t\\tnode->left = left[j];\\n    \\t\\t\\t\\t\\tnode->right = right[k];\\n    \\t\\t\\t\\t\\tv.push_back(node);\\n    \\t\\t\\t\\t}\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\treturn v;\\n    \\t}\\n    public:\\n        vector<TreeNode *> generateTrees(int n) {\\n            return generateTreesRec(1, n);\\n        }\\n    };\\n\\nI think one defect of the above code is that it constructs trees interleaving with rather than being independent of each other. For example, if `n == 5` and `3` is selected as root, you'll get four trees as follow:\\n\\n<a href=\"http://www.freeimagehosting.net/xepj1\"><img src=\"http://www.freeimagehosting.net/t/xepj1.jpg\"></a>\\n\\nI prefer to construct independent trees so I write the following code...\\n\\n    class Solution {\\n    private:\\n    \\tTreeNode *constructBSTRec(const string &preorder, int ps, int pe, int is, int ie){\\n    \\t\\tif(ps > pe || is > ie || pe - ps != ie - is) return NULL;\\n    \\t\\tTreeNode *root = new TreeNode(preorder[ps] - '0');\\n    \\t\\tint i = preorder[ps] - '0' - 1;\\n    \\t\\tint leftLen = i - is;\\n    \\t\\troot->left = constructBSTRec(preorder, ps + 1, ps + leftLen, is, i - 1);\\n    \\t\\troot->right = constructBSTRec(preorder, ps + leftLen + 1, pe, i + 1, ie);\\n    \\t\\treturn root;\\n    \\t}\\n    \\tTreeNode *constructBST(const string &preorder){\\n    \\t\\treturn constructBSTRec(preorder, 0, preorder.size() - 1, 0, preorder.size() - 1);\\n    \\t}\\n    \\tvector<string> combine(vector<string> &s1, vector<string> &s2){\\n    \\t\\tif(s1.empty() || s2.empty()){\\n    \\t\\t\\treturn s1.empty() ? s2 : s1;\\n    \\t\\t}\\n    \\t\\tvector<string> v;\\n    \\t\\tfor(int i = 0; i < s1.size(); ++i){\\n    \\t\\t\\tfor(int j = 0; j < s2.size(); ++j){\\n    \\t\\t\\t\\tv.push_back(s1[i] + s2[j]);\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\treturn v;\\n    \\t}\\n    \\tvector<string> preorderSequence(int start, int end){\\n    \\t\\tvector<string> v;\\n    \\t\\tfor(int i = start; i <= end; ++i){\\n    \\t\\t\\tvector<string> tmp;\\n    \\t\\t\\ttmp.push_back(string(1, i + '0'));\\n    \\t\\t\\tvector<string> left = preorderSequence(start, i - 1);\\n    \\t\\t\\tvector<string> right = preorderSequence(i + 1, end);\\n    \\t\\t\\ttmp = combine(tmp, left);\\n    \\t\\t\\ttmp = combine(tmp, right);\\n    \\t\\t\\tfor(int i = 0; i < tmp.size(); ++i){\\n    \\t\\t\\t\\tv.push_back(tmp[i]);\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t\\treturn v;\\n    \\t}\\n    public:\\n        vector<TreeNode *> generateTrees(int n) {\\n        \\tvector<TreeNode*> trees;\\n        \\tif(n < 0) return trees;\\n        \\tif(n == 0){\\n        \\t\\ttrees.push_back(NULL);\\n        \\t\\treturn trees;\\n        \\t}\\n        \\tvector<string> v = preorderSequence(1, n);\\n        \\tfor(int i = 0; i < v.size(); ++i){\\n        \\t\\ttrees.push_back(constructBST(v[i]));\\n        \\t}\\n        \\treturn trees;\\n        }\\n    };\\n\\nThe main idea is to generate preorder sequences of unique BSTs and construct independent BSTs in the end. But I am afraid it's lack of readability. Can you help me simplify it? Any advice?\\n\\n\\n  [1]: http://www.freeimagehosting.net/xepj1",
                "solutionTags": [],
                "code": "class Solution {\\n    private:\\n    \\tvector<TreeNode*> generateTreesRec(int start, int end){\\n    \\t\\tvector<TreeNode*> v;\\n    \\t\\tif(start > end){\\n    \\t\\t\\tv.push_back(NULL);\\n    \\t\\t\\treturn v;\\n    \\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2212994,
                "title": "dp-solution-in-c-and-java",
                "content": "**Code in C++**\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return subTrees(1, n);\\n    }\\nprivate:\\n    vector<TreeNode*> subTrees(int start, int end){\\n        vector<TreeNode*> res;\\n        if(start>end){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int i=start; i<=end; i++){\\n            vector<TreeNode*> left = subTrees(start, i-1);\\n            vector<TreeNode*> right = subTrees(i+1, end);\\n            for(TreeNode* l: left){\\n                for(TreeNode* r: right){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = l;\\n                    root->right = r;\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\n**Code in Java**\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return subTrees(1, n);\\n    }\\n    private List<TreeNode> subTrees(int start, int end){\\n        List<TreeNode> res = new ArrayList();\\n        if(start>end) {\\n            res.add(null);\\n            return res;\\n        }\\n        for(int i=start; i<=end; i++){\\n            List<TreeNode> left = subTrees(start, i-1);\\n            List<TreeNode> right = subTrees(i+1, end);\\n            for(TreeNode l: left){\\n                for(TreeNode r: right){\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = l;\\n                    root.right = r;\\n                    res.add(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    \\n}\\n```\\n**Please upvote if you found the solution helpful**\\n*Feel free to ask any questions in the comment section*",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return subTrees(1, n);\\n    }\\nprivate:\\n    vector<TreeNode*> subTrees(int start, int end){\\n        vector<TreeNode*> res;\\n        if(start>end){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int i=start; i<=end; i++){\\n            vector<TreeNode*> left = subTrees(start, i-1);\\n            vector<TreeNode*> right = subTrees(i+1, end);\\n            for(TreeNode* l: left){\\n                for(TreeNode* r: right){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = l;\\n                    root->right = r;\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return subTrees(1, n);\\n    }\\n    private List<TreeNode> subTrees(int start, int end){\\n        List<TreeNode> res = new ArrayList();\\n        if(start>end) {\\n            res.add(null);\\n            return res;\\n        }\\n        for(int i=start; i<=end; i++){\\n            List<TreeNode> left = subTrees(start, i-1);\\n            List<TreeNode> right = subTrees(i+1, end);\\n            for(TreeNode l: left){\\n                for(TreeNode r: right){\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = l;\\n                    root.right = r;\\n                    res.add(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 730933,
                "title": "easy-java-solution-faster-than-96",
                "content": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n < 1)return Collections.EMPTY_LIST;\\n        return helper(1,n);\\n    }\\n    \\n    private List<TreeNode> helper(int start , int end){\\n        List<TreeNode> ans = new ArrayList<>();\\n        if(start > end){\\n            ans.add(null);\\n            return ans;\\n        }\\n        \\n       for(int i = start ; i <= end ;i++ ){\\n           List<TreeNode> left = helper(start , i - 1);\\n           List<TreeNode> right = helper(i + 1 , end);\\n           \\n           for(TreeNode l : left){\\n               for(TreeNode r : right){\\n                 TreeNode root = new TreeNode(i);\\n                   root.left = l;\\n                   root.right = r;\\n                   ans.add(root);\\n               }\\n           }\\n           \\n       }\\n     return ans;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n < 1)return Collections.EMPTY_LIST;\\n        return helper(1,n);\\n    }\\n    \\n    private List<TreeNode> helper(int start , int end){\\n        List<TreeNode> ans = new ArrayList<>();\\n        if(start > end){\\n            ans.add(null);\\n            return ans;\\n        }\\n        \\n       for(int i = start ; i <= end ;i++ ){\\n           List<TreeNode> left = helper(start , i - 1);\\n           List<TreeNode> right = helper(i + 1 , end);\\n           \\n           for(TreeNode l : left){\\n               for(TreeNode r : right){\\n                 TreeNode root = new TreeNode(i);\\n                   root.left = l;\\n                   root.right = r;\\n                   ans.add(root);\\n               }\\n           }\\n           \\n       }\\n     return ans;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 720284,
                "title": "python-recursive-explanation",
                "content": "1. For every node with value `val`\\n\\t* **Left subtree\\'s root**\\'s value must be in `[1, val - 1]`\\n\\n\\t* **Right subtree\\'s root**\\'s value must be in `[val + 1, n]` \\n\\n2. Now, what **root value** do we get to try in each recursive call? We try root values in `[start, end]`\\n\\n3. This means for each root, there is a combination / list of `left` and `right` sub**trees** we get to try. (This explains the 2 `for-loops` in the recursive call)\\n\\n4. Therefore, this is what the `build` function does.\\n\\n\\t* Generates a **root** with `val` between `[start, end]`\\n\\n\\t* Generates **all** possible **left** subtree roots with value between `[start, val - 1]`\\n\\n\\t* Generates **all** possible **right** subtree roots with value between `[val + 1, end]`\\n\\n\\t* For **every of these combinations**, it creates a brand new tree and adds it to `trees` before returning it in each recursive call\\n \\n<br><br>\\n\\n```\\nclass Solution:\\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        # EDGE CASE\\n        if n == 0:\\n            return []\\n        \\n\\t\\t# CALL ON  BUILD() TO RETURN THE LIST OF ROOTS\\n        return self.build(1, n)\\n    \\n        \\n    def build(self, start, end):\\n        trees = []\\n        \\n        # CHOOSE A ROOT VALUE ANYWHERE BETWEEN [START, END]\\n        for val in range(start, end + 1):\\n            \\n            # ATTACH ROOT TO EVERY POSSIBLE LEFT SUBTREE\\n            for left in self.build(start, val - 1):\\n                \\n                # ATTACH ROOT TO EVERY POSSIBLE RIGHT SUBTREE\\n                for right in self.build(val + 1, end):\\n                    \\n                    # CREATE A TREE AND ADD IT\\n                    trees.append(TreeNode(val, left, right))\\n                    \\n        # [NONE] = THE EMPTY TREE\\n        return trees or [None]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        # EDGE CASE\\n        if n == 0:\\n            return []\\n        \\n\\t\\t# CALL ON  BUILD() TO RETURN THE LIST OF ROOTS\\n        return self.build(1, n)\\n    \\n        \\n    def build(self, start, end):\\n        trees = []\\n        \\n        # CHOOSE A ROOT VALUE ANYWHERE BETWEEN [START, END]\\n        for val in range(start, end + 1):\\n            \\n            # ATTACH ROOT TO EVERY POSSIBLE LEFT SUBTREE\\n            for left in self.build(start, val - 1):\\n                \\n                # ATTACH ROOT TO EVERY POSSIBLE RIGHT SUBTREE\\n                for right in self.build(val + 1, end):\\n                    \\n                    # CREATE A TREE AND ADD IT\\n                    trees.append(TreeNode(val, left, right))\\n                    \\n        # [NONE] = THE EMPTY TREE\\n        return trees or [None]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 688947,
                "title": "javascript-solution-top-down-bottom-up-approach",
                "content": "**Top-Down Approach:**\\n\\n```\\nvar generateTrees = function(n) {\\n    if (n == 0) return [];\\n    \\n    return findAllUniqueTrees(1, n);\\n\\n    function findAllUniqueTrees(start, end) {\\n        const ans = [];\\n        \\n        // base case\\n        if (start > end) {\\n            ans.push(null);\\n            return ans;\\n        };\\n        \\n        if (start == end) {\\n            ans.push(new TreeNode(start));\\n            return ans;\\n        }\\n        \\n        for (let i = start; i <= end; i++) {\\n            const leftSubTrees = findAllUniqueTrees(start, i - 1);\\n            const rightSubTrees = findAllUniqueTrees(i + 1, end);\\n            \\n            for (const leftSubTree of leftSubTrees) {\\n                for (const rightSubTree of rightSubTrees) {\\n                    const root = new TreeNode(i);\\n                    root.left = leftSubTree;\\n                    root.right = rightSubTree;\\n                    ans.push(root);\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\\n\\n<br>\\n\\n---\\n\\n<br>\\n\\n**Bottom-Up Approach:**\\n\\nI did not implement a clone/copy function for the subtrees. Instead, I connected multiple roots to each subtrees. I know this might not be ideal, but it seem to be an acceptable approach from observing solutions to other similar questions.\\n\\nFew personal comments about this problem. There were parts of it that I found difficult which generally transfer over to dynamic programming problems. One was keeping track of the off-by-one issues involving the index of the dp grid vs. the actual number used for root. Also, prior to this problem, I did not quite grasp the relationship amongst the indexes of the 3 nested for-loops. Although not completely, but I felt that this problem gave me a better understanding of them and was definitely was a good practice. Second, thanks to [@zmj97](https://leetcode.com/problems/unique-binary-search-trees-ii/discuss/671388/javascript-dp-solution) providing the idea of what to do when there is no left or right subtree. Like many people, dynamic programming is a problem that I have found difficult to master. However, recently I have committed myself to improving that weakness and hopefully will get better in due time. If anybody has any questions or constructive criticism of ways of improving my solution or approaches to dynamic programming in general, please feel free to leave your comments below. Thank you.\\n\\n<br>\\n\\n```\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    var dp = [];\\n    \\n    for (var i = 0; i < n; i++) {\\n        dp[i] = [];\\n        for (var j = 0; j < n; j++) {\\n            dp[i][j] = [];\\n        }\\n    }\\n\\n    for (var len = 2; len <= n; len++) {\\n        for (var start = 1; start <= n - len + 1; start++) {\\n            const end = start + len - 1;\\n            for (let mid = start; mid <= end; mid++) {\\n                const leftSubTrees = mid - 1 - 1 < 0 ? [] : dp[start - 1][mid - 1 - 1];\\n                const rightSubTrees = mid + 1 - 1 >= n ? [] : dp[mid + 1 - 1][end - 1];\\n                \\n                if (leftSubTrees.length == 0) leftSubTrees.push(null);\\n                if (rightSubTrees.length == 0) rightSubTrees.push(null);\\n                \\n                for (const leftSubTree of leftSubTrees) {\\n                    for (const rightSubTree of rightSubTrees) {\\n                        const root = new TreeNode(mid);\\n                        root.left = leftSubTree;\\n                        root.right = rightSubTree;\\n                        dp[start - 1][end - 1].push(root);\\n                    }\\n                }\\n            }\\n        }\\n    \\n    }\\n\\n    return dp[0][n - 1];\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming"
                ],
                "code": "```\\nvar generateTrees = function(n) {\\n    if (n == 0) return [];\\n    \\n    return findAllUniqueTrees(1, n);\\n\\n    function findAllUniqueTrees(start, end) {\\n        const ans = [];\\n        \\n        // base case\\n        if (start > end) {\\n            ans.push(null);\\n            return ans;\\n        };\\n        \\n        if (start == end) {\\n            ans.push(new TreeNode(start));\\n            return ans;\\n        }\\n        \\n        for (let i = start; i <= end; i++) {\\n            const leftSubTrees = findAllUniqueTrees(start, i - 1);\\n            const rightSubTrees = findAllUniqueTrees(i + 1, end);\\n            \\n            for (const leftSubTree of leftSubTrees) {\\n                for (const rightSubTree of rightSubTrees) {\\n                    const root = new TreeNode(i);\\n                    root.left = leftSubTree;\\n                    root.right = rightSubTree;\\n                    ans.push(root);\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\n```\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    var dp = [];\\n    \\n    for (var i = 0; i < n; i++) {\\n        dp[i] = [];\\n        for (var j = 0; j < n; j++) {\\n            dp[i][j] = [];\\n        }\\n    }\\n\\n    for (var len = 2; len <= n; len++) {\\n        for (var start = 1; start <= n - len + 1; start++) {\\n            const end = start + len - 1;\\n            for (let mid = start; mid <= end; mid++) {\\n                const leftSubTrees = mid - 1 - 1 < 0 ? [] : dp[start - 1][mid - 1 - 1];\\n                const rightSubTrees = mid + 1 - 1 >= n ? [] : dp[mid + 1 - 1][end - 1];\\n                \\n                if (leftSubTrees.length == 0) leftSubTrees.push(null);\\n                if (rightSubTrees.length == 0) rightSubTrees.push(null);\\n                \\n                for (const leftSubTree of leftSubTrees) {\\n                    for (const rightSubTree of rightSubTrees) {\\n                        const root = new TreeNode(mid);\\n                        root.left = leftSubTree;\\n                        root.right = rightSubTree;\\n                        dp[start - 1][end - 1].push(root);\\n                    }\\n                }\\n            }\\n        }\\n    \\n    }\\n\\n    return dp[0][n - 1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 31600,
                "title": "quite-clean-java-solution-with-explanation",
                "content": "For all possible root of the trees (i.e. 1, 2, ..., n), get the list of left subtrees and list of right subtrees, recursively. Now, for every left and right subtree combination, create a new tree and add to resultant list.\\n\\nHere, \"start > end\" becomes the base case for recursion, for which I add \"null\" as the only element of list, which will form the only possible left or right subtree. (To understand why this works, check with n = 1).\\n\\nn = 0 is handled separately, since leetcode expects an empty list, rather than a list with a null value.\\n\\n    public class Solution {\\n        public List<TreeNode> generateTrees(int n) {\\n            if(n == 0)\\n                return new ArrayList<TreeNode>();\\n            return generateTrees(1, n);\\n        }\\n        \\n        List<TreeNode> generateTrees(int start, int end) {\\n            List<TreeNode> result = new ArrayList<TreeNode>();\\n            if(start > end) {\\n                result.add(null);\\n                return result;\\n            }\\n            for(int i = start; i <= end; i++) {\\n                List<TreeNode> leftSubTrees = generateTrees(start, i - 1);\\n                List<TreeNode> rightSubTrees = generateTrees(i + 1, end);\\n                for(TreeNode left : leftSubTrees) {\\n                    for(TreeNode right : rightSubTrees) {\\n                        TreeNode root = new TreeNode(i);\\n                        root.left = left;\\n                        root.right = right;\\n                        result.add(root);\\n                    }\\n                }\\n            }\\n            return result;\\n        }\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n        public List<TreeNode> generateTrees(int n) {\\n            if(n == 0)\\n                return new ArrayList<TreeNode>();\\n            return generateTrees(1, n);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3187679,
                "title": "94-15-unique-binary-search-trees-ii-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nTo generate all structurally unique BST\\'s with n nodes, we can use a recursive approach. The idea is to fix each number i (1 <= i <= n) as the root of the tree and then recursively generate all the left and right subtrees that can be formed using the remaining numbers (1, 2, ..., i-1) and (i+1, i+2, ..., n) respectively.\\n\\nFor example, to generate all the BST\\'s with 3 nodes, we can fix 1 as the root and recursively generate all the BST\\'s with 0 and 2 nodes respectively. Then we can fix 2 as the root and recursively generate all the BST\\'s with 1 node on the left and 1 node on the right. Finally, we can fix 3 as the root and recursively generate all the BST\\'s with 2 and 0 nodes respectively.\\n\\nTo avoid generating duplicate trees, we can use memoization to store the trees generated for each combination of left and right subtree sizes.\\n\\n# Complexity\\n- Time complexity:\\nBeats\\n89.57%\\n\\n- Space complexity:\\nBeats\\n94.15%\\n\\n# Code\\n```\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\nclass Solution:\\n   def generateTrees(self, n: \\'int\\') -> \\'List[TreeNode]\\':\\n    memo = {}\\n    \\n    def generate_trees_helper(start: int, end: int) -> List[TreeNode]:\\n        if start > end:\\n            return [None]\\n        \\n        if (start, end) in memo:\\n            return memo[(start, end)]\\n        \\n        result = []\\n        \\n        for i in range(start, end+1):\\n            left_subtrees = generate_trees_helper(start, i-1)\\n            right_subtrees = generate_trees_helper(i+1, end)\\n            \\n            for left in left_subtrees:\\n                for right in right_subtrees:\\n                    root = TreeNode(i)\\n                    root.left = left\\n                    root.right = right\\n                    result.append(root)\\n        \\n        memo[(start, end)] = result\\n        \\n        return result\\n    \\n    return generate_trees_helper(1, n)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass TreeNode:\\n    def __init__(self, val=0, left=None, right=None):\\n        self.val = val\\n        self.left = left\\n        self.right = right\\n\\nclass Solution:\\n   def generateTrees(self, n: \\'int\\') -> \\'List[TreeNode]\\':\\n    memo = {}\\n    \\n    def generate_trees_helper(start: int, end: int) -> List[TreeNode]:\\n        if start > end:\\n            return [None]\\n        \\n        if (start, end) in memo:\\n            return memo[(start, end)]\\n        \\n        result = []\\n        \\n        for i in range(start, end+1):\\n            left_subtrees = generate_trees_helper(start, i-1)\\n            right_subtrees = generate_trees_helper(i+1, end)\\n            \\n            for left in left_subtrees:\\n                for right in right_subtrees:\\n                    root = TreeNode(i)\\n                    root.left = left\\n                    root.right = right\\n                    result.append(root)\\n        \\n        memo[(start, end)] = result\\n        \\n        return result\\n    \\n    return generate_trees_helper(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299072,
                "title": "c-16ms-beats-98-1-of-cpp-submissions",
                "content": "```\\nvector<TreeNode*> genTreesUtil(int beg, int end) {\\n\\tif (end < beg) return { nullptr };\\n\\tif (end == beg) return { new TreeNode(beg) };\\n\\n\\tvector<TreeNode*> trees;\\n\\tfor (int i = beg; i <= end; ++i) {\\n\\n\\t\\tauto leftTrees = genTreesUtil(beg, i - 1);\\n\\t\\tauto rightTrees = genTreesUtil(i + 1, end);\\n\\n\\t\\tfor (auto& l : leftTrees)\\n\\t\\t\\tfor (auto& r : rightTrees) {\\n\\t\\t\\t\\tauto t = new TreeNode(i);\\n\\t\\t\\t\\tt->left = l;\\n\\t\\t\\t\\tt->right = r;\\n\\n\\t\\t\\t\\ttrees.push_back(t);\\n\\t\\t\\t}\\n\\t}\\n\\n\\treturn trees;\\n}\\n\\nvector<TreeNode*> generateTrees(int n) {\\n\\tif (n == 0) return {};\\n\\treturn genTreesUtil(1, n);\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\nvector<TreeNode*> genTreesUtil(int beg, int end) {\\n\\tif (end < beg) return { nullptr };\\n\\tif (end == beg) return { new TreeNode(beg) };\\n\\n\\tvector<TreeNode*> trees;\\n\\tfor (int i = beg; i <= end; ++i) {\\n\\n\\t\\tauto leftTrees = genTreesUtil(beg, i - 1);\\n\\t\\tauto rightTrees = genTreesUtil(i + 1, end);\\n\\n\\t\\tfor (auto& l : leftTrees)\\n\\t\\t\\tfor (auto& r : rightTrees) {\\n\\t\\t\\t\\tauto t = new TreeNode(i);\\n\\t\\t\\t\\tt->left = l;\\n\\t\\t\\t\\tt->right = r;\\n\\n\\t\\t\\t\\ttrees.push_back(t);\\n\\t\\t\\t}\\n\\t}\\n\\n\\treturn trees;\\n}\\n\\nvector<TreeNode*> generateTrees(int n) {\\n\\tif (n == 0) return {};\\n\\treturn genTreesUtil(1, n);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 31627,
                "title": "a-straightforward-python-solution",
                "content": "    from itertools import product\\n    \\n    class Solution:\\n        # @param {integer} n\\n        # @return {TreeNode[]}\\n        def generateTrees(self, n):\\n            return self.BST([i+1 for i in range(n)])\\n            \\n        def BST(self, nodes):\\n            trees = []\\n            for i in range(len(nodes)):\\n                for leftSubTree, rightSubTree in product(self.BST(nodes[:i]), self.BST(nodes[i+1:])):\\n                    root = TreeNode(nodes[i])\\n                    root.left, root.right = leftSubTree, rightSubTree\\n                    trees.append(root)\\n                \\n            return trees or [None]",
                "solutionTags": [],
                "code": "class Solution:\\n        # @param {integer}",
                "codeTag": "Java"
            },
            {
                "id": 31638,
                "title": "python-accepted-python-code",
                "content": "    class Solution:\\n        # @return a list of tree node\\n        def generate(self,s,t):\\n            '''recursion with left and right branches'''\\n            if s>t:return [None];\\n            if s==t:return [TreeNode(s)];\\n            re=[];\\n            for i in range(s,t+1):\\n                left=self.generate(s,i-1);\\n                right=self.generate(i+1,t);\\n                for l in left:\\n                    for r in right:\\n                        tmp=TreeNode(i);\\n                        tmp.left=l;\\n                        tmp.right=r;\\n                        re.append(tmp);\\n            return re;\\n        def generateTrees(self, n):\\n            return self.generate(1,n);\\n\\nthe code is straight forward,first generate the left tree, then generate the right tree. for each left and right tree, generate the tree with root.",
                "solutionTags": [
                    "Python"
                ],
                "code": "    class Solution:\\n        # @return a list of tree node\\n        def generate(self,s,t):\\n            '''recursion with left and right branches'''\\n            if s>t:return [None];\\n            if s==t:return [TreeNode(s)];\\n            re=[];\\n            for i in range(s,t+1):\\n                left=self.generate(s,i-1);\\n                right=self.generate(i+1,t);\\n                for l in left:\\n                    for r in right:\\n                        tmp=TreeNode(i);\\n                        tmp.left=l;\\n                        tmp.right=r;\\n                        re.append(tmp);\\n            return re;\\n        def generateTrees(self, n):\\n            return self.generate(1,n);\\n\\nthe code is straight forward,first generate the left tree, then generate the right tree. for each left and right tree, generate the tree with root.",
                "codeTag": "Java"
            },
            {
                "id": 3837403,
                "title": "c-recursive-catalan-number-like-dp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nUse 3D array for TreeNode* as memoization. Solve it recursely with memo. Again a DP solution is done. \\n\\nThis code generates all possible unique binary search trees  for a given range [1, n] using dynamic programming. It uses a 3D vector \\'dp\\' to store computed values and avoids redundant calculations. The function \\'BSTree\\' recursively forms BSTs for each range [s, e], combining left and right subtrees. The \\'generateTrees\\' function initializes \\'dp\\', then calls \\'BSTree\\' with range [1, n] to compute all unique BSTs. The approach is efficient and relates to Catalan numbers, representing the number of BSTs that can be formed using \\'n\\' nodes.\\n\\n# Catalan numbers\\nCatalan numbers can be given by a recursive way as follows\\n$$ \\nG(0)=1, G(n)=\\\\sum_{i=1}^nG(i-1)G(n-i)\\n$$\\nThe solution is related to this recursive recurrence.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nSimilar idea as in solving the hard question 894. All Possible Full Binary Trees.\\n[Please Turn on English subtitles if neccessary]\\n[https://youtu.be/AVbHDf6H_gE](https://youtu.be/AVbHDf6H_gE)\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$O(n * G(n))$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$O(n^2 * G(n))$\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<vector<TreeNode*>>> dp;\\n    \\n    vector<TreeNode*> BSTree(int s, int e){\\n        if (s > e) return {NULL};\\n        if (s == e) return {new TreeNode(s)};\\n        \\n        if (dp[s][e].size()>0) return dp[s][e];\\n        \\n        vector<TreeNode*> ans;\\n        for (int j = s; j <= e; j++) {\\n            vector<TreeNode*> Left = BSTree(s, j - 1);\\n            vector<TreeNode*> Right = BSTree(j + 1, e);\\n            \\n            for (TreeNode* l : Left) {\\n                for (TreeNode* r : Right) {\\n                    TreeNode* root = new TreeNode(j, l, r);\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return dp[s][e] = ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        dp.assign(n+1, vector(n+1, vector<TreeNode*>()));\\n        return BSTree(1, n);\\n    }\\n};\\n```\\n# Code with Explanation in comments\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    vector<vector<vector<TreeNode*>>> dp; // 3D vector to store computed values for dynamic programming\\n    \\n    // Function to generate all possible unique binary search trees given a range [s, e]\\n    vector<TreeNode*> BSTree(int s, int e) {\\n        // Base cases: If the range is invalid or contains a single element, return appropriate values.\\n        if (s > e) return {NULL}; // A single element in the range [s, e] cannot form a tree, so return NULL.\\n        if (s == e) return {new TreeNode(s)}; // A single element in the range is a valid tree by itself.\\n\\n        if (dp[s][e].size() > 0) return dp[s][e]; // If the value has already been computed, return it from the dp array.\\n\\n        vector<TreeNode*> ans; // Vector to store all possible BSTs in the range [s, e].\\n\\n        // Loop through each possible root node value (j) in the range [s, e]\\n        for (int j = s; j <= e; j++) {\\n            // Recursively generate all possible left subtrees (Left) from range [s, j-1]\\n            vector<TreeNode*> Left = BSTree(s, j - 1);\\n\\n            // Recursively generate all possible right subtrees (Right) from range [j+1, e]\\n            vector<TreeNode*> Right = BSTree(j + 1, e);\\n\\n            // Combine all possible combinations of left and right subtrees with the current root value (j)\\n            for (TreeNode* l : Left) {\\n                for (TreeNode* r : Right) {\\n                    TreeNode* root = new TreeNode(j, l, r); // Create a new tree with root value (j), left subtree (l), and right subtree (r).\\n                    ans.push_back(root); // Add the current tree to the result vector.\\n                }\\n            }\\n        }\\n\\n        return dp[s][e] = ans; // Store the computed value in the dp array and return the result.\\n    }\\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        dp.assign(n + 1, vector(n + 1, vector<TreeNode*>())); // Initialize the dp array with dimensions (n+1) x (n+1) x unknown.\\n        return BSTree(1, n); // Call the helper function with the range [1, n] to generate all possible BSTs from 1 to n.\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Dynamic Programming",
                    "Tree",
                    "Depth-First Search"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<vector<vector<TreeNode*>>> dp;\\n    \\n    vector<TreeNode*> BSTree(int s, int e){\\n        if (s > e) return {NULL};\\n        if (s == e) return {new TreeNode(s)};\\n        \\n        if (dp[s][e].size()>0) return dp[s][e];\\n        \\n        vector<TreeNode*> ans;\\n        for (int j = s; j <= e; j++) {\\n            vector<TreeNode*> Left = BSTree(s, j - 1);\\n            vector<TreeNode*> Right = BSTree(j + 1, e);\\n            \\n            for (TreeNode* l : Left) {\\n                for (TreeNode* r : Right) {\\n                    TreeNode* root = new TreeNode(j, l, r);\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return dp[s][e] = ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        dp.assign(n+1, vector(n+1, vector<TreeNode*>()));\\n        return BSTree(1, n);\\n    }\\n};\\n```\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    vector<vector<vector<TreeNode*>>> dp; // 3D vector to store computed values for dynamic programming\\n    \\n    // Function to generate all possible unique binary search trees given a range [s, e]\\n    vector<TreeNode*> BSTree(int s, int e) {\\n        // Base cases: If the range is invalid or contains a single element, return appropriate values.\\n        if (s > e) return {NULL}; // A single element in the range [s, e] cannot form a tree, so return NULL.\\n        if (s == e) return {new TreeNode(s)}; // A single element in the range is a valid tree by itself.\\n\\n        if (dp[s][e].size() > 0) return dp[s][e]; // If the value has already been computed, return it from the dp array.\\n\\n        vector<TreeNode*> ans; // Vector to store all possible BSTs in the range [s, e].\\n\\n        // Loop through each possible root node value (j) in the range [s, e]\\n        for (int j = s; j <= e; j++) {\\n            // Recursively generate all possible left subtrees (Left) from range [s, j-1]\\n            vector<TreeNode*> Left = BSTree(s, j - 1);\\n\\n            // Recursively generate all possible right subtrees (Right) from range [j+1, e]\\n            vector<TreeNode*> Right = BSTree(j + 1, e);\\n\\n            // Combine all possible combinations of left and right subtrees with the current root value (j)\\n            for (TreeNode* l : Left) {\\n                for (TreeNode* r : Right) {\\n                    TreeNode* root = new TreeNode(j, l, r); // Create a new tree with root value (j), left subtree (l), and right subtree (r).\\n                    ans.push_back(root); // Add the current tree to the result vector.\\n                }\\n            }\\n        }\\n\\n        return dp[s][e] = ans; // Store the computed value in the dp array and return the result.\\n    }\\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        dp.assign(n + 1, vector(n + 1, vector<TreeNode*>())); // Initialize the dp array with dimensions (n+1) x (n+1) x unknown.\\n        return BSTree(1, n); // Call the helper function with the range [1, n] to generate all possible BSTs from 1 to n.\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2491113,
                "title": "python-elegant-short-three-lines-top-down-dp-lru-cache",
                "content": "# Complexity\\n- Time complexity: $$O(n!)$$\\n- Space complexity: $$O(n^{3})$$\\n\\n# Code\\n```\\nclass Solution:\\n\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        return self.__generate(lo=1, hi=n)\\n\\n    @classmethod\\n    @cache\\n    def __generate(cls, lo: int, hi: int) -> list:\\n        if lo > hi:\\n            return [None]\\n        return [\\n            TreeNode(root, left, right)\\n            for root in range(lo, hi + 1)              # All possible roots for the current subarray\\n            for left in cls.__generate(lo, root - 1)   # All possible trees to the left of the root element\\n            for right in cls.__generate(root + 1, hi)  # All possible trees to the right of the root element\\n        ]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution:\\n\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        return self.__generate(lo=1, hi=n)\\n\\n    @classmethod\\n    @cache\\n    def __generate(cls, lo: int, hi: int) -> list:\\n        if lo > hi:\\n            return [None]\\n        return [\\n            TreeNode(root, left, right)\\n            for root in range(lo, hi + 1)              # All possible roots for the current subarray\\n            for left in cls.__generate(lo, root - 1)   # All possible trees to the left of the root element\\n            for right in cls.__generate(root + 1, hi)  # All possible trees to the right of the root element\\n        ]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1495639,
                "title": "12-ms-97-faster-cpp-solution-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> helper(int start, int end){\\n        vector<TreeNode*> ans;\\n        if(start > end){\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i = start; i <= end; i++){\\n            auto left = helper(start, i - 1);\\n            auto right = helper(i + 1, end);\\n            \\n            for(auto l : left){\\n                for(auto r : right){\\n                    TreeNode* root = new TreeNode(i);\\n                    \\n                    root->left = l;\\n                    root->right = r;\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        auto h = helper(1, n);\\n        return h;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search",
                    "Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> helper(int start, int end){\\n        vector<TreeNode*> ans;\\n        if(start > end){\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i = start; i <= end; i++){\\n            auto left = helper(start, i - 1);\\n            auto right = helper(i + 1, end);\\n            \\n            for(auto l : left){\\n                for(auto r : right){\\n                    TreeNode* root = new TreeNode(i);\\n                    \\n                    root->left = l;\\n                    root->right = r;\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        auto h = helper(1, n);\\n        return h;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865956,
                "title": "simple-java-solution-with-comments-1-ms-recursive",
                "content": "Algorithm:\\n\\n- Imagine the input as a continuous array of integers.\\n- move in a sliding window fashion considering every element as possible root.\\n- For every element chosen as root\\n\\t- everything in the array on the left will form the possible left subtrees\\n\\t- everything in the array on the right will form the possible right subtrees\\n- Use this list of generated subtrees to form the complete forest\\n\\n```\\nclass Solution {\\n    \\n    public List<TreeNode> generateTrees(int n) {\\n        return treeBuilder(1, n);\\n    }\\n    \\n    private List<TreeNode> treeBuilder(int start, int end) {\\n        if(start > end) return Collections.emptyList();\\n        List<TreeNode> res = new ArrayList<>();\\n        // n == 1\\n        if(start == end) {\\n            res.add(new TreeNode(start));\\n            return res;\\n        }\\n        \\n        // n == 2\\n        if( start+1 == end) {\\n            res.add(new TreeNode(start, null, new TreeNode(start+1)));\\n            res.add(new TreeNode(start+1, new TreeNode(start), null));\\n            return res;\\n        }\\n        \\n        for(int i=start; i<=end; i++) {\\n            TreeNode newRoot = new TreeNode(i);\\n            List<TreeNode> left = treeBuilder(start, i-1); // build trees only using left elements\\n            List<TreeNode> right = treeBuilder(i+1, end); // build trees only using right elements\\n            \\n            if(left.size() == 0) { // No left subtrees possible\\n                for(TreeNode node : right) {\\n                    newRoot.right = node;\\n                    res.add(copyTree(newRoot));\\n                    newRoot.right = null;\\n                }\\n            } else if(right.size() == 0) { // No right subtrees possible\\n                for(TreeNode node : left) {\\n                    newRoot.left = node;\\n                    res.add(copyTree(newRoot));\\n                    newRoot.left = null;\\n                }\\n            } else {\\n\\t\\t\\t\\t// For every left subtree; process every possibility of right subtree\\n\\t\\t\\t\\t// This is analogous to taking a cartesian product of possibilities\\n                for (TreeNode node : left) {\\n                    newRoot.left = node;\\n                    for(TreeNode node1 : right) {\\n                        newRoot.right = node1;\\n                        res.add(copyTree(newRoot));\\n                        newRoot.right = null;\\n                    }\\n                    newRoot.left = null;\\n                }\\n            }\\n            \\n        }\\n        \\n        return res;\\n    }\\n    \\n    // Helper Function to deep copy a given tree\\n    private TreeNode copyTree (TreeNode head) {\\n        if(head == null) return head;\\n        TreeNode temp = new TreeNode(head.val);\\n        temp.left = copyTree(head.left);\\n        temp.right = copyTree(head.right);\\n        return temp;\\n    }\\n}\\n```\\n\\n**Please Vote up, if this helped you!!**\\n\\nHappy Coding! :)",
                "solutionTags": [
                    "Java",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    \\n    public List<TreeNode> generateTrees(int n) {\\n        return treeBuilder(1, n);\\n    }\\n    \\n    private List<TreeNode> treeBuilder(int start, int end) {\\n        if(start > end) return Collections.emptyList();\\n        List<TreeNode> res = new ArrayList<>();\\n        // n == 1\\n        if(start == end) {\\n            res.add(new TreeNode(start));\\n            return res;\\n        }\\n        \\n        // n == 2\\n        if( start+1 == end) {\\n            res.add(new TreeNode(start, null, new TreeNode(start+1)));\\n            res.add(new TreeNode(start+1, new TreeNode(start), null));\\n            return res;\\n        }\\n        \\n        for(int i=start; i<=end; i++) {\\n            TreeNode newRoot = new TreeNode(i);\\n            List<TreeNode> left = treeBuilder(start, i-1); // build trees only using left elements\\n            List<TreeNode> right = treeBuilder(i+1, end); // build trees only using right elements\\n            \\n            if(left.size() == 0) { // No left subtrees possible\\n                for(TreeNode node : right) {\\n                    newRoot.right = node;\\n                    res.add(copyTree(newRoot));\\n                    newRoot.right = null;\\n                }\\n            } else if(right.size() == 0) { // No right subtrees possible\\n                for(TreeNode node : left) {\\n                    newRoot.left = node;\\n                    res.add(copyTree(newRoot));\\n                    newRoot.left = null;\\n                }\\n            } else {\\n\\t\\t\\t\\t// For every left subtree; process every possibility of right subtree\\n\\t\\t\\t\\t// This is analogous to taking a cartesian product of possibilities\\n                for (TreeNode node : left) {\\n                    newRoot.left = node;\\n                    for(TreeNode node1 : right) {\\n                        newRoot.right = node1;\\n                        res.add(copyTree(newRoot));\\n                        newRoot.right = null;\\n                    }\\n                    newRoot.left = null;\\n                }\\n            }\\n            \\n        }\\n        \\n        return res;\\n    }\\n    \\n    // Helper Function to deep copy a given tree\\n    private TreeNode copyTree (TreeNode head) {\\n        if(head == null) return head;\\n        TreeNode temp = new TreeNode(head.val);\\n        temp.left = copyTree(head.left);\\n        temp.right = copyTree(head.right);\\n        return temp;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 526542,
                "title": "c-simple-recursive-solution-detailed-explanation",
                "content": "```\\n/*\\n    95. Unique Binary Search Trees II\\n    https://leetcode.com/problems/unique-binary-search-trees-ii/\\n*/\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> createTree(int start, int end) {\\n        // base case: return nullptr\\n        if(end < start)\\n            return vector<TreeNode*>{nullptr};\\n\\n        vector<TreeNode*> ans;\\n        // for current interval each number is taken as root once\\n        for(int i = start; i <= end; i++) {\\n            vector<TreeNode*> left_subtree, right_subtree;\\n            // recurse for left and right subtrees\\n            left_subtree = createTree(start, i-1);\\n            right_subtree = createTree(i+1, end);\\n            \\n            // fixing the current root, traverse through the ]\\n            // different root nodes of left and right subtrees and\\n            // make them the child nodes one by one\\n            for(int j = 0; j < left_subtree.size(); j++) {\\n                for(int k = 0; k < right_subtree.size(); k++) {\\n                    // create the root \\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = left_subtree[j];\\n                    root->right = right_subtree[k];\\n                    ans.emplace_back(root);\\n                }\\n            }\\n\\n        }\\n\\n        return ans;\\n    }\\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n <= 0)\\n            return vector<TreeNode*>{};\\n        return createTree(1, n);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/*\\n    95. Unique Binary Search Trees II\\n    https://leetcode.com/problems/unique-binary-search-trees-ii/\\n*/\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> createTree(int start, int end) {\\n        // base case: return nullptr\\n        if(end < start)\\n            return vector<TreeNode*>{nullptr};\\n\\n        vector<TreeNode*> ans;\\n        // for current interval each number is taken as root once\\n        for(int i = start; i <= end; i++) {\\n            vector<TreeNode*> left_subtree, right_subtree;\\n            // recurse for left and right subtrees\\n            left_subtree = createTree(start, i-1);\\n            right_subtree = createTree(i+1, end);\\n            \\n            // fixing the current root, traverse through the ]\\n            // different root nodes of left and right subtrees and\\n            // make them the child nodes one by one\\n            for(int j = 0; j < left_subtree.size(); j++) {\\n                for(int k = 0; k < right_subtree.size(); k++) {\\n                    // create the root \\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = left_subtree[j];\\n                    root->right = right_subtree[k];\\n                    ans.emplace_back(root);\\n                }\\n            }\\n\\n        }\\n\\n        return ans;\\n    }\\n\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n <= 0)\\n            return vector<TreeNode*>{};\\n        return createTree(1, n);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 480196,
                "title": "two-python-sol-based-on-dp-and-recursion-with-memorization-with-explanation",
                "content": "Two Python sol. based on DP and recursion with memorization\\n\\n------------------------------------------\\n\\nMethod_#1: bottom-up dynamic programming\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    \\n    \\n    def clone_with_offset(self, node: TreeNode, offset):\\n        \\n        if not node:\\n            return None\\n        \\n        else:\\n            \\n            # Clone whole tree with constant value offset\\n            root_node = TreeNode( node.val + offset )\\n            root_node.left = self.clone_with_offset( node.left, offset )\\n            root_node.right = self.clone_with_offset( node.right, offset )\\n            \\n            return root_node\\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        \\n        if n == 0:\\n            # Quick response for empty tree\\n            return []\\n        \\n        # dynamic programming table\\n        bst_dp_table = [ None for i in range(n+1) ]\\n        \\n        # base case: \\n        bst_dp_table[0] = [None]\\n        \\n        \\n        # bottom-up. build bst with k nodes, k from 1 to n\\n        for number_of_nodes in range(1, n+1):\\n            \\n            bst_dp_table[number_of_nodes] = []\\n            \\n            # for root node of bst:     1 node                            \\n            # for left-subtree of bst : (number_of_nodes_on_left) nodes     \\n            # for right-subtrr of bst : (k-1-number_of_nodes_on_left) nodes \\n            for number_of_nodes_on_left in range(0, number_of_nodes):\\n                \\n                for left_subtree in bst_dp_table[number_of_nodes_on_left]:\\n                    \\n                    number_of_nodes_on_right = number_of_nodes-1-number_of_nodes_on_left\\n                    \\n                    for right_subtree in bst_dp_table[number_of_nodes_on_right]:\\n                        \\n                        # construct one unique bst\\n                        root_of_bst = TreeNode( number_of_nodes_on_left+1 )\\n                        root_of_bst.left = left_subtree\\n                        root_of_bst.right = self.clone_with_offset(right_subtree, number_of_nodes_on_left+1)\\n                        \\n                        # update dynamic programming table\\n                        bst_dp_table[number_of_nodes].append( root_of_bst )\\n            \\n        return bst_dp_table[n]\\n```\\n\\n---------------------------------------------------------------------------------\\n\\nMethod_#2: top-down recursion with memorization\\n\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n\\n    def __init__(self):\\n        \\n        # memorization table\\n        # key   : (lower bound of bst, upper bound of bst)\\n        # value : a list of bst, all nodes\\' value in range lower bound to upper bound.\\n        self.bst_dict = dict()\\n    \\n    def tree_factory(self, min_val, max_val):\\n        \\n        tree_list = []\\n        \\n        if min_val > max_val:\\n            # Invalid case\\n            tree_list.append( None )\\n            return tree_list\\n        \\n        if (min_val, max_val) in self.bst_dict:\\n            # speed-up by looking memorization table\\n            return self.bst_dict[(min_val, max_val)]\\n        \\n        \\n        # generate binary search trees from all possible root node value\\n        for root_node_value in range( min_val, max_val+1):\\n            \\n            left_sub_trees = self.tree_factory( min_val, root_node_value-1 )\\n            right_sub_trees = self.tree_factory( root_node_value+1, max_val )\\n            \\n            for left_subtree in left_sub_trees:\\n                for right_subtree in right_sub_trees:\\n                    \\n\\t\\t\\t\\t\\t# construct one unique bst\\n                    root_node = TreeNode( root_node_value )\\n                    root_node.left = left_subtree\\n                    root_node.right = right_subtree\\n                    \\n                    tree_list.append( root_node )\\n        \\n        # update memorization table\\n        self.bst_dict[(min_val, max_val)] = tree_list            \\n        return tree_list\\n        \\n        \\n        \\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        if n == 0:\\n            # Quick response for empty tree\\n            return []\\n        else:\\n            return self.tree_factory( min_val = 1, max_val = n )\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Dynamic Programming",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n    \\n    \\n    def clone_with_offset(self, node: TreeNode, offset):\\n        \\n        if not node:\\n            return None\\n        \\n        else:\\n            \\n            # Clone whole tree with constant value offset\\n            root_node = TreeNode( node.val + offset )\\n            root_node.left = self.clone_with_offset( node.left, offset )\\n            root_node.right = self.clone_with_offset( node.right, offset )\\n            \\n            return root_node\\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        \\n        if n == 0:\\n            # Quick response for empty tree\\n            return []\\n        \\n        # dynamic programming table\\n        bst_dp_table = [ None for i in range(n+1) ]\\n        \\n        # base case: \\n        bst_dp_table[0] = [None]\\n        \\n        \\n        # bottom-up. build bst with k nodes, k from 1 to n\\n        for number_of_nodes in range(1, n+1):\\n            \\n            bst_dp_table[number_of_nodes] = []\\n            \\n            # for root node of bst:     1 node                            \\n            # for left-subtree of bst : (number_of_nodes_on_left) nodes     \\n            # for right-subtrr of bst : (k-1-number_of_nodes_on_left) nodes \\n            for number_of_nodes_on_left in range(0, number_of_nodes):\\n                \\n                for left_subtree in bst_dp_table[number_of_nodes_on_left]:\\n                    \\n                    number_of_nodes_on_right = number_of_nodes-1-number_of_nodes_on_left\\n                    \\n                    for right_subtree in bst_dp_table[number_of_nodes_on_right]:\\n                        \\n                        # construct one unique bst\\n                        root_of_bst = TreeNode( number_of_nodes_on_left+1 )\\n                        root_of_bst.left = left_subtree\\n                        root_of_bst.right = self.clone_with_offset(right_subtree, number_of_nodes_on_left+1)\\n                        \\n                        # update dynamic programming table\\n                        bst_dp_table[number_of_nodes].append( root_of_bst )\\n            \\n        return bst_dp_table[n]\\n```\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, x):\\n#         self.val = x\\n#         self.left = None\\n#         self.right = None\\n\\nclass Solution:\\n\\n    def __init__(self):\\n        \\n        # memorization table\\n        # key   : (lower bound of bst, upper bound of bst)\\n        # value : a list of bst, all nodes\\' value in range lower bound to upper bound.\\n        self.bst_dict = dict()\\n    \\n    def tree_factory(self, min_val, max_val):\\n        \\n        tree_list = []\\n        \\n        if min_val > max_val:\\n            # Invalid case\\n            tree_list.append( None )\\n            return tree_list\\n        \\n        if (min_val, max_val) in self.bst_dict:\\n            # speed-up by looking memorization table\\n            return self.bst_dict[(min_val, max_val)]\\n        \\n        \\n        # generate binary search trees from all possible root node value\\n        for root_node_value in range( min_val, max_val+1):\\n            \\n            left_sub_trees = self.tree_factory( min_val, root_node_value-1 )\\n            right_sub_trees = self.tree_factory( root_node_value+1, max_val )\\n            \\n            for left_subtree in left_sub_trees:\\n                for right_subtree in right_sub_trees:\\n                    \\n\\t\\t\\t\\t\\t# construct one unique bst\\n                    root_node = TreeNode( root_node_value )\\n                    root_node.left = left_subtree\\n                    root_node.right = right_subtree\\n                    \\n                    tree_list.append( root_node )\\n        \\n        # update memorization table\\n        self.bst_dict[(min_val, max_val)] = tree_list            \\n        return tree_list\\n        \\n        \\n        \\n    \\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        if n == 0:\\n            # Quick response for empty tree\\n            return []\\n        else:\\n            return self.tree_factory( min_val = 1, max_val = n )\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 163620,
                "title": "divide-and-conquer-in-java-scala",
                "content": "> **Divide into subproblems**\\nThe root candidate can be selected from `[1, N]`.\\n\\n> **Recursively solve subproblems**\\nAfter we decide a root `x`, two subtrees (i.e. subproblems) generated. One contains nodes with values with the range `[1, x - 1]`, while the other contains nodes with values within the range `[x + 1, N]`. \\nWe can solve subproblems separately following the pattern described above.\\nUntil there is no nodes left to set as root (detected by `start > end`), we terminate the recursion after we add `null` to the current placement.\\n\\n>**Conquer results of subproblems**\\nCombine the results of subproblems, i.e. try all possible combinations of a node\\'s left child and right child to construct subtrees from bottom to top. \\n\\n\\n**More on Recursion**\\nThe return type of `generateTreesFrom()` is `List<TreeNode>`, which indicates all roots of generated trees until now. We receive the results(`i.e. leftSub, rightSub`), construct trees by all combinations of them, and add roots to the newly created result list of the current stack frame. The pseudo-code is as below:\\n```\\n            init curret result;\\n            for  leftNode in leftSub {\\n                for rightNode in rightSub {\\n                    create root node with value x;\\n                    attach leftNode, rightNode to root \\n                    add root to curret result; \\n                }\\n            }\\n\\t\\t\\treturn curret result;\\n```\\n****\\n> Java\\n```\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) return new ArrayList<>();\\n        if (n == 1) return new ArrayList<>(Arrays.asList(new TreeNode(n)));\\n        \\n        // Map start + \" \" + end to list of placement.\\n        Map<String, List<TreeNode>> memo = new HashMap<>(); \\n        \\n        return place(1, n, memo);\\n    }\\n    \\n    private List<TreeNode> place(int start, int end, Map<String, List<TreeNode>> memo) {\\n        List<TreeNode> placement = new ArrayList<>(); // List of root of each placement.\\n        // Base cases.\\n        if (start > end) {\\n            placement.add(null);\\n            return placement;\\n        }\\n        if (start == end) {\\n            placement.add(new TreeNode(start));\\n            return placement;\\n        }\\n        \\n        String memoKey = start + \" \" + end;\\n        if (memo.containsKey(memoKey)) return memo.get(memoKey);\\n        \\n        for (int x = start; x <= end; x++) {\\n            List<TreeNode> leftPlacement = place(start, x - 1, memo);\\n            List<TreeNode> rightPlacement = place(x + 1, end, memo);\\n            TreeNode root;\\n            for (TreeNode leftNode: leftPlacement) {\\n                for (TreeNode rightNode: rightPlacement) {\\n                    root = new TreeNode(x);\\n                    root.left = leftNode;\\n                    root.right = rightNode;\\n                    placement.add(root);\\n                }\\n            }\\n        }\\n        \\n        memo.put(memoKey, placement);\\n        return placement;\\n    }\\n```\\n> Scala\\n```\\nimport scala.collection.mutable.{ListBuffer, HashMap}\\n\\nobject Solution {\\n  def generateTrees(n: Int): List[TreeNode] = {\\n    if (n < 1) List()\\n    else generate(1, n, new HashMap[String, List[TreeNode]]())\\n  }\\n  \\n  def generate(start: Int, end: Int, memo: HashMap[String, List[TreeNode]]): List[TreeNode] = {\\n    val memoKey = start + \" \" + end\\n    \\n    if (!(memo contains memoKey)) {\\n      val rootList = new ListBuffer[TreeNode]()\\n      \\n      if (start > end) rootList += null\\n      else if (start == end) rootList += new TreeNode(start)\\n      else {\\n        for (x <- start to end) {\\n          val leftList = generate(start, x - 1, memo)\\n          val rightList = generate(x + 1, end, memo)\\n          for (leftNode <- leftList) {\\n            for (rightNode <- rightList) {\\n              val root = new TreeNode(x)\\n              root.left = leftNode\\n              root.right = rightNode\\n              rootList += root\\n            }\\n          }\\n        }\\n      }\\n      \\n      memo += memoKey -> rootList.toList\\n    }\\n    \\n    memo.get(memoKey).get\\n  }\\n}\\n```\\n\\n**(\\u4EBA \\u2022\\u0348\\u1D17\\u2022\\u0348)** Thanks for voting!",
                "solutionTags": [],
                "code": "```\\n            init curret result;\\n            for  leftNode in leftSub {\\n                for rightNode in rightSub {\\n                    create root node with value x;\\n                    attach leftNode, rightNode to root \\n                    add root to curret result; \\n                }\\n            }\\n\\t\\t\\treturn curret result;\\n```\n```\\n    public List<TreeNode> generateTrees(int n) {\\n        if (n == 0) return new ArrayList<>();\\n        if (n == 1) return new ArrayList<>(Arrays.asList(new TreeNode(n)));\\n        \\n        // Map start + \" \" + end to list of placement.\\n        Map<String, List<TreeNode>> memo = new HashMap<>(); \\n        \\n        return place(1, n, memo);\\n    }\\n    \\n    private List<TreeNode> place(int start, int end, Map<String, List<TreeNode>> memo) {\\n        List<TreeNode> placement = new ArrayList<>(); // List of root of each placement.\\n        // Base cases.\\n        if (start > end) {\\n            placement.add(null);\\n            return placement;\\n        }\\n        if (start == end) {\\n            placement.add(new TreeNode(start));\\n            return placement;\\n        }\\n        \\n        String memoKey = start + \" \" + end;\\n        if (memo.containsKey(memoKey)) return memo.get(memoKey);\\n        \\n        for (int x = start; x <= end; x++) {\\n            List<TreeNode> leftPlacement = place(start, x - 1, memo);\\n            List<TreeNode> rightPlacement = place(x + 1, end, memo);\\n            TreeNode root;\\n            for (TreeNode leftNode: leftPlacement) {\\n                for (TreeNode rightNode: rightPlacement) {\\n                    root = new TreeNode(x);\\n                    root.left = leftNode;\\n                    root.right = rightNode;\\n                    placement.add(root);\\n                }\\n            }\\n        }\\n        \\n        memo.put(memoKey, placement);\\n        return placement;\\n    }\\n```\n```\\nimport scala.collection.mutable.{ListBuffer, HashMap}\\n\\nobject Solution {\\n  def generateTrees(n: Int): List[TreeNode] = {\\n    if (n < 1) List()\\n    else generate(1, n, new HashMap[String, List[TreeNode]]())\\n  }\\n  \\n  def generate(start: Int, end: Int, memo: HashMap[String, List[TreeNode]]): List[TreeNode] = {\\n    val memoKey = start + \" \" + end\\n    \\n    if (!(memo contains memoKey)) {\\n      val rootList = new ListBuffer[TreeNode]()\\n      \\n      if (start > end) rootList += null\\n      else if (start == end) rootList += new TreeNode(start)\\n      else {\\n        for (x <- start to end) {\\n          val leftList = generate(start, x - 1, memo)\\n          val rightList = generate(x + 1, end, memo)\\n          for (leftNode <- leftList) {\\n            for (rightNode <- rightList) {\\n              val root = new TreeNode(x)\\n              root.left = leftNode\\n              root.right = rightNode\\n              rootList += root\\n            }\\n          }\\n        }\\n      }\\n      \\n      memo += memoKey -> rootList.toList\\n    }\\n    \\n    memo.get(memoKey).get\\n  }\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 31582,
                "title": "java-concise-recursive-solution-3ms",
                "content": "public class Solution {\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        return n > 0 ? helper(1, n) : new ArrayList<TreeNode>();\\n    }\\n    \\n    private List<TreeNode> helper(int from, int n) {\\n\\t\\tList<TreeNode> trees = new ArrayList<TreeNode>();\\n\\t\\tfor (int i = 0; i <= n - 1; ++i) {\\n\\t\\t\\t//left i, right n-1-i\\n\\t\\t\\tList<TreeNode> leftList = helper(from, i);\\n\\t\\t\\tList<TreeNode> rightList = helper(from + i + 1, n - 1 - i);\\n\\t\\t\\tfor (TreeNode left : leftList)\\n\\t\\t\\t\\tfor (TreeNode right : rightList) {\\n\\t\\t\\t\\t\\tTreeNode root = new TreeNode(from + i);\\n\\t\\t\\t\\t\\troot.left = left;\\n\\t\\t\\t\\t\\troot.right = right;\\n\\t\\t\\t\\t\\ttrees.add(root);\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif (trees.size() == 0)\\n\\t\\t\\ttrees.add(null);\\n\\t\\treturn trees;\\n\\t}\\n}",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        return n > 0 ? helper(1, n) : new ArrayList<TreeNode>();\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 31604,
                "title": "why-is-the-expected-result-when-the-return-type-is-just-a-list-and-not-list-of-list",
                "content": "Hi,\\n\\n8/9 test cases are passed except the following edge case:-\\n\\nInput : 0\\nOutput : [ ]\\nExpected : [ [ ] ]\\n\\nIt seems expected output is like a List of list. Can someone clarify what is going wrong.\\n\\nBelow is my java code :-\\n\\n    public class Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n == 0) {\\n            List<TreeNode> result = new ArrayList<TreeNode>();\\n            return result;\\n        }\\n            \\n        int[] arr = new int[n];\\n        for(int i = 0; i < n; i++)\\n            arr[i] = i + 1;\\n        return generate(arr, 0, n - 1);\\n    }\\n    \\n    List<TreeNode> generate(int[] arr, int begin, int end) {\\n        if(begin > end)\\n            return null;\\n        List<TreeNode> result = new ArrayList<TreeNode>();\\n        if(begin == end) {\\n            result.add(new TreeNode(arr[begin]));\\n            return result;\\n        }\\n        \\n        for(int i = begin; i <= end; i++) {\\n            \\n            List<TreeNode> leftTrees = generate(arr, begin, i - 1);\\n            List<TreeNode> rightTrees = generate(arr, i + 1, end);\\n            if(leftTrees == null) {\\n                for(TreeNode node : rightTrees) {\\n                    TreeNode root = new TreeNode(arr[i]);\\n                    root.right = node;\\n                    result.add(root);\\n                }\\n            } else if(rightTrees == null) {\\n                for(TreeNode node : leftTrees) {\\n                    TreeNode root = new TreeNode(arr[i]);\\n                    root.left = node;\\n                    result.add(root);\\n                }\\n            } else {\\n                for(TreeNode left : leftTrees) {\\n                    for(TreeNode right : rightTrees) {\\n                        TreeNode root = new TreeNode(arr[i]);\\n                        root.left = left;\\n                        root.right = right;\\n                        result.add(root);\\n                    }\\n                }\\n            }\\n        }\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n == 0) {\\n            List<TreeNode> result = new ArrayList<TreeNode>();\\n            return result;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3865866,
                "title": "very-easy-recursion-memoization-dp-java-99-faster",
                "content": "# Approach\\n- Try out all ways, i.e, Recursion\\n- Memoize the recursion for repeating subproblem\\n\\n# Code\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[][] dp = new List[n + 1][n + 1];\\n        return f(1, n, dp);\\n    }\\n    private List<TreeNode> f(int low, int high, List<TreeNode>[][] dp){\\n        List<TreeNode> bst = new ArrayList<>();\\n        if (low > high){\\n            bst.add(null);\\n            return bst;\\n        }\\n        if (dp[low][high] != null)\\n            return dp[low][high];\\n\\n        for (int i = low; i <= high; i++){\\n            List<TreeNode> leftSubTree = f(low, i - 1, dp);\\n            List<TreeNode> rightSubTree = f(i + 1, high, dp);\\n            for (TreeNode left : leftSubTree){\\n                for (TreeNode right : rightSubTree){\\n                    bst.add(new TreeNode(i, left, right));\\n                }\\n            }\\n        }\\n        return dp[low][high] = bst;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[][] dp = new List[n + 1][n + 1];\\n        return f(1, n, dp);\\n    }\\n    private List<TreeNode> f(int low, int high, List<TreeNode>[][] dp){\\n        List<TreeNode> bst = new ArrayList<>();\\n        if (low > high){\\n            bst.add(null);\\n            return bst;\\n        }\\n        if (dp[low][high] != null)\\n            return dp[low][high];\\n\\n        for (int i = low; i <= high; i++){\\n            List<TreeNode> leftSubTree = f(low, i - 1, dp);\\n            List<TreeNode> rightSubTree = f(i + 1, high, dp);\\n            for (TreeNode left : leftSubTree){\\n                for (TreeNode right : rightSubTree){\\n                    bst.add(new TreeNode(i, left, right));\\n                }\\n            }\\n        }\\n        return dp[low][high] = bst;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1440987,
                "title": "java-solution-explained-tc-92-better-variable-naming",
                "content": "# Basic Approach\\nwe create another function called generateBSTs which takes two parameters, the strart node value and the end node value\\n1. If the start node value is greater than the end node then add the null to the currentBST list and return it\\n2. for every node from start to end, make it as our root node value do\\n3. call generateBSTs to generate leftSubtree with start as current start and end as value before until current root value ,which returns the list of roots of unique left subtrees formed with values from start to currentroot value - 1 \\n4. call generateBSTs to generate rightSubtree with start as current currentrootvalue + 1 and end as current end ,which returns the list of roots of unique right subtrees formed with values from currentroot value + 1 to end\\n5. now to get all combinations of left subtrees and right subtrees for the current root, traverse using two for loops and create a root with value as current root value and add the leftchild and rightchild with the help of for loops\\n6. add the root node to the currentBST list\\n7. return the currentBST list \\n# Code\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return generateBSTs(1, n);\\n    }\\n    List<TreeNode> generateBSTs(int start, int end) {\\n        List<TreeNode> currentBSTs = new ArrayList<>();\\n        if(start > end) currentBSTs.add(null);        \\n        else {\\n            for(int rootVal = start; rootVal <= end; rootVal ++) {                \\n                List<TreeNode> leftSubtreeRoots = generateBSTs(start, rootVal - 1);\\n                List<TreeNode> rightSubtreeRoots = generateBSTs(rootVal + 1, end);\\n                for(TreeNode leftChild : leftSubtreeRoots) {                    \\n                    for(TreeNode rightChild : rightSubtreeRoots) {\\n                        TreeNode root = new TreeNode(rootVal);\\n                        root.left = leftChild;\\n                        root.right = rightChild;\\n                        currentBSTs.add(root);\\n                    }\\n                }\\n            }\\n        }\\n        return currentBSTs;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return generateBSTs(1, n);\\n    }\\n    List<TreeNode> generateBSTs(int start, int end) {\\n        List<TreeNode> currentBSTs = new ArrayList<>();\\n        if(start > end) currentBSTs.add(null);        \\n        else {\\n            for(int rootVal = start; rootVal <= end; rootVal ++) {                \\n                List<TreeNode> leftSubtreeRoots = generateBSTs(start, rootVal - 1);\\n                List<TreeNode> rightSubtreeRoots = generateBSTs(rootVal + 1, end);\\n                for(TreeNode leftChild : leftSubtreeRoots) {                    \\n                    for(TreeNode rightChild : rightSubtreeRoots) {\\n                        TreeNode root = new TreeNode(rootVal);\\n                        root.left = leftChild;\\n                        root.right = rightChild;\\n                        currentBSTs.add(root);\\n                    }\\n                }\\n            }\\n        }\\n        return currentBSTs;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 806941,
                "title": "c-simple-and-elegant",
                "content": "**Runtime: 8 ms, faster than 99.46% of C++ online submissions for Unique Binary Search Trees II.\\nMemory Usage: 14 MB, less than 63.64% of C++ online submissions for Unique Binary Search Trees II.**\\n\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\nprivate:\\n    vector<TreeNode *> helper(int start, int end)\\n    {\\n        if(start > end)\\n            return vector<TreeNode*>(1, NULL);\\n        if(start == end)\\n            return vector<TreeNode*>(1, new TreeNode(start));\\n        \\n        vector<TreeNode *> result, left, right;\\n        \\n        for(int i = start; i <= end; i++)\\n        {\\n            left = helper(start, i - 1);\\n            right = helper(i + 1, end);\\n            \\n            for(TreeNode *lNode: left)\\n            {\\n                for(TreeNode *rNode: right)\\n                    result.push_back(new TreeNode(i, lNode, rNode));\\n            }\\n        }\\n        return result;\\n    }\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0)\\n            return vector<TreeNode*>();\\n        return helper(1, n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\nprivate:\\n    vector<TreeNode *> helper(int start, int end)\\n    {\\n        if(start > end)\\n            return vector<TreeNode*>(1, NULL);\\n        if(start == end)\\n            return vector<TreeNode*>(1, new TreeNode(start));\\n        \\n        vector<TreeNode *> result, left, right;\\n        \\n        for(int i = start; i <= end; i++)\\n        {\\n            left = helper(start, i - 1);\\n            right = helper(i + 1, end);\\n            \\n            for(TreeNode *lNode: left)\\n            {\\n                for(TreeNode *rNode: right)\\n                    result.push_back(new TreeNode(i, lNode, rNode));\\n            }\\n        }\\n        return result;\\n    }\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0)\\n            return vector<TreeNode*>();\\n        return helper(1, n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 551479,
                "title": "c-miminalizm",
                "content": "```cpp\\nvector<TreeNode*> generateTrees(int end, int start = 0) {\\n    if (start > end)\\n        return { nullptr };\\n    vector<TreeNode*> res;\\n    for (auto i = max(1, start); i <= end; ++i) {\\n        for (auto l : generateTrees(i - 1, max(1, start)))\\n            for (auto r : generateTrees(end, i + 1)) {\\n                res.push_back(new TreeNode(i));\\n                res.back()->left = l;\\n                res.back()->right = r;\\n            }\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nvector<TreeNode*> generateTrees(int end, int start = 0) {\\n    if (start > end)\\n        return { nullptr };\\n    vector<TreeNode*> res;\\n    for (auto i = max(1, start); i <= end; ++i) {\\n        for (auto l : generateTrees(i - 1, max(1, start)))\\n            for (auto r : generateTrees(end, i + 1)) {\\n                res.push_back(new TreeNode(i));\\n                res.back()->left = l;\\n                res.back()->right = r;\\n            }\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 457492,
                "title": "javascript-8-line-solution",
                "content": "```js\\nvar generateTrees = function(n, l = 1, r = n, res = []) {\\n    for(let i = l; i <= r; i++){\\n        for(const left of generateTrees(n, l, i - 1)){\\n            for(const right of generateTrees(n, i + 1, r)){\\n                res.push({val: i, left, right});\\n            }\\n        }\\n    }\\n    return n ? res.length ? res : [null] : [];\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar generateTrees = function(n, l = 1, r = n, res = []) {\\n    for(let i = l; i <= r; i++){\\n        for(const left of generateTrees(n, l, i - 1)){\\n            for(const right of generateTrees(n, i + 1, r)){\\n                res.push({val: i, left, right});\\n            }\\n        }\\n    }\\n    return n ? res.length ? res : [null] : [];\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 350718,
                "title": "cpp-easy-to-understand-recursive-solution-with-explanation",
                "content": "Explanation :\\nEvery element in the array[1,n] can be a root sometime, because of the BST property, \\nif ith element is chosen as the root, then the elements from [1,i-1] will form the left subtree & [i+1,n] will form the right subtree.\\nWhat we ask recursion to do is , for each ith element , return all possible combinations of left subtree & right subtree, then we will attach the root(ith element) in all possible combinations.\\nThat\\'s it.\\nkEEP it simple, keep coding :)\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n    if (n==0) return {};\\n    return helper(1,n);\\n    }\\n    \\n    \\n    vector <TreeNode*> helper(int start, int end){\\n        if (start>end) return {nullptr};\\n      vector <TreeNode* > ans;\\n        for (int i=start; i <= end; ++i)\\n        {\\n        auto leftSubTree = helper(start, i-1);\\n        auto rightSubTree = helper(i+1,end);\\n            for (auto a:leftSubTree){\\n                  for (auto b:rightSubTree){\\n                      TreeNode *Node = new TreeNode(i); \\n                      Node->left= a;\\n                      Node->right= b;\\n                      ans.push_back(Node);\\n                  }   \\n            }\\n        }\\n        return ans;   \\n    } \\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n    if (n==0) return {};\\n    return helper(1,n);\\n    }\\n    \\n    \\n    vector <TreeNode*> helper(int start, int end){\\n        if (start>end) return {nullptr};\\n      vector <TreeNode* > ans;\\n        for (int i=start; i <= end; ++i)\\n        {\\n        auto leftSubTree = helper(start, i-1);\\n        auto rightSubTree = helper(i+1,end);\\n            for (auto a:leftSubTree){\\n                  for (auto b:rightSubTree){\\n                      TreeNode *Node = new TreeNode(i); \\n                      Node->left= a;\\n                      Node->right= b;\\n                      ans.push_back(Node);\\n                  }   \\n            }\\n        }\\n        return ans;   \\n    } \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 262915,
                "title": "c-iterative-dp-solution-reuse-tree-nodes-both-100",
                "content": "Runtime: 16 ms, faster than 100.00% of C++ online submissions for Unique Binary Search Trees II.\\nMemory Usage: 11.6 MB, less than 100.00% of C++ online submissions for Unique Binary Search Trees II.\\n\\nBTW, I think {NULL} should be returned in the case n = 0, but I have to return {} to pass the test case; I think this is LC\\'s mistake.\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) return {};\\n        vector<TreeNode*> nul = {NULL};\\n        vector<vector<vector<TreeNode*>>> trees(n);\\n        // all trees in trees[i][j] contain exactly the numbers from j+1 to j+i+1\\n        for (int i = 0; i < n; ++i) {\\n            trees[i].resize(n-i);\\n            for (int j = 0; j < n-i; ++j) {\\n                for (int k = 0; k <= i; ++k) {\\n                    auto jk1 = j+k+1;\\n                    auto& left = k == 0 ? nul : trees[k-1][j];\\n                    auto& right = k == i ? nul : trees[i-k-1][jk1];\\n                    for (auto l : left) for (auto r : right) {\\n                        trees[i][j].emplace_back(new TreeNode(jk1));\\n                        trees[i][j].back()->left = l;\\n                        trees[i][j].back()->right = r;\\n                    }\\n                }                    \\n            }\\n        }\\n        return trees.back()[0];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n == 0) return {};\\n        vector<TreeNode*> nul = {NULL};\\n        vector<vector<vector<TreeNode*>>> trees(n);\\n        // all trees in trees[i][j] contain exactly the numbers from j+1 to j+i+1\\n        for (int i = 0; i < n; ++i) {\\n            trees[i].resize(n-i);\\n            for (int j = 0; j < n-i; ++j) {\\n                for (int k = 0; k <= i; ++k) {\\n                    auto jk1 = j+k+1;\\n                    auto& left = k == 0 ? nul : trees[k-1][j];\\n                    auto& right = k == i ? nul : trees[i-k-1][jk1];\\n                    for (auto l : left) for (auto r : right) {\\n                        trees[i][j].emplace_back(new TreeNode(jk1));\\n                        trees[i][j].back()->left = l;\\n                        trees[i][j].back()->right = r;\\n                    }\\n                }                    \\n            }\\n        }\\n        return trees.back()[0];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31529,
                "title": "unique-binary-search-trees-ii-c-shallow-copy-deep-copy",
                "content": "**Shallow Copy** - TreeNodes are shared between trees:\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int i = lo; i <= hi; i++) {\\n            vector<TreeNode*> lefts = generate(lo, i - 1);\\n            vector<TreeNode*> rights = generate(i + 1, hi);\\n            for (TreeNode* left : lefts) {\\n                for (TreeNode* right : rights) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = left;\\n                    node->right = right;\\n                    trees.push_back(node);\\n                }\\n            }\\n        }\\n        \\n        return trees;\\n    }\\n};\\n````\\n\\n**Deep Copy** - All trees use its own nodes;\\n***Matrix***\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\nprivate:\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int k = lo; k <= hi; k++) {\\n            vector<vector<TreeNode*>> lefts(1, generate(lo, k - 1));\\n            vector<vector<TreeNode*>> rights(1, generate(k + 1, hi));\\n            int l = lefts[0].size(), r = rights[0].size();\\n            for (int i = 0; i < l; i++) {\\n                for (int j = 0; j < r; j++) {\\n                    if (j >= lefts.size()) lefts.push_back(generate(lo, k - 1));\\n                    if (i >= rights.size()) rights.push_back(generate(k + 1, hi));\\n                    TreeNode* node = new TreeNode(k);\\n                    node->left = lefts[j][i];\\n                    node->right = rights[i][j];\\n                    trees.push_back(node);\\n                }\\n            }\\n        }\\n\\n        return trees;\\n    }\\n};\\n```\\n\\n***Clone***\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int i = lo; i <= hi; i++) {\\n            // TreeNode in this vector should only be used while combining with the first TreeNode in rights, for the rest use clone;\\n            vector<TreeNode*> lefts = generate(lo, i - 1);\\n            for (TreeNode* left : lefts) {\\n                vector<TreeNode*> rights = generate(i + 1, hi);\\n                bool first = true;\\n                for (TreeNode* right : rights) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = first ? left : clone(left);    // the first node in rights use left, other use cloned left;\\n                    node->right = right;\\n                    trees.push_back(node);\\n                    first = false;\\n                }\\n            }\\n        }\\n        \\n        return trees;\\n    }\\n\\nprivate:\\n    /* Check null both at node and left,right */\\n    TreeNode* clone(TreeNode* node) {\\n        if (!node) {\\n            return nullptr;\\n        }\\n        TreeNode* copy = new TreeNode(node->val);\\n        if (node->left) {\\n            copy->left = clone(node->left);\\n        }\\n        if (node->right) {\\n            copy->right = clone(node->right);\\n        }\\n        return copy;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int i = lo; i <= hi; i++) {\\n            vector<TreeNode*> lefts = generate(lo, i - 1);\\n            vector<TreeNode*> rights = generate(i + 1, hi);\\n            for (TreeNode* left : lefts) {\\n                for (TreeNode* right : rights) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = left;\\n                    node->right = right;\\n                    trees.push_back(node);\\n                }\\n            }\\n        }\\n        \\n        return trees;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\nprivate:\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int k = lo; k <= hi; k++) {\\n            vector<vector<TreeNode*>> lefts(1, generate(lo, k - 1));\\n            vector<vector<TreeNode*>> rights(1, generate(k + 1, hi));\\n            int l = lefts[0].size(), r = rights[0].size();\\n            for (int i = 0; i < l; i++) {\\n                for (int j = 0; j < r; j++) {\\n                    if (j >= lefts.size()) lefts.push_back(generate(lo, k - 1));\\n                    if (i >= rights.size()) rights.push_back(generate(k + 1, hi));\\n                    TreeNode* node = new TreeNode(k);\\n                    node->left = lefts[j][i];\\n                    node->right = rights[i][j];\\n                    trees.push_back(node);\\n                }\\n            }\\n        }\\n\\n        return trees;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return n == 0 ? vector<TreeNode*>() : generate(1, n);\\n    }\\n\\n    vector<TreeNode*> generate(int lo, int hi) {\\n        vector<TreeNode*> trees;\\n        if (lo > hi) {\\n            trees.push_back(nullptr);\\n            return trees;\\n        }\\n\\n        for (int i = lo; i <= hi; i++) {\\n            // TreeNode in this vector should only be used while combining with the first TreeNode in rights, for the rest use clone;\\n            vector<TreeNode*> lefts = generate(lo, i - 1);\\n            for (TreeNode* left : lefts) {\\n                vector<TreeNode*> rights = generate(i + 1, hi);\\n                bool first = true;\\n                for (TreeNode* right : rights) {\\n                    TreeNode* node = new TreeNode(i);\\n                    node->left = first ? left : clone(left);    // the first node in rights use left, other use cloned left;\\n                    node->right = right;\\n                    trees.push_back(node);\\n                    first = false;\\n                }\\n            }\\n        }\\n        \\n        return trees;\\n    }\\n\\nprivate:\\n    /* Check null both at node and left,right */\\n    TreeNode* clone(TreeNode* node) {\\n        if (!node) {\\n            return nullptr;\\n        }\\n        TreeNode* copy = new TreeNode(node->val);\\n        if (node->left) {\\n            copy->left = clone(node->left);\\n        }\\n        if (node->right) {\\n            copy->right = clone(node->right);\\n        }\\n        return copy;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31634,
                "title": "my-non-recursive-c-solution",
                "content": "    vector<TreeNode *> generateTrees(int n) {\\n        vector<TreeNode *> tmp;\\n        vector<TreeNode *> ret;\\n        tmp.push_back(NULL);        \\n        ret.push_back(new TreeNode(1));\\n        if (!n) return tmp;\\n\\n\\t\\t/* insert the largeset number into previously contructed trees */\\n        for (int i = 2; i <= n; i++) {\\n            tmp.clear();\\n            for (int j = 0; j < ret.size(); j++) {\\n\\t\\t\\t\\t/* firstly, put the largest number on the top of tree */\\n                TreeNode *orgTree = ret[j];                \\n                TreeNode *newNode = new TreeNode(i);\\n                newNode->left = copy(orgTree);\\n                tmp.push_back(newNode);\\n                \\n\\t\\t\\t\\t/* traverse thru the right-most branch, \\n\\t\\t\\t\\t * insert the largest number one position after another */\\n                TreeNode *orgRunner = orgTree;\\n                while (orgRunner) {\\n                    newNode = new TreeNode(i);\\n                    newNode->left = orgRunner->right;\\n                    orgRunner->right = newNode;\\n                    tmp.push_back(copy(orgTree));\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t/* recover the original tree */\\n                    orgRunner->right = orgRunner->right->left;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t/* for the next loop */\\n                    orgRunner = orgRunner->right;\\n                }\\n            }\\n            ret =  tmp;\\n        }\\n        return ret;\\n    }\\n    \\n    TreeNode *copy (TreeNode *root) {\\n        TreeNode *ret = NULL;\\n        if (root) {\\n            ret = new TreeNode(root->val);\\n            ret->left = copy(root->left);\\n            ret->right = copy(root->right);\\n        }\\n        return ret;\\n    }",
                "solutionTags": [],
                "code": "    vector<TreeNode *> generateTrees(int n) {\\n        vector<TreeNode *> tmp;\\n        vector<TreeNode *> ret;\\n        tmp.push_back(NULL);        \\n        ret.push_back(new TreeNode(1));\\n        if (!n) return tmp;\\n\\n\\t\\t/* insert the largeset number into previously contructed trees */\\n        for (int i = 2; i <= n; i++) {\\n            tmp.clear();\\n            for (int j = 0; j < ret.size(); j++) {\\n\\t\\t\\t\\t/* firstly, put the largest number on the top of tree */\\n                TreeNode *orgTree = ret[j];                \\n                TreeNode *newNode = new TreeNode(i);\\n                newNode->left = copy(orgTree);\\n                tmp.push_back(newNode);\\n                \\n\\t\\t\\t\\t/* traverse thru the right-most branch, \\n\\t\\t\\t\\t * insert the largest number one position after another */\\n                TreeNode *orgRunner = orgTree;\\n                while (orgRunner) {\\n                    newNode = new TreeNode(i);\\n                    newNode->left = orgRunner->right;\\n                    orgRunner->right = newNode;\\n                    tmp.push_back(copy(orgTree));\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t/* recover the original tree */\\n                    orgRunner->right = orgRunner->right->left;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t/* for the next loop */\\n                    orgRunner = orgRunner->right;\\n                }\\n            }\\n            ret =  tmp;\\n        }\\n        return ret;\\n    }\\n    \\n    TreeNode *copy (TreeNode *root) {\\n        TreeNode *ret = NULL;\\n        if (root) {\\n            ret = new TreeNode(root->val);\\n            ret->left = copy(root->left);\\n            ret->right = copy(root->right);\\n        }\\n        return ret;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 31626,
                "title": "python-generator-solution",
                "content": "credit goes to https://leetcode.com/discuss/3440/help-simplify-my-code-the-second-one?show=4884#a4884\\n\\n    # Definition for a  binary tree node\\n    # class TreeNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution:\\n        # @return a list of tree node\\n        # 2:30\\n        def generateTrees(self, n):\\n            nodes = map(TreeNode, range(1, n+1))\\n            return map(copy.deepcopy, self.buildTree(nodes))\\n    \\n        def buildTree(self, nodes):\\n            n = len(nodes)\\n            if n == 0:\\n                yield None\\n                return\\n    \\n            for i in range(n):\\n                root = nodes[i]\\n                for left in self.buildTree(nodes[:i]):\\n                    for right in self.buildTree(nodes[i+1:]):\\n                        root.left, root.right = left, right\\n                        yield root",
                "solutionTags": [
                    "Python"
                ],
                "code": "credit goes to https://leetcode.com/discuss/3440/help-simplify-my-code-the-second-one?show=4884#a4884\\n\\n    # Definition for a  binary tree node\\n    # class TreeNode:\\n    #     def __init__(self, x):\\n    #         self.val = x\\n    #         self.left = None\\n    #         self.right = None\\n    \\n    class Solution:\\n        # @return a list of tree node\\n        # 2:30\\n        def generateTrees(self, n):\\n            nodes = map(TreeNode, range(1, n+1))\\n            return map(copy.deepcopy, self.buildTree(nodes))\\n    \\n        def buildTree(self, nodes):\\n            n = len(nodes)\\n            if n == 0:\\n                yield None\\n                return\\n    \\n            for i in range(n):\\n                root = nodes[i]\\n                for left in self.buildTree(nodes[:i]):\\n                    for right in self.buildTree(nodes[i+1:]):\\n                        root.left, root.right = left, right\\n                        yield root",
                "codeTag": "Java"
            },
            {
                "id": 3865479,
                "title": "c-detailed-explanation-of-the-recursive-approach",
                "content": "# Intuition\\n- The Trees can have root nodes from 1 to n\\n- Left Subtree will have elements less than the root node\\n- Right Subtree will have elements greater than the root node\\n- Each left and right subtree can be treated as an individual tree which can have previousRoot-1 (starting from prevousRoot-1 till the left bound) number of root nodes and n-prevRoot (starting from previousRoot+1 till right end) number of root nodes respectively \\n\\n# Approach\\n- Base Case 1: For invalid boundary an empty tree can be created which is returned\\n- Base Case 2: When there is only a single node left the left and right value will be equal the value is pushed in the result as a node an returned\\n- For Every Tree/Subtree fix 1 node as the root node (i) and find all possible left and right Subtrees for that node.\\n- Every left Subtree can be combined with each of the right Subtrees to give a unique tree and vice versa\\n- Generate all possible combinations for the root node and push the root node in the result vector.\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    vector<TreeNode*> f(int left,int right){\\n\\n        vector<TreeNode*> res;\\n\\n        //Base case 1:\\n        if(left>right){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        //Base case 2:\\n        if(left==right){\\n            TreeNode* node= new TreeNode(left);\\n            res.push_back(node);\\n            return res;\\n        }\\n\\n        //Fix the root node in i\\n        for(int i=left; i<=right; i++){\\n        //The left subtree will have elements from the left bound till i-1\\n            vector<TreeNode*> leftSubtree=f(left,i-1);\\n        //The right subtree will have elements from i+1 till the right bound\\n            vector<TreeNode*> rightSubtree=f(i+1,right);\\n        //Add all possibilities of the combinations of the left subtrees and the right subtrees for the root node i\\n            for(int j=0; j<leftSubtree.size(); j++){\\n                for(int k=0; k<rightSubtree.size(); k++){\\n                    TreeNode* node=new TreeNode(i);\\n                    node->left=leftSubtree[j];\\n                    node->right=rightSubtree[k];\\n                    res.push_back(node);\\n                }\\n            }\\n\\n        }\\n        return res;\\n    }\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return f(1,n);\\n    }\\n};\\n```\\n\\nPlease **UPVOTE** if you understood!",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Search Tree",
                    "Combinatorics"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    vector<TreeNode*> f(int left,int right){\\n\\n        vector<TreeNode*> res;\\n\\n        //Base case 1:\\n        if(left>right){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        //Base case 2:\\n        if(left==right){\\n            TreeNode* node= new TreeNode(left);\\n            res.push_back(node);\\n            return res;\\n        }\\n\\n        //Fix the root node in i\\n        for(int i=left; i<=right; i++){\\n        //The left subtree will have elements from the left bound till i-1\\n            vector<TreeNode*> leftSubtree=f(left,i-1);\\n        //The right subtree will have elements from i+1 till the right bound\\n            vector<TreeNode*> rightSubtree=f(i+1,right);\\n        //Add all possibilities of the combinations of the left subtrees and the right subtrees for the root node i\\n            for(int j=0; j<leftSubtree.size(); j++){\\n                for(int k=0; k<rightSubtree.size(); k++){\\n                    TreeNode* node=new TreeNode(i);\\n                    node->left=leftSubtree[j];\\n                    node->right=rightSubtree[k];\\n                    res.push_back(node);\\n                }\\n            }\\n\\n        }\\n        return res;\\n    }\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return f(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865297,
                "title": "easy-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n\\n        return upvote(1,n);\\n    }\\n\\n    private List<TreeNode> upvote(int s, int e){\\n        List<TreeNode> ans = new ArrayList<>();\\n\\n        if(s>e){\\n            ans.add(null);\\n            return ans;\\n        }\\n\\n        for(int i = s;i <= e;i++){\\n            List<TreeNode> left = upvote(s, i-1);\\n            List<TreeNode> right = upvote(i+1, e);\\n\\n            for(TreeNode l : left){\\n                for(TreeNode r : right){\\n                    TreeNode res = new TreeNode(i,l,r);\\n                    ans.add(res);\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Tree",
                    "Binary Search Tree",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n\\n        return upvote(1,n);\\n    }\\n\\n    private List<TreeNode> upvote(int s, int e){\\n        List<TreeNode> ans = new ArrayList<>();\\n\\n        if(s>e){\\n            ans.add(null);\\n            return ans;\\n        }\\n\\n        for(int i = s;i <= e;i++){\\n            List<TreeNode> left = upvote(s, i-1);\\n            List<TreeNode> right = upvote(i+1, e);\\n\\n            for(TreeNode l : left){\\n                for(TreeNode r : right){\\n                    TreeNode res = new TreeNode(i,l,r);\\n                    ans.add(res);\\n                }\\n            }\\n        }\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3864986,
                "title": "unique-binary-search-trees-ii-a-rusty-approach",
                "content": "Have you ever tried to generate all unique binary search trees (BSTs) with a given number of nodes? It\\'s a crab-tastic challenge, but don\\'t worry; Rust is here to help you out!\\n\\n## Intuition\\nImagine you have \\\\( n \\\\) distinct numbers. You can pick any number as the root of the BST. Once you pick a root, the remaining numbers are divided into two groups, forming the left and right subtrees. You can recursively build the subtrees and combine them to form all possible BSTs.\\n\\n## Approach\\nWe use dynamic programming to efficiently construct all possible trees. We start by building trees with 1 node, then 2 nodes, up to \\\\( n \\\\) nodes. We use previously computed solutions to build trees with more nodes, making the process fast and memory-efficient.\\n\\n### Example Explanation\\nFor \\\\( n = 3 \\\\), the output is:\\n```\\n[\\n    [1,null,2,null,3],\\n    [1,null,3,2],\\n    [2,1,3],\\n    [3,1,null,null,2],\\n    [3,2,null,1]\\n]\\n```\\nIt means there are 5 different ways to form a BST using numbers from 1 to 3.\\n\\n## Complexity\\n- Time complexity: $$ O\\\\left(\\\\frac{{4^n}}{{n\\\\sqrt{n}}}\\\\right) $$\\n- Space complexity: $$ O\\\\left(\\\\frac{{4^n}}{{n\\\\sqrt{n}}}\\\\right) $$\\n\\n## Code\\nThe Rust code below generates all unique BSTs for a given number of nodes, using dynamic programming.\\n\\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n\\n        let mut dp = vec![Vec::new(); (n + 1) as usize];\\n        dp[0].push(None);\\n        for nodes in 1..=n {\\n            let mut trees_per_node = Vec::new();\\n            for root in 1..=nodes {\\n                let left_trees = &dp[(root - 1) as usize];\\n                let right_trees = &dp[(nodes - root) as usize];\\n                for left_tree in left_trees {\\n                    for right_tree in right_trees {\\n                        let root_node = Some(Rc::new(RefCell::new(TreeNode::new(root))));\\n                        root_node.as_ref().unwrap().borrow_mut().left = left_tree.clone();\\n                        root_node.as_ref().unwrap().borrow_mut().right = Solution::clone(right_tree.clone(), root);\\n                        trees_per_node.push(root_node);\\n                    }\\n                }\\n            }\\n            dp[nodes as usize] = trees_per_node;\\n        }\\n        dp[n as usize].clone()\\n    }\\n\\n    fn clone(tree: Option<Rc<RefCell<TreeNode>>>, offset: i32) -> Option<Rc<RefCell<TreeNode>>> {\\n        tree.map(|node| {\\n            Rc::new(RefCell::new(TreeNode {\\n                val: node.borrow().val + offset,\\n                left: Solution::clone(node.borrow().left.clone(), offset),\\n                right: Solution::clone(node.borrow().right.clone(), offset),\\n            }))\\n        })\\n    }\\n}\\n```\\n``` Go []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```\\n``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        if n == 0:\\n            return []\\n\\n        dp = [[] for _ in range(n + 1)]\\n        dp[0].append(None)\\n        for nodes in range(1, n + 1):\\n            for root in range(1, nodes + 1):\\n                for left_tree in dp[root - 1]:\\n                    for right_tree in dp[nodes - root]:\\n                        root_node = TreeNode(root)\\n                        root_node.left = left_tree\\n                        root_node.right = self.clone(right_tree, root)\\n                        dp[nodes].append(root_node)\\n        return dp[n]\\n    \\n    def clone(self, n: TreeNode, offset: int) -> TreeNode:\\n        if n:\\n            node = TreeNode(n.val + offset)\\n            node.left = self.clone(n.left, offset)\\n            node.right = self.clone(n.right, offset)\\n            return node\\n        return None\\n```\\nExplore the beauty of constructing binary trees and have fun with Rust! If you find this solution helpful, don\\'t forget to upvote and share it with fellow Rustaceans. Happy coding! \\uD83E\\uDD80",
                "solutionTags": [
                    "Python3",
                    "Go",
                    "Rust",
                    "Dynamic Programming"
                ],
                "code": "```\\n[\\n    [1,null,2,null,3],\\n    [1,null,3,2],\\n    [2,1,3],\\n    [3,1,null,null,2],\\n    [3,2,null,1]\\n]\\n```\n``` Rust []\\nuse std::rc::Rc;\\nuse std::cell::RefCell;\\n\\nimpl Solution {\\n    pub fn generate_trees(n: i32) -> Vec<Option<Rc<RefCell<TreeNode>>>> {\\n        if n == 0 {\\n            return Vec::new();\\n        }\\n\\n        let mut dp = vec![Vec::new(); (n + 1) as usize];\\n        dp[0].push(None);\\n        for nodes in 1..=n {\\n            let mut trees_per_node = Vec::new();\\n            for root in 1..=nodes {\\n                let left_trees = &dp[(root - 1) as usize];\\n                let right_trees = &dp[(nodes - root) as usize];\\n                for left_tree in left_trees {\\n                    for right_tree in right_trees {\\n                        let root_node = Some(Rc::new(RefCell::new(TreeNode::new(root))));\\n                        root_node.as_ref().unwrap().borrow_mut().left = left_tree.clone();\\n                        root_node.as_ref().unwrap().borrow_mut().right = Solution::clone(right_tree.clone(), root);\\n                        trees_per_node.push(root_node);\\n                    }\\n                }\\n            }\\n            dp[nodes as usize] = trees_per_node;\\n        }\\n        dp[n as usize].clone()\\n    }\\n\\n    fn clone(tree: Option<Rc<RefCell<TreeNode>>>, offset: i32) -> Option<Rc<RefCell<TreeNode>>> {\\n        tree.map(|node| {\\n            Rc::new(RefCell::new(TreeNode {\\n                val: node.borrow().val + offset,\\n                left: Solution::clone(node.borrow().left.clone(), offset),\\n                right: Solution::clone(node.borrow().right.clone(), offset),\\n            }))\\n        })\\n    }\\n}\\n```\n``` Go []\\nvar generateTrees = function(n) {\\n    if (n === 0) return [];\\n\\n    const dp = Array.from({ length: n + 1 }, () => []);\\n    dp[0].push(null);\\n    for (let nodes = 1; nodes <= n; nodes++) {\\n        for (let root = 1; root <= nodes; root++) {\\n            for (const left_tree of dp[root - 1]) {\\n                for (const right_tree of dp[nodes - root]) {\\n                    const root_node = new TreeNode(root);\\n                    root_node.left = left_tree;\\n                    root_node.right = clone(right_tree, root);\\n                    dp[nodes].push(root_node);\\n                }\\n            }\\n        }\\n    }\\n    return dp[n];\\n};\\n\\nfunction clone(n, offset) {\\n    if (n === null) return null;\\n    const node = new TreeNode(n.val + offset);\\n    node.left = clone(n.left, offset);\\n    node.right = clone(n.right, offset);\\n    return node;\\n}\\n```\n``` Python []\\nclass Solution:\\n    def generateTrees(self, n: int):\\n        if n == 0:\\n            return []\\n\\n        dp = [[] for _ in range(n + 1)]\\n        dp[0].append(None)\\n        for nodes in range(1, n + 1):\\n            for root in range(1, nodes + 1):\\n                for left_tree in dp[root - 1]:\\n                    for right_tree in dp[nodes - root]:\\n                        root_node = TreeNode(root)\\n                        root_node.left = left_tree\\n                        root_node.right = self.clone(right_tree, root)\\n                        dp[nodes].append(root_node)\\n        return dp[n]\\n    \\n    def clone(self, n: TreeNode, offset: int) -> TreeNode:\\n        if n:\\n            node = TreeNode(n.val + offset)\\n            node.left = self.clone(n.left, offset)\\n            node.right = self.clone(n.right, offset)\\n            return node\\n        return None\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3399086,
                "title": "java-memoization-beats-99-on-space-and-time-15-lines",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n^2)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(n^2)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  Map<Pair<Integer, Integer>, List<TreeNode>> memo = new HashMap<>();\\n\\n  private List<TreeNode> generateTrees(int l, int r) {\\n    if (l > r)\\n      return new ArrayList<>() {{add(null);}};\\n\\n    var list = new ArrayList<TreeNode>();\\n    var pair = new Pair(l, r);\\n\\n    if (memo.containsKey(pair))\\n      return memo.get(pair);\\n  \\n    for (var i=l; i<=r; i++)\\n      for (var left : generateTrees(l, i-1))\\n        for (var right : generateTrees(i+1, r))\\n          list.add(new TreeNode(i, left, right));\\n    \\n    memo.put(pair, list);\\n    return list;\\n  }\\n\\n  public List<TreeNode> generateTrees(int n) {\\n    return generateTrees(1, n);\\n  }\\n}\\n```\\nIf you like my solution, please upvote it!",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n  Map<Pair<Integer, Integer>, List<TreeNode>> memo = new HashMap<>();\\n\\n  private List<TreeNode> generateTrees(int l, int r) {\\n    if (l > r)\\n      return new ArrayList<>() {{add(null);}};\\n\\n    var list = new ArrayList<TreeNode>();\\n    var pair = new Pair(l, r);\\n\\n    if (memo.containsKey(pair))\\n      return memo.get(pair);\\n  \\n    for (var i=l; i<=r; i++)\\n      for (var left : generateTrees(l, i-1))\\n        for (var right : generateTrees(i+1, r))\\n          list.add(new TreeNode(i, left, right));\\n    \\n    memo.put(pair, list);\\n    return list;\\n  }\\n\\n  public List<TreeNode> generateTrees(int n) {\\n    return generateTrees(1, n);\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3246485,
                "title": "c-divide-and-conquer-easy-to-understand",
                "content": "# Algorithm\\n1. Pick a number `i` from `1 .. n`\\n2. Use it as the root of the current tree\\n3. Solve 2 subproblems `1 .. i - 1` and `i + 1 .. n`\\n4. Repeat for every `i` from `1 .. n`\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        return GenerateTrees(1, n);\\n    }\\n\\n    public IList<TreeNode> GenerateTrees(int left, int right)\\n    {\\n        var res = new List<TreeNode>();\\n\\n        if(left > right)\\n        {\\n            res.Add(null);\\n            return res;\\n        }\\n\\n        for(var i = left; i <= right; i++)\\n        {\\n            var leftNodes = GenerateTrees(left, i - 1);\\n            var rightNodes = GenerateTrees(i + 1, right);\\n            \\n            foreach(var leftNode in leftNodes)\\n            {\\n                foreach(var rightNode in rightNodes)\\n                {\\n                    var node = new TreeNode(i, leftNode, rightNode);\\n                    res.Add(node);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Divide and Conquer"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        return GenerateTrees(1, n);\\n    }\\n\\n    public IList<TreeNode> GenerateTrees(int left, int right)\\n    {\\n        var res = new List<TreeNode>();\\n\\n        if(left > right)\\n        {\\n            res.Add(null);\\n            return res;\\n        }\\n\\n        for(var i = left; i <= right; i++)\\n        {\\n            var leftNodes = GenerateTrees(left, i - 1);\\n            var rightNodes = GenerateTrees(i + 1, right);\\n            \\n            foreach(var leftNode in leftNodes)\\n            {\\n                foreach(var rightNode in rightNodes)\\n                {\\n                    var node = new TreeNode(i, leftNode, rightNode);\\n                    res.Add(node);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3104988,
                "title": "c-short-solution-recursion",
                "content": "\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generate(int n,int start){\\n        if(start>n)return {NULL};\\n        vector<TreeNode*>res;\\n        for(int i=start;i<=n;i++){\\n            for(auto left:generate(i-1,start)){\\n                for(auto right:generate(n,i+1)){\\n                    res.push_back(new TreeNode(i,left,right));\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(n,1);\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generate(int n,int start){\\n        if(start>n)return {NULL};\\n        vector<TreeNode*>res;\\n        for(int i=start;i<=n;i++){\\n            for(auto left:generate(i-1,start)){\\n                for(auto right:generate(n,i+1)){\\n                    res.push_back(new TreeNode(i,left,right));\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(n,1);\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2986322,
                "title": "c-solution",
                "content": "# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    vector<TreeNode*> solve(int start, int end) {\\n        vector<TreeNode*> ans;\\n        if(start > end) return {NULL};\\n        if(start == end) return {new TreeNode(start)};\\n        for(int i=start; i<=end; i++) {\\n            vector<TreeNode*> left = solve(start, i-1);\\n            vector<TreeNode*> right = solve(i+1, end);\\n            for(auto l: left)\\n                for(auto r: right)\\n                    ans.push_back(new TreeNode(i, l, r));\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> ans = solve(1, n);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\n\\nclass Solution {\\npublic:\\n    vector<TreeNode*> solve(int start, int end) {\\n        vector<TreeNode*> ans;\\n        if(start > end) return {NULL};\\n        if(start == end) return {new TreeNode(start)};\\n        for(int i=start; i<=end; i++) {\\n            vector<TreeNode*> left = solve(start, i-1);\\n            vector<TreeNode*> right = solve(i+1, end);\\n            for(auto l: left)\\n                for(auto r: right)\\n                    ans.push_back(new TreeNode(i, l, r));\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> ans = solve(1, n);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2611185,
                "title": "c-recursion-very-fast-minimum-line",
                "content": "\\t\\tclass Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<TreeNode*> generateTrees(int n, int s = 1) {\\n\\t\\t\\t\\tvector<TreeNode*> ans;\\n\\t\\t\\t\\tif(n < s) return {nullptr};                              \\n\\t\\t\\t\\t for(int i=s; i<=n; i++) {                \\t                 // Consider every number in range [s,n] as root  \\n\\t\\t\\t\\t\\tfor(auto left: generateTrees(i-1, s)) {                  // generate all possible trees in range [s,i)\\n\\t\\t\\t\\t\\t\\tfor(auto right: generateTrees(n, i+1))               // generate all possible trees in range (i,e]\\n\\t\\t\\t\\t\\t\\t\\tans.push_back(new TreeNode(i, left, right));     // make new trees with i as the root \\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\t}\\n\\t\\t};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "class Solution {\\n\\t\\tpublic:\\n\\t\\t\\tvector<TreeNode*> generateTrees(int n, int s = 1) {\\n\\t\\t\\t\\tvector<TreeNode*> ans;\\n\\t\\t\\t\\tif(n < s) return {nullptr}",
                "codeTag": "Java"
            },
            {
                "id": 2435086,
                "title": "trust-me-boys-and-girls-by-recursion",
                "content": "**Solution -->**\\n```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*> arr;\\n        \\n        if(begin>end)\\n        {\\n            arr.push_back(NULL);\\n            return arr;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode();\\n                    root->val = i;\\n                    root->left = l;\\n                    root->right = r;\\n                    arr.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        return arr;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>arr;\\n        if(n==0) return arr;\\n        \\n        return generateBST(1,n);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*> arr;\\n        \\n        if(begin>end)\\n        {\\n            arr.push_back(NULL);\\n            return arr;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode();\\n                    root->val = i;\\n                    root->left = l;\\n                    root->right = r;\\n                    arr.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        return arr;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>arr;\\n        if(n==0) return arr;\\n        \\n        return generateBST(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2276413,
                "title": "java-recursion-beginner-friendly",
                "content": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return solve(1,n) ;\\n    }\\n    \\n    public List<TreeNode> solve(int left,int right){\\n        List<TreeNode> ans = new ArrayList<>() ;\\n        if(left > right){\\n            ans.add(null) ;\\n            return ans ;\\n        }\\n        for(int i = left ; i <= right ; i++){\\n            List<TreeNode> lft = solve(left,i-1) ;\\n            List<TreeNode> ryt = solve(i+1,right) ;\\n            for(TreeNode l : lft){\\n                for(TreeNode r : ryt){\\n                    ans.add(new TreeNode(i,l,r)) ;\\n                }\\n            }\\n        }\\n        return ans ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        return solve(1,n) ;\\n    }\\n    \\n    public List<TreeNode> solve(int left,int right){\\n        List<TreeNode> ans = new ArrayList<>() ;\\n        if(left > right){\\n            ans.add(null) ;\\n            return ans ;\\n        }\\n        for(int i = left ; i <= right ; i++){\\n            List<TreeNode> lft = solve(left,i-1) ;\\n            List<TreeNode> ryt = solve(i+1,right) ;\\n            for(TreeNode l : lft){\\n                for(TreeNode r : ryt){\\n                    ans.add(new TreeNode(i,l,r)) ;\\n                }\\n            }\\n        }\\n        return ans ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2074851,
                "title": "easy-understandable-recursion-solution-with-comments",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generate(int start,int end){\\n        vector<TreeNode*> ans;  // to store subtree for current node.\\n        if(start>end){  // means null\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> left_nodes=generate(start,i-1); // store all left child node here.\\n            vector<TreeNode*> right_nodes=generate(i+1,end);  // store all right child node here.\\n            \\n            // with every left child and right child , form a tree and push it in ans array.\\n            for(auto left: left_nodes){\\n                for(auto right: right_nodes){\\n                    TreeNode* root=new TreeNode(i,left,right);\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(1,n);\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generate(int start,int end){\\n        vector<TreeNode*> ans;  // to store subtree for current node.\\n        if(start>end){  // means null\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> left_nodes=generate(start,i-1); // store all left child node here.\\n            vector<TreeNode*> right_nodes=generate(i+1,end);  // store all right child node here.\\n            \\n            // with every left child and right child , form a tree and push it in ans array.\\n            for(auto left: left_nodes){\\n                for(auto right: right_nodes){\\n                    TreeNode* root=new TreeNode(i,left,right);\\n                    ans.push_back(root);\\n                }\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1949237,
                "title": "this-was-tough-to-come-up-with-explained-c-beats-97",
                "content": "This one\\'s a bit tricky to come up with,\\n\\n1. We will start building unique BSTs for each number(1-n) by keeping it as a root of current BST \\n2. for this will need all unique BSTs to the left of current root and all unique BSTs to the right of current root,\\n3. for example we have numbers 1-2-3-4-5, keeping \\'3\\' as root we need :\\n* all unique BSTs to the left of 3, which will be generated recursively for (1-2) ->[2,1,null] & [1,null,2]\\n* all unique BSTs to the right of 3, which will be generated recursively for (4-5)->[5,4,null] & [4,null,5]\\nfor each of the unique left BST (keeping 3 as root) e.g.[2,1,null] join all unique right BSTs(root) to the right of 3\\nwhich is [5,4,null] & [4,null,5]\\n\\nThis will generate all unique BSTs recursively, also note while adding a BST to the left or right of current BST we add only root of that BST(since the remaining BST will be made recursively) \\n\\nfor recursion BASE CASE -> when start>end(this means no node can exist to the left or right of current root)\\nreturn {NULL}\\nwhen start==end , which means there is only 1 unique BST that can be made with current node which is the node itself return {new Node(start)}\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> fn(int start,int end){\\n        vector<TreeNode*> res;\\n        //case when left or right subtree for a given node cant be generated \\n        if(start>end) return {NULL};\\n        //case when there is only one node \\n        if(start==end) return {new TreeNode(start)};\\n        \\n        for(int i=start;i<=end;i++){\\n            //generate all left subtrees when i is the root \\n            vector<TreeNode*> left=fn(start,i-1);\\n            // all right subtrees when i is the root \\n            vector<TreeNode*> right=fn(i+1,end);\\n            \\n            for(auto lnode:left){\\n                //for every left subtree with root=i, add all rightsubtrees to it\\n                for(auto rnode:right){\\n                    TreeNode *root=new TreeNode(i,lnode,rnode);\\n                    res.push_back(root); //store one unique BST as result \\n                }\\n                    \\n            }\\n        }\\n        \\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res=fn(1,n);\\n        return res;\\n    }\\n};\\n```\\n\\nPlease upvote if you found it helpful :)",
                "solutionTags": [
                    "Dynamic Programming",
                    "Backtracking",
                    "Binary Search Tree",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> fn(int start,int end){\\n        vector<TreeNode*> res;\\n        //case when left or right subtree for a given node cant be generated \\n        if(start>end) return {NULL};\\n        //case when there is only one node \\n        if(start==end) return {new TreeNode(start)};\\n        \\n        for(int i=start;i<=end;i++){\\n            //generate all left subtrees when i is the root \\n            vector<TreeNode*> left=fn(start,i-1);\\n            // all right subtrees when i is the root \\n            vector<TreeNode*> right=fn(i+1,end);\\n            \\n            for(auto lnode:left){\\n                //for every left subtree with root=i, add all rightsubtrees to it\\n                for(auto rnode:right){\\n                    TreeNode *root=new TreeNode(i,lnode,rnode);\\n                    res.push_back(root); //store one unique BST as result \\n                }\\n                    \\n            }\\n        }\\n        \\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*> res=fn(1,n);\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1934099,
                "title": "java-fast-clean-concise-memoized-recursion-explained-0ms-100",
                "content": "**Intuition** We can break the problem into a subproblem by asking what are all of structures for a given root value.  If we do this, then by virtue of the definition of a binary search tree, all the values less than our root value will be within a left subtree, and al the values greater than our root value will be within a right subtree.  But then, we can repeat this process for both the left and right children, suggesting that recursion will be of help.\\n\\n**Optimization** The input limit n=8 is not very high, but if we want to squeeze every millisecond out of our solution, we should consider one more thing.  We are going to run into a lot of the same small subtrees over and over.  We can remember these for quick lookup instead of rebuilding them each time.  This will also save some space.  This combined with an array-based cache (see **Java Syntax Cleanup**) will put our solution in the fastest class of Java solutions.\\n\\n**Jave Syntax Cleanup** It\\'s nice to use arrays for memoization because they are faster and read more cleanly.  For example, `memo[1][2]` looks nicer (and is faster) than `memo.get(1).get(2)`.  But when you want to create an array out of `List<TreeNode>` elements, Java makes it disgustingly hard to do this without casting, etc.  But there\\'s a trick - you can create a subclass such as `TreeNodeList` which extends a list of a given type (such as `ArrayList<TreeNode>`, but doesn\\'t add any methods.  It\\'s purely an extension to specify a type parameter.  Then we can create `TreeNodeList` arrays for memoization, where each `TreeNodeList` element is a `List<TreeNode>`.  By having an array-based instead of list-based cache, we\\'ll also jump into the top tier in terms of performance of java solutions, with runtimes of 0-1ms for the test suite.\\n\\n**Java Code** O(n^2) space, O(n^2) time.  Space is n^2 due to memoization.  Time would be 2^n except using memoization, we short curcuit frequently.  If we assume that only tree-building is an operation, and a cache hit is not, then due to the size of our cache, we can do at most (n+2)(n+2) operations to fill it, which is O(n^2).\\n\\n```\\nclass Solution {\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        final int limit = n + 1; // upper bound, exclusive\\n        TreeNodeList[][] memo = new TreeNodeList[limit + 1][limit + 1];\\n        return generateTrees(1, limit, memo);\\n    }\\n\\n    private TreeNodeList generateTrees(int low, int limit, TreeNodeList[][] memo) {\\n        TreeNodeList cached = memo[low][limit];\\n        if (cached != null) {\\n            return cached;\\n        }\\n        TreeNodeList out = new TreeNodeList();\\n        for (int r = low; r < limit; ++r) {\\n            TreeNodeList leftNodes = generateTrees(low, r, memo);\\n            TreeNodeList rightNodes = generateTrees(r + 1, limit, memo);\\n            for (TreeNode left : leftNodes) {\\n                for (TreeNode right : rightNodes) {\\n                    TreeNode root = new TreeNode(r);\\n                    root.left = left;\\n                    root.right = right;\\n                    out.add(root);\\n                }\\n            }\\n        }\\n        // Small correction: the list of all trees we can make without any values is [null],\\n\\t\\t// not [].  That is, if we have no node values, there is one possible tree: null.\\n\\t\\t// So we correct empty lists by making them lists of a single null element, instead.\\n        // This makes looping and generating left and right children more straight-forward.\\n        if (out.isEmpty()) {\\n            out.add(null);\\n        }\\n        memo[low][limit] = out;\\n        return out;\\n    }\\n\\n    static class TreeNodeList extends ArrayList<TreeNode> {\\n        // This class exists simply for the convenience of creating arrays without a type parameter.\\n    }\\n\\n}\\n```\\n\\nIf you found this explanation and thought process helpful, please consider an upvote so someone else is more likely to find it, too. And if not, I would sincerely appreciate your constructive criticism so I can learn to write better solutions. Thanks for your time, and happy problem-solving!",
                "solutionTags": [
                    "Java",
                    "Depth-First Search",
                    "Recursion",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        final int limit = n + 1; // upper bound, exclusive\\n        TreeNodeList[][] memo = new TreeNodeList[limit + 1][limit + 1];\\n        return generateTrees(1, limit, memo);\\n    }\\n\\n    private TreeNodeList generateTrees(int low, int limit, TreeNodeList[][] memo) {\\n        TreeNodeList cached = memo[low][limit];\\n        if (cached != null) {\\n            return cached;\\n        }\\n        TreeNodeList out = new TreeNodeList();\\n        for (int r = low; r < limit; ++r) {\\n            TreeNodeList leftNodes = generateTrees(low, r, memo);\\n            TreeNodeList rightNodes = generateTrees(r + 1, limit, memo);\\n            for (TreeNode left : leftNodes) {\\n                for (TreeNode right : rightNodes) {\\n                    TreeNode root = new TreeNode(r);\\n                    root.left = left;\\n                    root.right = right;\\n                    out.add(root);\\n                }\\n            }\\n        }\\n        // Small correction: the list of all trees we can make without any values is [null],\\n\\t\\t// not [].  That is, if we have no node values, there is one possible tree: null.\\n\\t\\t// So we correct empty lists by making them lists of a single null element, instead.\\n        // This makes looping and generating left and right children more straight-forward.\\n        if (out.isEmpty()) {\\n            out.add(null);\\n        }\\n        memo[low][limit] = out;\\n        return out;\\n    }\\n\\n    static class TreeNodeList extends ArrayList<TreeNode> {\\n        // This class exists simply for the convenience of creating arrays without a type parameter.\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1713746,
                "title": "simple-c-code-with-full-explanation-recursive-approach-runtime-16ms",
                "content": "**if you like my approach please don\\'t forget to hit upvote button ! : )**\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    // total no. of binary search tree (countBST) =  2nCn/(n+1)\\n    // node values goes from 1 to n. [SORTED HONA JAROORI HAI - inorder traversal type generate honge]\\n    // if instead of n, we have given vector of different random values to construct BSTs from all those values, then\\n    // you should sort the vector , and then use. approach is same as below...\\n    \\n    // Time Complexity : O(C*n)\\n    // Space Complexity : O(C*n), where C is catalan number \\n    // TC for Outermost loops is simply O(n)\\n    // TC for inner nested loops is O(C)\\n    vector<TreeNode*> rec(int l, int r) \\n    {\\n        if (l > r) return {NULL};\\n        if (l == r) return {new TreeNode(l)};\\n        \\n        vector<TreeNode*> ans;\\n        for (int root = l; root <= r; root++) // fixed at every root\\n        {\\n            vector<TreeNode*> left = rec(l, root-1); //  Have roots of all BSTs which are present in left of \"root\"\\n            vector<TreeNode*> right = rec(root+1, r); // Have roots of all BSTs which are present in right of \"root\"\\n            \\n            // suppose left 4 root, and right has 3 roots, then total BSTs formed for current root is 4 X 3 = 12.\\n            // For each of the 4 left roots, there is 3 roots....means we have to use nested loops for connection with\\n            // current root.\\n            for (auto node_l : left){\\n                for (auto node_r : right){\\n                    \\n                    TreeNode *rootNode = new TreeNode(root);\\n                    rootNode->left = node_l;\\n                    rootNode->right = node_r;\\n                    ans.push_back(rootNode);\\n                }\\n            }\\n                \\n        }\\n        \\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*>ans = rec(1, n);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    \\n    // total no. of binary search tree (countBST) =  2nCn/(n+1)\\n    // node values goes from 1 to n. [SORTED HONA JAROORI HAI - inorder traversal type generate honge]\\n    // if instead of n, we have given vector of different random values to construct BSTs from all those values, then\\n    // you should sort the vector , and then use. approach is same as below...\\n    \\n    // Time Complexity : O(C*n)\\n    // Space Complexity : O(C*n), where C is catalan number \\n    // TC for Outermost loops is simply O(n)\\n    // TC for inner nested loops is O(C)\\n    vector<TreeNode*> rec(int l, int r) \\n    {\\n        if (l > r) return {NULL};\\n        if (l == r) return {new TreeNode(l)};\\n        \\n        vector<TreeNode*> ans;\\n        for (int root = l; root <= r; root++) // fixed at every root\\n        {\\n            vector<TreeNode*> left = rec(l, root-1); //  Have roots of all BSTs which are present in left of \"root\"\\n            vector<TreeNode*> right = rec(root+1, r); // Have roots of all BSTs which are present in right of \"root\"\\n            \\n            // suppose left 4 root, and right has 3 roots, then total BSTs formed for current root is 4 X 3 = 12.\\n            // For each of the 4 left roots, there is 3 roots....means we have to use nested loops for connection with\\n            // current root.\\n            for (auto node_l : left){\\n                for (auto node_r : right){\\n                    \\n                    TreeNode *rootNode = new TreeNode(root);\\n                    rootNode->left = node_l;\\n                    rootNode->right = node_r;\\n                    ans.push_back(rootNode);\\n                }\\n            }\\n                \\n        }\\n        \\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<TreeNode*>ans = rec(1, n);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1620543,
                "title": "clean-c-recursive-solution-with-explanation",
                "content": "Basic idea here is to make every node a root and the nodes less than its value will go to its left side and nodes greater than it will go to right side and repeat the same process on those nodes also.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> solve(int l,int r)\\n    {\\n       vector<TreeNode*>ans;\\n        \\n        if(l>r)\\n       {\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        if(l==r)\\n        {\\n            ans.push_back(new TreeNode(l));\\n            return ans;\\n        }\\n        \\n        \\n         for(int i=l;i<=r;i++)\\n        {\\n             int mid=(l+r)/2;\\n             vector<TreeNode*>left=solve(l,i-1);\\n             vector<TreeNode*>right=solve(i+1,r);\\n             \\n             for(auto l:left)\\n             {\\n                 for(auto r:right)\\n                 {\\n                   TreeNode* root=new TreeNode(i);\\n                     root->left=l;\\n                     root->right=r;\\n                     ans.push_back(root);\\n                 }\\n             }\\n        }\\n        \\n       return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return solve(1,n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Depth-First Search",
                    "Binary Search Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> solve(int l,int r)\\n    {\\n       vector<TreeNode*>ans;\\n        \\n        if(l>r)\\n       {\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n        \\n        if(l==r)\\n        {\\n            ans.push_back(new TreeNode(l));\\n            return ans;\\n        }\\n        \\n        \\n         for(int i=l;i<=r;i++)\\n        {\\n             int mid=(l+r)/2;\\n             vector<TreeNode*>left=solve(l,i-1);\\n             vector<TreeNode*>right=solve(i+1,r);\\n             \\n             for(auto l:left)\\n             {\\n                 for(auto r:right)\\n                 {\\n                   TreeNode* root=new TreeNode(i);\\n                     root->left=l;\\n                     root->right=r;\\n                     ans.push_back(root);\\n                 }\\n             }\\n        }\\n        \\n       return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        return solve(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441985,
                "title": "swift-readable-solution-recursion",
                "content": "```\\nclass Solution {\\n    func generateTrees(_ n: Int) -> [TreeNode?] {\\n        return generateTrees(start: 1, end: n)\\n    }\\n\\n    private func generateTrees(start: Int, end: Int) -> [TreeNode?] {\\n        var answer: [TreeNode?] = []\\n        if start > end {\\n            answer.append(nil)\\n            return answer\\n        }\\n\\n        for root in start...end {\\n            let leftTrees = generateTrees(start: start, end: root-1)\\n            let rightTrees = generateTrees(start: root+1, end: end)\\n            for leftRoot in leftTrees {\\n                for rightRoot in rightTrees {\\n                    let rootNode = TreeNode(root)\\n                    rootNode.left = leftRoot\\n                    rootNode.right = rightRoot\\n                    answer.append(rootNode)\\n                }\\n            }\\n        }\\n        return answer\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    func generateTrees(_ n: Int) -> [TreeNode?] {\\n        return generateTrees(start: 1, end: n)\\n    }\\n\\n    private func generateTrees(start: Int, end: Int) -> [TreeNode?] {\\n        var answer: [TreeNode?] = []\\n        if start > end {\\n            answer.append(nil)\\n            return answer\\n        }\\n\\n        for root in start...end {\\n            let leftTrees = generateTrees(start: start, end: root-1)\\n            let rightTrees = generateTrees(start: root+1, end: end)\\n            for leftRoot in leftTrees {\\n                for rightRoot in rightTrees {\\n                    let rootNode = TreeNode(root)\\n                    rootNode.left = leftRoot\\n                    rootNode.right = rightRoot\\n                    answer.append(rootNode)\\n                }\\n            }\\n        }\\n        return answer\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441709,
                "title": "c-solution",
                "content": "```\\nstruct TreeNode** creatTrees(int low, int high, int *size)\\n{ \\n    if(low > high)\\n    {\\n        struct TreeNode ** out = (struct TreeNode **)malloc(sizeof(struct TreeNode*));\\n        *size = 1;\\n        out[0] = NULL;\\n        return out;\\n    }\\n    struct TreeNode ** out = (struct TreeNode **)malloc(2000*sizeof(struct TreeNode*));\\n    *size = 0;\\n    for(int i=low; i<=high; i++)\\n    {\\n        int leftSize = 0, rightSize = 0;\\n        struct TreeNode ** leftNodes = creatTrees(low, i-1, &leftSize);\\n        struct TreeNode ** rightNodes = creatTrees(i+1, high, &rightSize);\\n        for(int k=0; k<leftSize; k++)\\n            for(int j=0; j<rightSize; j++)\\n            {\\n                out[*size] = (struct TreeNode *)malloc(sizeof(struct TreeNode));\\n                out[*size]->val = i;\\n                out[*size]->left = leftNodes[k];\\n                out[*size]->right = rightNodes[j];\\n                *size += 1;\\n            }\\n    }\\n    return out;\\n}\\nstruct TreeNode** generateTrees(int n, int* returnSize){\\n    return creatTrees(1, n, returnSize);\\n}\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nstruct TreeNode** creatTrees(int low, int high, int *size)\\n{ \\n    if(low > high)\\n    {\\n        struct TreeNode ** out = (struct TreeNode **)malloc(sizeof(struct TreeNode*));\\n        *size = 1;\\n        out[0] = NULL;\\n        return out;\\n    }\\n    struct TreeNode ** out = (struct TreeNode **)malloc(2000*sizeof(struct TreeNode*));\\n    *size = 0;\\n    for(int i=low; i<=high; i++)\\n    {\\n        int leftSize = 0, rightSize = 0;\\n        struct TreeNode ** leftNodes = creatTrees(low, i-1, &leftSize);\\n        struct TreeNode ** rightNodes = creatTrees(i+1, high, &rightSize);\\n        for(int k=0; k<leftSize; k++)\\n            for(int j=0; j<rightSize; j++)\\n            {\\n                out[*size] = (struct TreeNode *)malloc(sizeof(struct TreeNode));\\n                out[*size]->val = i;\\n                out[*size]->left = leftNodes[k];\\n                out[*size]->right = rightNodes[j];\\n                *size += 1;\\n            }\\n    }\\n    return out;\\n}\\nstruct TreeNode** generateTrees(int n, int* returnSize){\\n    return creatTrees(1, n, returnSize);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1440845,
                "title": "simple-solution-with-detailed-explanation-and-comments",
                "content": "**Intuition:**\\nThe idea is to generate trees in inorder fashion , making each number in the range[1.n] as the root one by one and recursively obtaining its left and right subtrees ensuring that BST properties doesnt gets violated.\\nIf the Root Value is i\\n* Left subtree will contain values in range[start,i-1]\\n* right subrees will contain valyes in range[i+1,end]\\n\\nfor a particular root value \\'i\\' there are many left and right subtrees possible , so generate all of them and combine all of them and appending to our final result vector of all BSTs.\\n\\n**Base Case:**\\nThere are two base cases:\\n*  If start exceeds end; start>end, there is no tree possible, so instead of returning empty list (which will cause unexpected loop termination in the parent recursive call) , we will append null to the result list and return result.\\n*  if start=end, there is only one number in range i.e. start, so only one Tree possible rooted at start and left and right subtree as null, so, make this tree and add to result list and return.\\n\\nHere is my code:\\n```\\n\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return helper(1,n);//To generate all the BST possible in range(1,n) \\n    }\\n    vector<TreeNode*> helper(int start, int end){\\n        vector<TreeNode*> allTrees;//vector to store all bsts\\n        if(start>end)//base case\\n        {\\n            allTrees.push_back(NULL); //No Tree is possible if start>end so push none and return\\n            return allTrees;\\n        }\\n        if(start==end) // Base case 2 \\n        {\\n            TreeNode* root=new TreeNode(start); // if there is only 1 number in range i.e. start=end then make th\\n                                                // only number as root node and return\\n            allTrees.push_back(root);\\n            return allTrees;\\n            \\n        }\\n        // making all numbers from start to end as root one by one and generating their left and right subtrees according to BST rules\\n        for(int CurRootVal=start;CurRootVal<=end;CurRootVal++)\\n        {\\n        vector<TreeNode*>allLeftSubtrees=helper(start,CurRootVal-1); // generated Leftsubtrees contains values in range[start,currootvalue-1]\\n            vector<TreeNode*>allRightSubtrees=helper(CurRootVal+1,end); //generated rightsubtrees contains values in range[currootvalue+1,end]\\n            for(auto leftsubtree : allLeftSubtrees) // traversing each of the left subtrees generated\\n            {\\n                for(auto rightsubtree : allRightSubtrees) // for each left subtree, all the right subtrees generated are traversed and combined as below \\n                {\\n                    TreeNode* curRoot=new TreeNode(CurRootVal); // making root node of value curRootVal\\n                    curRoot->left=leftsubtree; // adding leftsubtree to the left child of current root\\n                    curRoot->right=rightsubtree;// adding right subtree to the right child of current root\\n                    allTrees.push_back(curRoot);// appending the tree generated to the result alltrees\\n                }\\n            }\\n            \\n        }\\n        return allTrees;\\n        \\n    }\\n};\\n```\\n\\nComment down in case of any queries.\\n\\n**Please upvote if it helps you :)**",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Tree",
                    "Recursion"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return helper(1,n);//To generate all the BST possible in range(1,n) \\n    }\\n    vector<TreeNode*> helper(int start, int end){\\n        vector<TreeNode*> allTrees;//vector to store all bsts\\n        if(start>end)//base case\\n        {\\n            allTrees.push_back(NULL); //No Tree is possible if start>end so push none and return\\n            return allTrees;\\n        }\\n        if(start==end) // Base case 2 \\n        {\\n            TreeNode* root=new TreeNode(start); // if there is only 1 number in range i.e. start=end then make th\\n                                                // only number as root node and return\\n            allTrees.push_back(root);\\n            return allTrees;\\n            \\n        }\\n        // making all numbers from start to end as root one by one and generating their left and right subtrees according to BST rules\\n        for(int CurRootVal=start;CurRootVal<=end;CurRootVal++)\\n        {\\n        vector<TreeNode*>allLeftSubtrees=helper(start,CurRootVal-1); // generated Leftsubtrees contains values in range[start,currootvalue-1]\\n            vector<TreeNode*>allRightSubtrees=helper(CurRootVal+1,end); //generated rightsubtrees contains values in range[currootvalue+1,end]\\n            for(auto leftsubtree : allLeftSubtrees) // traversing each of the left subtrees generated\\n            {\\n                for(auto rightsubtree : allRightSubtrees) // for each left subtree, all the right subtrees generated are traversed and combined as below \\n                {\\n                    TreeNode* curRoot=new TreeNode(CurRootVal); // making root node of value curRootVal\\n                    curRoot->left=leftsubtree; // adding leftsubtree to the left child of current root\\n                    curRoot->right=rightsubtree;// adding right subtree to the right child of current root\\n                    allTrees.push_back(curRoot);// appending the tree generated to the result alltrees\\n                }\\n            }\\n            \\n        }\\n        return allTrees;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1325098,
                "title": "c-easy-to-understand-recursive-approach-with-comments",
                "content": "Hi,\\n\\n**If this helps please do UPVOTE or if you have any query or doubt COMMENT it down.**\\n```\\nclass Solution {\\npublic:\\n    \\n\\t// function that takes sub parameters left and right value\\n    vector<TreeNode*> solve(int l,int r){\\n        vector<TreeNode*> ans;\\n        \\n\\t\\t// if l>r just return null\\n        if(l>r){\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n\\t\\t// if l==r  then we have only 1 node with value l or r\\n        if(l==r){\\n            TreeNode* temp=new TreeNode(l);\\n            ans.push_back(temp);\\n            return ans;\\n        }\\n        \\n\\t\\t// else for every k between l to r append subtree of values left to it to left child and subtrees of values right to it to right child of k\\n        vector<TreeNode*> ansl; // stores pointer to left subtree\\n        vector<TreeNode*> ansr; // stores pointer to right subtree\\n\\n        for(int k=l;k<=r;k++){\\n            ansl = solve(l,k-1);\\n            ansr = solve(k+1,r);\\n            if(ansl.size()==0) ansl.push_back(NULL);\\n            if(ansr.size()==0) ansr.push_back(NULL);\\n\\t\\t\\t\\n\\t\\t\\t// make all combinations with left current and right\\n            for(int i=0;i<ansl.size();i++){\\n                for(int j=0;j<ansr.size();j++){\\n                    TreeNode* temp = new TreeNode(k,ansl[i],ansr[j]);\\n                    ans.push_back(temp);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return solve(1,n);\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Tree",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n\\t// function that takes sub parameters left and right value\\n    vector<TreeNode*> solve(int l,int r){\\n        vector<TreeNode*> ans;\\n        \\n\\t\\t// if l>r just return null\\n        if(l>r){\\n            ans.push_back(NULL);\\n            return ans;\\n        }\\n\\t\\t// if l==r  then we have only 1 node with value l or r\\n        if(l==r){\\n            TreeNode* temp=new TreeNode(l);\\n            ans.push_back(temp);\\n            return ans;\\n        }\\n        \\n\\t\\t// else for every k between l to r append subtree of values left to it to left child and subtrees of values right to it to right child of k\\n        vector<TreeNode*> ansl; // stores pointer to left subtree\\n        vector<TreeNode*> ansr; // stores pointer to right subtree\\n\\n        for(int k=l;k<=r;k++){\\n            ansl = solve(l,k-1);\\n            ansr = solve(k+1,r);\\n            if(ansl.size()==0) ansl.push_back(NULL);\\n            if(ansr.size()==0) ansr.push_back(NULL);\\n\\t\\t\\t\\n\\t\\t\\t// make all combinations with left current and right\\n            for(int i=0;i<ansl.size();i++){\\n                for(int j=0;j<ansr.size();j++){\\n                    TreeNode* temp = new TreeNode(k,ansl[i],ansr[j]);\\n                    ans.push_back(temp);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return solve(1,n);\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1214387,
                "title": "python-array-recursion",
                "content": "```\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        def f(arr):\\n\\t\\t    #Base conditions\\n            if len(arr) < 1:\\n                return [None]\\n            if len(arr) == 1:\\n                return [TreeNode(arr[0])]\\n            \\n            ret = []\\n            for i,item in enumerate(arr):\\n                leftTrees = f(arr[0:i])\\n                rightTrees = f(arr[i+1:])\\n                \\n                for lt in leftTrees:\\n                    for rt in rightTrees:\\n                        r = TreeNode(arr[i])\\n                        r.left = lt\\n                        r.right = rt\\n                        ret.append(r)\\n            return ret\\n        \\n        return f(list(range(1,n+1)))\\n```",
                "solutionTags": [
                    "Python",
                    "Array"
                ],
                "code": "```\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        def f(arr):\\n\\t\\t    #Base conditions\\n            if len(arr) < 1:\\n                return [None]\\n            if len(arr) == 1:\\n                return [TreeNode(arr[0])]\\n            \\n            ret = []\\n            for i,item in enumerate(arr):\\n                leftTrees = f(arr[0:i])\\n                rightTrees = f(arr[i+1:])\\n                \\n                for lt in leftTrees:\\n                    for rt in rightTrees:\\n                        r = TreeNode(arr[i])\\n                        r.left = lt\\n                        r.right = rt\\n                        ret.append(r)\\n            return ret\\n        \\n        return f(list(range(1,n+1)))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1168576,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        \\n        List<TreeNode> ans = constructTrees(1, n);\\n        return ans;\\n        \\n    }\\n    public List<TreeNode> constructTrees(int start, int end){\\n        List<TreeNode> list = new ArrayList<>();\\n        //  if start > end   then subtree will be empty so returning NULL in the list\\n        if (start > end) \\n        { \\n            list.add(null); \\n            return list; \\n        } \\n    \\n        // iterate all values from start to end for constructing left and right subtree using recursion\\n        for (int i = start; i <= end; i++) \\n        { \\n            // constructing left subtree \\n            List<TreeNode> leftSubtree  = constructTrees(start, i - 1); \\n    \\n            // constructing right subtree\\n            List<TreeNode> rightSubtree = constructTrees(i + 1, end); \\n    \\n            // now loop through all left and right subtrees and connecting them to ith root\\n            for (int j = 0; j < leftSubtree.size(); j++) \\n            { \\n                TreeNode left = leftSubtree.get(j); \\n                for (int k = 0; k < rightSubtree.size(); k++) \\n                { \\n                    TreeNode right = rightSubtree.get(k); \\n                    TreeNode node = new TreeNode(i);        // making value i as root \\n                    node.left = left;                       // connect left subtree \\n                    node.right = right;                     // connect right subtree \\n                    list.add(node);                         // add this tree to list \\n                } \\n            } \\n        } \\n        return list; \\n    }\\n}\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        \\n        List<TreeNode> ans = constructTrees(1, n);\\n        return ans;\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 864407,
                "title": "bottom-up-dp-solution-20ms-c",
                "content": "```\\n   TreeNode* cloneAndAddX(TreeNode* root,int x) {\\n        if(root) {\\n            TreeNode* node = new TreeNode(root->val+x);\\n            node->left = cloneAndAddX(root->left,x);\\n            node->right = cloneAndAddX(root->right,x);\\n            return node;\\n        }\\n        return nullptr;\\n    }\\n\\t\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) return {};\\n        vector<vector<TreeNode*>> dp(n+1);\\n        dp[0].push_back(nullptr);\\n        dp[1].push_back(new TreeNode(1));\\n        for(int i=2;i<=n;i++) {\\n            for(int j=1;j<=i;j++) {\\n                int leftSize = j-1;\\n                int rightSize = i-j;\\n                for(TreeNode* l: dp[leftSize]) {\\n                    for(TreeNode* r: dp[rightSize]) {\\n                        TreeNode* node = new TreeNode(j);\\n                        node->left = cloneAndAddX(l,0);\\n                        node->right = cloneAndAddX(r,j);\\n                        dp[i].push_back(node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n   TreeNode* cloneAndAddX(TreeNode* root,int x) {\\n        if(root) {\\n            TreeNode* node = new TreeNode(root->val+x);\\n            node->left = cloneAndAddX(root->left,x);\\n            node->right = cloneAndAddX(root->right,x);\\n            return node;\\n        }\\n        return nullptr;\\n    }\\n\\t\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) return {};\\n        vector<vector<TreeNode*>> dp(n+1);\\n        dp[0].push_back(nullptr);\\n        dp[1].push_back(new TreeNode(1));\\n        for(int i=2;i<=n;i++) {\\n            for(int j=1;j<=i;j++) {\\n                int leftSize = j-1;\\n                int rightSize = i-j;\\n                for(TreeNode* l: dp[leftSize]) {\\n                    for(TreeNode* r: dp[rightSize]) {\\n                        TreeNode* node = new TreeNode(j);\\n                        node->left = cloneAndAddX(l,0);\\n                        node->right = cloneAndAddX(r,j);\\n                        dp[i].push_back(node);\\n                    }\\n                }\\n            }\\n        }\\n        return dp[n];\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 780397,
                "title": "c-recursion-and-easy-to-understand",
                "content": "Idea : You have to calculate all the binary search trees from 1 to n. Therefore, for a number in the middle say i, the left subtree would be 1 to i-1 and right subtree would be i+1 to n. So it divides into two sub problems. Solve it for left and right subtree and then iterate through all the combinations of the left and right subtree assigning the left pick from left subtree as the left child and right pick from right subtree as the right child. Return the resulting vecotr of combinations. \\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> genTrees(int start, int end){\\n        vector<TreeNode*>res;\\n        if(start>end){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*>leftTree = genTrees(start, i-1);\\n            vector<TreeNode*>rightTree = genTrees(i+1, end);\\n            for(auto leftNode:leftTree){\\n                for(auto rightNode:rightTree){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = leftNode;\\n                    root->right = rightNode;\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==0)return {};\\n        return genTrees(1,n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> genTrees(int start, int end){\\n        vector<TreeNode*>res;\\n        if(start>end){\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*>leftTree = genTrees(start, i-1);\\n            vector<TreeNode*>rightTree = genTrees(i+1, end);\\n            for(auto leftNode:leftTree){\\n                for(auto rightNode:rightTree){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = leftNode;\\n                    root->right = rightNode;\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==0)return {};\\n        return genTrees(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 474776,
                "title": "go-simple-solution",
                "content": "```go\\nfunc generateTrees(n int) []*TreeNode {\\n\\tif n <= 0 {\\n\\t\\treturn []*TreeNode{}\\n\\t}\\n\\treturn helper(1, n)\\n}\\n\\nfunc helper(min, max int) []*TreeNode {\\n\\tretSlice := []*TreeNode{}\\n\\tfor i := min; i <= max; i++ {\\n\\t\\tleft := helper(min, i-1)\\n\\t\\tright := helper(i+1, max)\\n\\t\\tfor _, l := range left {\\n\\t\\t\\tfor _, r := range right {\\n\\t\\t\\t\\tretSlice = append(retSlice, &TreeNode{\\n\\t\\t\\t\\t\\tVal:   i,\\n\\t\\t\\t\\t\\tLeft:  l,\\n\\t\\t\\t\\t\\tRight: r,\\n\\t\\t\\t\\t})\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// if empty, we need a nil node\\n\\tif len(retSlice) == 0 {\\n\\t\\tretSlice = append(retSlice, nil)\\n\\t}\\n\\treturn retSlice\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc generateTrees(n int) []*TreeNode {\\n\\tif n <= 0 {\\n\\t\\treturn []*TreeNode{}\\n\\t}\\n\\treturn helper(1, n)\\n}\\n\\nfunc helper(min, max int) []*TreeNode {\\n\\tretSlice := []*TreeNode{}\\n\\tfor i := min; i <= max; i++ {\\n\\t\\tleft := helper(min, i-1)\\n\\t\\tright := helper(i+1, max)\\n\\t\\tfor _, l := range left {\\n\\t\\t\\tfor _, r := range right {\\n\\t\\t\\t\\tretSlice = append(retSlice, &TreeNode{\\n\\t\\t\\t\\t\\tVal:   i,\\n\\t\\t\\t\\t\\tLeft:  l,\\n\\t\\t\\t\\t\\tRight: r,\\n\\t\\t\\t\\t})\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\t// if empty, we need a nil node\\n\\tif len(retSlice) == 0 {\\n\\t\\tretSlice = append(retSlice, nil)\\n\\t}\\n\\treturn retSlice\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 285636,
                "title": "c-dfs",
                "content": "```\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>();\\n        return DFS(1, n);\\n    }\\n\\n    private IList<TreeNode> DFS(int start, int end) {\\n        if (start > end) {\\n            return new List<TreeNode>() { null };\\n        }\\n        var result = new List<TreeNode>();\\n        for (int i = start; i <= end; i++) {\\n            var leftList = DFS(start, i - 1);\\n            var rightList = DFS(i + 1, end);\\n\\n            foreach (var left in leftList) {\\n                foreach (var right in rightList) {\\n                    var root = new TreeNode(i);\\n                    root.left = left;\\n                    root.right = right;\\n                    result.Add(root);\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>();\\n        return DFS(1, n);\\n    }\\n\\n    private IList<TreeNode> DFS(int start, int end) {\\n        if (start > end) {\\n            return new List<TreeNode>() { null };\\n        }\\n        var result = new List<TreeNode>();\\n        for (int i = start; i <= end; i++) {\\n            var leftList = DFS(start, i - 1);\\n            var rightList = DFS(i + 1, end);\\n\\n            foreach (var left in leftList) {\\n                foreach (var right in rightList) {\\n                    var root = new TreeNode(i);\\n                    root.left = left;\\n                    root.right = right;\\n                    result.Add(root);\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 243362,
                "title": "java-dp-runtime-1-ms-faster-than-100-00",
                "content": "The origin DP.Not use backup,nout use iteration\\uFF0Cso can be optimize more quickly.\\n```\\nF(1...n) =f(2,n)+f(1,1)*f(3,n)+...+f(1,i-1)*f(i+1,n)+...+f(1,n-1).\\n```\\nExplanation: n node,\\ncan be represent root 1,the left is null,the right can be represent (2,n) child problem,\\nplus  root 2,the left is (1,1) child problem ,the right can be represent (3,n) child problem,\\nplus root 3,the left is (1,2) child problem ,the right can be represent (4,n) child problem,...\\nplus root i,the left is (1,i-1) child problem ,the right can be represent (i+1,n) child problem, and so on.\\n```\\n     public List<TreeNode> generateTrees(int n) {\\n       if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        List<TreeNode> results = generateTrees(1, n);\\n        return results;\\n    }\\n\\n    private List<TreeNode> generateTrees(int begin, int end) {\\n        List<TreeNode> results = new ArrayList<>();\\n        if (begin > end) {\\n            results.add(null);\\n            return results;\\n        }\\n        if (begin == end) {\\n            results.add(new TreeNode(begin));\\n            return results;\\n        }\\n\\n        for (int i = begin; i <= end; i++) {\\n            List<TreeNode> lstLeft = generateTrees(begin, i - 1);\\n            List<TreeNode> lstRight = generateTrees(i + 1, end);\\n\\n            for (int j = 0; j < lstLeft.size(); j++) {\\n                TreeNode lNode = lstLeft.get(j);\\n                for (int k = 0; k < lstRight.size(); k++) {\\n                    TreeNode rNode = lstRight.get(k);\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = lNode;\\n                    root.right = rNode;\\n                    results.add(root);\\n                }\\n            }\\n        }\\n        return results;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nF(1...n) =f(2,n)+f(1,1)*f(3,n)+...+f(1,i-1)*f(i+1,n)+...+f(1,n-1).\\n```\n```\\n     public List<TreeNode> generateTrees(int n) {\\n       if (n == 0) {\\n            return new ArrayList<>();\\n        }\\n        List<TreeNode> results = generateTrees(1, n);\\n        return results;\\n    }\\n\\n    private List<TreeNode> generateTrees(int begin, int end) {\\n        List<TreeNode> results = new ArrayList<>();\\n        if (begin > end) {\\n            results.add(null);\\n            return results;\\n        }\\n        if (begin == end) {\\n            results.add(new TreeNode(begin));\\n            return results;\\n        }\\n\\n        for (int i = begin; i <= end; i++) {\\n            List<TreeNode> lstLeft = generateTrees(begin, i - 1);\\n            List<TreeNode> lstRight = generateTrees(i + 1, end);\\n\\n            for (int j = 0; j < lstLeft.size(); j++) {\\n                TreeNode lNode = lstLeft.get(j);\\n                for (int k = 0; k < lstRight.size(); k++) {\\n                    TreeNode rNode = lstRight.get(k);\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = lNode;\\n                    root.right = rNode;\\n                    results.add(root);\\n                }\\n            }\\n        }\\n        return results;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 141443,
                "title": "a-simple-python-dp-solution",
                "content": "```python\\nclass Solution(object):\\n    def generateTrees(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: List[TreeNode]\\n        \"\"\"\\n        if n == 0:\\n            return []\\n        return self.gen_helper({}, 1, n)\\n        \\n    def gen_helper(self, memo, start, end):\\n        if start > end:\\n            return [None]\\n        if (start, end) in memo:\\n            return memo[(start, end)]\\n        memo[(start, end)] = []\\n        for root_val in xrange(start, end+1):\\n            for left_child in self.gen_helper(memo, start, root_val-1):\\n                for right_child in self.gen_helper(memo, root_val+1, end):\\n                    root = TreeNode(root_val)\\n                    root.left, root.right = left_child, right_child\\n                    memo[(start, end)].append(root)\\n        return memo[(start, end)]\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def generateTrees(self, n):\\n        \"\"\"\\n        :type n: int\\n        :rtype: List[TreeNode]\\n        \"\"\"\\n        if n == 0:\\n            return []\\n        return self.gen_helper({}, 1, n)\\n        \\n    def gen_helper(self, memo, start, end):\\n        if start > end:\\n            return [None]\\n        if (start, end) in memo:\\n            return memo[(start, end)]\\n        memo[(start, end)] = []\\n        for root_val in xrange(start, end+1):\\n            for left_child in self.gen_helper(memo, start, root_val-1):\\n                for right_child in self.gen_helper(memo, root_val+1, end):\\n                    root = TreeNode(root_val)\\n                    root.left, root.right = left_child, right_child\\n                    memo[(start, end)].append(root)\\n        return memo[(start, end)]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31498,
                "title": "short-c-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) return {};\\n        return DFS(1, n);\\n    }\\n    \\n    vector<TreeNode*> DFS(int l, int r){\\n        vector<TreeNode*>res;\\n        if(l > r) return {NULL};\\n        for(int i = l; i <= r; i++){\\n            auto left = DFS(l, i - 1);\\n            auto right = DFS(i + 1, r);\\n            for(auto x: left)\\n                for(auto y: right){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = x;\\n                    root->right = y;\\n                    res.push_back(root);\\n                }    \\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0) return {};\\n        return DFS(1, n);\\n    }\\n    \\n    vector<TreeNode*> DFS(int l, int r){\\n        vector<TreeNode*>res;\\n        if(l > r) return {NULL};\\n        for(int i = l; i <= r; i++){\\n            auto left = DFS(l, i - 1);\\n            auto right = DFS(i + 1, r);\\n            for(auto x: left)\\n                for(auto y: right){\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = x;\\n                    root->right = y;\\n                    res.push_back(root);\\n                }    \\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31553,
                "title": "very-simple-python-recursive-solution",
                "content": "```\\nclass Solution(object):\\n    def generate(self, i, j):\\n        l = []\\n        if i > j: l.append(None)\\n        for k in xrange(i, j+1):\\n            left = self.generate(i, k-1)\\n            right = self.generate(k+1, j)\\n            for nodeleft in left:\\n                for noderight in right:\\n                    root = TreeNode(k)\\n                    root.left = nodeleft\\n                    root.right = noderight\\n                    l.append(root)\\n        return l\\n    \\n    def generateTrees(self, n):\\n        if n == 0: return []\\n        return self.generate(1, n)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def generate(self, i, j):\\n        l = []\\n        if i > j: l.append(None)\\n        for k in xrange(i, j+1):\\n            left = self.generate(i, k-1)\\n            right = self.generate(k+1, j)\\n            for nodeleft in left:\\n                for noderight in right:\\n                    root = TreeNode(k)\\n                    root.left = nodeleft\\n                    root.right = noderight\\n                    l.append(root)\\n        return l\\n    \\n    def generateTrees(self, n):\\n        if n == 0: return []\\n        return self.generate(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31555,
                "title": "recursive-c-15-lines",
                "content": "``` \\nclass Solution {\\npublic:\\n   std::vector<TreeNode*> generateTrees(int n2, int n1=1) {\\n      std::vector<TreeNode*> TreeHeads;\\n      for(int i=n1; i<=n2; ++i) {\\n         auto LeftTrees = i==n1 ? std::vector<TreeNode*>{nullptr} : generateTrees(i-1, n1);\\n         auto RightTrees = i==n2 ? std::vector<TreeNode*>{nullptr} : generateTrees(n2, i+1);\\n         for( auto pleft : LeftTrees )\\n            for( auto pright : RightTrees ) {\\n               auto head = new TreeNode(i);\\n               head->left = pleft; head->right = pright;\\n               TreeHeads.push_back(head);\\n            }\\n      }\\n      return TreeHeads;\\n   }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "``` \\nclass Solution {\\npublic:\\n   std::vector<TreeNode*> generateTrees(int n2, int n1=1) {\\n      std::vector<TreeNode*> TreeHeads;\\n      for(int i=n1; i<=n2; ++i) {\\n         auto LeftTrees = i==n1 ? std::vector<TreeNode*>{nullptr} : generateTrees(i-1, n1);\\n         auto RightTrees = i==n2 ? std::vector<TreeNode*>{nullptr} : generateTrees(n2, i+1);\\n         for( auto pleft : LeftTrees )\\n            for( auto pright : RightTrees ) {\\n               auto head = new TreeNode(i);\\n               head->left = pleft; head->right = pright;\\n               TreeHeads.push_back(head);\\n            }\\n      }\\n      return TreeHeads;\\n   }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31568,
                "title": "share-my-dp-c-solution-uff0cbeats-91-82-uff0ceasy-understand",
                "content": "    void genTree(TreeNode* root, TreeNode* left, TreeNode* right,int &num){\\n        if(left){\\n            root->left = new TreeNode(left->val);\\n            genTree(root->left,left->left,left->right,num);\\n        }\\n        root->val = ++ num;\\n        if(right){\\n            root->right = new TreeNode(right->val);\\n            genTree(root->right,right->left,right->right,num);\\n        }\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<vector<TreeNode*> > res(n + 1);\\n        if(!n) return res[0];\\n        res[0] = {NULL};\\n        res[1] = {new TreeNode(1)};\\n        for(int i = 2;i <= n; ++ i){\\n            for(int j = 1;j <= i; ++ j){\\n                for(int x = 0; x < res[j - 1].size(); ++ x)\\n                    for(int y = 0; y < res[i - j].size(); ++ y)\\n                    {\\n                        int num = 0;\\n                        TreeNode *tmp = new TreeNode(j);\\n                        genTree(tmp,res[j - 1][x],res[i - j][y],num);\\n                        res[i].push_back(tmp);\\n                    }\\n            }\\n        }\\n        return res[n];\\n    }",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming"
                ],
                "code": "    void genTree(TreeNode* root, TreeNode* left, TreeNode* right,int &num){\\n        if(left){\\n            root->left = new TreeNode(left->val);\\n            genTree(root->left,left->left,left->right,num);\\n        }\\n        root->val = ++ num;\\n        if(right){\\n            root->right = new TreeNode(right->val);\\n            genTree(root->right,right->left,right->right,num);\\n        }\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<vector<TreeNode*> > res(n + 1);\\n        if(!n) return res[0];\\n        res[0] = {NULL};\\n        res[1] = {new TreeNode(1)};\\n        for(int i = 2;i <= n; ++ i){\\n            for(int j = 1;j <= i; ++ j){\\n                for(int x = 0; x < res[j - 1].size(); ++ x)\\n                    for(int y = 0; y < res[i - j].size(); ++ y)\\n                    {\\n                        int num = 0;\\n                        TreeNode *tmp = new TreeNode(j);\\n                        genTree(tmp,res[j - 1][x],res[i - j][y],num);\\n                        res[i].push_back(tmp);\\n                    }\\n            }\\n        }\\n        return res[n];\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 31544,
                "title": "the-trap-i-meet-with-c",
                "content": "dURING my implementation.\\n\\nI make one mistake as follows:\\n\\n        if(s>e)  return NULL;\\n\\n        should be\\n\\n        if(s>e)  return { NULL };\\n\\n\\nAs we will loop left and right result to combine with the root node.\\n\\nHere is the AC implementation\\n\\n    class Solution {\\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            if(n==0)  return vector<TreeNode*>{};\\n            return help(1, n);\\n        }\\n        \\n        vector<TreeNode*> help(int s, int e){\\n            vector<TreeNode*> result;\\n            if(s>e)  return {NULL};\\n            for(int i=s; i<=e; i++){\\n                vector<TreeNode*> left=help(s, i-1);\\n                vector<TreeNode*> right=help(i+1, e);\\n                for(auto l:left){\\n                    for(auto r:right){\\n                        TreeNode* root=new TreeNode(i);\\n                        root->left=l;\\n                        root->right=r;\\n                        result.push_back(root);\\n                    }\\n                }\\n            }\\n            return result;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            if(n==0)  return vector<TreeNode*>{}",
                "codeTag": "Java"
            },
            {
                "id": 31578,
                "title": "java-2ms-solution-beats-92",
                "content": "    /**\\n     * Definition for a binary tree node.\\n     * public class TreeNode {\\n     *     int val;\\n     *     TreeNode left;\\n     *     TreeNode right;\\n     *     TreeNode(int x) { val = x; }\\n     * }\\n     */\\n    public class Solution {\\n        public List<TreeNode> generateTrees(int n) {\\n            if(n==0) return new ArrayList<TreeNode>();\\n            return generateTress(1, n);\\n        }\\n        \\n        private List<TreeNode> generateTress(int start, int end){\\n            if(start>end) {\\n                List<TreeNode> list = new ArrayList<TreeNode>();\\n                list.add(null);\\n                return list;\\n            }\\n            if(start==end) {\\n                List<TreeNode> list = new ArrayList<TreeNode>();\\n                list.add(new TreeNode(start)); return list;\\n            }\\n            List<TreeNode> roots = new ArrayList<TreeNode>();\\n            for(int i=start;i<=end;i++){\\n                List<TreeNode> leftTrees = generateTress(start, i-1);\\n                List<TreeNode> rightTrees = generateTress(i+1, end);\\n                for(int j=0;j<leftTrees.size();j++){\\n                    for(int k=0;k<rightTrees.size();k++){\\n                        TreeNode root = new TreeNode(i);\\n                        root.left = leftTrees.get(j);\\n                        root.right = rightTrees.get(k);\\n                        roots.add(root);\\n                    }\\n                }\\n                \\n            }\\n            return roots;\\n        }\\n    }",
                "solutionTags": [],
                "code": "class Solution {\\n        public List<TreeNode> generateTrees(int n) {\\n            if(n==0) return new ArrayList<TreeNode>();\\n            return generateTress(1, n);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 31640,
                "title": "accepted-iterative-java-solution",
                "content": "The idea is to generate binary trees for every number from 1 and store them in map. And for every next N get roots from 1 to N and just link left and right subtrees generated previously. All values in right subtree should be encreased by the root value.\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        Map<Integer, List<TreeNode>> lists = new HashMap<Integer, List<TreeNode>>();\\n        \\n        List<TreeNode> list = new LinkedList<TreeNode>();\\n        list.add(null);\\n        if (n==0) return list;\\n        lists.put(0, list);\\n        \\n        list = new LinkedList<TreeNode>();\\n        TreeNode root = new TreeNode(1);\\n        list.add(root);\\n        lists.put(1, list);\\n        \\n        for (int i=2; i<=n; i++) {\\n        \\tlist = new LinkedList<TreeNode>();\\n        \\tfor (int j=1; j<=i; j++) {\\n        \\t\\tfor (TreeNode left:lists.get(j-1)) {\\n        \\t\\t\\tfor (TreeNode right:lists.get(i-j)) {\\n        \\t\\t\\t\\troot = new TreeNode(j);\\n            \\t\\t\\troot.left = left;\\n        \\t\\t\\t\\troot.right = greaterCopy(right, j);\\n        \\t\\t\\t\\tlist.add(root);\\n        \\t\\t\\t}\\n        \\t\\t}\\n        \\t}\\n        \\tlists.put(i, list);\\n        }\\n        return list;\\n    }\\n\\t\\n\\tprivate TreeNode greaterCopy(TreeNode node, int add) {\\n\\t\\tif (node == null) return null;\\n\\t\\tTreeNode copy = new TreeNode(node.val + add);\\n\\t\\tcopy.left = greaterCopy(node.left, add);\\n\\t\\tcopy.right = greaterCopy(node.right, add);\\n\\t\\treturn copy;\\n\\t}",
                "solutionTags": [],
                "code": "The idea is to generate binary trees for every number from 1 and store them in map. And for every next N get roots from 1 to N and just link left and right subtrees generated previously. All values in right subtree should be encreased by the root value.\\n\\n    public List<TreeNode> generateTrees(int n) {\\n        Map<Integer, List<TreeNode>> lists = new HashMap<Integer, List<TreeNode>>();\\n        \\n        List<TreeNode> list = new LinkedList<TreeNode>();\\n        list.add(null);\\n        if (n==0) return list;\\n        lists.put(0, list);\\n        \\n        list = new LinkedList<TreeNode>();\\n        TreeNode root = new TreeNode(1);\\n        list.add(root);\\n        lists.put(1, list);\\n        \\n        for (int i=2; i<=n; i++) {\\n        \\tlist = new LinkedList<TreeNode>();\\n        \\tfor (int j=1; j<=i; j++) {\\n        \\t\\tfor (TreeNode left:lists.get(j-1)) {\\n        \\t\\t\\tfor (TreeNode right:lists.get(i-j)) {\\n        \\t\\t\\t\\troot = new TreeNode(j);\\n            \\t\\t\\troot.left = left;\\n        \\t\\t\\t\\troot.right = greaterCopy(right, j);\\n        \\t\\t\\t\\tlist.add(root);\\n        \\t\\t\\t}\\n        \\t\\t}\\n        \\t}\\n        \\tlists.put(i, list);\\n        }\\n        return list;\\n    }\\n\\t\\n\\tprivate TreeNode greaterCopy(TreeNode node, int add) {\\n\\t\\tif (node == null) return null;\\n\\t\\tTreeNode copy = new TreeNode(node.val + add);\\n\\t\\tcopy.left = greaterCopy(node.left, add);\\n\\t\\tcopy.right = greaterCopy(node.right, add);\\n\\t\\treturn copy;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 3867714,
                "title": "java-tabulation-solution-beats-99-6-explained-efficiently-upvote-if-it-helps",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe code aims to generate all unique Binary Search Trees (BSTs) that can be formed using the values from 1 to `n`. It uses a recursive approach along with memoization (dynamic programming) to avoid redundant calculations and optimize the solution.\\n\\n**Logic:**\\n1. The `generateTrees` function is the entry point of the algorithm, which takes an integer `n` as input representing the number of nodes in the desired BSTs.\\n\\n2. It initializes a 2D array `dp` of `List<TreeNode>` to store the results of subproblems related to generating BSTs from different ranges of values.\\n\\n3. It calls the `addBst` function with `low = 1` and `high = n` to generate all BSTs that can be formed using the values from 1 to `n`.\\n\\n4. The `addBst` function is the main recursive function used to generate all unique BSTs for a given range of values between `low` and `high`.\\n\\n5. It checks the base case: if `low > high`, it means there are no valid values to form a BST in this range. So, it returns a list containing a single `null` element, representing an empty tree.\\n\\n6. If the result for the current range (`low` to `high`) is already computed and cached in the `dp` array, it directly returns that result, avoiding redundant calculations.\\n\\n7. If the result is not cached, it proceeds to generate all possible unique BSTs for the range of values between `low` and `high`.\\n\\n8. It iterates from `low` to `high`, choosing each value `i` as the root node.\\n\\n9. For each value `i`, it recursively calls the `addBst` function to generate all possible left subtrees and right subtrees.\\n\\n10. It then combines each left subtree with each right subtree and creates a new BST with the current root value `i`.\\n\\n11. The generated BSTs are added to a list, representing all the unique BSTs that can be formed using the range of values between `low` and `high`.\\n\\n12. Finally, the list of BSTs is stored in the `dp` array at index `[low][high]` to cache the result for future use.\\n\\n**Memoization:**\\nThe dynamic programming (DP) aspect comes into play with memoization. The `dp` array is used to store the results of subproblems (i.e., unique BSTs) for different ranges of values. By storing and reusing the results of subproblems, the algorithm avoids redundant calculations and significantly improves the overall efficiency.\\n\\n**Storing in the `dp` array (`dp[i][j]`):**\\nThe `dp` array stores the list of all possible unique BSTs that can be formed from the range of values between `i` and `j`. The idea is to compute the BSTs for smaller ranges first and store the results in the `dp` array. Then, when larger ranges require the same subproblems, the algorithm can directly fetch the precomputed results from the `dp` array, reducing the number of recursive calls and redundant computations.\\n\\nIn summary, the code employs a recursive approach with memoization to generate all unique Binary Search Trees from the given range of values (1 to `n`). It stores the results of subproblems in the `dp` array, allowing it to efficiently build up the solutions for larger ranges of values by reusing the previously computed results. This approach significantly improves the efficiency of generating all possible unique BSTs for the given range of values.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the given algorithm is approximately exponential, specifically O((4^n) / \\u221An). As \\'n\\' increases, the number of recursive calls and the time spent inside each call grow rapidly, making the algorithm inefficient for larger \\'n\\' values.\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[][] dp = new List[n + 1][n + 1];\\n        return addBst(1, n, dp);\\n    }\\n\\n    public List<TreeNode> addBst(int low, int high, List<TreeNode>[][] dp) {\\n        if (low > high) {\\n            List<TreeNode> list = new ArrayList<>();\\n            list.add(null);\\n            return list;\\n        }\\n        if (dp[low][high] != null) {\\n            return dp[low][high];\\n        }\\n\\n        List<TreeNode> list = new ArrayList<>();\\n        for (int i = low; i <= high; i++) {\\n            List<TreeNode> leftSubtree = addBst(low, i - 1, dp);\\n            List<TreeNode> rightSubtree = addBst(i + 1, high, dp);\\n\\n            for (TreeNode left : leftSubtree) {\\n                for (TreeNode right : rightSubtree) {\\n                    list.add(new TreeNode(i, left, right));\\n                }\\n            }\\n        }\\n        return dp[low][high] = list;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Backtracking",
                    "Tree",
                    "Binary Search Tree",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode() {}\\n *     TreeNode(int val) { this.val = val; }\\n *     TreeNode(int val, TreeNode left, TreeNode right) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        List<TreeNode>[][] dp = new List[n + 1][n + 1];\\n        return addBst(1, n, dp);\\n    }\\n\\n    public List<TreeNode> addBst(int low, int high, List<TreeNode>[][] dp) {\\n        if (low > high) {\\n            List<TreeNode> list = new ArrayList<>();\\n            list.add(null);\\n            return list;\\n        }\\n        if (dp[low][high] != null) {\\n            return dp[low][high];\\n        }\\n\\n        List<TreeNode> list = new ArrayList<>();\\n        for (int i = low; i <= high; i++) {\\n            List<TreeNode> leftSubtree = addBst(low, i - 1, dp);\\n            List<TreeNode> rightSubtree = addBst(i + 1, high, dp);\\n\\n            for (TreeNode left : leftSubtree) {\\n                for (TreeNode right : rightSubtree) {\\n                    list.add(new TreeNode(i, left, right));\\n                }\\n            }\\n        }\\n        return dp[low][high] = list;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865312,
                "title": "c-solution-recursion-supereasy-explanation",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. The function `generateTrees` takes two parameters: `n`, which represents the number of nodes to be used for constructing BSTs, and `start`, which represents the starting value of the node range.\\n\\n2. The function uses recursion to generate all possible BSTs. The base case for the recursion is when n is less than start. In this case, the function returns a vector containing a single element with a value of `nullptr`. This is because there are no nodes available to construct a BST.\\n\\n3. If the base case is not triggered, the function proceeds with the generation of BSTs.\\n\\n4. The function initializes an empty vector `res` that will store the root nodes of all generated BSTs.\\n\\n5. It then iterates through a loop from `i = start` to `i = n`.\\n Inside the loop, the function performs a nested loop for `leftSubTree` and `rightSubTree` using recursive calls to generateTrees.\\n\\n6. The recursive call `generateTrees(i - 1, start)` generates all possible `left subtrees` of the current root node with values ranging from `start to i - 1`.\\n\\n7. The recursive call `generateTrees(n, i + 1)` generates all possible `right subtrees` of the current root node with values ranging from `i + 1 to n`.\\n\\n8. For each combination of left and right subtrees, the function creates a new BST by creating a new TreeNode with the value `i` as the root and setting the left and right subtrees accordingly.The newly created BST\\'s root node is added to the `res` vector.\\n\\n9. The process repeats for each i in the loop, generating different combinations of BSTs.\\n\\n10. After the loop is complete, the function returns the `res` vector, which contains pointers to the root nodes of all the generated BSTs.\\n\\n# Complexity\\n***Here  C(n) represents the nth Catalan number.***\\n- Time complexity: $$O(C(n))$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:$$O(n * C(n))$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n,int start=1) {\\n        \\n        //base case\\n        if(n<start){\\n            return {nullptr};\\n        }\\n\\n        vector<TreeNode*> res;\\n\\n        for(int i=start;i<=n;i++){\\n            for(auto leftSubTree:generateTrees(i-1,start)){\\n                for(auto rightSubTree:generateTrees(n,i+1)){\\n                    res.push_back(new TreeNode(i,leftSubTree,rightSubTree));\\n                }\\n\\n            }\\n        }\\n\\n        return res;\\n\\n    }\\n};\\n```\\n\\n![upvote lc.jpeg](https://assets.leetcode.com/users/images/4adc0ee4-e71a-45fd-bb4d-4fa397ebe276_1691227351.1175337.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Tree",
                    "Binary Search Tree",
                    "Recursion",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n,int start=1) {\\n        \\n        //base case\\n        if(n<start){\\n            return {nullptr};\\n        }\\n\\n        vector<TreeNode*> res;\\n\\n        for(int i=start;i<=n;i++){\\n            for(auto leftSubTree:generateTrees(i-1,start)){\\n                for(auto rightSubTree:generateTrees(n,i+1)){\\n                    res.push_back(new TreeNode(i,leftSubTree,rightSubTree));\\n                }\\n\\n            }\\n        }\\n\\n        return res;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3192975,
                "title": "best-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s) return {nullptr};                              \\n         for(int i=s; i<=n; i++) {                \\t                 \\n            for(auto left: generateTrees(i-1, s)) {                \\n                for(auto right: generateTrees(n, i+1))               \\n                    ans.push_back(new TreeNode(i, left, right));   \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n, int s = 1) {\\n        vector<TreeNode*> ans;\\n        if(n < s) return {nullptr};                              \\n         for(int i=s; i<=n; i++) {                \\t                 \\n            for(auto left: generateTrees(i-1, s)) {                \\n                for(auto right: generateTrees(n, i+1))               \\n                    ans.push_back(new TreeNode(i, left, right));   \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2318945,
                "title": "c-recursion-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> solve(int start,int end)\\n    {\\n        vector<TreeNode*> ans;\\n        if(start>end)\\n            return {NULL};\\n        if(start==end)\\n            return {new TreeNode(start)};\\n        for(int i=start;i<=end;i++)\\n        {\\n            vector<TreeNode*> left=solve(start,i-1);\\n            vector<TreeNode*> right=solve(i+1,end);\\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    ans.push_back(new TreeNode(i,l,r));\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) \\n    {\\n        vector<TreeNode*> res=solve(1,n);\\n        return res;\\n        \\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n    vector<TreeNode*> solve(int start,int end)\\n    {\\n        vector<TreeNode*> ans;\\n        if(start>end)\\n            return {NULL}",
                "codeTag": "Java"
            },
            {
                "id": 2195106,
                "title": "short-recursive-solution-c-recursion",
                "content": "```\\nclass Solution {\\npublic:    \\n    vector<TreeNode*> generateTrees(int end, int start = 1) {\\n        vector<TreeNode*> res;\\n        if(start > end) return { NULL };\\n        for(int i = start;i<=end;i++)\\n        {\\n            vector<TreeNode*> left = generateTrees(i-1,start);\\n            vector<TreeNode*> right = generateTrees(end,i+1);\\n            for(auto &l: left)\\n            {\\n                for(auto &r: right)\\n                {\\n                    TreeNode *q = new TreeNode(i,l,r);\\n                    res.push_back(q);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:    \\n    vector<TreeNode*> generateTrees(int end, int start = 1) {\\n        vector<TreeNode*> res;\\n        if(start > end) return { NULL };\\n        for(int i = start;i<=end;i++)\\n        {\\n            vector<TreeNode*> left = generateTrees(i-1,start);\\n            vector<TreeNode*> right = generateTrees(end,i+1);\\n            for(auto &l: left)\\n            {\\n                for(auto &r: right)\\n                {\\n                    TreeNode *q = new TreeNode(i,l,r);\\n                    res.push_back(q);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2061160,
                "title": "python-very-short-and-fast",
                "content": "Actually my code was 100 lines!\\nI gradually removed unneccesary parts\\nFrankly speaking I don\\'t even understand the code below myself :)\\n\\nPS: because **leetcode** checks iterable solutions by *for loop* (not strict equality) we can return a **generator object** instead of a list.\\n```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(vals):\\n            if not vals: yield None\\n            for i, n in enumerate(vals):\\n                for left in dp(vals[:i]):\\n                    for right in dp(vals[i + 1:]):\\n                        yield TreeNode(n, left, right)\\n\\n        return dp(list(range(1, n + 1))) \\n```\\nYou can also use 2 pointers to avoid O(n) list slices.\\n```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(l, r):\\n            if l > r: yield None\\n            for n in range(l, r+1):\\n                for left in dp(l, n-1):\\n                    for right in dp(n+1, r):\\n                        yield TreeNode(n, left, right)\\n\\n        return dp(1, n)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(vals):\\n            if not vals: yield None\\n            for i, n in enumerate(vals):\\n                for left in dp(vals[:i]):\\n                    for right in dp(vals[i + 1:]):\\n                        yield TreeNode(n, left, right)\\n\\n        return dp(list(range(1, n + 1))) \\n```\n```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dp(l, r):\\n            if l > r: yield None\\n            for n in range(l, r+1):\\n                for left in dp(l, n-1):\\n                    for right in dp(n+1, r):\\n                        yield TreeNode(n, left, right)\\n\\n        return dp(1, n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2002795,
                "title": "beat-simplicity-speed-and-space-python",
                "content": "```\\ndef generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        \\n\\t@functools.lru_cache(None)\\n\\tdef helper(left, right):\\n\\t\\tif left > right:\\n\\t\\t\\treturn [None]\\n\\t\\tres = []\\n\\t\\tfor val in range(left, right + 1):\\n\\t\\t\\tfor left_subtree in helper(left, val - 1):\\n\\t\\t\\t\\tfor right_subtree in helper(val + 1, right):\\n\\t\\t\\t\\t\\tres.append(TreeNode(val, left_subtree, right_subtree))\\n\\t\\treturn res\\n\\n\\treturn helper(1, n)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        \\n\\t@functools.lru_cache(None)\\n\\tdef helper(left, right):\\n\\t\\tif left > right:\\n\\t\\t\\treturn [None]\\n\\t\\tres = []\\n\\t\\tfor val in range(left, right + 1):\\n\\t\\t\\tfor left_subtree in helper(left, val - 1):\\n\\t\\t\\t\\tfor right_subtree in helper(val + 1, right):\\n\\t\\t\\t\\t\\tres.append(TreeNode(val, left_subtree, right_subtree))\\n\\t\\treturn res\\n\\n\\treturn helper(1, n)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1974739,
                "title": "easy-clean-from-bf-to-dp-w-memorization",
                "content": "**Method 1: Brute Force recursive solution**\\nThe concept is similar to #96, using divide and conquer to solve the problem.\\n\\n```cpp\\nclass Solution {\\n  vector<TreeNode*> generateSubTree(int l, int r) {\\n    vector<TreeNode*> res;\\n    if (l > r){\\n      res.push_back(nullptr);\\n      return res;\\n    }\\n\\n    for (int i = l; i <= r; i++) {\\n      vector<TreeNode*> leftTrees = generateSubTree(l, i-1);\\n      vector<TreeNode*> rightTrees = generateSubTree(i+1, r);\\n      \\n      for (TreeNode *left : leftTrees) {\\n        for (TreeNode *right : rightTrees) {\\n          TreeNode *node = new TreeNode(i);\\n          node->left = left;\\n          node->right = right;\\n          res.push_back(node);\\n        }\\n      }\\n    }\\n    return res;\\n  }\\npublic:\\n  vector<TreeNode*> generateTrees(int n) {\\n    return generateSubTree(1, n);\\n  }\\n};\\n```\\n\\n**Method 2 DP w/ Memorization**\\nFrom above, there are a lot of overlapping subproblems. Therefore, we do not need to recompute every time, using a map to store the previous result which already computed.\\n\\nThis method is very simple, just using left and right as our key, if we find the key existed in memo, just return the value.\\n\\n```cpp\\nclass Solution {\\n  unordered_map<string, vector<TreeNode*>> memo;\\n  vector<TreeNode*> generateSubTree(int l, int r) {\\n    vector<TreeNode*> res;\\n    if (l > r){\\n      res.push_back(nullptr);\\n      return res;\\n    }\\n    string key = to_string(l) + \"_\" + to_string(r);\\n    if (memo.find(key) != memo.end())\\n      return memo.find(key)->second;\\n\\n    for (int i = l; i <= r; i++) {\\n      vector<TreeNode*> leftTrees = generateSubTree(l, i-1);\\n      vector<TreeNode*> rightTrees = generateSubTree(i+1, r);\\n      \\n      for (TreeNode *left : leftTrees) {\\n        for (TreeNode *right : rightTrees) {\\n          TreeNode *node = new TreeNode(i);\\n          node->left = left;\\n          node->right = right;\\n          res.push_back(node);\\n        }\\n      }\\n    }\\n    memo[key] = res;\\n    return res;\\n  }\\npublic:\\n  vector<TreeNode*> generateTrees(int n) {\\n    return generateSubTree(1, n);\\n  }\\n};\\n```\\n\\nRuntime: 12 ms, faster than 96.51% of C++ online submissions for Unique Binary Search Trees II.\\nMemory Usage: 12.3 MB, less than 96.39% of C++ online submissions for Unique Binary Search Trees II.\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\n  vector<TreeNode*> generateSubTree(int l, int r) {\\n    vector<TreeNode*> res;\\n    if (l > r){\\n      res.push_back(nullptr);\\n      return res;\\n    }\\n\\n    for (int i = l; i <= r; i++) {\\n      vector<TreeNode*> leftTrees = generateSubTree(l, i-1);\\n      vector<TreeNode*> rightTrees = generateSubTree(i+1, r);\\n      \\n      for (TreeNode *left : leftTrees) {\\n        for (TreeNode *right : rightTrees) {\\n          TreeNode *node = new TreeNode(i);\\n          node->left = left;\\n          node->right = right;\\n          res.push_back(node);\\n        }\\n      }\\n    }\\n    return res;\\n  }\\npublic:\\n  vector<TreeNode*> generateTrees(int n) {\\n    return generateSubTree(1, n);\\n  }\\n};\\n```\n```cpp\\nclass Solution {\\n  unordered_map<string, vector<TreeNode*>> memo;\\n  vector<TreeNode*> generateSubTree(int l, int r) {\\n    vector<TreeNode*> res;\\n    if (l > r){\\n      res.push_back(nullptr);\\n      return res;\\n    }\\n    string key = to_string(l) + \"_\" + to_string(r);\\n    if (memo.find(key) != memo.end())\\n      return memo.find(key)->second;\\n\\n    for (int i = l; i <= r; i++) {\\n      vector<TreeNode*> leftTrees = generateSubTree(l, i-1);\\n      vector<TreeNode*> rightTrees = generateSubTree(i+1, r);\\n      \\n      for (TreeNode *left : leftTrees) {\\n        for (TreeNode *right : rightTrees) {\\n          TreeNode *node = new TreeNode(i);\\n          node->left = left;\\n          node->right = right;\\n          res.push_back(node);\\n        }\\n      }\\n    }\\n    memo[key] = res;\\n    return res;\\n  }\\npublic:\\n  vector<TreeNode*> generateTrees(int n) {\\n    return generateSubTree(1, n);\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1772451,
                "title": "simple-recursive-c-solution-with-explaintion",
                "content": "\\n\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return helper( 1, n);\\n    }\\n    vector<TreeNode* > helper(  int start, int end){\\n\\t\\n        vector<TreeNode* > res; // to store list of unique bsts\\n        \\n        // eg: n=3, and current root=1;\\n        //left subtree ={1,....,0}                 right subtree= {2,......,3}\\n        //eg:      1\\n        //       /      \\\\\\n        // (1,...,0)     (2,...,3)\\n        \\n        // you can see (1>0) in the left subtree(i.e., no nodes ) (thats why we need to push \"NULL\" and return)\\n        if( start > end){\\n            res.push_back(nullptr);\\n            return res;\\n        }\\n        \\n        // we will make every no. the current rooot and recursively call the left & right subtree\\n        for( int i=start; i<=end; i++){\\n            \\n            vector<TreeNode*> left_sub, right_sub;\\n            left_sub = helper(start, i-1);  // recursively make left subtree\\n            right_sub = helper(i+1, end); // recursively make right subtree\\n            \\n            \\n            // iterate through the alll possible left(values < i) & right(values>i) nodes and do the linkings\\n            // with the current node\\n            for( auto l: left_sub){\\n                for(auto r: right_sub){\\n                    \\n                    //current root\\n                    TreeNode* curr_root= new TreeNode(i);\\n                    \\n                    // link current root with left and right nodes(with every possible combinations)\\n                    curr_root->left = l;\\n                    curr_root->right = r;\\n                    \\n                    res.push_back(curr_root); // push the rooot into the result list\\n                }\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return helper( 1, n);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1686393,
                "title": "c-clean-and-concise",
                "content": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> recur(int l,int r)\\n    {\\n        if(l>r)\\n            return {NULL};\\n        \\n        vector<TreeNode *>ans;\\n        for(int root=l;root<=r;root++)\\n        {\\n            auto left=recur(l,root-1);\\n            auto right=recur(root+1,r);\\n            \\n            for(auto i:left)\\n            {\\n                for(auto j:right)\\n                {\\n                    TreeNode *newNode=new TreeNode(root,i,j);\\n                    ans.push_back(newNode);\\n                }\\n                    \\n            }\\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return recur(1,n);\\n    }\\n};\\n```\\n\\n**Pls upvote if you found helpful.**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> recur(int l,int r)\\n    {\\n        if(l>r)\\n            return {NULL};\\n        \\n        vector<TreeNode *>ans;\\n        for(int root=l;root<=r;root++)\\n        {\\n            auto left=recur(l,root-1);\\n            auto right=recur(root+1,r);\\n            \\n            for(auto i:left)\\n            {\\n                for(auto j:right)\\n                {\\n                    TreeNode *newNode=new TreeNode(root,i,j);\\n                    ans.push_back(newNode);\\n                }\\n                    \\n            }\\n        }\\n        return ans;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        return recur(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1504095,
                "title": "recursive-java-solution",
                "content": "For this question suppose the input is 4; That means that from 1 to 4 each of the values can act as the root and can have its own unique BST. SO lets take a start value equal to 1 and an end value equal to the given input n and then use a helper function.\\n \\n In the helper function, lets use a for loop where int i represents the TreeNode present in the list which at first will iterate from 1 to n as each node can be a root. now lets use recursion to find the leftList by defining the start as 1 and the end as (i - 1) and the right list by start as (i + 1) and end as n . By the principle of mathematical induction lets assume that we have recieved the required list of treeNode for the left of i and the right of i.\\n \\n now lets traverse though each of the TreeNode of the left as well as the Right by using a enhanced For Loop. then create a new TreeNode root that will have the data i. and we will have to connect root.left to each node of the leftTree as well as the right tree. Then add the root to the list and return it.\\n ...\\n \\n class Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        if(n == 0){\\n            return new ArrayList<TreeNode>(null);\\n        }\\n        return generateHelper(1, n);\\n    }\\n\\t// helper function\\n    private List<TreeNode> generateHelper(int start, int end){\\n        List<TreeNode> trees = new ArrayList<>();\\n        if(start > end){\\n            trees.add(null);\\n            return trees;\\n        }\\n        for(int i = start; i <= end; i++){\\n            List<TreeNode> leftTree = generateHelper(start, i - 1);\\n            List<TreeNode> rightTree = generateHelper(i + 1, end);\\n            \\n\\t\\t\\t// traverse to each TreeNode of both the lists\\n            for(TreeNode left : leftTree){\\n                for(TreeNode right : rightTree){\\n                    TreeNode root = new TreeNode(i);\\n                    \\n                    root.left = left;\\n                    root.right = right;\\n                    \\n                    trees.add(root);\\n                }\\n            }\\n        }\\n        return trees;\\n    }\\n}\\n\\n...\\n",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        if(n == 0){\\n            return new ArrayList<TreeNode>(null);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1446833,
                "title": "java-clean-concise-optimal-code-postorder-traversal-depth-first-search-algorithm",
                "content": "```\\nclass Solution {\\n    \\n    private List<TreeNode> generateTrees (int start, int end) {\\n        \\n        List<TreeNode> allTrees = new ArrayList<> ();\\n        \\n        if (start > end) {\\n            allTrees.add (null);\\n            return allTrees;\\n        }\\n        \\n        for (int i = start; i <= end; i++) {\\n            List<TreeNode> leftTrees = generateTrees (start, i - 1);\\n            List<TreeNode> rightTrees = generateTrees (i + 1, end);\\n            \\n            for (TreeNode l : leftTrees) {\\n                for (TreeNode r : rightTrees) {\\n                    TreeNode node = new TreeNode (i);\\n                    node.left = l;\\n                    node.right = r;\\n                    allTrees.add (node);\\n                }\\n            }\\n        }\\n        \\n        return allTrees;\\n    }\\n    \\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        return generateTrees (1, n);\\n    }\\n}\\n```\\n\\nPlease help to **UPVOTE** if this post is useful for you.\\nIf you have any questions, feel free to comment below.\\n\\n**LOVE CODING :)\\nHAPPY CODING :)\\nHAPPY LEARNING :)**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    private List<TreeNode> generateTrees (int start, int end) {\\n        \\n        List<TreeNode> allTrees = new ArrayList<> ();\\n        \\n        if (start > end) {\\n            allTrees.add (null);\\n            return allTrees;\\n        }\\n        \\n        for (int i = start; i <= end; i++) {\\n            List<TreeNode> leftTrees = generateTrees (start, i - 1);\\n            List<TreeNode> rightTrees = generateTrees (i + 1, end);\\n            \\n            for (TreeNode l : leftTrees) {\\n                for (TreeNode r : rightTrees) {\\n                    TreeNode node = new TreeNode (i);\\n                    node.left = l;\\n                    node.right = r;\\n                    allTrees.add (node);\\n                }\\n            }\\n        }\\n        \\n        return allTrees;\\n    }\\n    \\n    public List<TreeNode> generateTrees(int n) {\\n        \\n        return generateTrees (1, n);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441817,
                "title": "simple-recursive-approach-c",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*>helper(int start,int end){\\n        if(start>end){\\n            return {NULL};\\n        }\\n        vector<TreeNode*>ans;\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*>leftOf =helper(start,i-1);\\n            vector<TreeNode*>rightOf =helper(i+1,end);\\n            for(auto l: leftOf){\\n                for(auto r: rightOf){\\n                    TreeNode* root= new TreeNode(i);\\n                    root->left=l;\\n                    root->right=r;\\n                    ans.push_back(root);                   \\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==0)return vector<TreeNode*>();\\n        return helper(1,n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*>helper(int start,int end){\\n        if(start>end){\\n            return {NULL};\\n        }\\n        vector<TreeNode*>ans;\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*>leftOf =helper(start,i-1);\\n            vector<TreeNode*>rightOf =helper(i+1,end);\\n            for(auto l: leftOf){\\n                for(auto r: rightOf){\\n                    TreeNode* root= new TreeNode(i);\\n                    root->left=l;\\n                    root->right=r;\\n                    ans.push_back(root);                   \\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n==0)return vector<TreeNode*>();\\n        return helper(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1441035,
                "title": "python3-using-dfs",
                "content": "# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\n\\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        return self.dfs(1, n)\\n    \\n    def dfs(self, start, end):\\n        if start > end:\\n            return [None]\\n        if start == end:\\n            return [TreeNode(start)]\\n        result = []\\n        for i in range(start, end+1):\\n            left = self.dfs(start, i-1)\\n            right = self.dfs(i+1, end)\\n            for l in left:\\n                for r in right:\\n                    temp = TreeNode(i)\\n                    temp.left = l\\n                    temp.right = r\\n                    result.append(temp)\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Depth-First Search"
                ],
                "code": "```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        return self.dfs(1, n)\\n    \\n    def dfs(self, start, end):\\n        if start > end:\\n            return [None]\\n        if start == end:\\n            return [TreeNode(start)]\\n        result = []\\n        for i in range(start, end+1):\\n            left = self.dfs(start, i-1)\\n            right = self.dfs(i+1, end)\\n            for l in left:\\n                for r in right:\\n                    temp = TreeNode(i)\\n                    temp.left = l\\n                    temp.right = r\\n                    result.append(temp)\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1440911,
                "title": "day-2-unique-bst-2-recursion-with-pointers-c-with-explanation",
                "content": "Idea is to build a tree with each subtree by considering an element as a root.\\nTake `i` as root and build trees with `1 to i-1` and `i+1 to n`\\n\\nFor example:\\nTake `n = 3`\\n1. Start with `1` -> build tree from `1 to 0` which is NULL, then build with `2 to 3` for which you can have two types `2->null->3` and `3->2`. Now **attach** these two trees to the main tree i.e. `1` \\nSo, Total combinations you have are: `[1, null, 2, null, 3], [1, null, 3, 2]`\\n\\n\\n2. Start with `2` -> build tree from `1 to 1` which is `1` then build a tree with `3 to 3` which is `3`. Now, attach these two trees to `2`.\\nSo, you only have 1 total combination: `[2, 1, 3]`\\n\\n3. Start with `3` -> build tree from `1 to 2` which are `1->null->null->2` and `2->null->1`. Now attach these two trees to `3`.\\nSo, the combinations are `[3, 1, null, null, 2], [3, 2, null, 1]`\\n\\nLike this we can build for all starting nodes:\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> buildTree(int current, int n) {\\n        vector<TreeNode*> nodeList; // Creating a blank tree list\\n        if (current > n) {\\n            nodeList.push_back(NULL); // for case where current node is greater than n\\n            return nodeList;\\n        }\\n        if (current == n) {\\n            nodeList.push_back(new TreeNode(current)); // for case n just add the element as parent\\n            return nodeList;\\n        }\\n\\t\\t// Loop through all vertices building the tree nodes\\n        for (int i = current; i <= n; i++) {\\n            vector<TreeNode*> leftSubTree = buildTree(current, i-1); // first recursion to loop through all left nodes\\n            vector<TreeNode*> rightSubTree = buildTree(i+1, n); // second recursion to loop through all right nodes\\n\\t\\t\\t// Now we have all lsubtree and rsubtree, we can loop through them and create a tree\\n            for (auto leftTree: leftSubTree) {\\n                for (auto rightTree: rightSubTree) {\\n                    TreeNode *newTree = new TreeNode(i); // create a new tree with the current i as parent\\n                    newTree->left = leftTree; // assign left tree\\n                    newTree->right = rightTree; // assign right tree\\n                    nodeList.push_back(newTree); // push to vector\\n                }\\n            }\\n        }\\n        return nodeList;\\n    }\\n\\t\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTree(1, n); // call function from 1 to n\\n    }\\n};\\n```\\n\\nPlease upvote if found helpful!",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> buildTree(int current, int n) {\\n        vector<TreeNode*> nodeList; // Creating a blank tree list\\n        if (current > n) {\\n            nodeList.push_back(NULL); // for case where current node is greater than n\\n            return nodeList;\\n        }\\n        if (current == n) {\\n            nodeList.push_back(new TreeNode(current)); // for case n just add the element as parent\\n            return nodeList;\\n        }\\n\\t\\t// Loop through all vertices building the tree nodes\\n        for (int i = current; i <= n; i++) {\\n            vector<TreeNode*> leftSubTree = buildTree(current, i-1); // first recursion to loop through all left nodes\\n            vector<TreeNode*> rightSubTree = buildTree(i+1, n); // second recursion to loop through all right nodes\\n\\t\\t\\t// Now we have all lsubtree and rsubtree, we can loop through them and create a tree\\n            for (auto leftTree: leftSubTree) {\\n                for (auto rightTree: rightSubTree) {\\n                    TreeNode *newTree = new TreeNode(i); // create a new tree with the current i as parent\\n                    newTree->left = leftTree; // assign left tree\\n                    newTree->right = rightTree; // assign right tree\\n                    nodeList.push_back(newTree); // push to vector\\n                }\\n            }\\n        }\\n        return nodeList;\\n    }\\n\\t\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildTree(1, n); // call function from 1 to n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1237072,
                "title": "c-recursion-easy-solution-with-explanation",
                "content": "class Solution {\\npublic:\\n    \\n    // for a list of nodes, I can choose the root node for the tree\\n    // construct the left and right subtrees and return root node of all possible left and right subtrees (low, root-1) and (root+1, high)\\n    // iterate over the left and right subtree root nodes, add it to left and right child of root being considered\\n    \\n    \\n    vector<TreeNode*> constructTree(int low, int high){\\n        if(low>high)\\n            return vector<TreeNode*>{NULL};\\n        // choose the root node\\n        vector<TreeNode*> tree;\\n        vector<TreeNode*> leftSubtrees;\\n        vector<TreeNode*> rightSubtrees;\\n        for(int node = low; node<=high; node++ ){\\n            \\n            leftSubtrees = constructTree(low, node-1);\\n            rightSubtrees = constructTree(node+1, high);\\n            \\n            for(TreeNode* n1 : leftSubtrees){\\n                for(TreeNode* n2: rightSubtrees){\\n                    TreeNode* n = new TreeNode(node);\\n                    n->left = n1;\\n                    n->right = n2;\\n                    tree.push_back(n);\\n                }\\n            }\\n            \\n        } \\n        return tree;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n       if(n==0)\\n           return vector<TreeNode*>();\\n        \\n        return constructTree(1,n);\\n       \\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    \\n    // for a list of nodes, I can choose the root node for the tree\\n    // construct the left and right subtrees and return root node of all possible left and right subtrees (low, root-1) and (root+1, high)\\n    // iterate over the left and right subtree root nodes, add it to left and right child of root being considered\\n    \\n    \\n    vector<TreeNode*> constructTree(int low, int high){\\n        if(low>high)\\n            return vector<TreeNode*>{NULL}",
                "codeTag": "Java"
            },
            {
                "id": 1199333,
                "title": "c-solution-using-recursion",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*>V;\\n        \\n        if(begin>end)\\n        {\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = l;\\n                    root->right = r;\\n                    V.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        \\n        return V;\\n        \\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>V;\\n        if(n==0) return V;\\n        \\n        return generateBST(1,n);\\n        \\n         \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    vector<TreeNode*> generateBST(int begin, int end)\\n    {\\n        vector<TreeNode*>V;\\n        \\n        if(begin>end)\\n        {\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        \\n        for(int i=begin; i<=end; i++)\\n        {\\n            vector<TreeNode*>left =  generateBST(begin, i-1);\\n            vector<TreeNode*>right =  generateBST(i+1,end);\\n            \\n            for(auto l:left)\\n            {\\n                for(auto r:right)\\n                {\\n                    TreeNode* root = new TreeNode(i);\\n                    root->left = l;\\n                    root->right = r;\\n                    V.push_back(root);\\n                }\\n            }\\n            \\n        }\\n        \\n        return V;\\n        \\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        vector<TreeNode*>V;\\n        if(n==0) return V;\\n        \\n        return generateBST(1,n);\\n        \\n         \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1137417,
                "title": "c-recursion-12ms-simple-and-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0){\\n            return {NULL};\\n        }\\n        return recur(1, n);\\n    }\\n    \\n    vector<TreeNode*> recur(int start, int end){\\n        vector<TreeNode*> V;\\n        if(start > end){\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> left = recur(start, i-1);\\n            vector<TreeNode*> right = recur(i+1, end);\\n            \\n            for(auto l: left){\\n                for(auto r: right){\\n                    TreeNode* tree = new TreeNode(i);\\n                    tree->left = l;\\n                    tree->right = r;\\n                    V.push_back(tree);\\n                }\\n            }\\n        }\\n        return V;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        if(n == 0){\\n            return {NULL};\\n        }\\n        return recur(1, n);\\n    }\\n    \\n    vector<TreeNode*> recur(int start, int end){\\n        vector<TreeNode*> V;\\n        if(start > end){\\n            V.push_back(NULL);\\n            return V;\\n        }\\n        for(int i=start;i<=end;i++){\\n            vector<TreeNode*> left = recur(start, i-1);\\n            vector<TreeNode*> right = recur(i+1, end);\\n            \\n            for(auto l: left){\\n                for(auto r: right){\\n                    TreeNode* tree = new TreeNode(i);\\n                    tree->left = l;\\n                    tree->right = r;\\n                    V.push_back(tree);\\n                }\\n            }\\n        }\\n        return V;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1121143,
                "title": "python-super-simple-with-documentation",
                "content": "This is actually an Easy difficulty problem. The only thing to remember is the discipline of keeping smaller values to left sub-tree and bigger values to right sub-tree, to ensure we have BSTs, which itself is trivially obvious since we are dealing with BST.\\n```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def bstGen(arr:List[int])->List[TreeNode]:\\n            if len(arr)<=0: return [None]                       # terminal condition\\n            result = []                                         \\n            for i in range(len(arr)):                           # for each number in the input list\\n                left, right = bstGen(arr[:i]), bstGen(arr[i+1:])# recursive calls to the lesser and greater numbers\\n                for l in left:                                  # genereate all combinations of left and right subtrees\\n                    for r in right:\\n                        result.append(TreeNode(arr[i], l, r))   # append each combination to the list of trees\\n            return result\\n        return bstGen(list(range(1,n+1)))\\n```\\n",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        def bstGen(arr:List[int])->List[TreeNode]:\\n            if len(arr)<=0: return [None]                       # terminal condition\\n            result = []                                         \\n            for i in range(len(arr)):                           # for each number in the input list\\n                left, right = bstGen(arr[:i]), bstGen(arr[i+1:])# recursive calls to the lesser and greater numbers\\n                for l in left:                                  # genereate all combinations of left and right subtrees\\n                    for r in right:\\n                        result.append(TreeNode(arr[i], l, r))   # append each combination to the list of trees\\n            return result\\n        return bstGen(list(range(1,n+1)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1075772,
                "title": "c-faster-than-97-5-recursive-with-memoization",
                "content": "1.  We know that all nodes in left subtree are smaller than root and all nodes in right subtree are greater than node in BST.\\n2.  So, if we make ith number as root, 1 to i-1 will be in our left subtree and i+1 to n will be in our right subtree.\\n3.  Now, If 1 to i-1 can form different trees in p ways and i+1 to n can form different trees in q ways. Then our answer will be p * q.\\n4.  Also, we can have n choices to select our root, so we will be iterating over 1 to n for root and another loops for left and right subtree.\\n5.  At last, we can memoize this recursive solution.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> dp[13][13];\\n    vector<TreeNode*> constructBST(int start,int end){\\n        vector<TreeNode*> res;\\n        if(start > end){\\n            res.push_back(NULL); // start > end => subtree will be empty\\n            return res;\\n        }\\n        if(dp[start][end].size() != 0){  // Memoizing recursion calls\\n            return dp[start][end];\\n        }\\n        for(int i = start;i<=end;i++){\\n            vector<TreeNode*> left = constructBST(start,i-1); // constructing left subtree\\n            vector<TreeNode*> right = constructBST(i+1,end); //constructing right subtree\\n            \\n            // now looping through all left and right subtrees and connecting \\n            // them to ith root  below\\n            for(TreeNode* l:left){\\n                for(TreeNode* r:right){\\n                    TreeNode* root = new TreeNode(i);  //making value i as root \\n                    root->left = l;                    //connecting left subtree\\n                    root->right = r;                   //connecting right subtree\\n                    \\n                    res.push_back(root);               // adding tree to list\\n                }\\n            }\\n        }\\n        return dp[start][end] = res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        for(int i = 0;i<n;i++){\\n            for(int j = 0;j<n;j++){\\n                dp[i][j].clear();\\n            }\\n        }\\n        return constructBST(1,n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> dp[13][13];\\n    vector<TreeNode*> constructBST(int start,int end){\\n        vector<TreeNode*> res;\\n        if(start > end){\\n            res.push_back(NULL); // start > end => subtree will be empty\\n            return res;\\n        }\\n        if(dp[start][end].size() != 0){  // Memoizing recursion calls\\n            return dp[start][end];\\n        }\\n        for(int i = start;i<=end;i++){\\n            vector<TreeNode*> left = constructBST(start,i-1); // constructing left subtree\\n            vector<TreeNode*> right = constructBST(i+1,end); //constructing right subtree\\n            \\n            // now looping through all left and right subtrees and connecting \\n            // them to ith root  below\\n            for(TreeNode* l:left){\\n                for(TreeNode* r:right){\\n                    TreeNode* root = new TreeNode(i);  //making value i as root \\n                    root->left = l;                    //connecting left subtree\\n                    root->right = r;                   //connecting right subtree\\n                    \\n                    res.push_back(root);               // adding tree to list\\n                }\\n            }\\n        }\\n        return dp[start][end] = res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        \\n        for(int i = 0;i<n;i++){\\n            for(int j = 0;j<n;j++){\\n                dp[i][j].clear();\\n            }\\n        }\\n        return constructBST(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1074455,
                "title": "javascript-recursive-solution",
                "content": "```\\nvar generateTrees = function(n) {\\n   \\n    \\n    const constructArray = (start, end) => {\\n        const result = [];\\n        \\n        if(start > end){\\n            return [null];\\n        }\\n        \\n        if(start===end){\\n            return [new TreeNode(start)];\\n        }\\n        \\n        if(end-start===1){\\n            const first = new TreeNode(start, null, new TreeNode(end));\\n            const second = new TreeNode(end, new TreeNode(start), null);\\n            return [first, second];\\n        }\\n        \\n        for(let i=start; i<=end; i++){\\n            const leftSide = constructArray(start, i-1);\\n            const rightSide = constructArray(i+1, end);\\n            \\n            leftSide.forEach(ls => {\\n                rightSide.forEach(rs => {\\n                    const tree = new TreeNode(i, ls, rs);\\n                    \\n                    result.push(tree);\\n                })\\n            })\\n        }\\n        \\n        return result;\\n    }\\n    \\n    return constructArray(1,n);\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar generateTrees = function(n) {\\n   \\n    \\n    const constructArray = (start, end) => {\\n        const result = [];\\n        \\n        if(start > end){\\n            return [null];\\n        }\\n        \\n        if(start===end){\\n            return [new TreeNode(start)];\\n        }\\n        \\n        if(end-start===1){\\n            const first = new TreeNode(start, null, new TreeNode(end));\\n            const second = new TreeNode(end, new TreeNode(start), null);\\n            return [first, second];\\n        }\\n        \\n        for(let i=start; i<=end; i++){\\n            const leftSide = constructArray(start, i-1);\\n            const rightSide = constructArray(i+1, end);\\n            \\n            leftSide.forEach(ls => {\\n                rightSide.forEach(rs => {\\n                    const tree = new TreeNode(i, ls, rs);\\n                    \\n                    result.push(tree);\\n                })\\n            })\\n        }\\n        \\n        return result;\\n    }\\n    \\n    return constructArray(1,n);\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1037235,
                "title": "scala-one-liner",
                "content": "Using separate recursive function\\n```scala\\ndef generateTrees(n: Int): List[TreeNode] = gen(0, n + 1).toList\\ndef gen(l: Int, r: Int): Seq[TreeNode]    =\\n  if (l == r) Seq(null) else for (m <- l until r; tl <- gen(l, m); tr <- gen(m + 1, r)) yield new TreeNode(m, tl, tr)\\n```\\nCan be done as one-liner using cumbersome default argument\\n```scala\\ndef generateTrees(r: Int, l : Int = 1): List[TreeNode] =\\n  if (l > r) List(null) else for (m <- (l to r).toList; tl <- generateTrees(m - 1, l); tr <- generateTrees(r, m + 1)) yield new TreeNode(m, tl, tr)\\n``` \\n",
                "solutionTags": [
                    "Recursion"
                ],
                "code": "```scala\\ndef generateTrees(n: Int): List[TreeNode] = gen(0, n + 1).toList\\ndef gen(l: Int, r: Int): Seq[TreeNode]    =\\n  if (l == r) Seq(null) else for (m <- l until r; tl <- gen(l, m); tr <- gen(m + 1, r)) yield new TreeNode(m, tl, tr)\\n```\n```scala\\ndef generateTrees(r: Int, l : Int = 1): List[TreeNode] =\\n  if (l > r) List(null) else for (m <- (l to r).toList; tl <- generateTrees(m - 1, l); tr <- generateTrees(r, m + 1)) yield new TreeNode(m, tl, tr)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1027430,
                "title": "javascript-simple-dp-memoization",
                "content": "```javascript\\nvar generateTrees = function(n) {\\n    const memo = new Map();\\n    \\n    function buildTree(arr) {\\n        if(!arr.length) return [null];\\n        if(memo.has(arr.join())) return memo.get(arr.join());\\n        const result = [];\\n        \\n        for(let i = 0; i < arr.length; i++) {\\n            const left = buildTree(arr.slice(0, i));\\n            const right = buildTree(arr.slice(i+1));\\n            \\n            for(let curLeft of left) {\\n                for(let curRight of right) {\\n                    const tree = new TreeNode(arr[i]);\\n                    tree.left = curLeft;\\n                    tree.right = curRight;\\n                    result.push(tree);\\n                }\\n            }\\n        }\\n        memo.set(arr.join(), result);\\n        return result;\\n    }\\n    return buildTree([...Array(n)].map((_, i) => i+1));\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "```javascript\\nvar generateTrees = function(n) {\\n    const memo = new Map();\\n    \\n    function buildTree(arr) {\\n        if(!arr.length) return [null];\\n        if(memo.has(arr.join())) return memo.get(arr.join());\\n        const result = [];\\n        \\n        for(let i = 0; i < arr.length; i++) {\\n            const left = buildTree(arr.slice(0, i));\\n            const right = buildTree(arr.slice(i+1));\\n            \\n            for(let curLeft of left) {\\n                for(let curRight of right) {\\n                    const tree = new TreeNode(arr[i]);\\n                    tree.left = curLeft;\\n                    tree.right = curRight;\\n                    result.push(tree);\\n                }\\n            }\\n        }\\n        memo.set(arr.join(), result);\\n        return result;\\n    }\\n    return buildTree([...Array(n)].map((_, i) => i+1));\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 945834,
                "title": "python-recursive",
                "content": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        if n < 1: return []\\n        \\n        nums = list(range(1,n+1))\\n        return self.helper(nums)\\n            \\n            \\n    def helper(self, nums):\\n        if not nums:\\n            return [None]\\n        res = []\\n        for i in range(len(nums)):\\n            l = self.helper(nums[:i])\\n            r = self.helper(nums[i+1:])\\n            for ltree in l:\\n                for rtree in r:\\n                    root = TreeNode(nums[i])\\n                    root.left = ltree\\n                    root.right = rtree\\n                    res.append(root)\\n        return res \\n                \\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        if n < 1: return []\\n        \\n        nums = list(range(1,n+1))\\n        return self.helper(nums)\\n            \\n            \\n    def helper(self, nums):\\n        if not nums:\\n            return [None]\\n        res = []\\n        for i in range(len(nums)):\\n            l = self.helper(nums[:i])\\n            r = self.helper(nums[i+1:])\\n            for ltree in l:\\n                for rtree in r:\\n                    root = TreeNode(nums[i])\\n                    root.left = ltree\\n                    root.right = rtree\\n                    res.append(root)\\n        return res \\n                \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 810002,
                "title": "for-my-reference-have-a-look",
                "content": "Guys this is for my reference.\\nIf there is any mistake in the comments please do tell. It will me beneficial for everybody \\nThanks and be safe !\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        if n == 0:\\n            return []\\n        \\n        def helper(start,end):  # my helper function \\n            \\n            if start > end:  # when we reach at the leaf node\\n                return [None]\\n            \\n            res = []                    # for each tree \\n            \\n            for i in range(start,end+1):\\n                \\n                left = helper(start,i-1)  # creating list for left side of the root node\\n                right = helper(i+1,end)   # creating list for right side of the root node\\n                \\n                for l in left:            # iterating over left nodes of the root node\\n                    for r in right:        # iterating over right nodes of the root node            \\n                        node = TreeNode(i)  # creating a node \\n                        node.left = l       # constructing left side\\n                        node.right = r      # constructing right side\\n                        res.append(node)  \\n            print(res)\\n            return res\\n        \\n        return helper(1,n)\\n                        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        \\n        if n == 0:\\n            return []\\n        \\n        def helper(start,end):  # my helper function \\n            \\n            if start > end:  # when we reach at the leaf node\\n                return [None]\\n            \\n            res = []                    # for each tree \\n            \\n            for i in range(start,end+1):\\n                \\n                left = helper(start,i-1)  # creating list for left side of the root node\\n                right = helper(i+1,end)   # creating list for right side of the root node\\n                \\n                for l in left:            # iterating over left nodes of the root node\\n                    for r in right:        # iterating over right nodes of the root node            \\n                        node = TreeNode(i)  # creating a node \\n                        node.left = l       # constructing left side\\n                        node.right = r      # constructing right side\\n                        res.append(node)  \\n            print(res)\\n            return res\\n        \\n        return helper(1,n)\\n                        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 789874,
                "title": "python-recursive-solution-with-explanations",
                "content": "```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        # Edge case:\\n        if n == 0:\\n            return []\\n\\t\\t\\t\\n        # helping recursive function which recieves a range (within n) and returns all subtrees in that range:\\n        def rec(start, end):\\n\\t\\t\\n            # not supposed to happen:\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            # got to a leaf:\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            # for each option of root, get all possible subtrees and add to result each pair possible of left and right:\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        res = rec(1,n)\\n        return res\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[TreeNode]:\\n        # Edge case:\\n        if n == 0:\\n            return []\\n\\t\\t\\t\\n        # helping recursive function which recieves a range (within n) and returns all subtrees in that range:\\n        def rec(start, end):\\n\\t\\t\\n            # not supposed to happen:\\n            if start > end:\\n                return [None]\\n\\t\\t\\t\\t\\n            # got to a leaf:\\n            if start == end:\\n                return [TreeNode(start)]\\n            ret_list = []\\n\\t\\t\\t\\n            # for each option of root, get all possible subtrees and add to result each pair possible of left and right:\\n            for i in range(start, end+1):\\n                left = rec(start, i-1)\\n                right = rec(i+1, end)\\n                for pair in product(left, right):\\n                    ret_list.append(TreeNode(i, pair[0], pair[1]))\\n        \\n            return ret_list\\n        res = rec(1,n)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 460045,
                "title": "c-nice-recursion",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    vector<TreeNode*> gen(int l, int r) {\\n        if (l > r) return {nullptr};\\n        if (l == r) return {new TreeNode(l)};\\n        vector<TreeNode*> ans;\\n        for (int i = l; i <= r; ++i) {\\n            vector<TreeNode*> leftL = gen(l, i-1);\\n            vector<TreeNode*> rightL = gen(i+1, r);\\n            for (auto &left: leftL) {\\n                for (auto &right: rightL) {\\n                    TreeNode *head = new TreeNode(i);\\n                    head->left = left;\\n                    head->right = right;\\n                    ans.push_back(head);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n < 1) return {};\\n        return gen(1,n);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    vector<TreeNode*> gen(int l, int r) {\\n        if (l > r) return {nullptr};\\n        if (l == r) return {new TreeNode(l)};\\n        vector<TreeNode*> ans;\\n        for (int i = l; i <= r; ++i) {\\n            vector<TreeNode*> leftL = gen(l, i-1);\\n            vector<TreeNode*> rightL = gen(i+1, r);\\n            for (auto &left: leftL) {\\n                for (auto &right: rightL) {\\n                    TreeNode *head = new TreeNode(i);\\n                    head->left = left;\\n                    head->right = right;\\n                    ans.push_back(head);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n    \\n    vector<TreeNode*> generateTrees(int n) {\\n        if (n < 1) return {};\\n        return gen(1,n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 166620,
                "title": "java-dp-store-both-left-and-right-part",
                "content": "For example: n = 5, so dp[3] is all unique BST with {{1,2,3}, {2,3,4}, {3,4,5}} \\nThe reason to store {2,3,4}, {3,4,5} is we need to use it as right subtree in generate dp[4], dp[5]\\nSo, in generating dp[4], we can let 1/2/3/4 be the root, and the left subtree and right subtree could be retrieved from dp.\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n == 0) return new ArrayList<TreeNode>();\\n        List<List<TreeNode>>[] dp = new List[n + 1];\\n        dp[0] = new ArrayList<List<TreeNode>>();\\n        for(int j = 1; j <= n + 1; j++){\\n            List<TreeNode> temp = new ArrayList<>();\\n            temp.add(null);\\n            dp[0].add(temp);\\n        }        \\n        dp[1] = new ArrayList<List<TreeNode>>();\\n        for(int j = 1; j <= n; j++){\\n            List<TreeNode> temp = new ArrayList<>();\\n            TreeNode tempNode = new TreeNode(j);\\n            temp.add(tempNode);\\n            dp[1].add(temp);\\n        }        \\n        for(int i = 2; i < dp.length; i++){\\n            dp[i] = new ArrayList<List<TreeNode>>();\\n            generateTreesHelper(dp, i, n);\\n        }\\n        return dp[n].get(0);\\n    }\\n    \\n    public void generateTreesHelper(List<List<TreeNode>>[] dp, int n, int total){\\n        for(int i = 1; i <= total - n + 1; i++){ // for example, n = 4. we need to generate 1234, 2345, 3456\\n            List<TreeNode> l = new ArrayList<>();\\n            for(int j = i; j < n + i; j++){\\n                List<TreeNode> left = dp[j - i].get(i - 1);\\n                List<TreeNode> right = dp[n + i - j - 1].get(j);\\n                for(TreeNode leftNode : left){\\n                    for(TreeNode rightNode : right){\\n                        TreeNode root = new TreeNode(j);\\n                        root.left = leftNode;\\n                        root.right = rightNode;\\n                        l.add(root);\\n                    }\\n                }   \\n            }\\n            dp[n].add(l);\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n        if(n == 0) return new ArrayList<TreeNode>();\\n        List<List<TreeNode>>[] dp = new List[n + 1];\\n        dp[0] = new ArrayList<List<TreeNode>>();\\n        for(int j = 1; j <= n + 1; j++){\\n            List<TreeNode> temp = new ArrayList<>();\\n            temp.add(null);\\n            dp[0].add(temp);\\n        }        \\n        dp[1] = new ArrayList<List<TreeNode>>();\\n        for(int j = 1; j <= n; j++){\\n            List<TreeNode> temp = new ArrayList<>();\\n            TreeNode tempNode = new TreeNode(j);\\n            temp.add(tempNode);\\n            dp[1].add(temp);\\n        }        \\n        for(int i = 2; i < dp.length; i++){\\n            dp[i] = new ArrayList<List<TreeNode>>();\\n            generateTreesHelper(dp, i, n);\\n        }\\n        return dp[n].get(0);\\n    }\\n    \\n    public void generateTreesHelper(List<List<TreeNode>>[] dp, int n, int total){\\n        for(int i = 1; i <= total - n + 1; i++){ // for example, n = 4. we need to generate 1234, 2345, 3456\\n            List<TreeNode> l = new ArrayList<>();\\n            for(int j = i; j < n + i; j++){\\n                List<TreeNode> left = dp[j - i].get(i - 1);\\n                List<TreeNode> right = dp[n + i - j - 1].get(j);\\n                for(TreeNode leftNode : left){\\n                    for(TreeNode rightNode : right){\\n                        TreeNode root = new TreeNode(j);\\n                        root.left = leftNode;\\n                        root.right = rightNode;\\n                        l.add(root);\\n                    }\\n                }   \\n            }\\n            dp[n].add(l);\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 161471,
                "title": "a-java-dp-solution-explained",
                "content": "This is a classic DP problem. To get a sense of the thought process that would help you arrive at that conclusion, read on:\\nThe key to this problem is the fundamental structural property of BSTs that all the nodes to the left of the root are smaller than it, and all on the right are greater, the property being true recursively.\\nTherefore, if the root if the integer *i*, then the keys on the left must include all the natural numbers upto *i-1*, and those on the right must contain the integers from *i* to the integer *n*. \\nBut if you look closely, the keys on the right are only a version of the set {0,1,\\u2026.,k}, for some k, wherein each value is incremented by a certain constant. So, getting the BSTs for the right and the left part of the root will have pretty much the same approach. And if you have the BSTs for the left and the right part, then it takes only some *assembling* to get the BST with the key *i* as the root. Well, you have just solved the problem by breaking it down into it\\u2019s **optimal sub-structures**. \\nSo now you make a new function which takes two integers as input, i.e., the beginning and the end, to give all the possible BSTs with the keys in the desired range, and then change the key in the root, to start the process over again. At this point, it becomes nigh-on impossible to miss the fact that you will be repeating some computations that you have done in earlier iterations, for eg:![image](https://s3-lc-upload.s3.amazonaws.com/users/vaibhav98iitd/image_1532463279.png)\\n\\n\\nTherefore, you do see the **overlapping sub-problems**. So to optimize the process, all you need is some sort of a dump where you store the values as you compute them.\\n\\nSo once you have a vague idea of how the problem is structured, it is easy to solve it. You iterate over the numbers {0,1,..........,n} and in each iteration the integer *i* is put into the root, so create a node ***newroot*** and set the value as *i*. Naturally, the numbers *0* to *i-1* would go into the left sub-tree and *i+1* to *n* go to the right. Now, get all the possible BSTs for these two subtrees recursively and put then in All_left_BST and All_right_BST respectively. Then, for every pair  (**left**, **right**), where **left** belongs to All_left_BST and **right** belongs to All_right_BST, set the left child of ***newroot*** as **left** and the right child as **right**, and put them into the result  collection. Now, go over to the next iteration. Note that since for want to do this for all pairs of (**left**,**right**), the loop would run **|All_left_BST|x|All_right_BST|** times. Of course, you can run it in a nested *for* loop where the first one runs over all the trees in All_left_BST and the nested one over all in All_right_BST.\\nYou can find the code attached below.\\nHope it helped.\\n```/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    List[][] dump;\\n    public List<TreeNode> generateTrees(int n) {\\n        List[][] temp=new List[n][n];\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                temp[i][j]=null;\\n            }\\n        }\\n        dump=temp;\\n        return getAns(1,n); }\\n    public List<TreeNode> getAns(int beg, int end)\\n    {\\n        if(beg>end)\\n        {\\n            return new ArrayList<TreeNode>();\\n        }\\n        if(dump[beg-1][end-1]!=null)\\n            return dump[beg-1][end-1];\\n        List<TreeNode> res=new ArrayList<TreeNode>();\\n        if(beg==end)\\n        {            \\n            res.add(new TreeNode(beg));\\n            dump[beg-1][end-1]=res;\\n            return res;\\n        }\\n        for(int i=beg;i<=end;i++)\\n        {\\n            if(i==beg)\\n            {\\n                List<TreeNode> right=getAns(beg+1,end);\\n                for (TreeNode rnode: right)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=null;\\n                    root.right=rnode;\\n                    res.add(root);\\n                }\\n                \\n            }\\n            else if(i==end)\\n            {\\n               // System.out.println(\"sd\");\\n                List<TreeNode> left=getAns(beg,end-1);\\n                for(TreeNode lnode:left)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=lnode;\\n                   // root.right=null;\\n                    res.add(root);\\n                }\\n                \\n            }\\n            else{\\n            List<TreeNode> left=getAns(beg,i-1);\\n            List<TreeNode> right=getAns(i+1,end);\\n            for(TreeNode lnode: left)\\n            {\\n                for(TreeNode rnode:right)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=lnode;\\n                    root.right=rnode;\\n                    res.add(root);\\n                }\\n            }\\n            }\\n            \\n            \\n        }\\n        dump[beg-1][end-1]=res;\\n        return res;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     int val;\\n *     TreeNode left;\\n *     TreeNode right;\\n *     TreeNode(int x) { val = x; }\\n * }\\n */\\nclass Solution {\\n    List[][] dump;\\n    public List<TreeNode> generateTrees(int n) {\\n        List[][] temp=new List[n][n];\\n        for(int i=0;i<n;i++)\\n        {\\n            for(int j=0;j<n;j++)\\n            {\\n                temp[i][j]=null;\\n            }\\n        }\\n        dump=temp;\\n        return getAns(1,n); }\\n    public List<TreeNode> getAns(int beg, int end)\\n    {\\n        if(beg>end)\\n        {\\n            return new ArrayList<TreeNode>();\\n        }\\n        if(dump[beg-1][end-1]!=null)\\n            return dump[beg-1][end-1];\\n        List<TreeNode> res=new ArrayList<TreeNode>();\\n        if(beg==end)\\n        {            \\n            res.add(new TreeNode(beg));\\n            dump[beg-1][end-1]=res;\\n            return res;\\n        }\\n        for(int i=beg;i<=end;i++)\\n        {\\n            if(i==beg)\\n            {\\n                List<TreeNode> right=getAns(beg+1,end);\\n                for (TreeNode rnode: right)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=null;\\n                    root.right=rnode;\\n                    res.add(root);\\n                }\\n                \\n            }\\n            else if(i==end)\\n            {\\n               // System.out.println(\"sd\");\\n                List<TreeNode> left=getAns(beg,end-1);\\n                for(TreeNode lnode:left)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=lnode;\\n                   // root.right=null;\\n                    res.add(root);\\n                }\\n                \\n            }\\n            else{\\n            List<TreeNode> left=getAns(beg,i-1);\\n            List<TreeNode> right=getAns(i+1,end);\\n            for(TreeNode lnode: left)\\n            {\\n                for(TreeNode rnode:right)\\n                {\\n                    TreeNode root=new TreeNode(i);\\n                    root.left=lnode;\\n                    root.right=rnode;\\n                    res.add(root);\\n                }\\n            }\\n            }\\n            \\n            \\n        }\\n        dump[beg-1][end-1]=res;\\n        return res;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 157293,
                "title": "my-python-ac-dfs-solution",
                "content": "```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dfs(l, r):\\n            if r < l: return [None]\\n            arr = []\\n            for m in range(l, r + 1):\\n                left = dfs(l, m - 1)\\n                right = dfs(m + 1, r)\\n                for lNode in left:\\n                    for rNode in right:\\n                        new = TreeNode(m)\\n                        new.left = lNode\\n                        new.right = rNode\\n                        arr.append(new)\\n            return arr\\n        res = dfs(1, n)\\n        return [] if res == [None] else res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def generateTrees(self, n):\\n        def dfs(l, r):\\n            if r < l: return [None]\\n            arr = []\\n            for m in range(l, r + 1):\\n                left = dfs(l, m - 1)\\n                right = dfs(m + 1, r)\\n                for lNode in left:\\n                    for rNode in right:\\n                        new = TreeNode(m)\\n                        new.left = lNode\\n                        new.right = rNode\\n                        arr.append(new)\\n            return arr\\n        res = dfs(1, n)\\n        return [] if res == [None] else res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 31572,
                "title": "share-my-11-lines-python-code",
                "content": "    def helper(self, n, start):\\n        ret = []\\n        for i in range(start, n + start):\\n            l = self.helper(i - start, start)\\n            r = self.helper(n + start - i - 1, i + 1)\\n            for x in (l if len(l) else [None]):\\n                for y in (r if len(r) else [None]):\\n                    root = TreeNode(i)\\n                    root.left, root.right = x, y\\n                    ret.append(root)\\n        return ret\\n    def generateTrees(self, n):\\n        return self.helper(n, 1)\\n\\nPretty standard top-down recursive approach. \"start\" is the starting number for tree node labeling.",
                "solutionTags": [],
                "code": "    def helper(self, n, start):\\n        ret = []\\n        for i in range(start, n + start):\\n            l = self.helper(i - start, start)\\n            r = self.helper(n + start - i - 1, i + 1)\\n            for x in (l if len(l) else [None]):\\n                for y in (r if len(r) else [None]):\\n                    root = TreeNode(i)\\n                    root.left, root.right = x, y\\n                    ret.append(root)\\n        return ret\\n    def generateTrees(self, n):\\n        return self.helper(n, 1)\\n\\nPretty standard top-down recursive approach. \"start\" is the starting number for tree node labeling.",
                "codeTag": "Python3"
            },
            {
                "id": 31557,
                "title": "clean-and-efficient-accepted-best-in-c",
                "content": "    struct TreeNode* push(struct TreeNode*** arr, int* returnSize, int a)\\n    {\\n        struct TreeNode *t = NULL;\\n        if(a > -1) //only valid value can be allocated;\\n        {\\n            t = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n            t->left = t->right = NULL;\\n            t->val = a;\\n        }\\n        *returnSize += 1;\\n        *arr = (struct TreeNode**)realloc(*arr, sizeof(struct TreeNode*)*(*returnSize));\\n        (*arr)[*returnSize-1] = t;\\n        return t; //return this node for -> root;\\n    }\\n    struct TreeNode* generate(int begin, int end, int* returnSize)\\n    {\\n        struct TreeNode** arr = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\\n        if(begin >= end)\\n        {\\n            if(begin > end) \\n                push(&arr, returnSize, -1);\\n            if(begin == end)\\n                push(&arr, returnSize, begin);\\n            return arr;\\n        }\\n        for(int i = begin; i <= end; i++) //try to set each value as root;\\n        {\\n            int count0=0, count1=0;\\n            struct TreeNode **arr0 = generate(begin, i-1, &count0);\\n            struct TreeNode **arr1 = generate(i+1, end, &count1);\\n            for(int j = 0; j < count0; j++) //try to use different node as left and right child;\\n                for(int k = 0; k < count1; k++)\\n                {\\n                    struct TreeNode* t = push(&arr, returnSize, i);\\n                    t->left = arr0[j];\\n                    t->right = arr1[k];\\n                }\\n        }\\n        return arr;\\n    }\\n    \\n    //AC - 8ms;\\n    struct TreeNode** generateTrees(int n, int* returnSize)\\n    {\\n        *returnSize = 0;\\n        if(!n) return NULL;\\n        return generate(1, n, returnSize);\\n    }",
                "solutionTags": [],
                "code": "    struct TreeNode* push(struct TreeNode*** arr, int* returnSize, int a)\\n    {\\n        struct TreeNode *t = NULL;\\n        if(a > -1) //only valid value can be allocated;\\n        {\\n            t = (struct TreeNode*)malloc(sizeof(struct TreeNode));\\n            t->left = t->right = NULL;\\n            t->val = a;\\n        }\\n        *returnSize += 1;\\n        *arr = (struct TreeNode**)realloc(*arr, sizeof(struct TreeNode*)*(*returnSize));\\n        (*arr)[*returnSize-1] = t;\\n        return t; //return this node for -> root;\\n    }\\n    struct TreeNode* generate(int begin, int end, int* returnSize)\\n    {\\n        struct TreeNode** arr = (struct TreeNode**)malloc(sizeof(struct TreeNode*));\\n        if(begin >= end)\\n        {\\n            if(begin > end) \\n                push(&arr, returnSize, -1);\\n            if(begin == end)\\n                push(&arr, returnSize, begin);\\n            return arr;\\n        }\\n        for(int i = begin; i <= end; i++) //try to set each value as root;\\n        {\\n            int count0=0, count1=0;\\n            struct TreeNode **arr0 = generate(begin, i-1, &count0);\\n            struct TreeNode **arr1 = generate(i+1, end, &count1);\\n            for(int j = 0; j < count0; j++) //try to use different node as left and right child;\\n                for(int k = 0; k < count1; k++)\\n                {\\n                    struct TreeNode* t = push(&arr, returnSize, i);\\n                    t->left = arr0[j];\\n                    t->right = arr1[k];\\n                }\\n        }\\n        return arr;\\n    }\\n    \\n    //AC - 8ms;\\n    struct TreeNode** generateTrees(int n, int* returnSize)\\n    {\\n        *returnSize = 0;\\n        if(!n) return NULL;\\n        return generate(1, n, returnSize);\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 31594,
                "title": "10-line-concise-c-solution",
                "content": "    class Solution {\\n    public:\\n        vector<TreeNode*> get(int a, int b) {\\n            vector<TreeNode*> ans;\\n            if (a>b) {\\n                ans.push_back(NULL);\\n            } else {\\n                for (int i=a; i<=b; i++)\\n                    for (auto l : get(a, i-1)) \\n                        for (auto r : get(i+1, b))\\n                        {\\n                            ans.push_back(new TreeNode(i));\\n                            ans.back()->left=l, ans.back()->right=r;\\n                        }\\n            }\\n            return ans;\\n        }\\n        \\n        vector<TreeNode*> generateTrees(int n) {\\n            return get(1, n);\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n        vector<TreeNode*> get(int a, int b) {\\n            vector<TreeNode*> ans;\\n            if (a>b) {\\n                ans.push_back(NULL);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 31612,
                "title": "dp-solution-using-1-tabulation-20ms-and-2-memoization-24ms",
                "content": "Tabulation:\\n\\n    class Solution {\\n        \\n        using Trees = vector<TreeNode*>;\\n        \\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            if (n == 0)\\n            {\\n                return vector<TreeNode*>({NULL});\\n            }\\n            \\n            // the dp table: [i][j] -> all unique BSTs with nodes from i..j inclusive\\n            vector<vector<Trees>> dp(n + 1,\\n                                     vector<vector<TreeNode*>>(n + 1, Trees()));\\n                                     \\n            // initialize the dp table: [i][i] -> a single root node with value i, for all i in [1,n] inclusive\\n            for (int i = 1; i <= n; ++i)\\n            {\\n                dp[i][i].push_back(new TreeNode(i));\\n            }\\n            \\n            // the progressively build the table (bottom-up tabulation)\\n            for (int k = 1; k < n; ++k)\\n            {\\n                for (int i = 1; i <= n - k; ++i)\\n                {\\n                    int j = i + k;\\n                    Trees &unique_trees = dp[i][j]; assert (unique_trees.empty());  // this is what we're building right now\\n                    for (int root = i; root <= j; ++root)\\n                    {\\n                        int end_left = root - 1;\\n                        int start_right = root + 1;\\n                        Trees all_left;\\n                        if (end_left < i)\\n                        {\\n                            all_left.push_back(NULL);\\n                        }\\n                        else\\n                        {\\n                            all_left = dp[i][end_left];\\n                        }\\n                        Trees all_right;\\n                        if (j < start_right)\\n                        {\\n                            all_right.push_back(NULL);\\n                        }\\n                        else\\n                        {\\n                            all_right = dp[start_right][j];\\n                        }\\n                        for (TreeNode *left : all_left)\\n                        {\\n                            for (TreeNode *right : all_right)\\n                            {\\n                                TreeNode *root_node = new TreeNode(root);\\n                                root_node->left = left;\\n                                root_node->right = right;\\n                                unique_trees.push_back(root_node);\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            \\n            return dp[1][n];\\n        }\\n    };\\n\\n\\nMemoization:\\n\\n    class Solution {\\n    private:\\n    \\n        using cache = map<pair<int, int>, vector<TreeNode*>>;   // {i,j} -> all unique BSTs with nodes from i..j inclusive\\n        \\n        vector<TreeNode*> generate_trees_dp(int start, int end, cache &dp)\\n        {\\n            vector<TreeNode*> result;\\n            \\n            if (end < start)\\n            {\\n                result.push_back(NULL);\\n                return result;\\n            }\\n            \\n            auto it = dp.find({start, end});\\n            if (it != dp.end())\\n            {\\n                return it->second;\\n            }\\n            \\n            for (int i = start; i <= end; ++i)\\n            {\\n                vector<TreeNode*> all_left = generate_trees_dp(start, i - 1, dp);\\n                vector<TreeNode*> all_right = generate_trees_dp(i + 1, end, dp);\\n                for (TreeNode *left_tree : all_left)\\n                {\\n                    for (TreeNode *right_tree : all_right)\\n                    {\\n                        TreeNode *root = new TreeNode(i);\\n                        root->left = left_tree;\\n                        root->right = right_tree;\\n                        result.push_back(root);\\n                    }\\n                }\\n            }\\n            \\n            dp[{start, end}] = result;\\n            return result;\\n        }\\n        \\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            cache dp;\\n            // initialize the dp cache: {i,i} -> a single root node with value i, for all i in [1,n] inclusive\\n            for (int i = 1; i <= n; ++i)\\n            {\\n                dp[{i,i}] = { new TreeNode(i), };\\n            }\\n            \\n            return generate_trees_dp(1, n, dp);\\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "Dynamic Programming",
                    "Memoization"
                ],
                "code": "class Solution {\\n        \\n        using Trees = vector<TreeNode*>;\\n        \\n    public:\\n        vector<TreeNode*> generateTrees(int n) {\\n            if (n == 0)\\n            {\\n                return vector<TreeNode*>({NULL}",
                "codeTag": "Java"
            },
            {
                "id": 31637,
                "title": "recursive-java-solution-make-use-of-binary-search-characteristic",
                "content": "Given a consecutive sequence, eg. [2,3,4,5].\\n\\nThe way to generate every possible binary search tree for this sequence is take each number as root node and then assign both child.\\n\\nThus, [2,3,4,5] will be computed as,\\n\\nFirst take 2 as root node, then left child will be null, right child will be sequence [3,4,5].\\n\\nSecond take 3 as root node, then left child will be [2], right child will be sequence [4,5].\\n\\nThird take 4 as root node, then left child will be [2,3], right child will be [5].\\n\\n...\\n\\n    public List<TreeNode> generateTrees(int n) {\\n            return generateTree(1,n+1);\\n        }\\n        \\n        private List<TreeNode> generateTree(int min, int max){\\n            List<TreeNode> list = new ArrayList<TreeNode>();\\n            // base case\\n            if(min >= max){\\n                TreeNode node = null;\\n                list.add(node);\\n            }\\n            // general case\\n            for(int i = min;i < max;i++){\\n                List<TreeNode> left = generateTree(min,i);\\n                List<TreeNode> right = generateTree(i+1,max);\\n                for(int p = 0;p < left.size();p++){\\n                    for(int q = 0;q < right.size();q++){\\n                        TreeNode root = new TreeNode(i);\\n                        root.left = left.get(p);\\n                        root.right = right.get(q);\\n                        list.add(root);\\n                    }\\n                }\\n            }\\n            return list;\\n        }",
                "solutionTags": [
                    "Java"
                ],
                "code": "Given a consecutive sequence, eg. [2,3,4,5].\\n\\nThe way to generate every possible binary search tree for this sequence is take each number as root node and then assign both child.\\n\\nThus, [2,3,4,5] will be computed as,\\n\\nFirst take 2 as root node, then left child will be null, right child will be sequence [3,4,5].\\n\\nSecond take 3 as root node, then left child will be [2], right child will be sequence [4,5].\\n\\nThird take 4 as root node, then left child will be [2,3], right child will be [5].\\n\\n...\\n\\n    public List<TreeNode> generateTrees(int n) {\\n            return generateTree(1,n+1);\\n        }\\n        \\n        private List<TreeNode> generateTree(int min, int max){\\n            List<TreeNode> list = new ArrayList<TreeNode>();\\n            // base case\\n            if(min >= max){\\n                TreeNode node = null;\\n                list.add(node);\\n            }\\n            // general case\\n            for(int i = min;i < max;i++){\\n                List<TreeNode> left = generateTree(min,i);\\n                List<TreeNode> right = generateTree(i+1,max);\\n                for(int p = 0;p < left.size();p++){\\n                    for(int q = 0;q < right.size();q++){\\n                        TreeNode root = new TreeNode(i);\\n                        root.left = left.get(p);\\n                        root.right = right.get(q);\\n                        list.add(root);\\n                    }\\n                }\\n            }\\n            return list;\\n        }",
                "codeTag": "Unknown"
            },
            {
                "id": 31642,
                "title": "my-c-solution",
                "content": "    class Solution {\\n    private:\\n        vector<TreeNode *> getTrees(int n, int offset) {\\n            vector<TreeNode *> ans;\\n            if(n == 0) {\\n                ans.push_back(nullptr);\\n                return ans;\\n            }\\n            int i, j, k;\\n            for(i=1; i<=n; i++) {\\n                vector<TreeNode *> left = getTrees(i-1, offset);\\n                vector<TreeNode *> right = getTrees(n-i, i+offset);\\n                for(j=0; j<left.size(); j++) {\\n                    for(k=0; k<right.size(); k++) {\\n                        TreeNode *root = new TreeNode(i+offset);\\n                        root->left = left[j];\\n                        root->right = right[k];\\n                        ans.push_back(root);\\n                    }\\n                }\\n            }\\n            return ans;\\n        }\\n    public:\\n        vector<TreeNode *> generateTrees(int n) {\\n            return getTrees(n, 0);\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    private:\\n        vector<TreeNode *> getTrees(int n, int offset) {\\n            vector<TreeNode *> ans;\\n            if(n == 0) {\\n                ans.push_back(nullptr);\\n                return ans;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 31655,
                "title": "my-answer-with-c-28-lines",
                "content": "    /**\\n     * Definition for binary tree\\n     * struct TreeNode {\\n     *     int val;\\n     *     TreeNode *left;\\n     *     TreeNode *right;\\n     *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\\n     * };\\n     */\\n    class Solution {\\n    public:\\n    \\tint *f;\\n    \\tTreeNode* generateTree(int rank, int base, int n) {\\n    \\t\\tif (n == 0) return NULL;\\n    \\t\\tif (n == 1) return new TreeNode(base);\\n    \\t\\tfor (int i = 0; i < n; ++i) {\\n    \\t\\t\\trank -= f[i] * f[n - 1 - i];\\n    \\t\\t\\tif (rank < 0) {\\n    \\t\\t\\t\\tTreeNode* root = new TreeNode(base + i);\\n    \\t\\t\\t\\trank += f[i] * f[n - 1 - i];\\n    \\t\\t\\t\\troot->left = generateTree(rank % f[i], base, i);\\n    \\t\\t\\t\\troot->right = generateTree(rank / f[i], base + i + 1, n - 1 - i);\\n    \\t\\t\\t\\treturn root;\\n    \\t\\t\\t}\\n    \\t\\t}\\n    \\t}\\n        vector<TreeNode *> generateTrees(int n) {\\n            f = new int[n + 1];\\n    \\t\\tf[0] = f[1] = 1;\\n    \\t\\tfor (int i = 2; i <= n; ++i) {\\n    \\t\\t\\tf[i] = 0;\\n    \\t\\t\\tfor (int j = 0; j < i; ++j) f[i] += f[j] * f[i - 1 - j];\\n    \\t\\t}\\n    \\t\\tvector<TreeNode *> result;\\n    \\t\\tfor (int i = 0; i < f[n]; ++i) result.push_back(generateTree(i, 1, n));\\n    \\t\\treturn result;\\n        }\\n    };",
                "solutionTags": [],
                "code": "class Solution {\\n    public:\\n    \\tint *f;\\n    \\tTreeNode* generateTree(int rank, int base, int n) {\\n    \\t\\tif (n == 0) return NULL;\\n    \\t\\tif (n == 1) return new TreeNode(base);\\n    \\t\\tfor (int i = 0; i < n; ++i) {\\n    \\t\\t\\trank -= f[i] * f[n - 1 - i];\\n    \\t\\t\\tif (rank < 0) {\\n    \\t\\t\\t\\tTreeNode* root = new TreeNode(base + i);\\n    \\t\\t\\t\\trank += f[i] * f[n - 1 - i];\\n    \\t\\t\\t\\troot->left = generateTree(rank % f[i], base, i);\\n    \\t\\t\\t\\troot->right = generateTree(rank / f[i], base + i + 1, n - 1 - i);\\n    \\t\\t\\t\\treturn root;\\n    \\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 3868393,
                "title": "easy-code-with-explanation",
                "content": "Note this code is combination of leetcode problem permutaion and creating bst and preorder traversal.... so if you have done that then do it.\\n# Code\\n```\\n\\n\\n//n points in a line has n! ways to arrange it thus for n=3 there are 6 ways but in answer only 5 are drawn why? since there are 2 fig which are symmetrical thus they are just written once...so how to check that it is unique or not? store it in set and then check.\\n\\n\\nclass Solution {\\npublic:\\nvector<TreeNode*>ans;\\nset<vector<int>>st;\\nvector<int>preo;\\n\\n// preorder\\nvoid traverse(TreeNode*root)\\n{\\n   if(root==NULL)\\n    return;\\n    preo.push_back(root->val);\\n    traverse(root->left);\\n    traverse(root->right);  \\n}\\nbool check(TreeNode*ptr)\\n{\\n  // return true if it is unique\\n   vector<int>preorder;\\n   preo=preorder;//reset the preo since it is global\\n   traverse(ptr);\\n   for(int i=0;i<preo.size();i++)\\n   cout<<preo[i]<<\" \";\\n   cout<<endl;\\n   if(st.find(preo)==st.end())\\n   {\\n     st.insert(preo);\\n   return true;\\n   }\\n   return false;\\n}\\n\\n//creating bst\\n\\nTreeNode*bst(TreeNode*root,int key)\\n{\\n    if(root==NULL)\\n    {\\n      TreeNode*temp=new TreeNode(key);\\n     temp->left=NULL;\\n     temp->right=NULL;\\n     return temp;\\n    }\\n\\n  if(key>root->val)\\n    root->right=bst(root->right,key);\\n  else\\n    root->left=bst(root->left,key);\\n\\n  return root;\\n}\\n\\nvoid create_bst(vector<int>&nums)\\n{\\nTreeNode*root=new TreeNode(nums[0]);//make root\\nroot->left=NULL;\\nroot->right=NULL;\\n\\n  for(int i=1;i<nums.size();i++)\\n   root=bst(root,nums[i]);//get always updated root\\n\\n   if(check(root))\\n    ans.push_back(root);\\n}\\n\\n//make all possible combination..permutation\\nvoid func(vector<int>&nums,int index)\\n{\\n  if(index==nums.size())\\n  {\\n      create_bst(nums);\\n      return;\\n  }\\n  for(int i=index;i<nums.size();i++)\\n  {\\n      swap(nums[index],nums[i]);\\n      func(nums,index+1);\\n      swap(nums[index],nums[i]);\\n  }\\n}\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<int>nums;\\n        for(int i=1;i<=n;i++)\\n         nums.push_back(i);\\n         func(nums,0);\\n         return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\n\\n//n points in a line has n! ways to arrange it thus for n=3 there are 6 ways but in answer only 5 are drawn why? since there are 2 fig which are symmetrical thus they are just written once...so how to check that it is unique or not? store it in set and then check.\\n\\n\\nclass Solution {\\npublic:\\nvector<TreeNode*>ans;\\nset<vector<int>>st;\\nvector<int>preo;\\n\\n// preorder\\nvoid traverse(TreeNode*root)\\n{\\n   if(root==NULL)\\n    return;\\n    preo.push_back(root->val);\\n    traverse(root->left);\\n    traverse(root->right);  \\n}\\nbool check(TreeNode*ptr)\\n{\\n  // return true if it is unique\\n   vector<int>preorder;\\n   preo=preorder;//reset the preo since it is global\\n   traverse(ptr);\\n   for(int i=0;i<preo.size();i++)\\n   cout<<preo[i]<<\" \";\\n   cout<<endl;\\n   if(st.find(preo)==st.end())\\n   {\\n     st.insert(preo);\\n   return true;\\n   }\\n   return false;\\n}\\n\\n//creating bst\\n\\nTreeNode*bst(TreeNode*root,int key)\\n{\\n    if(root==NULL)\\n    {\\n      TreeNode*temp=new TreeNode(key);\\n     temp->left=NULL;\\n     temp->right=NULL;\\n     return temp;\\n    }\\n\\n  if(key>root->val)\\n    root->right=bst(root->right,key);\\n  else\\n    root->left=bst(root->left,key);\\n\\n  return root;\\n}\\n\\nvoid create_bst(vector<int>&nums)\\n{\\nTreeNode*root=new TreeNode(nums[0]);//make root\\nroot->left=NULL;\\nroot->right=NULL;\\n\\n  for(int i=1;i<nums.size();i++)\\n   root=bst(root,nums[i]);//get always updated root\\n\\n   if(check(root))\\n    ans.push_back(root);\\n}\\n\\n//make all possible combination..permutation\\nvoid func(vector<int>&nums,int index)\\n{\\n  if(index==nums.size())\\n  {\\n      create_bst(nums);\\n      return;\\n  }\\n  for(int i=index;i<nums.size();i++)\\n  {\\n      swap(nums[index],nums[i]);\\n      func(nums,index+1);\\n      swap(nums[index],nums[i]);\\n  }\\n}\\n    vector<TreeNode*> generateTrees(int n) {\\n        vector<int>nums;\\n        for(int i=1;i<=n;i++)\\n         nums.push_back(i);\\n         func(nums,0);\\n         return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3866084,
                "title": "one-liner-java-8-streams",
                "content": "\\n\\n# UPVOTE PLS \\uD83C\\uDD99\\uD83C\\uDD99\\uD83C\\uDD99\\uD83C\\uDD99\\u2B06\\uFE0F\\u2B06\\uFE0F\\n```java []\\npublic List<TreeNode> generateTrees(int n) {\\n   return generateTrees(1, n).toList();\\n }\\nprivate Stream<TreeNode> generateTrees(int min, int max) {\\n  return  (min > max) ? Stream.of((TreeNode) null) : IntStream.rangeClosed(min, max).boxed().flatMap(i -> generateTrees(min, i - 1).flatMap(left -> generateTrees(i + 1, max).map(right ->new TreeNode(i, left, right))));\\n }\\n```\\n\\n# CLEAN & READABLE WAY\\n\\n```JAVA []\\npublic List<TreeNode> generateTrees(int n) {\\n       return generateTrees(1, n).toList();\\n }\\nprivate Stream<TreeNode> generateTrees(int min, int max) {\\n       return  (min > max) ? Stream.of((TreeNode) null) : \\n       IntStream.rangeClosed(min, max).boxed()\\n       .flatMap(i -> generateTrees(min, i - 1)\\n       .flatMap(left -> generateTrees(i + 1, max)\\n       .map(right ->   new TreeNode(i, left, right))));\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java []\\npublic List<TreeNode> generateTrees(int n) {\\n   return generateTrees(1, n).toList();\\n }\\nprivate Stream<TreeNode> generateTrees(int min, int max) {\\n  return  (min > max) ? Stream.of((TreeNode) null) : IntStream.rangeClosed(min, max).boxed().flatMap(i -> generateTrees(min, i - 1).flatMap(left -> generateTrees(i + 1, max).map(right ->new TreeNode(i, left, right))));\\n }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3865915,
                "title": "video-solution-java-c",
                "content": "# Intuition, approach, and complexity dicussed in detail in video solution.\\n\\nhttps://youtu.be/9A4J6fSO1Ws\\n\\n# Code\\nC++\\n```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildBST(1, n);\\n    }\\n    private:\\n     vector<TreeNode*> buildBST(int start, int end){\\n        vector<TreeNode*> li;\\n        if(start > end){\\n            li.push_back(NULL);\\n            return li;\\n        }\\n        if(start == end){\\n            li.push_back(new TreeNode(start));\\n            return li;\\n        }\\n        for(int indx = start; indx<=end; indx++){\\n         vector<TreeNode*> leftNodeList = buildBST(start, indx-1);\\n         vector<TreeNode*> rightNodeList = buildBST(indx+1, end);\\n            for(TreeNode* leftSide : leftNodeList){\\n                for(TreeNode* rightSide : rightNodeList){\\n                    TreeNode* root = new TreeNode(indx);\\n                    root->left = leftSide;\\n                    root->right = rightSide;\\n                    li.push_back(root);\\n                }\\n            }\\n        }\\n        return li;\\n    }\\n};\\n```\\nJava\\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n\\n        return buildBST(1, n);\\n    }\\n    public List<TreeNode> buildBST(int start, int end){\\n\\n        List<TreeNode> li = new ArrayList<>();\\n\\n        if(start > end){\\n            li.add(null);\\n            return li;\\n        }\\n        if(start == end){\\n            li.add(new TreeNode(start));\\n            return li;\\n        }\\n\\n        for(int indx = start; indx<=end; indx++){\\n         List<TreeNode> leftNodeList = buildBST(start, indx-1);\\n         List<TreeNode> rightNodeList = buildBST(indx+1, end);\\n            for(TreeNode rightSide : rightNodeList){\\n                for(TreeNode leftSide : leftNodeList){\\n                    TreeNode root = new TreeNode(indx);\\n                    root.left = leftSide;\\n                    root.right = rightSide;\\n                    li.add(root);\\n                }\\n            }\\n        }\\n        return li;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generateTrees(int n) {\\n        return buildBST(1, n);\\n    }\\n    private:\\n     vector<TreeNode*> buildBST(int start, int end){\\n        vector<TreeNode*> li;\\n        if(start > end){\\n            li.push_back(NULL);\\n            return li;\\n        }\\n        if(start == end){\\n            li.push_back(new TreeNode(start));\\n            return li;\\n        }\\n        for(int indx = start; indx<=end; indx++){\\n         vector<TreeNode*> leftNodeList = buildBST(start, indx-1);\\n         vector<TreeNode*> rightNodeList = buildBST(indx+1, end);\\n            for(TreeNode* leftSide : leftNodeList){\\n                for(TreeNode* rightSide : rightNodeList){\\n                    TreeNode* root = new TreeNode(indx);\\n                    root->left = leftSide;\\n                    root->right = rightSide;\\n                    li.push_back(root);\\n                }\\n            }\\n        }\\n        return li;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    public List<TreeNode> generateTrees(int n) {\\n\\n        return buildBST(1, n);\\n    }\\n    public List<TreeNode> buildBST(int start, int end){\\n\\n        List<TreeNode> li = new ArrayList<>();\\n\\n        if(start > end){\\n            li.add(null);\\n            return li;\\n        }\\n        if(start == end){\\n            li.add(new TreeNode(start));\\n            return li;\\n        }\\n\\n        for(int indx = start; indx<=end; indx++){\\n         List<TreeNode> leftNodeList = buildBST(start, indx-1);\\n         List<TreeNode> rightNodeList = buildBST(indx+1, end);\\n            for(TreeNode rightSide : rightNodeList){\\n                for(TreeNode leftSide : leftNodeList){\\n                    TreeNode root = new TreeNode(indx);\\n                    root.left = leftSide;\\n                    root.right = rightSide;\\n                    li.add(root);\\n                }\\n            }\\n        }\\n        return li;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865419,
                "title": "recursion-easy-solution-using-left-and-right-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nBy using start and end variables to generate all the trees.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nNow let\\'s look how our helper function will work!\\n\\n1. As there will be trees with root as 1, 2, 3...n. Iterate through all values from start to end to construct tree rooted at i and construct its left and right subtree recursively.\\n2. We know that in Binary Search Tree all nodes in left subtree are smaller than root and in right subtree are larger than root. So for start = 1 and end = n, if we have ith number as root, all numbers from 1 to i-1 will be in left subtree and i+1 to n will be in right subtree.\\nTherefore, we will build the tree recursively for left and right subtrees rooted at i as leftSubTree = bst(start, i-1) and rightSubtree = bst(i + 1, end)\\nSo, till what moment we will recursively find the left and right subtrees?? Answer is until start < end!!\\nSo when start > end, add NULL to the list and return\\nThis will be our base case!\\n3. Now, we have leftSubtree and rightSubtree for node with root i. The last thing we need to do is connect leftSubTree and rightSubTree with root and add this tree(rooted at i) to the ans list!\\n\\uD83D\\uDCCC Here, we can have multiple left and right subtrees. So we need to loop through all left and right subtrees and connect every left subTree to right subTree and to current root(i) one by one.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n-> catalan Number(O(4^n/n^1.5)) * O(n) for generating the trees\\n-> O(4^n/n^0.5).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n-> recursion stack space.\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generate(int i, int j) {\\n        vector<TreeNode*> res;\\n        if(i > j) {\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int ind = i;ind <= j;ind++) {\\n            vector<TreeNode*> left = generate(i, ind-1);\\n            vector<TreeNode*> right = generate(ind+1, j);\\n            for(auto l: left) {\\n                for(auto r: right) {\\n                    TreeNode* root = new TreeNode(ind, l, r);\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(1, n);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Recursion"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * struct TreeNode {\\n *     int val;\\n *     TreeNode *left;\\n *     TreeNode *right;\\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\\n * };\\n */\\nclass Solution {\\npublic:\\n    vector<TreeNode*> generate(int i, int j) {\\n        vector<TreeNode*> res;\\n        if(i > j) {\\n            res.push_back(NULL);\\n            return res;\\n        }\\n        for(int ind = i;ind <= j;ind++) {\\n            vector<TreeNode*> left = generate(i, ind-1);\\n            vector<TreeNode*> right = generate(ind+1, j);\\n            for(auto l: left) {\\n                for(auto r: right) {\\n                    TreeNode* root = new TreeNode(ind, l, r);\\n                    res.push_back(root);\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n    vector<TreeNode*> generateTrees(int n) {\\n        return generate(1, n);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865343,
                "title": "c-solution-for-unique-binary-search-trees-ii-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the solution is to generate all possible structurally unique binary search trees using a recursive approach. For each node in the tree, we consider it as the root and generate all possible left and right subtrees for it. The result will be a combination of these subtrees, forming all the structurally unique BSTs with n nodes and unique values from 1 to n.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe approach involves a recursive function that takes the range of values (from start to end) and generates all the structurally unique BSTs within that range. It iterates through each possible root value in the range and generates all possible left and right subtrees. The base case is when start > end, in which case we return a list with a single element (null), representing an empty subtree.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of the solution is difficult to determine exactly due to the recursive nature. However, we can estimate it as follows: Let T(n) be the total number of unique BSTs generated for n nodes. For each node, we have to generate all possible left and right subtrees, and the total number of combinations will be the product of the number of left subtrees and the number of right subtrees. For i nodes in the left subtree and n-i-1 nodes in the right subtree (since i is the root), the number of combinations will be T(i) * T(n-i-1).\\n\\nSo, the overall time complexity can be approximated as T(n) = Sum(T(i) * T(n-i-1)) for i ranging from 0 to n-1. Calculating this sum is challenging, and it leads to the well-known Catalan Number, which grows at an exponential rate. The exact time complexity will be on the order of O(Catalan(n)), which is upper-bounded by O(4^n / (n^(3/2))). For the given constraints (n <= 8), this is a reasonable runtime.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is determined by the number of unique BSTs generated and stored in the result list. The maximum number of unique BSTs for n nodes will be equal to the n-th Catalan number, which is O(4^n / (n^(3/2))). Therefore, the space complexity is O(4^n / (n^(3/2))). Additionally, the recursive function will use space on the call stack, but since the maximum recursion depth is limited by n, the space complexity on the call stack is O(n).\\n\\n# Code\\n```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>(); // Edge case: no nodes, return an empty list\\n        return GenerateTrees(1, n);\\n    }\\n    private IList<TreeNode> GenerateTrees(int start, int end) {\\n        IList<TreeNode> result = new List<TreeNode>();\\n        \\n        if (start > end) {\\n            result.Add(null);\\n            return result;\\n        }\\n        \\n        for (int i = start; i <= end; i++) {\\n            IList<TreeNode> leftSubtrees = GenerateTrees(start, i - 1);\\n            IList<TreeNode> rightSubtrees = GenerateTrees(i + 1, end);\\n            \\n            foreach (var leftSubtree in leftSubtrees) {\\n                foreach (var rightSubtree in rightSubtrees) {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = leftSubtree;\\n                    root.right = rightSubtree;\\n                    result.Add(root);\\n                }\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\n/**\\n * Definition for a binary tree node.\\n * public class TreeNode {\\n *     public int val;\\n *     public TreeNode left;\\n *     public TreeNode right;\\n *     public TreeNode(int val=0, TreeNode left=null, TreeNode right=null) {\\n *         this.val = val;\\n *         this.left = left;\\n *         this.right = right;\\n *     }\\n * }\\n */\\npublic class Solution {\\n    public IList<TreeNode> GenerateTrees(int n) {\\n        if (n == 0) return new List<TreeNode>(); // Edge case: no nodes, return an empty list\\n        return GenerateTrees(1, n);\\n    }\\n    private IList<TreeNode> GenerateTrees(int start, int end) {\\n        IList<TreeNode> result = new List<TreeNode>();\\n        \\n        if (start > end) {\\n            result.Add(null);\\n            return result;\\n        }\\n        \\n        for (int i = start; i <= end; i++) {\\n            IList<TreeNode> leftSubtrees = GenerateTrees(start, i - 1);\\n            IList<TreeNode> rightSubtrees = GenerateTrees(i + 1, end);\\n            \\n            foreach (var leftSubtree in leftSubtrees) {\\n                foreach (var rightSubtree in rightSubtrees) {\\n                    TreeNode root = new TreeNode(i);\\n                    root.left = leftSubtree;\\n                    root.right = rightSubtree;\\n                    result.Add(root);\\n                }\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865261,
                "title": "python3-solution",
                "content": "\\n```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        @lru_cache\\n        def dfs(start,end):\\n            if start>end:\\n                return [None]\\n\\n            ans=[]\\n            for i in range(start,end+1):\\n                left=dfs(start,i-1)\\n                right=dfs(i+1,end)\\n                for l in left:\\n                    for r in right:\\n                        root=TreeNode(i)\\n                        root.left=l\\n                        root.right=r\\n                        ans.append(root)\\n            return ans\\n\\n        return dfs(1,n)                    \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n# Definition for a binary tree node.\\n# class TreeNode:\\n#     def __init__(self, val=0, left=None, right=None):\\n#         self.val = val\\n#         self.left = left\\n#         self.right = right\\nclass Solution:\\n    def generateTrees(self, n: int) -> List[Optional[TreeNode]]:\\n        @lru_cache\\n        def dfs(start,end):\\n            if start>end:\\n                return [None]\\n\\n            ans=[]\\n            for i in range(start,end+1):\\n                left=dfs(start,i-1)\\n                right=dfs(i+1,end)\\n                for l in left:\\n                    for r in right:\\n                        root=TreeNode(i)\\n                        root.left=l\\n                        root.right=r\\n                        ans.append(root)\\n            return ans\\n\\n        return dfs(1,n)                    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865256,
                "title": "kotlin-backtrack-bitmask-hash",
                "content": "![image.png](https://assets.leetcode.com/users/images/80b9e58a-96ec-4d58-b8e7-08e9915a8772_1691208464.22039.png)\\n\\n#### Join me on Telegram\\n\\nhttps://t.me/leetcode_daily_unstoppable/299\\n\\n#### Problem TLDR\\n\\nAll possible Binary Search Trees for 1..n numbers\\n\\n#### Intuition\\n\\nOne way to build all possible BST is to insert numbers in all possible ways. We can do this with a simple backtracking, given the small `n <= 8`. To remove duplicates, we can print the tree and use it as a hash key.\\n\\n#### Approach\\n\\n* use a bit mask and a Stack for backtracking\\n\\n#### Complexity\\n- Time complexity:\\n\\n$$O(n!* nlog(n))$$, as the recursion depth is n, each time iterations go as n * (n - 1) * (n - 2) * ... * 2 * 1, which is equal to n!. The final step of inserting elements is nlog(n), and building a hash is n, which is < nlogn, so not relevant.\\n\\n- Space complexity:\\n\\n$$O(n!)$$, is a number of permutations\\n\\n#### Code\\n\\n```kotlin\\n\\n\\n    fun insert(x: Int, t: TreeNode?): TreeNode = t?.apply {\\n        if (x > `val`) right = insert(x, right)\\n        else left = insert(x, left)\\n      } ?: TreeNode(x)\\n    fun print(t: TreeNode): String = \\n      \"[${t.`val`} ${t.left?.let { print(it) }} ${t.right?.let { print(it) }}]\"\\n    fun generateTrees(n: Int): List<TreeNode?> {\\n      val stack = Stack<Int>()\\n      val lists = mutableListOf<TreeNode>()\\n      fun dfs(m: Int): Unit = if (m == 0) \\n          lists += TreeNode(stack[0]).apply { for (i in 1 until n) insert(stack[i], this) }\\n        else for (i in 0 until n) if (m and (1 shl i) != 0) {\\n          stack.push(i + 1)\\n          dfs(m xor (1 shl i))\\n          stack.pop()\\n        }\\n      dfs((1 shl n) - 1)\\n      return lists.distinctBy { print(it) }\\n    }\\n\\n```\\nAnother divide-and-conquer solution, that I didn\\'t think of\\n![image.png](https://assets.leetcode.com/users/images/470b3a9f-5e0b-432b-a1fc-33a966ab2d36_1691213657.5075893.png)\\n\\n",
                "solutionTags": [
                    "Kotlin",
                    "Backtracking",
                    "Depth-First Search",
                    "Bitmask"
                ],
                "code": "```kotlin\\n\\n\\n    fun insert(x: Int, t: TreeNode?): TreeNode = t?.apply {\\n        if (x > `val`) right = insert(x, right)\\n        else left = insert(x, left)\\n      } ?: TreeNode(x)\\n    fun print(t: TreeNode): String = \\n      \"[${t.`val`} ${t.left?.let { print(it) }} ${t.right?.let { print(it) }}]\"\\n    fun generateTrees(n: Int): List<TreeNode?> {\\n      val stack = Stack<Int>()\\n      val lists = mutableListOf<TreeNode>()\\n      fun dfs(m: Int): Unit = if (m == 0) \\n          lists += TreeNode(stack[0]).apply { for (i in 1 until n) insert(stack[i], this) }\\n        else for (i in 0 until n) if (m and (1 shl i) != 0) {\\n          stack.push(i + 1)\\n          dfs(m xor (1 shl i))\\n          stack.pop()\\n        }\\n      dfs((1 shl n) - 1)\\n      return lists.distinctBy { print(it) }\\n    }\\n\\n```",
                "codeTag": "Python3"
            }
        ],
        "discussions": [
            {
                "id": 1735731,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1849998,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1751837,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1574175,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1965487,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 2000434,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1571208,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1567854,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1567191,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 2000901,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1735731,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1849998,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1751837,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1574175,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1965487,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 2000434,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1571208,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1567854,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1567191,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 2000901,
                "content": [
                    {
                        "username": "pieceofpie",
                        "content": "If you get this question during an interview, they don\\'t want to hire you."
                    },
                    {
                        "username": "Balerii",
                        "content": "Too bed for them \\uD83D\\uDE02. They\\'ll have to hire me."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "\\uD83D\\uDE01"
                    },
                    {
                        "username": "riteshnparkhi",
                        "content": "rofl"
                    },
                    {
                        "username": "Veeno_Rai",
                        "content": "true! lol"
                    },
                    {
                        "username": "Denis-onyango",
                        "content": "hahahhahaa"
                    },
                    {
                        "username": "AMerrill",
                        "content": "Ordinarily, I feel a sense of pride when I solve a problem, but with this problem I will make an exception. I like my code, but I\\'m not happy that I had to write it.\\n\\nFor those who have stumbled onto this problem, blissfully ignorant of the treacherous path that lies ahead, heed the warnings of a wounded warrior, who made it to the end just to realize the only reward you will receive is the life you\\'ve spent and will never get back. Continue on your journey in another direction, and don\\'t look back upon the wasteland that is this problem."
                    },
                    {
                        "username": "JiayingGao",
                        "content": "Cannot agree more."
                    },
                    {
                        "username": "sarpalmadhav",
                        "content": "[@AMerrill](/AMerrill) Hah! That\\'s why I don\\'t like Leetcode Discussion section because advices from sagacious warriors like you get drowned in spammy comments."
                    },
                    {
                        "username": "DonjonMaster",
                        "content": "How is this medium? Seriously? permutations and building binary search tree? For real?"
                    },
                    {
                        "username": "AssortedFantasy",
                        "content": "The problem really isn\\'t that complex if you have a good understanding of recursion. Particularly, this problem basically boils down to:\\n\\nPossible trees from [a, b) is exactly all combinations of trees from\\n[a, x) and [x, b) for all x in [a, b). Plus the base case where a==b being [None].\\n\\nIf you use itertools.product this can be done in like 10 lines of Python code total."
                    },
                    {
                        "username": "agrawalishaan",
                        "content": "To be honest I think medium is right. The problem is a little cumbersome at first with building trees as opposed to lists for instance. But once you start to code it out it is not so bad. They accept pretty naive solutions that serialize and serialize copies of the tree, due to the low constraint."
                    },
                    {
                        "username": "SAKSHAM11_",
                        "content": "yeah,leetcode difficulty tags are broken nowdays"
                    },
                    {
                        "username": "mikel512",
                        "content": "Seriously, this is straight up alien stuff. Even when looking up the algorithm I had no idea how to implement it."
                    },
                    {
                        "username": "mcasavant",
                        "content": "I just think that the problem could have used more explanation. Looking at the question after having unlocked the answer it's now much more obvious what they are looking for. Perhaps on a problem like this one it would be a good idea to state the ask in more than one way. Be more specific. I think this question could easily have phrased:\n\n\"Construct every possible permutation of structurally unique trees from a range of numbers 1...n\".\n\nThat's about as long but twice as specific."
                    },
                    {
                        "username": "thainguyenCSE",
                        "content": "Why do people keep saying this's hard, I just go through the editorial and.... :D"
                    },
                    {
                        "username": "poundppx",
                        "content": "uhm .... since u step into another side can you give us some hint !!! one for all!"
                    },
                    {
                        "username": "divyamahankali29",
                        "content": "that\\'s why."
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "hard enough to make u go through the editorial :v"
                    },
                    {
                        "username": "ALS_Venky",
                        "content": "This is why i love leetcode, same concept problems will be given for somedays and increases the depth of questions day by day."
                    },
                    {
                        "username": "wangshuoyuan2",
                        "content": "can\\'t agree more. But to some degree it gives some hint which I don\\'t want to know, haha"
                    },
                    {
                        "username": "Gillu13",
                        "content": "I am wondering if it is relevant to keep 0 in the test cases? Indeed, it is clearly stated in the problem description that n in greater than 1, then testing 0 as an input is kind of \"off topic\", isn't it?"
                    },
                    {
                        "username": "Tony_Zhang",
                        "content": "The return type of generateTrees is a vector only, so when n = 0, it should return [], not [[]].\\n\\nplease let me know, if I am wrong."
                    },
                    {
                        "username": "vivekyadav7272",
                        "content": "Hey bro. It\\'s been some time. Just checking up on you if you\\'re alive and kicking :)"
                    },
                    {
                        "username": "exquiro",
                        "content": "This comment is of 2015... Give him a break guys xD"
                    },
                    {
                        "username": "Harsh-br0",
                        "content": "[@kushalnagwanshicloud](/kushalnagwanshicloud) according to constraints, this shouldn\\'t be the way\\n"
                    },
                    {
                        "username": "void-pointer",
                        "content": "As per the constraints given for n. [1 <= n <= 8]\\nn cannot be 0."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it just means there is a tree possible , which has it\\'s root as NULL ."
                    },
                    {
                        "username": "dylan_yu",
                        "content": "I don't think it makes any sense to do so. When n is 0, we just cannot generate any trees, so the list should be empty."
                    },
                    {
                        "username": "sneha_bk",
                        "content": "Can anybody tell me why unordered_map dp is giving Runtime error while map dp is getting accepted\nmap<pair<int,int>,vector<TreeNode*>> dp; // This dp is getting accepted \nwhile\nunordered_map<pair<int,int>,vector<TreeNode*>> dp; // This is giving Runtime error.\n\nhttps://leetcode.com/submissions/detail/1012767578/ \n Kindly provide some suggestion"
                    },
                    {
                        "username": "sneha_bk",
                        "content": "[@HimanshuShekhar18](/HimanshuShekhar18) Thank you for clearing this"
                    },
                    {
                        "username": "HimanshuShekhar18",
                        "content": "valid keys datatype\\n      unordered_map<pair<int,int>, string>m;    //compilation error\\n      map<pair<int,int>, string>m;        // runs\\n\\n Reason:- Pair/vector/set don\\'t have inbuilt hash function defined, that\\'s why they won\\'t work with unordered map"
                    },
                    {
                        "username": "gulbi_bk",
                        "content": "I am also confused about this part. Someone please clarify this..."
                    },
                    {
                        "username": "OakNoob",
                        "content": "I am also confused about the same...!!.\\nIs there can who can clarify this..."
                    }
                ]
            },
            {
                "id": 1567855,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 1570582,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 1571209,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 1571210,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2000375,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2001657,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2000446,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2000428,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 1984547,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2069142,
                "content": [
                    {
                        "username": "MitchellHe",
                        "content": "What does [{}] mean? An ArrayList<TreeNode> of length one containing one null value?\\n-------------------------------------------------------------------------------------------------------------\\nWrong Answer:\\n\\nInput: \\t0\\nOutput: \\t[]\\nExpected: \\t[{}]\\n\\nThanks in advance."
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is how you represent empty array of array\nor vector<vector<datatype>> (in c++)\nbut here ,  it means that you have a tree with root as null pointer"
                    },
                    {
                        "username": "user6141Q",
                        "content": "Can someone please explain a little more about the question? For example:\\n1. In which order the first example is given?\\n2. Why [1, 2, 3] isn\\'t in the first example\\'s answer?"
                    },
                    {
                        "username": "Hoaibao_21520628",
                        "content": "2.\\nBecause, [1, 2, 3] IS a Binary Tree, but it IS NOT a Binary Search Tree"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "it is in level order traversal , that is why [1, 2 , 3] is not in the answer . \\n\\nif you make a binary search tree from [1,2,3]\\nyou will get ->\\n          1\\n        2    3 \\n\\nwhich is not a bst , as 2 > 1 it should be in the right subtree of 1 .\\nhope you got it .\\n  "
                    },
                    {
                        "username": "binhope",
                        "content": "Input:\\t2\\nOutput:\\t[{1,2},{1,#,2}]\\nExpected:\\t[{1,#,2},{2,1}]\\n.i'm confused with the expected.Is the answer is th unique?i think the struct of the tree is right,\\nbut the order is wrong. i want to ask what is the standard answer.thanks:)"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "your tree is wrong {1, 2} actually has 2 as the left child , which is wrong for a binary search tree , 2 > 1 so it should always be in the right subtree of 1 ."
                    },
                    {
                        "username": "makeittrue",
                        "content": "can't pass the judge, but give such output. I think this should be fine according to the problem?\\n\\nInput:\\t2\\nOutput:\\t[{2,#,1},{2,1}]\\nExpected:\\t[{1,#,2},{2,1}]"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "bro  [2, #, 1] is wrong as  1 < 2 it should come in the left subtree , but it is coming in the right subtree , ( see the output is displayed in level order traversal ) "
                    },
                    {
                        "username": "anwendeng",
                        "content": "This is related to Catalan numbers and done few days ago! Resubmit"
                    },
                    {
                        "username": "moraalejandro94",
                        "content": "Definitely a hard problem lol. Much harder than previous backtracking mediums"
                    },
                    {
                        "username": "Nibaron_RUET",
                        "content": "It is only Day 5 and Leetcode has decided to laugh on my skill. \\uD83D\\uDC38"
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Once you see the answer in the editorial, it makes a lot more sense. I concur with other people who had a hard time knowing how to approach this... The thought struck me of building all the smaller subtrees first, but I was having a hard time figuring out how to implement it. Editorial is helpful in understanding the solution."
                    },
                    {
                        "username": "SigmaCoder106",
                        "content": "Once you are done with this question, you might want to try the following one which is a variation but is based on the same algorithm.\n\n[894. All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/description/)\n\nIts a bit tricker as well."
                    },
                    {
                        "username": "vrajpatelll",
                        "content": "can i have some hints about solution of this question?"
                    }
                ]
            },
            {
                "id": 2066399,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2056253,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2048646,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2002955,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001639,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001616,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001604,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001592,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001476,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001084,
                "content": [
                    {
                        "username": "puppyslife",
                        "content": "Can someone please help me understand the time complexity for solution 1"
                    },
                    {
                        "username": "SeineAle",
                        "content": "IDK, But where was DP in that ?\\n"
                    },
                    {
                        "username": "AlexanderFSP",
                        "content": "A naive approach might be (brute force) - for each number from `1` to `n` define values ​​that should be in the left and right subtrees. Do this recursively for each number in the left and right arrays. This recursive function must return the value of the currently processed node and all combinations between the resulting left and right subtrees. I hope this helps someone get closer to the answer or find their own better solution."
                    },
                    {
                        "username": "obbl",
                        "content": "I think that answer  for n = 3\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[2,1,null,null,3]`,[3,2,null,1]]\nis true as well, however it is suggested that the only true answer is\n[[1,null,2,null,3],[1,null,3,2],[2,1,3],`[3,1,null,null,2]`,[3,2,null,1]]\nwell, they are structurally the same and I don't get why one is true while the other isn't.\nDid I miss something or tests are not covering my solution? If I am wrong, please point where\n"
                    },
                    {
                        "username": "schatterjee380",
                        "content": "Does anyone know the time complexity for the brute force solution?"
                    },
                    {
                        "username": "unters",
                        "content": "According to my very rough calculation, time complexity for worst brute force solution is `O( ( (2 ^ n)! * n! * (2 ^ n * n) ) / (2 ^ n - n)! )`.\n\nAs far as I understand, brute force consists of going through all possible arrays, that might or might not represent a valid BST.\n\nAs far as a BST with `n` nodes can not have height greater than `n`, an array representation of such BST can not contain more then `2 ^ n` elements.\n\nThere are `(2 ^ n)! / (2 ^ n - n)!` ways to choose `n` elements in an array of size `2 ^ n`.\n\nFor each choice of `n` elements there are n! ways to assign nodes with distinct values from `1` through `n` to these chosen elements (array is initially filled with `null`s).\n\nBuilding a BST using one array representation takes `O(2 ^ n * n)` time (`2 ^ n` elements in an array; inserting an element takes `O(log(2 ^ n))` time."
                    },
                    {
                        "username": "daring-calf",
                        "content": "To my surprise, pure brute force worked!"
                    },
                    {
                        "username": "abhinav_singh987",
                        "content": "Man, It fells so good to solve this on my own!! \\uD83E\\uDD70"
                    },
                    {
                        "username": "mshoosterman",
                        "content": "Some tips for this problem: Dont worry too much about runtime. So long as you write code somewhat efficiently, using an inefficient algorithm will be fine with this problem as in the input sizes are tiny. (I just mean, dont do foolish things like using .get() on a linked list rather than iterating through it, in that case use an array or an array list, etc). \\n\\nNotice that the left tree must always contain all values less than the head, and the right tree must always contain all values greater than the head. This makes for a really simple recursive solution. It is exponential time, but with a maximum input size of 8, its fine! \\n\\nA tip to make things even easier, just make the argument of your recursive function a list of all the nodes it needs to use. It should anyways output a list of all trees using those nodes. (This isn\\'t necessary at all, but it makes the logic easier atleast for me). "
                    },
                    {
                        "username": "breathermachine",
                        "content": "I didn't even pass in a list to my recursive function, only two int parameters: min and max. The recursive function then generates all trees using all the values from min to max:\n\nhttps://leetcode.com/problems/unique-binary-search-trees-ii/submissions/1013076716/"
                    },
                    {
                        "username": "m-d-nabeel",
                        "content": "[All Possible Full Binary Trees](https://leetcode.com/problems/all-possible-full-binary-trees/) \n\nThis question is a lot similar but I don't know why it has 82% acceptance rate I couldn't solve it.😢"
                    },
                    {
                        "username": "mudhapakamanohar",
                        "content": "how \n1\n    \\\\\\\\\\\\\n       3\n    /\n2\n\nis a BST? 2 is coming right side to 1. How is it a BST? Anyone please explain."
                    },
                    {
                        "username": "kush_sach",
                        "content": "If you write down the In-order traversal for this tree, as per the recursive rule \"(left subtree) root (right subtree)\", it shall be: 1,2,3. Perfectly correct.\\n\\nRemember that a subtree itself is a tree. So, first you choose 1 as a root, for which the right child is 3. Your order is:    1, <order of right subtree with root as 3>\\nTo fill in the order for the subtree that has 3 as its root, you must treat it as a tree in itself as well. Therefore, evidently, 1, < <left subtree with root as 2> , 3 >\\nWhich is simply: 1, 2, 3\\n\\nWhat I\\'ve said is merely a rephrased version of the other two replies. The in-order traversal is basically the same thing as the condition that all node elements in a left (sub)tree should be lesser than the root element, and the node elements in the right (sub)tree should all be larger."
                    },
                    {
                        "username": "unters",
                        "content": "In BST a key of each internal node is greater than all the keys in the respective node\\'s left subtree and less than the ones in its right subtree. Your BST satisfies this property."
                    },
                    {
                        "username": "Yashwantptl794",
                        "content": "as per BST, nodes to the right should be greater than root. 2 must come right to 1 only."
                    }
                ]
            },
            {
                "id": 2001067,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000948,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000937,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000916,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000895,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000783,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000771,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000707,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000698,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            },
            {
                "id": 2000494,
                "content": [
                    {
                        "username": "charant587",
                        "content": "I got up with dfs approach after think for an 20 minutes can we use dp for this????"
                    },
                    {
                        "username": "KirtanMakwana",
                        "content": "why unordered_map giving error and map doesnt? while memoization."
                    },
                    {
                        "username": "unters",
                        "content": "`std::unordered_map` organizes its elements using a hash table. This imposes requirements on the key-type:\n\n1. default hash functor `std::hash<>` must be specialized for key-type (there is no such requirement when using `std::map`);\n\n2. A comparison function for equality must be defined for key-type (when using `std::map` the equivalent requirement is that keys must be comparable).\n\nI guess you use a user-defined key-type that has no `std::hash<>` specialization, but that has comparison functions."
                    },
                    {
                        "username": "ahmed___",
                        "content": "Medium??"
                    },
                    {
                        "username": "algoacer",
                        "content": "call to implicitly-deleted default constructor of \\'Solution\\'.  Generate the required memo dp within the generate Trees function. Congrats on completing such an interesting problem."
                    },
                    {
                        "username": "dikshawali",
                        "content": "My solution is beating only 5% of users. \\n1. I have used DP\\n2. Despite having recursive solution, my program is having n3 time complexity.\\ncan anyone suggest ways to decrease time complexity?"
                    },
                    {
                        "username": "breathermachine",
                        "content": "Write a helper _generateTrees method that takes in two parameters: the min and the max then use it recursively to generate the subtrees.\\n\\nThe loop looks like:\\n```\\nfor i in min to max:\\n   leftTrees = generateTrees(min, i - 1)\\n   rightTrees = generateTrees(i + 1, max)\\n   // combine left and right subtrees using a double for loop\\nreturn\\n```\\n\\n"
                    },
                    {
                        "username": "sarvesh_mankar",
                        "content": "If you are finding this challenge really tough then try out [Leetcode Challenge 96](https://leetcode.com/problems/unique-binary-search-trees/) first! It will help you in developing this solution."
                    },
                    {
                        "username": "Sergei_Gusev",
                        "content": "People, please VOTE for this PETITION to save OLD Study Plans: https://leetcode.com/discuss/feedback/3832685/petition-dont-kick-off-old-study-plans-we-love-it"
                    },
                    {
                        "username": "dkochetov",
                        "content": "I overcomplicated my solution by using bitmasking and memoization. You don\\'t need any of these for this problem :)"
                    },
                    {
                        "username": "Jaiff",
                        "content": "Hate to say it but with N<=8 isn\\'t this question easy? "
                    },
                    {
                        "username": "a8hi",
                        "content": "LeetCode Daily Has been Real Kind"
                    }
                ]
            }
        ]
    },
    {
        "title": "Tenth Line",
        "question_content": "<p>Given a text file&nbsp;<code>file.txt</code>, print&nbsp;just the 10th line of the&nbsp;file.</p>\r\n\r\n<p><strong class=\"example\">Example:</strong></p>\r\n\r\n<p>Assume that <code>file.txt</code> has the following content:</p>\r\n\r\n<pre>\r\nLine 1\r\nLine 2\r\nLine 3\r\nLine 4\r\nLine 5\r\nLine 6\r\nLine 7\r\nLine 8\r\nLine 9\r\nLine 10\r\n</pre>\r\n\r\n<p>Your script should output the tenth line, which is:</p>\r\n\r\n<pre>\r\nLine 10\r\n</pre>\r\n\r\n<div class=\"spoilers\"><b>Note:</b><br />\r\n1. If the file contains less than 10 lines, what should you output?<br />\r\n2. There&#39;s at least three different solutions. Try to explore all possibilities.</div>\r\n",
        "solutions": [
            {
                "id": 55544,
                "title": "share-four-different-solutions",
                "content": "\\n    # Solution 1\\n    cnt=0\\n    while read line && [ $cnt -le 10 ]; do\\n      let 'cnt = cnt + 1'\\n      if [ $cnt -eq 10 ]; then\\n        echo $line\\n        exit 0\\n      fi\\n    done < file.txt\\n\\n    # Solution 2\\n    awk 'FNR == 10 {print }'  file.txt\\n    # OR\\n    awk 'NR == 10' file.txt\\n\\n    # Solution 3\\n    sed -n 10p file.txt\\n\\n    # Solution 4\\n    tail -n+10 file.txt|head -1",
                "solutionTags": [],
                "code": "\\n    # Solution 1\\n    cnt=0\\n    while read line && [ $cnt -le 10 ]; do\\n      let 'cnt = cnt + 1'\\n      if [ $cnt -eq 10 ]; then\\n        echo $line\\n        exit 0\\n      fi\\n    done < file.txt\\n\\n    # Solution 2\\n    awk 'FNR == 10 {print }'  file.txt\\n    # OR\\n    awk 'NR == 10' file.txt\\n\\n    # Solution 3\\n    sed -n 10p file.txt\\n\\n    # Solution 4\\n    tail -n+10 file.txt|head -1",
                "codeTag": "Unknown"
            },
            {
                "id": 55537,
                "title": "my-three-simple-solutions",
                "content": "    # Read from the file file.txt and output the tenth line to stdout.\\n    \\n    #Solution One:\\n    #head -n 10 file.txt | tail -n +10\\n    \\n    #Solution Two:\\n    #awk 'NR==10' file.txt\\n    \\n    #Solution Three:\\n    sed -n 10p file.txt",
                "solutionTags": [],
                "code": "    # Read from the file file.txt and output the tenth line to stdout.\\n    \\n    #Solution One:\\n    #head -n 10 file.txt | tail -n +10\\n    \\n    #Solution Two:\\n    #awk 'NR==10' file.txt\\n    \\n    #Solution Three:\\n    sed -n 10p file.txt",
                "codeTag": "Unknown"
            },
            {
                "id": 3218908,
                "title": "195-solution-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nExplanation:\\n\\n- The sed command is used to edit a stream of text, and -n option is used to suppress the output.\\n- The 10p command prints only the 10th line of the input file. So, \\'10p\\' prints the 10th line.\\n\\nNote:\\n\\n- If the file has less than 10 lines, then the script will output nothing.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nThis can be solved using the sed command. Here\\'s a one-liner bash script that accomplishes this:\\n\\n```\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2281857,
                "title": "easy-explaination-with-1-line-code",
                "content": "```\\nawk \\'NR==10\\' file.txt\\n```\\nHere awk is the build in function which is used to manipulate files, to extract data from files, NR is used for No. of Records which are usually no. of lines in the file. \\nfile.txt is the input file which has to be read.",
                "solutionTags": [],
                "code": "```\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2693040,
                "title": "4-solutions-easy-understanding",
                "content": "**Solution 1**\\n```\\ncnt=0\\nwhile read line && [ $cnt -le 10 ]; do\\n  let \\'cnt = cnt + 1\\'\\n  if [ $cnt -eq 10 ]; then\\n    echo $line\\n    exit 0\\n  fi\\ndone < file.txt\\n```\\n\\n\\n**Solution 2**\\n\\n`awk \\'FNR == 10 {print }\\'  file.txt`\\n \\n**(*Another way of writing*)**\\n\\n```\\nawk \\'NR == 10\\' file.txt\\n```\\n\\n**Solution3**\\n```\\n\\nsed -n 10p file.txt\\n```\\n\\n**Solution 4**\\n\\n```\\n\\ntail -n+10 file.txt|head -1\\n```",
                "solutionTags": [],
                "code": "```\\ncnt=0\\nwhile read line && [ $cnt -le 10 ]; do\\n  let \\'cnt = cnt + 1\\'\\n  if [ $cnt -eq 10 ]; then\\n    echo $line\\n    exit 0\\n  fi\\ndone < file.txt\\n```\n```\\nawk \\'NR == 10\\' file.txt\\n```\n```\\n\\nsed -n 10p file.txt\\n```\n```\\n\\ntail -n+10 file.txt|head -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559470,
                "title": "bash-summarize-a-few-solutions",
                "content": "It is natural to consider `head -10 file.txt | tail -1` as the candidate which cannot output the 10th line if the file has fewer than 10 lines. But it can be easily fixed as below. \\n```\\ntail -n+10 file.txt | head -1\\n```\\n\\nAlternatively, `sed`, `awk`, `cut` and `mapfile` can do the job as well (e.g. below)\\n```\\nsed -n \\'10p\\' file.txt\\n```\\n\\n```\\ncut -f10 -d$\\'\\\\n\\' file.txt\\n```\\n\\n```\\nawk \\'NR==10\\' file.txt\\n```\\n\\n```\\nmapfile -s 9 -n 1 array < file.txt\\necho \"${array[0]}\" | head -1\\n```\\n\\nLast but not least, the most flexible solution would be writing ones own script. \\n```\\nno=0                                                                  \\nwhile IFS= read -r line                                               \\ndo                                                                        \\n    ((no=$no+1))\\n    if [[ $no -eq 10 ]]                                                   \\n    then                                                                      \\n        echo $line\\n\\t\\tbreak\\n    fi                                                                \\ndone < \"file.txt\"    \\n```",
                "solutionTags": [],
                "code": "```\\ntail -n+10 file.txt | head -1\\n```\n```\\nsed -n \\'10p\\' file.txt\\n```\n```\\ncut -f10 -d$\\'\\\\n\\' file.txt\\n```\n```\\nawk \\'NR==10\\' file.txt\\n```\n```\\nmapfile -s 9 -n 1 array < file.txt\\necho \"${array[0]}\" | head -1\\n```\n```\\nno=0                                                                  \\nwhile IFS= read -r line                                               \\ndo                                                                        \\n    ((no=$no+1))\\n    if [[ $no -eq 10 ]]                                                   \\n    then                                                                      \\n        echo $line\\n\\t\\tbreak\\n    fi                                                                \\ndone < \"file.txt\"    \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1831670,
                "title": "python-one-liner-abomination",
                "content": "```\\npython3 -c \\'a = [l for l in open(\"file.txt\")]; print(\"\" if len(a) < 10 else a[9].strip())\\'\\n```",
                "solutionTags": [],
                "code": "```\\npython3 -c \\'a = [l for l in open(\"file.txt\")]; print(\"\" if len(a) < 10 else a[9].strip())\\'\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1772093,
                "title": "tenth-line",
                "content": "```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2053537,
                "title": "simple-solution-without-using-sed-and-awk",
                "content": "Super Simple Solution....\\nUpvote it, if you like it....\\n\\n```\\na=`cat file.txt | wc -l`\\nb=9\\nif [[ $a -gt 9 ]]\\nthen\\n{\\ncat file.txt | head -n 10 | tail -n 1\\n}\\nfi\\n```",
                "solutionTags": [],
                "code": "```\\na=`cat file.txt | wc -l`\\nb=9\\nif [[ $a -gt 9 ]]\\nthen\\n{\\ncat file.txt | head -n 10 | tail -n 1\\n}\\nfi\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2241809,
                "title": "two-line-bash-code-solution",
                "content": "**Solution -**\\n1. Read first 10 lines from the file into an array.\\n2. Print the value of 10th index of the array.\\n\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#!/bin/bash\\n\\nreadarray -n 10 -t arr < \\'file.txt\\' && echo \"${arr[9]}\"\\n```\\n\\nHope it is helpful to you. Please upvote, thank you.",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#!/bin/bash\\n\\nreadarray -n 10 -t arr < \\'file.txt\\' && echo \"${arr[9]}\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 766136,
                "title": "simple-of-simple",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nindex=0\\ncat file.txt | while read line\\ndo\\n    index=$index+1\\n    if [[ index -eq 10 ]]; then\\n        echo $line\\n        break\\n    fi\\ndone\\n```",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nindex=0\\ncat file.txt | while read line\\ndo\\n    index=$index+1\\n    if [[ index -eq 10 ]]; then\\n        echo $line\\n        break\\n    fi\\ndone\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3471767,
                "title": "solution-with-sed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1620364,
                "title": "head-tail-trick",
                "content": "```\\nhead -n 10 file.txt | tail -n +10\\n```\\n\\nI\\'m sure someone already posted this, but....\\n\\n1) Pass file.txt through head, getting only 10 lines.\\n2) Pipe output of head to tail, getting everything from 10th line (which should just be the 10th line).\\n",
                "solutionTags": [],
                "code": "```\\nhead -n 10 file.txt | tail -n +10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2252727,
                "title": "simple-bash-solution",
                "content": "```\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1476608,
                "title": "84-11-faster-than-all-submissions-with-head-tail-command",
                "content": "```\\n head -n 10 file.txt | tail -n +10\\n ```",
                "solutionTags": [],
                "code": "```\\n head -n 10 file.txt | tail -n +10\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1276426,
                "title": "a-few-solutions",
                "content": "`tail -n +10 file.txt | head -1`\\n`sed -n \\'10p\\' file.txt`\\n`awk \\'NR == 10\\' file.txt`\\n```\\n#!/usr/bin/bash\\ni=0 \\nwhile IFS= read -r l; do \\n        (( ++i == 10 )) && { \\n                echo \"$l\"\\n                exit 0\\n        } \\ndone <file.txt\\n```",
                "solutionTags": [],
                "code": "```\\n#!/usr/bin/bash\\ni=0 \\nwhile IFS= read -r l; do \\n        (( ++i == 10 )) && { \\n                echo \"$l\"\\n                exit 0\\n        } \\ndone <file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1185039,
                "title": "pure-bash-solution",
                "content": "```\\n#Read from the file file.txt and output the tenth line to stdout.\\nline=0\\nwhile read l; do\\n    line=$(($line+1))\\n    if [[ $line -eq 10 ]]; then\\n        echo $l;\\n        exit;\\n    fi;\\ndone < file.txt\\necho \"\";\\n```\\n",
                "solutionTags": [],
                "code": "```\\n#Read from the file file.txt and output the tenth line to stdout.\\nline=0\\nwhile read l; do\\n    line=$(($line+1))\\n    if [[ $line -eq 10 ]]; then\\n        echo $l;\\n        exit;\\n    fi;\\ndone < file.txt\\necho \"\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1170820,
                "title": "100-faster-easy-solution",
                "content": "```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1115189,
                "title": "simple-solution-with-head-and-tac",
                "content": "Here\\'s my simple solution with `head` and `tac` commands (inverse of `cat`)\\n```\\nhead file.txt | tac | head -n -9\\n```",
                "solutionTags": [],
                "code": "```\\nhead file.txt | tac | head -n -9\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 962969,
                "title": "pure-bash-solution-for-printing-10th-line",
                "content": "No Awk, Sed, Grep, etc.  Just using straight bash scripting. If there is not at least 10 lines it doesn\\'t produce output and if there are more it just stops after the 10th line.\\n\\n# Read from the file file.txt and output the tenth line to stdout.\\n```\\ni=0\\nwhile IFS= read -r line\\ndo\\n        i=$((i+1))\\n        if [ \"$i\" = \"10\" ]; then\\n                echo \"$line\"\\n                break\\n        fi\\ndone < \"file.txt\"\\n```",
                "solutionTags": [],
                "code": "```\\ni=0\\nwhile IFS= read -r line\\ndo\\n        i=$((i+1))\\n        if [ \"$i\" = \"10\" ]; then\\n                echo \"$line\"\\n                break\\n        fi\\ndone < \"file.txt\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 548822,
                "title": "sed-life",
                "content": "```sed -n \\'10\\'p file.txt```",
                "solutionTags": [],
                "code": "```sed -n \\'10\\'p file.txt```",
                "codeTag": "Unknown"
            },
            {
                "id": 55530,
                "title": "5ms-solution-with-sed-beats-94-of-bash-submissions",
                "content": "```\\ncat file.txt | sed -n '10p'\\n```",
                "solutionTags": [],
                "code": "```\\ncat file.txt | sed -n '10p'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3467822,
                "title": "awk-using-nr",
                "content": "# Code\\n```bash\\nawk \\'NR == 10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```bash\\nawk \\'NR == 10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2887437,
                "title": "java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nsed \"10q;d\" file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nsed \"10q;d\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2583193,
                "title": "shell-simple-sed-command",
                "content": "```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552849,
                "title": "simple-solution-using-awk",
                "content": "```\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2403178,
                "title": "solution-with-head-and-tail-commands-only",
                "content": "```\\nhead -10 file.txt | tail +10\\n```",
                "solutionTags": [],
                "code": "```\\nhead -10 file.txt | tail +10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1981678,
                "title": "awk-is-the-fastest",
                "content": "```bash\\n# Read from the file file.txt and output the tenth line to stdout.\\n# cat file.txt | tail -n +10 | head -n 1\\n# sed -n \\'10, 10p\\' file.txt\\nawk \\'NR==10\\' file.txt\\n# tail -n +10 file.txt | head -1\\n```\\n- `awk` 34ms faster than 74.46%",
                "solutionTags": [],
                "code": "```bash\\n# Read from the file file.txt and output the tenth line to stdout.\\n# cat file.txt | tail -n +10 | head -n 1\\n# sed -n \\'10, 10p\\' file.txt\\nawk \\'NR==10\\' file.txt\\n# tail -n +10 file.txt | head -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1963643,
                "title": "simple",
                "content": "![image](https://assets.leetcode.com/users/images/8bdd47a4-f42a-4b9c-a4f0-7f943da59c5c_1650369964.0566795.png)\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10!d\\' file.txt",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/8bdd47a4-f42a-4b9c-a4f0-7f943da59c5c_1650369964.0566795.png)\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10!d\\' file.txt",
                "codeTag": "Unknown"
            },
            {
                "id": 1385684,
                "title": "pure-bash-and-easy-to-understand",
                "content": "```\\ni=0\\nwhile (( i++ < 10 ))\\ndo\\n  read line\\ndone < file.txt\\necho $line\\n```",
                "solutionTags": [],
                "code": "```\\ni=0\\nwhile (( i++ < 10 ))\\ndo\\n  read line\\ndone < file.txt\\necho $line\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 750564,
                "title": "solution-with-only-sed",
                "content": "```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 653221,
                "title": "simple-using-head-tail",
                "content": "\\n\\n```tail -n +10 file.txt | head -1 || exit```",
                "solutionTags": [],
                "code": "```tail -n +10 file.txt | head -1 || exit```",
                "codeTag": "Unknown"
            },
            {
                "id": 549890,
                "title": "new-to-bash-solution-beats-73",
                "content": "Only started learning bash recently, accepting constructive criticism:\\n```\\ni=$((0))\\nwhile read -r || [[ $REPLY ]]; do\\n    i=$(($i + 1))\\n    if [[ $i -eq 10 ]]; then\\n        echo $REPLY\\n    fi\\ndone < file.txt",
                "solutionTags": [],
                "code": "Only started learning bash recently, accepting constructive criticism:\\n```\\ni=$((0))\\nwhile read -r || [[ $REPLY ]]; do\\n    i=$(($i + 1))\\n    if [[ $i -eq 10 ]]; then\\n        echo $REPLY\\n    fi\\ndone < file.txt",
                "codeTag": "Unknown"
            },
            {
                "id": 440631,
                "title": "sed",
                "content": "```bash\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```bash\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 435778,
                "title": "my-solutions",
                "content": "One line with awk:\\n```bash\\nawk \\'{if(NR==10){print;exit}}\\' file.txt\\n```\\nOne line with sed, which is faster:\\n```bash\\nsed -n 10p file.txt\\n```\\nBut the fastest is to avoid spawning extra processes:\\n```bash\\nwhile read -r line; do\\n\\ti=$((i+1))\\n\\tif [ $i -eq 10 ]; then\\n\\t\\techo \"$line\"\\n\\t\\tbreak\\n\\tfi\\ndone <file.txt\\n```\\n",
                "solutionTags": [],
                "code": "```bash\\nawk \\'{if(NR==10){print;exit}}\\' file.txt\\n```\n```bash\\nsed -n 10p file.txt\\n```\n```bash\\nwhile read -r line; do\\n\\ti=$((i+1))\\n\\tif [ $i -eq 10 ]; then\\n\\t\\techo \"$line\"\\n\\t\\tbreak\\n\\tfi\\ndone <file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 355296,
                "title": "very-simple-method-using-sed",
                "content": "```\\nsed -n \"10p\" file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n \"10p\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 285925,
                "title": "1-line-faster-than-100",
                "content": "```\\ntail -n +10 file.txt | head -1\\n```",
                "solutionTags": [],
                "code": "```\\ntail -n +10 file.txt | head -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55531,
                "title": "a-very-simple-solution-using-cut",
                "content": "```\\ncat file.txt | cut -d $'\\\\n' -f 10\\n```",
                "solutionTags": [],
                "code": "```\\ncat file.txt | cut -d $'\\\\n' -f 10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55546,
                "title": "12-ms-awk-based-solution",
                "content": "This is all it takes. I tried to do the same thing with sed, but I couldn't remember how to do it with sed.\\n\\n    awk 'NR == 10' < file.txt\\n\\nGiven that the awk binary is slightly larger than the sed binary on my box I wonder if I'll get better runtime using sed, since some of the runtime will be affected by loading that binary before executing it. But given that those binaries are so small (on my OS X box), I wonder if it will make a difference.\\n\\n    panzani leetcode$ which sed\\n    /usr/bin/sed\\n    panzani leetcode$ du -h /usr/bin/sed\\n     20K\\t/usr/bin/sed\\n    panzani leetcode$ which awk \\n    /usr/bin/awk\\n    panzani leetcode$ du -h /usr/bin/awk \\n     52K\\t/usr/bin/awk",
                "solutionTags": [],
                "code": "This is all it takes. I tried to do the same thing with sed, but I couldn't remember how to do it with sed.\\n\\n    awk 'NR == 10' < file.txt\\n\\nGiven that the awk binary is slightly larger than the sed binary on my box I wonder if I'll get better runtime using sed, since some of the runtime will be affected by loading that binary before executing it. But given that those binaries are so small (on my OS X box), I wonder if it will make a difference.\\n\\n    panzani leetcode$ which sed\\n    /usr/bin/sed\\n    panzani leetcode$ du -h /usr/bin/sed\\n     20K\\t/usr/bin/sed\\n    panzani leetcode$ which awk \\n    /usr/bin/awk\\n    panzani leetcode$ du -h /usr/bin/awk \\n     52K\\t/usr/bin/awk",
                "codeTag": "Unknown"
            },
            {
                "id": 3918925,
                "title": "print-tenth-line",
                "content": "# Approach\\n Uses simple while loop to read the file line by line\\n\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nn=1;\\nwhile read line ;\\ndo\\n    if [  $n -eq 10  ]; then\\n        echo \"$line\"\\n    fi\\n    n=$((n+1));\\ndone < file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nn=1;\\nwhile read line ;\\ndo\\n    if [  $n -eq 10  ]; then\\n        echo \"$line\"\\n    fi\\n    n=$((n+1));\\ndone < file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3801067,
                "title": "using-simple-for-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfile=\"file.txt\"\\ni=1;\\nfor i in {1..10} ; do\\nread line\\n\\tif [ $i == 10 ];\\n\\tthen\\n\\t\\techo $line;\\n    break\\n\\tfi\\n\\t#i=$((i+1))\\ndone < $file;\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nfile=\"file.txt\"\\ni=1;\\nfor i in {1..10} ; do\\nread line\\n\\tif [ $i == 10 ];\\n\\tthen\\n\\t\\techo $line;\\n    break\\n\\tfi\\n\\t#i=$((i+1))\\ndone < $file;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775483,
                "title": "pure-bash-3-lines-runtime-25-ms-beats-98-31",
                "content": "# Intuition\\nYou don\\'t need to use a for loop to iterate through every line and a counter variable to print the 10th line or empty line if input was less than 10 lines. You also do not need any external tools such as wc or sed (we do use echo in the winning example).\\n\\n# Approach\\nIf you know anything about how iterative arrays (numerical arrays) work in bash, if an array value is not initialized, it will evaluate to empty string and this in conjunction with echo (or printf) will print a newline.\\n\\nUsing the \\'-t\\' flag strips newlines which eliminates the possibility to add a 2nd newline if it read more than 10 lines from file.txt\\n\\nUsing \\'-n\\' flag with the argument \\'10\\' means it will only read a maximum of 10 lines. Because of this, the program runs in constant time (which is still slow because bash is \"too big and too slow\" -- known feature of bash).\\n\\nRemember, iterative arrays are 0-based.\\n\\n\"printf\" is a bash builtin which will work without requiring the use of echo (which is a separate binary and usually part of coreutils), but no runtime advantage was found for the second example.\\n\\nAlso, the declare statements are optional, they are only added for clarity.\\n\\nFor more information on bash...\\n\\nRead the bash manual here https://www.man7.org/linux/man-pages/man7/man.7.html if you are not on a system with online documentation and scroll down to the section for \"mapfile\" / \"readarray\".\\n\\nUse the LeetCode editor to test out your scripts if you don\\'t have bash on your OS. It should be on most Linux distros e.g. Ubuntu (typical distro used with Windows 10/11 and WSL). Otherwise it would be available in Windows 10/11 via Cygwin/MSYS2. Early versions of OS X should have it as the default shell, otherwise you would have to install it with MacPorts or Homebrew.\\n\\nSee examples here https://linuxopsys.com/topics/bash-readarray-with-examples\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\nWinning example using only echo\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ndeclare -a lines\\nreadarray -n10 -t lines <file.txt\\necho ${lines[9]}\\n```\\n2nd example using pure bash\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ndeclare -a lines\\nreadarray -n10 -t lines <file.txt\\nprintf \"${lines[9]}\\\\\\\\n\"\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ndeclare -a lines\\nreadarray -n10 -t lines <file.txt\\necho ${lines[9]}\\n```\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ndeclare -a lines\\nreadarray -n10 -t lines <file.txt\\nprintf \"${lines[9]}\\\\\\\\n\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519938,
                "title": "single-line-solution",
                "content": "\\n# Code\\n```\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3519746,
                "title": "easy-and-simple-solution-with-explanation-wow-0-0",
                "content": "\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```\\nThis command uses the sed command to print the 10th line of the file. The -n option is used to suppress the default output and \\'10p\\' is used to print the 10th line of the file. Replace file.txt with your file name.",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2525104,
                "title": "tail-head-command-with-explanation",
                "content": "I just found this Blog and Github repository with solutions to Leetcode problems.\\nhttps://leet-codes.blogspot.com\\nIt is very useful, and I just wanted to share it with you.\\nNote: You can bookmark it as a resource, and for another approaches\\n<br>\\n\\n```\\ntail -n+10 file.txt | head -n1\\n```\\n\\nFor explanation please refer\\nhttps://leet-codes.blogspot.com/2022/09/195-tenth-line.html",
                "solutionTags": [],
                "code": "```\\ntail -n+10 file.txt | head -n1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2400814,
                "title": "2-easy-solution-in-bash",
                "content": "# awk \\'NR == 10\\' file.txt\\n**-----------------------------------------------------------------------------**\\n# tail -n+10 file.txt | head -n1",
                "solutionTags": [],
                "code": "# awk \\'NR == 10\\' file.txt\\n**-----------------------------------------------------------------------------**\\n# tail -n+10 file.txt | head -n1",
                "codeTag": "Unknown"
            },
            {
                "id": 2242237,
                "title": "solution-for-tenth-line-problem",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# variable for counting lines\\ncounter=1\\n\\n# read file\\'s lines iteratively\\nwhile read -r line; do\\n\\n# print the 10th line \\nif [[ $counter -eq 10 ]]\\n    then echo $line\\nfi\\n\\n# incremenet counter after reading each line\\ncounter=$counter+1\\n\\ndone < file.txt\\n```",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# variable for counting lines\\ncounter=1\\n\\n# read file\\'s lines iteratively\\nwhile read -r line; do\\n\\n# print the 10th line \\nif [[ $counter -eq 10 ]]\\n    then echo $line\\nfi\\n\\n# incremenet counter after reading each line\\ncounter=$counter+1\\n\\ndone < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2191372,
                "title": "simple-sed",
                "content": "# Simple Bash Script with sed \\n```bash\\nsed -n \\'10{p;q;}\\' file.text\\n```\\n\\nwill solve the error",
                "solutionTags": [],
                "code": "```bash\\nsed -n \\'10{p;q;}\\' file.text\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2081103,
                "title": "used-cat-head-wc-tail-59-02-time-81-44-space",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nif [[ $(cat file.txt | wc -l) -ge 10 ]]\\nthen \\n    cat file.txt | head -n 10 | tail -n 1\\nfi \\n```",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nif [[ $(cat file.txt | wc -l) -ge 10 ]]\\nthen \\n    cat file.txt | head -n 10 | tail -n 1\\nfi \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2021075,
                "title": "bash-for-loop",
                "content": "\\n```bash\\n# Declare a counter\\ni=0\\n\\n# For each line in the file\\ncat file.txt | while read line; do\\n\\t# 1. Count the line\\n    ((i++))\\n\\n\\t# 2. If we\\'ve reached the 10th line, print\\n    if [[ $i -eq 10 ]]; then\\n        echo $line\\n    fi\\ndone\\n```",
                "solutionTags": [],
                "code": "```bash\\n# Declare a counter\\ni=0\\n\\n# For each line in the file\\ncat file.txt | while read line; do\\n\\t# 1. Count the line\\n    ((i++))\\n\\n\\t# 2. If we\\'ve reached the 10th line, print\\n    if [[ $i -eq 10 ]]; then\\n        echo $line\\n    fi\\ndone\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2003061,
                "title": "bash-using-sed-with-specific-line",
                "content": "Using `sed` command and specific line number.\\n\\n```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1945847,
                "title": "195-tenth-line",
                "content": "sed -n \\'10p\\' file.txt\\nvar=`sed -n \\'10p\\' file.txt`\\n\\nif [ -z \"$var\" ]\\nthen\\n        printf \"No 10th Line in file.txt\\\\n\"\\nfi",
                "solutionTags": [],
                "code": "sed -n \\'10p\\' file.txt\\nvar=`sed -n \\'10p\\' file.txt`\\n\\nif [ -z \"$var\" ]\\nthen\\n        printf \"No 10th Line in file.txt\\\\n\"\\nfi",
                "codeTag": "Unknown"
            },
            {
                "id": 1857511,
                "title": "super-simple-solution-using-while-loop-and-if",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncount=1\\nwhile read p; do\\n if [ $count -eq 10 ]\\n then\\n  echo \"$p\"\\nfi\\ncount=`expr $count + 1 `\\ndone <file.txt\\n```",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncount=1\\nwhile read p; do\\n if [ $count -eq 10 ]\\n then\\n  echo \"$p\"\\nfi\\ncount=`expr $count + 1 `\\ndone <file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1683730,
                "title": "bash-simple-loop",
                "content": "```\\ni=0\\nwhile IFS= read -r row; do\\n    rows[i++]=\"$row\"\\ndone < file.txt\\necho \"${rows[9]}\"\\n```",
                "solutionTags": [],
                "code": "```\\ni=0\\nwhile IFS= read -r row; do\\n    rows[i++]=\"$row\"\\ndone < file.txt\\necho \"${rows[9]}\"\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1604416,
                "title": "tenth-line-using-head-tail-and-wc",
                "content": "This problem really frustrated me because it doesn\\'t say what you should print if line 10 doesn\\'t exist. It asks in the notes what you think it should output. Does it want us to print the last line? Turns out they want a blank line. So here\\'s my solution:\\n\\n```\\n[ $(wc -l < file.txt) -ge 10 ] && head -n10 file.txt | tail -n1\\n```",
                "solutionTags": [],
                "code": "```\\n[ $(wc -l < file.txt) -ge 10 ] && head -n10 file.txt | tail -n1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1499350,
                "title": "100-fast-solution",
                "content": "```bash\\n# Count number of lines in file.txt\\nnum=$(wc -l < file.txt)\\ncount=9\\nif [ $num -gt $count ]\\nthen \\n\\thead -n 10 file.txt | tail -n 1\\nelse\\n\\techo \"\"\\nfi\\n```\\n",
                "solutionTags": [],
                "code": "```bash\\n# Count number of lines in file.txt\\nnum=$(wc -l < file.txt)\\ncount=9\\nif [ $num -gt $count ]\\nthen \\n\\thead -n 10 file.txt | tail -n 1\\nelse\\n\\techo \"\"\\nfi\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1280083,
                "title": "one-liner-sed-solution",
                "content": "```\\nsed \\'10q;d\\' file.txt\\n```\\nRuntime: 4 ms, faster than 78.08% of Bash online submissions for Tenth Line.\\nMemory Usage: 3.6 MB, less than 82.55% of Bash online submissions for Tenth Line.",
                "solutionTags": [],
                "code": "```\\nsed \\'10q;d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1162723,
                "title": "awk-solution",
                "content": "```\\nawk \\'NR == 10\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nawk \\'NR == 10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118595,
                "title": "simple-sol-by-sed-w-comment",
                "content": "Simple sol by \"sed\" \\n\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# Only print 10th line from input file\\nsed -n \\'10p\\' file.txt\\n```\\n\\n---\\n\\nDemo:\\n\\n![image](https://assets.leetcode.com/users/images/309f2839-c8f2-427d-8464-92900f1ab836_1616245880.7717433.png)\\n\\n---\\n\\nReference:\\n\\n[1] [Stackexchange: What does `-n` option in sed do?](https://superuser.com/questions/852404/what-does-n-option-in-sed-do)\\n\\n[2] [GNU document about sed](https://www.gnu.org/software/sed/manual/html_node/index.html#SEC_Contents)\\n\\n",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# Only print 10th line from input file\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1084026,
                "title": "195-easy-solution-with-good-resource",
                "content": "resources: 1. [https://www.unix.com/shell-programming-and-scripting/243138-print-nth-line-file.html](http://)\\n\\t\\t\\t\\t  2. https://stackoverflow.com/questions/20675295/fetch-nth-line-of-a-text-file-using-non-interactive-shell-script\\n\\n\\n```\\nsed -n 10p file.txt\\n```\\n",
                "solutionTags": [],
                "code": "```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 762047,
                "title": "simple-solution-with-explanation",
                "content": "**Concatenate(cat)**: command is very frequently used in Linux. It reads data from the file and gives their content as output. It helps us to create, view, concatenate files.\\n\\n**Stream Editor (sed)**: It can perform lot\\u2019s of function on file like, searching, find and replace, insertion or deletion. By using SED you can edit files even without opening it, which is much quicker way to find and replace.\\n\\n**Solution:**\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | sed -n 10p\\n```\\n\\nThis solution is suggested by @jmcdonagh\\n```\\nsed -n 10p file.txt\\n```",
                "solutionTags": [],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | sed -n 10p\\n```\n```\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 625831,
                "title": "wc-head-and-tail",
                "content": "Not the most efficient... I didn\\'t know about the sed trick. But hey, it\\'s a one-liner! :)\\n\\n```(( $(wc -l < file.txt) >= 10 )) && head -10 file.txt | tail -1```",
                "solutionTags": [],
                "code": "```(( $(wc -l < file.txt) >= 10 )) && head -10 file.txt | tail -1```",
                "codeTag": "Unknown"
            },
            {
                "id": 496924,
                "title": "simple-solution-using-shell-parameter-expansion",
                "content": "Simple solution using [Shell Parameter Expansion](https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&ved=2ahUKEwi5lYeNqbLnAhXroosKHe1kCPkQFjAAegQIAhAB&url=https%3A%2F%2Fwww.gnu.org%2Fsoftware%2Fbash%2Fmanual%2Fhtml_node%2FShell-Parameter-Expansion.html&usg=AOvVaw2pT2UtRfrmlSSDB_3HLLVhhttp://)\\n```\\nlines=$(cat file.txt | wc -l)\\nif [ \"${lines%% *}\" -ge 10 ]; then\\n    cat file.txt | head -n 10 | tail -n 1\\nfi\\n```",
                "solutionTags": [],
                "code": "```\\nlines=$(cat file.txt | wc -l)\\nif [ \"${lines%% *}\" -ge 10 ]; then\\n    cat file.txt | head -n 10 | tail -n 1\\nfi\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 449313,
                "title": "tail-head",
                "content": "Just a simple line with tail that catches up to the 10th line, then a head that obtains the last result of the tail\\n```\\ntail -n +10 file.txt | head -n 1\\n```",
                "solutionTags": [],
                "code": "```\\ntail -n +10 file.txt | head -n 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 433988,
                "title": "awk-easiest-one",
                "content": "```\\nawk \\'NR==10\\' file.txt \\n```",
                "solutionTags": [],
                "code": "```\\nawk \\'NR==10\\' file.txt \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 415433,
                "title": "cat-awk-faster-than-100",
                "content": "using cat and awk commands\\n\\n```bash\\ncat file.txt | awk \\'NR==10\\'\\n```",
                "solutionTags": [],
                "code": "```bash\\ncat file.txt | awk \\'NR==10\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 374922,
                "title": "sed-awk-solutions-faster-than-100",
                "content": "# sed\\nThe first is with the p (print) command, and the other is with the d (delete) command.\\nThe n option with the print command is used to only print lines explicitly indicated by the command.\\nFor example, sed will output the 10th line of file.txt with each of the commands below:\\n\\nprint/p command\\n```\\ncat file.txt | sed -n \\'10p\\'  # > 73%\\n```\\n \\ndelete/d command\\n```\\ncat file.txt | sed \\'10!d\\'  # > 73%\\n```\\n\\n\\n***\\n\\n# awk\\n\\n awk has a built in variable NR that keeps track of file/stream row numbers.\\n awk syntax and idioms can be hard to read, so below are three different ways to print line 10 of file.txt file using awk.\\n```\\ncat file.txt | awk \\'NR==10\\'     # > 73%\\ncat file.txt | awk \\'NR==10{print}\\'  # > 100%\\ncat file.txt | awk \\'{if(NR==10) print}\\'  # >73%\\n```",
                "solutionTags": [],
                "code": "```\\ncat file.txt | sed -n \\'10p\\'  # > 73%\\n```\n```\\ncat file.txt | sed \\'10!d\\'  # > 73%\\n```\n```\\ncat file.txt | awk \\'NR==10\\'     # > 73%\\ncat file.txt | awk \\'NR==10{print}\\'  # > 100%\\ncat file.txt | awk \\'{if(NR==10) print}\\'  # >73%\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 348906,
                "title": "all-different-way-to-print-10th-line-of-a-file",
                "content": "Different approaches using sed, head & tail, awk, and cut linux command.\\n```\\n#!/bin/bash\\n\\n#tail -n+10 \\'file.txt\\' | head -1\\n#sed -n \\'10p\\' \\'file.txt\\'\\n#awk \"NR==10\" file.txt\\n#cut -f10 -d$\\'\\\\n\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\n#!/bin/bash\\n\\n#tail -n+10 \\'file.txt\\' | head -1\\n#sed -n \\'10p\\' \\'file.txt\\'\\n#awk \"NR==10\" file.txt\\n#cut -f10 -d$\\'\\\\n\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 341942,
                "title": "awk-solution",
                "content": "```\\ncat file.txt | awk \\'{if (NR==10){print $0}}\\'\\n```",
                "solutionTags": [],
                "code": "```\\ncat file.txt | awk \\'{if (NR==10){print $0}}\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 217162,
                "title": "the-shortest",
                "content": "```\\nawk \\'{if(NR==10){print $0}}\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nawk \\'{if(NR==10){print $0}}\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 208499,
                "title": "4-ms-faster-than-100-with-tail-and-head",
                "content": "```tail -n+10 file.txt | head -n1```",
                "solutionTags": [],
                "code": "```tail -n+10 file.txt | head -n1```",
                "codeTag": "Unknown"
            },
            {
                "id": 149734,
                "title": "dead-simple-bash",
                "content": "```\\ncat file.txt | sed -n 10p\\n```",
                "solutionTags": [],
                "code": "```\\ncat file.txt | sed -n 10p\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 128426,
                "title": "simple-solution",
                "content": "```\\nsed \"10q;d\" file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed \"10q;d\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 117471,
                "title": "one-line-solution-using-head-and-tail",
                "content": "Check if `#line >= 10` and use `head` + `tail` to print out the 10th line:\n\n```\n[ $(cat file.txt | wc -l) -ge 10 ] && head -n10 file.txt | tail -n1\n```",
                "solutionTags": [],
                "code": "```\n[ $(cat file.txt | wc -l) -ge 10 ] && head -n10 file.txt | tail -n1\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 55543,
                "title": "a-pure-bash-solution",
                "content": "    #!/bin/env bash\\n    # Read from the file file.txt and output the tenth line to stdout.\\n    \\n    filename=${1:-file.txt}\\n    lineth=${2:-10}\\n    \\n    i=$lineth\\n    while read line && ((--i))\\n    do\\n        :\\n    done <$filename\\n    \\n    if [[ $i -gt 0 ]]\\n    then\\n        #echo \"This file has not enough lines\"\\n        exit 1\\n    fi\\n    \\n    echo $line\\n\\nI had thought that this solution may has an better efficiency than such as `tail -n+10 file.txt|head -1` which forks other processes, but I am wrong.\\n\\nThe above solution only beats 3% submissions while `tail&&head` combination beats 17% submissions, I don't know why....",
                "solutionTags": [],
                "code": "    #!/bin/env bash\\n    # Read from the file file.txt and output the tenth line to stdout.\\n    \\n    filename=${1:-file.txt}\\n    lineth=${2:-10}\\n    \\n    i=$lineth\\n    while read line && ((--i))\\n    do\\n        :\\n    done <$filename\\n    \\n    if [[ $i -gt 0 ]]\\n    then\\n        #echo \"This file has not enough lines\"\\n        exit 1\\n    fi\\n    \\n    echo $line\\n\\nI had thought that this solution may has an better efficiency than such as `tail -n+10 file.txt|head -1` which forks other processes, but I am wrong.\\n\\nThe above solution only beats 3% submissions while `tail&&head` combination beats 17% submissions, I don't know why....",
                "codeTag": "Unknown"
            },
            {
                "id": 55551,
                "title": "checkout-my-solution-here",
                "content": "    #if file.txt does not contain enough lines, we just pad it with 10 empty lines.\\n    echo \"\\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \\n    \" | cat file.txt - | head | tail -n 1\\n\\nI thought it simple enough for this question.",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 4088206,
                "title": "print-10th-line-of-the-file",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ncat file.txt | sed -n \\'10p\\'\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\ncat file.txt | sed -n \\'10p\\'\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4080340,
                "title": "for-solution",
                "content": "# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n head -n 10 file.txt | tail -n +10\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n head -n 10 file.txt | tail -n +10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077597,
                "title": "it-was-easy",
                "content": "\\u0628\\u0633\\u0645 \\u0627\\u0644\\u0644\\u0647 \\u0627\\u0644\\u0631\\u062D\\u0645\\u0646 \\nThe easiest way to solve this question was to use awk. like this :\\n```bash\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```bash\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4070131,
                "title": "tenth-line",
                "content": "# Intuition\\nThe \"Tenth Line\" problem on LeetCode is typically solved using command-line tools like sed or awk \\n\\n# Approach\\nThis command will print the 10th line of the file, or nothing if the file has fewer than 10 lines. Since this problem is primarily about using command-line tools\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n<!-- \\n- Space complexity:\\nAdd your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n\\n# sed: Invokes the stream editor.\\n# -n: Suppresses automatic printing of pattern space.\\n# \\'10p\\': Specifies to print the 10th line (10p) of the input file.\\n# file.txt: The name of the input file.\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n\\n# sed: Invokes the stream editor.\\n# -n: Suppresses automatic printing of pattern space.\\n# \\'10p\\': Specifies to print the 10th line (10p) of the input file.\\n# file.txt: The name of the input file.\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4064540,
                "title": "easy-and-simple-solution-using-just-while-loop",
                "content": "# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n# cat file.txt | awk \\'{if (NR==10) print$0}\\'\\ncount=0\\nwhile read myVar\\ndo \\n    let count++;\\n    if [[ $count -eq 10 ]]\\n    then \\n        echo $myVar\\n    fi\\n\\ndone < file.txt\\n```\\n\\n# Please Do Upvote the Solution if you like \\uD83D\\uDE0D\\n",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n# cat file.txt | awk \\'{if (NR==10) print$0}\\'\\ncount=0\\nwhile read myVar\\ndo \\n    let count++;\\n    if [[ $count -eq 10 ]]\\n    then \\n        echo $myVar\\n    fi\\n\\ndone < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4061750,
                "title": "pov",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4051570,
                "title": "print-10-th-line",
                "content": "# Intuition\\nRead line by line till line 10 is reached, then print the line and end the processing.\\n\\n# Approach\\nIn a for loop read a line from the file. Check if the counter is already ten, then print the line and exit the loop. If it\\'s not yet ten, read the next line.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n#!/bin/bash\\n# Read from the file file.txt and output the tenth line to stdout.\\ni=1\\nwhile read line\\ndo\\n  if [[ $i -eq 10 ]]; then\\n    echo $line\\n    break\\n  fi\\n  ((i++))\\ndone <file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n#!/bin/bash\\n# Read from the file file.txt and output the tenth line to stdout.\\ni=1\\nwhile read line\\ndo\\n  if [[ $i -eq 10 ]]; then\\n    echo $line\\n    break\\n  fi\\n  ((i++))\\ndone <file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4044039,
                "title": "bash",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029183,
                "title": "great-performance-99-one-line-with-read-and-counter-one-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nit=0; while read line; do ((it++)); if [ $it -eq 10 ]; then echo ${line}; exit 0; fi; done <file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nit=0; while read line; do ((it++)); if [ $it -eq 10 ]; then echo ${line}; exit 0; fi; done <file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025435,
                "title": "using-sed",
                "content": "\\n\\nsed \\'10q;d\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "\\n\\nsed \\'10q;d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004147,
                "title": "bash-simple-solution-sed",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```bash\\nsed -n \\'10p\\' file.txt\\n```\\n",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```bash\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3989029,
                "title": "bash-1-line",
                "content": "\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n# Use awk to print the 10th line\\nawk \\'NR == 10\\' file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n# Use awk to print the 10th line\\nawk \\'NR == 10\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3976528,
                "title": "awk-3-solution",
                "content": "```\\nawk \\'NR==10 {print $0}\\' file.txt\\n```\\n\\nor\\n\\n```\\nawk \\'FNR==10 {print $0}\\' file.txt\\n```\\n\\nor\\n\\n```\\nawk \\'NR==10 {print $FILENAME}\\' file.txt\\n```\\n",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nawk \\'NR==10 {print $0}\\' file.txt\\n```\n```\\nawk \\'FNR==10 {print $0}\\' file.txt\\n```\n```\\nawk \\'NR==10 {print $FILENAME}\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3960197,
                "title": "easy-readable-bash",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3959332,
                "title": "one-line-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942455,
                "title": "head-tail-and-wc",
                "content": "# Code\\n```\\nline_count=$(wc -l < \"file.txt\")\\nif [ \"$line_count\" -lt 10 ]; then\\n    echo \"\"\\nelse \\n    head -n 10 file.txt | tail -n 1\\nfi\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nline_count=$(wc -l < \"file.txt\")\\nif [ \"$line_count\" -lt 10 ]; then\\n    echo \"\"\\nelse \\n    head -n 10 file.txt | tail -n 1\\nfi\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3938526,
                "title": "compile-a-c-program-with-gcc-and-run-it-lmao",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ngcc -x c - <<\\'EOF\\' && env PATH=\".:$PATH\" sh -c \\'a.out\\' < file.txt\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdint.h>\\nint main(void)\\n{\\n    uint8_t newlines = 0;\\n    int c;\\n    while ((c = getchar()) != EOF && newlines < 9)\\n        if (c == \\'\\\\n\\') ++newlines;\\n\\n    if (c == EOF) return 1;\\n\\n    putchar(c);\\n    while ((c = getchar()) != EOF && c != \\'\\\\n\\') {\\n        putchar(c);\\n    }\\n    return 0;\\n}\\nEOF\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ngcc -x c - <<\\'EOF\\' && env PATH=\".:$PATH\" sh -c \\'a.out\\' < file.txt\\n#include <stdio.h>\\n#include <stdlib.h>\\n#include <stdint.h>\\nint main(void)\\n{\\n    uint8_t newlines = 0;\\n    int c;\\n    while ((c = getchar()) != EOF && newlines < 9)\\n        if (c == \\'\\\\n\\') ++newlines;\\n\\n    if (c == EOF) return 1;\\n\\n    putchar(c);\\n    while ((c = getchar()) != EOF && c != \\'\\\\n\\') {\\n        putchar(c);\\n    }\\n    return 0;\\n}\\nEOF\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3938518,
                "title": "sed",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3926688,
                "title": "simple-sed-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -ne \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -ne \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3915081,
                "title": "1-line",
                "content": "```\\nsed \\'10!d\\' file.txt\\n```",
                "solutionTags": [],
                "code": "```\\nsed \\'10!d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3910075,
                "title": "using-sed-command",
                "content": "# Approach\\nUsing sed\\n\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3905152,
                "title": "bash",
                "content": "```bash\\r\\n# sed -n 10p file.txt\\r\\n# awk NR==10 file.txt\\r\\nhead -10 file.txt | tail +10\\r\\n```",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```bash\\r\\n# sed -n 10p file.txt\\r\\n# awk NR==10 file.txt\\r\\nhead -10 file.txt | tail +10\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3900830,
                "title": "sed",
                "content": "\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n 10p file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3873381,
                "title": "195-tenth-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\ntail -n+10 file.txt | head -n1\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\ntail -n+10 file.txt | head -n1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3825104,
                "title": "cheap-sed-solution-its-bash",
                "content": "# Intuition\\nI needed to be able to get inside of the file quicly, and the line is known. In this case, the solution is statically set to pull that specific line vs some dynamic set/piping, etc. One line should work. I would alias this in my shell if this was a usual command I used daily. \\n\\n# Approach\\nThis should be a 1 line answer, and should use a UNIX command in BASH. The stream editor would work as a way to open the file, and the line can be specified as 10, p for print, and -n to echo the specific line. file.txt was assumed to be in the same directory.\\n\\n# Complexity\\n- Time complexity:\\nN/A\\n\\n- Space complexity:\\nN/A\\n\\n# Code\\n```\\nsed -n \\'10p\\' < file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nsed -n \\'10p\\' < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3806093,
                "title": "easy-2-solution-using-bash-script",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# awk \\'NR == 10 {print; exit}\\' file.txt\\n\\nsed -n \\'10p; 10q\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n# awk \\'NR == 10 {print; exit}\\' file.txt\\n\\nsed -n \\'10p; 10q\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3805470,
                "title": "bash-sed",
                "content": "```\\n#!bin/bash\\n\\ncat file.txt | sed -n \\'10p\\'\\n```",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```\\n#!bin/bash\\n\\ncat file.txt | sed -n \\'10p\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3791833,
                "title": "one-line-simple-solution-using-sed-command",
                "content": "thi script uses sed command to print the 10th line of the file and the (-n) is used for suppressthe output and for print the 10th line we used \"10p\" and file.txt is the file name.\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | sed -n 10p\\n```\\n\\nThis command uses the sed command to print the 10th line of the file. The -n option is used to suppress the default output and \\'10p\\' is used to print the 10th line of the file. Replace file.txt with your file name.",
                "solutionTags": [
                    "Bash",
                    "Shell"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | sed -n 10p\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3785694,
                "title": "another-sed-solution-d",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\\\\\nsed \\'10!d\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\\\\\nsed \\'10!d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3750010,
                "title": "10th-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3743063,
                "title": "sed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742153,
                "title": "1-line-easy-code",
                "content": "\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742151,
                "title": "1-line-easy-code",
                "content": "\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742150,
                "title": "1-line-easy-code",
                "content": "\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742149,
                "title": "1-line-easy-code",
                "content": "\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3742146,
                "title": "1-line-easy-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\r\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\r\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3713367,
                "title": "easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nawk \\'NR == 10 { print; exit }\\' file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nawk \\'NR == 10 { print; exit }\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3713025,
                "title": "tenth-line-souvik-hazra",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR == 10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR == 10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3680864,
                "title": "piping-iterative-solution",
                "content": "# Intuition\\nPipe the content until you get only the desired line\\n\\n# Approach\\n1. Show file contents\\n2. Filter to only get lines after 10th\\n3. Only show the first line of the bunch\\nI would not do this on large inputs, as showing the entire file and filtering does not really make sense, but if you just need something on the command line, it\\'s easy, logical and it works.\\n\\nHave also added a solution using an actual bash function\\n\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | tail -n +10 | head -n 1\\n\\n# If you need this as a function with arguments:\\n#!/bin/bash\\n\\nshow_file_line () {\\n    FILENAME=$1\\n    LINE_NR=$2\\n\\n    NR_OF_LINES=`head -n $LINE_NR $FILENAME | wc -l`\\n\\n    if [ $NR_OF_LINES -ge $LINE_NR ]; then\\n        head -n $LINE_NR $FILENAME | tail -1\\n    fi\\n}\\n\\nshow_file_line \"file.txt\" 10\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncat file.txt | tail -n +10 | head -n 1\\n\\n# If you need this as a function with arguments:\\n#!/bin/bash\\n\\nshow_file_line () {\\n    FILENAME=$1\\n    LINE_NR=$2\\n\\n    NR_OF_LINES=`head -n $LINE_NR $FILENAME | wc -l`\\n\\n    if [ $NR_OF_LINES -ge $LINE_NR ]; then\\n        head -n $LINE_NR $FILENAME | tail -1\\n    fi\\n}\\n\\nshow_file_line \"file.txt\" 10\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3675918,
                "title": "bash",
                "content": "\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3670873,
                "title": "bash-command-to-print-last-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n#solution 1\\nsed -n \\'10p\\' file.txt\\n\\n#solution 2\\nawk \\'NR == 10\\' file.txt\\n\\n#solution 3\\ntail -n+10 file.txt|head -1",
                "solutionTags": [
                    "Bash"
                ],
                "code": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n#solution 1\\nsed -n \\'10p\\' file.txt\\n\\n#solution 2\\nawk \\'NR == 10\\' file.txt\\n\\n#solution 3\\ntail -n+10 file.txt|head -1",
                "codeTag": "Unknown"
            },
            {
                "id": 3669450,
                "title": "awk",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3664907,
                "title": "solution-with-gawk",
                "content": "# Intuition\\nTo these questions which read and handle the text files or the record files, I am very likely to use the tool GAWK.\\n# Approach\\nUse the getline to explicitly read from the specific file, and use a for loop to calculate the number of lines, and when meet the line 10, output it by the print function.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ngawk \\'BEGIN{i = 0;\\n    while(getline < \"file.txt\")\\n    {\\n        i++;\\n        if(i == 10)\\n            print $0\\n    }\\n    }\\'        \\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ngawk \\'BEGIN{i = 0;\\n    while(getline < \"file.txt\")\\n    {\\n        i++;\\n        if(i == 10)\\n            print $0\\n    }\\n    }\\'        \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3632868,
                "title": "an-easy-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nnothing to say really, solution was too obvious\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAlternative solution, in case you want to make sure that the file has at least 10 lines and don\\'t want to look at its insides.\\n\\nFILE=\\'file.txt\\'\\n\\nLINE_COUNT=$(wc -l < \"$FILE\")\\n\\nif [ $LINE_COUNT -ge 10 ]; then\\n    sed -n \\'10p\\' \"$FILE\"\\nelse\\n    echo \"The file does not have at least 10 lines.\"\\nfi\\n\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n#!/bin/bash\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n#!/bin/bash\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3623000,
                "title": "solution-with-sed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10q;d\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10q;d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3612569,
                "title": "bash-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3600696,
                "title": "using-counter-variable-bash-hyder-nabi",
                "content": "\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nfile=\"file.txt\"\\ni=1;\\nwhile read line; do\\n\\tif [ $i == 10 ];\\n\\tthen\\n\\t\\techo $line;\\n    break\\n\\tfi\\n\\ti=$((i+1))\\ndone < $file;\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nfile=\"file.txt\"\\ni=1;\\nwhile read line; do\\n\\tif [ $i == 10 ];\\n\\tthen\\n\\t\\techo $line;\\n    break\\n\\tfi\\n\\ti=$((i+1))\\ndone < $file;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3599093,
                "title": "simple-solution-bash",
                "content": "# Code\\n```\\nsed -n \\'10p\\' < file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nsed -n \\'10p\\' < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3586970,
                "title": "simple",
                "content": "\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt \\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3544103,
                "title": "sed-oneliner",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10,10p; 11q\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10,10p; 11q\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3505179,
                "title": "bash-while-loop",
                "content": "# Intuition\\nUse a while loop and line counter variable.\\n\\n# Approach\\nInitialise a variable to zero. Iterate over each line in a while loop. Increment the variable on each iteration. If the variable is 10 then echo the current line. If there are less than ten lines then nothing will be echoed.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(1)\\n\\n# Code\\n```\\ncount=0\\nwhile read line; do\\n    ((count++))\\n    if [ \"$count\" == 10 ]\\n    then\\n        echo $line\\n    fi\\ndone < file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\ncount=0\\nwhile read line; do\\n    ((count++))\\n    if [ \"$count\" == 10 ]\\n    then\\n        echo $line\\n    fi\\ndone < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3490411,
                "title": "intutive-and-practical-solution",
                "content": "# Intuition\\nWe will start with conventional method to reach the 10th line\\n\\n# Approach\\nDo while loop.\\n\\n# Code\\n```Bash\\n# Read from the file file.txt and output the tenth line to stdout.\\ncnt=0\\nwhile read line && [ $cnt -le 10 ]; do\\n  let \\'cnt = cnt + 1\\'\\n  if [ $cnt -eq 10 ]; then\\n    echo $line\\n    exit 0\\n  fi\\ndone < file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```Bash\\n# Read from the file file.txt and output the tenth line to stdout.\\ncnt=0\\nwhile read line && [ $cnt -le 10 ]; do\\n  let \\'cnt = cnt + 1\\'\\n  if [ $cnt -eq 10 ]; then\\n    echo $line\\n    exit 0\\n  fi\\ndone < file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3489811,
                "title": "print-line-number",
                "content": "Simple command for print line no.\\n\\n\\n---\\n\\n# Code\\n```\\ncat file.txt | sed -n \\'10p\\'\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\ncat file.txt | sed -n \\'10p\\'\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3487540,
                "title": "195-tenth-line-solution-with-detailed-explanation",
                "content": "# Intuition\\n- The awk command is a powerful text processing tool that can read a file line by line and perform various operations on each line.\\n- In this solution, we use awk to print only the 10th line of the file.\\nThe awk command uses a pattern-action structure, where the pattern specifies which lines to operate on, and the action specifies what to do with those lines.\\n\\n# Approach\\n- The awk command is a popular tool for text processing in Unix-like systems, as it is fast and efficient.\\n- By using awk to print only the 10th line of the file, we avoid reading and processing the entire file, which can be inefficient for large files.\\n- The NR==10 pattern matches only the 10th line of the file, regardless of how many lines the file contains.\\n- Overall, this solution is a concise and efficient way to print the 10th line of a file using awk.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(N), where N is the number of lines in the file. The awk command reads the input file line by line and performs pattern matching to identify the 10th line. This process takes linear time, as it reads each line exactly once.\\n\\n- Space complexity:\\nThe space complexity of this solution is O(1), as it uses a constant amount of additional memory. The awk command processes the input file one line at a time, without storing the entire file in memory. Therefore, the space used by the awk command is constant, regardless of the size of the input file.\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nawk \\'NR == 10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nawk \\'NR == 10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3464666,
                "title": "unix-printing-the-line-using-sed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n 10p file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3461864,
                "title": "just-a-one-line-of-code",
                "content": "I would suggest sed like this:\\n\\nsed ```\\'NUMq;d\\'``` file\\nWhere NUM is the number of the line you want to print; so, for example, ```sed \\'239q;d\\'``` file to print the 239th line of file.\\n\\nExplanation:\\n\\n```NUMq``` will quit immediately when the line number is ```NUM```.\\n\\n```d``` will delete the line instead of printing it; this is inhibited on the last line because the ```q``` causes the rest of the script to be skipped when quitting.\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10q;d\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\'NUMq;d\\'```\n```sed \\'239q;d\\'```\n```NUMq```\n```NUM```\n```d```\n```q```\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \\'10q;d\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3438299,
                "title": "sed-n-10p-file-txt",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```\\n# Upvote please if you find it helpful! \\uD83E\\uDD1F",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3437419,
                "title": "output-the-tenth-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n\\nsed -n 10p file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n\\nsed -n 10p file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3431456,
                "title": "solution-exiled",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3408345,
                "title": "simple-sol",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3406393,
                "title": "easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n```\\n1.awk reads the first line of the file.\\n\\n2. NR==10 {print;exit} is an awk expression that checks if the current line number (NR) is equal to 10. If it is, the expression prints the line (print) and exits the awk program (exit).\\n\\n3.If the current line number is not 10, awk reads the next line of the file and repeats step 2.\\n\\n4.awk continues reading and processing lines of the file until it reaches the end of the file.\\n\\nWhen awk finds the 10th line of the file, it prints the line and exits the program. The exit statement ensures that awk stops processing the file after it finds the 10th line, so it doesn\\'t waste time processing the rest of the file unnecessarily.\\n\\nOverall, the command uses awk\\'s pattern matching capabilities to quickly find the 10th line of the file and print it.\\n```\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O()$$ -->\\nO(1)\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#awk NR==\\'10\\' file.txt\\n#sed -n \\'10p\\' file.txt\\n#sed \\'10q;d\\' file.txt\\n#tail -n +10 file.txt | head -n 1\\n\\nawk \\'NR==10 {print;exit}\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n1.awk reads the first line of the file.\\n\\n2. NR==10 {print;exit} is an awk expression that checks if the current line number (NR) is equal to 10. If it is, the expression prints the line (print) and exits the awk program (exit).\\n\\n3.If the current line number is not 10, awk reads the next line of the file and repeats step 2.\\n\\n4.awk continues reading and processing lines of the file until it reaches the end of the file.\\n\\nWhen awk finds the 10th line of the file, it prints the line and exits the program. The exit statement ensures that awk stops processing the file after it finds the 10th line, so it doesn\\'t waste time processing the rest of the file unnecessarily.\\n\\nOverall, the command uses awk\\'s pattern matching capabilities to quickly find the 10th line of the file and print it.\\n```\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#awk NR==\\'10\\' file.txt\\n#sed -n \\'10p\\' file.txt\\n#sed \\'10q;d\\' file.txt\\n#tail -n +10 file.txt | head -n 1\\n\\nawk \\'NR==10 {print;exit}\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3392568,
                "title": "best-4-solutions",
                "content": "# Solution 1\\n`awk` is damn fast when comes to text progression it beast tools like sed, head and head\\n```\\nawk \\'NR==10\\' file.txt\\n```\\n\\n# Solution 2\\nOne can also think of reading the file with read and then print the line when the counter `c` hits 10\\n```\\nc=0 # conuter\\nwhile read -r line\\ndo\\n  c=$((c+1))\\n  if [[ $c -eq 10 ]]; then\\n    echo $line\\n    exit\\n  fi\\ndone < file.txt\\n```\\n\\n# Solution 3\\n`sed` is great too but not as great as awk\\n```\\nsed -n 10p file.txt\\n```\\n\\n# Solution 4\\nUsing `head` and `tail` is also a possible solution\\n```\\ntail -n +10 file.txt | head -n 1\\n```\\n",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nawk \\'NR==10\\' file.txt\\n```\n```\\nc=0 # conuter\\nwhile read -r line\\ndo\\n  c=$((c+1))\\n  if [[ $c -eq 10 ]]; then\\n    echo $line\\n    exit\\n  fi\\ndone < file.txt\\n```\n```\\nsed -n 10p file.txt\\n```\n```\\ntail -n +10 file.txt | head -n 1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3386511,
                "title": "print-the-nth-line-from-a-file",
                "content": "# Intuition\\n**sed** works same as **head** and **tail** but **sed** is good for a large file. **head** and **tail** consume more time on large files.\\n\\n# Approach\\nHere **\"10q;d\"** means **10** is the line number that we want, **10q** will quit immediately when the line number is **10**, **d** will delete the line instead of printing it; this is inhibited on the last line because the **q** causes the rest of the script to be skipped when quitting.\\n\\nMake sure if you are using variable instead of 10 the you need to use double quotes instead of single.\\n\\n# Complexity\\n- Time complexity: **33 ms**\\n\\n- Space complexity: **3.6 MB**\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3370727,
                "title": "195-tenth-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe problem asks us to print the 10th line of the given file. If there are fewer than 10 lines, the script should not print anything.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe problem can be solved using multiple approaches, such as using the sed command, the awk command, or the head and tail commands.\\nUsing the sed command:\\nThe sed command can be used to extract the 10th line from the file. The command sed -n \\'10p\\' file.txt prints the 10th line of the file. If the file contains fewer than 10 lines, the command will not print anything.\\n\\nUsing the awk command:\\nThe awk command can also be used to extract the 10th line from the file. The command awk \\'NR==10\\' file.txt prints the 10th line of the file. If the file contains fewer than 10 lines, the command will not print anything.\\n\\nUsing the head and tail commands:\\nThe head and tail commands can be used to extract the 10th line from the file. The command head -n 10 file.txt | tail -n +10 prints the 10th line of the file. If the file contains fewer than 10 lines, the command will not print anything.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nAll three approaches have a time complexity of O(n), where n is the number of lines in the file.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nAll three approaches have a space complexity of O(1), as they only require a constant amount of memory to store the commands and output.\\n\\n# Code\\nSolution 1:\\n\\nWe can use the sed command to print the 10th line of the file. The command for this is sed -n 10p file.txt. The -n option is used to suppress the default output, and 10p prints only the 10th line of the file.\\n\\nIf the file contains less than 10 lines, this command will not output anything.\\n\\nTime complexity: O(1) as we are just printing one line.\\nSpace complexity: O(1) as we are not using any extra space.\\n\\nSolution 2:\\n\\nWe can use the head command to print the first 10 lines of the file, and then use tail to print only the last line of that output. The command for this is head -10 file.txt | tail -1.\\n\\nIf the file contains less than 10 lines, this command will not output anything.\\n\\nTime complexity: O(n) as we are reading the first 10 lines of the file.\\nSpace complexity: O(1) as we are not using any extra space.\\n\\nSolution 3:\\n\\nWe can use a loop to read the file line by line, and keep a counter to keep track of the line number. When the counter reaches 10, we print that line and exit the loop. The command for this is:\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncounter=0\\nwhile read line && [ $counter -le 9 ]\\ndo\\n    counter=$((counter+1))\\n    if [ $counter -eq 10 ]\\n    then\\n        echo $line\\n        break\\n    fi\\ndone < file.txt\\n\\n```\\nIf the file contains less than 10 lines, this command will not output anything.\\n\\nTime complexity: O(n) as we are reading the file line by line.\\nSpace complexity: O(1) as we are not using any extra space.\\n\\n",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\ncounter=0\\nwhile read line && [ $counter -le 9 ]\\ndo\\n    counter=$((counter+1))\\n    if [ $counter -eq 10 ]\\n    then\\n        echo $line\\n        break\\n    fi\\ndone < file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3368168,
                "title": "solution-using-awk",
                "content": "# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nawk \\'NR==10\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3349059,
                "title": "1-liner-solution-with-awk",
                "content": "\\n\\'\\'\\'\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n```\\n\\n awk \\'NR==10 {print $0}\\' file.txt",
                "solutionTags": [
                    "Bash"
                ],
                "code": "\\n\\'\\'\\'\\n# Read from the file file.txt and output the tenth line to stdout.\\n\\n```\\n\\n awk \\'NR==10 {print $0}\\' file.txt",
                "codeTag": "Unknown"
            },
            {
                "id": 3344472,
                "title": "simple-solution-using-bash-sed-command",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3337981,
                "title": "tenth-line-bash-solution-1-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n 10p file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3330966,
                "title": "read-10th-line-of-text-from-a-file",
                "content": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#!/bin/bash\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\n#!/bin/bash\\n\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3323503,
                "title": "chatgpt-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed -n \\'10p\\' file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3279180,
                "title": "tenth-line",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nsed \"10q;d\" file.txt\\n```",
                "solutionTags": [
                    "Java",
                    "Bash"
                ],
                "code": "```\\nsed \"10q;d\" file.txt\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3173975,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\n# Read from the file file.txt and output the tenth line to stdout.\\nsed \"10q;d\" file.txt\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3167519,
                "title": "one-liner-with-cat-tr-and-cut",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n```\\ncat file.txt\\n```\\nThis reads the file to stdout. \\n\\n```\\ntr -st \\'\\\\n\\' \\'^\\'\\n```\\nCombines different lines with the delimeter \\'^\\' (that does not occur in any string)\\n\\n```\\ncut -d \\'^\\' -f 10\\n```\\nThis \"cuts\" the string with delimeter \\'^\\' and prints the 10th field.\\n\\nThe final command is a combination of the above three commands  connected with pipes:\\n\\n# Code\\n```\\ncat file.txt | tr -st \\'\\\\n\\' \\'^\\' | cut -d \\'^\\' -f 10\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\ncat file.txt\\n```\n```\\ntr -st \\'\\\\n\\' \\'^\\'\\n```\n```\\ncut -d \\'^\\' -f 10\\n```\n```\\ncat file.txt | tr -st \\'\\\\n\\' \\'^\\' | cut -d \\'^\\' -f 10\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3165005,
                "title": "print-a-specific-line-from-a-file",
                "content": "# Approach\\nThis code prints the line of a file specified by the line_number variable. The command awk is used to search through the file specified by file_name and print the line that corresponds to the line_number variable.\\n#Code_Source: Grepper\\n\\n# Complexity\\n- Time complexity:\\n\\n    O(1)\\n\\n- Space complexity:\\nO(1) - This code has a constant time complexity as it only requires one pass through the file\\n\\n# Code\\n```\\nawk \\'{if(NR==10) print $0}\\' file.txt\\n```",
                "solutionTags": [
                    "Bash"
                ],
                "code": "```\\nawk \\'{if(NR==10) print $0}\\' file.txt\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1565037,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1565665,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1566370,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1565527,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1570679,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568457,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568193,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1567384,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568618,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568520,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1565037,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1565665,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1566370,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1565527,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1570679,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568457,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568193,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1567384,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568618,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1568520,
                "content": [
                    {
                        "username": "andyhansmall1001",
                        "content": "    awk 'NR == 10' file.txt\\n\\nNR: the current row number (start from 1).\\nBecause the default action of awk is {print $0}, we can ignore the action."
                    },
                    {
                        "username": "chammika",
                        "content": "Extract NLINES lines from STARTING line\\n\\n    STARTING=10; NLINES=1; cat file.txt | tail -n+${STARTING} | head -n${NLINES}"
                    },
                    {
                        "username": "bhargavsnv100",
                        "content": "\\n`tail file.txt -n +10 | head -n1`\\n\\nThat\\'s about it! `tail -n +10` takes lines from 10th onwards, so we take the first line of that `using head -n1`."
                    },
                    {
                        "username": "fabrizio3",
                        "content": "    awk '{if(NR==10) print $0}' file.txt\\n\\nIf the record number (NR) is 10, print the entire record $0.\\nNR in AWK by default is any single line (en of record delimiter is \\\\n).\\nRecords start numbering from 1."
                    },
                    {
                        "username": "i_am_sai",
                        "content": "head -n 10 file.txt | tail -n +10\\n\\nhead -n 10 -> prints the first 10 lines\\ntail -n +10  -> prints from the 10th line\\n\\nAdding | makes the tail command to print from 10th line itself."
                    },
                    {
                        "username": "leunggexxxx",
                        "content": "`sed -n \\'10 p\\' file.txt`\\n\\n-n: slient output, which means sed will not output the file content\\n10: the tenth line\\np: print\\n"
                    },
                    {
                        "username": "vunnapr",
                        "content": "#This is the easiest way to get the 10th line or any line less than 10 is present\\n\\nhead file.txt | tail -1"
                    },
                    {
                        "username": "steven-bohao",
                        "content": "awk \\'{if (NR==10) print $0}\\' file.txt\\n\\nsed -n \\'10p\\' file.txt\\n\\nc=`cat file.txt | wc -l`\\nif [[ $c -gt 9 ]];then\\n    head -10 file.txt | tail -1\\nfi"
                    },
                    {
                        "username": "_shikha",
                        "content": "Using awk\\n\\t`cat file.txt | awk \\'{if (NR==10) print$0}\\'`\\n\\t\\nUsing sed\\n     `cat file.txt | sed -n \\'10p\\'`\\n\\n"
                    },
                    {
                        "username": "Nagaraju6242",
                        "content": "sed -n \\'10p\\' < file.txt"
                    }
                ]
            },
            {
                "id": 1567912,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1570440,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1570034,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1570011,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1569015,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1892861,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1576126,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1576064,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1576047,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1574756,
                "content": [
                    {
                        "username": "MonsieurWilson",
                        "content": "Since there already have solutions based on `awk` or `sed` or `head | tail`, here is a unique soluton.\\n\\n    IFS=$'\\\\n' ;arr=($(<file.txt)); echo ${arr[9]}"
                    },
                    {
                        "username": "pankajgupta20",
                        "content": "##### awk solution\\n\\tawk \\'NR==10\\' file.txt\\n##### sed solution\\n\\tsed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "jtsa0267",
                        "content": "![image](https://assets.leetcode.com/users/images/49a84700-0198-469f-b60f-5ebff9b85e4b_1593762455.829133.png)\\n"
                    },
                    {
                        "username": "azhar24u",
                        "content": "sed -n 10p file.txt"
                    },
                    {
                        "username": "iziang",
                        "content": "Only one line in awk\\n    \\n    awk 'NR == 10' file.txt"
                    },
                    {
                        "username": "Dzuchun",
                        "content": "\"\\nNote:\\n1. If the file contains less than 10 lines, what should you output?\\n\"\\n\\nWhy would I know, shouldn\\'t it be included in problem description?"
                    },
                    {
                        "username": "crazydar",
                        "content": "Exactly what I was thinking. This is ridiculous - an exercise in mind reading..."
                    },
                    {
                        "username": "powernoob",
                        "content": "sed -n \\'10p\\' file.txt"
                    },
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "apgokul",
                        "content": "The sed command below will retrieve the 10th line from the file `file.txt`\\n\\n#### solution :\\n\\n`sed \\'10q;d\\' file`"
                    },
                    {
                        "username": "FACEPLANT",
                        "content": "`awk \\'NR == 10\\' file.txt`"
                    }
                ]
            },
            {
                "id": 1574416,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1573754,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1573451,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1573408,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1572640,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1572408,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1572270,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1575820,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 1574716,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            },
            {
                "id": 2056576,
                "content": [
                    {
                        "username": "rajattandonmit",
                        "content": "awk \\'NR==10\\' file.txt"
                    },
                    {
                        "username": "somayyah_mohd",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "user3154L",
                        "content": "`awk \\'NR==10\\' file.txt`"
                    },
                    {
                        "username": "echobash",
                        "content": "cat file.txt | awk \\'{if(NR==10)print} \\'"
                    },
                    {
                        "username": "zhoucego",
                        "content": "awk \\'NR == 10\\' file.txt\\n\\n\\n"
                    },
                    {
                        "username": "chinmay93",
                        "content": "sed \\'10q;d\\' file.txt"
                    },
                    {
                        "username": "variable_infiltration",
                        "content": "`if [ $(wc -l file.txt | awk \\'{print $1}\\') -gt 9 ]; then cat file.txt | head -n10 | tail -1; fi`"
                    },
                    {
                        "username": "hazem1911",
                        "content": "`cat file.txt | cut -d$\\'\\\\n\\' -f10`"
                    },
                    {
                        "username": "Motherbrain",
                        "content": "sed -n \\'10p\\' < file.txt"
                    },
                    {
                        "username": "RetroCoder80s",
                        "content": "This problem is tagged as \"bash\" so it should be possible to use ANY command line tool that works in bash like \"bat\" - i.e: bat -r 10:10 file.txt !"
                    }
                ]
            }
        ]
    },
    {
        "title": "Find Median from Data Stream",
        "question_content": "<p>The <strong>median</strong> is the middle value in an ordered integer list. If the size of the list is even, there is no middle value, and the median is the mean of the two middle values.</p>\n\n<ul>\n\t<li>For example, for <code>arr = [2,3,4]</code>, the median is <code>3</code>.</li>\n\t<li>For example, for <code>arr = [2,3]</code>, the median is <code>(2 + 3) / 2 = 2.5</code>.</li>\n</ul>\n\n<p>Implement the MedianFinder class:</p>\n\n<ul>\n\t<li><code>MedianFinder()</code> initializes the <code>MedianFinder</code> object.</li>\n\t<li><code>void addNum(int num)</code> adds the integer <code>num</code> from the data stream to the data structure.</li>\n\t<li><code>double findMedian()</code> returns the median of all elements so far. Answers within <code>10<sup>-5</sup></code> of the actual answer will be accepted.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;MedianFinder&quot;, &quot;addNum&quot;, &quot;addNum&quot;, &quot;findMedian&quot;, &quot;addNum&quot;, &quot;findMedian&quot;]\n[[], [1], [2], [], [3], []]\n<strong>Output</strong>\n[null, null, null, 1.5, null, 2.0]\n\n<strong>Explanation</strong>\nMedianFinder medianFinder = new MedianFinder();\nmedianFinder.addNum(1);    // arr = [1]\nmedianFinder.addNum(2);    // arr = [1, 2]\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\nmedianFinder.addNum(3);    // arr[1, 2, 3]\nmedianFinder.findMedian(); // return 2.0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>-10<sup>5</sup> &lt;= num &lt;= 10<sup>5</sup></code></li>\n\t<li>There will be at least one element in the data structure before calling <code>findMedian</code>.</li>\n\t<li>At most <code>5 * 10<sup>4</sup></code> calls will be made to <code>addNum</code> and <code>findMedian</code>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong></p>\n\n<ul>\n\t<li>If all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n\t<li>If <code>99%</code> of all integer numbers from the stream are in the range <code>[0, 100]</code>, how would you optimize your solution?</li>\n</ul>\n",
        "solutions": [
            {
                "id": 74047,
                "title": "java-python-two-heap-solution-o-log-n-add-o-1-find",
                "content": "The invariant of the algorithm is two heaps, small and large, each represent half of the current list. The length of smaller half is kept to be n / 2 at all time and the length of the larger half is either n / 2 or n / 2 + 1 depend on n's parity. \\n\\nThis way we only need to peek the two heaps' top number to calculate median.\\n\\nAny time before we add a new number, there are two scenarios, (total n numbers, k = n / 2):\\n\\n    (1) length of (small, large) == (k, k)\\n    (2) length of (small, large) == (k, k + 1)\\n\\nAfter adding the number, total (n + 1) numbers, they will become:\\n\\n    (1) length of (small, large) == (k, k + 1)\\n    (2) length of (small, large) == (k + 1, k + 1)\\n\\nHere we take the first scenario for example, we know the large will gain one more item and small will remain the same size, but we cannot just push the item into large. What we should do is we push the new number into small and pop the maximum item from small then push it into large (all the pop and push here are heappop and heappush). By doing this kind of operations for the two scenarios we can keep our invariant.\\n\\nTherefore to add a number, we have 3 O(log n) heap operations. Luckily the heapq provided us a function \"heappushpop\" which saves some time by combine two into one. The document says:\\n\\n<blockquote>Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate call to heappop().</blockquote>\\n\\nAlltogether, the add operation is O(logn), The findMedian operation is O(1). \\n\\nNote that the heapq in python is a min heap, thus we need to invert the values in the smaller half to mimic a \"max heap\".\\n\\nA further observation is that the two scenarios take turns when adding numbers, thus it is possible to combine the two into one. For this please see [stefan's post][1]\\n\\n\\n**Java**\\n\\n    private PriorityQueue<Integer> small = new PriorityQueue<>(Collections.reverseOrder());\\n    private PriorityQueue<Integer> large = new PriorityQueue<>();\\n    private boolean even = true;\\n\\n    public double findMedian() {\\n        if (even)\\n            return (small.peek() + large.peek()) / 2.0;\\n        else\\n            return small.peek();\\n    }\\n\\n    public void addNum(int num) {\\n        if (even) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }\\n        even = !even;\\n    }\\n\\n\\n**Python**\\n\\n    from heapq import *\\n    \\n    \\n    class MedianFinder:\\n        def __init__(self):\\n            self.small = []  # the smaller half of the list, max heap (invert min-heap)\\n            self.large = []  # the larger half of the list, min heap\\n    \\n        def addNum(self, num):\\n            if len(self.small) == len(self.large):\\n                heappush(self.large, -heappushpop(self.small, -num))\\n            else:\\n                heappush(self.small, -heappushpop(self.large, num))\\n    \\n        def findMedian(self):\\n            if len(self.small) == len(self.large):\\n                return float(self.large[0] - self.small[0]) / 2.0\\n            else:\\n                return float(self.large[0])\\n\\n    # 18 / 18 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 388 ms\\n\\n\\n\\n\\n  [1]: https://leetcode.com/discuss/64910/very-short-o-log-n-o-1",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "The invariant of the algorithm is two heaps, small and large, each represent half of the current list. The length of smaller half is kept to be n / 2 at all time and the length of the larger half is either n / 2 or n / 2 + 1 depend on n's parity. \\n\\nThis way we only need to peek the two heaps' top number to calculate median.\\n\\nAny time before we add a new number, there are two scenarios, (total n numbers, k = n / 2):\\n\\n    (1) length of (small, large) == (k, k)\\n    (2) length of (small, large) == (k, k + 1)\\n\\nAfter adding the number, total (n + 1) numbers, they will become:\\n\\n    (1) length of (small, large) == (k, k + 1)\\n    (2) length of (small, large) == (k + 1, k + 1)\\n\\nHere we take the first scenario for example, we know the large will gain one more item and small will remain the same size, but we cannot just push the item into large. What we should do is we push the new number into small and pop the maximum item from small then push it into large (all the pop and push here are heappop and heappush). By doing this kind of operations for the two scenarios we can keep our invariant.\\n\\nTherefore to add a number, we have 3 O(log n) heap operations. Luckily the heapq provided us a function \"heappushpop\" which saves some time by combine two into one. The document says:\\n\\n<blockquote>Push item on the heap, then pop and return the smallest item from the heap. The combined action runs more efficiently than heappush() followed by a separate call to heappop().</blockquote>\\n\\nAlltogether, the add operation is O(logn), The findMedian operation is O(1). \\n\\nNote that the heapq in python is a min heap, thus we need to invert the values in the smaller half to mimic a \"max heap\".\\n\\nA further observation is that the two scenarios take turns when adding numbers, thus it is possible to combine the two into one. For this please see [stefan's post][1]\\n\\n\\n**Java**\\n\\n    private PriorityQueue<Integer> small = new PriorityQueue<>(Collections.reverseOrder());\\n    private PriorityQueue<Integer> large = new PriorityQueue<>();\\n    private boolean even = true;\\n\\n    public double findMedian() {\\n        if (even)\\n            return (small.peek() + large.peek()) / 2.0;\\n        else\\n            return small.peek();\\n    }\\n\\n    public void addNum(int num) {\\n        if (even) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }\\n        even = !even;\\n    }\\n\\n\\n**Python**\\n\\n    from heapq import *\\n    \\n    \\n    class MedianFinder:\\n        def __init__(self):\\n            self.small = []  # the smaller half of the list, max heap (invert min-heap)\\n            self.large = []  # the larger half of the list, min heap\\n    \\n        def addNum(self, num):\\n            if len(self.small) == len(self.large):\\n                heappush(self.large, -heappushpop(self.small, -num))\\n            else:\\n                heappush(self.small, -heappushpop(self.large, num))\\n    \\n        def findMedian(self):\\n            if len(self.small) == len(self.large):\\n                return float(self.large[0] - self.small[0]) / 2.0\\n            else:\\n                return float(self.large[0])\\n\\n    # 18 / 18 test cases passed.\\n    # Status: Accepted\\n    # Runtime: 388 ms\\n\\n\\n\\n\\n  [1]: https://leetcode.com/discuss/64910/very-short-o-log-n-o-1",
                "codeTag": "Java"
            },
            {
                "id": 74062,
                "title": "short-simple-java-c-python-o-log-n-o-1",
                "content": "I keep two heaps (or priority queues):\\n\\n- Max-heap `small` has the smaller half of the numbers.\\n- Min-heap `large` has the larger half of the numbers.\\n\\nThis gives me direct access to the one or two middle values (they're the tops of the heaps), so getting the median takes O(1) time. And adding a number takes O(log n) time.\\n\\nSupporting both min- and max-heap is more or less cumbersome, depending on the language, so I simply negate the numbers in the heap in which I want the reverse of the default order. To prevent this from causing a bug with -2<sup>31</sup> (which negated is itself, when using 32-bit ints), I use integer types larger than 32 bits.\\n\\nUsing larger integer types also prevents an overflow error when taking the mean of the two middle numbers. I think almost all solutions posted previously have that bug.\\n\\n**Update:** These are pretty short already, but by now I wrote [even shorter ones](https://leetcode.com/discuss/64910/very-short-o-log-n-o-1).\\n\\n---\\n\\n**Java**\\n\\n    class MedianFinder {\\n    \\n        private Queue<Long> small = new PriorityQueue(),\\n                            large = new PriorityQueue();\\n    \\n        public void addNum(int num) {\\n            large.add((long) num);\\n            small.add(-large.poll());\\n            if (large.size() < small.size())\\n                large.add(-small.poll());\\n        }\\n    \\n        public double findMedian() {\\n            return large.size() > small.size()\\n                   ? large.peek()\\n                   : (large.peek() - small.peek()) / 2.0;\\n        }\\n    };\\n\\nProps to [larrywang2014's solution](https://leetcode.com/discuss/64842/32ms-easy-to-understand-java-solution) for making me aware that I can use Queue in the declaration instead of PriorityQueue (that's all I got from him, though (just saying because I just saw he changed his previously longer addNum and it's now equivalent to mine)).\\n\\n---\\n\\n**C++**\\n\\n    class MedianFinder {\\n        priority_queue<long> small, large;\\n    public:\\n    \\n        void addNum(int num) {\\n            small.push(num);\\n            large.push(-small.top());\\n            small.pop();\\n            if (small.size() < large.size()) {\\n                small.push(-large.top());\\n                large.pop();\\n            }\\n        }\\n    \\n        double findMedian() {\\n            return small.size() > large.size()\\n                   ? small.top()\\n                   : (small.top() - large.top()) / 2.0;\\n        }\\n    };\\n\\nBig thanks to jianchao.li.fighter for telling me that C++'s priority_queue is a max-queue (see comments below).\\n\\n---\\n\\n**Python**\\n\\n    from heapq import *\\n    \\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.heaps = [], []\\n    \\n        def addNum(self, num):\\n            small, large = self.heaps\\n            heappush(small, -heappushpop(large, num))\\n            if len(large) < len(small):\\n                heappush(large, -heappop(small))\\n    \\n        def findMedian(self):\\n            small, large = self.heaps\\n            if len(large) > len(small):\\n                return float(large[0])\\n            return (large[0] - small[0]) / 2.0",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "I keep two heaps (or priority queues):\\n\\n- Max-heap `small` has the smaller half of the numbers.\\n- Min-heap `large` has the larger half of the numbers.\\n\\nThis gives me direct access to the one or two middle values (they're the tops of the heaps), so getting the median takes O(1) time. And adding a number takes O(log n) time.\\n\\nSupporting both min- and max-heap is more or less cumbersome, depending on the language, so I simply negate the numbers in the heap in which I want the reverse of the default order. To prevent this from causing a bug with -2<sup>31</sup> (which negated is itself, when using 32-bit ints), I use integer types larger than 32 bits.\\n\\nUsing larger integer types also prevents an overflow error when taking the mean of the two middle numbers. I think almost all solutions posted previously have that bug.\\n\\n**Update:** These are pretty short already, but by now I wrote [even shorter ones](https://leetcode.com/discuss/64910/very-short-o-log-n-o-1).\\n\\n---\\n\\n**Java**\\n\\n    class MedianFinder {\\n    \\n        private Queue<Long> small = new PriorityQueue(),\\n                            large = new PriorityQueue();\\n    \\n        public void addNum(int num) {\\n            large.add((long) num);\\n            small.add(-large.poll());\\n            if (large.size() < small.size())\\n                large.add(-small.poll());\\n        }\\n    \\n        public double findMedian() {\\n            return large.size() > small.size()\\n                   ? large.peek()\\n                   : (large.peek() - small.peek()) / 2.0;\\n        }\\n    };\\n\\nProps to [larrywang2014's solution](https://leetcode.com/discuss/64842/32ms-easy-to-understand-java-solution) for making me aware that I can use Queue in the declaration instead of PriorityQueue (that's all I got from him, though (just saying because I just saw he changed his previously longer addNum and it's now equivalent to mine)).\\n\\n---\\n\\n**C++**\\n\\n    class MedianFinder {\\n        priority_queue<long> small, large;\\n    public:\\n    \\n        void addNum(int num) {\\n            small.push(num);\\n            large.push(-small.top());\\n            small.pop();\\n            if (small.size() < large.size()) {\\n                small.push(-large.top());\\n                large.pop();\\n            }\\n        }\\n    \\n        double findMedian() {\\n            return small.size() > large.size()\\n                   ? small.top()\\n                   : (small.top() - large.top()) / 2.0;\\n        }\\n    };\\n\\nBig thanks to jianchao.li.fighter for telling me that C++'s priority_queue is a max-queue (see comments below).\\n\\n---\\n\\n**Python**\\n\\n    from heapq import *\\n    \\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.heaps = [], []\\n    \\n        def addNum(self, num):\\n            small, large = self.heaps\\n            heappush(small, -heappushpop(large, num))\\n            if len(large) < len(small):\\n                heappush(large, -heappop(small))\\n    \\n        def findMedian(self):\\n            small, large = self.heaps\\n            if len(large) > len(small):\\n                return float(large[0])\\n            return (large[0] - small[0]) / 2.0",
                "codeTag": "Java"
            },
            {
                "id": 1330646,
                "title": "c-java-python-minheap-maxheap-solution-picture-explain-clean-concise",
                "content": "**\\u2714\\uFE0F Solution 1: MaxHeap to store a half of low numbers, MinHeap to store a half of high numbers**\\n- The idea is to divide numbers into 2 balanced halves, one half `low` stores low numbers, the other half `high` stores high numbers. To access the median in `O(1)`, we need a data structure that give us the maximum of `low` half and the minimum of `high` half in `O(1)`. That\\'s where `maxHeap` and `minHeap` come into play.\\n- We use `maxHeap` to store a half of **low numbers**, top of the maxHeap is the highest number among low numbers.\\n- We use `minHeap` to store a half of **high numbers**, top of the minHeap is the lowest number among high numbers.\\n- We need to balance the size between `maxHeap` and `minHeap` while processing. Hence after adding `k` elements, \\n\\t- If `k = 2 * i` then `maxHeap.size = minHeap.size = i`\\n\\t- If `k = 2 * i + 1`, let `maxHeap` store 1 element more than `minHeap`, then `maxHeap.size = minHeap.size + 1`.\\n- When adding a new number `num` into our  `MedianFinder`:\\n\\t- Firstly, add `num` to the `maxHeap`, now `maxHeap` may contain the big element (which should belong to `minHeap`). So we need to balance, by removing the highest element from `maxHeap`, and offer it to `minHeap`. \\n\\t- Now, the `minHeap` might hold more elements than `maxHeap`, in that case, we need to balance the size, by removing the lowest element from `minHeap` and offer it back to `maxHeap`.\\n- When doing `findMedian()`:\\n\\t- If `maxHeap.size > minHeap.size` return top of the `maxHeap`, which is the highest number amongs low numbers.\\n\\t- Else if `maxHeap.size == minHeap` return the `(maxHeap.top() + minHeap.top()) / 2`.\\n\\n![image](https://assets.leetcode.com/users/images/0eb8feba-cbfa-4f73-8d26-9aad226bdbc5_1626016093.9717174.png)\\n\\n\\n<iframe src=\"https://leetcode.com/playground/FbECj5Ww/shared\" frameBorder=\"0\" width=\"100%\" height=\"420\"></iframe>\\n\\n**Complexity**\\n- Time:\\n\\t- Constructor: `O(1)`\\n\\t- addNum: `O(logN)`\\n\\t- findMedian: `O(1)`\\n- Space: `O(N)`\\n\\n---\\n\\n**\\u2714\\uFE0F Solution 2: SortedList**\\n```python\\nfrom sortedcontainers import SortedList\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.arr = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.arr.add(num)\\n\\n    def findMedian(self) -> float:\\n        n = len(self.arr)\\n        if n % 2 == 1:\\n            return self.arr[n//2]\\n        return (self.arr[n//2] + self.arr[n//2-1]) / 2\\n```\\n**Complexity**\\n- Time:\\n\\t- Constructor: `O(1)`\\n\\t- addNum, findMedian: `O(logN)`\\n- Space: `O(N)`\\n\\n",
                "solutionTags": [],
                "code": "```python\\nfrom sortedcontainers import SortedList\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.arr = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.arr.add(num)\\n\\n    def findMedian(self) -> float:\\n        n = len(self.arr)\\n        if n % 2 == 1:\\n            return self.arr[n//2]\\n        return (self.arr[n//2] + self.arr[n//2-1]) / 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74163,
                "title": "my-c-priority-queue-based-solution-140-ms",
                "content": "The idea is to use two heaps  (one max heap, one mn heap) to save the input data. firstQ is a max_heap to save the first half of the data with smaller values,  and secQ is a min_heap to save the second half of the data with bigger values. Everytime when inserting a new value, we first compare if it is smaller than the top of firstQ (the largest value of the first half), if so, insert into firstQ. Otherwise, it belongs to the second half.  After inserting, we have to balance the first half and the second half to make sure either they have the same length or the length difference is only 1. \\nThe median will be the mean of two top elements (when they have the same length) or the top element of the queue with a larger length. \\n\\n    class MedianFinder {\\n    private:\\n        priority_queue<int> firstQ; // max_heap for the first half\\n        priority_queue<int, std::vector<int>, std::greater<int> > secQ; // min_heap for the second half\\n    public:\\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            if(firstQ.empty() || (firstQ.top()>num)) firstQ.push(num); // if it belongs to the smaller half\\n            else secQ.push(num); \\n            \\n            // rebalance the two halfs to make sure the length difference is no larger than 1\\n            if(firstQ.size() > (secQ.size()+1))\\n            {\\n                secQ.push(firstQ.top());\\n                firstQ.pop();\\n            }\\n            else if(firstQ.size()+1<secQ.size())\\n            {\\n                firstQ.push(secQ.top());\\n                secQ.pop();\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            if(firstQ.size() == secQ.size()) return firstQ.empty()?0:( (firstQ.top()+secQ.top())/2.0);\\n            else return (firstQ.size() > secQ.size())? firstQ.top():secQ.top(); \\n        }\\n    };",
                "solutionTags": [],
                "code": "The idea is to use two heaps  (one max heap, one mn heap) to save the input data. firstQ is a max_heap to save the first half of the data with smaller values,  and secQ is a min_heap to save the second half of the data with bigger values. Everytime when inserting a new value, we first compare if it is smaller than the top of firstQ (the largest value of the first half), if so, insert into firstQ. Otherwise, it belongs to the second half.  After inserting, we have to balance the first half and the second half to make sure either they have the same length or the length difference is only 1. \\nThe median will be the mean of two top elements (when they have the same length) or the top element of the queue with a larger length. \\n\\n    class MedianFinder {\\n    private:\\n        priority_queue<int> firstQ; // max_heap for the first half\\n        priority_queue<int, std::vector<int>, std::greater<int> > secQ; // min_heap for the second half\\n    public:\\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            if(firstQ.empty() || (firstQ.top()>num)) firstQ.push(num); // if it belongs to the smaller half\\n            else secQ.push(num); \\n            \\n            // rebalance the two halfs to make sure the length difference is no larger than 1\\n            if(firstQ.size() > (secQ.size()+1))\\n            {\\n                secQ.push(firstQ.top());\\n                firstQ.pop();\\n            }\\n            else if(firstQ.size()+1<secQ.size())\\n            {\\n                firstQ.push(secQ.top());\\n                secQ.pop();\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            if(firstQ.size() == secQ.size()) return firstQ.empty()?0:( (firstQ.top()+secQ.top())/2.0);\\n            else return (firstQ.size() > secQ.size())? firstQ.top():secQ.top(); \\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 74049,
                "title": "share-my-java-solution-logn-to-insert-o-1-to-query",
                "content": "Not sure why it is marked as hard, i think this is one of the easiest questions on leetcode.\\n\\n    class MedianFinder {\\n        // max queue is always larger or equal to min queue\\n        PriorityQueue<Integer> min = new PriorityQueue();\\n        PriorityQueue<Integer> max = new PriorityQueue(1000, Collections.reverseOrder());\\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            max.offer(num);\\n            min.offer(max.poll());\\n            if (max.size() < min.size()){\\n                max.offer(min.poll());\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if (max.size() == min.size()) return (max.peek() + min.peek()) /  2.0;\\n            else return max.peek();\\n        }\\n    };",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "Not sure why it is marked as hard, i think this is one of the easiest questions on leetcode.\\n\\n    class MedianFinder {\\n        // max queue is always larger or equal to min queue\\n        PriorityQueue<Integer> min = new PriorityQueue();\\n        PriorityQueue<Integer> max = new PriorityQueue(1000, Collections.reverseOrder());\\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            max.offer(num);\\n            min.offer(max.poll());\\n            if (max.size() < min.size()){\\n                max.offer(min.poll());\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if (max.size() == min.size()) return (max.peek() + min.peek()) /  2.0;\\n            else return max.peek();\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 74158,
                "title": "python-o-lgn-using-two-heapq-data-sturctures",
                "content": "    class MedianFinder:\\n    import heapq\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.small = [] # store the small half, top is the largest in the small part\\n        self.large = [] # store the large half, top is the smallest in the large part\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        if len(self.small) == 0:\\n            heapq.heappush(self.small, -num)\\n            return\\n        if num <= -self.small[0]:\\n            # push to small part\\n            heapq.heappush(self.small, -num)\\n        else:\\n            # push to large part\\n            heapq.heappush(self.large, num)\\n        # adjust small and large balance\\n        if len(self.small) - len(self.large) == 2:\\n            heapq.heappush(self.large, -heapq.heappop(self.small))\\n        elif len(self.small) - len(self.large) == -2:\\n            heapq.heappush(self.small, -heapq.heappop(self.large))\\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        if len(self.small) == len(self.large):\\n            return (self.large[0] - self.small[0])/2.0\\n        return -float(self.small[0]) if len(self.small) > len(self.large) else float(self.large[0])",
                "solutionTags": [],
                "code": "    class MedianFinder:\\n    import heapq\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.small = [] # store the small half, top is the largest in the small part\\n        self.large = [] # store the large half, top is the smallest in the large part\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        if len(self.small) == 0:\\n            heapq.heappush(self.small, -num)\\n            return\\n        if num <= -self.small[0]:\\n            # push to small part\\n            heapq.heappush(self.small, -num)\\n        else:\\n            # push to large part\\n            heapq.heappush(self.large, num)\\n        # adjust small and large balance\\n        if len(self.small) - len(self.large) == 2:\\n            heapq.heappush(self.large, -heapq.heappop(self.small))\\n        elif len(self.small) - len(self.large) == -2:\\n            heapq.heappush(self.small, -heapq.heappop(self.large))\\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        if len(self.small) == len(self.large):\\n            return (self.large[0] - self.small[0])/2.0\\n        return -float(self.small[0]) if len(self.small) > len(self.large) else float(self.large[0])",
                "codeTag": "Java"
            },
            {
                "id": 286238,
                "title": "java-simple-code-follow-up",
                "content": "- If the range of the numbers is in `[0...100]`, we use a bucket to collect the frequency of each number. By accumulating the frequency of elements in the bucket, we can know the median numbers.\\n````\\n\\tclass MedianFinder {\\n        int A[] = new int[101], n = 0;\\n\\t\\t\\n\\t\\t// O(1)\\n        public void addNum(int num) {\\n            A[num]++;\\n            n++;\\n        }\\n\\t\\t\\n\\t\\t// O(100) = O(1)\\n        public double findMedian() {\\n\\t\\t\\n\\t\\t\\t// find 1st median number\\n            int count = 0, i = 0;\\t\\t\\t\\n            while (count < n/2) count += A[i++];\\n\\t\\t\\t\\n\\t\\t\\t// find 2nd median number\\n            int j = i;\\n            while (count < n/2+1) count += A[j++];\\n\\t\\t\\t\\n            return (n%2 == 1) ? i : (i-1+j-1) / 2.0;\\n        }\\n    }\\n````\\n\\n- If `1%` numbers are outside of the range `[0...100]`, we know that when the set of numbers is large, the median numbers must be in the range of `[0...100]`, because this range contains `99%` numbers. We don\\'t need to store values of `1%` numbers, but the counts of these numbers (`countLessZero` & `countGreater100`). The `findMedian` method is almost the same, the difference is we start counting from `countLessZero` value\\n````\\n\\tclass MedianFinder {\\n        int A[] = new int[101], n = 0;\\n\\t\\tint countLessZero = 0;\\n\\t\\t// int countGreater100 = 0; // not needed\\n\\t\\t\\n\\t\\t// O(1)\\n        public void addNum(int num) {\\n\\t\\t\\tif (num < 0) countLessZero++;\\n\\t\\t\\t// else if (num > 100) countGreater100++;\\n\\t\\t\\telse A[num]++;\\n            n++;\\n        }\\n\\t\\t\\n\\t\\t// O(100) = O(1)\\n        public double findMedian() {\\n\\t\\t\\n\\t\\t\\t// find 1st median number\\n            int count = countLessZero, i = 0;\\t\\t\\t\\n            while (count < /2) count += A[i++];\\n\\t\\t\\t\\n\\t\\t\\t// find 2nd median number\\n            int j = i;\\n            while (count < n/2+1) count += A[j++];\\n\\t\\t\\t\\n            return (n%2 == 1) ? i : (i-1+j-1) / 2.0;\\n        }\\n    }\\n````\\n\\nInsert - `O(1)`, Find `O(1)`, Space Complexity `O(1)`\\n\\n",
                "solutionTags": [],
                "code": "````\\n\\tclass MedianFinder {\\n        int A[] = new int[101], n = 0;\\n\\t\\t\\n\\t\\t// O(1)\\n        public void addNum(int num) {\\n            A[num]++;\\n            n++;\\n        }\\n\\t\\t\\n\\t\\t// O(100) = O(1)\\n        public double findMedian() {\\n\\t\\t\\n\\t\\t\\t// find 1st median number\\n            int count = 0, i = 0;\\t\\t\\t\\n            while (count < n/2) count += A[i++];\\n\\t\\t\\t\\n\\t\\t\\t// find 2nd median number\\n            int j = i;\\n            while (count < n/2+1) count += A[j++];\\n\\t\\t\\t\\n            return (n%2 == 1) ? i : (i-1+j-1) / 2.0;\\n        }\\n    }\\n```\n````\\n\\tclass MedianFinder {\\n        int A[] = new int[101], n = 0;\\n\\t\\tint countLessZero = 0;\\n\\t\\t// int countGreater100 = 0; // not needed\\n\\t\\t\\n\\t\\t// O(1)\\n        public void addNum(int num) {\\n\\t\\t\\tif (num < 0) countLessZero++;\\n\\t\\t\\t// else if (num > 100) countGreater100++;\\n\\t\\t\\telse A[num]++;\\n            n++;\\n        }\\n\\t\\t\\n\\t\\t// O(100) = O(1)\\n        public double findMedian() {\\n\\t\\t\\n\\t\\t\\t// find 1st median number\\n            int count = countLessZero, i = 0;\\t\\t\\t\\n            while (count < /2) count += A[i++];\\n\\t\\t\\t\\n\\t\\t\\t// find 2nd median number\\n            int j = i;\\n            while (count < n/2+1) count += A[j++];\\n\\t\\t\\t\\n            return (n%2 == 1) ? i : (i-1+j-1) / 2.0;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805054,
                "title": "python3-max-and-min-heaps-sortedlist-o-log-n",
                "content": "The main issue we need to solve in this problem is to have a list that is always sorted in some way so we can access the middle one/two values easily. A binary search tree is ideal for this since we can add value to it in O(log n). In python, we use SortedList.\\n\\n```\\nfrom sortedcontainers import SortedList\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.s = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.s.add(num)\\n\\n    def findMedian(self) -> float:\\n        l = len(self.s)\\n        if l%2==0:\\n            return (self.s[l//2-1]+self.s[l//2])/2\\n        return self.s[l//2]\\n\\n```\\n\\nI don\\'t think the interviewer is looking for an API call during the interview, so I don\\'t think giving the above answer can pass it. And a follow-up question would be, please implement the binary search tree...\\nAnother idea is to use a ```maxHeap``` to store the numbers in the first half of the list and a ```minHeap``` to store the numbers in the second half of the list. In order to get the median efficiently, we need to balance the two heaps so that the median/s is/are always on the top of the heap/s. To do this, each time when we add a number, we check the length of the two heaps and make sure``` maxHeap``` either has the same length as the ```minHeap``` (the entire list has an even length), or the ``` maxHeap``` has one more value than the ```minHeap``` (the entire list has an odd length).\\n```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        ### max heap to store the first half of the list\\n        self.maxHeap = []\\n        ### min heap to store the second half of the list\\n        self.minHeap = []\\n\\n    def addNum(self, num: int) -> None:\\n        ### push num into the correct heap\\n        if not self.maxHeap or num <= -self.maxHeap[0]:\\n            heappush(self.maxHeap, -num)\\n        else:\\n            heappush(self.minHeap, num)\\n        \\n        ### banance the two heaps so that each of them representing half of the list\\n        ### for odd length list, len(maxHeap) == len(minHeap)+1\\n        ### for even length list, len(maxHeap) == len(minHeap)\\n        if len(self.minHeap) > len(self.maxHeap):\\n            heappush(self.maxHeap, -heappop(self.minHeap)) \\n        elif len(self.maxHeap) > len(self.minHeap)+1:\\n            heappush(self.minHeap, -heappop(self.maxHeap)) \\n\\n    def findMedian(self) -> float:\\n        \\n        ### if the length of entire list is even, \\n        ### get the mean of the two middle values\\n        if (len(self.maxHeap)+len(self.minHeap))%2==0:\\n            return (-self.maxHeap[0]+self.minHeap[0])/2\\n        \\n        ### when odd, we know that the median is in maxHeap\\n        return -self.maxHeap[0]\\n```\\n\\n**Upvote** if you like this post.\\n\\n**Connect with me on [LinkedIn](https://www.linkedin.com/in/meida-chen-938a265b/)** if you\\'d like to discuss other related topics\\n\\nJust in case if you are working on **ML/DL 3D data-related projects** or are interested in the topic, please check out our project **[HERE](https://github.com/meidachen/STPLS3D)**",
                "solutionTags": [],
                "code": "```\\nfrom sortedcontainers import SortedList\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.s = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.s.add(num)\\n\\n    def findMedian(self) -> float:\\n        l = len(self.s)\\n        if l%2==0:\\n            return (self.s[l//2-1]+self.s[l//2])/2\\n        return self.s[l//2]\\n\\n```\n```maxHeap```\n```minHeap```\n``` maxHeap```\n```minHeap```\n``` maxHeap```\n```minHeap```\n```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        ### max heap to store the first half of the list\\n        self.maxHeap = []\\n        ### min heap to store the second half of the list\\n        self.minHeap = []\\n\\n    def addNum(self, num: int) -> None:\\n        ### push num into the correct heap\\n        if not self.maxHeap or num <= -self.maxHeap[0]:\\n            heappush(self.maxHeap, -num)\\n        else:\\n            heappush(self.minHeap, num)\\n        \\n        ### banance the two heaps so that each of them representing half of the list\\n        ### for odd length list, len(maxHeap) == len(minHeap)+1\\n        ### for even length list, len(maxHeap) == len(minHeap)\\n        if len(self.minHeap) > len(self.maxHeap):\\n            heappush(self.maxHeap, -heappop(self.minHeap)) \\n        elif len(self.maxHeap) > len(self.minHeap)+1:\\n            heappush(self.minHeap, -heappop(self.maxHeap)) \\n\\n    def findMedian(self) -> float:\\n        \\n        ### if the length of entire list is even, \\n        ### get the mean of the two middle values\\n        if (len(self.maxHeap)+len(self.minHeap))%2==0:\\n            return (-self.maxHeap[0]+self.minHeap[0])/2\\n        \\n        ### when odd, we know that the median is in maxHeap\\n        return -self.maxHeap[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1048192,
                "title": "c-easy-understandable-two-heaps-intuitive-solution-o-logn-add-o-1-find",
                "content": "As the data stream continuously come in, we have to consider the middle most element everytime for calculating the median.\\n\\n**TWO HEAP INTUITION :** **We have to consider middle element/s where all other elements are sorted as data stream come. Heaps come into picture with less time complexity to achieve this. So, we keep two heaps, one min heap and one max heap and keep a track of middle elements by balancing each heap.**\\n\\nThe left heap is containing elements in decreasing order (Max to Min) and right heap is in increasing order (Min to Max) but all the elements are greater than the left heap elements. We start pushing the elements in left heap and try to balance it everytime by comparing with the new elements and with heap size and accordingly put it into the right heap.\\n```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    priority_queue<int, vector<int>, greater<int> > minHeap;\\n\\tpriority_queue<int> maxHeap;\\n    MedianFinder(){}\\n\\n    void addNum(int num) {\\n        if (maxHeap.empty() or maxHeap.top() > num) {\\n\\t\\t\\tmaxHeap.push(num);\\n\\t\\t} else {\\n\\t\\t\\tminHeap.push(num);\\n\\t\\t}\\n\\n\\t\\tif (maxHeap.size() > minHeap.size() + 1) {\\n\\t\\t\\tminHeap.push(maxHeap.top());\\n\\t\\t\\tmaxHeap.pop();\\n\\t\\t} else if (minHeap.size() > maxHeap.size() + 1) {\\n\\t\\t\\tmaxHeap.push(minHeap.top());\\n\\t\\t\\tminHeap.pop();\\n\\t\\t}\\n    }\\n    \\n    double findMedian() {\\n        if (maxHeap.size() == minHeap.size()) {\\n\\t\\t\\tif (maxHeap.empty()) {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdouble avg = (maxHeap.top() + minHeap.top()) / 2.0;\\n\\t\\t\\t\\treturn avg;\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\t\\t\\treturn maxHeap.size() > minHeap.size() ? maxHeap.top() : minHeap.top();\\n\\t\\t}\\n    }\\n};\\n\\n```\\n\\nPlease upvote if you find the solution helpful :)\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    priority_queue<int, vector<int>, greater<int> > minHeap;\\n\\tpriority_queue<int> maxHeap;\\n    MedianFinder(){}\\n\\n    void addNum(int num) {\\n        if (maxHeap.empty() or maxHeap.top() > num) {\\n\\t\\t\\tmaxHeap.push(num);\\n\\t\\t} else {\\n\\t\\t\\tminHeap.push(num);\\n\\t\\t}\\n\\n\\t\\tif (maxHeap.size() > minHeap.size() + 1) {\\n\\t\\t\\tminHeap.push(maxHeap.top());\\n\\t\\t\\tmaxHeap.pop();\\n\\t\\t} else if (minHeap.size() > maxHeap.size() + 1) {\\n\\t\\t\\tmaxHeap.push(minHeap.top());\\n\\t\\t\\tminHeap.pop();\\n\\t\\t}\\n    }\\n    \\n    double findMedian() {\\n        if (maxHeap.size() == minHeap.size()) {\\n\\t\\t\\tif (maxHeap.empty()) {\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tdouble avg = (maxHeap.top() + minHeap.top()) / 2.0;\\n\\t\\t\\t\\treturn avg;\\n\\t\\t\\t}\\n\\n\\t\\t} else {\\n\\t\\t\\treturn maxHeap.size() > minHeap.size() ? maxHeap.top() : minHeap.top();\\n\\t\\t}\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 696658,
                "title": "python-logic-explained-with-2-heaps-clean-code",
                "content": "```\\n\"\"\"\\n        ## RC ##\\n        ## APPROACH : 2 HEAPS ##\\n        ## LOGIC ##\\n        ## One minheap to store low values and second maxheap to store max values, we keep track and update median every time after insertion ##\\n        \\n\\t\\t## TIME COMPLEXITY : O(logN) ##\\n\\t\\t## SPACE COMPLEXITY : O(N) ##\\n\\n        ## EXAMPLE ##\\n        Adding number 41\\n        MaxHeap lo: [41]           // MaxHeap stores the largest value at the top (index 0)\\n        MinHeap hi: []             // MinHeap stores the smallest value at the top (index 0)\\n        Median is 41\\n        =======================\\n        Adding number 35\\n        MaxHeap lo: [35]          // max heap stores smaller half of nums\\n        MinHeap hi: [41]          // min heap stores bigger half of nums\\n        Median is 38\\n        =======================\\n        Adding number 62\\n        MaxHeap lo: [41, 35]\\n        MinHeap hi: [62]\\n        Median is 41\\n        =======================\\n        Adding number 4\\n        MaxHeap lo: [35, 4]\\n        MinHeap hi: [41, 62]\\n        Median is 38\\n        =======================\\n        Adding number 97\\n        MaxHeap lo: [41, 35, 4]\\n        MinHeap hi: [62, 97]\\n        Median is 41\\n        =======================\\n        Adding number 108\\n        MaxHeap lo: [41, 35, 4]\\n        MinHeap hi: [62, 97, 108]\\n        Median is 51.5\\n\"\"\"\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        self.lo = []  \\n        self.hi = []  \\n\\n    def addNum(self, num):\\n        heappush(self.lo, -num)             # lo is maxheap, so -1 * num\\n        heappush(self.hi, -self.lo[0])      # hi is minheap\\n        heappop(self.lo)\\n        \\n        if len(self.lo) < len(self.hi):\\n            heappush(self.lo, -self.hi[0])\\n            heappop(self.hi)\\n            \\n    def findMedian(self):\\n        if len(self.lo) > len(self.hi):\\n            return -self.lo[0]                  \\n        else:\\n            return (self.hi[0] - self.lo[0]) / 2  # - as low has -ve values\\n```\\nPLEASE UPVOTE IF YOU LIKE MY SOLUTION",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n\"\"\"\\n        ## RC ##\\n        ## APPROACH : 2 HEAPS ##\\n        ## LOGIC ##\\n        ## One minheap to store low values and second maxheap to store max values, we keep track and update median every time after insertion ##\\n        \\n\\t\\t## TIME COMPLEXITY : O(logN) ##\\n\\t\\t## SPACE COMPLEXITY : O(N) ##\\n\\n        ## EXAMPLE ##\\n        Adding number 41\\n        MaxHeap lo: [41]           // MaxHeap stores the largest value at the top (index 0)\\n        MinHeap hi: []             // MinHeap stores the smallest value at the top (index 0)\\n        Median is 41\\n        =======================\\n        Adding number 35\\n        MaxHeap lo: [35]          // max heap stores smaller half of nums\\n        MinHeap hi: [41]          // min heap stores bigger half of nums\\n        Median is 38\\n        =======================\\n        Adding number 62\\n        MaxHeap lo: [41, 35]\\n        MinHeap hi: [62]\\n        Median is 41\\n        =======================\\n        Adding number 4\\n        MaxHeap lo: [35, 4]\\n        MinHeap hi: [41, 62]\\n        Median is 38\\n        =======================\\n        Adding number 97\\n        MaxHeap lo: [41, 35, 4]\\n        MinHeap hi: [62, 97]\\n        Median is 41\\n        =======================\\n        Adding number 108\\n        MaxHeap lo: [41, 35, 4]\\n        MinHeap hi: [62, 97, 108]\\n        Median is 51.5\\n\"\"\"\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        self.lo = []  \\n        self.hi = []  \\n\\n    def addNum(self, num):\\n        heappush(self.lo, -num)             # lo is maxheap, so -1 * num\\n        heappush(self.hi, -self.lo[0])      # hi is minheap\\n        heappop(self.lo)\\n        \\n        if len(self.lo) < len(self.hi):\\n            heappush(self.lo, -self.hi[0])\\n            heappop(self.hi)\\n            \\n    def findMedian(self):\\n        if len(self.lo) > len(self.hi):\\n            return -self.lo[0]                  \\n        else:\\n            return (self.hi[0] - self.lo[0]) / 2  # - as low has -ve values\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74144,
                "title": "easy-to-understand-double-heap-solution-in-java",
                "content": "The basic idea is to maintain two heaps: a max-heap and a min-heap. **The max heap stores the smaller half of all numbers while the min heap stores the larger half.** The sizes of two heaps need to be balanced each time when a new number is inserted so that their size will not be different by more than 1. Therefore each time when findMedian() is called we check if two heaps have the same size. If they do, we should return the average of the two top values of heaps. Otherwise we return the top of the heap which has one more element.\\n\\nTo do that, we first need to add two PriorityQueues to the class as the max-heap and min-heap:\\n\\n        private PriorityQueue<Integer> minH;\\n        private PriorityQueue<Integer> maxH;\\n\\nWe then define the constructor of the class so that the PriorityQueues get initialized. By default, the sorting order of a PriorityQueue is natural order which means it is a min-heap by default. Hence we need to provide a new Comparator to the constructor of the max heap to specify the reversed order.\\n\\n        MedianFinder(){\\n            minH = new PriorityQueue<Integer>();\\n            maxH = new PriorityQueue<Integer>(1, new Comparator<Integer>(){\\n                public int compare(Integer o1, Integer o2) {\\n                    if (o1.intValue()>o2.intValue()) return -1;\\n                    if (o1.intValue()<o2.intValue()) return 1;\\n                    return 0;\\n                }\\n            });\\n        }\\n\\nNow we have the data structure properly built. Let's write the addNum() function next.\\n\\n        public void addNum(int num) {\\n            if ((minH.size()==0)&&(maxH.size()==0)) minH.add(num);\\n            else if ((minH.size())>(maxH.size())) {\\n                if (num>minH.peek()) {\\n                    maxH.add(minH.poll());\\n                    minH.add(num);\\n                } else maxH.add(num);\\n            } else if ((minH.size())<(maxH.size())) {\\n                if (num<maxH.peek()) {\\n                    minH.add(maxH.poll());\\n                    maxH.add(num);\\n                } else minH.add(num);            \\n            } else {\\n                if (num<maxH.peek()) maxH.add(num);\\n                else minH.add(num);             \\n            }\\n        }\\n\\nThere are several possible situations when a new number is inserted: \\n\\n1)If both heap are empty, meaning that we are inserting the first number, we just arbitrarily inserted it into a heap, let's say, the min-heap. \\n\\n2)If min-heap has more elements (later we will argue that the size won't be different by more than 1), we need to compare the new number with the top of the min-heap. If it is larger than that, then the new number belongs to the larger half and it should be added to the min-heap. But since we have to balance the heap, we should move the top element of the min-heap to the max-heap. For the min-heap, we inserted a new number but removed the original top, its size won't change. For the max-heap, we inserted a new element (the top of the min-heap) so its size will increase by 1.\\n\\n3)If max-heap has more elements, we did the similar thing as 2).\\n\\n4)If they have the same size, we just compare the new number with one of the top to determine which heap the new number should be inserted. We just simply inserted it there.\\n\\nIt can be seen that for each insertion if it was in situation 1) and 4), then after insertion the heap size difference will be 1. For 2) and 3), the size of the heap with fewer element will increase by 1 to catch up with the heap with more elements. Hence their sizes are well-balanced and the difference will never exceeds 1.\\n\\nObviously, the median will be the top element of the heap which has one more element (if max-heap and min-heap have different sizes), or the average of the two tops (if max-heap and min-heap have equal sizes). So the findMedian() function is very straightforward:\\n\\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if ((minH.size()==0)&&(maxH.size()==0)) return 0.0;\\n            if ((minH.size())>(maxH.size())) return (double)(minH.peek());\\n            if ((minH.size())<(maxH.size())) return (double)(maxH.peek());\\n            return ((double)(maxH.peek()+minH.peek()))/2.0;\\n        }\\n\\n\\n\\nThe entire codes are here:\\n\\n    class MedianFinder {\\n        private PriorityQueue<Integer> minH;\\n        private PriorityQueue<Integer> maxH;\\n        \\n        MedianFinder(){\\n            minH = new PriorityQueue<Integer>();\\n            maxH = new PriorityQueue<Integer>(1, new Comparator<Integer>(){\\n                public int compare(Integer o1, Integer o2) {\\n                    if (o1.intValue()>o2.intValue()) return -1;\\n                    if (o1.intValue()<o2.intValue()) return 1;\\n                    return 0;\\n                }\\n            });\\n        }\\n        \\n        \\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            if ((minH.size()==0)&&(maxH.size()==0)) minH.add(num);\\n            else if ((minH.size())>(maxH.size())) {\\n                if (num>minH.peek()) {\\n                    maxH.add(minH.poll());\\n                    minH.add(num);\\n                } else maxH.add(num);\\n            } else if ((minH.size())<(maxH.size())) {\\n                if (num<maxH.peek()) {\\n                    minH.add(maxH.poll());\\n                    maxH.add(num);\\n                } else minH.add(num);            \\n            } else {\\n                if (num<maxH.peek()) maxH.add(num);\\n                else minH.add(num);             \\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if ((minH.size()==0)&&(maxH.size()==0)) return 0.0;\\n            if ((minH.size())>(maxH.size())) return (double)(minH.peek());\\n            if ((minH.size())<(maxH.size())) return (double)(maxH.peek());\\n            return ((double)(maxH.peek()+minH.peek()))/2.0;\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf = new MedianFinder();\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "solutionTags": [],
                "code": "The basic idea is to maintain two heaps: a max-heap and a min-heap. **The max heap stores the smaller half of all numbers while the min heap stores the larger half.** The sizes of two heaps need to be balanced each time when a new number is inserted so that their size will not be different by more than 1. Therefore each time when findMedian() is called we check if two heaps have the same size. If they do, we should return the average of the two top values of heaps. Otherwise we return the top of the heap which has one more element.\\n\\nTo do that, we first need to add two PriorityQueues to the class as the max-heap and min-heap:\\n\\n        private PriorityQueue<Integer> minH;\\n        private PriorityQueue<Integer> maxH;\\n\\nWe then define the constructor of the class so that the PriorityQueues get initialized. By default, the sorting order of a PriorityQueue is natural order which means it is a min-heap by default. Hence we need to provide a new Comparator to the constructor of the max heap to specify the reversed order.\\n\\n        MedianFinder(){\\n            minH = new PriorityQueue<Integer>();\\n            maxH = new PriorityQueue<Integer>(1, new Comparator<Integer>(){\\n                public int compare(Integer o1, Integer o2) {\\n                    if (o1.intValue()>o2.intValue()) return -1;\\n                    if (o1.intValue()<o2.intValue()) return 1;\\n                    return 0;\\n                }\\n            });\\n        }\\n\\nNow we have the data structure properly built. Let's write the addNum() function next.\\n\\n        public void addNum(int num) {\\n            if ((minH.size()==0)&&(maxH.size()==0)) minH.add(num);\\n            else if ((minH.size())>(maxH.size())) {\\n                if (num>minH.peek()) {\\n                    maxH.add(minH.poll());\\n                    minH.add(num);\\n                } else maxH.add(num);\\n            } else if ((minH.size())<(maxH.size())) {\\n                if (num<maxH.peek()) {\\n                    minH.add(maxH.poll());\\n                    maxH.add(num);\\n                } else minH.add(num);            \\n            } else {\\n                if (num<maxH.peek()) maxH.add(num);\\n                else minH.add(num);             \\n            }\\n        }\\n\\nThere are several possible situations when a new number is inserted: \\n\\n1)If both heap are empty, meaning that we are inserting the first number, we just arbitrarily inserted it into a heap, let's say, the min-heap. \\n\\n2)If min-heap has more elements (later we will argue that the size won't be different by more than 1), we need to compare the new number with the top of the min-heap. If it is larger than that, then the new number belongs to the larger half and it should be added to the min-heap. But since we have to balance the heap, we should move the top element of the min-heap to the max-heap. For the min-heap, we inserted a new number but removed the original top, its size won't change. For the max-heap, we inserted a new element (the top of the min-heap) so its size will increase by 1.\\n\\n3)If max-heap has more elements, we did the similar thing as 2).\\n\\n4)If they have the same size, we just compare the new number with one of the top to determine which heap the new number should be inserted. We just simply inserted it there.\\n\\nIt can be seen that for each insertion if it was in situation 1) and 4), then after insertion the heap size difference will be 1. For 2) and 3), the size of the heap with fewer element will increase by 1 to catch up with the heap with more elements. Hence their sizes are well-balanced and the difference will never exceeds 1.\\n\\nObviously, the median will be the top element of the heap which has one more element (if max-heap and min-heap have different sizes), or the average of the two tops (if max-heap and min-heap have equal sizes). So the findMedian() function is very straightforward:\\n\\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if ((minH.size()==0)&&(maxH.size()==0)) return 0.0;\\n            if ((minH.size())>(maxH.size())) return (double)(minH.peek());\\n            if ((minH.size())<(maxH.size())) return (double)(maxH.peek());\\n            return ((double)(maxH.peek()+minH.peek()))/2.0;\\n        }\\n\\n\\n\\nThe entire codes are here:\\n\\n    class MedianFinder {\\n        private PriorityQueue<Integer> minH;\\n        private PriorityQueue<Integer> maxH;\\n        \\n        MedianFinder(){\\n            minH = new PriorityQueue<Integer>();\\n            maxH = new PriorityQueue<Integer>(1, new Comparator<Integer>(){\\n                public int compare(Integer o1, Integer o2) {\\n                    if (o1.intValue()>o2.intValue()) return -1;\\n                    if (o1.intValue()<o2.intValue()) return 1;\\n                    return 0;\\n                }\\n            });\\n        }\\n        \\n        \\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            if ((minH.size()==0)&&(maxH.size()==0)) minH.add(num);\\n            else if ((minH.size())>(maxH.size())) {\\n                if (num>minH.peek()) {\\n                    maxH.add(minH.poll());\\n                    minH.add(num);\\n                } else maxH.add(num);\\n            } else if ((minH.size())<(maxH.size())) {\\n                if (num<maxH.peek()) {\\n                    minH.add(maxH.poll());\\n                    maxH.add(num);\\n                } else minH.add(num);            \\n            } else {\\n                if (num<maxH.peek()) maxH.add(num);\\n                else minH.add(num);             \\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if ((minH.size()==0)&&(maxH.size()==0)) return 0.0;\\n            if ((minH.size())>(maxH.size())) return (double)(minH.peek());\\n            if ((minH.size())<(maxH.size())) return (double)(maxH.peek());\\n            return ((double)(maxH.peek()+minH.peek()))/2.0;\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf = new MedianFinder();\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "codeTag": "Java"
            },
            {
                "id": 74057,
                "title": "tired-of-two-heap-set-solutions-see-this-segment-dividing-solution-c",
                "content": "\\n    class MedianFinder {    \\n    \\n    /* The idea of dividing existing numbers into several ranges:\\n    \\n       Say we already have 10k numbers in vector, \\n       each time adding a number requires sorting all 10k numbers, which is slow.\\n    \\n       To optimize, we can store 10k numbers in several (say 10) vectors, \\n       and nums in each vector are sorted.\\n       \\n       Then each time we add a number, just need to find one vector with correct range,\\n       insert the number and sort this vector only. Since its size is relatively small, it's fast.\\n       \\n       When we have a vector's size greater than a threshold, just split it into two halfs.\\n       \\n    */\\n    \\n    public:\\n        vector<vector<int>*> raid; // store all ranges\\n        int total_size;\\n\\n        MedianFinder() {\\n            total_size=0;\\n            raid.push_back(new vector<int> ());\\n        }\\n        \\n        void addNum(int num) {\\n            vector<int>* correctRange=NULL;\\n            int targetIndex;\\n            \\n            // find the correct range to insert given num\\n            for (int i=0; i<raid.size(); i++)\\n                if ( raid.size()==1 ||\\n                     (i==0 && num<=raid[i]->back()) || \\n                     (i==raid.size()-1 && num>=raid[i]->at(0)) ||\\n                     (raid[i]->at(0)<=num && num<=raid[i]->back()) ||\\n                     (num > raid[i]->back() && num < raid[i+1]->front()) )\\n                {\\n                    correctRange = raid[i];\\n                    targetIndex = i;\\n                    break;\\n                }\\n            \\n            // put num at back of correct range, and sort it to keep increasing sequence\\n            total_size++;\\n            correctRange->push_back(num);\\n            sort(correctRange->begin(), correctRange->end());\\n                    \\n            // if current range's size > threshold, split it into two halfs and add them back to this.raid\\n            const int max_size = 30;\\n            int len = correctRange->size();\\n            if (len > max_size) {\\n                vector<int> *half1 = new vector<int>(correctRange->begin(), correctRange->begin()+len/2);\\n                vector<int> *half2 = new vector<int>(correctRange->begin()+len/2, correctRange->end());\\n                \\n                delete correctRange;\\n                raid[targetIndex]=half2;\\n                raid.insert(raid.begin() + targetIndex, half1);\\n            }\\n            \\n        }\\n    \\n        // iterate thru all ranges in this.raid to find median value\\n        double findMedian() {\\n            if (total_size==0)\\n                return 0;\\n            \\n            int mid1 = total_size/2;\\n            int mid2 = mid1 + 1;\\n            \\n            int leftCount=0;\\n            double first, second;\\n            for (auto r : raid) {\\n                if (leftCount<mid1 && mid1<=leftCount+r->size())\\n                    first = r->at(mid1 - leftCount - 1);\\n                    \\n                if (leftCount<mid2 && mid2<=leftCount+r->size()) {\\n                    second = r->at(mid2 - leftCount - 1);\\n                    break;\\n                }\\n                leftCount += r->size();\\n            }\\n            \\n            if (total_size % 2)\\n                return second;\\n            else\\n                return (first + second)/2;\\n        }\\n    };",
                "solutionTags": [],
                "code": "\\n    class MedianFinder {    \\n    \\n    /* The idea of dividing existing numbers into several ranges:\\n    \\n       Say we already have 10k numbers in vector, \\n       each time adding a number requires sorting all 10k numbers, which is slow.\\n    \\n       To optimize, we can store 10k numbers in several (say 10) vectors, \\n       and nums in each vector are sorted.\\n       \\n       Then each time we add a number, just need to find one vector with correct range,\\n       insert the number and sort this vector only. Since its size is relatively small, it's fast.\\n       \\n       When we have a vector's size greater than a threshold, just split it into two halfs.\\n       \\n    */\\n    \\n    public:\\n        vector<vector<int>*> raid; // store all ranges\\n        int total_size;\\n\\n        MedianFinder() {\\n            total_size=0;\\n            raid.push_back(new vector<int> ());\\n        }\\n        \\n        void addNum(int num) {\\n            vector<int>* correctRange=NULL;\\n            int targetIndex;\\n            \\n            // find the correct range to insert given num\\n            for (int i=0; i<raid.size(); i++)\\n                if ( raid.size()==1 ||\\n                     (i==0 && num<=raid[i]->back()) || \\n                     (i==raid.size()-1 && num>=raid[i]->at(0)) ||\\n                     (raid[i]->at(0)<=num && num<=raid[i]->back()) ||\\n                     (num > raid[i]->back() && num < raid[i+1]->front()) )\\n                {\\n                    correctRange = raid[i];\\n                    targetIndex = i;\\n                    break;\\n                }\\n            \\n            // put num at back of correct range, and sort it to keep increasing sequence\\n            total_size++;\\n            correctRange->push_back(num);\\n            sort(correctRange->begin(), correctRange->end());\\n                    \\n            // if current range's size > threshold, split it into two halfs and add them back to this.raid\\n            const int max_size = 30;\\n            int len = correctRange->size();\\n            if (len > max_size) {\\n                vector<int> *half1 = new vector<int>(correctRange->begin(), correctRange->begin()+len/2);\\n                vector<int> *half2 = new vector<int>(correctRange->begin()+len/2, correctRange->end());\\n                \\n                delete correctRange;\\n                raid[targetIndex]=half2;\\n                raid.insert(raid.begin() + targetIndex, half1);\\n            }\\n            \\n        }\\n    \\n        // iterate thru all ranges in this.raid to find median value\\n        double findMedian() {\\n            if (total_size==0)\\n                return 0;\\n            \\n            int mid1 = total_size/2;\\n            int mid2 = mid1 + 1;\\n            \\n            int leftCount=0;\\n            double first, second;\\n            for (auto r : raid) {\\n                if (leftCount<mid1 && mid1<=leftCount+r->size())\\n                    first = r->at(mid1 - leftCount - 1);\\n                    \\n                if (leftCount<mid2 && mid2<=leftCount+r->size()) {\\n                    second = r->at(mid2 - leftCount - 1);\\n                    break;\\n                }\\n                leftCount += r->size();\\n            }\\n            \\n            if (total_size % 2)\\n                return second;\\n            else\\n                return (first + second)/2;\\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 74119,
                "title": "18ms-beats-100-java-solution-with-bst",
                "content": "The method is vulnerable to (largely) monotonic inputs, which could push the complexity of `addNum` to O(n), resulting in \"Time Limit Exceeded\" errors.  At the time of the original post (back in 2016), there weren\\'t such test cases.  I believe the \"self-balancing binary search tree\" would do the rescue.\\n\\n    class MedianFinder {\\n        class TreeNode{\\n            int val;\\n            TreeNode parent,left,right;\\n            TreeNode(int val, TreeNode p){\\n                this.val=val;\\n                this.parent=p;\\n                left=null;\\n                right=null;\\n            }\\n            void add(int num){\\n                if(num>=val){\\n                    if(right==null)\\n                        right=new TreeNode(num,this);\\n                    else\\n                        right.add(num);\\n                }else{\\n                    if(left==null)\\n                        left=new TreeNode(num,this);\\n                    else\\n                        left.add(num);\\n                }\\n            }\\n            TreeNode next(){\\n                TreeNode ret;\\n                if(right!=null){\\n                    ret=right;\\n                    while(ret.left!=null)\\n                        ret=ret.left;\\n                }else{\\n                    ret=this;\\n                    while(ret.parent.right==ret)\\n                        ret=ret.parent;\\n                    ret=ret.parent;\\n                }\\n                return ret;\\n            }\\n            TreeNode prev(){\\n                TreeNode ret;\\n                if(left!=null){\\n                    ret=left;\\n                    while(ret.right!=null)\\n                        ret=ret.right;\\n                }else{\\n                    ret=this;\\n                    while(ret.parent.left==ret)\\n                        ret=ret.parent;\\n                    ret=ret.parent;\\n                }\\n                return ret;\\n            }\\n        }\\n        int n;\\n        TreeNode root, curr;\\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            if(root==null){\\n                root = new TreeNode(num,null);\\n                curr=root;\\n                n=1;\\n            }else{\\n                root.add(num);\\n                n++;\\n                if(n%2==1){\\n                    if(curr.val<=num)\\n                        curr=curr.next();\\n                }else\\n                    if(curr.val>num)\\n                        curr=curr.prev();\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if(n%2==0){\\n                return ((double)curr.next().val+curr.val)/2;\\n            }else\\n                return curr.val;\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf = new MedianFinder();\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "solutionTags": [
                    "Java",
                    "Binary Search Tree"
                ],
                "code": "The method is vulnerable to (largely) monotonic inputs, which could push the complexity of `addNum` to O(n), resulting in \"Time Limit Exceeded\" errors.  At the time of the original post (back in 2016), there weren\\'t such test cases.  I believe the \"self-balancing binary search tree\" would do the rescue.\\n\\n    class MedianFinder {\\n        class TreeNode{\\n            int val;\\n            TreeNode parent,left,right;\\n            TreeNode(int val, TreeNode p){\\n                this.val=val;\\n                this.parent=p;\\n                left=null;\\n                right=null;\\n            }\\n            void add(int num){\\n                if(num>=val){\\n                    if(right==null)\\n                        right=new TreeNode(num,this);\\n                    else\\n                        right.add(num);\\n                }else{\\n                    if(left==null)\\n                        left=new TreeNode(num,this);\\n                    else\\n                        left.add(num);\\n                }\\n            }\\n            TreeNode next(){\\n                TreeNode ret;\\n                if(right!=null){\\n                    ret=right;\\n                    while(ret.left!=null)\\n                        ret=ret.left;\\n                }else{\\n                    ret=this;\\n                    while(ret.parent.right==ret)\\n                        ret=ret.parent;\\n                    ret=ret.parent;\\n                }\\n                return ret;\\n            }\\n            TreeNode prev(){\\n                TreeNode ret;\\n                if(left!=null){\\n                    ret=left;\\n                    while(ret.right!=null)\\n                        ret=ret.right;\\n                }else{\\n                    ret=this;\\n                    while(ret.parent.left==ret)\\n                        ret=ret.parent;\\n                    ret=ret.parent;\\n                }\\n                return ret;\\n            }\\n        }\\n        int n;\\n        TreeNode root, curr;\\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            if(root==null){\\n                root = new TreeNode(num,null);\\n                curr=root;\\n                n=1;\\n            }else{\\n                root.add(num);\\n                n++;\\n                if(n%2==1){\\n                    if(curr.val<=num)\\n                        curr=curr.next();\\n                }else\\n                    if(curr.val>num)\\n                        curr=curr.prev();\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            if(n%2==0){\\n                return ((double)curr.next().val+curr.val)/2;\\n            }else\\n                return curr.val;\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf = new MedianFinder();\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "codeTag": "Java"
            },
            {
                "id": 74128,
                "title": "java-easy-version-to-understand",
                "content": "    \\tPriorityQueue<Integer> minHeap = new PriorityQueue<>();//heap is a minimal heap by default\\n\\tPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());//change to a maximum heap\\n\\n\\t// Adds a number into the data structure.\\n\\tpublic void addNum(int num) {\\n\\t\\tmaxHeap.offer(num);\\n\\t\\tminHeap.offer(maxHeap.poll());\\n\\t\\tif (maxHeap.size() < minHeap.size())\\n\\t\\t\\tmaxHeap.offer(minHeap.poll());\\n\\t}\\n\\n\\t// Returns the median of current data stream\\n\\tpublic double findMedian() {\\n\\t\\tif (maxHeap.size() == minHeap.size())\\n\\t\\t\\treturn (maxHeap.peek() + minHeap.peek()) / 2.0;\\n\\t\\telse\\n\\t\\t\\treturn maxHeap.peek();\\n\\t}",
                "solutionTags": [],
                "code": "    \\tPriorityQueue<Integer> minHeap = new PriorityQueue<>();//heap is a minimal heap by default\\n\\tPriorityQueue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());//change to a maximum heap\\n\\n\\t// Adds a number into the data structure.\\n\\tpublic void addNum(int num) {\\n\\t\\tmaxHeap.offer(num);\\n\\t\\tminHeap.offer(maxHeap.poll());\\n\\t\\tif (maxHeap.size() < minHeap.size())\\n\\t\\t\\tmaxHeap.offer(minHeap.poll());\\n\\t}\\n\\n\\t// Returns the median of current data stream\\n\\tpublic double findMedian() {\\n\\t\\tif (maxHeap.size() == minHeap.size())\\n\\t\\t\\treturn (maxHeap.peek() + minHeap.peek()) / 2.0;\\n\\t\\telse\\n\\t\\t\\treturn maxHeap.peek();\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 2805145,
                "title": "python-c-java-rust-two-heaps-bonus-explained",
                "content": "**\\u2705 IF YOU LIKE THIS SOLUTION, PLEASE UPVOTE.**\\n****\\nThis solution employs two *Binary Heaps* to maintain quick access to the median elements. Time complexity is logarithmic **O(logN)** to *add* and constant **O(1)** to *find*. Space complexity is linear: **O(N)**.\\n\\n**Comment.** When we have the analogous problem with the *mean*, just updating the sum and the count of all elements would work, becuase that\\'s what the mean is all about. However, to obtain the *median*, we should have access to the precise value of the middle element(s). The problem is that this element changes every time a new one is added from the data stream. This leads us to the conclusion that we need to store all elements. But what data structure to use? The key observation here is that we need to have (and maintain) quick access to at most two elements (or just one in the case of an odd size). Thus, either of two structures would work:\\n1. Two Binary Heaps maintaining small and large halves of numbers. On the top of each heap we would have the value that is closest to the median.\\n2. Sorted array. This would allow to retrieve the median by just \"looking in the middle\".\\n\\nHere, I provide a solution with heaps (in four languagaes). In the **BONUS** section, I also demonstrate the second aproach using Python\\'s *SortedList*.\\n\\n**Python.**\\n```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.sh, self.lh = [], []\\n\\n    def addNum(self, num: int) -> None:\\n\\n        heappush(self.lh, -heappushpop(self.sh,-num))     # [1] always push numbers to the large half first\\n        if len(self.lh) > len(self.sh):                   # [2] if it\\'s longer then transfer to the small one;\\n            heappush(self.sh, -heappop(self.lh))          #     this way, the small one will never be shorter\\n\\n    def findMedian(self) -> float:\\n\\n        if len(self.sh) != len(self.lh):                  # [3] for odd size, the smallest half is the one that \\n            return -self.sh[0]                            #     stores the median by our design in [1] and [2]\\n        else                                              # [4] for even size, take average between two middle\\n            return (-self.sh[0] + self.lh[0]) / 2         #     values, one taken from each of the heaps\\n```\\n\\nThis solution in other languages.\\n\\n<iframe src=\"https://leetcode.com/playground/axhiVgon/shared\" frameBorder=\"0\" width=\"800\" height=\"450\"></iframe>\\n\\n**\\u2705 YOU MADE IT TILL THE BONUS SECTION... YOUR GREAT EFFORT DESERVES UPVOTING THIS POST!**\\n\\nAs a **BONUS**, I provide a solution in **Python** using *SortedList* that maintains a sorted array for the quick access to its middle elements.\\n\\n```\\nfrom sortedcontainers import SortedList\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.data = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.data.add(num)\\n\\n    def findMedian(self) -> float:\\n        n = len(self.data)\\n        return (self.data[n//2] + self.data[(n-1)//2]) / 2\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.sh, self.lh = [], []\\n\\n    def addNum(self, num: int) -> None:\\n\\n        heappush(self.lh, -heappushpop(self.sh,-num))     # [1] always push numbers to the large half first\\n        if len(self.lh) > len(self.sh):                   # [2] if it\\'s longer then transfer to the small one;\\n            heappush(self.sh, -heappop(self.lh))          #     this way, the small one will never be shorter\\n\\n    def findMedian(self) -> float:\\n\\n        if len(self.sh) != len(self.lh):                  # [3] for odd size, the smallest half is the one that \\n            return -self.sh[0]                            #     stores the median by our design in [1] and [2]\\n        else                                              # [4] for even size, take average between two middle\\n            return (-self.sh[0] + self.lh[0]) / 2         #     values, one taken from each of the heaps\\n```\n```\\nfrom sortedcontainers import SortedList\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.data = SortedList()\\n\\n    def addNum(self, num: int) -> None:\\n        self.data.add(num)\\n\\n    def findMedian(self) -> float:\\n        n = len(self.data)\\n        return (self.data[n//2] + self.data[(n-1)//2]) / 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74044,
                "title": "very-short-o-log-n-o-1",
                "content": "Same idea [as before](https://leetcode.com/discuss/64850/short-simple-java-c-python-o-log-n-o-1), but really exploiting the symmetry of the two heaps by switching them whenever a number is added. Still O(log n) for adding and O(1) for median. Partially inspired by [peisi\\'s updated solution](https://leetcode.com/discuss/64852/ac-python-two-heap-solution-o-log-n-add-o-1-find-388-ms).\\n\\n**Update:** Added a new Java version (the first one).\\n\\n---\\n\\n**Java**\\n\\n    class MedianFinder {\\n        \\n        Queue<Integer> q = new PriorityQueue(), z = q, t,\\n                       Q = new PriorityQueue(Collections.reverseOrder()); \\n    \\n        public void addNum(int num) {\\n            (t=Q).add(num);\\n            (Q=q).add((q=t).poll());\\n        }\\n    \\n        public double findMedian() {\\n            return (Q.peek() + z.peek()) / 2.;\\n        }\\n    };\\n\\nOr:\\n\\n    class MedianFinder {\\n    \\n        Queue[] q = {new PriorityQueue(), new PriorityQueue(Collections.reverseOrder())};\\n        int i = 0;\\n    \\n        public void addNum(int num) {\\n            q[i].add(num);\\n            q[i^=1].add(q[i^1].poll());\\n        }\\n    \\n        public double findMedian() {\\n            return ((int)(q[1].peek()) + (int)(q[i].peek())) / 2.0;\\n        }\\n    };\\n\\n---\\n\\n**Python**\\n\\n    from heapq import *\\n\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.heaps = None, [], []\\n            self.i = 1\\n    \\n        def addNum(self, num):\\n            heappush(self.heaps[-self.i], -heappushpop(self.heaps[self.i], num * self.i))\\n            self.i *= -1\\n    \\n        def findMedian(self):\\n            return (self.heaps[self.i][0] * self.i - self.heaps[-1][0]) / 2.0\\n\\nOr:\\n\\n    from heapq import *\\n\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.data = 1, [], []\\n    \\n        def addNum(self, num):\\n            sign, h1, h2 = self.data\\n            heappush(h2, -heappushpop(h1, num * sign))\\n            self.data = -sign, h2, h1\\n    \\n        def findMedian(self):\\n            sign, h1, h2 = d = self.data\\n            return (h1[0] * sign - d[-sign][0]) / 2.0\\n\\nOr:\\n```\\nclass MedianFinder:\\n    def __init__(s):\\n        h = [[], 1, -1, i := []]\\n        s.addNum = lambda n: heapq.heappush(h[-1], -heapq.heappushpop(h[0], n * h[1])) or h.reverse()\\n        s.findMedian = lambda: (h[0][0] * h[1] - i[0]) / 2\\n",
                "solutionTags": [
                    "Java",
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "Same idea [as before](https://leetcode.com/discuss/64850/short-simple-java-c-python-o-log-n-o-1), but really exploiting the symmetry of the two heaps by switching them whenever a number is added. Still O(log n) for adding and O(1) for median. Partially inspired by [peisi\\'s updated solution](https://leetcode.com/discuss/64852/ac-python-two-heap-solution-o-log-n-add-o-1-find-388-ms).\\n\\n**Update:** Added a new Java version (the first one).\\n\\n---\\n\\n**Java**\\n\\n    class MedianFinder {\\n        \\n        Queue<Integer> q = new PriorityQueue(), z = q, t,\\n                       Q = new PriorityQueue(Collections.reverseOrder()); \\n    \\n        public void addNum(int num) {\\n            (t=Q).add(num);\\n            (Q=q).add((q=t).poll());\\n        }\\n    \\n        public double findMedian() {\\n            return (Q.peek() + z.peek()) / 2.;\\n        }\\n    };\\n\\nOr:\\n\\n    class MedianFinder {\\n    \\n        Queue[] q = {new PriorityQueue(), new PriorityQueue(Collections.reverseOrder())};\\n        int i = 0;\\n    \\n        public void addNum(int num) {\\n            q[i].add(num);\\n            q[i^=1].add(q[i^1].poll());\\n        }\\n    \\n        public double findMedian() {\\n            return ((int)(q[1].peek()) + (int)(q[i].peek())) / 2.0;\\n        }\\n    };\\n\\n---\\n\\n**Python**\\n\\n    from heapq import *\\n\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.heaps = None, [], []\\n            self.i = 1\\n    \\n        def addNum(self, num):\\n            heappush(self.heaps[-self.i], -heappushpop(self.heaps[self.i], num * self.i))\\n            self.i *= -1\\n    \\n        def findMedian(self):\\n            return (self.heaps[self.i][0] * self.i - self.heaps[-1][0]) / 2.0\\n\\nOr:\\n\\n    from heapq import *\\n\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            self.data = 1, [], []\\n    \\n        def addNum(self, num):\\n            sign, h1, h2 = self.data\\n            heappush(h2, -heappushpop(h1, num * sign))\\n            self.data = -sign, h2, h1\\n    \\n        def findMedian(self):\\n            sign, h1, h2 = d = self.data\\n            return (h1[0] * sign - d[-sign][0]) / 2.0\\n\\nOr:\\n```\\nclass MedianFinder:\\n    def __init__(s):\\n        h = [[], 1, -1, i := []]\\n        s.addNum = lambda n: heapq.heappush(h[-1], -heapq.heappushpop(h[0], n * h[1])) or h.reverse()\\n        s.findMedian = lambda: (h[0][0] * h[1] - i[0]) / 2\\n",
                "codeTag": "Java"
            },
            {
                "id": 1330808,
                "title": "python-2-heaps-solution-explained",
                "content": "The idea is to keep two heaps: one for the top half of our data and another is for down half of our data. \\nIf we have even size `2n`, then we will keep two heaps with size `n`\\nIf we have odd size `2n+1`, then we will keep size of the small heap `n+1` ans the size of large heap `n`.\\n\\nWhen we have new element `num`, we always put it to small heap, and then normalize our heaps: remove biggest element from the small heap and put it to the large heap. After this operation we can be sure that we have the property that the largest element in small heap is smaller than smaller elements in large heap.\\n\\nHowever after this step if we had `n, n` elements, we will have `n, n+1` elements, so we need to put one element from large heap to small heap.\\n\\n#### Complexity\\nTime complexity is just `O(1)` to get median and `O(log n)` to add number. Space complexity is `O(n)` after `n` operations.\\n\\n#### Code\\n```python\\nclass MedianFinder:\\n    def __init__(self):\\n        self.small, self.large = [], [] \\n\\n    def addNum(self, num):\\n        heappush(self.small, -num)           \\n        heappush(self.large, -heappop(self.small))\\n        \\n        if len(self.small) < len(self.large):\\n            heappush(self.small, -heappop(self.large))\\n            \\n    def findMedian(self):\\n        if len(self.large) != len(self.small):\\n            return -self.small[0]                  \\n        else:\\n            return (self.large[0] - self.small[0]) / 2 \\n```\\n\\n#### Remark\\nThere is also solution with `O(log n)` time complexities for both operations, if we use `Sorted List`",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```python\\nclass MedianFinder:\\n    def __init__(self):\\n        self.small, self.large = [], [] \\n\\n    def addNum(self, num):\\n        heappush(self.small, -num)           \\n        heappush(self.large, -heappop(self.small))\\n        \\n        if len(self.small) < len(self.large):\\n            heappush(self.small, -heappop(self.large))\\n            \\n    def findMedian(self):\\n        if len(self.large) != len(self.small):\\n            return -self.small[0]                  \\n        else:\\n            return (self.large[0] - self.small[0]) / 2 \\n```",
                "codeTag": "Java"
            },
            {
                "id": 329657,
                "title": "javascript-max-heap-min-heap",
                "content": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.maxHeap = new Heap(Heap.maxComparator);\\n    this.minHeap = new Heap(Heap.minComparator);\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if(this.maxHeap.peek() === null || num < this.maxHeap.peek()) {\\n        this.maxHeap.add(num);\\n    } else {\\n        this.minHeap.add(num);\\n    }\\n    \\n    if(this.maxHeap.size - this.minHeap.size > 1) {\\n        this.minHeap.add(this.maxHeap.poll());\\n    } else if(this.minHeap.size - this.maxHeap.size > 1) {\\n        this.maxHeap.add(this.minHeap.poll());\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if(this.maxHeap.size > this.minHeap.size) {\\n        return this.maxHeap.peek();\\n    } else if(this.maxHeap.size < this.minHeap.size) {\\n        return this.minHeap.peek();\\n    } else {\\n        return (this.maxHeap.peek() + this.minHeap.peek()) / 2;\\n    }\\n};\\n\\n/** \\n *  custom Heap class\\n */\\nclass Heap {\\n\\tconstructor(comparator) {\\n\\t\\tthis.size = 0;\\n\\t\\tthis.values = [];\\n\\t\\tthis.comparator = comparator || Heap.minComparator;\\n\\t}\\n\\n\\tadd(val) {\\n\\t\\tthis.values.push(val);\\n\\t\\tthis.size ++;\\n\\t\\tthis.bubbleUp();\\n\\t}\\n\\n\\tpeek() {\\n\\t\\treturn this.values[0] || null;\\n\\t}\\n\\n\\tpoll() {\\n\\t\\tconst max = this.values[0];\\n\\t\\tconst end = this.values.pop();\\n\\t\\tthis.size --;\\n\\t\\tif (this.values.length) {\\n\\t\\t\\tthis.values[0] = end;\\n\\t\\t\\tthis.bubbleDown();\\n\\t\\t}\\n\\t\\treturn max;\\n\\t}\\n\\n\\tbubbleUp() {\\n\\t\\tlet index = this.values.length - 1;\\n\\t\\tlet parent = Math.floor((index - 1) / 2);\\n\\n\\t\\twhile (this.comparator(this.values[index], this.values[parent]) < 0) {\\n\\t\\t\\t[this.values[parent], this.values[index]] = [this.values[index], this.values[parent]];\\n\\t\\t\\tindex = parent;\\n\\t\\t\\tparent = Math.floor((index - 1) / 2);\\n\\t\\t}\\n\\t}\\n\\n\\tbubbleDown() {\\n\\t\\tlet index = 0, length = this.values.length;\\n\\n\\t\\twhile (true) {\\n\\t\\t\\tlet left = null,\\n\\t\\t\\t\\tright = null,\\n\\t\\t\\t\\tswap = null,\\n\\t\\t\\t\\tleftIndex = index * 2 + 1,\\n\\t\\t\\t\\trightIndex = index * 2 + 2;\\n\\n\\t\\t\\tif (leftIndex < length) {\\n\\t\\t\\t\\tleft = this.values[leftIndex];\\n\\t\\t\\t\\tif (this.comparator(left, this.values[index]) < 0) swap = leftIndex;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (rightIndex < length) {\\n\\t\\t\\t\\tright = this.values[rightIndex];\\n\\t\\t\\t\\tif ((swap !== null && this.comparator(right, left) < 0) || (swap === null && this.comparator(right, this.values[index]))) {\\n\\t\\t\\t\\t\\tswap = rightIndex;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (swap === null) break;\\n\\n\\t\\t\\t[this.values[index], this.values[swap]] = [this.values[swap], this.values[index]];\\n\\t\\t\\tindex = swap;\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n *  Min Comparator\\n */\\nHeap.minComparator = (a, b) => { return a - b; }\\n\\n/** \\n *  Max Comparator\\n */\\nHeap.maxComparator = (a, b) => { return b - a; }\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.maxHeap = new Heap(Heap.maxComparator);\\n    this.minHeap = new Heap(Heap.minComparator);\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if(this.maxHeap.peek() === null || num < this.maxHeap.peek()) {\\n        this.maxHeap.add(num);\\n    } else {\\n        this.minHeap.add(num);\\n    }\\n    \\n    if(this.maxHeap.size - this.minHeap.size > 1) {\\n        this.minHeap.add(this.maxHeap.poll());\\n    } else if(this.minHeap.size - this.maxHeap.size > 1) {\\n        this.maxHeap.add(this.minHeap.poll());\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if(this.maxHeap.size > this.minHeap.size) {\\n        return this.maxHeap.peek();\\n    } else if(this.maxHeap.size < this.minHeap.size) {\\n        return this.minHeap.peek();\\n    } else {\\n        return (this.maxHeap.peek() + this.minHeap.peek()) / 2;\\n    }\\n};\\n\\n/** \\n *  custom Heap class\\n */\\nclass Heap {\\n\\tconstructor(comparator) {\\n\\t\\tthis.size = 0;\\n\\t\\tthis.values = [];\\n\\t\\tthis.comparator = comparator || Heap.minComparator;\\n\\t}\\n\\n\\tadd(val) {\\n\\t\\tthis.values.push(val);\\n\\t\\tthis.size ++;\\n\\t\\tthis.bubbleUp();\\n\\t}\\n\\n\\tpeek() {\\n\\t\\treturn this.values[0] || null;\\n\\t}\\n\\n\\tpoll() {\\n\\t\\tconst max = this.values[0];\\n\\t\\tconst end = this.values.pop();\\n\\t\\tthis.size --;\\n\\t\\tif (this.values.length) {\\n\\t\\t\\tthis.values[0] = end;\\n\\t\\t\\tthis.bubbleDown();\\n\\t\\t}\\n\\t\\treturn max;\\n\\t}\\n\\n\\tbubbleUp() {\\n\\t\\tlet index = this.values.length - 1;\\n\\t\\tlet parent = Math.floor((index - 1) / 2);\\n\\n\\t\\twhile (this.comparator(this.values[index], this.values[parent]) < 0) {\\n\\t\\t\\t[this.values[parent], this.values[index]] = [this.values[index], this.values[parent]];\\n\\t\\t\\tindex = parent;\\n\\t\\t\\tparent = Math.floor((index - 1) / 2);\\n\\t\\t}\\n\\t}\\n\\n\\tbubbleDown() {\\n\\t\\tlet index = 0, length = this.values.length;\\n\\n\\t\\twhile (true) {\\n\\t\\t\\tlet left = null,\\n\\t\\t\\t\\tright = null,\\n\\t\\t\\t\\tswap = null,\\n\\t\\t\\t\\tleftIndex = index * 2 + 1,\\n\\t\\t\\t\\trightIndex = index * 2 + 2;\\n\\n\\t\\t\\tif (leftIndex < length) {\\n\\t\\t\\t\\tleft = this.values[leftIndex];\\n\\t\\t\\t\\tif (this.comparator(left, this.values[index]) < 0) swap = leftIndex;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (rightIndex < length) {\\n\\t\\t\\t\\tright = this.values[rightIndex];\\n\\t\\t\\t\\tif ((swap !== null && this.comparator(right, left) < 0) || (swap === null && this.comparator(right, this.values[index]))) {\\n\\t\\t\\t\\t\\tswap = rightIndex;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif (swap === null) break;\\n\\n\\t\\t\\t[this.values[index], this.values[swap]] = [this.values[swap], this.values[index]];\\n\\t\\t\\tindex = swap;\\n\\t\\t}\\n\\t}\\n}\\n\\n/** \\n *  Min Comparator\\n */\\nHeap.minComparator = (a, b) => { return a - b; }\\n\\n/** \\n *  Max Comparator\\n */\\nHeap.maxComparator = (a, b) => { return b - a; }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1506078,
                "title": "java-detailed-code-solutions-for-follow-ups",
                "content": "**Solution for main question**\\n```java\\n/**\\n * Using two heaps\\n * \\n * Time Complexity:\\n * 1) addNum -> O(5 * log (N/2)) = O(log N)\\n * 2) findMedian -> O(1)\\n *\\n * Space Complexity: O(N)\\n *\\n * N = Count of numbers in the data stream.\\n */\\nclass MedianFinder {\\n    PriorityQueue<Integer> smallNums; // Max Heap\\n    PriorityQueue<Integer> largeNums; // Min Heap\\n\\n    public MedianFinder() {\\n        smallNums = new PriorityQueue<>(Collections.reverseOrder());\\n        largeNums = new PriorityQueue<>();\\n    }\\n\\n    public void addNum(int num) {\\n        // Add to maxHeap first (Group of smaller numbers)\\n        smallNums.offer(num);\\n        // Balance the heaps\\n        largeNums.offer(smallNums.poll());\\n        if (largeNums.size() > smallNums.size()) {\\n            smallNums.offer(largeNums.poll());\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (smallNums.size() != largeNums.size()) {\\n            return smallNums.peek();\\n        }\\n        return (smallNums.peek() + largeNums.peek()) / 2.0;\\n    }\\n}\\n```\\n\\n---\\n**Solution for Follow-Up 1**\\n```java\\n/**\\n * Follow-Up 1 - Numbers are between [0, 100]\\n * Maintain a cumulative count array.\\n *\\n * Time Complexity:\\n * 1) addNum -> O(101) = O(1)\\n * 2) findMedian -> O(log(101)) = O(1)\\n *\\n * Space Complexity: O(101) = O(1)\\n */\\nclass MedianFinder {\\n    int[] count;\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n    }\\n\\n    public void addNum(int num) {\\n        for (int i = num; i < 101; i++) {\\n            count[i]++;\\n        }\\n    }\\n\\n    public double findMedian() {\\n        int totalNums = count[100];\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int idx = binarySearch(count, medianCount);\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < count[idx]) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] > count[idx]) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n\\n    private int binarySearch(int[] nums, int target) {\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while (start < end) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] >= target) {\\n                end = mid;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```\\n\\n**Optimized addNum() function to true O(1)**\\n```java\\n/**\\n * Follow-Up 1 - Numbers are between [0, 100]\\n * Maintain a count array. Here Add num is optimized to true O(1)\\n *\\n * Time Complexity:\\n * 1) addNum -> O(1)\\n * 2) findMedian -> O(101) = O(1)\\n *\\n * Space Complexity: O(101) = O(1)\\n */\\nclass MedianFinder {\\n    int[] count;\\n    int totalNums;\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n    }\\n\\n    public void addNum(int num) {\\n        count[num]++;\\n        totalNums++;\\n    }\\n\\n    public double findMedian() {\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int countSum = 0;\\n        int idx = 0;\\n        while (idx <= 100) {\\n            countSum += count[idx];\\n            if (medianCount <= countSum) {\\n                break;\\n            }\\n            idx++;\\n        }\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < countSum) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] != 0) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```\\n\\n---\\n**Solution for Follow-Up 2**\\n```java\\n/**\\n * Follow-Up 2 - 99% Numbers are between [0, 100]\\n * Until a threshold is met use two heaps to find the median. Once the threshold is met\\n * use the cumulative count array.\\n *\\n * Time Complexity:\\n * 1) addNum -> Until threshold O(101 + 5*log(threshold/2)). After threshold O(101)\\n * 2) findMedian -> Until threshold O(1). After threshold O(101)\\n *\\n * Space Complexity: O(101+threshold)\\n */\\nclass MedianFinder {\\n    int[] count;\\n    int lessThanZero;\\n    int totalNums;\\n    int threshold;\\n    PriorityQueue<Integer> smallNums; // Max Heap\\n    PriorityQueue<Integer> largeNums; // Min Heap\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n        threshold = 100;\\n        smallNums = new PriorityQueue<>(Collections.reverseOrder());\\n        largeNums = new PriorityQueue<>();\\n    }\\n\\n    public void addNum(int num) {\\n        if (num < 0) {\\n            lessThanZero++;\\n        }\\n        for (int i = Math.max(num, 0); i < 101; i++) {\\n            count[i]++;\\n        }\\n        totalNums++;\\n        if (totalNums <= threshold) {\\n            smallNums.offer(num);\\n            largeNums.offer(smallNums.poll());\\n            if (largeNums.size() > smallNums.size()) {\\n                smallNums.offer(largeNums.poll());\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (totalNums <= threshold) {\\n            if (smallNums.size() != largeNums.size()) {\\n                return smallNums.peek();\\n            }\\n            return (smallNums.peek() + largeNums.peek()) / 2.0;\\n        }\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int idx = binarySearch(count, medianCount);\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < count[idx]) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] > count[idx]) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n\\n    private int binarySearch(int[] nums, int target) {\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while (start < end) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] >= target) {\\n                end = mid;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```java\\n/**\\n * Using two heaps\\n * \\n * Time Complexity:\\n * 1) addNum -> O(5 * log (N/2)) = O(log N)\\n * 2) findMedian -> O(1)\\n *\\n * Space Complexity: O(N)\\n *\\n * N = Count of numbers in the data stream.\\n */\\nclass MedianFinder {\\n    PriorityQueue<Integer> smallNums; // Max Heap\\n    PriorityQueue<Integer> largeNums; // Min Heap\\n\\n    public MedianFinder() {\\n        smallNums = new PriorityQueue<>(Collections.reverseOrder());\\n        largeNums = new PriorityQueue<>();\\n    }\\n\\n    public void addNum(int num) {\\n        // Add to maxHeap first (Group of smaller numbers)\\n        smallNums.offer(num);\\n        // Balance the heaps\\n        largeNums.offer(smallNums.poll());\\n        if (largeNums.size() > smallNums.size()) {\\n            smallNums.offer(largeNums.poll());\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (smallNums.size() != largeNums.size()) {\\n            return smallNums.peek();\\n        }\\n        return (smallNums.peek() + largeNums.peek()) / 2.0;\\n    }\\n}\\n```\n```java\\n/**\\n * Follow-Up 1 - Numbers are between [0, 100]\\n * Maintain a cumulative count array.\\n *\\n * Time Complexity:\\n * 1) addNum -> O(101) = O(1)\\n * 2) findMedian -> O(log(101)) = O(1)\\n *\\n * Space Complexity: O(101) = O(1)\\n */\\nclass MedianFinder {\\n    int[] count;\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n    }\\n\\n    public void addNum(int num) {\\n        for (int i = num; i < 101; i++) {\\n            count[i]++;\\n        }\\n    }\\n\\n    public double findMedian() {\\n        int totalNums = count[100];\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int idx = binarySearch(count, medianCount);\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < count[idx]) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] > count[idx]) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n\\n    private int binarySearch(int[] nums, int target) {\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while (start < end) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] >= target) {\\n                end = mid;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```\n```java\\n/**\\n * Follow-Up 1 - Numbers are between [0, 100]\\n * Maintain a count array. Here Add num is optimized to true O(1)\\n *\\n * Time Complexity:\\n * 1) addNum -> O(1)\\n * 2) findMedian -> O(101) = O(1)\\n *\\n * Space Complexity: O(101) = O(1)\\n */\\nclass MedianFinder {\\n    int[] count;\\n    int totalNums;\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n    }\\n\\n    public void addNum(int num) {\\n        count[num]++;\\n        totalNums++;\\n    }\\n\\n    public double findMedian() {\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int countSum = 0;\\n        int idx = 0;\\n        while (idx <= 100) {\\n            countSum += count[idx];\\n            if (medianCount <= countSum) {\\n                break;\\n            }\\n            idx++;\\n        }\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < countSum) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] != 0) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n}\\n```\n```java\\n/**\\n * Follow-Up 2 - 99% Numbers are between [0, 100]\\n * Until a threshold is met use two heaps to find the median. Once the threshold is met\\n * use the cumulative count array.\\n *\\n * Time Complexity:\\n * 1) addNum -> Until threshold O(101 + 5*log(threshold/2)). After threshold O(101)\\n * 2) findMedian -> Until threshold O(1). After threshold O(101)\\n *\\n * Space Complexity: O(101+threshold)\\n */\\nclass MedianFinder {\\n    int[] count;\\n    int lessThanZero;\\n    int totalNums;\\n    int threshold;\\n    PriorityQueue<Integer> smallNums; // Max Heap\\n    PriorityQueue<Integer> largeNums; // Min Heap\\n\\n    public MedianFinder() {\\n        count = new int[101];\\n        threshold = 100;\\n        smallNums = new PriorityQueue<>(Collections.reverseOrder());\\n        largeNums = new PriorityQueue<>();\\n    }\\n\\n    public void addNum(int num) {\\n        if (num < 0) {\\n            lessThanZero++;\\n        }\\n        for (int i = Math.max(num, 0); i < 101; i++) {\\n            count[i]++;\\n        }\\n        totalNums++;\\n        if (totalNums <= threshold) {\\n            smallNums.offer(num);\\n            largeNums.offer(smallNums.poll());\\n            if (largeNums.size() > smallNums.size()) {\\n                smallNums.offer(largeNums.poll());\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (totalNums <= threshold) {\\n            if (smallNums.size() != largeNums.size()) {\\n                return smallNums.peek();\\n            }\\n            return (smallNums.peek() + largeNums.peek()) / 2.0;\\n        }\\n        int medianCount = totalNums % 2 == 0 ? totalNums / 2 : (totalNums + 1) / 2;\\n        int idx = binarySearch(count, medianCount);\\n        if (totalNums % 2 == 0) {\\n            if (medianCount < count[idx]) {\\n                return idx;\\n            }\\n            for (int i = idx + 1; i < 101; i++) {\\n                if (count[i] > count[idx]) {\\n                    return (idx + i) / 2.0;\\n                }\\n            }\\n        }\\n        return idx;\\n    }\\n\\n    private int binarySearch(int[] nums, int target) {\\n        int start = 0;\\n        int end = nums.length - 1;\\n        while (start < end) {\\n            int mid = start + (end - start) / 2;\\n            if (nums[mid] >= target) {\\n                end = mid;\\n            } else {\\n                start = mid + 1;\\n            }\\n        }\\n        return start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1330697,
                "title": "c-short-and-clean-solution-using-one-multiset-5-lines-of-code",
                "content": "```\\nclass MedianFinder {\\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        nums.insert(num);\\n        is_even = !is_even;\\n        if (it == nums.end() || (is_even && (*it) <= num)) it++;\\n        if (!is_even && (*it) > num) it--;\\n    }\\n    \\n    double findMedian() {\\n        return (!is_even)? *it : (*it + *prev(it)) / 2.0;\\n    }\\n    \\nprivate:\\n    multiset<int> nums;\\n    multiset<int>::iterator it = nums.begin();\\n    bool is_even = true;\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        nums.insert(num);\\n        is_even = !is_even;\\n        if (it == nums.end() || (is_even && (*it) <= num)) it++;\\n        if (!is_even && (*it) > num) it--;\\n    }\\n    \\n    double findMedian() {\\n        return (!is_even)? *it : (*it + *prev(it)) / 2.0;\\n    }\\n    \\nprivate:\\n    multiset<int> nums;\\n    multiset<int>::iterator it = nums.begin();\\n    bool is_even = true;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806191,
                "title": "short-c-explained-solution-beginner-friendly-by-mr-coder",
                "content": "https://www.youtube.com/watch?v=tVe_V74L-Ks\\n**If thumbnail is not showing click on the link directly.**\\n\\n\\n\\nAlso you can SUBSCRIBE \\uD83E\\uDC81 \\uD83E\\uDC81 \\uD83E\\uDC81 this channel for the daily leetcode challange solution.\\n\\n\\n\\n\\n\\n\\n\\nhttps://t.me/dsacoder \\u2B05\\u2B05 Telegram link to discuss leetcode daily questions and other dsa problems\\n**If you find my solution helpful please upvote it.**\\n**C++(Heap)**\\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> decreasing;\\n    priority_queue<int, vector<int>, greater<int>> increasing;\\n    bool evn = true;\\n    MedianFinder() {\\n    }\\n    void addNum(int num) {\\n        evn =!evn;\\n        if(!evn){\\n        decreasing.push(num);\\n        increasing.push(decreasing.top());\\n        decreasing.pop();}\\n        else{\\n              increasing.push(num);\\n              decreasing.push(increasing.top());\\n              increasing.pop();\\n        }\\n      \\n    }\\n    double findMedian() {\\n        if (!evn) return increasing.top();\\n        return (decreasing.top() + increasing.top()) / 2.0;\\n    }\\n};\\n```\\n**C++(Multi Set)**\\n```\\nclass MedianFinder {\\nprivate:\\n    multiset<int> mul_set;\\n    multiset<int>::iterator itrtr = mul_set.begin();\\n    bool checkodd = false;\\n    \\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        mul_set.insert(num);\\n        checkodd = !checkodd;\\n        \\n        if (mul_set.size()==1 || (!checkodd && (*itrtr) <= num)) itrtr++;\\n        if (checkodd && (*itrtr) > num) itrtr--;\\n    }\\n    \\n    double findMedian() {\\n        return (checkodd)? *itrtr : (*itrtr + *prev(itrtr)) / 2.0;\\n    }\\n    \\n};\\n```\\n**If you find my solution helpful please upvote it.**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> decreasing;\\n    priority_queue<int, vector<int>, greater<int>> increasing;\\n    bool evn = true;\\n    MedianFinder() {\\n    }\\n    void addNum(int num) {\\n        evn =!evn;\\n        if(!evn){\\n        decreasing.push(num);\\n        increasing.push(decreasing.top());\\n        decreasing.pop();}\\n        else{\\n              increasing.push(num);\\n              decreasing.push(increasing.top());\\n              increasing.pop();\\n        }\\n      \\n    }\\n    double findMedian() {\\n        if (!evn) return increasing.top();\\n        return (decreasing.top() + increasing.top()) / 2.0;\\n    }\\n};\\n```\n```\\nclass MedianFinder {\\nprivate:\\n    multiset<int> mul_set;\\n    multiset<int>::iterator itrtr = mul_set.begin();\\n    bool checkodd = false;\\n    \\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        mul_set.insert(num);\\n        checkodd = !checkodd;\\n        \\n        if (mul_set.size()==1 || (!checkodd && (*itrtr) <= num)) itrtr++;\\n        if (checkodd && (*itrtr) > num) itrtr--;\\n    }\\n    \\n    double findMedian() {\\n        return (checkodd)? *itrtr : (*itrtr + *prev(itrtr)) / 2.0;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74091,
                "title": "a-clean-solution-using-multiset-in-c",
                "content": "The key point here is to ensure the `midIter` always points to the median or if it's even array then to the first of the median.\\n\\nthe complete solution in C++ as follows.\\n\\n```\\nclass MedianFinder {\\nprivate:\\n    int size; \\n    multiset<int> numsSet;\\n    multiset<int>::iterator midIter;\\npublic:\\n\\n    // Adds a number into the data structure.\\n    void addNum(int num) \\n    {\\n        if(numsSet.empty())\\n        {\\n            midIter = numsSet.insert(num);\\n            size++;\\n            return ; \\n        }\\n        numsSet.insert(num);\\n        if((size&1) && num<*midIter) --midIter; \\n        else if(!(size&1) && num>=*midIter) ++midIter;\\n        size++;\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() \\n    {\\n        if(size & 1) return *midIter;   \\n        else return (double)(*midIter+*next(midIter))/2;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\nprivate:\\n    int size; \\n    multiset<int> numsSet;\\n    multiset<int>::iterator midIter;\\npublic:\\n\\n    // Adds a number into the data structure.\\n    void addNum(int num) \\n    {\\n        if(numsSet.empty())\\n        {\\n            midIter = numsSet.insert(num);\\n            size++;\\n            return ; \\n        }\\n        numsSet.insert(num);\\n        if((size&1) && num<*midIter) --midIter; \\n        else if(!(size&1) && num>=*midIter) ++midIter;\\n        size++;\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() \\n    {\\n        if(size & 1) return *midIter;   \\n        else return (double)(*midIter+*next(midIter))/2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74166,
                "title": "solution-using-binary-search-tree",
                "content": "As the input numbers are random, so the height of the binary search tree is O(logN)\\n\\nWe maintain every single node's children's size and it's easy to implement because it just has add operation.\\n\\n    struct BST {\\n        struct node {\\n            int val;\\n            int size;\\n            node* left, *right;\\n            node(int v) : size(1), val(v) {};\\n        } *Null, *root;\\n        \\n        BST() {\\n            Null = new node(0);\\n            Null -> size = 0;\\n            root = Null;\\n        }\\n        \\n        void add(int val, node*& R) {\\n            if(R == Null) {\\n                R = new node(val);\\n                R -> left = R -> right = Null;\\n                return;\\n            }\\n            if(R->val <= val) add(val, R->left);\\n            else add(val, R->right);\\n            R->size = R->left->size + R->right->size + 1;\\n            \\n        }\\n        \\n        int rank(int k) {\\n            node* t = root;\\n            while(true) {\\n                int leftSize =  t -> left -> size;\\n                if(leftSize == k) return t -> val;\\n                if(leftSize > k) {\\n                    t = t -> left;\\n                } else {\\n                    k = k - leftSize - 1;\\n                    t = t -> right;\\n                }\\n            }\\n            return -1;\\n        }\\n    };\\n    \\n    \\n    \\n    \\n    class MedianFinder {\\n    public:\\n        BST* bst;\\n        MedianFinder() {\\n            bst = new BST();\\n        }\\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            bst->add(num, bst->root);\\n        }\\n        \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            int sz = bst -> root -> size;\\n            if(sz % 2 == 0) {\\n                return 1.0 * (bst -> rank(sz / 2) + bst -> rank(sz / 2 - 1)) / 2;\\n            } else return bst->rank(sz / 2);\\n            \\n        }\\n    };",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Tree"
                ],
                "code": "As the input numbers are random, so the height of the binary search tree is O(logN)\\n\\nWe maintain every single node's children's size and it's easy to implement because it just has add operation.\\n\\n    struct BST {\\n        struct node {\\n            int val;\\n            int size;\\n            node* left, *right;\\n            node(int v) : size(1), val(v) {};\\n        } *Null, *root;\\n        \\n        BST() {\\n            Null = new node(0);\\n            Null -> size = 0;\\n            root = Null;\\n        }\\n        \\n        void add(int val, node*& R) {\\n            if(R == Null) {\\n                R = new node(val);\\n                R -> left = R -> right = Null;\\n                return;\\n            }\\n            if(R->val <= val) add(val, R->left);\\n            else add(val, R->right);\\n            R->size = R->left->size + R->right->size + 1;\\n            \\n        }\\n        \\n        int rank(int k) {\\n            node* t = root;\\n            while(true) {\\n                int leftSize =  t -> left -> size;\\n                if(leftSize == k) return t -> val;\\n                if(leftSize > k) {\\n                    t = t -> left;\\n                } else {\\n                    k = k - leftSize - 1;\\n                    t = t -> right;\\n                }\\n            }\\n            return -1;\\n        }\\n    };\\n    \\n    \\n    \\n    \\n    class MedianFinder {\\n    public:\\n        BST* bst;\\n        MedianFinder() {\\n            bst = new BST();\\n        }\\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            bst->add(num, bst->root);\\n        }\\n        \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            int sz = bst -> root -> size;\\n            if(sz % 2 == 0) {\\n                return 1.0 * (bst -> rank(sz / 2) + bst -> rank(sz / 2 - 1)) / 2;\\n            } else return bst->rank(sz / 2);\\n            \\n        }\\n    };",
                "codeTag": "Java"
            },
            {
                "id": 652498,
                "title": "good-for-interviews-python-general-sort-insertion-sort-two-heaps-follow-ups",
                "content": "```\\n# sort O(NlogN)\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.store = []\\n\\n    def addNum(self, num: int) -> None:\\n        self.store.append(num)\\n        \\n    def findMedian(self) -> float:\\n        self.store.sort()\\n        \\n        n = len(self.store)-1\\n        return self.store[n//2] if n % 2 == 0 else (self.store[n//2] + self.store[n//2 + 1])/2.0\\n\\n# insertion sort -> bisect using binary search O(logN)\\n# insert -> O(N)\\n# Time O(N) + O(logN) = O(N)\\nfrom bisect import bisect_left\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.store = []\\n\\n    def addNum(self, num: int) -> None:\\n        if not self.store:\\n            self.store.append(num)\\n        else:\\n            idx = bisect_left(self.store, num)\\n            self.store.insert(idx, num)\\n        \\n    def findMedian(self) -> float:        \\n        n = len(self.store)-1\\n        return self.store[n//2] if n % 2 == 0 else (self.store[n//2] + self.store[n//2 + 1])/2.0\\n\\n# Time O(logN)\\nfrom heapq import heappush, heappop\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # holds the smaller half\\n        self.max = []\\n        # holds the larger half\\n        self.min = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        heappush(self.max, -num)\\n        heappush(self.min, -heappop(self.max))\\n        if len(self.min) > len(self.max):\\n            heappush(self.max, -heappop(self.min))\\n\\n        \\n    def findMedian(self) -> float:\\n        if len(self.max) == len(self.min):\\n            return (self.min[0] - self.max[0])/2.0\\n        else:\\n            return -self.max[0]\\n\\n```\\nOther nice things to mention:\\nUse self-balancing BST, the median is either the root node or children of root, insertion takes O(logN).\\nRed-black trees are better than AVL trees in this scenario because of a lot of insertions happening. \\nMultiset data structures in a lot of languages are implemented using red-black trees.\\n\\nFollow-ups:\\n\\n1. If all integer numbers from the stream are between 0\\xA0and 100, how would you optimize it?\\n- bucket sort, create an array of bucket of length 101, keep the count of numbers in each bucket, and the count of overall numbers, then it\\'s easy to locate the bucket where the median number resides and find the median by looping through the array-> O(1)\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n- 99% of all integer numbers lie in [0,100] means the median is definitely inside [0,100]. Besides the bucket range [0,100] as mentioned above, we just need to keep the count of all numbers, numbers smaller than 0, and numbers larger than 100, and adjust the index of the median element in our buckets of range [0,100].\\nFor example, if we have 100 numbers streamed, and one of the number is smaller than 0, that means the median\\'s index moved forward by 1, we just need to find the 49th element in our buckets in a sorted manner.",
                "solutionTags": [],
                "code": "```\\n# sort O(NlogN)\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.store = []\\n\\n    def addNum(self, num: int) -> None:\\n        self.store.append(num)\\n        \\n    def findMedian(self) -> float:\\n        self.store.sort()\\n        \\n        n = len(self.store)-1\\n        return self.store[n//2] if n % 2 == 0 else (self.store[n//2] + self.store[n//2 + 1])/2.0\\n\\n# insertion sort -> bisect using binary search O(logN)\\n# insert -> O(N)\\n# Time O(N) + O(logN) = O(N)\\nfrom bisect import bisect_left\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.store = []\\n\\n    def addNum(self, num: int) -> None:\\n        if not self.store:\\n            self.store.append(num)\\n        else:\\n            idx = bisect_left(self.store, num)\\n            self.store.insert(idx, num)\\n        \\n    def findMedian(self) -> float:        \\n        n = len(self.store)-1\\n        return self.store[n//2] if n % 2 == 0 else (self.store[n//2] + self.store[n//2 + 1])/2.0\\n\\n# Time O(logN)\\nfrom heapq import heappush, heappop\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # holds the smaller half\\n        self.max = []\\n        # holds the larger half\\n        self.min = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        heappush(self.max, -num)\\n        heappush(self.min, -heappop(self.max))\\n        if len(self.min) > len(self.max):\\n            heappush(self.max, -heappop(self.min))\\n\\n        \\n    def findMedian(self) -> float:\\n        if len(self.max) == len(self.min):\\n            return (self.min[0] - self.max[0])/2.0\\n        else:\\n            return -self.max[0]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 354195,
                "title": "c-112-ms-99-solution-w-follow-up",
                "content": "The idea behind this solution is to use two prioriy queues and two ints where int1 <= int2. The two ints store potential median, and the two priority queues stores values less than the int1, and greater than int 2. Thus, when we always have the median in ```O(1)``` time. When we add element, we insert according to int1 and int2, and int1/2 are potentially updated. Once that is done, we need to \"shift\" numbers either to left or right, so the size of the two queues are at most 1 apart. Thus, when the two queues are equal in size, median is average of int1 and int2, and when they are not equal, the median is either int1 or int2, depending on which queue you set to have the greater size.\\n\\nThe less queue must have elements sorted in ascending, so we always push out the maximum (previous element in sorted order), while the greater queue must have elements sorted in descending, so we always push out the minimum (next element in sorted order)\\n\\nThe run-time of this algorithm is ```O(nlgn)```, and space complexity is ```O(n)```. \\n\\n**Follow up**:\\n\\nIf the range of the numbers are between 0 and 100, we can use bins to collect the frequency of each number. This makes the insert process ```O(1)```. To get the median, we can simply check what is the cumulative count (if 500 elements inserted, median is the 250th and 251th number. we need to find after which element do we go over count 250 and 251, so we add count for 0, count for 1, etc. until we get to elements covering 250 and 251). This can be done in ```O(1)``` time, since we go at most from 0 up to 100. \\n\\nIf 99% of the numbers are in ```[0, 100]``` but 1% is not, we can simply have two extra counts, one for less than 0, one for greater than 100. This is because we know for sure the median is still in ```[0, 100]``` since it occupies more than 50% of the total counts, so we don\\'t need the values for those 1%. Thus, we simply add in two extra counts when calculating the cumulative count value for median, and do the same thing as before to find the median. For example if we have 107 elements inserted, and there are 2 elements before 0 and 5 after 100. Since total elements = 107, we are looking for 54th element, so we start with count = 2, add count for 0, for 1, etc. until we get the element that increases count over 54.\\n\\n```\\nclass MedianFinder {\\npublic:\\n    MedianFinder(): size(0), v1(0), v2(0) {} // Assert size of g is either equal or greater than 1 than size of l\\n    \\n    void addNum(int num) {\\n        ++size;\\n        if(size == 1) v2 = num;\\n        else if(size == 2) {\\n            v1 = num;\\n            if(v1 > v2) swap(v1, v2);\\n        }\\n        else {\\n            if(num >= v2) g.push(num);\\n            else if(num > v1) {g.push(v2); v2 = num;}\\n            else l.push(num);\\n        }\\n        if(l.size() > g.size()) {\\n            g.push(v2);\\n            v2 = v1;\\n            v1 = l.top(); l.pop();\\n        }\\n        else if(g.size() > l.size()+1) {\\n            l.push(v1);\\n            v1 = v2;\\n            v2 = g.top(); g.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        return size % 2 ? v2 : (v1 + v2)/2.0;\\n    }\\n    int size;\\n    int v1;\\n    int v2;\\n    priority_queue<int, vector<int>, greater<int>> g;\\n    priority_queue<int, vector<int>, less<int>> l;\\n};\\n\\nauto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\\n```",
                "solutionTags": [],
                "code": "```O(1)```\n```O(nlgn)```\n```O(n)```\n```O(1)```\n```O(1)```\n```[0, 100]```\n```[0, 100]```\n```\\nclass MedianFinder {\\npublic:\\n    MedianFinder(): size(0), v1(0), v2(0) {} // Assert size of g is either equal or greater than 1 than size of l\\n    \\n    void addNum(int num) {\\n        ++size;\\n        if(size == 1) v2 = num;\\n        else if(size == 2) {\\n            v1 = num;\\n            if(v1 > v2) swap(v1, v2);\\n        }\\n        else {\\n            if(num >= v2) g.push(num);\\n            else if(num > v1) {g.push(v2); v2 = num;}\\n            else l.push(num);\\n        }\\n        if(l.size() > g.size()) {\\n            g.push(v2);\\n            v2 = v1;\\n            v1 = l.top(); l.pop();\\n        }\\n        else if(g.size() > l.size()+1) {\\n            l.push(v1);\\n            v1 = v2;\\n            v2 = g.top(); g.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        return size % 2 ? v2 : (v1 + v2)/2.0;\\n    }\\n    int size;\\n    int v1;\\n    int v2;\\n    priority_queue<int, vector<int>, greater<int>> g;\\n    priority_queue<int, vector<int>, less<int>> l;\\n};\\n\\nauto gucciGang = []() {std::ios::sync_with_stdio(false);cin.tie(nullptr);cout.tie(nullptr);return 0;}();\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2805899,
                "title": "java-easy-solution-using-for-loop-arraylist",
                "content": "```\\nclass MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}\\n```\\n\\n**Upvote Please**",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1404605,
                "title": "short-js-solution-with-explanation-2-heaps-leetcode-s-default-heap",
                "content": "# Basic understanding of the problem\\nAs we need a median for a set of numbers is a sorted order middle value. So for an odd-numbered set, it would be the middle value:\\n`1 2 3 4 5`\\nin this case, it would be 3 which is Math.floor(n/2)\\nFor the even-numbered set it wouldn\\'t have a middle value so we would take 2 middle values and find their average:\\n`1 2 3 4`  (2+3)/2=2.5\\n\\nThe problem is that sorting each time would take too long and we need a way to store and add our elements in such a way that they will be kept sorted. For this, we use 2 heaps and we divide our array into 2 parts one for n/2 and the other one either for n/2 or n/2+1 depending on whether the set is odd or even. For example\\n\\n`1 2 3 4 5` we would keep` 1 2 ` and  `3 4 5` in separate heaps and we can just return the top value of 3 4 5 which would be the median or for\\n`1 2 3 4 ` we would have `1 2`  and  `3 4`  but notice that we cant use 1 and 3, that\\'s why we use 1 max heap and 1 min-heap so they are sorted as \\n`2 1` (max heap)  the top value will be the max\\n`3 4`(min-heap) the top value will be the mean\\n\\n```\\nclass MedianFinder {\\n\\t//Initilize max and min heap\\n    constructor() {\\n        this.minHeap = new MinPriorityQueue() //supported by leetcode\\n        this.maxHeap = new MaxPriorityQueue()\\n    }\\n\\n    addNum(num) {\\n\\t//add to min and pop the top for max to keep them in the order that we want\\n        this.minHeap.enqueue(num);\\n        this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n\\t\\t//balance them\\n        if (this.minHeap.size() < this.maxHeap.size()) {\\n            this.minHeap.enqueue(this.maxHeap.dequeue().element);\\n        }\\n\\t\\t//console.log(this.minHeap.toArray(), this.maxHeap.toArray()) //run this to understand better\\n    }\\n\\n    findMedian() {\\n        if (this.minHeap.size() > this.maxHeap.size()) // if one is bigger 21 and 345 example just pop from 345(min heap)\\n            return this.minHeap.front().element;\\n        else \\n            return (this.minHeap.front().element + this.maxHeap.front().element) / 2; // 21 and 34 example, pop 1 and 3 and find average\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n\\t//Initilize max and min heap\\n    constructor() {\\n        this.minHeap = new MinPriorityQueue() //supported by leetcode\\n        this.maxHeap = new MaxPriorityQueue()\\n    }\\n\\n    addNum(num) {\\n\\t//add to min and pop the top for max to keep them in the order that we want\\n        this.minHeap.enqueue(num);\\n        this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n\\t\\t//balance them\\n        if (this.minHeap.size() < this.maxHeap.size()) {\\n            this.minHeap.enqueue(this.maxHeap.dequeue().element);\\n        }\\n\\t\\t//console.log(this.minHeap.toArray(), this.maxHeap.toArray()) //run this to understand better\\n    }\\n\\n    findMedian() {\\n        if (this.minHeap.size() > this.maxHeap.size()) // if one is bigger 21 and 345 example just pop from 345(min heap)\\n            return this.minHeap.front().element;\\n        else \\n            return (this.minHeap.front().element + this.maxHeap.front().element) / 2; // 21 and 34 example, pop 1 and 3 and find average\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 786325,
                "title": "java-two-heaps-algo-explained-through-comments",
                "content": "```\\nclass MedianFinder {\\n    \\n    // To store lower half of data stream eg. 1, 2, 3, 6\\n    PriorityQueue<Integer> lowerHalf;\\n    // To store upper half of data stream eg. 8, 9, 11\\n    PriorityQueue<Integer> upperHalf;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        lowerHalf = new PriorityQueue<>((a,b) -> b - a); // Max heap : To fetch largest\\n        // element from lower half in O(1) time\\n        upperHalf = new PriorityQueue<>(); // Min heap : To fetch lowest \\n        // element from upper half in O(1) time\\n    }\\n    \\n    public void addNum(int num) {\\n        // Insert in lowerHalf is it\\'s empty or if number being inserted is less than the peek of lowerHalf otherwise insert in upperHalf\\n        if(lowerHalf.isEmpty() || num <= lowerHalf.peek()){\\n            lowerHalf.add(num);\\n        }else{\\n            upperHalf.add(num);\\n        }\\n        \\n        // We also need to ensure that the halves are balanced i.e. there is no more than a difference of 1 in size of both halves\\n        // Let lowerHalf be the one to hold one extra element if the size of total data stream is odd otherwise be equal to upperHalf\\n        if(upperHalf.size() > lowerHalf.size()){ // If an element added above made upperHalf have one more element than lowerHalf then we poll it and put it into lowerHalf\\n            lowerHalf.add(upperHalf.poll());\\n        } else if(lowerHalf.size() > upperHalf.size() + 1){\\n            // If an element added above, made lowerHalf have 2 more elements then upperHalf then we put one into upperHalf from lowerHalf\\n            upperHalf.add(lowerHalf.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(lowerHalf.size() == upperHalf.size()){\\n            return (double)(lowerHalf.peek() + upperHalf.peek())/2;\\n        }else{\\n             return (double)(lowerHalf.peek());\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n    \\n    // To store lower half of data stream eg. 1, 2, 3, 6\\n    PriorityQueue<Integer> lowerHalf;\\n    // To store upper half of data stream eg. 8, 9, 11\\n    PriorityQueue<Integer> upperHalf;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        lowerHalf = new PriorityQueue<>((a,b) -> b - a); // Max heap : To fetch largest\\n        // element from lower half in O(1) time\\n        upperHalf = new PriorityQueue<>(); // Min heap : To fetch lowest \\n        // element from upper half in O(1) time\\n    }\\n    \\n    public void addNum(int num) {\\n        // Insert in lowerHalf is it\\'s empty or if number being inserted is less than the peek of lowerHalf otherwise insert in upperHalf\\n        if(lowerHalf.isEmpty() || num <= lowerHalf.peek()){\\n            lowerHalf.add(num);\\n        }else{\\n            upperHalf.add(num);\\n        }\\n        \\n        // We also need to ensure that the halves are balanced i.e. there is no more than a difference of 1 in size of both halves\\n        // Let lowerHalf be the one to hold one extra element if the size of total data stream is odd otherwise be equal to upperHalf\\n        if(upperHalf.size() > lowerHalf.size()){ // If an element added above made upperHalf have one more element than lowerHalf then we poll it and put it into lowerHalf\\n            lowerHalf.add(upperHalf.poll());\\n        } else if(lowerHalf.size() > upperHalf.size() + 1){\\n            // If an element added above, made lowerHalf have 2 more elements then upperHalf then we put one into upperHalf from lowerHalf\\n            upperHalf.add(lowerHalf.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(lowerHalf.size() == upperHalf.size()){\\n            return (double)(lowerHalf.peek() + upperHalf.peek())/2;\\n        }else{\\n             return (double)(lowerHalf.peek());\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 677080,
                "title": "well-commented-python-code",
                "content": "```\\nclass MedianFinder:\\n    \\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.lowerhalf = [] # store the small half, top is the largest in the small part\\n        self.upperhalf = [] # store the large half, top is the smallest in the large part\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        # The case for the first element, just add to the minheap\\n        if len(self.lowerhalf) == 0:\\n            heapq.heappush(self.lowerhalf, -num)\\n            return\\n        \\n        # Now choose where to add the new element \\n        # If it is less than or equal the top of min heap, it can be accomodated under it else go to max heap\\n        if num <= -self.lowerhalf[0]:\\n            heapq.heappush(self.lowerhalf, -num) # Go to the max Heap \\n            #(-ve sign because to implement max heap using the default heapq in python, we need to negate the values)\\n        else:\\n            heapq.heappush(self.upperhalf, num) # Go to the min Heap\\n            \\n        # Adjusting the balance\\n        \\n        # If the lowerhalf heap has more elements\\n        if len(self.lowerhalf) - len(self.upperhalf) == 2:\\n            heapq.heappush(self.upperhalf, - heapq.heappop(self.lowerhalf))\\n        \\n        # If the upperhalf heap has more elements\\n        elif len(self.upperhalf) - len(self.lowerhalf) == 2:\\n            heapq.heappush(self.lowerhalf, - heapq.heappop(self.upperhalf))\\n        \\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        # If both heaps have same number of elements return the avg\\n        # If not, then the root of the one with more elements, is the answer\\n        \\n        if len(self.lowerhalf) == len(self.upperhalf):\\n            return (- self.lowerhalf[0] + self.upperhalf[0] )/2.0 \\n            # - sign because lowerhalf has negative value\\n        elif len(self.lowerhalf) > len(self.upperhalf):\\n            return -float(self.lowerhalf[0])\\n        else:\\n            return float(self.upperhalf[0])\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```\\nBased on video solution from: youtube.com/watch?v=1CxyVdA_654",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder:\\n    \\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.lowerhalf = [] # store the small half, top is the largest in the small part\\n        self.upperhalf = [] # store the large half, top is the smallest in the large part\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        # The case for the first element, just add to the minheap\\n        if len(self.lowerhalf) == 0:\\n            heapq.heappush(self.lowerhalf, -num)\\n            return\\n        \\n        # Now choose where to add the new element \\n        # If it is less than or equal the top of min heap, it can be accomodated under it else go to max heap\\n        if num <= -self.lowerhalf[0]:\\n            heapq.heappush(self.lowerhalf, -num) # Go to the max Heap \\n            #(-ve sign because to implement max heap using the default heapq in python, we need to negate the values)\\n        else:\\n            heapq.heappush(self.upperhalf, num) # Go to the min Heap\\n            \\n        # Adjusting the balance\\n        \\n        # If the lowerhalf heap has more elements\\n        if len(self.lowerhalf) - len(self.upperhalf) == 2:\\n            heapq.heappush(self.upperhalf, - heapq.heappop(self.lowerhalf))\\n        \\n        # If the upperhalf heap has more elements\\n        elif len(self.upperhalf) - len(self.lowerhalf) == 2:\\n            heapq.heappush(self.lowerhalf, - heapq.heappop(self.upperhalf))\\n        \\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        # If both heaps have same number of elements return the avg\\n        # If not, then the root of the one with more elements, is the answer\\n        \\n        if len(self.lowerhalf) == len(self.upperhalf):\\n            return (- self.lowerhalf[0] + self.upperhalf[0] )/2.0 \\n            # - sign because lowerhalf has negative value\\n        elif len(self.lowerhalf) > len(self.upperhalf):\\n            return -float(self.lowerhalf[0])\\n        else:\\n            return float(self.upperhalf[0])\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805492,
                "title": "c-solutions",
                "content": "```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> firstQ; // max_heap for the first half\\n    priority_queue<int, std::vector<int>, std::greater<int> > secQ; // min_heap for the second half\\npublic:\\n    // Adds a number into the data structure.\\n    void addNum(int num) {\\n        if(firstQ.empty() || (firstQ.top()>num)) firstQ.push(num); // if it belongs to the smaller half\\n        else secQ.push(num); \\n        \\n        // rebalance the two halfs to make sure the length difference is no larger than 1\\n        if(firstQ.size() > (secQ.size()+1))\\n        {\\n            secQ.push(firstQ.top());\\n            firstQ.pop();\\n        }\\n        else if(firstQ.size()+1<secQ.size())\\n        {\\n            firstQ.push(secQ.top());\\n            secQ.pop();\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() {\\n        if(firstQ.size() == secQ.size()) return firstQ.empty()?0:( (firstQ.top()+secQ.top())/2.0);\\n        else return (firstQ.size() > secQ.size())? firstQ.top():secQ.top(); \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> firstQ; // max_heap for the first half\\n    priority_queue<int, std::vector<int>, std::greater<int> > secQ; // min_heap for the second half\\npublic:\\n    // Adds a number into the data structure.\\n    void addNum(int num) {\\n        if(firstQ.empty() || (firstQ.top()>num)) firstQ.push(num); // if it belongs to the smaller half\\n        else secQ.push(num); \\n        \\n        // rebalance the two halfs to make sure the length difference is no larger than 1\\n        if(firstQ.size() > (secQ.size()+1))\\n        {\\n            secQ.push(firstQ.top());\\n            firstQ.pop();\\n        }\\n        else if(firstQ.size()+1<secQ.size())\\n        {\\n            firstQ.push(secQ.top());\\n            secQ.pop();\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() {\\n        if(firstQ.size() == secQ.size()) return firstQ.empty()?0:( (firstQ.top()+secQ.top())/2.0);\\n        else return (firstQ.size() > secQ.size())? firstQ.top():secQ.top(); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 271077,
                "title": "c-94-5",
                "content": "````\\npublic class MedianFinder \\n{\\n    List<int> Numbers;\\n    \\n    public MedianFinder() \\n    {\\n        Numbers = new List<int>();\\n    }\\n    \\n    public void AddNum(int num) \\n    {\\n        // Find where to insert this num in Numbers using Binary Search\\n        // NOTE: Binary Search is logarithmic time complexity O(logn) \\n        int position = Numbers.BinarySearch(num);\\n        \\n        // So if BinarySearch returns -1 it means we should insert at the first position\\n        if (position < 0)\\n        {\\n            position = ~position; // Bitwise complement of -1 is 0\\n        }\\n        \\n        Numbers.Insert(position, num);\\n    }\\n    \\n    public double FindMedian() \\n    {\\n        int count = Numbers.Count;\\n        if (count % 2 == 0)\\n        {\\n            // Even number of elements\\n            return (double)((Numbers[count / 2 - 1] + Numbers[count / 2]) * 0.5);\\n        }\\n        else\\n        {\\n            // Odd number of elements\\n            return (double)(Numbers[count / 2]);\\n        }            \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.AddNum(num);\\n * double param_2 = obj.FindMedian();\\n */\\n ````",
                "solutionTags": [],
                "code": "````\\npublic class MedianFinder \\n{\\n    List<int> Numbers;\\n    \\n    public MedianFinder() \\n    {\\n        Numbers = new List<int>();\\n    }\\n    \\n    public void AddNum(int num) \\n    {\\n        // Find where to insert this num in Numbers using Binary Search\\n        // NOTE: Binary Search is logarithmic time complexity O(logn) \\n        int position = Numbers.BinarySearch(num);\\n        \\n        // So if BinarySearch returns -1 it means we should insert at the first position\\n        if (position < 0)\\n        {\\n            position = ~position; // Bitwise complement of -1 is 0\\n        }\\n        \\n        Numbers.Insert(position, num);\\n    }\\n    \\n    public double FindMedian() \\n    {\\n        int count = Numbers.Count;\\n        if (count % 2 == 0)\\n        {\\n            // Even number of elements\\n            return (double)((Numbers[count / 2 - 1] + Numbers[count / 2]) * 0.5);\\n        }\\n        else\\n        {\\n            // Odd number of elements\\n            return (double)(Numbers[count / 2]);\\n        }            \\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.AddNum(num);\\n * double param_2 = obj.FindMedian();\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 122701,
                "title": "javascript-solution-using-binary-search",
                "content": "```\\nvar MedianFinder = function() {\\n    this.ary = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n   \\n    var low = 0 ; \\n    var high = this.ary.length-1;\\n    \\n    while(low <= high)\\n        {\\n            var mid = Math.floor((high + low)/2);\\n            \\n            if(this.ary[mid]  < num)\\n                {\\n                    low = mid+1;\\n                }\\n            else\\n                {\\n                    high =mid-1;\\n                }\\n        }\\n    \\n    // insert at  location trick for javascript array.\\n    this.ary.splice(low, 0, num);\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    \\n    if(this.ary.length % 2 ==0)\\n        {\\n            var mid = this.ary.length/2;\\n            return (this.ary[mid] + this.ary[mid-1])/2;\\n        }\\n    else\\n        {\\n            var mid = Math.floor(this.ary.length/2);\\n            return (this.ary[mid]);\\n        }\\n    \\n};\\n",
                "solutionTags": [],
                "code": "```\\nvar MedianFinder = function() {\\n    this.ary = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n   \\n    var low = 0 ; \\n    var high = this.ary.length-1;\\n    \\n    while(low <= high)\\n        {\\n            var mid = Math.floor((high + low)/2);\\n            \\n            if(this.ary[mid]  < num)\\n                {\\n                    low = mid+1;\\n                }\\n            else\\n                {\\n                    high =mid-1;\\n                }\\n        }\\n    \\n    // insert at  location trick for javascript array.\\n    this.ary.splice(low, 0, num);\\n    \\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    \\n    if(this.ary.length % 2 ==0)\\n        {\\n            var mid = this.ary.length/2;\\n            return (this.ary[mid] + this.ary[mid-1])/2;\\n        }\\n    else\\n        {\\n            var mid = Math.floor(this.ary.length/2);\\n            return (this.ary[mid]);\\n        }\\n    \\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 969081,
                "title": "python-two-heap-solution-with-full-explanation",
                "content": "```\\nimport heapq\\n\\nclass MedianFinder:\\n    \\n    \\'\\'\\'\\n    We have a max heap representing the sorted left half of the stream, and a min heap representing the sorted right half of the stream.\\n    The tops of these heaps represent the middle of the stream so far.\\n    \\n    To get the median:\\n        - if len(left) == len(right): return (left[0] + right[0]) / 2\\n        - elif len(left) > len(right): return left[0]\\n        - else: return right[0]\\n        \\n    To add a number x:\\n        If x <= left[0], add to left. Else, add to right.\\n        If abs(len(left) - len(right)) > 1: rebalance heaps.\\n        \\n    To rebalance:\\n        Pop an element from the bigger heap and add it to the smaller heap.\\n        \\n    Adding a number: O(log n) time, as there could be at most 2 pushes and 1 pop (log n).\\n    Finding the median: O(1), since we just look at the 0th elements of the heaps.\\n    Space: O(n), since we store every element in the heaps.\\n    \\'\\'\\'\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        \\n        self.left = []\\n        self.right = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        if not self.left or num <= -self.left[0]:\\n            heapq.heappush(self.left, -num) # we use negative numbers to make it a max heap, default python heap is a min heap\\n        else:\\n            heapq.heappush(self.right, num)\\n            \\n        # rebalance here\\n        if abs(len(self.left) - len(self.right)) > 1:\\n            if len(self.left) > len(self.right):\\n                elt = -heapq.heappop(self.left) # negate to get it back to original number\\n                heapq.heappush(self.right, elt)\\n            else:\\n                elt = heapq.heappop(self.right)\\n                heapq.heappush(self.left, -elt) # negate due to max heap\\n\\n\\n    def findMedian(self) -> float:\\n        \\n        # remember to negate the left values!\\n        \\n        if len(self.left) == len(self.right):\\n            return (-self.left[0] + self.right[0]) / 2\\n        elif len(self.left) > len(self.right):\\n            return -self.left[0]\\n        else:\\n            return self.right[0]\\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nimport heapq\\n\\nclass MedianFinder:\\n    \\n    \\'\\'\\'\\n    We have a max heap representing the sorted left half of the stream, and a min heap representing the sorted right half of the stream.\\n    The tops of these heaps represent the middle of the stream so far.\\n    \\n    To get the median:\\n        - if len(left) == len(right): return (left[0] + right[0]) / 2\\n        - elif len(left) > len(right): return left[0]\\n        - else: return right[0]\\n        \\n    To add a number x:\\n        If x <= left[0], add to left. Else, add to right.\\n        If abs(len(left) - len(right)) > 1: rebalance heaps.\\n        \\n    To rebalance:\\n        Pop an element from the bigger heap and add it to the smaller heap.\\n        \\n    Adding a number: O(log n) time, as there could be at most 2 pushes and 1 pop (log n).\\n    Finding the median: O(1), since we just look at the 0th elements of the heaps.\\n    Space: O(n), since we store every element in the heaps.\\n    \\'\\'\\'\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        \\n        self.left = []\\n        self.right = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        if not self.left or num <= -self.left[0]:\\n            heapq.heappush(self.left, -num) # we use negative numbers to make it a max heap, default python heap is a min heap\\n        else:\\n            heapq.heappush(self.right, num)\\n            \\n        # rebalance here\\n        if abs(len(self.left) - len(self.right)) > 1:\\n            if len(self.left) > len(self.right):\\n                elt = -heapq.heappop(self.left) # negate to get it back to original number\\n                heapq.heappush(self.right, elt)\\n            else:\\n                elt = heapq.heappop(self.right)\\n                heapq.heappush(self.left, -elt) # negate due to max heap\\n\\n\\n    def findMedian(self) -> float:\\n        \\n        # remember to negate the left values!\\n        \\n        if len(self.left) == len(self.right):\\n            return (-self.left[0] + self.right[0]) / 2\\n        elif len(self.left) > len(self.right):\\n            return -self.left[0]\\n        else:\\n            return self.right[0]\\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 278272,
                "title": "python-two-heaps",
                "content": "**Explanation**:\\n`odd = true` is we have odd numbers.\\n`med` is the current median\\n\\n**Time Complexity**:\\n`addNum` function `O(logN)`\\n`findMedian` function `O(1)`\\n\\n**Python:**\\n```\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        self.med, self.odd, self.heaps = 0, 0, [[], []]\\n\\n    def addNum(self, x):\\n        big, small = self.heaps\\n        if self.odd:\\n            heapq.heappush(big, max(x, self.med))\\n            heapq.heappush(small, -min(x, self.med))\\n            self.med = (big[0] - small[0]) / 2.0\\n        else:\\n            if x > self.med:\\n                self.med = heapq.heappushpop(big, x)\\n            else:\\n                self.med = -heapq.heappushpop(small, -x)\\n        self.odd ^= 1\\n\\n    def findMedian(self):\\n        return self.med\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        self.med, self.odd, self.heaps = 0, 0, [[], []]\\n\\n    def addNum(self, x):\\n        big, small = self.heaps\\n        if self.odd:\\n            heapq.heappush(big, max(x, self.med))\\n            heapq.heappush(small, -min(x, self.med))\\n            self.med = (big[0] - small[0]) / 2.0\\n        else:\\n            if x > self.med:\\n                self.med = heapq.heappushpop(big, x)\\n            else:\\n                self.med = -heapq.heappushpop(small, -x)\\n        self.odd ^= 1\\n\\n    def findMedian(self):\\n        return self.med\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74147,
                "title": "concise-21-line-c-by-using-2-sorted-sets",
                "content": "    public class MedianFinder {\\n        private int counter = 0;\\n        private SortedSet<int[]> setLow = new SortedSet<int[]>(Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n        private SortedSet<int[]> setHigh = new SortedSet<int[]>(Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n        public void AddNum(int num) {\\n            int[] newNum = new int[2]{num, counter++};\\n            if(setLow.Count == setHigh.Count){\\n                if(setLow.Count == 0 || newNum[0] <= setLow.Max[0]) setLow.Add(newNum);\\n                else{\\n                    setHigh.Add(newNum);\\n                    setLow.Add(setHigh.Min);\\n                    setHigh.Remove(setHigh.Min);\\n                }\\n            }\\n            else if(newNum[0] <= setLow.Max[0]){\\n                setLow.Add(newNum);\\n                setHigh.Add(setLow.Max);\\n                setLow.Remove(setLow.Max);\\n            }\\n            else setHigh.Add(newNum);\\n        }\\n        // return the median of current data stream\\n        public double FindMedian() {\\n            if(setLow.Count == 0) return 0;\\n            if(setLow.Count == setHigh.Count) return (setLow.Max[0] + setHigh.Min[0]) / 2d;\\n            else return setLow.Max[0];\\n        }\\n    }",
                "solutionTags": [],
                "code": "    public class MedianFinder {\\n        private int counter = 0;\\n        private SortedSet<int[]> setLow = new SortedSet<int[]>(Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n        private SortedSet<int[]> setHigh = new SortedSet<int[]>(Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n        public void AddNum(int num) {\\n            int[] newNum = new int[2]{num, counter++};\\n            if(setLow.Count == setHigh.Count){\\n                if(setLow.Count == 0 || newNum[0] <= setLow.Max[0]) setLow.Add(newNum);\\n                else{\\n                    setHigh.Add(newNum);\\n                    setLow.Add(setHigh.Min);\\n                    setHigh.Remove(setHigh.Min);\\n                }\\n            }\\n            else if(newNum[0] <= setLow.Max[0]){\\n                setLow.Add(newNum);\\n                setHigh.Add(setLow.Max);\\n                setLow.Remove(setLow.Max);\\n            }\\n            else setHigh.Add(newNum);\\n        }\\n        // return the median of current data stream\\n        public double FindMedian() {\\n            if(setLow.Count == 0) return 0;\\n            if(setLow.Count == setHigh.Count) return (setLow.Max[0] + setHigh.Min[0]) / 2d;\\n            else return setLow.Max[0];\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2806024,
                "title": "c-two-approaches-using-vector-min-and-max-heap",
                "content": "**Approach 1: (Using Vector) TLE**\\n```\\nclass MedianFinder {\\npublic:\\n    vector<double> arr;\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        arr.push_back(num);\\n    }\\n    \\n    double findMedian() {\\n        sort(arr.begin(),arr.end());\\n        int n = arr.size();\\n        if(n%2 == 0){\\n            double ans = (arr[(n/2)-1]+arr[n/2])/2;\\n            return ans;\\n        }\\n        return arr[n/2];\\n    }\\n};\\n\\n```\\n**Approach 2: (Max-Min Heap) \\u2705**\\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> max_heap;\\n    priority_queue<int,vector<int>,greater<int>> min_heap;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(max_heap.size() > 0 && num > max_heap.top())\\n        {\\n            min_heap.push(num);\\n        }\\n        else\\n        {\\n            max_heap.push(num);\\n        }\\n        if(max_heap.size() > min_heap.size()+1)\\n        {\\n            min_heap.push(max_heap.top());\\n            max_heap.pop();\\n        }\\n        if(min_heap.size() > max_heap.size()+1)\\n        {\\n            max_heap.push(min_heap.top());\\n            min_heap.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(max_heap.size() == min_heap.size())\\n        {\\n            return (max_heap.top()+min_heap.top())/2.0;\\n        }\\n        if(max_heap.size() > min_heap.size())\\n        {\\n            return max_heap.top();\\n        }\\n        else\\n        {\\n            return min_heap.top();\\n        }\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    vector<double> arr;\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        arr.push_back(num);\\n    }\\n    \\n    double findMedian() {\\n        sort(arr.begin(),arr.end());\\n        int n = arr.size();\\n        if(n%2 == 0){\\n            double ans = (arr[(n/2)-1]+arr[n/2])/2;\\n            return ans;\\n        }\\n        return arr[n/2];\\n    }\\n};\\n\\n```\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> max_heap;\\n    priority_queue<int,vector<int>,greater<int>> min_heap;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(max_heap.size() > 0 && num > max_heap.top())\\n        {\\n            min_heap.push(num);\\n        }\\n        else\\n        {\\n            max_heap.push(num);\\n        }\\n        if(max_heap.size() > min_heap.size()+1)\\n        {\\n            min_heap.push(max_heap.top());\\n            max_heap.pop();\\n        }\\n        if(min_heap.size() > max_heap.size()+1)\\n        {\\n            max_heap.push(min_heap.top());\\n            min_heap.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(max_heap.size() == min_heap.size())\\n        {\\n            return (max_heap.top()+min_heap.top())/2.0;\\n        }\\n        if(max_heap.size() > min_heap.size())\\n        {\\n            return max_heap.top();\\n        }\\n        else\\n        {\\n            return min_heap.top();\\n        }\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 411354,
                "title": "two-heap-approach-with-python-o-log-n-insert-o-1-median",
                "content": "```\\n\"\"\"\\naddNum\\nRuntime: O(log n)\\nSpacetime: O(n)\\n\\nfindMedian\\nRuntime: O(1)\\nSpacetime: O(1)\\n\"\"\"\\nfrom heapq import *\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.min_heap: List[int] = []\\n        self.max_heap: List[int] = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        heappush(self.max_heap, -heappushpop(self.min_heap, num))\\n        \\n        if len(self.max_heap) > len(self.min_heap):\\n            heappush(self.min_heap, -heappop(self.max_heap))\\n        \\n\\n    def findMedian(self) -> float:\\n        has_even_count = len(self.max_heap) == len(self.min_heap)\\n\\n        if has_even_count:\\n            return (-self.max_heap[0] + self.min_heap[0]) / 2.0\\n        return float(self.min_heap[0])\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n\"\"\"\\naddNum\\nRuntime: O(log n)\\nSpacetime: O(n)\\n\\nfindMedian\\nRuntime: O(1)\\nSpacetime: O(1)\\n\"\"\"\\nfrom heapq import *\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.min_heap: List[int] = []\\n        self.max_heap: List[int] = []\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        heappush(self.max_heap, -heappushpop(self.min_heap, num))\\n        \\n        if len(self.max_heap) > len(self.min_heap):\\n            heappush(self.min_heap, -heappop(self.max_heap))\\n        \\n\\n    def findMedian(self) -> float:\\n        has_even_count = len(self.max_heap) == len(self.min_heap)\\n\\n        if has_even_count:\\n            return (-self.max_heap[0] + self.min_heap[0]) / 2.0\\n        return float(self.min_heap[0])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 129248,
                "title": "heap-thinking-process",
                "content": "Median is the middle value in an ordered integer list, so median will halve the list into `a bigger half and a smaller half` (When the size of list is not even, we can put the middle value in either half).\\n* If the size of the list is even, median is the mean of the two middle value, i.e., `the MEAN of the minimum of the bigger half AND the maximum of the smaller half`. \\n* If the size of the list is odd, median is `the maximum of the smaller half OR the maximum of the smaller half`.\\n\\n**Heap** is designed for the case that we need to repeatly do minimum or  maximum calculation.\\n\\nSo we maintain an invariant that smaller half is in maxHeap, and bigger half is in minHeap. This requires at any time:\\n* maximum of maxHeap < minimum of minHeap\\n* size of maxHeap and minHeap can differ at most 1\\n\\n****\\n```\\nclass MedianFinder {\\n    \\n    private PriorityQueue<Integer> maxHeap; // Smaller half.\\n    private PriorityQueue<Integer> minHeap; // Bigger half.\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b, a));\\n        minHeap = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        // Maintains the invariant that smaller half is in maxHeap, and bigger half is in minHeap\\n        if (maxHeap.isEmpty() || num <= maxHeap.peek()) { // num belongs to smaller half\\n            maxHeap.offer(num);\\n            if (maxHeap.size() > minHeap.size() + 1) {\\n                minHeap.offer(maxHeap.poll());\\n            }\\n        } else { // num belongs to bigger half\\n            minHeap.offer(num);\\n            if (minHeap.size() > maxHeap.size() + 1) {\\n                maxHeap.offer(minHeap.poll());\\n            }\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if (minHeap.size() > maxHeap.size()) {\\n            return (double) minHeap.peek();\\n        } else if (minHeap.size() < maxHeap.size()) {\\n            return (double) maxHeap.peek();\\n        } else {\\n            return (minHeap.peek() + maxHeap.peek()) / 2.0;\\n        }\\n    }\\n}\\n```\\n**(\\u4EBA \\u2022\\u0348\\u1D17\\u2022\\u0348)** Thanks for voting!",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n    \\n    private PriorityQueue<Integer> maxHeap; // Smaller half.\\n    private PriorityQueue<Integer> minHeap; // Bigger half.\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        maxHeap = new PriorityQueue<>((a, b) -> Integer.compare(b, a));\\n        minHeap = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        // Maintains the invariant that smaller half is in maxHeap, and bigger half is in minHeap\\n        if (maxHeap.isEmpty() || num <= maxHeap.peek()) { // num belongs to smaller half\\n            maxHeap.offer(num);\\n            if (maxHeap.size() > minHeap.size() + 1) {\\n                minHeap.offer(maxHeap.poll());\\n            }\\n        } else { // num belongs to bigger half\\n            minHeap.offer(num);\\n            if (minHeap.size() > maxHeap.size() + 1) {\\n                maxHeap.offer(minHeap.poll());\\n            }\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if (minHeap.size() > maxHeap.size()) {\\n            return (double) minHeap.peek();\\n        } else if (minHeap.size() < maxHeap.size()) {\\n            return (double) maxHeap.peek();\\n        } else {\\n            return (minHeap.peek() + maxHeap.peek()) / 2.0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74077,
                "title": "32ms-easy-to-understand-java-solution",
                "content": "    class MedianFinder {\\n    private Queue<Integer> maxHeap = new PriorityQueue(new Comparator<Integer>(){\\n       @Override\\n       public int compare(Integer i1, Integer i2){\\n           return Integer.compare(i2, i1);\\n       }\\n    });\\n    private Queue<Integer> minHeap = new PriorityQueue(new Comparator<Integer>(){\\n       @Override\\n       public int compare(Integer i1, Integer i2){\\n           return Integer.compare(i1, i2);\\n       }\\n    });\\n    \\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        minHeap.offer(num);\\n        maxHeap.offer(minHeap.poll());\\n        \\n        //if(maxHeap.size() > minHeap.size())\\n        if(maxHeap.size() - minHeap.size() == 1){\\n            minHeap.offer(maxHeap.poll());\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        return minHeap.size() > maxHeap.size()\\n             ? (double)minHeap.peek()\\n             : (minHeap.peek() + maxHeap.peek())/2.0;\\n    }\\n};",
                "solutionTags": [],
                "code": "    class MedianFinder {\\n    private Queue<Integer> maxHeap = new PriorityQueue(new Comparator<Integer>(){\\n       @Override\\n       public int compare(Integer i1, Integer i2){\\n           return Integer.compare(i2, i1);\\n       }\\n    });\\n    private Queue<Integer> minHeap = new PriorityQueue(new Comparator<Integer>(){\\n       @Override\\n       public int compare(Integer i1, Integer i2){\\n           return Integer.compare(i1, i2);\\n       }\\n    });\\n    \\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        minHeap.offer(num);\\n        maxHeap.offer(minHeap.poll());\\n        \\n        //if(maxHeap.size() > minHeap.size())\\n        if(maxHeap.size() - minHeap.size() == 1){\\n            minHeap.offer(maxHeap.poll());\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        return minHeap.size() > maxHeap.size()\\n             ? (double)minHeap.peek()\\n             : (minHeap.peek() + maxHeap.peek())/2.0;\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 2489443,
                "title": "c-easy-minheap-maxheap-hindi-comments",
                "content": "```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxpart;                           //isme sab choto ka descending order rehta\\n    priority_queue<int, vector<int>, greater<int>> minpart;    //isme sab bade bhaiyo ka ascending order rehta\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {         \\n        maxpart.push(num);              // maxpart mey num jaata, waha sort hojata. \\n        minpart.push(maxpart.top());    //Phir, maxpart ke top (largest) ku min part mey daalrai\\n        maxpart.pop();                  //bade bhai ku maxpart se nikaaldo    -> min mey neeche chalejaata \\n        if(maxpart.size() < minpart.size()){     //agar bade bhailog zyada hogaye minpart mey \\n            maxpart.push(minpart.top());        //toh unmese sabse chote bade bhai ku choto mey daaldo\\n            minpart.pop();                      //nikaaldo usku phir\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(maxpart.size() > minpart.size()) //odd number length hai toh hota, aur humesha maxpart(chote\\'s desc.order) ku bada rakhrai\\n            return maxpart.top();   //odd length aaya toh odd one out apne choto mey se rehta, unka sabse bada wala apna banda \\n        return (maxpart.top()+minpart.top())/2.0;    //even length aaya toh, choto ke bade aur bado ke chote ka avg hai ans\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Binary Search Tree",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxpart;                           //isme sab choto ka descending order rehta\\n    priority_queue<int, vector<int>, greater<int>> minpart;    //isme sab bade bhaiyo ka ascending order rehta\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {         \\n        maxpart.push(num);              // maxpart mey num jaata, waha sort hojata. \\n        minpart.push(maxpart.top());    //Phir, maxpart ke top (largest) ku min part mey daalrai\\n        maxpart.pop();                  //bade bhai ku maxpart se nikaaldo    -> min mey neeche chalejaata \\n        if(maxpart.size() < minpart.size()){     //agar bade bhailog zyada hogaye minpart mey \\n            maxpart.push(minpart.top());        //toh unmese sabse chote bade bhai ku choto mey daaldo\\n            minpart.pop();                      //nikaaldo usku phir\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(maxpart.size() > minpart.size()) //odd number length hai toh hota, aur humesha maxpart(chote\\'s desc.order) ku bada rakhrai\\n            return maxpart.top();   //odd length aaya toh odd one out apne choto mey se rehta, unka sabse bada wala apna banda \\n        return (maxpart.top()+minpart.top())/2.0;    //even length aaya toh, choto ke bade aur bado ke chote ka avg hai ans\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1227658,
                "title": "c-explained-in-detail-heaps-priority-queue-o-logn",
                "content": "```\\n/* \\nHarshit Gupta | 24th May, 2021\\n\\nC++ program for finding median in a running stream of integers.\\n\\nhttps://leetcode.com/problems/find-median-from-data-stream/\\n\\nSolution: \\n    a.  Create two heaps. One max heap to maintain elements of lower half \\n        and one min heap to maintain elements of higher half at any point of time.\\n    b.  Take initial value of median as 0.\\n    c.  For every newly read element, insert it into either max heap or min heap \\n        and then calulate the median based on the following conditions:\\n        - If the size of max heap is greater than size of min heap and the \\n            element is less than previous median then pop the top element from \\n            max heap and insert into min heap and insert the new element to max \\n            heap else insert the new element to min heap. Calculate the new median \\n            as average of top of elements of both max and min heap.\\n        - If the size of max heap is less than size of min heap and the element \\n            is greater than previous median then pop the top element from min heap \\n            and insert into max heap and insert the new element to min heap else \\n            insert the new element to max heap. Calculate the new median as average \\n            of top of elements of both max and min heap.\\n        - If the size of both heaps are same. Then check if current is less than \\n            previous median or not. If the current element is less than previous \\n            median then insert it to max heap and new median will be equal to top \\n            element of max heap. If the current element is greater than previous \\n            median then insert it to min heap and new median will be equal to top \\n            element of min heap.\\n\\nParadigm: Priority Queues, Heaps.\\n\\nTime Complexity: O(nlogn) to balance the heaps/heapify.\\n\\n*/\\n\\n\\n\\nclass MedianFinder {\\npublic:\\n    // max heap to store the smaller half elements\\n    priority_queue<int> max_heap;\\n    \\n    // min heap to store the greater half elements \\n    priority_queue<int, vector<int>, greater<int>> min_heap;\\n    \\n    // Variable which will contain the median value at all instance of time.\\n    // We can return it in O(1) time.\\n    double median;\\n    \\n    MedianFinder() {\\n        // initializing the median to 0\\n        median = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        \\n        // Case 1: Left side heap has more elements\\n        // Pushing an element would have EVEN number of elements in total, \\n        // so median is average of top of min and max heaps\\n        \\n        // If the size of max heap(s) is greater than the min heap(g)\\n        if(max_heap.size() > min_heap.size()) {\\n            \\n            // And the element is lesser than the median, then it has to be inserted in the max heap\\n            // But if directly inserted it will create imbalance in both heaps, \\n            // so the maximum(top) of max heap(s) is moved to the min heap(g)\\n            // and then the element is inserted to the max heap.\\n            if(num < median) {\\n                // Insert the top of max heap to min heap\\n                min_heap.push(max_heap.top());\\n                // Remove the top element of the max heap.\\n                max_heap.pop();\\n                // Insert the new element in the min heap\\n                max_heap.push(num);\\n            }\\n            // And the element is greater then the current median\\n            else{\\n                // Push it in the min heap. Now both heaps has equal elements.\\n                min_heap.push(num);\\n            }\\n            \\n            median = (double)(min_heap.top() + max_heap.top()) / 2.0;\\n        }\\n        \\n        // Case 2: Right side heap has more elements.\\n        // Pushing an element would have EVEN number of elements in total, \\n        // so median is average of top of min and max heaps\\n        \\n        // If the size of max heap(s) is lesser than the min heap(g). \\n        else if (max_heap.size() < min_heap.size()){\\n            \\n            // And the element is greater than the median, then it has to be inserted in the min heap\\n            // But if directly inserted it will create imbalance in both heaps, \\n            // so the minimum(top) of min heap(g) is moved to the max heap(s)\\n            // and then the element is inserted to the min heap.\\n            if(num > median){\\n                // Insert the top of min heap to the max heap.\\n                max_heap.push(min_heap.top());\\n                // Remove the top element of min heap since it is already inserted in the max heap\\n                min_heap.pop();\\n                // Insert the new element in the max heap.\\n                min_heap.push(num);\\n            }\\n            // And the element is less than the current median\\n            else{\\n                // Push it in the max heap. Now both heaps has equal elements.\\n                max_heap.push(num);\\n            }\\n            \\n            median = (double)(min_heap.top() + max_heap.top()) / 2.0;\\n        }\\n        \\n        // Case 3: Both heaps have equal elements and are balanced.\\n        // If both the heaps has equal elements, then inserting this element \\n        // would make the heaps have \\'ODD\\' number of elements and thus the median now\\n        // would be only one number and not average of two numbers.\\n        else {\\n            // If the element is less than the current median, it is inserted in the max heap\\n            // and now since max heap has more elements, the top of max heap would be the median.\\n            if( num < median){\\n                max_heap.push(num);\\n                median = (double)max_heap.top();\\n            }\\n            // If the element is greater than the current median, it is inserted in the min heap\\n            // and now since min heap has more elements, the top of min heap would be the median.\\n            else{\\n                min_heap.push(num);\\n                median = (double)min_heap.top();\\n            }\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        return median;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n/* \\nHarshit Gupta | 24th May, 2021\\n\\nC++ program for finding median in a running stream of integers.\\n\\nhttps://leetcode.com/problems/find-median-from-data-stream/\\n\\nSolution: \\n    a.  Create two heaps. One max heap to maintain elements of lower half \\n        and one min heap to maintain elements of higher half at any point of time.\\n    b.  Take initial value of median as 0.\\n    c.  For every newly read element, insert it into either max heap or min heap \\n        and then calulate the median based on the following conditions:\\n        - If the size of max heap is greater than size of min heap and the \\n            element is less than previous median then pop the top element from \\n            max heap and insert into min heap and insert the new element to max \\n            heap else insert the new element to min heap. Calculate the new median \\n            as average of top of elements of both max and min heap.\\n        - If the size of max heap is less than size of min heap and the element \\n            is greater than previous median then pop the top element from min heap \\n            and insert into max heap and insert the new element to min heap else \\n            insert the new element to max heap. Calculate the new median as average \\n            of top of elements of both max and min heap.\\n        - If the size of both heaps are same. Then check if current is less than \\n            previous median or not. If the current element is less than previous \\n            median then insert it to max heap and new median will be equal to top \\n            element of max heap. If the current element is greater than previous \\n            median then insert it to min heap and new median will be equal to top \\n            element of min heap.\\n\\nParadigm: Priority Queues, Heaps.\\n\\nTime Complexity: O(nlogn) to balance the heaps/heapify.\\n\\n*/\\n\\n\\n\\nclass MedianFinder {\\npublic:\\n    // max heap to store the smaller half elements\\n    priority_queue<int> max_heap;\\n    \\n    // min heap to store the greater half elements \\n    priority_queue<int, vector<int>, greater<int>> min_heap;\\n    \\n    // Variable which will contain the median value at all instance of time.\\n    // We can return it in O(1) time.\\n    double median;\\n    \\n    MedianFinder() {\\n        // initializing the median to 0\\n        median = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        \\n        // Case 1: Left side heap has more elements\\n        // Pushing an element would have EVEN number of elements in total, \\n        // so median is average of top of min and max heaps\\n        \\n        // If the size of max heap(s) is greater than the min heap(g)\\n        if(max_heap.size() > min_heap.size()) {\\n            \\n            // And the element is lesser than the median, then it has to be inserted in the max heap\\n            // But if directly inserted it will create imbalance in both heaps, \\n            // so the maximum(top) of max heap(s) is moved to the min heap(g)\\n            // and then the element is inserted to the max heap.\\n            if(num < median) {\\n                // Insert the top of max heap to min heap\\n                min_heap.push(max_heap.top());\\n                // Remove the top element of the max heap.\\n                max_heap.pop();\\n                // Insert the new element in the min heap\\n                max_heap.push(num);\\n            }\\n            // And the element is greater then the current median\\n            else{\\n                // Push it in the min heap. Now both heaps has equal elements.\\n                min_heap.push(num);\\n            }\\n            \\n            median = (double)(min_heap.top() + max_heap.top()) / 2.0;\\n        }\\n        \\n        // Case 2: Right side heap has more elements.\\n        // Pushing an element would have EVEN number of elements in total, \\n        // so median is average of top of min and max heaps\\n        \\n        // If the size of max heap(s) is lesser than the min heap(g). \\n        else if (max_heap.size() < min_heap.size()){\\n            \\n            // And the element is greater than the median, then it has to be inserted in the min heap\\n            // But if directly inserted it will create imbalance in both heaps, \\n            // so the minimum(top) of min heap(g) is moved to the max heap(s)\\n            // and then the element is inserted to the min heap.\\n            if(num > median){\\n                // Insert the top of min heap to the max heap.\\n                max_heap.push(min_heap.top());\\n                // Remove the top element of min heap since it is already inserted in the max heap\\n                min_heap.pop();\\n                // Insert the new element in the max heap.\\n                min_heap.push(num);\\n            }\\n            // And the element is less than the current median\\n            else{\\n                // Push it in the max heap. Now both heaps has equal elements.\\n                max_heap.push(num);\\n            }\\n            \\n            median = (double)(min_heap.top() + max_heap.top()) / 2.0;\\n        }\\n        \\n        // Case 3: Both heaps have equal elements and are balanced.\\n        // If both the heaps has equal elements, then inserting this element \\n        // would make the heaps have \\'ODD\\' number of elements and thus the median now\\n        // would be only one number and not average of two numbers.\\n        else {\\n            // If the element is less than the current median, it is inserted in the max heap\\n            // and now since max heap has more elements, the top of max heap would be the median.\\n            if( num < median){\\n                max_heap.push(num);\\n                median = (double)max_heap.top();\\n            }\\n            // If the element is greater than the current median, it is inserted in the min heap\\n            // and now since min heap has more elements, the top of min heap would be the median.\\n            else{\\n                min_heap.push(num);\\n                median = (double)min_heap.top();\\n            }\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        return median;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 343226,
                "title": "python-simple-solutions",
                "content": "Insertion Sort using binary search\\n```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.nums = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if not self.nums:\\n            self.nums.append(num)\\n            return \\n        l = 0\\n        r = len(self.nums)-1\\n        while l < r:\\n            m = (l+r)//2\\n            if self.nums[m] == num:\\n                self.nums.insert(m,num)\\n                return \\n            elif self.nums[m] < num:\\n                l = m+1\\n            else:\\n                r = m-1      \\n        if self.nums[l] < num:\\n            self.nums.insert(l+1,num)\\n        else:\\n            self.nums.insert(l,num)\\n\\n    def findMedian(self) -> float:\\n        mid = (0 + len(self.nums)-1 )//2\\n        if (len(self.nums)-1) & 1:\\n            return (self.nums[mid] + self.nums[mid+1])/2\\n        else:\\n            return self.nums[mid]\\n```\\nTwo Heaps\\uFF1A\\nThe length of smaller half is kept to be n / 2 at all time and the length of the larger half is either n / 2 or n / 2 + 1 depend on n\\'s parity.\\n```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        import heapq\\n        self.small = [] # maxheap\\n        self.large = [] # minheap\\n        \\n    def addNum(self, num: int) -> None:\\n        if len(self.small) == len(self.large):\\n            heapq.heappush(self.small,-num)\\n            tmp = heapq.heappop(self.small)\\n            heapq.heappush(self.large,-tmp)\\n        else:\\n            heapq.heappush(self.large,num)\\n            tmp = heapq.heappop(self.large)\\n            heapq.heappush(self.small,-tmp)\\n                \\n                \\n    def findMedian(self) -> float:\\n        if len(self.small) == len(self.large):\\n            return (-self.small[0] + self.large[0])/2\\n        else:\\n            return self.large[0]\\n```",
                "solutionTags": [
                    "Python3",
                    "Binary Search",
                    "Heap (Priority Queue)"
                ],
                "code": "```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.nums = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if not self.nums:\\n            self.nums.append(num)\\n            return \\n        l = 0\\n        r = len(self.nums)-1\\n        while l < r:\\n            m = (l+r)//2\\n            if self.nums[m] == num:\\n                self.nums.insert(m,num)\\n                return \\n            elif self.nums[m] < num:\\n                l = m+1\\n            else:\\n                r = m-1      \\n        if self.nums[l] < num:\\n            self.nums.insert(l+1,num)\\n        else:\\n            self.nums.insert(l,num)\\n\\n    def findMedian(self) -> float:\\n        mid = (0 + len(self.nums)-1 )//2\\n        if (len(self.nums)-1) & 1:\\n            return (self.nums[mid] + self.nums[mid+1])/2\\n        else:\\n            return self.nums[mid]\\n```\n```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        import heapq\\n        self.small = [] # maxheap\\n        self.large = [] # minheap\\n        \\n    def addNum(self, num: int) -> None:\\n        if len(self.small) == len(self.large):\\n            heapq.heappush(self.small,-num)\\n            tmp = heapq.heappop(self.small)\\n            heapq.heappush(self.large,-tmp)\\n        else:\\n            heapq.heappush(self.large,num)\\n            tmp = heapq.heappop(self.large)\\n            heapq.heappush(self.small,-tmp)\\n                \\n                \\n    def findMedian(self) -> float:\\n        if len(self.small) == len(self.large):\\n            return (-self.small[0] + self.large[0])/2\\n        else:\\n            return self.large[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 313652,
                "title": "javascript-o-log-n-o-1-binarysearch-minheap",
                "content": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.arr = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    const bs = n => {\\n        let start = 0;\\n        let end = this.arr.length;\\n        while (start < end){\\n            let mid = Math.floor((start+end)/2);\\n            if (n > this.arr[mid]) start = mid+1;\\n            else end = mid;\\n        }\\n        this.arr.splice(start,0,n);\\n    }\\n    if (this.arr.length === 0) this.arr.push(num);\\n    else bs(num);\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    const mid = Math.floor(this.arr.length/2);\\n    return (this.arr.length%2===0) ? (this.arr[mid-1]+this.arr[mid])/2 : this.arr[mid];\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.arr = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    const bs = n => {\\n        let start = 0;\\n        let end = this.arr.length;\\n        while (start < end){\\n            let mid = Math.floor((start+end)/2);\\n            if (n > this.arr[mid]) start = mid+1;\\n            else end = mid;\\n        }\\n        this.arr.splice(start,0,n);\\n    }\\n    if (this.arr.length === 0) this.arr.push(num);\\n    else bs(num);\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    const mid = Math.floor(this.arr.length/2);\\n    return (this.arr.length%2===0) ? (this.arr[mid-1]+this.arr[mid])/2 : this.arr[mid];\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 74117,
                "title": "python-solution-using-binary-search",
                "content": "    class MedianFinder:\\n        def __init__(self):\\n            \"\"\"\\n            Initialize your data structure here.\\n            \"\"\"\\n            self.ref_array = []\\n            self.length = 0\\n            \\n        def addNum(self, num):\\n            \"\"\"\\n            Adds a num into the data structure.\\n            :type num: int\\n            :rtype: void\\n            \"\"\"\\n            # keep a sorted array\\n            # use binary search to find insertion index\\n            \\n            low = 0\\n            high = self.length - 1\\n            \\n            while low <= high:\\n                mid = (low+high)//2\\n                if self.ref_array[mid] >= num:\\n                    high = mid - 1\\n                else:\\n                    low = mid + 1\\n                    \\n            self.ref_array.insert(low,num)\\n            self.length += 1\\n                \\n    \\n        def findMedian(self):\\n            \"\"\"\\n            Returns the median of current data stream\\n            :rtype: float\\n            \"\"\"\\n            # as array is always sorted we can always use the same median property\\n            \\n            if self.length % 2 == 0:\\n                temp = self.length // 2\\n                return (self.ref_array[temp]+self.ref_array[temp-1])/2.0\\n            else:\\n                return self.ref_array[self.length // 2]",
                "solutionTags": [
                    "Python",
                    "Binary Tree"
                ],
                "code": "    class MedianFinder:\\n        def __init__(self):\\n            \"\"\"\\n            Initialize your data structure here.\\n            \"\"\"\\n            self.ref_array = []\\n            self.length = 0\\n            \\n        def addNum(self, num):\\n            \"\"\"\\n            Adds a num into the data structure.\\n            :type num: int\\n            :rtype: void\\n            \"\"\"\\n            # keep a sorted array\\n            # use binary search to find insertion index\\n            \\n            low = 0\\n            high = self.length - 1\\n            \\n            while low <= high:\\n                mid = (low+high)//2\\n                if self.ref_array[mid] >= num:\\n                    high = mid - 1\\n                else:\\n                    low = mid + 1\\n                    \\n            self.ref_array.insert(low,num)\\n            self.length += 1\\n                \\n    \\n        def findMedian(self):\\n            \"\"\"\\n            Returns the median of current data stream\\n            :rtype: float\\n            \"\"\"\\n            # as array is always sorted we can always use the same median property\\n            \\n            if self.length % 2 == 0:\\n                temp = self.length // 2\\n                return (self.ref_array[temp]+self.ref_array[temp-1])/2.0\\n            else:\\n                return self.ref_array[self.length // 2]",
                "codeTag": "Java"
            },
            {
                "id": 74071,
                "title": "22ms-java-solution-using-binary-tree-beats-99-82-of-submissions",
                "content": "**Some notes:** This solution uses an ordinary binary tree for simplicity's sake, which means it is likely to be unbalanced. Given enough time one may well use a balanced binary tree implementation to guarantee ```O(logn)``` runtime for ```addNum()```.  It is easy to see that ```findMedian()``` runs in ```O(1)```.\\n\\nBy using a binary tree, we can easily keep the input numbers in nondecreasing order. Observe that whenever a number is added, the numbers used to calculate the median never shift by more than 1 position (in an imagined array representation) to the left or to the right. Let's see an example:\\n```[2]```, number used to calculate median is ```2```.\\n```[2,3]```, numbers used are ```2,3``` (expanding 1 to right)\\n```[0,2,3]```, use ```2``` (shrinking 1 to left)\\n```[0,1,2,3]```, use ```1,2``` (expanding 1 to left)\\n```[0,1,2,3,4]```, use ```2``` (shrinking 1 to right)\\n....and so on.\\n\\nWith this observation, in ```MedianFinder``` I employ 2 variables ```medianLeft``` and ```medianRight``` to keep track of numbers we need to calculate the median. When ```size``` is odd, they point to the same node, otherwise they always point to 2 nodes which have predecessor/successor relationship. When adding a node, we just need to check the size of our ```MedianFinder``` tree, then depending on whether the new number is inserted to the left, inbetween, or to the right of our 2 median trackers, we will change ```medianLeft``` and ```medianRight``` to point to the correct nodes. Because the position never shifts more than 1, we can simply use ```predecessor()``` or ```successor()``` on the desired node to update it. Those 2 methods run in ```O(logn)``` when the tree is balanced, hence the ```O(logn)``` runtime of ```addNum()```.\\n\\nHope this helps!\\n\\n```\\npublic class MedianFinder {\\n    private Node root;\\n    private Node medianLeft;\\n    private Node medianRight;\\n    private int size;\\n    \\n    public MedianFinder() {\\n    }\\n\\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        if (root == null) {\\n            root = new Node(num);\\n            medianLeft = root;\\n            medianRight = root;\\n        }\\n        else {\\n            root.addNode(num);\\n            if (size % 2 == 0) {\\n                if (num < medianLeft.data) {\\n                    medianRight = medianLeft;\\n                }\\n                else if (medianLeft.data <= num && num < medianRight.data) {\\n                    medianLeft = medianLeft.successor();\\n                    medianRight = medianRight.predecessor();\\n                }\\n                else if (medianRight.data <= num) {\\n                    medianLeft = medianRight;\\n                }\\n            }\\n            else {\\n                if (num < medianLeft.data) {\\n                    medianLeft = medianLeft.predecessor();\\n                }\\n                else {\\n                    medianRight = medianRight.successor();\\n                }\\n            }\\n        }\\n        size++;\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        return (medianLeft.data + medianRight.data) / 2.0;\\n    }\\n    \\n    class Node {\\n        private Node parent;\\n        private Node left;\\n        private Node right;\\n        private int data;\\n        \\n        public Node(int data) {\\n            this.data = data;\\n        }\\n        \\n        public void addNode(int data) {\\n            if (data >= this.data) {\\n              if (right == null) {\\n                right = new Node(data);\\n                right.parent = this;\\n              }\\n              else\\n                right.addNode(data);\\n            }\\n            else {\\n              if (left == null) {\\n                left = new Node(data);\\n                left.parent = this;\\n              }\\n              else\\n                left.addNode(data);\\n            }\\n        }\\n        \\n        public Node predecessor() {\\n            if (left != null)\\n                return left.rightMost();\\n            \\n            Node predecessor = parent;\\n            Node child = this;\\n            \\n            while (predecessor != null && child != predecessor.right) {\\n                child = predecessor;\\n                predecessor = predecessor.parent;\\n            }\\n            \\n            return predecessor;\\n        }\\n        \\n        public Node successor() {\\n            if (right != null)\\n                return right.leftMost();\\n            \\n            Node successor = parent;\\n            Node child = this;\\n            \\n            while (successor != null && child != successor.left) {\\n                child = successor;\\n                successor = successor.parent;\\n            }\\n            \\n            return successor;\\n        }\\n        \\n        public Node leftMost(){\\n            if (left == null)\\n                return this;\\n            return left.leftMost();\\n        }\\n        \\n        private Node rightMost() {\\n            if (right == null)\\n                return this;\\n            return right.rightMost();\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```O(logn)```\n```addNum()```\n```findMedian()```\n```O(1)```\n```[2]```\n```2```\n```[2,3]```\n```2,3```\n```[0,2,3]```\n```2```\n```[0,1,2,3]```\n```1,2```\n```[0,1,2,3,4]```\n```2```\n```MedianFinder```\n```medianLeft```\n```medianRight```\n```size```\n```MedianFinder```\n```medianLeft```\n```medianRight```\n```predecessor()```\n```successor()```\n```O(logn)```\n```O(logn)```\n```addNum()```\n```\\npublic class MedianFinder {\\n    private Node root;\\n    private Node medianLeft;\\n    private Node medianRight;\\n    private int size;\\n    \\n    public MedianFinder() {\\n    }\\n\\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        if (root == null) {\\n            root = new Node(num);\\n            medianLeft = root;\\n            medianRight = root;\\n        }\\n        else {\\n            root.addNode(num);\\n            if (size % 2 == 0) {\\n                if (num < medianLeft.data) {\\n                    medianRight = medianLeft;\\n                }\\n                else if (medianLeft.data <= num && num < medianRight.data) {\\n                    medianLeft = medianLeft.successor();\\n                    medianRight = medianRight.predecessor();\\n                }\\n                else if (medianRight.data <= num) {\\n                    medianLeft = medianRight;\\n                }\\n            }\\n            else {\\n                if (num < medianLeft.data) {\\n                    medianLeft = medianLeft.predecessor();\\n                }\\n                else {\\n                    medianRight = medianRight.successor();\\n                }\\n            }\\n        }\\n        size++;\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        return (medianLeft.data + medianRight.data) / 2.0;\\n    }\\n    \\n    class Node {\\n        private Node parent;\\n        private Node left;\\n        private Node right;\\n        private int data;\\n        \\n        public Node(int data) {\\n            this.data = data;\\n        }\\n        \\n        public void addNode(int data) {\\n            if (data >= this.data) {\\n              if (right == null) {\\n                right = new Node(data);\\n                right.parent = this;\\n              }\\n              else\\n                right.addNode(data);\\n            }\\n            else {\\n              if (left == null) {\\n                left = new Node(data);\\n                left.parent = this;\\n              }\\n              else\\n                left.addNode(data);\\n            }\\n        }\\n        \\n        public Node predecessor() {\\n            if (left != null)\\n                return left.rightMost();\\n            \\n            Node predecessor = parent;\\n            Node child = this;\\n            \\n            while (predecessor != null && child != predecessor.right) {\\n                child = predecessor;\\n                predecessor = predecessor.parent;\\n            }\\n            \\n            return predecessor;\\n        }\\n        \\n        public Node successor() {\\n            if (right != null)\\n                return right.leftMost();\\n            \\n            Node successor = parent;\\n            Node child = this;\\n            \\n            while (successor != null && child != successor.left) {\\n                child = successor;\\n                successor = successor.parent;\\n            }\\n            \\n            return successor;\\n        }\\n        \\n        public Node leftMost(){\\n            if (left == null)\\n                return this;\\n            return left.leftMost();\\n        }\\n        \\n        private Node rightMost() {\\n            if (right == null)\\n                return this;\\n            return right.rightMost();\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939433,
                "title": "putta-easy-solution-c-beats-85",
                "content": "\\n# Code\\n```\\nclass MedianFinder {\\npublic:\\n        priority_queue<double> maxheap;\\n        priority_queue<double,vector<double> ,greater<double>> minheap;\\n    MedianFinder() {\\n\\n    }\\n    \\n    void addNum(int num) {\\n        maxheap.push(num);\\n        if(!maxheap.empty() && !minheap.empty() && maxheap.top() > minheap.top()){\\n            double temp = maxheap.top();\\n            maxheap.pop();\\n            minheap.push(temp);\\n        }\\n       if( maxheap.size() > minheap.size() + 1){\\n            double temp = maxheap.top();\\n            maxheap.pop();\\n            minheap.push(temp);\\n        }\\n\\n        if( minheap.size() > maxheap.size()+1){\\n            double temp = minheap.top();\\n            minheap.pop();\\n            maxheap.push(temp);\\n        }\\n    } \\n    \\n    double findMedian() {\\n        if( maxheap.size() > minheap.size()) return maxheap.top();\\n        if( minheap.size() > maxheap.size()) return minheap.top();\\n        return (maxheap.top() + minheap.top())/2;\\n\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Design",
                    "Sorting",
                    "Heap (Priority Queue)",
                    "Data Stream"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n        priority_queue<double> maxheap;\\n        priority_queue<double,vector<double> ,greater<double>> minheap;\\n    MedianFinder() {\\n\\n    }\\n    \\n    void addNum(int num) {\\n        maxheap.push(num);\\n        if(!maxheap.empty() && !minheap.empty() && maxheap.top() > minheap.top()){\\n            double temp = maxheap.top();\\n            maxheap.pop();\\n            minheap.push(temp);\\n        }\\n       if( maxheap.size() > minheap.size() + 1){\\n            double temp = maxheap.top();\\n            maxheap.pop();\\n            minheap.push(temp);\\n        }\\n\\n        if( minheap.size() > maxheap.size()+1){\\n            double temp = minheap.top();\\n            minheap.pop();\\n            maxheap.push(temp);\\n        }\\n    } \\n    \\n    double findMedian() {\\n        if( maxheap.size() > minheap.size()) return maxheap.top();\\n        if( minheap.size() > maxheap.size()) return minheap.top();\\n        return (maxheap.top() + minheap.top())/2;\\n\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2806245,
                "title": "c-min-and-max-heap-fast-283ms-100",
                "content": "# Approach 1: min heap and max heap (283ms, 100%?)\\n\\nThis approach uses a min and a max heap to keep track of the elements that are above and below the median and we rebalance them to keep them the same size. Strictly speaking we maintain the following invariant: **The \"above\" heap is the same size as the \"below\" heap or one bigger.**\\n\\n```cpp\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int, vector<int>, greater<int>> above_;\\n    priority_queue<int> below_;\\n\\npublic:\\n    MedianFinder() = default;\\n    \\n    void addNum(int num) {\\n        if (empty(above_) || num >= above_.top()) {\\n            above_.push(num);\\n            if (size(above_) > size(below_) + 1) {\\n                below_.push(above_.top());\\n                above_.pop();\\n            }\\n        } else {\\n            below_.push(num);\\n            if (size(below_) > size(above_)) {\\n                above_.push(below_.top());\\n                below_.pop();\\n            }\\n        }\\n    }\\n    \\n    double findMedian() const {\\n        if (size(below_) == size(above_))\\n            return 0.5 * (below_.top() + above_.top());\\n        \\n        return above_.top();\\n    }\\n};\\n```\\n\\nTo speed up IO, I always add a line like the following to my code:\\n\\n```cpp\\nstatic int fast_io = []() { std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\n```\\n\\n**Complexity Analysis**\\n  * Time Complexity: $$O(n \\\\log n)$$ for the push and pop operations on the heaps.\\n  * Space Complexity: $$O(n)$$ for the two heaps\\n\\n_As always: Feedback, questions, and comments are welcome. Leaving an up-vote sparks joy! :)_\\n\\n**p.s. Join us on the [LeetCode The Hard Way Discord Server](https://discord.gg/hFUyVyWy2E)!**\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```cpp\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int, vector<int>, greater<int>> above_;\\n    priority_queue<int> below_;\\n\\npublic:\\n    MedianFinder() = default;\\n    \\n    void addNum(int num) {\\n        if (empty(above_) || num >= above_.top()) {\\n            above_.push(num);\\n            if (size(above_) > size(below_) + 1) {\\n                below_.push(above_.top());\\n                above_.pop();\\n            }\\n        } else {\\n            below_.push(num);\\n            if (size(below_) > size(above_)) {\\n                above_.push(below_.top());\\n                below_.pop();\\n            }\\n        }\\n    }\\n    \\n    double findMedian() const {\\n        if (size(below_) == size(above_))\\n            return 0.5 * (below_.top() + above_.top());\\n        \\n        return above_.top();\\n    }\\n};\\n```\n```cpp\\nstatic int fast_io = []() { std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2805119,
                "title": "two-heaps-with-the-follow-up-s-solution",
                "content": "[Leetcode](https://leetcode.com/) [295. Find Median from Data Stream](https://leetcode.com/problems/find-median-from-data-stream/).\\n\\n\\n# Intuition\\n\\nWe can simply use a $\\\\texttt{ArrayList}$ to record the number and **sort** the list, then we can easily get the **median** element of the list. However, the **Time Complexity** will be $O(n^2logn)$ and the **Space Complexity** is $O(n)$. \\n\\nIt surely will be **TLE** and we have to find a better solution.\\n\\n\\n# Heap\\n\\nWe can use Two **Priority Queues** (Heaps) to maintain the data of the entire data stream. \\n\\nThe **min Heap** denoted as $\\\\textit{queueMin}$ is used to maintain the number $\\\\textit{num} \\\\leq \\\\textit{median}$. The **max Heap** denoted as $\\\\textit{queueMax}$ is used to maintain the number $\\\\textit{num} \\\\gt \\\\textit{median}$.\\n\\n- When the total number of data stream elements is **Even**: $\\\\texttt{queueMax.size()} = \\\\texttt{queueMin.size()}$, the dynamic median is $\\\\frac{\\\\texttt{queueMax.peek()} + \\\\texttt{queueMin.peek()}}{2}$;\\n\\n- When the total number of data stream elements is **Odd**: $\\\\texttt{queueMin.size()} = \\\\texttt{queueMin.size()} + 1$, the dynamic median is $\\\\texttt{queueMin.peek()}$.\\n\\nWhen we try to add a new number $\\\\textit{num}$ to the **Two Heaps**, the cases can be as follows:\\n\\n- $\\\\textit{num} \\\\leq \\\\max \\\\{\\\\textit{queMin}\\\\}$\\n\\nWe need to add this number to $\\\\textit{queueMin}$. The new median will be less than or equal to the original median, so we may need to move the $\\\\texttt{queueMin.peek()}$ to $\\\\textit{queueMax}$.\\n\\n- $\\\\textit{num} \\\\gt \\\\max \\\\{\\\\textit{queMin}\\\\}$\\n\\nWe need to add this number to $\\\\textit{queueMax}$. The new median will be greater than or equal to the original median, so we may need to move the $\\\\texttt{queueMax.peek()}$ to $\\\\textit{queueMin}$.\\n\\n\\n```java\\n    static class MedianFinder {\\n        PriorityQueue<Integer> queueMin;\\n        PriorityQueue<Integer> queueMax;\\n\\n        public MedianFinder() {\\n            queueMin = new PriorityQueue<>((a, b) -> b - a);\\n            queueMax = new PriorityQueue<>(((a, b) -> a - b));\\n        }\\n\\n        public void addNum(int num) {\\n            if (queueMin.isEmpty() || num <= queueMin.peek()) {\\n                queueMin.offer(num);\\n\\n                if (queueMax.size() + 1 < queueMin.size()) {\\n                    queueMax.offer(queueMin.poll());\\n                }\\n            } else {\\n                queueMax.offer(num);\\n\\n                if (queueMin.size() < queueMax.size()) {\\n                    queueMin.offer(queueMax.poll());\\n                }\\n            }\\n        }\\n\\n        public double findMedian() {\\n            if (queueMin.size() > queueMax.size()) {\\n                return queueMin.peek();\\n            }\\n\\n            return (queueMin.peek() + queueMax.peek()) / 2.0;\\n        }\\n    }\\n```\\n\\n## Analysis\\n\\n- **Time Complexity**: $O(nlogn)$\\n- **Space Complexity**: $O(n)$\\n\\n\\n# Follow Ups\\n\\n#### If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\n\\n- We can use a bucket with a length of $101$. Each bucket stores the number of occurrences of each number, and records the total number of elements in the data stream. When searching for the median, calculate the number of the median, and then scan all buckets from front to back to get the answer.\\n\\n#### If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?\\n\\n- As last question, we can still use buckets to store the data. Then use **Two Pointers** to maintain the median. For the number out of range, we can use two arrays to record the number which less than $0$ or greater than $100$. If the median is not in $[0, 100]$, we can perform brute force to find it.\\n\\n------------\\n\\nAll suggestions are welcome. \\nIf you have any query or suggestion please comment below.\\nPlease upvote\\uD83D\\uDC4D if you like\\uD83D\\uDC97 it. Thank you:-)\\n\\nExplore More [Leetcode Solutions](https://leetcode.com/discuss/general-discussion/1868912/My-Leetcode-Solutions-All-In-One). \\uD83D\\uDE09\\uD83D\\uDE03\\uD83D\\uDC97\\n\\n",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Sorting",
                    "Heap (Priority Queue)",
                    "Data Stream"
                ],
                "code": "```java\\n    static class MedianFinder {\\n        PriorityQueue<Integer> queueMin;\\n        PriorityQueue<Integer> queueMax;\\n\\n        public MedianFinder() {\\n            queueMin = new PriorityQueue<>((a, b) -> b - a);\\n            queueMax = new PriorityQueue<>(((a, b) -> a - b));\\n        }\\n\\n        public void addNum(int num) {\\n            if (queueMin.isEmpty() || num <= queueMin.peek()) {\\n                queueMin.offer(num);\\n\\n                if (queueMax.size() + 1 < queueMin.size()) {\\n                    queueMax.offer(queueMin.poll());\\n                }\\n            } else {\\n                queueMax.offer(num);\\n\\n                if (queueMin.size() < queueMax.size()) {\\n                    queueMin.offer(queueMax.poll());\\n                }\\n            }\\n        }\\n\\n        public double findMedian() {\\n            if (queueMin.size() > queueMax.size()) {\\n                return queueMin.peek();\\n            }\\n\\n            return (queueMin.peek() + queueMax.peek()) / 2.0;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1566734,
                "title": "javascript-using-datastrucutres-js-priority-queue-min-and-max",
                "content": "LeetCode provides the JavaScript environment with 2 packages from NPM to assist with data structures, `datastructures-js/priority-queue` and `datastructures-js/queue`.\\n\\nhttps://support.leetcode.com/hc/en-us/articles/360011833974-What-are-the-environments-for-the-programming-languages-\\n\\nthe API for `priority-queue` is intuitive and well documented. (the only thing I found not well documented is that when you poll using `.dequeue()` or `.front()`, it returns an object with properties `priority` and `element`. in our use case, these values will both equal the element, but imagine that the element you put in was a linked list node, such as in #23 Merge k Sorted Lists - then your priority will be whatever you configure your PQ to use (in that case, ListNode().val), and element will be the ListNode. The imporant takeaway for this problem is to follow all calls `.dequeue()` or `.front()` with `.element`.)\\n\\nhttps://github.com/datastructures-js/priority-queue\\n\\nas for the algorithm itself, just check other top posts, it\\'s implemented the same with the 2 step addNum() process of insertion and balancing.\\n\\n```\\nvar MedianFinder = function() {\\n    // to find median in O(1) time, we will split all numbers coming in into\\n    // 2 Priority Queues - all input from lowest -> median will be stored in \\n    // max, and all input from median -> highest will be stored in min. this\\n    // means that the .front().element of min and max will be in the middle.\\n\\n    const max = new MaxPriorityQueue();\\n    const min = new MinPriorityQueue();\\n    \\n    return { addNum, findMedian }\\n    \\n    function addNum(num) {\\n        if (min.front() != null && num < min.front().element)\\n            max.enqueue(num)\\n        else\\n            min.enqueue(num)\\n        \\n        const diff = min.size() - max.size()\\n        if (diff > 1) \\n            max.enqueue(min.dequeue().element)\\n        if (diff < -1) \\n            min.enqueue(max.dequeue().element)\\n    }\\n    \\n    function findMedian() {\\n        const diff = min.size() - max.size()\\n        if (diff > 0)\\n            return min.front().element\\n        else if (diff < 0)\\n            return max.front().element\\n        else\\n            return (min.front().element + max.front().element)/2\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar MedianFinder = function() {\\n    // to find median in O(1) time, we will split all numbers coming in into\\n    // 2 Priority Queues - all input from lowest -> median will be stored in \\n    // max, and all input from median -> highest will be stored in min. this\\n    // means that the .front().element of min and max will be in the middle.\\n\\n    const max = new MaxPriorityQueue();\\n    const min = new MinPriorityQueue();\\n    \\n    return { addNum, findMedian }\\n    \\n    function addNum(num) {\\n        if (min.front() != null && num < min.front().element)\\n            max.enqueue(num)\\n        else\\n            min.enqueue(num)\\n        \\n        const diff = min.size() - max.size()\\n        if (diff > 1) \\n            max.enqueue(min.dequeue().element)\\n        if (diff < -1) \\n            min.enqueue(max.dequeue().element)\\n    }\\n    \\n    function findMedian() {\\n        const diff = min.size() - max.size()\\n        if (diff > 0)\\n            return min.front().element\\n        else if (diff < 0)\\n            return max.front().element\\n        else\\n            return (min.front().element + max.front().element)/2\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1404291,
                "title": "easy-java-solution-using-priority-queue-with-detailed-explanation",
                "content": "**Please Upvote if you liked the post**\\n\\n```\\nclass MedianFinder {\\n     PriorityQueue<Integer> left;\\n     PriorityQueue<Integer> right;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n         left = new PriorityQueue<>(Collections.reverseOrder()); //max priority Q\\n         right = new PriorityQueue<>(); //min priority Q\\n\\n    }\\n    \\n    public void addNum(int val) {\\n           if(right.size() > 0 && val > right.peek()){\\n            right.add(val);\\n          }else{\\n              left.add(val);\\n          }\\n            //balancing elements in both priority q logic\\n        \\n          if(right.size() - left.size() == 2){  //right has more elements\\n              left.add(right.remove());\\n          }else if(left.size() - right.size() == 2){\\n              right.add(left.remove());\\n          }\\n\\n    }\\n    \\n    public double findMedian() {\\n        if(left.size() == right.size()){\\n              return ((double)left.peek() + (double)right.peek()) / 2;\\n          }else if(left.size() > right.size()){\\n            return (double)left.peek();\\n        }else{                                //right.size() > left.size();\\n              return (double)right.peek();\\n          }\\n    }\\n}\\n\\n/**\\n We want that either size of left and right priority Q is same if yes then median is\\n (leftpeek + rightpeek) /2 because left priority Q stores max element and right\\n priorityQ stores min element , so these peeks contains 2 adjacent elements required\\n for even size median.\\n \\n if size is odd then one priority q will have extra element , one has n elements and other has n + 1 element , so median will be  from peek of  (n + 1 Size) priority Q\\'s.\\n \\n We don\\'t want difference of size more than one . so if difference of size becomes 2 we have to balance it , then only we can get our median.\\n */\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n     PriorityQueue<Integer> left;\\n     PriorityQueue<Integer> right;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n         left = new PriorityQueue<>(Collections.reverseOrder()); //max priority Q\\n         right = new PriorityQueue<>(); //min priority Q\\n\\n    }\\n    \\n    public void addNum(int val) {\\n           if(right.size() > 0 && val > right.peek()){\\n            right.add(val);\\n          }else{\\n              left.add(val);\\n          }\\n            //balancing elements in both priority q logic\\n        \\n          if(right.size() - left.size() == 2){  //right has more elements\\n              left.add(right.remove());\\n          }else if(left.size() - right.size() == 2){\\n              right.add(left.remove());\\n          }\\n\\n    }\\n    \\n    public double findMedian() {\\n        if(left.size() == right.size()){\\n              return ((double)left.peek() + (double)right.peek()) / 2;\\n          }else if(left.size() > right.size()){\\n            return (double)left.peek();\\n        }else{                                //right.size() > left.size();\\n              return (double)right.peek();\\n          }\\n    }\\n}\\n\\n/**\\n We want that either size of left and right priority Q is same if yes then median is\\n (leftpeek + rightpeek) /2 because left priority Q stores max element and right\\n priorityQ stores min element , so these peeks contains 2 adjacent elements required\\n for even size median.\\n \\n if size is odd then one priority q will have extra element , one has n elements and other has n + 1 element , so median will be  from peek of  (n + 1 Size) priority Q\\'s.\\n \\n We don\\'t want difference of size more than one . so if difference of size becomes 2 we have to balance it , then only we can get our median.\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1330925,
                "title": "find-median-from-data-stream-java-simple-solution-using-heaps-easy-to-understand",
                "content": "\\n```\\npublic class MedianFinder {\\n\\n    PriorityQueue<Integer> max;     //stores the first half of elements(as present in sorted array)\\n    PriorityQueue<Integer> min;     //stores the second half of elements\\n    public MedianFinder() {\\n        max = new PriorityQueue<>(Collections.reverseOrder());       //maxheap to store first half of elements\\n        min = new PriorityQueue<>();                                                     //minheap to store second half of elements\\n    }\\n    \\n    public void addNum(int num) {\\n        if(max.isEmpty() || num<max.peek()){\\n            max.add(num);       //if element lies in first half,i.e,if element is less than top of maxheap or if maxheap is empty, add to maxheap\\n        }else{\\n            min.add(num);       //else add to min heap\\n        }\\n        if(max.size()>(min.size()+1)){  //balance both heaps if difference of size greater than 1(max difference will be 2 in any case as it is balanced after adding every element)\\n            min.add(max.peek());max.poll();\\n        }else if(min.size()>(max.size()+1)){\\n            max.add(min.peek());min.poll();\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        //System.out.println(max.size()+ \" \"+ min.size());\\n        if(max.size()==min.size()) return (double)(max.peek()+min.peek())/2;\\n        else if(max.size()>min.size()) return max.peek();\\n        else return min.peek();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class MedianFinder {\\n\\n    PriorityQueue<Integer> max;     //stores the first half of elements(as present in sorted array)\\n    PriorityQueue<Integer> min;     //stores the second half of elements\\n    public MedianFinder() {\\n        max = new PriorityQueue<>(Collections.reverseOrder());       //maxheap to store first half of elements\\n        min = new PriorityQueue<>();                                                     //minheap to store second half of elements\\n    }\\n    \\n    public void addNum(int num) {\\n        if(max.isEmpty() || num<max.peek()){\\n            max.add(num);       //if element lies in first half,i.e,if element is less than top of maxheap or if maxheap is empty, add to maxheap\\n        }else{\\n            min.add(num);       //else add to min heap\\n        }\\n        if(max.size()>(min.size()+1)){  //balance both heaps if difference of size greater than 1(max difference will be 2 in any case as it is balanced after adding every element)\\n            min.add(max.peek());max.poll();\\n        }else if(min.size()>(max.size()+1)){\\n            max.add(min.peek());min.poll();\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        //System.out.println(max.size()+ \" \"+ min.size());\\n        if(max.size()==min.size()) return (double)(max.peek()+min.peek())/2;\\n        else if(max.size()>min.size()) return max.peek();\\n        else return min.peek();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1264541,
                "title": "c-version-two-heap-solution-of-dietpepsi",
                "content": "```\\nclass MedianFinder {\\npublic:\\n    \\n    priority_queue<int> small;\\n    priority_queue<int,vector<int>,greater<int>> large;\\n    bool even;\\n    MedianFinder() {\\n        even = true;\\n    }\\n    \\n    void addNum(int num) {\\n        if(even)\\n        {\\n            large.push(num);\\n            small.push(large.top());\\n            large.pop();\\n        }\\n        else\\n        {\\n            small.push(num);\\n            large.push(small.top());\\n            small.pop();\\n        }\\n        even=!even;\\n    }\\n    \\n    double findMedian() {\\n        if(even)\\n            return (small.top()+large.top())/2.0;\\n        else\\n            return small.top();\\n    }\\n};\\n```\\n\\nComment down for explanation if u have any query",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    \\n    priority_queue<int> small;\\n    priority_queue<int,vector<int>,greater<int>> large;\\n    bool even;\\n    MedianFinder() {\\n        even = true;\\n    }\\n    \\n    void addNum(int num) {\\n        if(even)\\n        {\\n            large.push(num);\\n            small.push(large.top());\\n            large.pop();\\n        }\\n        else\\n        {\\n            small.push(num);\\n            large.push(small.top());\\n            small.pop();\\n        }\\n        even=!even;\\n    }\\n    \\n    double findMedian() {\\n        if(even)\\n            return (small.top()+large.top())/2.0;\\n        else\\n            return small.top();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 329206,
                "title": "python-binary-search-tree-solution",
                "content": "Binary Search Tree implementation in python\\nInspired from https://leetcode.com/problems/find-median-from-data-stream/discuss/74166/Solution-using-Binary-Search-Tree \\n\\n```\\nclass Node:\\n    def __init__(self, val, size=1):\\n        self.val = val\\n        # size represents nodes below this\\n        self.size = size\\n        self.left = None\\n        self.right = None\\n\\nclass Tree:\\n\\n    def __init__(self):\\n        self.root = None\\n\\n    def add_node(self, val, root=None):\\n        # attach node after this node\\n        if not root:\\n            node = Node(val)\\n            # set tree root\\n            if not self.root:\\n                self.root = node\\n            return node\\n        if val <= root.val:\\n            root.left = self.add_node(val, root.left)\\n        else:\\n            root.right = self.add_node(val, root.right)\\n        size = 1\\n        if root.left:\\n            size += root.left.size\\n        if root.right:\\n            size += root.right.size\\n        root.size = size\\n        return root\\n\\n    def rank(self, k):\\n        \"\"\"\\n        Get k rank node\\n        \"\"\"\\n        temp = self.root\\n        while True:\\n            if not temp.left:\\n                left_size = 0 # handle when there is no left child\\n            else:\\n                left_size = temp.left.size\\n            if left_size == k:\\n                # Exactly k nodes in left subtree\\n                # Exactly k nodes smaller than this\\n                return temp.val\\n            if left_size > k:\\n                # Go left\\n                temp = temp.left\\n            else:\\n                # Go right\\n                # remaining number of elements which we have to look\\n                # = exclude left & root (left.size + 1)\\n                k = k - left_size - 1\\n                temp = temp.right\\n        return -1\\n\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.bst = Tree()\\n        \\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        self.bst.add_node(num, self.bst.root)\\n\\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        size = self.bst.root.size\\n        mid = size / 2\\n        if size % 2 == 0:\\n            return (self.bst.rank(mid-1) + self.bst.rank(mid))/ 2.0\\n        else:\\n            return float(self.bst.rank(mid))\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Binary Search Tree"
                ],
                "code": "```\\nclass Node:\\n    def __init__(self, val, size=1):\\n        self.val = val\\n        # size represents nodes below this\\n        self.size = size\\n        self.left = None\\n        self.right = None\\n\\nclass Tree:\\n\\n    def __init__(self):\\n        self.root = None\\n\\n    def add_node(self, val, root=None):\\n        # attach node after this node\\n        if not root:\\n            node = Node(val)\\n            # set tree root\\n            if not self.root:\\n                self.root = node\\n            return node\\n        if val <= root.val:\\n            root.left = self.add_node(val, root.left)\\n        else:\\n            root.right = self.add_node(val, root.right)\\n        size = 1\\n        if root.left:\\n            size += root.left.size\\n        if root.right:\\n            size += root.right.size\\n        root.size = size\\n        return root\\n\\n    def rank(self, k):\\n        \"\"\"\\n        Get k rank node\\n        \"\"\"\\n        temp = self.root\\n        while True:\\n            if not temp.left:\\n                left_size = 0 # handle when there is no left child\\n            else:\\n                left_size = temp.left.size\\n            if left_size == k:\\n                # Exactly k nodes in left subtree\\n                # Exactly k nodes smaller than this\\n                return temp.val\\n            if left_size > k:\\n                # Go left\\n                temp = temp.left\\n            else:\\n                # Go right\\n                # remaining number of elements which we have to look\\n                # = exclude left & root (left.size + 1)\\n                k = k - left_size - 1\\n                temp = temp.right\\n        return -1\\n\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        Initialize your data structure here.\\n        \"\"\"\\n        self.bst = Tree()\\n        \\n    def addNum(self, num):\\n        \"\"\"\\n        Adds a num into the data structure.\\n        :type num: int\\n        :rtype: void\\n        \"\"\"\\n        self.bst.add_node(num, self.bst.root)\\n\\n\\n    def findMedian(self):\\n        \"\"\"\\n        Returns the median of current data stream\\n        :rtype: float\\n        \"\"\"\\n        size = self.bst.root.size\\n        mid = size / 2\\n        if size % 2 == 0:\\n            return (self.bst.rank(mid-1) + self.bst.rank(mid))/ 2.0\\n        else:\\n            return float(self.bst.rank(mid))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 262636,
                "title": "binary-search-based-solution",
                "content": "```\\nclass MedianFinder {\\n    ArrayList<Integer> nums;\\n\\n    public int findInsertIndex(int target) {\\n        int low = 0;\\n        int high = nums.size() - 1;\\n\\n        while (low <= high) {\\n            int mid = (low + high) / 2;\\n\\n            if (nums.get(mid) >= target)\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * initialize your data structure here.\\n     */\\n    public MedianFinder() {\\n        nums = new ArrayList<>();\\n    }\\n\\n    public void addNum(int num) {\\n        if (nums.size() == 0) {\\n            nums.add(num);\\n        } else {\\n            int index = findInsertIndex(num);\\n            if (index == nums.size()) {\\n                nums.add(num);\\n            } else {\\n                nums.add(index, num);\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        int mid = (nums.size() - 1) / 2;\\n        return nums.size() % 2 == 0 ? (nums.get(mid) + nums.get(mid + 1)) / 2.0 : nums.get(mid);\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Binary Tree"
                ],
                "code": "```\\nclass MedianFinder {\\n    ArrayList<Integer> nums;\\n\\n    public int findInsertIndex(int target) {\\n        int low = 0;\\n        int high = nums.size() - 1;\\n\\n        while (low <= high) {\\n            int mid = (low + high) / 2;\\n\\n            if (nums.get(mid) >= target)\\n                high = mid - 1;\\n            else\\n                low = mid + 1;\\n        }\\n\\n        return low;\\n    }\\n\\n    /**\\n     * initialize your data structure here.\\n     */\\n    public MedianFinder() {\\n        nums = new ArrayList<>();\\n    }\\n\\n    public void addNum(int num) {\\n        if (nums.size() == 0) {\\n            nums.add(num);\\n        } else {\\n            int index = findInsertIndex(num);\\n            if (index == nums.size()) {\\n                nums.add(num);\\n            } else {\\n                nums.add(index, num);\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        int mid = (nums.size() - 1) / 2;\\n        return nums.size() % 2 == 0 ? (nums.get(mid) + nums.get(mid + 1)) / 2.0 : nums.get(mid);\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74065,
                "title": "c-solution-with-binarysearch",
                "content": "    private List<double> m_listNum = new List<double>();\\n    \\n    public void AddNum(double num) {\\n    \\n        int lintPos = m_listNum.BinarySearch( num ) ;\\n        if (lintPos >= 0) {\\n            m_listNum.Insert(lintPos, num);\\n        } else {\\n            lintPos = ~lintPos;\\n            if (lintPos == m_listNum.Count) {\\n                m_listNum.Add(num);\\n            } else {\\n                m_listNum.Insert(lintPos, num);\\n            }\\n        }\\n    }\\n    \\n    // return the median of current data stream\\n    \\n    public double FindMedian() {\\n    \\n        int lintCount = m_listNum.Count ;\\n    \\n        if (lintCount == 0 ) throw new Exception(\"array is empty\");\\n    \\n        if (lintCount % 2 == 0)\\n            return (m_listNum[lintCount / 2 - 1] + m_listNum[lintCount / 2]) / 2;\\n        else \\n            return m_listNum[lintCount / 2];\\n    }",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "    private List<double> m_listNum = new List<double>();\\n    \\n    public void AddNum(double num) {\\n    \\n        int lintPos = m_listNum.BinarySearch( num ) ;\\n        if (lintPos >= 0) {\\n            m_listNum.Insert(lintPos, num);\\n        } else {\\n            lintPos = ~lintPos;\\n            if (lintPos == m_listNum.Count) {\\n                m_listNum.Add(num);\\n            } else {\\n                m_listNum.Insert(lintPos, num);\\n            }\\n        }\\n    }\\n    \\n    // return the median of current data stream\\n    \\n    public double FindMedian() {\\n    \\n        int lintCount = m_listNum.Count ;\\n    \\n        if (lintCount == 0 ) throw new Exception(\"array is empty\");\\n    \\n        if (lintCount % 2 == 0)\\n            return (m_listNum[lintCount / 2 - 1] + m_listNum[lintCount / 2]) / 2;\\n        else \\n            return m_listNum[lintCount / 2];\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2805407,
                "title": "simple-ordered-set-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs we have to maintain sorted order and also have to  find the element in middle in at most Logn time.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFor maintaining values sorted and find element by index we have a direct **Data structure Ordered Set** but in we have to maintain a Ordered set that also contain duplicate value.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(Logn)$$ for every Add and Median operation \\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nTotal number of add elements = $$O(N)$$\\n# Code\\n```\\n\\n#include <ext/pb_ds/assoc_container.hpp> \\n#include <ext/pb_ds/tree_policy.hpp>\\nusing namespace __gnu_pbds;\\ntypedef tree<pair<int,int>, null_type, \\n        less<pair<int,int>>, rb_tree_tag,\\n        tree_order_statistics_node_update>\\n        ordered_set_pair;\\n  \\nclass MedianFinder {\\npublic:\\n    ordered_set_pair st;\\n    int a=0;\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        //insert pair to store duplicate value in Ordered Set\\n        st.insert({num,a++});\\n    }\\n   \\n    double findMedian() { \\n        int n=st.size();\\n        auto itr = st.find_by_order(n/2); \\n        double num= (*itr).first;\\n        if(n%2==0){\\n            auto itr2=st.find_by_order((n-1)/2);\\n            double num1=(*itr2).first;\\n            num=(num+num1)/2;\\n        }\\n        return num;\\n        \\n    }\\n};\\n\\n```\\n\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Ordered Set"
                ],
                "code": "```\\n\\n#include <ext/pb_ds/assoc_container.hpp> \\n#include <ext/pb_ds/tree_policy.hpp>\\nusing namespace __gnu_pbds;\\ntypedef tree<pair<int,int>, null_type, \\n        less<pair<int,int>>, rb_tree_tag,\\n        tree_order_statistics_node_update>\\n        ordered_set_pair;\\n  \\nclass MedianFinder {\\npublic:\\n    ordered_set_pair st;\\n    int a=0;\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        //insert pair to store duplicate value in Ordered Set\\n        st.insert({num,a++});\\n    }\\n   \\n    double findMedian() { \\n        int n=st.size();\\n        auto itr = st.find_by_order(n/2); \\n        double num= (*itr).first;\\n        if(n%2==0){\\n            auto itr2=st.find_by_order((n-1)/2);\\n            double num1=(*itr2).first;\\n            num=(num+num1)/2;\\n        }\\n        return num;\\n        \\n    }\\n};\\n\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2805329,
                "title": "c-heap-faster-easy-to-understand",
                "content": "* ***Using Heap***\\n\\n* ***Time Complexity :- O(logN) for both add and median function***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass MedianFinder {\\npublic:\\n    \\n    // smaller will contain half smaller elements\\n    \\n    priority_queue<int> smaller;\\n    \\n    // larger will contain half larger elements\\n    \\n    priority_queue<int, vector<int>, greater<int>> larger;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        \\n        // push the num into smaller\\n        \\n        smaller.push(num);\\n        \\n        // if largest element of smaller is greater than the smallest element of larger, then push the top of smaller into larger\\n        \\n        if(!smaller.empty() && !larger.empty() && smaller.top() > larger.top())\\n        {\\n            int val = smaller.top();\\n            \\n            smaller.pop();\\n            \\n            larger.push(val);\\n        }\\n        \\n        // if the size of smaller is greater than larger by 2 then push the top of smaller into larger\\n        \\n        if(smaller.size() > larger.size() + 1)\\n        {\\n            int val = smaller.top();\\n            \\n            smaller.pop();\\n            \\n            larger.push(val);\\n        }\\n        \\n        // if the size of larger is greater than smaller by 2 then push the top of larger into smaller\\n        \\n        else if(larger.size() > smaller.size() + 1)\\n        {\\n            int val = larger.top();\\n            \\n            larger.pop();\\n            \\n            smaller.push(val);\\n        }\\n    }\\n    \\n    double findMedian() {\\n        \\n        if(smaller.size() == larger.size())\\n        {\\n            return (double(smaller.top()) + double(larger.top())) / 2;\\n        }\\n        \\n        else if(smaller.size() == larger.size() + 1)\\n        {\\n            return double(smaller.top());\\n        }\\n        \\n        else\\n        {\\n            return double(larger.top());\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    \\n    // smaller will contain half smaller elements\\n    \\n    priority_queue<int> smaller;\\n    \\n    // larger will contain half larger elements\\n    \\n    priority_queue<int, vector<int>, greater<int>> larger;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        \\n        // push the num into smaller\\n        \\n        smaller.push(num);\\n        \\n        // if largest element of smaller is greater than the smallest element of larger, then push the top of smaller into larger\\n        \\n        if(!smaller.empty() && !larger.empty() && smaller.top() > larger.top())\\n        {\\n            int val = smaller.top();\\n            \\n            smaller.pop();\\n            \\n            larger.push(val);\\n        }\\n        \\n        // if the size of smaller is greater than larger by 2 then push the top of smaller into larger\\n        \\n        if(smaller.size() > larger.size() + 1)\\n        {\\n            int val = smaller.top();\\n            \\n            smaller.pop();\\n            \\n            larger.push(val);\\n        }\\n        \\n        // if the size of larger is greater than smaller by 2 then push the top of larger into smaller\\n        \\n        else if(larger.size() > smaller.size() + 1)\\n        {\\n            int val = larger.top();\\n            \\n            larger.pop();\\n            \\n            smaller.push(val);\\n        }\\n    }\\n    \\n    double findMedian() {\\n        \\n        if(smaller.size() == larger.size())\\n        {\\n            return (double(smaller.top()) + double(larger.top())) / 2;\\n        }\\n        \\n        else if(smaller.size() == larger.size() + 1)\\n        {\\n            return double(smaller.top());\\n        }\\n        \\n        else\\n        {\\n            return double(larger.top());\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1261677,
                "title": "c-normal-binary-search-approach",
                "content": "Binary Searrch to Find the Index where the num to be fitted.\\n```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {\\n        \\n    }\\n    vector<int> ans;\\n    void addNum(int n) {\\n        if(ans.size()==0) ans.push_back(n);\\n        \\n        else{\\n          int l=0, r=ans.size()-1;\\n            int mid;\\n            while(l<=r){\\n                mid=l+(r-l)/2;\\n                if(ans[mid]<n)l=mid+1;\\n                else{\\n                    r=mid-1;\\n                }\\n            }\\n            ans.insert(ans.begin()+l,n);\\n            \\n        }\\n    }\\n    \\n    double findMedian() {\\n         int n=ans.size();\\n       \\n        if(n%2){\\n            return  ans[n/2];\\n        }\\n        \\n        else{\\n            return double((ans[n/2]+ans[(n/2)-1])/2.00000);\\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {\\n        \\n    }\\n    vector<int> ans;\\n    void addNum(int n) {\\n        if(ans.size()==0) ans.push_back(n);\\n        \\n        else{\\n          int l=0, r=ans.size()-1;\\n            int mid;\\n            while(l<=r){\\n                mid=l+(r-l)/2;\\n                if(ans[mid]<n)l=mid+1;\\n                else{\\n                    r=mid-1;\\n                }\\n            }\\n            ans.insert(ans.begin()+l,n);\\n            \\n        }\\n    }\\n    \\n    double findMedian() {\\n         int n=ans.size();\\n       \\n        if(n%2){\\n            return  ans[n/2];\\n        }\\n        \\n        else{\\n            return double((ans[n/2]+ans[(n/2)-1])/2.00000);\\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 336231,
                "title": "c-using-minimum-heap-and-maximum-heap-practice-in-june-2017",
                "content": "July 15, 2019\\n295. Find Median from Data Stream\\n\\nIt is most challenging problem to solve since the optimal solution is to use two data structure, one is minimum heap, and the other one is maximum heap. I was asked to work on the algorithm in phone screen in March 2017. \\n\\nIt is time for me to review the algorithm again. \\n\\n**How to design minimum heap and maximum heap using C#?**\\n\\nUsing C# SortedSet, and also define Comparer. \\n\\n**One tip to make median calcuation easy**\\n\\nIt is a good idea to make minimum heap size is bigger than maximum heap size by 1 if total length is is odd. \\n\\n**Follow up** \\nOct. 23, 2020\\nI reviewed the code and asked myself why SortedSet is used with int[]. I thought about over 10 minutes. After that, I figured out the following reasons:\\n1. SortedSet do not allow duplicated numbers, so in order to store all numbers in the stream, it is better to make all of them unique. Add identity variable with increment one is a good idea.\\n2. C# SortedSet class, another example to use the class to define Heap is hard level algorithm. 358 rearrange string k distance apart. \\n\\n```\\npublic class MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        \\n    }\\n    \\n    private int counter = 0;\\n\\n        private SortedSet<int[]> setLow = new SortedSet<int[]>(\\n            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n\\n        private SortedSet<int[]> setHigh = new SortedSet<int[]>(\\n            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n            \\n    public void AddNum(int num) {\\n        var newNum = new int[2] { num, counter++ };\\n\\n            bool twoTreesSameSize = setLow.Count == setHigh.Count;          \\n\\n            if (twoTreesSameSize)\\n            {\\n                if (setLow.Count == 0 || newNum[0] <= setLow.Max[0])\\n                {\\n                    setLow.Add(newNum);\\n                }\\n                else\\n                {\\n                    setHigh.Add(newNum);\\n\\n                    // move the minimum number from setHigh to setLow. \\n                    setLow.Add(setHigh.Min);\\n                    setHigh.Remove(setHigh.Min);\\n                }\\n            }\\n            else if (newNum[0] <= setLow.Max[0])\\n            {\\n                setLow.Add(newNum);\\n\\n                // move the maximum number from setLow to setHigh\\n                setHigh.Add(setLow.Max);\\n                setLow.Remove(setLow.Max);\\n            }\\n            else\\n            {\\n                setHigh.Add(newNum);\\n            }\\n    }\\n    \\n    public double FindMedian() {\\n        if (setLow.Count == 0)\\n            {\\n                return 0;\\n            }\\n\\n            if (setLow.Count == setHigh.Count)\\n            {\\n                return (setLow.Max[0] + setHigh.Min[0]) / 2d;\\n            }\\n            else\\n            {\\n                return setLow.Max[0];\\n            }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.AddNum(num);\\n * double param_2 = obj.FindMedian();\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\npublic class MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        \\n    }\\n    \\n    private int counter = 0;\\n\\n        private SortedSet<int[]> setLow = new SortedSet<int[]>(\\n            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n\\n        private SortedSet<int[]> setHigh = new SortedSet<int[]>(\\n            Comparer<int[]>.Create((a, b) => a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]));\\n            \\n    public void AddNum(int num) {\\n        var newNum = new int[2] { num, counter++ };\\n\\n            bool twoTreesSameSize = setLow.Count == setHigh.Count;          \\n\\n            if (twoTreesSameSize)\\n            {\\n                if (setLow.Count == 0 || newNum[0] <= setLow.Max[0])\\n                {\\n                    setLow.Add(newNum);\\n                }\\n                else\\n                {\\n                    setHigh.Add(newNum);\\n\\n                    // move the minimum number from setHigh to setLow. \\n                    setLow.Add(setHigh.Min);\\n                    setHigh.Remove(setHigh.Min);\\n                }\\n            }\\n            else if (newNum[0] <= setLow.Max[0])\\n            {\\n                setLow.Add(newNum);\\n\\n                // move the maximum number from setLow to setHigh\\n                setHigh.Add(setLow.Max);\\n                setLow.Remove(setLow.Max);\\n            }\\n            else\\n            {\\n                setHigh.Add(newNum);\\n            }\\n    }\\n    \\n    public double FindMedian() {\\n        if (setLow.Count == 0)\\n            {\\n                return 0;\\n            }\\n\\n            if (setLow.Count == setHigh.Count)\\n            {\\n                return (setLow.Max[0] + setHigh.Min[0]) / 2d;\\n            }\\n            else\\n            {\\n                return setLow.Max[0];\\n            }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.AddNum(num);\\n * double param_2 = obj.FindMedian();\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 137721,
                "title": "java-impl-of-approach-4-multiset-and-two-pointers-from-solution",
                "content": "Plain Java have no multisets, so we have to use (sorted) TreeSet, Node structure and custom comparator. Methods multiSet.lower, multiSet.higher complete with log(N) time complexity (worse than C++ pointers inc/dec), but \"of two evils choose the least\".\\n\\n```\\n    class Node {\\n        int value;\\n        int count;\\n\\n        public Node(int value, int count) {\\n            this.value = value;\\n            this.count = count;\\n        }\\n\\n        @Override\\n        public boolean equals(Object o) {\\n            if (this == o) return true;\\n            if (o == null || getClass() != o.getClass()) return false;\\n            Node node = (Node) o;\\n            return value == node.value &&\\n                    count == node.count;\\n        }\\n\\n        @Override\\n        public int hashCode() {\\n            return Objects.hash(value, count);\\n        }\\n    }\\n\\n    final TreeSet<Node> multiSet;\\n    int count = 0;\\n    Node loMedian, hiMedian;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder3() {\\n        this.multiSet = new TreeSet<>((a, b) -> {\\n            if (a.value == b.value)\\n                return a.count - b.count;\\n            else\\n                return a.value - b.value;\\n        });\\n    }\\n\\n    public void addNum(int num) {\\n        int size = multiSet.size();\\n        Node n = new Node(num, count++);\\n        multiSet.add(n);\\n        if (size == 0) {\\n            loMedian = n;\\n            hiMedian = n;\\n        } else if (size % 2 != 0) {\\n            if (n.value < loMedian.value) {\\n                loMedian = multiSet.lower(loMedian);\\n            } else {\\n                hiMedian = multiSet.higher(hiMedian);\\n            }\\n        } else {\\n            if (n.value > loMedian.value && n.value < hiMedian.value) {\\n                loMedian = multiSet.higher(loMedian);\\n                hiMedian = multiSet.lower(hiMedian);\\n            } else if (n.value >= hiMedian.value) {\\n                loMedian = multiSet.higher(loMedian);\\n            } else {\\n                loMedian = hiMedian = multiSet.lower(hiMedian);\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (loMedian == null && hiMedian == null)\\n            return 0;\\n        else if (loMedian.value == hiMedian.value)\\n            return loMedian.value;\\n        else\\n           return (loMedian.value + hiMedian.value) * 0.5;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    class Node {\\n        int value;\\n        int count;\\n\\n        public Node(int value, int count) {\\n            this.value = value;\\n            this.count = count;\\n        }\\n\\n        @Override\\n        public boolean equals(Object o) {\\n            if (this == o) return true;\\n            if (o == null || getClass() != o.getClass()) return false;\\n            Node node = (Node) o;\\n            return value == node.value &&\\n                    count == node.count;\\n        }\\n\\n        @Override\\n        public int hashCode() {\\n            return Objects.hash(value, count);\\n        }\\n    }\\n\\n    final TreeSet<Node> multiSet;\\n    int count = 0;\\n    Node loMedian, hiMedian;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder3() {\\n        this.multiSet = new TreeSet<>((a, b) -> {\\n            if (a.value == b.value)\\n                return a.count - b.count;\\n            else\\n                return a.value - b.value;\\n        });\\n    }\\n\\n    public void addNum(int num) {\\n        int size = multiSet.size();\\n        Node n = new Node(num, count++);\\n        multiSet.add(n);\\n        if (size == 0) {\\n            loMedian = n;\\n            hiMedian = n;\\n        } else if (size % 2 != 0) {\\n            if (n.value < loMedian.value) {\\n                loMedian = multiSet.lower(loMedian);\\n            } else {\\n                hiMedian = multiSet.higher(hiMedian);\\n            }\\n        } else {\\n            if (n.value > loMedian.value && n.value < hiMedian.value) {\\n                loMedian = multiSet.higher(loMedian);\\n                hiMedian = multiSet.lower(hiMedian);\\n            } else if (n.value >= hiMedian.value) {\\n                loMedian = multiSet.higher(loMedian);\\n            } else {\\n                loMedian = hiMedian = multiSet.lower(hiMedian);\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (loMedian == null && hiMedian == null)\\n            return 0;\\n        else if (loMedian.value == hiMedian.value)\\n            return loMedian.value;\\n        else\\n           return (loMedian.value + hiMedian.value) * 0.5;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74134,
                "title": "both-o-log-n-red-black-tree-solution-in-python",
                "content": "Just want to give another way to solve this problem. \\n\\nUnlike other solutions using Heap, `Red-Black Tree` solution has `O(log(n))` time complexity for both `addNum` and `findMedian`.\\n\\nI also tried `Treap`, but always got TLE unfortunately.\\n\\n    class RedBlackTreeNode(object):\\n        def __init__(self, val):\\n            self.val = val\\n            self.left = None\\n            self.right = None\\n            self.size = 1\\n            self.isRed = True\\n    \\n    \\n    class RedBlackTree(object):\\n        def __init__(self):\\n            self.root = None\\n    \\n        def sizeOf(self, node):\\n            return node.size if node else 0\\n    \\n        @property\\n        def size(self):\\n            return self.sizeOf(self.root)\\n    \\n        def rotateLeft(self, root):\\n            right = root.right\\n    \\n            root.size, right.size = self.sizeOf(\\n                root.left) + self.sizeOf(right.left) + 1, root.size\\n    \\n            root.right = right.left\\n            right.left = root\\n    \\n            right.isRed = root.isRed\\n            root.isRed = True\\n    \\n            return right\\n    \\n        def rotateRight(self, root):\\n            left = root.left\\n    \\n            root.size, left.size = self.sizeOf(\\n                root.right) + self.sizeOf(left.right) + 1, root.size\\n    \\n            root.left = left.right\\n            left.right = root\\n    \\n            left.isRed = root.isRed\\n            root.isRed = True\\n    \\n            return left\\n    \\n        def flipColor(self, root):\\n            root.left.isRed = False\\n            root.right.isRed = False\\n            root.isRed = True\\n            return root\\n    \\n        def insertTo(self, root, val):\\n            if not root:\\n                return RedBlackTreeNode(val)\\n    \\n            if val > root.val:\\n                root.right = self.insertTo(root.right, val)\\n            else:\\n                root.left = self.insertTo(root.left, val)\\n    \\n            if (root.right and root.right.isRed) and not (\\n                    root.left and root.left.isRed):\\n                root = self.rotateLeft(root)\\n    \\n            if (root.left and root.left.isRed) and (\\n                    root.left.left and root.left.left.isRed):\\n                root = self.rotateRight(root)\\n    \\n            if (root.left and root.left.isRed) and (\\n                    root.right and root.right.isRed):\\n                root = self.flipColor(root)\\n    \\n            root.size = sum(map(self.sizeOf, (root.left, root.right))) + 1\\n            return root\\n    \\n        def insert(self, val):\\n            self.root = self.insertTo(self.root, val)\\n            self.root.isRed = False\\n    \\n        def searchK(self, k, root=None):\\n            root = root or self.root\\n    \\n            size = self.sizeOf(root.left) + 1\\n            if k == size:\\n                return root.val\\n    \\n            return self.searchK(k, root.left) if k < size else self.searchK(\\n                k - size, root.right)\\n    \\n    \\n    class MedianFinder(object):\\n        def __init__(self):\\n            self.tree = RedBlackTree()\\n    \\n        def addNum(self, num):\\n            self.tree.insert(num)\\n    \\n        def findMedian(self):\\n            size = self.tree.size\\n            if size & 1:\\n                return self.tree.searchK(size + 1 >> 1)\\n            return sum(map(self.tree.searchK, (size >> 1, size + 2 >> 1))) / 2.0",
                "solutionTags": [],
                "code": "Just want to give another way to solve this problem. \\n\\nUnlike other solutions using Heap, `Red-Black Tree` solution has `O(log(n))` time complexity for both `addNum` and `findMedian`.\\n\\nI also tried `Treap`, but always got TLE unfortunately.\\n\\n    class RedBlackTreeNode(object):\\n        def __init__(self, val):\\n            self.val = val\\n            self.left = None\\n            self.right = None\\n            self.size = 1\\n            self.isRed = True\\n    \\n    \\n    class RedBlackTree(object):\\n        def __init__(self):\\n            self.root = None\\n    \\n        def sizeOf(self, node):\\n            return node.size if node else 0\\n    \\n        @property\\n        def size(self):\\n            return self.sizeOf(self.root)\\n    \\n        def rotateLeft(self, root):\\n            right = root.right\\n    \\n            root.size, right.size = self.sizeOf(\\n                root.left) + self.sizeOf(right.left) + 1, root.size\\n    \\n            root.right = right.left\\n            right.left = root\\n    \\n            right.isRed = root.isRed\\n            root.isRed = True\\n    \\n            return right\\n    \\n        def rotateRight(self, root):\\n            left = root.left\\n    \\n            root.size, left.size = self.sizeOf(\\n                root.right) + self.sizeOf(left.right) + 1, root.size\\n    \\n            root.left = left.right\\n            left.right = root\\n    \\n            left.isRed = root.isRed\\n            root.isRed = True\\n    \\n            return left\\n    \\n        def flipColor(self, root):\\n            root.left.isRed = False\\n            root.right.isRed = False\\n            root.isRed = True\\n            return root\\n    \\n        def insertTo(self, root, val):\\n            if not root:\\n                return RedBlackTreeNode(val)\\n    \\n            if val > root.val:\\n                root.right = self.insertTo(root.right, val)\\n            else:\\n                root.left = self.insertTo(root.left, val)\\n    \\n            if (root.right and root.right.isRed) and not (\\n                    root.left and root.left.isRed):\\n                root = self.rotateLeft(root)\\n    \\n            if (root.left and root.left.isRed) and (\\n                    root.left.left and root.left.left.isRed):\\n                root = self.rotateRight(root)\\n    \\n            if (root.left and root.left.isRed) and (\\n                    root.right and root.right.isRed):\\n                root = self.flipColor(root)\\n    \\n            root.size = sum(map(self.sizeOf, (root.left, root.right))) + 1\\n            return root\\n    \\n        def insert(self, val):\\n            self.root = self.insertTo(self.root, val)\\n            self.root.isRed = False\\n    \\n        def searchK(self, k, root=None):\\n            root = root or self.root\\n    \\n            size = self.sizeOf(root.left) + 1\\n            if k == size:\\n                return root.val\\n    \\n            return self.searchK(k, root.left) if k < size else self.searchK(\\n                k - size, root.right)\\n    \\n    \\n    class MedianFinder(object):\\n        def __init__(self):\\n            self.tree = RedBlackTree()\\n    \\n        def addNum(self, num):\\n            self.tree.insert(num)\\n    \\n        def findMedian(self):\\n            size = self.tree.size\\n            if size & 1:\\n                return self.tree.searchK(size + 1 >> 1)\\n            return sum(map(self.tree.searchK, (size >> 1, size + 2 >> 1))) / 2.0",
                "codeTag": "Java"
            },
            {
                "id": 74135,
                "title": "simple-java-solution-with-2-heaps-and-explanation",
                "content": "        class MedianFinder {\\n        PriorityQueue<Integer> min = null;\\n        PriorityQueue<Integer> max = null;\\n        int len = 0;\\n        \\n        public MedianFinder(){\\n            min = new PriorityQueue<>();\\n            max = new PriorityQueue<>(Collections.reverseOrder());\\n        }\\n        \\n        //Understanding is we will be maintain 2 heaps max and min. The max heap will store the smaller half\\n        //and the min heap will store the larger half of the incoming numbers. Basically we are trying to mimic a \\n        //balanced tree with this model of representation, which means the max heap at the most can have only one extra\\n        //element than the min heap. We need to maintain the ordering that the root of the max heap < root of min heap\\n        \\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            //if the number of elements is even then we need to add the new element to the max heap\\n            if(len%2==0){\\n                max.offer(num);\\n            }else{\\n                //if the number of elements is odd then we need to add the new element to the maxheap\\n                //then transfer the root of the max heap to the min heap\\n                max.offer(num);\\n                min.offer(max.poll());\\n            }    \\n            \\n            //increment the size\\n            len++;\\n            \\n            //if the root of max heap > root of min heap, then it conficts our order rule\\n            //so we shift the max heap's root to min heap and add the minimum element of our\\n            //min heap to max heap\\n            if(len > 1 && max.peek() > min.peek()){\\n                min.offer(max.poll());\\n                max.offer(min.poll());\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            return (len%2==0)?((double)((max.peek()+min.peek())/2.0)):((double)max.peek());\\n        }\\n    }",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "        class MedianFinder {\\n        PriorityQueue<Integer> min = null;\\n        PriorityQueue<Integer> max = null;\\n        int len = 0;\\n        \\n        public MedianFinder(){\\n            min = new PriorityQueue<>();\\n            max = new PriorityQueue<>(Collections.reverseOrder());\\n        }\\n        \\n        //Understanding is we will be maintain 2 heaps max and min. The max heap will store the smaller half\\n        //and the min heap will store the larger half of the incoming numbers. Basically we are trying to mimic a \\n        //balanced tree with this model of representation, which means the max heap at the most can have only one extra\\n        //element than the min heap. We need to maintain the ordering that the root of the max heap < root of min heap\\n        \\n        // Adds a number into the data structure.\\n        public void addNum(int num) {\\n            //if the number of elements is even then we need to add the new element to the max heap\\n            if(len%2==0){\\n                max.offer(num);\\n            }else{\\n                //if the number of elements is odd then we need to add the new element to the maxheap\\n                //then transfer the root of the max heap to the min heap\\n                max.offer(num);\\n                min.offer(max.poll());\\n            }    \\n            \\n            //increment the size\\n            len++;\\n            \\n            //if the root of max heap > root of min heap, then it conficts our order rule\\n            //so we shift the max heap's root to min heap and add the minimum element of our\\n            //min heap to max heap\\n            if(len > 1 && max.peek() > min.peek()){\\n                min.offer(max.poll());\\n                max.offer(min.poll());\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        public double findMedian() {\\n            return (len%2==0)?((double)((max.peek()+min.peek())/2.0)):((double)max.peek());\\n        }\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 74111,
                "title": "it-seems-there-s-no-c-solution-share-mine-84-ms",
                "content": "I use max heap and min heap, O(logn) for addNum, O(1) for getMedium.\\n\\n\\n    #include <stdio.h>\\n    #include <stdlib.h>\\n    \\n    struct MedianFinder {\\n        int *maxHeap; /* store the smaller half */\\n        int *minHeap; /* store the larger half */\\n        int maxHeapCapacity;\\n        int minHeapCapacity;\\n        int maxHeapSize;\\n        int minHeapSize;\\n        double median;\\n    };\\n    \\n    void swap(int *a, int *b) {\\n        int c = *a;\\n        *a = *b;\\n        *b = c;\\n    }\\n    \\n    void addHeap(int **heap, int *size, int *capacity, int data) {\\n        if (*size == *capacity) {\\n            int newCapacity = (*capacity) * 2; /* resize */\\n            int *newHeap = (int *)malloc(newCapacity * sizeof(int));\\n            for (int i = 0; i < *capacity; i++) {\\n                newHeap[i] = (*heap)[i];\\n            }\\n            if (*heap)\\n                free(*heap);\\n            *heap = newHeap;\\n            *capacity = newCapacity;\\n        }\\n        (*heap)[*size] = data;\\n        (*size)++;\\n    }\\n    \\n    void siftUpMax(int *heap, int size) {\\n        int parent, child;\\n        child = size - 1;\\n        while (child > 0) {\\n            parent = (child - 1) / 2;\\n            if (heap[parent] < heap[child])\\n                swap(&heap[parent], &heap[child]);\\n            child = parent;\\n        }\\n    }\\n    \\n    void siftDownMax(int *heap, int size) {\\n        int parent, child;\\n        parent = 0; child = 1;\\n        while (child < size) {\\n            if (child + 1 < size && heap[child] < heap[child + 1])\\n                child = child + 1;\\n    \\n            if (heap[parent] >= heap[child]) break;\\n            swap(&heap[parent], &heap[child]);\\n            parent = child;\\n            child = parent * 2 + 1;\\n        }\\n    }\\n    \\n    void siftUpMin(int *heap, int size) {\\n        int parent, child;\\n        child = size - 1;\\n        while (child > 0) {\\n            parent = (child - 1) / 2;\\n            if (heap[parent] > heap[child])\\n                swap(&heap[parent], &heap[child]);\\n            child = parent;\\n        }\\n    }\\n    \\n    void siftDownMin(int *heap, int size) {\\n        int parent, child;\\n        parent = 0; child = 1;\\n        while (child < size) {\\n            if (child + 1 < size && heap[child] > heap[child + 1])\\n                child = child + 1;\\n    \\n            if (heap[parent] <= heap[child]) break;\\n            swap(&heap[parent], &heap[child]);\\n            parent = child;\\n            child = parent * 2 + 1;\\n        }\\n    }\\n    \\n    /** Initialize your data structure here. */\\n    struct MedianFinder* MedianFinderCreate() {\\n        struct MedianFinder *mf = (struct MedianFinder *)malloc(sizeof(struct MedianFinder));\\n        mf->maxHeap = (int *)malloc(sizeof(int));\\n        mf->minHeap = (int *)malloc(sizeof(int));\\n        mf->maxHeap[0] = mf->minHeap[0] = 0;\\n        mf->minHeapSize = mf->maxHeapSize = 0;\\n        mf->minHeapCapacity = mf->maxHeapCapacity = 1;\\n        mf->median = 0;\\n        return mf;\\n    }\\n    \\n    /** Inserts a num into the data structure. */\\n    void addNum(struct MedianFinder* mf, int num) {\\n        if (mf == NULL) return;\\n    \\n        if (mf->maxHeapSize == mf->minHeapSize) {\\n            if (num > mf->median) {\\n                addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, num);\\n                siftUpMin(mf->minHeap, mf->minHeapSize);\\n                mf->median = mf->minHeap[0];\\n            }\\n            else {\\n                addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, num);\\n                siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                mf->median = mf->maxHeap[0];\\n            }\\n        }\\n        else {\\n            if (num > mf->minHeap[0]) {\\n                addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, num);\\n                siftUpMin(mf->minHeap, mf->minHeapSize);\\n                if (mf->minHeapSize >= mf->maxHeapSize + 2) {\\n                    addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, mf->minHeap[0]);\\n                    siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                    swap(&mf->minHeap[0], &mf->minHeap[mf->minHeapSize - 1]);\\n                    mf->minHeapSize--;\\n                    siftDownMin(mf->minHeap, mf->minHeapSize);\\n                }\\n            }\\n            else {\\n                addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, num);\\n                siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                if (mf->maxHeapSize >= mf->minHeapSize + 2) {\\n                    addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, mf->maxHeap[0]);\\n                    siftUpMin(mf->minHeap, mf->minHeapSize);\\n                    swap(&mf->maxHeap[0], &mf->maxHeap[mf->maxHeapSize - 1]);\\n                    mf->maxHeapSize--;\\n                    siftDownMax(mf->maxHeap, mf->maxHeapSize);\\n                }\\n            }\\n            mf->median = mf->maxHeap[0] + (mf->minHeap[0] - mf->maxHeap[0]) / 2.0;\\n        }\\n    }\\n    \\n    /** find the median of current data stream */\\n    double findMedian(struct MedianFinder* mf) {\\n        if (mf == NULL) return 0;\\n        return mf->median;\\n    }\\n    \\n    /** Deallocates memory previously allocated for the data structure. */\\n    void MedianFinderFree(struct MedianFinder* mf) {\\n        if (mf == NULL) return;\\n        if (mf->maxHeap) free(mf->maxHeap);\\n        if (mf->minHeap) free(mf->minHeap);\\n        free(mf);\\n    }\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // struct MedianFinder* mf = MedianFinderCreate();\\n    // addNum(mf, 1.0);\\n    // findMedian(mf);\\n    // MedianFinderFree(mf);\\n    \\n    int main() {\\n        struct MedianFinder* mf = MedianFinderCreate();\\n    \\n        addNum(mf, 1);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 2);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 3);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 4);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 5);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 6);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 7);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 8);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 9);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 10);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n    \\n        MedianFinderFree(mf);\\n    \\n        return 0;\\n    }",
                "solutionTags": [],
                "code": "I use max heap and min heap, O(logn) for addNum, O(1) for getMedium.\\n\\n\\n    #include <stdio.h>\\n    #include <stdlib.h>\\n    \\n    struct MedianFinder {\\n        int *maxHeap; /* store the smaller half */\\n        int *minHeap; /* store the larger half */\\n        int maxHeapCapacity;\\n        int minHeapCapacity;\\n        int maxHeapSize;\\n        int minHeapSize;\\n        double median;\\n    };\\n    \\n    void swap(int *a, int *b) {\\n        int c = *a;\\n        *a = *b;\\n        *b = c;\\n    }\\n    \\n    void addHeap(int **heap, int *size, int *capacity, int data) {\\n        if (*size == *capacity) {\\n            int newCapacity = (*capacity) * 2; /* resize */\\n            int *newHeap = (int *)malloc(newCapacity * sizeof(int));\\n            for (int i = 0; i < *capacity; i++) {\\n                newHeap[i] = (*heap)[i];\\n            }\\n            if (*heap)\\n                free(*heap);\\n            *heap = newHeap;\\n            *capacity = newCapacity;\\n        }\\n        (*heap)[*size] = data;\\n        (*size)++;\\n    }\\n    \\n    void siftUpMax(int *heap, int size) {\\n        int parent, child;\\n        child = size - 1;\\n        while (child > 0) {\\n            parent = (child - 1) / 2;\\n            if (heap[parent] < heap[child])\\n                swap(&heap[parent], &heap[child]);\\n            child = parent;\\n        }\\n    }\\n    \\n    void siftDownMax(int *heap, int size) {\\n        int parent, child;\\n        parent = 0; child = 1;\\n        while (child < size) {\\n            if (child + 1 < size && heap[child] < heap[child + 1])\\n                child = child + 1;\\n    \\n            if (heap[parent] >= heap[child]) break;\\n            swap(&heap[parent], &heap[child]);\\n            parent = child;\\n            child = parent * 2 + 1;\\n        }\\n    }\\n    \\n    void siftUpMin(int *heap, int size) {\\n        int parent, child;\\n        child = size - 1;\\n        while (child > 0) {\\n            parent = (child - 1) / 2;\\n            if (heap[parent] > heap[child])\\n                swap(&heap[parent], &heap[child]);\\n            child = parent;\\n        }\\n    }\\n    \\n    void siftDownMin(int *heap, int size) {\\n        int parent, child;\\n        parent = 0; child = 1;\\n        while (child < size) {\\n            if (child + 1 < size && heap[child] > heap[child + 1])\\n                child = child + 1;\\n    \\n            if (heap[parent] <= heap[child]) break;\\n            swap(&heap[parent], &heap[child]);\\n            parent = child;\\n            child = parent * 2 + 1;\\n        }\\n    }\\n    \\n    /** Initialize your data structure here. */\\n    struct MedianFinder* MedianFinderCreate() {\\n        struct MedianFinder *mf = (struct MedianFinder *)malloc(sizeof(struct MedianFinder));\\n        mf->maxHeap = (int *)malloc(sizeof(int));\\n        mf->minHeap = (int *)malloc(sizeof(int));\\n        mf->maxHeap[0] = mf->minHeap[0] = 0;\\n        mf->minHeapSize = mf->maxHeapSize = 0;\\n        mf->minHeapCapacity = mf->maxHeapCapacity = 1;\\n        mf->median = 0;\\n        return mf;\\n    }\\n    \\n    /** Inserts a num into the data structure. */\\n    void addNum(struct MedianFinder* mf, int num) {\\n        if (mf == NULL) return;\\n    \\n        if (mf->maxHeapSize == mf->minHeapSize) {\\n            if (num > mf->median) {\\n                addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, num);\\n                siftUpMin(mf->minHeap, mf->minHeapSize);\\n                mf->median = mf->minHeap[0];\\n            }\\n            else {\\n                addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, num);\\n                siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                mf->median = mf->maxHeap[0];\\n            }\\n        }\\n        else {\\n            if (num > mf->minHeap[0]) {\\n                addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, num);\\n                siftUpMin(mf->minHeap, mf->minHeapSize);\\n                if (mf->minHeapSize >= mf->maxHeapSize + 2) {\\n                    addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, mf->minHeap[0]);\\n                    siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                    swap(&mf->minHeap[0], &mf->minHeap[mf->minHeapSize - 1]);\\n                    mf->minHeapSize--;\\n                    siftDownMin(mf->minHeap, mf->minHeapSize);\\n                }\\n            }\\n            else {\\n                addHeap(&mf->maxHeap, &mf->maxHeapSize, &mf->maxHeapCapacity, num);\\n                siftUpMax(mf->maxHeap, mf->maxHeapSize);\\n                if (mf->maxHeapSize >= mf->minHeapSize + 2) {\\n                    addHeap(&mf->minHeap, &mf->minHeapSize, &mf->minHeapCapacity, mf->maxHeap[0]);\\n                    siftUpMin(mf->minHeap, mf->minHeapSize);\\n                    swap(&mf->maxHeap[0], &mf->maxHeap[mf->maxHeapSize - 1]);\\n                    mf->maxHeapSize--;\\n                    siftDownMax(mf->maxHeap, mf->maxHeapSize);\\n                }\\n            }\\n            mf->median = mf->maxHeap[0] + (mf->minHeap[0] - mf->maxHeap[0]) / 2.0;\\n        }\\n    }\\n    \\n    /** find the median of current data stream */\\n    double findMedian(struct MedianFinder* mf) {\\n        if (mf == NULL) return 0;\\n        return mf->median;\\n    }\\n    \\n    /** Deallocates memory previously allocated for the data structure. */\\n    void MedianFinderFree(struct MedianFinder* mf) {\\n        if (mf == NULL) return;\\n        if (mf->maxHeap) free(mf->maxHeap);\\n        if (mf->minHeap) free(mf->minHeap);\\n        free(mf);\\n    }\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // struct MedianFinder* mf = MedianFinderCreate();\\n    // addNum(mf, 1.0);\\n    // findMedian(mf);\\n    // MedianFinderFree(mf);\\n    \\n    int main() {\\n        struct MedianFinder* mf = MedianFinderCreate();\\n    \\n        addNum(mf, 1);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 2);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 3);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 4);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 5);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 6);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 7);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 8);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 9);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n        addNum(mf, 10);\\n        printf(\"%lf\\\\n\", findMedian(mf));\\n    \\n        MedianFinderFree(mf);\\n    \\n        return 0;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 3238662,
                "title": "295-time-97-64-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThe MedianFinder class maintains two heaps: self.small (a max heap) and self.large (a min heap). The median is either the largest element in self.small, the smallest element in self.large, or the average of these two elements if the heaps have the same size.\\n\\nThe addNum method first pushes the new element onto self.small. If self.small becomes larger than self.large, the largest element in self.small is popped and pushed onto self.large. If self.large becomes larger than self.small, the smallest element in self.large is popped and pushed onto self.small.\\n\\nThe findMedian method returns the median as described above.\\n\\n# Complexity\\n- Time complexity:\\n97.64%\\n\\n- Space complexity:\\n79.57%\\n\\n# Code\\n```\\nimport heapq\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.small = []\\n        self.large = []\\n\\n    def addNum(self, num: int) -> None:\\n        if len(self.small) == len(self.large):\\n            heapq.heappush(self.large, -heapq.heappushpop(self.small, -num))\\n        else:\\n            heapq.heappush(self.small, -heapq.heappushpop(self.large, num))\\n\\n    def findMedian(self) -> float:\\n        if len(self.small) == len(self.large):\\n            return (self.large[0] - self.small[0]) / 2.0\\n        else:\\n            return float(self.large[0])\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Design",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nimport heapq\\n\\nclass MedianFinder:\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.small = []\\n        self.large = []\\n\\n    def addNum(self, num: int) -> None:\\n        if len(self.small) == len(self.large):\\n            heapq.heappush(self.large, -heapq.heappushpop(self.small, -num))\\n        else:\\n            heapq.heappush(self.small, -heapq.heappushpop(self.large, num))\\n\\n    def findMedian(self) -> float:\\n        if len(self.small) == len(self.large):\\n            return (self.large[0] - self.small[0]) / 2.0\\n        else:\\n            return float(self.large[0])\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805533,
                "title": "python-easy-solution-simple-code-sorting",
                "content": "\\n\\n    def __init__(self):\\n\\n        self.lst=[]       \\'\\'\\'insted of using list we can also use sorted array from library then its time complexity reduces to nlogn to logn then we dont have to sort it\\'\\'\\'\\n\\n    def addNum(self, num: int) -> None:\\n        self.lst.append(num)\\n\\n    def findMedian(self) -> float:\\n        self.lst.sort()\\n        mid=len(self.lst)//2\\n        if len(self.lst)%2==0:\\n            return (self.lst[mid-1]+self.lst[mid])/2\\n        else:\\n            return self.lst[mid]",
                "solutionTags": [
                    "Python",
                    "Math",
                    "Sorting"
                ],
                "code": "\\n\\n    def __init__(self):\\n\\n        self.lst=[]       \\'\\'\\'insted of using list we can also use sorted array from library then its time complexity reduces to nlogn to logn then we dont have to sort it\\'\\'\\'\\n\\n    def addNum(self, num: int) -> None:\\n        self.lst.append(num)\\n\\n    def findMedian(self) -> float:\\n        self.lst.sort()\\n        mid=len(self.lst)//2\\n        if len(self.lst)%2==0:\\n            return (self.lst[mid-1]+self.lst[mid])/2\\n        else:\\n            return self.lst[mid]",
                "codeTag": "Python3"
            },
            {
                "id": 2043080,
                "title": "follow-up-solutions-along-with-easy-solution-to-problem",
                "content": "\\nMain solution link - [ https://leetcode.com/problems/find-median-from-data-stream/discuss/2043083/easy-and-simple-solution )\\n\\n**1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n2. **If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nAs 99% is between 0-100. So can keep a counter for less_than_hundred and greater_than_hundred.\\nAs we know soluiton will be definately in 0-100 we don\\'t need to know those number which are >100 or <0, only count of them will be enough.\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "\\nMain solution link - [ https://leetcode.com/problems/find-median-from-data-stream/discuss/2043083/easy-and-simple-solution )\\n\\n**1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n2. **If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nAs 99% is between 0-100. So can keep a counter for less_than_hundred and greater_than_hundred.\\nAs we know soluiton will be definately in 0-100 we don\\'t need to know those number which are >100 or <0, only count of them will be enough.\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 220132,
                "title": "swift-solutions-with-binary-search-732s",
                "content": "```\\nclass MedianFinder {\\n\\tvar nums: [Int]\\n\\n    init() {\\n        self.nums = [Int]()\\n    }\\n    \\nfunc addNum(_ num: Int) {\\n    \\tif nums.isEmpty {\\n    \\t\\tnums.append(num)\\n    \\t\\treturn\\n    \\t}\\n\\n        var start = 0, end = nums.count - 1\\n        while start <= end {\\n        \\tvar mid = start + (end - start)/2\\n        \\tif num > nums[mid] {\\n        \\t\\tstart = mid + 1\\n        \\t} else if num < nums[mid] {\\n        \\t\\tend = mid - 1\\n        \\t} else {\\n        \\t\\tstart = mid\\n        \\t\\tbreak\\n        \\t}\\n        }\\n\\n        nums.insert(num, at: start)\\n    }\\n    \\n    func findMedian() -> Double {\\n      \\tlet count = nums.count\\n      \\tvar median: Double = 0\\n      \\tif count%2 == 0 {\\n      \\t\\tmedian = Double(nums[count/2] + nums[(count-1)/2]) / 2\\n      \\t} else {\\n      \\t\\tmedian = Double(nums[count/2])\\n      \\t}\\n        return median\\n    }\\n}\\n \\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n\\tvar nums: [Int]\\n\\n    init() {\\n        self.nums = [Int]()\\n    }\\n    \\nfunc addNum(_ num: Int) {\\n    \\tif nums.isEmpty {\\n    \\t\\tnums.append(num)\\n    \\t\\treturn\\n    \\t}\\n\\n        var start = 0, end = nums.count - 1\\n        while start <= end {\\n        \\tvar mid = start + (end - start)/2\\n        \\tif num > nums[mid] {\\n        \\t\\tstart = mid + 1\\n        \\t} else if num < nums[mid] {\\n        \\t\\tend = mid - 1\\n        \\t} else {\\n        \\t\\tstart = mid\\n        \\t\\tbreak\\n        \\t}\\n        }\\n\\n        nums.insert(num, at: start)\\n    }\\n    \\n    func findMedian() -> Double {\\n      \\tlet count = nums.count\\n      \\tvar median: Double = 0\\n      \\tif count%2 == 0 {\\n      \\t\\tmedian = Double(nums[count/2] + nums[(count-1)/2]) / 2\\n      \\t} else {\\n      \\t\\tmedian = Double(nums[count/2])\\n      \\t}\\n        return median\\n    }\\n}\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 172685,
                "title": "easy-python-solution-with-2-heaps",
                "content": "```\\nfrom heapq import heappush, heappop, heapreplace, heapify\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        #keep smaller half (size >= 1)\\n        self.maxHeap = []\\n        self.minHeap = []\\n\\n    def addNum(self, num):\\n        heappush(self.maxHeap, -num)\\n        heappush(self.minHeap, -heappop(self.maxHeap))\\n        if len(self.minHeap) > len(self.maxHeap):\\n            heappush(self.maxHeap, -heappop(self.minHeap))\\n            \\n\\n    def findMedian(self):\\n        if len(self.maxHeap) > len(self.minHeap):\\n            return float(-self.maxHeap[0])\\n        return ((-self.maxHeap[0] + self.minHeap[0] + 0.00 )/2)\\n\\t```\\t",
                "solutionTags": [],
                "code": "```\\nfrom heapq import heappush, heappop, heapreplace, heapify\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        #keep smaller half (size >= 1)\\n        self.maxHeap = []\\n        self.minHeap = []\\n\\n    def addNum(self, num):\\n        heappush(self.maxHeap, -num)\\n        heappush(self.minHeap, -heappop(self.maxHeap))\\n        if len(self.minHeap) > len(self.maxHeap):\\n            heappush(self.maxHeap, -heappop(self.minHeap))\\n            \\n\\n    def findMedian(self):\\n        if len(self.maxHeap) > len(self.minHeap):\\n            return float(-self.maxHeap[0])\\n        return ((-self.maxHeap[0] + self.minHeap[0] + 0.00 )/2)\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 2808178,
                "title": "concise-solution-with-two-heaps",
                "content": "```csharp\\npublic class MedianFinder\\n{\\n    PriorityQueue<int, int> left = new();\\n    PriorityQueue<int, int> right = new();\\n    bool odd = false;\\n\\n    public void AddNum(int n)\\n    {\\n        odd = !odd;\\n        int m = right.EnqueueDequeue(n, -n);\\n        left.Enqueue(m, m);\\n\\n        if (left.Count - 1 > right.Count)\\n        {\\n            m = left.Dequeue();\\n            right.Enqueue(m, -m);\\n        }\\n    }\\n    \\n    public double FindMedian() =>\\n        odd ? left.Peek() : (left.Peek() + right.Peek()) / 2.0;\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Heap (Priority Queue)"
                ],
                "code": "```csharp\\npublic class MedianFinder\\n{\\n    PriorityQueue<int, int> left = new();\\n    PriorityQueue<int, int> right = new();\\n    bool odd = false;\\n\\n    public void AddNum(int n)\\n    {\\n        odd = !odd;\\n        int m = right.EnqueueDequeue(n, -n);\\n        left.Enqueue(m, m);\\n\\n        if (left.Count - 1 > right.Count)\\n        {\\n            m = left.Dequeue();\\n            right.Enqueue(m, -m);\\n        }\\n    }\\n    \\n    public double FindMedian() =>\\n        odd ? left.Peek() : (left.Peek() + right.Peek()) / 2.0;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805701,
                "title": "leetcode-the-hard-way-rust-binaryheap",
                "content": "\\uD83D\\uDD34 Check out [LeetCode The Hard Way](https://wingkwong.github.io/leetcode-the-hard-way/) for more solution explanations and tutorials. \\n\\uD83D\\uDFE0 Check out our [Discord](https://discord.gg/Nqm4jJcyBf) for live discussion.\\n\\uD83D\\uDFE2 Give a star on [Github Repository](https://github.com/wingkwong/leetcode-the-hard-way) and upvote this post if you like it.\\n\\n---\\n\\n```rs\\nuse std::collections::BinaryHeap;\\nuse std::cmp::Reverse;\\n\\n#[derive(Default)]\\nstruct MedianFinder {\\n    lo: BinaryHeap<i32>,\\n    hi: BinaryHeap<Reverse<i32>>\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MedianFinder {\\n\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    fn add_num(&mut self, num: i32) {\\n        self.lo.push(num);\\n        self.hi.push(Reverse(*self.lo.peek().unwrap()));\\n        self.lo.pop();\\n        if (self.lo.len() < self.hi.len()) {\\n            self.lo.push(self.hi.peek().unwrap().0);\\n            self.hi.pop();\\n        }\\n    }\\n    \\n    fn find_median(&self) -> f64 {\\n        if self.lo.len() > self.hi.len() {\\n            return *self.lo.peek().unwrap() as f64;\\n        } \\n        (self.lo.peek().unwrap() + self.hi.peek().unwrap().0) as f64 / 2.0\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * let obj = MedianFinder::new();\\n * obj.add_num(num);\\n * let ret_2: f64 = obj.find_median();\\n */\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```rs\\nuse std::collections::BinaryHeap;\\nuse std::cmp::Reverse;\\n\\n#[derive(Default)]\\nstruct MedianFinder {\\n    lo: BinaryHeap<i32>,\\n    hi: BinaryHeap<Reverse<i32>>\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MedianFinder {\\n\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    fn add_num(&mut self, num: i32) {\\n        self.lo.push(num);\\n        self.hi.push(Reverse(*self.lo.peek().unwrap()));\\n        self.lo.pop();\\n        if (self.lo.len() < self.hi.len()) {\\n            self.lo.push(self.hi.peek().unwrap().0);\\n            self.hi.pop();\\n        }\\n    }\\n    \\n    fn find_median(&self) -> f64 {\\n        if self.lo.len() > self.hi.len() {\\n            return *self.lo.peek().unwrap() as f64;\\n        } \\n        (self.lo.peek().unwrap() + self.hi.peek().unwrap().0) as f64 / 2.0\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * let obj = MedianFinder::new();\\n * obj.add_num(num);\\n * let ret_2: f64 = obj.find_median();\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2492199,
                "title": "python-3-min-heap-and-max-heap-approach-explained",
                "content": "If an ordered integer list contains odd elements, then a median is the N//2nd element - i.e [1,2,3,4,5]\\'s median is 3. If an ordered integer list contains even elements, then a median is (N//2nd element + (N//2 + 1)th element) / 2 - i.e. [1,2,3,4,5,6]\\'s median is (3 + 4) / 2 == 3.5. In other words:\\n* the median of an odd-sized list is a largest number of the first half of its elements.\\n* the median of an even-sized list is a (largest number of the first half of its elements + smallest number of the second half of its elements) / 2\\n\\nThe idea is to initialize two data structures: 1) one that stores the first half of its elements (`first_half`) and 2) one that stores the second half of its elements (`second_half`). For the `addNum()` method, we\\'ll need to push a new number into either `first_half` or `second_half`. You may think that we must maintain the elements\\' ordering such that both data structures are sorted in ascending order. However, that\\'s not true because we\\'re only interested in retrieving:\\n* `first_half`\\'s largest number\\n*  `second_half`\\'s smallest number\\n\\nIt seems like max-heap and min-heap is a good candidate for this use-case because the former allows us to retrieve (peek) the largest number in constant time & the latter allows us to retrieve (peek) the smallest number in constant time. \\n\\nNext, we must maintain the heaps such that:\\n* they both have the same exact size when we add an even number of elements in total\\n* `first_half` contains one extra element compared to `second_half` when we add an odd number of elements in total.\\n\\nThe way to achieve this is by:\\n1) heappush the number into `first_half`\\n2) heappop `first_half`\\'s element & heappush it into `second_half`\\n3) If `first_half`\\'s size < `second_half`\\'s size, then we\\'ll heappop the  `second_half`\\'s element & heappush it into `first_half`.\\n\\nTo paint a picture, let\\'s do a quick dry-run:\\n```\\nadd 3\\n=====\\nstep one:\\n---------\\nfirst_half: [-3] (we must multiply by -1 for Python\\'s max-heap)\\nsecond_half: []\\n\\nstep two\\n--------\\nfirst_half: []\\nsecond_half: [3] (first_half current stores negative number. hence, we must multiply it by -1 again)\\n\\nstep three\\n----------\\nfirst_half: [-3] (first_half\\'s length is less than second_half. hence, we must push the number back to it)\\nsecond_half: []\\n\\nadd 5\\n=====\\nstep one:\\n---------\\nfirst_half: [-5, -3] (we must multiply by -1 for Python\\'s max-heap)\\nsecond_half: []\\n\\nstep two\\n--------\\nfirst_half: [-3]\\nsecond_half: [5] (first_half current stores negative number. hence, we must multiply it by -1 again)\\n\\nstep three\\n----------\\nfirst_half: [-3]\\nsecond_half: [5] (we keep as is b/c first_half\\'s size == second_half\\'s size)\\n```\\n\\nFor the `findMedian()` method, we\\'ll check if `first_half`\\'s size == `second_half`\\'s size. If that\\'s the case, then it implies that we\\'ve added an even number of elements in total. Hence, we\\'ll return (`first_half`\\'s first element  + `second_half`\\'s first element) / 2. Otherwise, we\\'ll return `first_half`\\'s first element instead. *FYI: We want to return the first element because max-heap/min-heap\\'s first element is the largest/smallest number.*\\n\\n```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.first_half = []\\n        self.second_half = []\\n\\n    def addNum(self, num: int) -> None:\\n        # We must multiply the number by -1 because\\n        # Python doesn\\'t include built-in max-heap atm.\\n        heappush(self.first_half, -num)\\n        popped_element = heappop(self.first_half)\\n        heappush(self.second_half, -popped_element)\\n        \\n        if len(self.first_half) < len(self.second_half):\\n            popped_element = heappop(self.second_half)\\n            heappush(self.first_half, -popped_element)\\n        \\n    def findMedian(self) -> float:\\n        if len(self.first_half) == len(self.second_half):\\n            return (-self.first_half[0] + self.second_half[0]) / 2\\n        return -self.first_half[0]\\n```\\n\\n\\\\\\n**time/space complexity for addNum()**\\nThe time complexity for the `addNum()` method is O(log(N/2)) ~= O(logN)  because heappush and heappop operation requires logarithmic additional runtime to finish. Although `first_half` and `second_half` contains about N/2 elements, it can be rounded up to N.\\n\\nThe space complexity for the `addNum()` method is O(1) because heappush and heappop operation require constant additional spaces to complete.\\n\\n\\\\\\n**time/space complexity for findMedian()**\\nThe time complexity for the `findMedian()` method is O(1) because we\\'re executing a fixed number of operations.\\n\\nThe space complexity for the `findMedian()` method is O(1) because we\\'re only only retrieving an element from `first_half` and `second_half`.\\n\\n\\\\\\n**time/space complexity throughout the entire problem**\\nThe entire problem entails O(NlogN) additional runtime because every add operation requires logN additional runtime to complete.\\n\\nThe entire problem entails O(N) additional memory because we must store N/2 elements into `first_half` and `second_half` (N/2 + N/2 == N).",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nadd 3\\n=====\\nstep one:\\n---------\\nfirst_half: [-3] (we must multiply by -1 for Python\\'s max-heap)\\nsecond_half: []\\n\\nstep two\\n--------\\nfirst_half: []\\nsecond_half: [3] (first_half current stores negative number. hence, we must multiply it by -1 again)\\n\\nstep three\\n----------\\nfirst_half: [-3] (first_half\\'s length is less than second_half. hence, we must push the number back to it)\\nsecond_half: []\\n\\nadd 5\\n=====\\nstep one:\\n---------\\nfirst_half: [-5, -3] (we must multiply by -1 for Python\\'s max-heap)\\nsecond_half: []\\n\\nstep two\\n--------\\nfirst_half: [-3]\\nsecond_half: [5] (first_half current stores negative number. hence, we must multiply it by -1 again)\\n\\nstep three\\n----------\\nfirst_half: [-3]\\nsecond_half: [5] (we keep as is b/c first_half\\'s size == second_half\\'s size)\\n```\n```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.first_half = []\\n        self.second_half = []\\n\\n    def addNum(self, num: int) -> None:\\n        # We must multiply the number by -1 because\\n        # Python doesn\\'t include built-in max-heap atm.\\n        heappush(self.first_half, -num)\\n        popped_element = heappop(self.first_half)\\n        heappush(self.second_half, -popped_element)\\n        \\n        if len(self.first_half) < len(self.second_half):\\n            popped_element = heappop(self.second_half)\\n            heappush(self.first_half, -popped_element)\\n        \\n    def findMedian(self) -> float:\\n        if len(self.first_half) == len(self.second_half):\\n            return (-self.first_half[0] + self.second_half[0]) / 2\\n        return -self.first_half[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2012997,
                "title": "c-simple-2-heaps-solution-o-logn-o-1",
                "content": "**[C++] Solution for finding median of data stream in O(1) time using 2 heaps:**\\n\\n```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        // Adding elements to heap\\n        if (maxHeap.empty() || num<maxHeap.top()) maxHeap.push(num);\\n        else minHeap.push(num);\\n        \\n        // Balancing heaps\\n        if (maxHeap.size()>minHeap.size()+1) {\\n            minHeap.push(maxHeap.top());\\n            maxHeap.pop();\\n        } else if (maxHeap.size()<minHeap.size()) {\\n            maxHeap.push(minHeap.top());\\n            minHeap.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if (minHeap.size()==maxHeap.size()) return (minHeap.top()+maxHeap.top())/2.0;\\n        else return maxHeap.top();\\n    }\\n};\\n```\\n\\n**Time Complexity for addNum()** : O(logN)\\n**Time Complexity for findMedian()** : O(1)\\n**Space Complexity**: O(N)\\n\\nPlease do **upvote** if you find this helpful.\\nFeel free to ask queries or share feedback in comments.",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\npublic:\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        // Adding elements to heap\\n        if (maxHeap.empty() || num<maxHeap.top()) maxHeap.push(num);\\n        else minHeap.push(num);\\n        \\n        // Balancing heaps\\n        if (maxHeap.size()>minHeap.size()+1) {\\n            minHeap.push(maxHeap.top());\\n            maxHeap.pop();\\n        } else if (maxHeap.size()<minHeap.size()) {\\n            maxHeap.push(minHeap.top());\\n            minHeap.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if (minHeap.size()==maxHeap.size()) return (minHeap.top()+maxHeap.top())/2.0;\\n        else return maxHeap.top();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1858530,
                "title": "c-priority-queue-2-heaps-o-log-n-add-o-1-median-easy-clean-code",
                "content": "```\\n    priority_queue<int> q1;\\n    priority_queue<int,vector<int>,greater<int>> q2;\\n    \\n    void balance()\\n    {\\n        while(q1.size()<q2.size())\\n        {\\n            q1.push(q2.top());\\n            q2.pop();\\n        }\\n        \\n        if(q1.size()-q2.size()>1)\\n        {\\n            q2.push(q1.top());\\n            q1.pop();\\n        }\\n    }\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        \\n        if(q1.empty() || num<q1.top())\\n            q1.push(num);\\n        else\\n            q2.push(num);\\n        \\n        balance();\\n    }\\n    \\n    double findMedian() {\\n        if(q1.size()>q2.size())\\n            return q1.top();\\n        else\\n            return ((float)q1.top()+q2.top())/2;\\n    }\\n```\\n\\n**Do share your suggestions & upvote if you like !!!**  \\uD83D\\uDE04",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n    priority_queue<int> q1;\\n    priority_queue<int,vector<int>,greater<int>> q2;\\n    \\n    void balance()\\n    {\\n        while(q1.size()<q2.size())\\n        {\\n            q1.push(q2.top());\\n            q2.pop();\\n        }\\n        \\n        if(q1.size()-q2.size()>1)\\n        {\\n            q2.push(q1.top());\\n            q1.pop();\\n        }\\n    }\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        \\n        if(q1.empty() || num<q1.top())\\n            q1.push(num);\\n        else\\n            q2.push(num);\\n        \\n        balance();\\n    }\\n    \\n    double findMedian() {\\n        if(q1.size()>q2.size())\\n            return q1.top();\\n        else\\n            return ((float)q1.top()+q2.top())/2;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1765776,
                "title": "c-priorityqueue-solution",
                "content": "Approach\\n\\n1. Enqueue each element to min heap \\n2. Dequeue element from min heap and enqueue to max heap -> This will ensure all elements in min heap > max heap\\n3. Balance 2 heaps - when min heap size < max heap size then dequeue element from max heap and enqueue in min heap\\n\\n\\n```\\n    public class MedianFinder\\n    {\\n\\n        private PriorityQueue<int, int> _minHeap;\\n        private PriorityQueue<int, int> _maxHeap;\\n\\n        public MedianFinder()\\n        {\\n            _minHeap = new PriorityQueue<int, int>();\\n            _maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((a,b) => b.CompareTo(a)));\\n        }\\n\\n        public void AddNum(int num)\\n        {\\n            _minHeap.Enqueue(num, num);\\n            int minHeapPeek = _minHeap.Dequeue();\\n            _maxHeap.Enqueue(minHeapPeek, minHeapPeek);\\n            if (_minHeap.Count < _maxHeap.Count)\\n            {\\n                int maxheapPeek = _maxHeap.Dequeue();\\n                _minHeap.Enqueue(maxheapPeek, maxheapPeek);\\n            }\\n        }\\n\\n        public double FindMedian()\\n        {\\n            return _minHeap.Count > _maxHeap.Count ? \\n                _minHeap.Peek() : \\n                (_minHeap.Peek() + _maxHeap.Peek()) / 2.0;\\n        }\\n    }\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n    public class MedianFinder\\n    {\\n\\n        private PriorityQueue<int, int> _minHeap;\\n        private PriorityQueue<int, int> _maxHeap;\\n\\n        public MedianFinder()\\n        {\\n            _minHeap = new PriorityQueue<int, int>();\\n            _maxHeap = new PriorityQueue<int, int>(Comparer<int>.Create((a,b) => b.CompareTo(a)));\\n        }\\n\\n        public void AddNum(int num)\\n        {\\n            _minHeap.Enqueue(num, num);\\n            int minHeapPeek = _minHeap.Dequeue();\\n            _maxHeap.Enqueue(minHeapPeek, minHeapPeek);\\n            if (_minHeap.Count < _maxHeap.Count)\\n            {\\n                int maxheapPeek = _maxHeap.Dequeue();\\n                _minHeap.Enqueue(maxheapPeek, maxheapPeek);\\n            }\\n        }\\n\\n        public double FindMedian()\\n        {\\n            return _minHeap.Count > _maxHeap.Count ? \\n                _minHeap.Peek() : \\n                (_minHeap.Peek() + _maxHeap.Peek()) / 2.0;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1497698,
                "title": "python-two-heap-easy-to-understand",
                "content": "```\\nfrom heapq import heappush, heappop\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.maxheap = []   # Store the lower half\\n        self.minheap = []   # Store the larger half\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        # maxheap length is either equal or 1 greater than minheap length\\n        # always store negative value for maxheap\\n        heappush(self.maxheap, -num)\\n        \\n        # Convert to positive when retrieving from maxheap\\n        maxHeapTop = -heappop(self.maxheap)\\n        \\n        heappush(self.minheap, maxHeapTop)\\n        \\n        # Balance two heap\\n        if len(self.minheap) > len(self.maxheap):\\n            minHeapTop = heappop(self.minheap)\\n            heappush(self.maxheap,-minHeapTop)  \\n        \\n    def findMedian(self) -> float:\\n        if len(self.minheap) == len(self.maxheap):\\n            return (self.minheap[0] + (-self.maxheap[0])) / 2\\n        else:\\n            return -self.maxheap[0]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import heappush, heappop\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.maxheap = []   # Store the lower half\\n        self.minheap = []   # Store the larger half\\n        \\n\\n    def addNum(self, num: int) -> None:\\n        # maxheap length is either equal or 1 greater than minheap length\\n        # always store negative value for maxheap\\n        heappush(self.maxheap, -num)\\n        \\n        # Convert to positive when retrieving from maxheap\\n        maxHeapTop = -heappop(self.maxheap)\\n        \\n        heappush(self.minheap, maxHeapTop)\\n        \\n        # Balance two heap\\n        if len(self.minheap) > len(self.maxheap):\\n            minHeapTop = heappop(self.minheap)\\n            heappush(self.maxheap,-minHeapTop)  \\n        \\n    def findMedian(self) -> float:\\n        if len(self.minheap) == len(self.maxheap):\\n            return (self.minheap[0] + (-self.maxheap[0])) / 2\\n        else:\\n            return -self.maxheap[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1331923,
                "title": "clean-2-heaps-go-solution",
                "content": "```\\ntype Heap struct {\\n\\tValues   []int\\n\\tLessFunc func(int, int) bool\\n}\\n\\nfunc (h *Heap) Less(i, j int) bool { return h.LessFunc(h.Values[i], h.Values[j]) }\\nfunc (h *Heap) Swap(i, j int)      { h.Values[i], h.Values[j] = h.Values[j], h.Values[i] }\\nfunc (h *Heap) Len() int           { return len(h.Values) }\\nfunc (h *Heap) Peek() int          { return h.Values[0] }\\nfunc (h *Heap) Pop() (v interface{}) {\\n\\th.Values, v = h.Values[:h.Len()-1], h.Values[h.Len()-1]\\n\\treturn v\\n}\\nfunc (h *Heap) Push(v interface{}) { h.Values = append(h.Values, v.(int)) }\\n\\nfunc NewHeap(less func(int, int) bool) *Heap {\\n\\treturn &Heap{LessFunc: less}\\n}\\n\\ntype MedianFinder struct {\\n\\tsmallHeap *Heap\\n\\tlargeHeap *Heap\\n}\\n\\nfunc Constructor() MedianFinder {\\n\\treturn MedianFinder{\\n\\t\\tsmallHeap: NewHeap(func(a, b int) bool {\\n\\t\\t\\treturn a > b\\n\\t\\t}),\\n\\t\\tlargeHeap: NewHeap(func(a, b int) bool {\\n\\t\\t\\treturn a < b\\n\\t\\t}),\\n\\t}\\n}\\n\\nfunc (mf *MedianFinder) AddNum(num int) {\\n\\tif (mf.smallHeap.Len()+mf.largeHeap.Len())%2 == 0 {\\n\\t\\theap.Push(mf.largeHeap, num)\\n\\t\\theap.Push(mf.smallHeap, heap.Pop(mf.largeHeap))\\n\\t} else {\\n\\t\\theap.Push(mf.smallHeap, num)\\n\\t\\theap.Push(mf.largeHeap, heap.Pop(mf.smallHeap))\\n\\t}\\n}\\n\\nfunc (mf *MedianFinder) FindMedian() float64 {\\n\\tif (mf.smallHeap.Len()+mf.largeHeap.Len())%2 == 0 {\\n\\t\\treturn (float64(mf.smallHeap.Peek()) + float64(mf.largeHeap.Peek())) / 2\\n\\t}\\n\\treturn float64(mf.smallHeap.Peek())\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ntype Heap struct {\\n\\tValues   []int\\n\\tLessFunc func(int, int) bool\\n}\\n\\nfunc (h *Heap) Less(i, j int) bool { return h.LessFunc(h.Values[i], h.Values[j]) }\\nfunc (h *Heap) Swap(i, j int)      { h.Values[i], h.Values[j] = h.Values[j], h.Values[i] }\\nfunc (h *Heap) Len() int           { return len(h.Values) }\\nfunc (h *Heap) Peek() int          { return h.Values[0] }\\nfunc (h *Heap) Pop() (v interface{}) {\\n\\th.Values, v = h.Values[:h.Len()-1], h.Values[h.Len()-1]\\n\\treturn v\\n}\\nfunc (h *Heap) Push(v interface{}) { h.Values = append(h.Values, v.(int)) }\\n\\nfunc NewHeap(less func(int, int) bool) *Heap {\\n\\treturn &Heap{LessFunc: less}\\n}\\n\\ntype MedianFinder struct {\\n\\tsmallHeap *Heap\\n\\tlargeHeap *Heap\\n}\\n\\nfunc Constructor() MedianFinder {\\n\\treturn MedianFinder{\\n\\t\\tsmallHeap: NewHeap(func(a, b int) bool {\\n\\t\\t\\treturn a > b\\n\\t\\t}),\\n\\t\\tlargeHeap: NewHeap(func(a, b int) bool {\\n\\t\\t\\treturn a < b\\n\\t\\t}),\\n\\t}\\n}\\n\\nfunc (mf *MedianFinder) AddNum(num int) {\\n\\tif (mf.smallHeap.Len()+mf.largeHeap.Len())%2 == 0 {\\n\\t\\theap.Push(mf.largeHeap, num)\\n\\t\\theap.Push(mf.smallHeap, heap.Pop(mf.largeHeap))\\n\\t} else {\\n\\t\\theap.Push(mf.smallHeap, num)\\n\\t\\theap.Push(mf.largeHeap, heap.Pop(mf.smallHeap))\\n\\t}\\n}\\n\\nfunc (mf *MedianFinder) FindMedian() float64 {\\n\\tif (mf.smallHeap.Len()+mf.largeHeap.Len())%2 == 0 {\\n\\t\\treturn (float64(mf.smallHeap.Peek()) + float64(mf.largeHeap.Peek())) / 2\\n\\t}\\n\\treturn float64(mf.smallHeap.Peek())\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1140457,
                "title": "java-treeset-solution-with-two-pointers-and-explanation",
                "content": "For some reason, there is a lack of well documented solution using TreeSet for Java developers in the discussion. Official LC solution uses C++ multiset and iteration there gets easier because of pointers, which is hard to achieve using iterators in Java (considering there is no *peek* functionality in Java iterators).\\n\\nThe following code uses two pointer approach, and becomes a bit long because of using a custom comparator. The idea here is: instead of an iterator, we store both the number and its location in data stream in the TreeSet. This lets us handle cases where identical values are entered in the stream, and closely follows the height balanced trees approach presented in LC solution.\\n\\nThis is an important technique to grasp in case interviewer asks for alternative solutions to the more popular Priority Queue approach.\\n\\nTime complexity for add is O(log(n)) to account for the time to `add` and search (`lower` and `upper` methods of TreeSet).\\nSpace complexity is O(n) since we are storing all elements of the stream here\\n\\n```\\nclass MedianFinder {\\n    TreeSet<int[]> data;\\n    Comparator<int[]> customComparator;\\n    int[] lower, upper;\\n    int index;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        // Comparator compares first by value of the integer, then by location in stream\\n        customComparator = ((int[] a, int[] b) -> {\\n            if (a[0] != b[0]) {\\n                return Integer.compare(a[0], b[0]);\\n            }\\n            else {\\n                return Integer.compare(a[1], b[1]);\\n            }\\n        });\\n        data = new TreeSet<>(customComparator);\\n        lower = null;\\n        upper = null;\\n        index = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        int[] curr = new int[] {num, index++};\\n        data.add(curr);\\n        if (data.size() == 1) {\\n            // First addition to the stream\\n            lower = data.first();\\n            upper = data.first();\\n        }\\n        else if (customComparator.compare(lower, upper) == 0) {\\n            // last time it was odd, now it is even\\n            if (customComparator.compare(curr, lower) < 0) {\\n                // num is less than the left median\\n                // Median has shifted one place left\\n                upper = lower;\\n                lower = data.lower(lower);\\n            }\\n            else {\\n                // num is greater than or eaual to the right median\\n                // Median has shifted one place right\\n                lower = upper;\\n                upper = data.higher(upper);\\n            }\\n        }\\n        else {\\n            // last time it was even, this time it is odd\\n            // Three cases\\n            if (customComparator.compare(curr, lower) < 0) {\\n                // Case 1: new number inserted to the left of lower\\n                // lower median is the current median in that case\\n                upper = lower;\\n            }\\n            else  if (customComparator.compare(curr, upper) > 0) {\\n                // Case 2: new number inserted to the right of upper\\n                // upper median is the current median in that case\\n                lower = upper;\\n            }\\n            else{\\n                // Case 3: Either num is equal to one or both of upper, lower, or lies in between\\n                // in that case, num IS our median\\n                lower = curr;\\n                upper = curr;\\n            }\\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        if (lower == null) {\\n            // Safety check\\n            return 0.0;\\n        }\\n        // This function is trivial since we are already tracking two pointers\\n        return ((double)lower[0] + upper[0])/2;\\n    }\\n}\\n```\\n\\nNote: inspired by https://leetcode.com/problems/find-median-from-data-stream/discuss/439595/Java-TreeSet-Solution-beats-93, but wanted to add more commented and clean code.",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Ordered Set"
                ],
                "code": "```\\nclass MedianFinder {\\n    TreeSet<int[]> data;\\n    Comparator<int[]> customComparator;\\n    int[] lower, upper;\\n    int index;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        // Comparator compares first by value of the integer, then by location in stream\\n        customComparator = ((int[] a, int[] b) -> {\\n            if (a[0] != b[0]) {\\n                return Integer.compare(a[0], b[0]);\\n            }\\n            else {\\n                return Integer.compare(a[1], b[1]);\\n            }\\n        });\\n        data = new TreeSet<>(customComparator);\\n        lower = null;\\n        upper = null;\\n        index = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        int[] curr = new int[] {num, index++};\\n        data.add(curr);\\n        if (data.size() == 1) {\\n            // First addition to the stream\\n            lower = data.first();\\n            upper = data.first();\\n        }\\n        else if (customComparator.compare(lower, upper) == 0) {\\n            // last time it was odd, now it is even\\n            if (customComparator.compare(curr, lower) < 0) {\\n                // num is less than the left median\\n                // Median has shifted one place left\\n                upper = lower;\\n                lower = data.lower(lower);\\n            }\\n            else {\\n                // num is greater than or eaual to the right median\\n                // Median has shifted one place right\\n                lower = upper;\\n                upper = data.higher(upper);\\n            }\\n        }\\n        else {\\n            // last time it was even, this time it is odd\\n            // Three cases\\n            if (customComparator.compare(curr, lower) < 0) {\\n                // Case 1: new number inserted to the left of lower\\n                // lower median is the current median in that case\\n                upper = lower;\\n            }\\n            else  if (customComparator.compare(curr, upper) > 0) {\\n                // Case 2: new number inserted to the right of upper\\n                // upper median is the current median in that case\\n                lower = upper;\\n            }\\n            else{\\n                // Case 3: Either num is equal to one or both of upper, lower, or lies in between\\n                // in that case, num IS our median\\n                lower = curr;\\n                upper = curr;\\n            }\\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        if (lower == null) {\\n            // Safety check\\n            return 0.0;\\n        }\\n        // This function is trivial since we are already tracking two pointers\\n        return ((double)lower[0] + upper[0])/2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1061723,
                "title": "java-solutions-for-two-follow-ups",
                "content": "**1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nWe can use an array with 100 slots to store the count of each number, and then iterate through the array to find the median.\\nAs the size of the array is 101, the time complexity of finding the median is constant.\\n\\n***Java Sample Code:***\\n```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        arr[num]++;\\n        size++;\\n    }\\n    \\n    public double findMedian() {\\n        int index = 0, median = size / 2, first = 0;\\n        for(int i = 0; i < 101; i++) {\\n            for(int j = 0; j < arr[i]; j++) {\\n                if(index == median - 1) first = i;\\n                else if(index == median) {\\n                    if(size % 2 == 0) return (first + i) / 2.0;\\n                    else return (double) i;\\n                }\\n                index++;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\\n\\n**2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?**\\n\\nIt\\'s similar to above, but here are situations we need to talk about.\\n\\n1. If we can make sure we will call `findMedian()` only when we already have most of integer numbers inserted, which assure the median would appear between 0 and 100, we can just use a variable to store the total size of all numbers and the number of elements that are less than 0 respectively and don\\'t have to care about what those numbers are. For those numbers that are greater than 100, we don\\'t have to really care about them to find median as we will iterate through from the lowest number.\\n\\n***Java Sample Code***\\n```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    int lo;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n        lo = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        if(num < 0) lo++;\\n        else if(num <= 100 && num >= 0) arr[num]++;\\n        size++;\\n    }\\n    \\n    public double findMedian() {\\n        int index = lo, median = size / 2, first = 0;\\n        for(int i = 0; i < 101; i++) {\\n            for(int j = 0; j < arr[i]; j++) {\\n                if(index == median - 1) first = i;\\n                else if(index == median) {\\n                    if(size % 2 == 0) return (first + i) / 2.0;\\n                    else return (double) i;\\n                }\\n                index++;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\\n\\n\\n2. But if we don\\'t know when we will call `findMedian()`, we have to make sure we have access to all numbers inserted all the time. Especially, if we insert numbers that are not in the range of 0 to 100 at the very beginning and we call `findMedian`, we need to be able to access those numbers and find the median between them. So we need two more PriorityQueues to help store numbers that are less than 0 or greater than 100.\\nWhy ***PriorityQueue***? As PriorityQueue helps sort the number when we insert it, we could easily find the median by iterating through the PriorityQueue if the median is in one of the PriorityQueue.\\n\\n***Java Sample Code***\\n```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    PriorityQueue<Integer> lo;\\n    PriorityQueue<Integer> hi;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n        lo = new PriorityQueue<Integer>();\\n        hi = new PriorityQueue<Integer>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(num < 0) lo.add(num);\\n        else if(num > 100) hi.add(num);\\n        else arr[num]++;\\n        size++;\\n    };\\n    \\n    public double findMedian() {\\n        int median = size / 2, index;\\n        PriorityQueue<Integer> temp;\\n        // If total size is odd number\\n        if(size % 2 != 0) {\\n            if(median < lo.size()) {\\n                // The median is in lo\\n\\t\\t\\t\\t// Todo:\\n            }\\n            else if(median >= size - hi.size()) {\\n                // The median is in hi\\n\\t\\t\\t\\t// Todo:\\n            } \\n            else {\\n                // The median is in arr\\n\\t\\t\\t\\t// Todo:\\n            }\\n        } // If total size is even number\\n        else {\\n            int a, b;\\n            if(median < lo.size()) {\\n                temp = new PrirotyQueue<>(lo);\\n                index = 0;\\n                while(index < median) {\\n                    if(index == median - 1) {\\n                        a = temp.poll();\\n                        b = temp.poll();\\n                        return (a + b) / 2.0;\\n                    } else {\\n                        temp.poll();    \\n                        index++;\\n                    }\\n                }\\n            } else if(median == lo.size()) {\\n                int last = 0;\\n                temp = new PrirotyQueue<>(lo);\\n                while(!temp.isEmpty()) last = temp.poll();\\n                for(int i = 0; i < 101; i++)\\n                    if(arr[i] != 0) \\n                        return (i + last) / 2.0;\\n            } else if(median > size - hi.size()) {\\n                temp = new PrirotyQueue<>(hi);\\n                index = size - hi.size();\\n                while(index < median) {\\n                    if(index == median - 1) {\\n                        a = temp.poll();\\n                        b = temp.poll();\\n                        return (a + b) / 2.0;\\n                    } else {\\n                        temp.poll();\\n                        index++;\\n                    }\\n                }\\n            } else if(median == size - hi.size()) {\\n                int first = hi.peek();\\n                for(int i = 100; i >= 0; i--)\\n                    if(arr[i] != 0)\\n                        return (i + first) / 2.0;                \\n            } else {\\n                // The median is in arr\\n\\t\\t\\t\\t// Todo:\\n            }\\n        }\\n        return 0.0;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n ```\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        arr[num]++;\\n        size++;\\n    }\\n    \\n    public double findMedian() {\\n        int index = 0, median = size / 2, first = 0;\\n        for(int i = 0; i < 101; i++) {\\n            for(int j = 0; j < arr[i]; j++) {\\n                if(index == median - 1) first = i;\\n                else if(index == median) {\\n                    if(size % 2 == 0) return (first + i) / 2.0;\\n                    else return (double) i;\\n                }\\n                index++;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\n```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    int lo;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n        lo = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        if(num < 0) lo++;\\n        else if(num <= 100 && num >= 0) arr[num]++;\\n        size++;\\n    }\\n    \\n    public double findMedian() {\\n        int index = lo, median = size / 2, first = 0;\\n        for(int i = 0; i < 101; i++) {\\n            for(int j = 0; j < arr[i]; j++) {\\n                if(index == median - 1) first = i;\\n                else if(index == median) {\\n                    if(size % 2 == 0) return (first + i) / 2.0;\\n                    else return (double) i;\\n                }\\n                index++;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```\n```\\nclass MedianFinder {\\n    int[] arr;\\n    int size;\\n    PriorityQueue<Integer> lo;\\n    PriorityQueue<Integer> hi;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        arr = new int[101];\\n        size = 0;\\n        lo = new PriorityQueue<Integer>();\\n        hi = new PriorityQueue<Integer>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(num < 0) lo.add(num);\\n        else if(num > 100) hi.add(num);\\n        else arr[num]++;\\n        size++;\\n    };\\n    \\n    public double findMedian() {\\n        int median = size / 2, index;\\n        PriorityQueue<Integer> temp;\\n        // If total size is odd number\\n        if(size % 2 != 0) {\\n            if(median < lo.size()) {\\n                // The median is in lo\\n\\t\\t\\t\\t// Todo:\\n            }\\n            else if(median >= size - hi.size()) {\\n                // The median is in hi\\n\\t\\t\\t\\t// Todo:\\n            } \\n            else {\\n                // The median is in arr\\n\\t\\t\\t\\t// Todo:\\n            }\\n        } // If total size is even number\\n        else {\\n            int a, b;\\n            if(median < lo.size()) {\\n                temp = new PrirotyQueue<>(lo);\\n                index = 0;\\n                while(index < median) {\\n                    if(index == median - 1) {\\n                        a = temp.poll();\\n                        b = temp.poll();\\n                        return (a + b) / 2.0;\\n                    } else {\\n                        temp.poll();    \\n                        index++;\\n                    }\\n                }\\n            } else if(median == lo.size()) {\\n                int last = 0;\\n                temp = new PrirotyQueue<>(lo);\\n                while(!temp.isEmpty()) last = temp.poll();\\n                for(int i = 0; i < 101; i++)\\n                    if(arr[i] != 0) \\n                        return (i + last) / 2.0;\\n            } else if(median > size - hi.size()) {\\n                temp = new PrirotyQueue<>(hi);\\n                index = size - hi.size();\\n                while(index < median) {\\n                    if(index == median - 1) {\\n                        a = temp.poll();\\n                        b = temp.poll();\\n                        return (a + b) / 2.0;\\n                    } else {\\n                        temp.poll();\\n                        index++;\\n                    }\\n                }\\n            } else if(median == size - hi.size()) {\\n                int first = hi.peek();\\n                for(int i = 100; i >= 0; i--)\\n                    if(arr[i] != 0)\\n                        return (i + first) / 2.0;                \\n            } else {\\n                // The median is in arr\\n\\t\\t\\t\\t// Todo:\\n            }\\n        }\\n        return 0.0;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 697434,
                "title": "java-multiset-treemap-solution-without-storing-all-values",
                "content": "The idea is to maintain a TreeMap<Number, Count> and a mid value along with its relative index to it\\'s count.\\nEach time a number is added the relative index is incremented or decremented.\\n\\nFor example if we have numbers 10, 10, 10, 15, **15**, 15, 20, 20, 20\\nThe map contains:\\n10: 3\\n15: 3\\n20: 3\\nmid value is 15 and the relative index is 1 (pointing to the second 15)\\n\\nWhen another 20 is added it becomes\\nmap:\\n10: 3\\n15: 3\\n20: 4\\nmid value is still 15 and the relative index is 2 (pointing to the third 15)\\n\\nAnother 20:\\n10: 3\\n15: 3\\n20: 5\\nmid value is still 20 and the relative index is 0 (pointing to the first 20)\\n\\n```\\nclass MedianFinder {\\n\\n    private final TreeMap<Integer, Integer> tree = new TreeMap<>();\\n    private int totalCount;\\n\\n    private int midValue;\\n    private int midIndex;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n    }\\n\\n    public void addNum(int num) {\\n        tree.put(num, tree.getOrDefault(num, 0) + 1);\\n        totalCount++;\\n\\n        if (totalCount == 1) {\\n            midValue = num;\\n            midIndex = 0;\\n        } else {\\n            if (num >= midValue) {\\n                midIndex++;\\n                if (midIndex / 2 >= tree.get(midValue)) {\\n                    midValue = tree.higherKey(midValue);\\n                    midIndex = 0;\\n                }\\n            } else {\\n                midIndex--;\\n                if (midIndex < 0) {\\n                    midValue = tree.lowerKey(midValue);\\n                    midIndex = tree.get(midValue) * 2 - 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (totalCount % 2 == 0 && (midIndex + 1) / 2 >= tree.get(midValue)) {\\n            int nextMidValue = tree.higherKey(midValue);\\n            return (midValue + nextMidValue) / 2d;\\n        } else {\\n            return midValue;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n\\n    private final TreeMap<Integer, Integer> tree = new TreeMap<>();\\n    private int totalCount;\\n\\n    private int midValue;\\n    private int midIndex;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n    }\\n\\n    public void addNum(int num) {\\n        tree.put(num, tree.getOrDefault(num, 0) + 1);\\n        totalCount++;\\n\\n        if (totalCount == 1) {\\n            midValue = num;\\n            midIndex = 0;\\n        } else {\\n            if (num >= midValue) {\\n                midIndex++;\\n                if (midIndex / 2 >= tree.get(midValue)) {\\n                    midValue = tree.higherKey(midValue);\\n                    midIndex = 0;\\n                }\\n            } else {\\n                midIndex--;\\n                if (midIndex < 0) {\\n                    midValue = tree.lowerKey(midValue);\\n                    midIndex = tree.get(midValue) * 2 - 1;\\n                }\\n            }\\n        }\\n    }\\n\\n    public double findMedian() {\\n        if (totalCount % 2 == 0 && (midIndex + 1) / 2 >= tree.get(midValue)) {\\n            int nextMidValue = tree.higherKey(midValue);\\n            return (midValue + nextMidValue) / 2d;\\n        } else {\\n            return midValue;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 692987,
                "title": "c-fastest-priorityqueue",
                "content": "After searching a lot and do my bench-marking I use this implementation which is faster than any PriorityQueue I\\'ve seen. even faster than C5.IntervalHeap().\\n[my Submission](https://leetcode.com/submissions/detail/355137471/)\\n```\\n//A binary heap impelemntation\\npublic class PriorityQueue<T> {\\n    private readonly List<T> list;\\n    private readonly IComparer<T> comparer;\\n\\t\\n    public PriorityQueue(IComparer<T> comparer = null) {\\n        this.comparer = comparer ?? Comparer<T>.Default;\\n        this.list = new List<T>();\\n    }\\n\\t//O(Log N)\\n    public void Add(T x) {\\n        list.Add(x);\\n\\t\\t\\n        var child = Count - 1;\\n        while (child > 0){ // child index; start at end\\n            int parent = (child - 1) / 2;// parent index\\n            // child item is larger than (or equal) parent so we\\'re done\\n            if (comparer.Compare(list[parent], x) <= 0) break;\\n            list[child] = list[parent];\\n            child = parent;\\n        }\\n        if (Count > 0) list[child] = x;\\n    }\\n\\n    public T Peek() => list[0];\\n\\t//O(Log N)\\n    public T Poll() {\\n        var ret = Peek();\\n        var root = list[Count - 1];\\n        list.RemoveAt(Count - 1);\\n        var i = 0;//parent\\n        while (i * 2 + 1 < Count) {\\n            var left = 2 * i + 1; //left child\\n            if (left > Count) break;  // no children so we\\'re done\\n            var right = 2 * i + 2; // right child\\n            var c = right < Count && comparer.Compare(list[right], list[left]) < 0 ? right : left;\\n            if (comparer.Compare(list[c], root) >= 0) break;\\n            list[i] = list[c];\\n            i = c;\\n        }\\n        if (Count > 0) list[i] = root;\\n        return ret;\\n    }\\n\\t\\n    public int Count => list.Count;//Count is cached in List implelemtation\\n\\t\\n    public void DisplayHeap() => list.ForEach(x => Console.WriteLine(x));\\n}\\n```\\nand here\\'s a usage of it:\\n```\\npublic class MedianFinder {\\n\\n    private readonly PriorityQueue<int> small;\\n    private readonly PriorityQueue<int> large;\\n    \\n    public MedianFinder() {\\n        var maxComparer = Comparer<int>.Create((x, y) => y.CompareTo(x));\\n        small = new PriorityQueue<int>();\\n        large = new PriorityQueue<int>(maxComparer);\\n    }\\n    \\n   public void AddNum(int num) {\\n        large.Add(num);\\n        small.Add(large.Poll());\\n        if (large.Count < small.Count)\\n            large.Add(small.Poll());\\n    }\\n\\n    public double FindMedian() {\\n        return large.Count > small.Count\\n           ? large.Peek()\\n           : (large.Peek() + small.Peek()) / 2.0;\\n    }\\n}\\n```\\n\\nIt\\'s possible to implement PriorityQueue using a SortSet:\\n```\\n public class PQ {\\n     private struct HeapKey{\\n         public int Value;\\n         public int Index;\\n     }\\n     \\n    private readonly SortedSet<HeapKey> _set;\\n    private int index;\\n    public PQ(Comparer<int> comparer = null){\\n        comparer = comparer ?? Comparer<int>.Default;\\n        _set = new SortedSet<HeapKey>(\\n            Comparer<HeapKey>.Create((x, y) => \\n                        comparer.Compare(x.Value, y.Value) == 0 ?\\n                        x.Index - y.Index :\\n                        comparer.Compare(x.Value, y.Value))\\n        );\\n    }\\n    \\n    public void Add(int num){\\n        _set.Add(new HeapKey{Value= num, Index = index++});\\n    }\\n    \\n    public int Peek(){\\n        return _set.First().Value;\\n    }\\n     \\n     public int Pop(){\\n         var item = _set.First();\\n         _set.Remove(item);\\n        return item.Value;\\n    }\\n     \\n    public int Count => _set.Count;\\n     \\n }     \\n```",
                "solutionTags": [
                    "Binary Search",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n//A binary heap impelemntation\\npublic class PriorityQueue<T> {\\n    private readonly List<T> list;\\n    private readonly IComparer<T> comparer;\\n\\t\\n    public PriorityQueue(IComparer<T> comparer = null) {\\n        this.comparer = comparer ?? Comparer<T>.Default;\\n        this.list = new List<T>();\\n    }\\n\\t//O(Log N)\\n    public void Add(T x) {\\n        list.Add(x);\\n\\t\\t\\n        var child = Count - 1;\\n        while (child > 0){ // child index; start at end\\n            int parent = (child - 1) / 2;// parent index\\n            // child item is larger than (or equal) parent so we\\'re done\\n            if (comparer.Compare(list[parent], x) <= 0) break;\\n            list[child] = list[parent];\\n            child = parent;\\n        }\\n        if (Count > 0) list[child] = x;\\n    }\\n\\n    public T Peek() => list[0];\\n\\t//O(Log N)\\n    public T Poll() {\\n        var ret = Peek();\\n        var root = list[Count - 1];\\n        list.RemoveAt(Count - 1);\\n        var i = 0;//parent\\n        while (i * 2 + 1 < Count) {\\n            var left = 2 * i + 1; //left child\\n            if (left > Count) break;  // no children so we\\'re done\\n            var right = 2 * i + 2; // right child\\n            var c = right < Count && comparer.Compare(list[right], list[left]) < 0 ? right : left;\\n            if (comparer.Compare(list[c], root) >= 0) break;\\n            list[i] = list[c];\\n            i = c;\\n        }\\n        if (Count > 0) list[i] = root;\\n        return ret;\\n    }\\n\\t\\n    public int Count => list.Count;//Count is cached in List implelemtation\\n\\t\\n    public void DisplayHeap() => list.ForEach(x => Console.WriteLine(x));\\n}\\n```\n```\\npublic class MedianFinder {\\n\\n    private readonly PriorityQueue<int> small;\\n    private readonly PriorityQueue<int> large;\\n    \\n    public MedianFinder() {\\n        var maxComparer = Comparer<int>.Create((x, y) => y.CompareTo(x));\\n        small = new PriorityQueue<int>();\\n        large = new PriorityQueue<int>(maxComparer);\\n    }\\n    \\n   public void AddNum(int num) {\\n        large.Add(num);\\n        small.Add(large.Poll());\\n        if (large.Count < small.Count)\\n            large.Add(small.Poll());\\n    }\\n\\n    public double FindMedian() {\\n        return large.Count > small.Count\\n           ? large.Peek()\\n           : (large.Peek() + small.Peek()) / 2.0;\\n    }\\n}\\n```\n```\\n public class PQ {\\n     private struct HeapKey{\\n         public int Value;\\n         public int Index;\\n     }\\n     \\n    private readonly SortedSet<HeapKey> _set;\\n    private int index;\\n    public PQ(Comparer<int> comparer = null){\\n        comparer = comparer ?? Comparer<int>.Default;\\n        _set = new SortedSet<HeapKey>(\\n            Comparer<HeapKey>.Create((x, y) => \\n                        comparer.Compare(x.Value, y.Value) == 0 ?\\n                        x.Index - y.Index :\\n                        comparer.Compare(x.Value, y.Value))\\n        );\\n    }\\n    \\n    public void Add(int num){\\n        _set.Add(new HeapKey{Value= num, Index = index++});\\n    }\\n    \\n    public int Peek(){\\n        return _set.First().Value;\\n    }\\n     \\n     public int Pop(){\\n         var item = _set.First();\\n         _set.Remove(item);\\n        return item.Value;\\n    }\\n     \\n    public int Count => _set.Count;\\n     \\n }     \\n```",
                "codeTag": "Java"
            },
            {
                "id": 573064,
                "title": "neat-c-solution-using-the-framework-binarysearch",
                "content": "```\\npublic class MedianFinder\\n    {\\n        private readonly List<int> store;\\n\\n        public MedianFinder()\\n        {\\n            store = new List<int, int>();\\n        }\\n\\n        public void AddNum(int num)\\n        {\\n            int index = store.BinarySearch(num);\\n            // If value is not found and value is less than one or more elements in array,\\n            // the negative number returned is the bitwise complement of the index of the first element that is larger than value.\\n            index = index >= 0 ? index : ~index;\\n            store.Insert(index, num);\\n        }\\n\\n        public double FindMedian()\\n        {\\n            int count = store.Count;\\n            return count % 2 != 0 ? \\n                store[count / 2] : \\n                ((double)(store[count / 2 - 1] + store[count / 2])) / 2;\\n        }\\n    }\\n```\\n\\t",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "```\\npublic class MedianFinder\\n    {\\n        private readonly List<int> store;\\n\\n        public MedianFinder()\\n        {\\n            store = new List<int, int>();\\n        }\\n\\n        public void AddNum(int num)\\n        {\\n            int index = store.BinarySearch(num);\\n            // If value is not found and value is less than one or more elements in array,\\n            // the negative number returned is the bitwise complement of the index of the first element that is larger than value.\\n            index = index >= 0 ? index : ~index;\\n            store.Insert(index, num);\\n        }\\n\\n        public double FindMedian()\\n        {\\n            int count = store.Count;\\n            return count % 2 != 0 ? \\n                store[count / 2] : \\n                ((double)(store[count / 2 - 1] + store[count / 2])) / 2;\\n        }\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 228442,
                "title": "java-solution-with-tree-o-log-n-insertion-and-lookup-explanation",
                "content": "The intution behind the solution is pretty straightforward. We will get a random stream of numbers. We want to repeateadly find median from this stream. \\nThis tells us we need to store the numbers sorted in some DS where insert and find middle is fairly quick. This leads me to Priority Queue and Tree. \\n\\nI personally prefered implementing Tree since Queue solution felt quiet simple to me and would not make an interviewer very happy (IMHO).\\n\\nNow I am adding 2 extra fields at every node along with the usual value, left and right: leftCount, rightCount. This helps me in findMedian if i want to get to index 5 and root\\'s left has 2 nodes i can just go to right directly.\\n\\nNode object used for Tree:\\n\\n```private class Node {\\n        private int value;\\n        private Node left;\\n        private Node right;\\n        private int leftCount;\\n        private int rightCount;\\n\\n        public Node(int value) {\\n            this.value = value;\\n        }\\n    }\\n```\\n\\nAdd an element:\\nWe compare to root and then either go left or right depending on value comparison. Whichever direction we go, we increment the counter.\\n\\n```\\n    private Node root;\\n    public void addNum(int num) {\\n        if (root == null) {\\n            root = new Node(num);\\n        } else {\\n            addNode(root, num);\\n        }\\n    }\\n\\t\\n\\tprivate void addNode(Node root, int num) {\\n        if (root.value < num) {\\n            root.rightCount++;\\n            if (root.right == null) {\\n                root.right = new Node(num);\\n            } else {\\n                addNode(root.right, num);\\n            }\\n        } else {\\n            root.leftCount++;\\n            if (root.left == null) {\\n                root.left = new Node(num);\\n            } else {\\n                addNode(root.left, num);\\n            }\\n        }\\n    }\\n```\\n\\t\\nFind Median:\\nWe keep an indexSoFar variable which tells us the current node index if left==null. \\n```\\npublic double findMedian() {\\n        if (root == null) {\\n            throw new RuntimeException(\"No element present\");\\n        }\\n\\n        int size = root.leftCount + root.rightCount + 1;\\n        double value;\\n        if (size % 2 == 0) {\\n            value = (double) findNode(size / 2 - 1) / 2;\\n            value += (double) findNode(size / 2) / 2;\\n        } else {\\n            value = findNode(size / 2);\\n        }\\n\\n        return value;\\n    }\\n\\t\\n\\tprivate int findNode(int indexToReturn) {\\n        int indexSoFar = 0;\\n        Node node = root;\\n\\n        while (node != null) {\\n\\t\\t   // Reached Index, return current\\n            if (indexSoFar + node.leftCount == indexToReturn) {\\n                return node.value;\\n            } \\n\\t\\t\\t// Index is on left, go to left\\n\\t\\t\\telse if (indexSoFar + node.leftCount > indexToReturn) {\\n                node = node.left;\\n            } \\n\\t\\t\\t// Index is on right, go to right\\n\\t\\t\\telse {\\n                indexSoFar += node.leftCount + 1;\\n                node = node.right;\\n            }\\n        }\\n\\n        // This should never happen\\n        throw new RuntimeException(\"Something is wrong with FindNode. Looking for index: \" + indexToReturn);\\n    }\\n```\\n\\nA few improvisations can be done to make findMedian O(1):\\n- Tree can be rebalanced perodically - maybe asyncronously. This will bring median much closer to root.\\n- Do not necessarily need to keep right count. That can be removed if we keep size variable at global level.\\n- For even scenarios we can optimize so we dont have to perform find size/2-1 and size/2 seperately - fairly straightforward.",
                "solutionTags": [
                    "Tree",
                    "Depth-First Search"
                ],
                "code": "```private class Node {\\n        private int value;\\n        private Node left;\\n        private Node right;\\n        private int leftCount;\\n        private int rightCount;\\n\\n        public Node(int value) {\\n            this.value = value;\\n        }\\n    }\\n```\n```\\n    private Node root;\\n    public void addNum(int num) {\\n        if (root == null) {\\n            root = new Node(num);\\n        } else {\\n            addNode(root, num);\\n        }\\n    }\\n\\t\\n\\tprivate void addNode(Node root, int num) {\\n        if (root.value < num) {\\n            root.rightCount++;\\n            if (root.right == null) {\\n                root.right = new Node(num);\\n            } else {\\n                addNode(root.right, num);\\n            }\\n        } else {\\n            root.leftCount++;\\n            if (root.left == null) {\\n                root.left = new Node(num);\\n            } else {\\n                addNode(root.left, num);\\n            }\\n        }\\n    }\\n```\n```\\npublic double findMedian() {\\n        if (root == null) {\\n            throw new RuntimeException(\"No element present\");\\n        }\\n\\n        int size = root.leftCount + root.rightCount + 1;\\n        double value;\\n        if (size % 2 == 0) {\\n            value = (double) findNode(size / 2 - 1) / 2;\\n            value += (double) findNode(size / 2) / 2;\\n        } else {\\n            value = findNode(size / 2);\\n        }\\n\\n        return value;\\n    }\\n\\t\\n\\tprivate int findNode(int indexToReturn) {\\n        int indexSoFar = 0;\\n        Node node = root;\\n\\n        while (node != null) {\\n\\t\\t   // Reached Index, return current\\n            if (indexSoFar + node.leftCount == indexToReturn) {\\n                return node.value;\\n            } \\n\\t\\t\\t// Index is on left, go to left\\n\\t\\t\\telse if (indexSoFar + node.leftCount > indexToReturn) {\\n                node = node.left;\\n            } \\n\\t\\t\\t// Index is on right, go to right\\n\\t\\t\\telse {\\n                indexSoFar += node.leftCount + 1;\\n                node = node.right;\\n            }\\n        }\\n\\n        // This should never happen\\n        throw new RuntimeException(\"Something is wrong with FindNode. Looking for index: \" + indexToReturn);\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74098,
                "title": "java-solution-using-bst-with-explanation-beats-99-at-time-of-posting",
                "content": "The idea is to use a BST to store the stream of integers. When adding nodes to the tree, we keep a pointer to the median node (middle node if odd number of elements, smaller of the two middle nodes if even number of elements).\\n\\nTwo helper functions - getNext and getPrev, allow us to update the median node.\\n\\nWhen should the median node be updated? Only two cases, both considering we have just added a node to the BST:\\n\\n1) We have an even number of elements, and the value added was less than the median value.\\n\\n2) We have an odd number of elements, and the value added was higher or equal to the median value.\\n\\n```\\nclass Node {\\n    int val;\\n    Node right;\\n    Node left;\\n    Node parent;\\n    public Node(int val){this.val = val;}\\n}\\n\\npublic class MedianFinder {\\n    Node tree;\\n    Node medianNode;\\n    int numElements = 0;\\n    boolean addedLower = false;\\n    \\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        Node newNode = new Node(num);\\n        addNode(tree, newNode);\\n        numElements++;\\n        if (num < medianNode.val){\\n            addedLower = true;\\n        } else {\\n            addedLower = false;\\n        }\\n        updateMedianNode();\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        // even number of elements\\n        if (numElements % 2 == 0){\\n            double num1 = medianNode.val;\\n            double num2 = getNext(medianNode).val;\\n            return (num1+num2)/2.0;\\n        }\\n        // odd number of elements\\n        return medianNode.val;\\n    }\\n    \\n    // add node to BST\\n    private void addNode(Node curr, Node newNode){\\n        if (curr == null){\\n            tree = newNode;\\n            medianNode = tree;\\n            return;\\n        }\\n        if (curr.val > newNode.val){\\n            if (curr.left == null){\\n                curr.left = newNode;\\n                curr.left.parent = curr;\\n            } else {\\n                addNode(curr.left, newNode);\\n            }\\n        } else if (curr.val <= newNode.val){\\n            if (curr.right == null){\\n                curr.right = newNode;\\n                curr.right.parent = curr;\\n            } else {\\n                addNode(curr.right, newNode);   \\n            }\\n        }\\n    }\\n    \\n    // keep pointing to median\\n    private void updateMedianNode(){\\n        if (numElements == 1){\\n            return;\\n        }\\n        if (addedLower && numElements % 2 == 0){\\n            medianNode = getPrev(medianNode);\\n            return;\\n        }\\n        if (!addedLower && numElements % 2 == 1){\\n            medianNode = getNext(medianNode);\\n        }\\n    }\\n    \\n    // get the inorder succesor\\n    private Node getNext(Node curr){\\n        if (curr.right != null){\\n            curr = curr.right;\\n            while (curr.left != null){\\n                curr = curr.left;\\n            }\\n            return curr;\\n        } else {\\n            Node parent = curr.parent;\\n            while (parent != null && parent.left != curr){\\n                curr = parent;\\n                parent = curr.parent;\\n            }\\n            return parent;\\n        }\\n        \\n    }\\n    \\n    // get the inorder predecessor\\n    private Node getPrev(Node curr){\\n        if (curr.left != null){\\n            curr = curr.left;\\n            while (curr.right != null){\\n                curr = curr.right;\\n            }\\n            return curr;\\n        } else {\\n            Node parent = curr.parent;\\n            while (parent != null && parent.right != curr){\\n                curr = parent;\\n                parent = curr.parent;\\n            }\\n            return parent;\\n        }\\n    }\\n};\\n\\n// Your MedianFinder object will be instantiated and called as such:\\n// MedianFinder mf = new MedianFinder();\\n// mf.addNum(1);\\n// mf.findMedian();\\n```",
                "solutionTags": [],
                "code": "```\\nclass Node {\\n    int val;\\n    Node right;\\n    Node left;\\n    Node parent;\\n    public Node(int val){this.val = val;}\\n}\\n\\npublic class MedianFinder {\\n    Node tree;\\n    Node medianNode;\\n    int numElements = 0;\\n    boolean addedLower = false;\\n    \\n    // Adds a number into the data structure.\\n    public void addNum(int num) {\\n        Node newNode = new Node(num);\\n        addNode(tree, newNode);\\n        numElements++;\\n        if (num < medianNode.val){\\n            addedLower = true;\\n        } else {\\n            addedLower = false;\\n        }\\n        updateMedianNode();\\n    }\\n\\n    // Returns the median of current data stream\\n    public double findMedian() {\\n        // even number of elements\\n        if (numElements % 2 == 0){\\n            double num1 = medianNode.val;\\n            double num2 = getNext(medianNode).val;\\n            return (num1+num2)/2.0;\\n        }\\n        // odd number of elements\\n        return medianNode.val;\\n    }\\n    \\n    // add node to BST\\n    private void addNode(Node curr, Node newNode){\\n        if (curr == null){\\n            tree = newNode;\\n            medianNode = tree;\\n            return;\\n        }\\n        if (curr.val > newNode.val){\\n            if (curr.left == null){\\n                curr.left = newNode;\\n                curr.left.parent = curr;\\n            } else {\\n                addNode(curr.left, newNode);\\n            }\\n        } else if (curr.val <= newNode.val){\\n            if (curr.right == null){\\n                curr.right = newNode;\\n                curr.right.parent = curr;\\n            } else {\\n                addNode(curr.right, newNode);   \\n            }\\n        }\\n    }\\n    \\n    // keep pointing to median\\n    private void updateMedianNode(){\\n        if (numElements == 1){\\n            return;\\n        }\\n        if (addedLower && numElements % 2 == 0){\\n            medianNode = getPrev(medianNode);\\n            return;\\n        }\\n        if (!addedLower && numElements % 2 == 1){\\n            medianNode = getNext(medianNode);\\n        }\\n    }\\n    \\n    // get the inorder succesor\\n    private Node getNext(Node curr){\\n        if (curr.right != null){\\n            curr = curr.right;\\n            while (curr.left != null){\\n                curr = curr.left;\\n            }\\n            return curr;\\n        } else {\\n            Node parent = curr.parent;\\n            while (parent != null && parent.left != curr){\\n                curr = parent;\\n                parent = curr.parent;\\n            }\\n            return parent;\\n        }\\n        \\n    }\\n    \\n    // get the inorder predecessor\\n    private Node getPrev(Node curr){\\n        if (curr.left != null){\\n            curr = curr.left;\\n            while (curr.right != null){\\n                curr = curr.right;\\n            }\\n            return curr;\\n        } else {\\n            Node parent = curr.parent;\\n            while (parent != null && parent.right != curr){\\n                curr = parent;\\n                parent = curr.parent;\\n            }\\n            return parent;\\n        }\\n    }\\n};\\n\\n// Your MedianFinder object will be instantiated and called as such:\\n// MedianFinder mf = new MedianFinder();\\n// mf.addNum(1);\\n// mf.findMedian();\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74131,
                "title": "solution-using-std-multiset-and-two-iterators",
                "content": "Here is a solution using C++11 std::multiset.\\nIt keep two iterators synchronized on lower and upper median.\\nIt relies on the specification of C++11 multiset#insert that states that insertions of keys occurs at the upper bound of the range of keys with same values.\\n\\n    class MedianFinder {\\n        std::multiset<int> data;\\n        std::multiset<int>::iterator low_median, up_median;\\n    public:\\n        MedianFinder() : low_median(data.end()), up_median(data.end()) {}\\n    \\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            // keep size BEFORE insertion\\n            const size_t n = data.size();\\n            \\n            // do the insertion; we need the element in place to make\\n            // sure our iterator shifting will point to it if necessary\\n            data.insert(num);\\n            \\n            if (!n) {\\n                // no elements before; use the new data at single median\\n                low_median = up_median = data.begin();\\n            } else if (n & 1) {\\n                // odd size, low and up median are the same point\\n                if (num < *up_median) {\\n                    // num went on left side of single median, we use the \\n                    // predecessor  of the median as the new low median\\n                    --low_median;\\n                } else { // num >= up\\n                    // num wen on the right side of single median, use the \\n                    // successor of median as new up\\n                    ++up_median;\\n                }\\n            } else {\\n                // even size, we have two different low and up median\\n                if (num > *low_median && num < *up_median) {\\n                    // we are in-between, by definition the new value \\n                    // is the new single median\\n                    ++low_median;\\n                    --up_median;\\n                } else if (num >= *up_median) {\\n                    // since C++11, insert will put the new value at\\n                    // end of range of values equal to up_median if num \\n                    // is equal to up_median; if greater it will also\\n                    // be to the right. So right side has one item more:\\n                    ++low_median;\\n                } else { // num <= low_median < up_median\\n                    // since C++11, insert will put the new value at\\n                    // end of rand; so low_median iterator may not be\\n                    // valid anymore; we use the decremented up_median\\n                    low_median = --up_median;\\n                }\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            return 0.5 * (static_cast<double>(*low_median) + *up_median);\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf;\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "solutionTags": [
                    "C++",
                    "Iterator"
                ],
                "code": "Here is a solution using C++11 std::multiset.\\nIt keep two iterators synchronized on lower and upper median.\\nIt relies on the specification of C++11 multiset#insert that states that insertions of keys occurs at the upper bound of the range of keys with same values.\\n\\n    class MedianFinder {\\n        std::multiset<int> data;\\n        std::multiset<int>::iterator low_median, up_median;\\n    public:\\n        MedianFinder() : low_median(data.end()), up_median(data.end()) {}\\n    \\n        // Adds a number into the data structure.\\n        void addNum(int num) {\\n            // keep size BEFORE insertion\\n            const size_t n = data.size();\\n            \\n            // do the insertion; we need the element in place to make\\n            // sure our iterator shifting will point to it if necessary\\n            data.insert(num);\\n            \\n            if (!n) {\\n                // no elements before; use the new data at single median\\n                low_median = up_median = data.begin();\\n            } else if (n & 1) {\\n                // odd size, low and up median are the same point\\n                if (num < *up_median) {\\n                    // num went on left side of single median, we use the \\n                    // predecessor  of the median as the new low median\\n                    --low_median;\\n                } else { // num >= up\\n                    // num wen on the right side of single median, use the \\n                    // successor of median as new up\\n                    ++up_median;\\n                }\\n            } else {\\n                // even size, we have two different low and up median\\n                if (num > *low_median && num < *up_median) {\\n                    // we are in-between, by definition the new value \\n                    // is the new single median\\n                    ++low_median;\\n                    --up_median;\\n                } else if (num >= *up_median) {\\n                    // since C++11, insert will put the new value at\\n                    // end of range of values equal to up_median if num \\n                    // is equal to up_median; if greater it will also\\n                    // be to the right. So right side has one item more:\\n                    ++low_median;\\n                } else { // num <= low_median < up_median\\n                    // since C++11, insert will put the new value at\\n                    // end of rand; so low_median iterator may not be\\n                    // valid anymore; we use the decremented up_median\\n                    low_median = --up_median;\\n                }\\n            }\\n        }\\n    \\n        // Returns the median of current data stream\\n        double findMedian() {\\n            return 0.5 * (static_cast<double>(*low_median) + *up_median);\\n        }\\n    };\\n    \\n    // Your MedianFinder object will be instantiated and called as such:\\n    // MedianFinder mf;\\n    // mf.addNum(1);\\n    // mf.findMedian();",
                "codeTag": "Java"
            },
            {
                "id": 2233100,
                "title": "c-easy-to-understand-fully-commented-explanation-too",
                "content": "Here our main objective is we want the middle element/s(we are not interested in other elements as soon as we get middle one/s) . So we can do it in array but every time we encounter new element we have to fix its position in sorted order which will take O(N) time which seems normal but for a stream of data it is a hell lot of processing. \\nNow thinking of this case we can think of priority queues because it guarantees getMin and getMax in O(1) time if some how we just make middle on top(min/max) we can solve this problem.\\nSo here we can put constratint that the min heap\\'s smallest element should be gerater than or equal to max element of max heap , we are putting this becoz later on if we want the top elements of any heap we can get the middle ones only.\\nTo maintain this we will also ensure that the heaps are balanced in terms of size(no. of elements) (i.e., their size should not differ by more than 1 unit).\\n***To sum up we can achieve this by following below steps:\\n1) Use min heap and max heap.\\n2) the max of max heap should be less than or equal to min of min heap.\\n3) keep the heaps balanced(only diff of 1 unit is allowed).***\\n```\\nclass MedianFinder {\\npublic:\\n    // we will use heaps (min and max) to get the median using . We will try to keep them balanced on basis of their size so that at    end we will have the medians at top.\\n    // we are not interested in other numbers just the middle one thats why using heap combo of min and max .\\n\\t// we are using min and max beacuse we will maintain our heaps in a way that max of max heap will always be lesser than equal to min of min Heap in this way we be able to get the medians\\n    priority_queue<int,vector<int>,greater<int>> minH;\\n    priority_queue<int> maxH;\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        // we are trying to maintain a stream i.e., maxH.top() <= minH.top() in that way only we can assure the medians\\n        if(maxH.empty() || num<maxH.top()){\\n            maxH.push(num);\\n        }\\n        // incase we encounter greater number than the one present in maxH we need to add it in minH \\n        else{\\n            minH.push(num);\\n        }\\n        // we are trying to balance our heaps the max diff of size can be only 1\\n        // therefore popping the extra from that heap and pushing that in the other one\\n        if(maxH.size()>minH.size()+1){\\n            minH.push(maxH.top());\\n            maxH.pop();\\n        }\\n        else if(minH.size()>maxH.size()+1){\\n            maxH.push(minH.top());\\n            minH.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        // this operation is going to be O(1)\\n        // incase of even entries\\n        if(maxH.size() == minH.size()){\\n            // we will find mean of middle 2 entries and return \\n            return (maxH.top() + minH.top()) / 2.0;\\n        }\\n        // incase of odd entries:\\n        // our median will be present in that heap which has greater size\\n        else{\\n            return maxH.size() > minH.size() ? maxH.top() : minH.top();\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```\\n**Please do upvote guys that helps me to post more solutions like this.**",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    // we will use heaps (min and max) to get the median using . We will try to keep them balanced on basis of their size so that at    end we will have the medians at top.\\n    // we are not interested in other numbers just the middle one thats why using heap combo of min and max .\\n\\t// we are using min and max beacuse we will maintain our heaps in a way that max of max heap will always be lesser than equal to min of min Heap in this way we be able to get the medians\\n    priority_queue<int,vector<int>,greater<int>> minH;\\n    priority_queue<int> maxH;\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        // we are trying to maintain a stream i.e., maxH.top() <= minH.top() in that way only we can assure the medians\\n        if(maxH.empty() || num<maxH.top()){\\n            maxH.push(num);\\n        }\\n        // incase we encounter greater number than the one present in maxH we need to add it in minH \\n        else{\\n            minH.push(num);\\n        }\\n        // we are trying to balance our heaps the max diff of size can be only 1\\n        // therefore popping the extra from that heap and pushing that in the other one\\n        if(maxH.size()>minH.size()+1){\\n            minH.push(maxH.top());\\n            maxH.pop();\\n        }\\n        else if(minH.size()>maxH.size()+1){\\n            maxH.push(minH.top());\\n            minH.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        // this operation is going to be O(1)\\n        // incase of even entries\\n        if(maxH.size() == minH.size()){\\n            // we will find mean of middle 2 entries and return \\n            return (maxH.top() + minH.top()) / 2.0;\\n        }\\n        // incase of odd entries:\\n        // our median will be present in that heap which has greater size\\n        else{\\n            return maxH.size() > minH.size() ? maxH.top() : minH.top();\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2008525,
                "title": "median-solution-intuition-why-heaps-answer-to-follow-ups-o-logn-add-o-1-find-median",
                "content": "**Intution** : For understanding the intution of this problem lets take some sorted sample inputs.\\n\\n**Input 1 when size of array is odd** : [1,2,3,4,5]\\nWhat is the median? if we consider this as simple mathmatical problem median element will be n/2 element. So it will be 3.\\n\\nlet say we divied this array in 2 parts\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t1,2,3  ||||||   4,5\\nso in case when n is odd our median element is first element on the left of divider(i.e. ||||||).\\n\\nnow lets say we want to add element 0 in above arrangement. where this 0 element should go,\\nis it on the left of divider or on the right, in such a way sorting order is maintained?\\n\\n0 is less then 3 so it should go on the left of divider. \\n\\nso arrangement will become \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t0,1,2,3  ||||||   4,5\\n\\nwhat will be the median now?\\nsince n now become even if we consider this as simple mathematical probelm then median will become average of 2 middle element, so median is (2+3)/2 = 1.5 \\n\\nlet say we now want to add 7. where this element should be placed ? it should be on the right of divider.\\n\\n0,1,2,3  ||||||   4,5,7\\n\\nwhat will be the median? it will 3. (7/2th element).\\n\\nNow if we keep getting elements that are less then 3 then left size will keep growing. so we need to balance number of element on each side of divider( that is element should jump from left to right or right to left but we should make a contract that element can jump only from left to right or from right to left).\\n\\nLet say we made a contract the size different between left-right<=1. That mean either both sides of the divider are equal or  left can have atmost 1 element greater then right. If due to addition of some element we are breaking this balancing then we need rebalance( or move element from left to right) in order to balance the of divider.\\n\\nlets consider this arrangement.\\n\\n0,1  ||||||   4\\n\\n**what is the median ? it is 1st element from left of divider (n=3, n/2= 1) so answer is 1. and this element is the maximum element from all elements on the left hand side? So that mean we are only intreseted in the max of left. Can\\'t we max it max heap then?\\n**\\n\\nlet say we want to add -1 in above arrangement.\\n\\n-1 will go on the left as it less then 1 but if we do this left part will have 2 more element the right.\\nthen simple solution is move 1 from left to right and then add -1 so arrangement will become.\\n\\n-1.0 ||||| 1,4\\n\\nwhat is the median?  it will  be avarage of middle elements (0+1)/2 = 0.5 if you observer 0 is max element of left and 1 is min element of right. so we are only intersted in min and max elemenet.\\nlets represet left part with max heap then and right part with min heap.\\n\\nwhen n is even or sizeof(minheap) == sizeof(maxheap) in this case just peek max of left and peek min of right and divide it by 2.\\n\\n\\nNow you just need to figure out do you need to move element from left to right or where to add element. Trying tracing some sample input. Figure it out. And if you still need any help feel free to debug and go through the code.\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n```\\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> maxHeap, minHeap;\\n    public MedianFinder() {\\n         maxHeap = new PriorityQueue<>(Comparator.reverseOrder());\\n         minHeap = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.size()==0)\\n            maxHeap.add(num);\\n        else if(maxHeap.size()>minHeap.size()) {\\n            if(num>maxHeap.peek()) {\\n                minHeap.add(num);\\n            }else {\\n                int temp = maxHeap.remove();\\n                minHeap.add(temp);\\n                maxHeap.add(num);\\n            }\\n        }else {\\n            if(num<maxHeap.peek() || num<minHeap.peek()) {\\n                maxHeap.add(num);\\n            }\\n            else {\\n                int temp = minHeap.remove();\\n                minHeap.add(num);\\n                maxHeap.add(temp);\\n                \\n            }\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap==null || maxHeap.size()==0)\\n            return -1d;\\n        if(maxHeap.size()==minHeap.size()) {\\n            return (maxHeap.peek()+minHeap.peek())*1.0/2;\\n        }else{\\n            return (double)maxHeap.peek();\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```\\nT(n) from add is O(logn) T(n) from find median is O(1)\\nCheers ~ ~ Please upvote if it helps.\\n\\nYou can comment in the post if you still need help in understanding the idea behind the problem.\\n\\n**Follow up questions**\\n1) SInce number will be of range [0,100] maintain an frequencey array of size 101. we already no if number of element are n and is odd then answer is n/2th element and if it even it will average of middle 2 element. Just do one pass and find the element. SInce arary size of 100. T(n) will O(1) for both element.\\n\\n2) 99% of the element can be stored like we did in above approach but rest 1 percent number we need to maintain two tree map/ bst to maintain the frequencey. one tree map will contain element smaller the 0 and one will contain element greater then 100. Rest of the logic will remain same as the mentioned for appraoch 1. \\n\\nIn both T(n) will be O(1) for add find median.\\n",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> maxHeap, minHeap;\\n    public MedianFinder() {\\n         maxHeap = new PriorityQueue<>(Comparator.reverseOrder());\\n         minHeap = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.size()==0)\\n            maxHeap.add(num);\\n        else if(maxHeap.size()>minHeap.size()) {\\n            if(num>maxHeap.peek()) {\\n                minHeap.add(num);\\n            }else {\\n                int temp = maxHeap.remove();\\n                minHeap.add(temp);\\n                maxHeap.add(num);\\n            }\\n        }else {\\n            if(num<maxHeap.peek() || num<minHeap.peek()) {\\n                maxHeap.add(num);\\n            }\\n            else {\\n                int temp = minHeap.remove();\\n                minHeap.add(num);\\n                maxHeap.add(temp);\\n                \\n            }\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap==null || maxHeap.size()==0)\\n            return -1d;\\n        if(maxHeap.size()==minHeap.size()) {\\n            return (maxHeap.peek()+minHeap.peek())*1.0/2;\\n        }else{\\n            return (double)maxHeap.peek();\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1726087,
                "title": "easy-java-solution-with-full-explanation-using-heap-and-priorityqueues",
                "content": "Please upvote it if you find it helpful and do comment in case of any doubt. \\n\\n```\\nclass MedianFinder {\\n    \\n    /*Take two heaps\\n    \\n    1. maxHeap (Returns the largest number from the group)- stores all the\\n    numbers smaller than the median.\\n    2. minHeap (Returns the smallest number from the group) - stores all the\\n    numbers greater than the median.\\n    3. If the size of both heaps are equal then return the average of the\\n    largest number from the maxHeap and the smallest number from the minHeap.\\n    4. If size are not equal and minHeap has the size + 1 elements in it then\\n    transfer the smallest from that one to minHeap since it would become the\\n    largest and then the size would be equal so that we can take the average of\\n    both numbers.\\n    5. If the size is not greater by size + 1 then simply the minHeap element\\n    which is the largest is the median since there are total odd numbers\\n    present.\\n    \\n    */\\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>\\n        (Collections.reverseOrder());\\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.isEmpty() || maxHeap.peek() >= num) {\\n            maxHeap.add(num);\\n        }\\n        else {\\n            minHeap.add(num);\\n        }\\n        \\n        if(maxHeap.size() > minHeap.size() + 1) {\\n            minHeap.add(maxHeap.poll());\\n        }\\n        else if(maxHeap.size() < minHeap.size()) {\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap.size() == minHeap.size()) {\\n            return ((maxHeap.peek() + minHeap.peek())/2.0);\\n        }\\n        else {\\n            return maxHeap.peek();\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n    \\n    /*Take two heaps\\n    \\n    1. maxHeap (Returns the largest number from the group)- stores all the\\n    numbers smaller than the median.\\n    2. minHeap (Returns the smallest number from the group) - stores all the\\n    numbers greater than the median.\\n    3. If the size of both heaps are equal then return the average of the\\n    largest number from the maxHeap and the smallest number from the minHeap.\\n    4. If size are not equal and minHeap has the size + 1 elements in it then\\n    transfer the smallest from that one to minHeap since it would become the\\n    largest and then the size would be equal so that we can take the average of\\n    both numbers.\\n    5. If the size is not greater by size + 1 then simply the minHeap element\\n    which is the largest is the median since there are total odd numbers\\n    present.\\n    \\n    */\\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<>\\n        (Collections.reverseOrder());\\n    PriorityQueue<Integer> minHeap = new PriorityQueue<>();\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.isEmpty() || maxHeap.peek() >= num) {\\n            maxHeap.add(num);\\n        }\\n        else {\\n            minHeap.add(num);\\n        }\\n        \\n        if(maxHeap.size() > minHeap.size() + 1) {\\n            minHeap.add(maxHeap.poll());\\n        }\\n        else if(maxHeap.size() < minHeap.size()) {\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap.size() == minHeap.size()) {\\n            return ((maxHeap.peek() + minHeap.peek())/2.0);\\n        }\\n        else {\\n            return maxHeap.peek();\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1568078,
                "title": "java-heap-priorityqueue-simple-o-1-for-findmedian-and-o-logn-for-addnum",
                "content": "solution is to use 2 priorityQueues and keeping 1st half of the elements in one and 2nd half in another, [O(1) for findMedian() and O(logn) for addNum()]\\n\\n\\nin oder to keep the half the number of elements in both priorityQueues, we need the following conditions:-\\n\\n```\\nsay,\\n        small is max heap\\n        large is min heap\\n```\\n```\\n        if (size % 2 == 0) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }        \\n```\\nif the size is even, whichever is smallest out of `large` or new `num` will be added to `small`,\\nelse whichever is largest out of `small`  or new `num` will be added to `large`.\\n\\n `small.peek()` will always have the median number when totals elements(`small.size() + large.size()`) are odd because whenever there are even elements the next element is added in `small` (which is first half of the all the elements).\\n\\nwhenever total elements are even, the median will be  `(large.peek() + small.peek())/2.0;`, \\n```\\n    PriorityQueue<Integer> small, large;\\n    public MedianFinder() {\\n        small = new PriorityQueue<>(Collections.reverseOrder()); //max heap\\n        large = new PriorityQueue<>(); //min heap\\n    }\\n\\n    public void addNum(int num) {\\n        int size = large.size() + small.size();\\n        if (size % 2 == 0) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }        \\n    }\\n\\n    public double findMedian() {\\n        int size = large.size() + small.size();\\n        if(size % 2 == 0){\\n\\t\\t//if even\\n            return (large.peek() + small.peek())/2.0;\\n        }\\n\\t\\t//if odd\\n        return small.peek();\\n    }\\n```\\n\\n**please ask questions if you don\\'t understand any part of the solution. Thank you!",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nsay,\\n        small is max heap\\n        large is min heap\\n```\n```\\n        if (size % 2 == 0) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }        \\n```\n```\\n    PriorityQueue<Integer> small, large;\\n    public MedianFinder() {\\n        small = new PriorityQueue<>(Collections.reverseOrder()); //max heap\\n        large = new PriorityQueue<>(); //min heap\\n    }\\n\\n    public void addNum(int num) {\\n        int size = large.size() + small.size();\\n        if (size % 2 == 0) {\\n            large.offer(num);\\n            small.offer(large.poll());\\n        } else {\\n            small.offer(num);\\n            large.offer(small.poll());\\n        }        \\n    }\\n\\n    public double findMedian() {\\n        int size = large.size() + small.size();\\n        if(size % 2 == 0){\\n\\t\\t//if even\\n            return (large.peek() + small.peek())/2.0;\\n        }\\n\\t\\t//if odd\\n        return small.peek();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1331114,
                "title": "c-double-heap-solution-explained-100-time-25-space",
                "content": "The base idea here is to keep constanly the data received into 2 halves and keep rebalancing them as we go inserting more.\\n\\nTo do so, we will create 2 heaps:\\n* `lows` is a maxheap that will collect the lower half of the values;\\n* `highs`, specularly, is a minhap that will collect the upper half.\\n\\nWe will do nothing in the constructor and move on with the `addNum` method, in which we will take the provided input `val` and:\\n* push `val` into `lows` if `lows` had no previous elements or `val < lows.top()`;\\n* push `val` into `highs` otherwise;\\n* rebalance the heaps to make sure that `lows` is never smaller and their difference in size is never `> 1`, moving the currently top element from one to the other.\\n\\nIn the `findMedian` method we can go and, if the number of provided elements so far is odd (ie: `lows.size() > highs.size()`) we will just return `lows.tops()`, otherwise we will return the average of both `.top()`s, since they are the central values :)\\n\\nThe code:\\n\\n```cpp\\nclass MedianFinder {\\n    priority_queue<int> lows;\\n    priority_queue<int, vector<int>, greater<int>> highs;\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {}\\n    \\n    void addNum(int val) {\\n        // deciding in which half val goes:\\n        if (lows.empty() || val < lows.top()) lows.push(val);\\n        else highs.push(val);\\n        // rebalancing to avoid higher becoming bigger\\n        if (lows.size() < highs.size()) {\\n            lows.push(highs.top());\\n            highs.pop();\\n        }\\n        // or lows growing more than 1 element from the size of highs\\n        else if (lows.size() > highs.size() + 1) {\\n            highs.push(lows.top());\\n            lows.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        // computing the result depengn if we have seen odd amount of elements or not\\n        return lows.size() > highs.size() ? lows.top() : (lows.top() + highs.top()) / 2.0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```cpp\\nclass MedianFinder {\\n    priority_queue<int> lows;\\n    priority_queue<int, vector<int>, greater<int>> highs;\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {}\\n    \\n    void addNum(int val) {\\n        // deciding in which half val goes:\\n        if (lows.empty() || val < lows.top()) lows.push(val);\\n        else highs.push(val);\\n        // rebalancing to avoid higher becoming bigger\\n        if (lows.size() < highs.size()) {\\n            lows.push(highs.top());\\n            highs.pop();\\n        }\\n        // or lows growing more than 1 element from the size of highs\\n        else if (lows.size() > highs.size() + 1) {\\n            highs.push(lows.top());\\n            lows.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        // computing the result depengn if we have seen odd amount of elements or not\\n        return lows.size() > highs.size() ? lows.top() : (lows.top() + highs.top()) / 2.0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1245501,
                "title": "simple-explained-javascript-heap-based-solution",
                "content": "**Approach**: Here we are always diving array elements in 2 parts, \\'left\\' and \\'right\\'. They both are heaps\\n\\'left\\' is max heap which will store the first half of small value of the total nums\\n\\'right\\' is min heap which will store second half of large value of the total nums\\n\\n**Inserting a new num:**\\nWhenever we are inserting a number we will check if it will go in the \\'left\\' or the \\'right\\' part. \\nIf the value is smaller than or equal to the maximum value of the \\'left\\' part then it will go in the \\'left\\' part\\nIf the value is greater than or equal to the minimum value of the \\'right\\' part then it will go in the \\'right\\' part\\nWe will take care of some more conditions in the insertion process so that the difference of elements in both parts doesn\\'t exceed by 1. See the comments in \\'addNum\\' function.\\n\\n**Finding median:**\\nIf any of the heap is having more elements, (this difference will not be greater than 1) then its top value will be the median\\nOtherwise average of top values from both the heaps will be the median\\n\\n```\\n//Creating Heap datastructer in Javscript, as we don\\'t have it prebuilt  \\nclass Heap{\\n        constructor(type){\\n            this.type = type;\\n            this.data = [];\\n            this.data[0] = undefined;\\n        }\\n        getSize(){\\n            return this.data.length-1;\\n        }\\n        insert(value){\\n            this.data.push(value);\\n            if(this.data.length==2){\\n                return ;\\n            }\\n            let lastIndex = this.data.length-1;\\n            while(this.data[Math.floor(lastIndex/2)]!==undefined && this.compare(this.data[lastIndex],this.data[Math.floor(lastIndex/2)])>0){\\n                let temp = this.data[Math.floor(lastIndex/2)];\\n                this.data[Math.floor(lastIndex/2)] = this.data[lastIndex];\\n                this.data[lastIndex] = temp;\\n                lastIndex = Math.floor(lastIndex/2);\\n            }\\n        }\\n        //This returns a positive number if a is greater than b. Here meaing of being greater depends on the type of heap. For max heap it will return positive number if a>b and for min heap it will return positive number if a<b . \\n        compare(a,b){\\n            if(this.type===\"min\"){\\n                return b-a;\\n            }else{\\n                return a-b;\\n            }\\n        }\\n        removeTop(){\\n            let max = this.data[1];\\n            if(this.getSize()>1){\\n                this.data[1] = this.data.pop();\\n                this.heapify(1);\\n            }else{//If the size is 0 then just remove the element, no shifting and hipify will be applicable\\n                this.data.pop();\\n            }\\n            return max;\\n        }\\n        getTop(){\\n            let max = null;\\n            if(this.getSize()>=1){\\n                max = this.data[1];\\n            }\\n            return max;\\n        }\\n        heapify(pos){\\n            if(pos*2>this.data.length-1){\\n                //That means element at index \\'pos\\' is not having any child\\n                return;\\n            }\\n            if(\\n                (this.data[pos*2]!==undefined && this.compare(this.data[pos*2],this.data[pos])>0)\\n              || (this.data[pos*2+1]!==undefined && this.compare(this.data[pos*2+1],this.data[pos])>0)\\n              ){\\n                if(this.data[pos*2+1]===undefined || this.compare(this.data[pos*2+1],this.data[pos*2])<=0){\\n                    let temp = this.data[pos*2];\\n                    this.data[pos*2] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2);\\n                }else{\\n                    let temp = this.data[pos*2+1];\\n                    this.data[pos*2+1] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2+1);\\n                }\\n            }\\n        }\\n    }\\n\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.left = new Heap(\"max\");\\n    this.right = new Heap(\"min\");\\n};\\n\\n\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if(this.left.getSize()===0){//Lets\\'s put first element in left only\\n        this.left.insert(num);\\n        return ;\\n    }\\n    if(this.left.getSize()>this.right.getSize()){\\n        if(num<=this.left.getTop()){//As \\'left\\' was already having more values and the new value is also going to the left part, so after insertion, we will remove a value from left part and insert it to the right part, so the values in both the parts become equal\\n            this.left.insert(num);\\n            this.right.insert(this.left.removeTop());\\n        }else{\\n            this.right.insert(num);\\n        }\\n    }else if(this.right.getSize()>this.left.getSize()){//As \\'right\\' was already having more values and the new value is also going to the right part, so after insertion, we will remove a value from right part and insert it to the left part, so the values in both the parts become equal.\\n        if(num>=this.right.getTop()){\\n            this.right.insert(num);\\n            this.left.insert(this.right.removeTop());\\n        }else{\\n            this.left.insert(num);\\n        }\\n    }else {//If both the parts were having the same number of values, then we will just check and insert the new num in the relevant part. After this  insertion the part where we inserted the new num will have 1 element more than the other part, having a difference of 1 element is fine. \\n        if(num<=this.left.getTop()){\\n            this.left.insert(num);\\n        }else{\\n            this.right.insert(num);\\n        }\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if(this.left.getSize()>this.right.getSize()){\\n        return this.left.getTop();\\n    }else if(this.right.getSize()>this.left.getSize()){\\n        return this.right.getTop();\\n    }else{\\n        return (this.left.getTop()+this.right.getTop())/2;\\n    }\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n */",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "**Approach**: Here we are always diving array elements in 2 parts, \\'left\\' and \\'right\\'. They both are heaps\\n\\'left\\' is max heap which will store the first half of small value of the total nums\\n\\'right\\' is min heap which will store second half of large value of the total nums\\n\\n**Inserting a new num:**\\nWhenever we are inserting a number we will check if it will go in the \\'left\\' or the \\'right\\' part. \\nIf the value is smaller than or equal to the maximum value of the \\'left\\' part then it will go in the \\'left\\' part\\nIf the value is greater than or equal to the minimum value of the \\'right\\' part then it will go in the \\'right\\' part\\nWe will take care of some more conditions in the insertion process so that the difference of elements in both parts doesn\\'t exceed by 1. See the comments in \\'addNum\\' function.\\n\\n**Finding median:**\\nIf any of the heap is having more elements, (this difference will not be greater than 1) then its top value will be the median\\nOtherwise average of top values from both the heaps will be the median\\n\\n```\\n//Creating Heap datastructer in Javscript, as we don\\'t have it prebuilt  \\nclass Heap{\\n        constructor(type){\\n            this.type = type;\\n            this.data = [];\\n            this.data[0] = undefined;\\n        }\\n        getSize(){\\n            return this.data.length-1;\\n        }\\n        insert(value){\\n            this.data.push(value);\\n            if(this.data.length==2){\\n                return ;\\n            }\\n            let lastIndex = this.data.length-1;\\n            while(this.data[Math.floor(lastIndex/2)]!==undefined && this.compare(this.data[lastIndex],this.data[Math.floor(lastIndex/2)])>0){\\n                let temp = this.data[Math.floor(lastIndex/2)];\\n                this.data[Math.floor(lastIndex/2)] = this.data[lastIndex];\\n                this.data[lastIndex] = temp;\\n                lastIndex = Math.floor(lastIndex/2);\\n            }\\n        }\\n        //This returns a positive number if a is greater than b. Here meaing of being greater depends on the type of heap. For max heap it will return positive number if a>b and for min heap it will return positive number if a<b . \\n        compare(a,b){\\n            if(this.type===\"min\"){\\n                return b-a;\\n            }else{\\n                return a-b;\\n            }\\n        }\\n        removeTop(){\\n            let max = this.data[1];\\n            if(this.getSize()>1){\\n                this.data[1] = this.data.pop();\\n                this.heapify(1);\\n            }else{//If the size is 0 then just remove the element, no shifting and hipify will be applicable\\n                this.data.pop();\\n            }\\n            return max;\\n        }\\n        getTop(){\\n            let max = null;\\n            if(this.getSize()>=1){\\n                max = this.data[1];\\n            }\\n            return max;\\n        }\\n        heapify(pos){\\n            if(pos*2>this.data.length-1){\\n                //That means element at index \\'pos\\' is not having any child\\n                return;\\n            }\\n            if(\\n                (this.data[pos*2]!==undefined && this.compare(this.data[pos*2],this.data[pos])>0)\\n              || (this.data[pos*2+1]!==undefined && this.compare(this.data[pos*2+1],this.data[pos])>0)\\n              ){\\n                if(this.data[pos*2+1]===undefined || this.compare(this.data[pos*2+1],this.data[pos*2])<=0){\\n                    let temp = this.data[pos*2];\\n                    this.data[pos*2] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2);\\n                }else{\\n                    let temp = this.data[pos*2+1];\\n                    this.data[pos*2+1] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2+1);\\n                }\\n            }\\n        }\\n    }\\n\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.left = new Heap(\"max\");\\n    this.right = new Heap(\"min\");\\n};\\n\\n\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if(this.left.getSize()===0){//Lets\\'s put first element in left only\\n        this.left.insert(num);\\n        return ;\\n    }\\n    if(this.left.getSize()>this.right.getSize()){\\n        if(num<=this.left.getTop()){//As \\'left\\' was already having more values and the new value is also going to the left part, so after insertion, we will remove a value from left part and insert it to the right part, so the values in both the parts become equal\\n            this.left.insert(num);\\n            this.right.insert(this.left.removeTop());\\n        }else{\\n            this.right.insert(num);\\n        }\\n    }else if(this.right.getSize()>this.left.getSize()){//As \\'right\\' was already having more values and the new value is also going to the right part, so after insertion, we will remove a value from right part and insert it to the left part, so the values in both the parts become equal.\\n        if(num>=this.right.getTop()){\\n            this.right.insert(num);\\n            this.left.insert(this.right.removeTop());\\n        }else{\\n            this.left.insert(num);\\n        }\\n    }else {//If both the parts were having the same number of values, then we will just check and insert the new num in the relevant part. After this  insertion the part where we inserted the new num will have 1 element more than the other part, having a difference of 1 element is fine. \\n        if(num<=this.left.getTop()){\\n            this.left.insert(num);\\n        }else{\\n            this.right.insert(num);\\n        }\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if(this.left.getSize()>this.right.getSize()){\\n        return this.left.getTop();\\n    }else if(this.right.getSize()>this.left.getSize()){\\n        return this.right.getTop();\\n    }else{\\n        return (this.left.getTop()+this.right.getTop())/2;\\n    }\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n */",
                "codeTag": "Java"
            },
            {
                "id": 1165672,
                "title": "python-heapq-method",
                "content": "```\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        self.first = [] #max heap, to get the largest item in the first half\\n        self.second = [] #min heap, to get the smallest item in the second half\\n        \\n\\n    def addNum(self, num):\\n        heapq.heappush(self.first, -num)\\n        heapq.heappush(self.second, -(heapq.heappop(self.first)))\\n        if len(self.first) < len(self.second): #always keep the first half of list is bigger/equal to the second one\\n            heapq.heappush(self.first, -(heapq.heappop(self.second)))\\n        \\n\\n    def findMedian(self):\\n        if len(self.first) > len(self.second):\\n            return -(self.first[0]) #already heapified\\n        else:\\n            return (float(-(self.first[0]))+float(self.second[0]))/2 #already heapified\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        self.first = [] #max heap, to get the largest item in the first half\\n        self.second = [] #min heap, to get the smallest item in the second half\\n        \\n\\n    def addNum(self, num):\\n        heapq.heappush(self.first, -num)\\n        heapq.heappush(self.second, -(heapq.heappop(self.first)))\\n        if len(self.first) < len(self.second): #always keep the first half of list is bigger/equal to the second one\\n            heapq.heappush(self.first, -(heapq.heappop(self.second)))\\n        \\n\\n    def findMedian(self):\\n        if len(self.first) > len(self.second):\\n            return -(self.first[0]) #already heapified\\n        else:\\n            return (float(-(self.first[0]))+float(self.second[0]))/2 #already heapified\\n```",
                "codeTag": "Java"
            },
            {
                "id": 947563,
                "title": "c-priority-queue-with-explanation-with-runtime-160-ms-faster-than-95-80-of-c",
                "content": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    \\n    priority_queue<int> maxH; //for the first half of the elements\\n    priority_queue<int,vector<int>,greater<int>> minH; //for the second half of the elements\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        //by default we consider the element on the left side i.e. maxH\\n        if(maxH.empty() || maxH.top()>num){\\n            maxH.push(num);\\n        }\\n        else{\\n            minH.push(num);\\n        }\\n        //rebalance the heaps to have same size or difference of size is 1\\n        rebalance();\\n    }\\n    \\n    double findMedian() {\\n        //if the number of elements that means we have even number of elements-> ([2,3], the median is (2 + 3) / 2 = 2.5)\\n        if(maxH.size()==minH.size()){\\n            return (maxH.top()+minH.top())/2.0;\\n        }\\n        //if left side has greater number of elements then middle is on the left side\\n        if(maxH.size()>minH.size()){\\n            return maxH.top();\\n        }\\n        //if right side has greater number of elements then middle is on the right side\\n        else{\\n            return minH.top();\\n        }\\n    }\\n    void rebalance(){\\n        //if right side is greater (minH) then put 1 element of right side to left side(maxH) \\n        if(maxH.size()+1<minH.size()){\\n            maxH.push(minH.top());\\n            minH.pop();\\n        }\\n        //if left side is greater (maxH) then put 1 element of left side to right side(minH)\\n        else if(minH.size()+1<maxH.size()){\\n            minH.push(maxH.top());\\n            maxH.pop();\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    \\n    priority_queue<int> maxH; //for the first half of the elements\\n    priority_queue<int,vector<int>,greater<int>> minH; //for the second half of the elements\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        //by default we consider the element on the left side i.e. maxH\\n        if(maxH.empty() || maxH.top()>num){\\n            maxH.push(num);\\n        }\\n        else{\\n            minH.push(num);\\n        }\\n        //rebalance the heaps to have same size or difference of size is 1\\n        rebalance();\\n    }\\n    \\n    double findMedian() {\\n        //if the number of elements that means we have even number of elements-> ([2,3], the median is (2 + 3) / 2 = 2.5)\\n        if(maxH.size()==minH.size()){\\n            return (maxH.top()+minH.top())/2.0;\\n        }\\n        //if left side has greater number of elements then middle is on the left side\\n        if(maxH.size()>minH.size()){\\n            return maxH.top();\\n        }\\n        //if right side has greater number of elements then middle is on the right side\\n        else{\\n            return minH.top();\\n        }\\n    }\\n    void rebalance(){\\n        //if right side is greater (minH) then put 1 element of right side to left side(maxH) \\n        if(maxH.size()+1<minH.size()){\\n            maxH.push(minH.top());\\n            minH.pop();\\n        }\\n        //if left side is greater (maxH) then put 1 element of left side to right side(minH)\\n        else if(minH.size()+1<maxH.size()){\\n            minH.push(maxH.top());\\n            maxH.pop();\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 602339,
                "title": "c-shortest-solution-using-insertion-sort",
                "content": "```\\npublic class MedianFinder {\\n    List<int> list = new List<int>();\\n\\t\\n    public void AddNum(int num) {\\n        int ind = list.BinarySearch(num);\\n        if (ind < 0) ind = ~ind;\\n        list.Insert(ind, num);\\n    }\\n\\n    public double FindMedian() {\\n        int mid = list.Count / 2;\\n        return list.Count % 2 == 1 ? list[mid] : ((double)list[mid-1] + list[mid]) / 2;\\n    }\\n}\\n```\\n\\n\\n\\nFrom [MSDN](https://docs.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.binarysearch):\\nBinary Search returns the zero-based index of item in the sorted List<T>, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than item or, if there is no larger element, the bitwise complement of Count. You can apply the bitwise complement operation (~) to this negative integer to get the index of the first element that is larger than the search value. When inserting the value into the List<T>, this index should be used as the insertion point to maintain the sort order.\\n\\n`if (ind < 0) ind = ~ind;`",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class MedianFinder {\\n    List<int> list = new List<int>();\\n\\t\\n    public void AddNum(int num) {\\n        int ind = list.BinarySearch(num);\\n        if (ind < 0) ind = ~ind;\\n        list.Insert(ind, num);\\n    }\\n\\n    public double FindMedian() {\\n        int mid = list.Count / 2;\\n        return list.Count % 2 == 1 ? list[mid] : ((double)list[mid-1] + list[mid]) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 599685,
                "title": "javascript-o-n-addnum-o-1-findmedian-clean-w-comments",
                "content": "```\\nclass MedianFinder {\\n    constructor() {\\n        // set up array\\n        this.arr = [];\\n    }\\n\\t\\n    /**\\n     * @param {number} num\\n     * @return {void}\\n     */\\n    addNum(num) {\\n        // check if array is size 0, just push\\n        if (this.arr.length === 0) {\\n            this.arr.push(num);\\n            return;\\n        }\\n\\t\\t\\n        // left and right pointers for binary search\\n        let l = 0;\\n        let r = this.arr.length;\\n\\t\\t\\n        // keep going until pointers meet\\n        while (l < r) {\\n            // get mid point\\n            const mid = Math.floor((l + r) / 2);\\n            // check if we can insert at mid\\n            if (num > this.arr[mid]) {\\n                // search right half of array\\n                l = mid + 1;\\n            } else {\\n                // search left half of array\\n                r = mid;\\n            }\\n        }\\n\\t\\t\\n        // we can insert at left pointer\\n        this.arr.splice(l, 0, num);\\n    }\\n\\t\\n    /**\\n     * @return {number}\\n     */\\n    findMedian() {\\n        // if odd, return middle, if even, return avg of two middle\\n        const mid = Math.floor(this.arr.length / 2);\\n        return (this.arr.length & 1) === 1\\n            ? this.arr[mid]\\n            : (this.arr[mid] + this.arr[mid - 1]) / 2;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "Binary Search"
                ],
                "code": "```\\nclass MedianFinder {\\n    constructor() {\\n        // set up array\\n        this.arr = [];\\n    }\\n\\t\\n    /**\\n     * @param {number} num\\n     * @return {void}\\n     */\\n    addNum(num) {\\n        // check if array is size 0, just push\\n        if (this.arr.length === 0) {\\n            this.arr.push(num);\\n            return;\\n        }\\n\\t\\t\\n        // left and right pointers for binary search\\n        let l = 0;\\n        let r = this.arr.length;\\n\\t\\t\\n        // keep going until pointers meet\\n        while (l < r) {\\n            // get mid point\\n            const mid = Math.floor((l + r) / 2);\\n            // check if we can insert at mid\\n            if (num > this.arr[mid]) {\\n                // search right half of array\\n                l = mid + 1;\\n            } else {\\n                // search left half of array\\n                r = mid;\\n            }\\n        }\\n\\t\\t\\n        // we can insert at left pointer\\n        this.arr.splice(l, 0, num);\\n    }\\n\\t\\n    /**\\n     * @return {number}\\n     */\\n    findMedian() {\\n        // if odd, return middle, if even, return avg of two middle\\n        const mid = Math.floor(this.arr.length / 2);\\n        return (this.arr.length & 1) === 1\\n            ? this.arr[mid]\\n            : (this.arr[mid] + this.arr[mid - 1]) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 270084,
                "title": "simple-java-insertion-sort",
                "content": "The idea is simple, same as the approach 2 in the article, I just implemented it using Java.\\n\\nTo my suprise, it worked out quite well, runtime is *~110ms* and *~65MB* of memory usage.\\n\\n```java\\nclass MedianFinder {\\n    List<Integer> data;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        data = new ArrayList();\\n    }\\n    \\n    public void addNum(int num) {\\n        int idx=Collections.binarySearch(data,num);\\n        if(idx>=0) {\\n            data.add(idx,num);\\n        } else {\\n\\t\\t    // JDK document says binary search returns (-(insertion point) - 1)\\n            data.add(-idx-1,num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int len=data.size();\\n        int mid=data.get(len/2);\\n        if(len%2==1) {\\n            return mid;\\n        } else {\\n            return 1.0*((data.get(len/2-1))+mid)/2;\\n        }\\n    }\\n}\\n```\\n\\nOne flaw is that you must use `ArrayList`, as LinkedList can\\'t be randomly accessed.",
                "solutionTags": [],
                "code": "```java\\nclass MedianFinder {\\n    List<Integer> data;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        data = new ArrayList();\\n    }\\n    \\n    public void addNum(int num) {\\n        int idx=Collections.binarySearch(data,num);\\n        if(idx>=0) {\\n            data.add(idx,num);\\n        } else {\\n\\t\\t    // JDK document says binary search returns (-(insertion point) - 1)\\n            data.add(-idx-1,num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int len=data.size();\\n        int mid=data.get(len/2);\\n        if(len%2==1) {\\n            return mid;\\n        } else {\\n            return 1.0*((data.get(len/2-1))+mid)/2;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74063,
                "title": "my-c-solution-by-sortedset",
                "content": "```\\npublic class MedianFinder {\\n    SortedSet<Tuple<int,int>> ss1;\\n    SortedSet<Tuple<int,int>> ss2;\\n    int count = 0;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        ss1 = new SortedSet<Tuple<int,int>>(Comparer<Tuple<int,int>>.Create((a,b) => \\n            a.Item1 == b.Item1 ? a.Item2 - b.Item2 : a.Item1 - b.Item1\\n        ));\\n        \\n        ss2 = new SortedSet<Tuple<int,int>>(Comparer<Tuple<int,int>>.Create((a,b) => \\n            a.Item1 == b.Item1 ? a.Item2 - b.Item2 : a.Item1 - b.Item1\\n        ));\\n    }\\n    \\n    public void AddNum(int num) \\n    {\\n        ss2.Add(new Tuple<int,int>(num, count++));\\n        ss1.Add(ss2.Min);\\n        ss2.Remove(ss2.Min);\\n        if(ss1.Count > ss2.Count)\\n        {\\n            ss2.Add(ss1.Max);\\n            ss1.Remove(ss1.Max);\\n        }\\n    }\\n    \\n    public double FindMedian() \\n    {\\n        if(ss1.Count == ss2.Count)\\n            return (double)(ss1.Max.Item1+ss2.Min.Item1)/2.0;\\n        else\\n            return ss2.Min.Item1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class MedianFinder {\\n    SortedSet<Tuple<int,int>> ss1;\\n    SortedSet<Tuple<int,int>> ss2;\\n    int count = 0;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        ss1 = new SortedSet<Tuple<int,int>>(Comparer<Tuple<int,int>>.Create((a,b) => \\n            a.Item1 == b.Item1 ? a.Item2 - b.Item2 : a.Item1 - b.Item1\\n        ));\\n        \\n        ss2 = new SortedSet<Tuple<int,int>>(Comparer<Tuple<int,int>>.Create((a,b) => \\n            a.Item1 == b.Item1 ? a.Item2 - b.Item2 : a.Item1 - b.Item1\\n        ));\\n    }\\n    \\n    public void AddNum(int num) \\n    {\\n        ss2.Add(new Tuple<int,int>(num, count++));\\n        ss1.Add(ss2.Min);\\n        ss2.Remove(ss2.Min);\\n        if(ss1.Count > ss2.Count)\\n        {\\n            ss2.Add(ss1.Max);\\n            ss1.Remove(ss1.Max);\\n        }\\n    }\\n    \\n    public double FindMedian() \\n    {\\n        if(ss1.Count == ss2.Count)\\n            return (double)(ss1.Max.Item1+ss2.Min.Item1)/2.0;\\n        else\\n            return ss2.Min.Item1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74072,
                "title": "simple-bst-solution",
                "content": "##BST solution\\n````java\\npublic class MedianFinder {\\n    private Tree tree ;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        tree = new Tree();\\n    }\\n    \\n    public void addNum(int num) {\\n        tree.add(num);\\n    }\\n    \\n    public double findMedian() {\\n        int size = tree.size();\\n        int half = size >> 1;\\n        if(size %2 == 1){\\n            return tree.getIth(1 + half);\\n        }\\n        else{\\n            return (tree.getIth(half) + tree.getIth(half +1)) / (double)2;\\n        }\\n    }\\n}\\n\\n    // BST\\nclass Tree{\\n    private static class Node {\\n        int cnt;\\n        int value;\\n        Node left; \\n        Node right;\\n        \\n        Node(int v){value = v; cnt = 1;}\\n    }\\n    \\n    private Node root ;\\n    \\n    void add(int n){\\n        if(root == null){\\n            root = new Node(n);\\n            return ;\\n        }\\n        \\n        // root not null. \\n        Node cur = root;\\n        \\n        while(true){\\n            cur.cnt ++; // important\\n            if(n < cur.value){\\n                if(cur.left == null){\\n                    cur.left = new Node(n);\\n                    break;\\n                }\\n                cur = cur.left;\\n                \\n            }\\n            else{\\n                if(cur.right == null){\\n                    cur.right = new Node(n);\\n                    break;\\n                }\\n                cur = cur.right;\\n            }\\n        }\\n    }\\n    \\n    // get ith largest element, i is 1-based.\\n    int getIth(int i){\\n        if(i <= 0 || i > size()) throw new RuntimeException(\"wrong args: \" + i);\\n        \\n        Node cur = root;\\n        while(true){\\n            int leftCnt = cur.left == null ? 0: cur.left.cnt;\\n            int rightCnt = cur.right  == null ? 0: cur.right.cnt;\\n            \\n            if(leftCnt + 1 == i) // root.\\n                return cur.value;\\n            else if(leftCnt >= i){\\n                cur = cur.left;\\n            }\\n            else{\\n                cur = cur.right;\\n                i -= (1 + leftCnt);\\n            }\\n        }\\n    }\\n    \\n    int size(){\\n        return root == null ? 0: root.cnt;\\n    }\\n}",
                "solutionTags": [],
                "code": "##BST solution\\n````java\\npublic class MedianFinder {\\n    private Tree tree ;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        tree = new Tree();\\n    }\\n    \\n    public void addNum(int num) {\\n        tree.add(num);\\n    }\\n    \\n    public double findMedian() {\\n        int size = tree.size();\\n        int half = size >> 1;\\n        if(size %2 == 1){\\n            return tree.getIth(1 + half);\\n        }\\n        else{\\n            return (tree.getIth(half) + tree.getIth(half +1)) / (double)2;\\n        }\\n    }\\n}\\n\\n    // BST\\nclass Tree{\\n    private static class Node {\\n        int cnt;\\n        int value;\\n        Node left; \\n        Node right;\\n        \\n        Node(int v){value = v; cnt = 1;}\\n    }\\n    \\n    private Node root ;\\n    \\n    void add(int n){\\n        if(root == null){\\n            root = new Node(n);\\n            return ;\\n        }\\n        \\n        // root not null. \\n        Node cur = root;\\n        \\n        while(true){\\n            cur.cnt ++; // important\\n            if(n < cur.value){\\n                if(cur.left == null){\\n                    cur.left = new Node(n);\\n                    break;\\n                }\\n                cur = cur.left;\\n                \\n            }\\n            else{\\n                if(cur.right == null){\\n                    cur.right = new Node(n);\\n                    break;\\n                }\\n                cur = cur.right;\\n            }\\n        }\\n    }\\n    \\n    // get ith largest element, i is 1-based.\\n    int getIth(int i){\\n        if(i <= 0 || i > size()) throw new RuntimeException(\"wrong args: \" + i);\\n        \\n        Node cur = root;\\n        while(true){\\n            int leftCnt = cur.left == null ? 0: cur.left.cnt;\\n            int rightCnt = cur.right  == null ? 0: cur.right.cnt;\\n            \\n            if(leftCnt + 1 == i) // root.\\n                return cur.value;\\n            else if(leftCnt >= i){\\n                cur = cur.left;\\n            }\\n            else{\\n                cur = cur.right;\\n                i -= (1 + leftCnt);\\n            }\\n        }\\n    }\\n    \\n    int size(){\\n        return root == null ? 0: root.cnt;\\n    }\\n}",
                "codeTag": "Java"
            },
            {
                "id": 3681001,
                "title": "interview-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n//median  can be obtained by keeping track of middle element or middle two elements \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n//we maintian two containers here , the first container stores the lower half elemnts and the second container stores the greater half elements,first half makes use of max heap and the second half makes use of min heap ,so that we can easily identify to which container our new incoming element will belong to (we always store the extra element in the first half,in this implementation )\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nwe are performing two operation everytime //either simply push an element or extract min and push an element \\n//each of these operation takes o(log n )time \\ntherefore the time complexity is o(nlogn)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n//corresponds to height of the heap that is o(log n) in total\\n\\n# Code\\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int>s;//first containner to store smaller half elements\\n    priority_queue<int,vector<int>,greater<int>>g;//this is our second congtainer to store greater half elements\\n    int size;\\n    MedianFinder() {\\n        size=0;\\n    }\\n    \\n    void addNum(int num) {\\n        //we maintain extra element in our first container\\n        if(size==0)\\n        {\\n            s.push(num);\\n            size++;\\n        }\\n        else if(s.size()>g.size())\\n        {\\n                /*this time we need to make the size of both the    containers same //we check if the new element is lesser than \\n    maximum elemnt of first container ,if so we transfer the maximum\\n    elemnt from first container to second conatiner and add new\\n    incoming element to the first conatiner\\n    ( first container elements should be smaller than\\n    second container elements)*/\\n            if(num<s.top())\\n            {\\n                g.push(s.top());\\n                s.pop();\\n                s.push(num);\\n            }\\n            else\\n            {\\n                g.push(num);\\n            }\\n        }\\n        else\\n        {\\n                //both are of same size;\\n                /*if both are of same size we need to\\n        add extra element to first container , we check\\n        if new incoming element is greater than minimum\\n        element in max heap(second container) if so we \\n        transfer that minimum element to first container \\n        and add new incoming elemnet to second conatiner*/\\n           if(num>g.top())\\n           {\\n                s.push(g.top());\\n                g.pop();\\n                g.push(num);\\n           }\\n           else\\n           {\\n               s.push(num);\\n           }\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(s.size()>g.size())\\n        {\\n            return s.top();\\n        }\\n        else\\n        {\\n            return (s.top()+g.top())/2.0;\\n\\n        }\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int>s;//first containner to store smaller half elements\\n    priority_queue<int,vector<int>,greater<int>>g;//this is our second congtainer to store greater half elements\\n    int size;\\n    MedianFinder() {\\n        size=0;\\n    }\\n    \\n    void addNum(int num) {\\n        //we maintain extra element in our first container\\n        if(size==0)\\n        {\\n            s.push(num);\\n            size++;\\n        }\\n        else if(s.size()>g.size())\\n        {\\n                /*this time we need to make the size of both the    containers same //we check if the new element is lesser than \\n    maximum elemnt of first container ,if so we transfer the maximum\\n    elemnt from first container to second conatiner and add new\\n    incoming element to the first conatiner\\n    ( first container elements should be smaller than\\n    second container elements)*/\\n            if(num<s.top())\\n            {\\n                g.push(s.top());\\n                s.pop();\\n                s.push(num);\\n            }\\n            else\\n            {\\n                g.push(num);\\n            }\\n        }\\n        else\\n        {\\n                //both are of same size;\\n                /*if both are of same size we need to\\n        add extra element to first container , we check\\n        if new incoming element is greater than minimum\\n        element in max heap(second container) if so we \\n        transfer that minimum element to first container \\n        and add new incoming elemnet to second conatiner*/\\n           if(num>g.top())\\n           {\\n                s.push(g.top());\\n                g.pop();\\n                g.push(num);\\n           }\\n           else\\n           {\\n               s.push(num);\\n           }\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(s.size()>g.size())\\n        {\\n            return s.top();\\n        }\\n        else\\n        {\\n            return (s.top()+g.top())/2.0;\\n\\n        }\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2808491,
                "title": "c-shortest-solution-using-priorityqueue",
                "content": "# Code\\n```\\npublic class MedianFinder {\\n    PriorityQueue<int, int> max = new(Comparer<int>.Create((x, y) => y.CompareTo(x)));\\n    PriorityQueue<int, int> min = new();\\n\\n    public void AddNum(int num) {\\n        max.Enqueue(num, num);\\n        min.Enqueue(max.Peek(), max.Dequeue());\\n        if (max.Count < min.Count)\\n            max.Enqueue(min.Peek(), min.Dequeue());\\n    }\\n\\n    public double FindMedian() => min.Count != max.Count\\n        ? max.Peek() : (min.Peek() + max.Peek()) / 2.0;\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class MedianFinder {\\n    PriorityQueue<int, int> max = new(Comparer<int>.Create((x, y) => y.CompareTo(x)));\\n    PriorityQueue<int, int> min = new();\\n\\n    public void AddNum(int num) {\\n        max.Enqueue(num, num);\\n        min.Enqueue(max.Peek(), max.Dequeue());\\n        if (max.Count < min.Count)\\n            max.Enqueue(min.Peek(), min.Dequeue());\\n    }\\n\\n    public double FindMedian() => min.Count != max.Count\\n        ? max.Peek() : (min.Peek() + max.Peek()) / 2.0;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805447,
                "title": "c-short-simple-code",
                "content": "***DO UPVOTE IF IT HELPS !!!!!***\\n\\n\\tpriority_queue<int>mxh;                                  //max heap\\n    priority_queue<int,vector<int>,greater<int>> mnh;        //min heap\\n    \\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        \\n\\t\\t//INSERTION\\n        if(mxh.empty() || num<mxh.top()) mxh.push(num);               //if maxh is empty or num is smaller then maxh top, push in maxh      \\n        else mnh.push(num);                                           //else push in minh\\n        \\n\\t\\t//BALANCING HEAP\\n        if(mxh.size()>mnh.size() && mxh.size()-mnh.size()>1){         //if maxh size is greater than minh (diff greater than 1)\\n            mnh.push(mxh.top());                                      //then pop and push in minh\\n            mxh.pop();\\n        }\\n        else if(mnh.size()>mxh.size() && mnh.size()-mxh.size()>1){    //if minh size is greater than maxh (diff greater than 1)\\n            mxh.push(mnh.top());                                      //then pop and push in maxh\\n            mnh.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        \\n        if(mxh.size()==mnh.size()){                           //if maxh and minh size is equal, then return the \\n            double a=mxh.top(), b=mnh.top();                  //average of maxh.top and minh.top\\n            return (a+b)/2.0;\\n        }\\n        else{\\n            if(mxh.size()>mnh.size()){                        //else if maxh size is greater, return ,maxh top\\n                return (double) mxh.top();\\n            }\\n            else{                                             //else return minh top\\n                return (double) mnh.top();\\n            }\\n        }\\n    }",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "***DO UPVOTE IF IT HELPS !!!!!***\\n\\n\\tpriority_queue<int>mxh;                                  //max heap\\n    priority_queue<int,vector<int>,greater<int>> mnh;        //min heap\\n    \\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        \\n\\t\\t//INSERTION\\n        if(mxh.empty() || num<mxh.top()) mxh.push(num);               //if maxh is empty or num is smaller then maxh top, push in maxh      \\n        else mnh.push(num);                                           //else push in minh\\n        \\n\\t\\t//BALANCING HEAP\\n        if(mxh.size()>mnh.size() && mxh.size()-mnh.size()>1){         //if maxh size is greater than minh (diff greater than 1)\\n            mnh.push(mxh.top());                                      //then pop and push in minh\\n            mxh.pop();\\n        }\\n        else if(mnh.size()>mxh.size() && mnh.size()-mxh.size()>1){    //if minh size is greater than maxh (diff greater than 1)\\n            mxh.push(mnh.top());                                      //then pop and push in maxh\\n            mnh.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        \\n        if(mxh.size()==mnh.size()){                           //if maxh and minh size is equal, then return the \\n            double a=mxh.top(), b=mnh.top();                  //average of maxh.top and minh.top\\n            return (a+b)/2.0;\\n        }\\n        else{\\n            if(mxh.size()>mnh.size()){                        //else if maxh size is greater, return ,maxh top\\n                return (double) mxh.top();\\n            }\\n            else{                                             //else return minh top\\n                return (double) mnh.top();\\n            }\\n        }\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2560789,
                "title": "c-heap-solution",
                "content": "Straight forward solution, comment below if there\\'re any suggestions or doubts :)\\n\\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int, vector<int>, greater<int>> large; \\n    priority_queue<int> small;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(small.empty() || small.top()>num) small.push(num);\\n        else large.push(num);\\n        \\n        if(small.size()>large.size()+1){\\n            int val=small.top();\\n            large.push(val);\\n            small.pop();\\n        }\\n        else if(large.size()>small.size()+1){\\n            int val=large.top();\\n            small.push(val);\\n            large.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(small.size()>large.size()){\\n            return small.top();\\n        }\\n        if(large.size()>small.size()){\\n            return large.top();\\n        }\\n        return (large.top()+small.top())/2.0;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int, vector<int>, greater<int>> large; \\n    priority_queue<int> small;\\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(small.empty() || small.top()>num) small.push(num);\\n        else large.push(num);\\n        \\n        if(small.size()>large.size()+1){\\n            int val=small.top();\\n            large.push(val);\\n            small.pop();\\n        }\\n        else if(large.size()>small.size()+1){\\n            int val=large.top();\\n            small.push(val);\\n            large.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(small.size()>large.size()){\\n            return small.top();\\n        }\\n        if(large.size()>small.size()){\\n            return large.top();\\n        }\\n        return (large.top()+small.top())/2.0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2540241,
                "title": "c-two-heap-with-comments-based-on-480",
                "content": "///\\n\\nclass MedianFinder {\\npublic:\\n\\n    // Here we have taken two heap, Maxheap of size (n+1) and Minheap of size(n) \\n    priority_queue<int> maxheap; // it is used to store the max ele\\n    priority_queue<int,vector<int>,greater<int>> minheap; // it is used to store minimum element\\n    MedianFinder() {\\n        //ignore this as this will not affect the code\\n    }\\n    \\n    void addNum(int num) {\\n        int lefts = maxheap.size();\\n        int rights = minheap.size();\\n        \\n        // case 1 = maxheap is smaller than minheap\\n        \\n        if(lefts == 0)     // if maxheap is empty then add it first \\n            maxheap.push(num);\\n        \\n        // case 2 = if maxheap == minheap \\n        \\n        else if(lefts == rights)\\n        {\\n            if( num < minheap.top()) // if element is smaller than the top of minheap we\\'ll put it into maxheap\\n                maxheap.push(num);\\n            else\\n            {\\n                int temp = minheap.top();  // otherwise shift ele and push accordingly\\n                minheap.pop();\\n                maxheap.push(temp);\\n                minheap.push(num);\\n            }\\n        }\\n        \\n        //case 3 = if maxheap is greater than minheap\\n        \\n        else{\\n            if(num > maxheap.top()) // if num is greater than maxheap top so we\\'ll put it into min heap\\n                minheap.push(num);\\n            else{\\n                int temp = maxheap.top(); // otherwise shift ele and push accordingly\\n                maxheap.pop();\\n                minheap.push(temp);\\n                maxheap.push(num);\\n            }\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        int lefts = maxheap.size(); // to get the maxheap size\\n        int rights = minheap.size(); // to get the size of minheap \\n        if(lefts > rights)\\n            return maxheap.top(); // size is odd \\n        else\\n            return (double)(maxheap.top() + minheap.top())/2; // size is even\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "///\\n\\nclass MedianFinder {\\npublic:\\n\\n    // Here we have taken two heap, Maxheap of size (n+1) and Minheap of size(n) \\n    priority_queue<int> maxheap; // it is used to store the max ele\\n    priority_queue<int,vector<int>,greater<int>> minheap; // it is used to store minimum element\\n    MedianFinder() {\\n        //ignore this as this will not affect the code\\n    }\\n    \\n    void addNum(int num) {\\n        int lefts = maxheap.size();\\n        int rights = minheap.size();\\n        \\n        // case 1 = maxheap is smaller than minheap\\n        \\n        if(lefts == 0)     // if maxheap is empty then add it first \\n            maxheap.push(num);\\n        \\n        // case 2 = if maxheap == minheap \\n        \\n        else if(lefts == rights)\\n        {\\n            if( num < minheap.top()) // if element is smaller than the top of minheap we\\'ll put it into maxheap\\n                maxheap.push(num);\\n            else\\n            {\\n                int temp = minheap.top();  // otherwise shift ele and push accordingly\\n                minheap.pop();\\n                maxheap.push(temp);\\n                minheap.push(num);\\n            }\\n        }\\n        \\n        //case 3 = if maxheap is greater than minheap\\n        \\n        else{\\n            if(num > maxheap.top()) // if num is greater than maxheap top so we\\'ll put it into min heap\\n                minheap.push(num);\\n            else{\\n                int temp = maxheap.top(); // otherwise shift ele and push accordingly\\n                maxheap.pop();\\n                minheap.push(temp);\\n                maxheap.push(num);\\n            }\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        int lefts = maxheap.size(); // to get the maxheap size\\n        int rights = minheap.size(); // to get the size of minheap \\n        if(lefts > rights)\\n            return maxheap.top(); // size is odd \\n        else\\n            return (double)(maxheap.top() + minheap.top())/2; // size is even\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 2260806,
                "title": "javascript-with-two-heaps",
                "content": "simple javascript solution by using two heaps\\n\\n```\\n\\nclass MedianFinder {\\n  constructor() {\\n   // bigger values in Min Heap\\n    this.minHeap = new MinPriorityQueue(); // already included by leetcode\\n\\t// smaller values in Max Heap\\n    this.maxHeap = new MaxPriorityQueue();  // already included by leetcode\\n  }\\n  /**\\n   * @param {number} num\\n   * @return {void}\\n   */\\n  addNum(num) {\\n    if (this.maxHeap.size() == 0 || num < this.maxHeap.front().element) {\\n      this.maxHeap.enqueue(num);\\n    } else\\n      this.minHeap.enqueue(num);\\n\\n    if (this.maxHeap.size() - this.minHeap.size() > 1)\\n      this.minHeap.enqueue(this.maxHeap.dequeue().element);\\n    else if (this.minHeap.size() - this.maxHeap.size() > 1)\\n      this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n  }\\n  /**\\n   * @return {number}\\n   */\\n  findMedian() {\\n    if (this.maxHeap.size() > this.minHeap.size())\\n      return this.maxHeap.front().element;\\n    else if (this.minHeap.size() > this.maxHeap.size())\\n      return this.minHeap.front().element;\\n    else\\n      return (this.minHeap.front().element + this.maxHeap.front().element) / 2;\\n\\n  }\\n}\\n\\n ```",
                "solutionTags": [],
                "code": "```\\n\\nclass MedianFinder {\\n  constructor() {\\n   // bigger values in Min Heap\\n    this.minHeap = new MinPriorityQueue(); // already included by leetcode\\n\\t// smaller values in Max Heap\\n    this.maxHeap = new MaxPriorityQueue();  // already included by leetcode\\n  }\\n  /**\\n   * @param {number} num\\n   * @return {void}\\n   */\\n  addNum(num) {\\n    if (this.maxHeap.size() == 0 || num < this.maxHeap.front().element) {\\n      this.maxHeap.enqueue(num);\\n    } else\\n      this.minHeap.enqueue(num);\\n\\n    if (this.maxHeap.size() - this.minHeap.size() > 1)\\n      this.minHeap.enqueue(this.maxHeap.dequeue().element);\\n    else if (this.minHeap.size() - this.maxHeap.size() > 1)\\n      this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n  }\\n  /**\\n   * @return {number}\\n   */\\n  findMedian() {\\n    if (this.maxHeap.size() > this.minHeap.size())\\n      return this.maxHeap.front().element;\\n    else if (this.minHeap.size() > this.maxHeap.size())\\n      return this.minHeap.front().element;\\n    else\\n      return (this.minHeap.front().element + this.maxHeap.front().element) / 2;\\n\\n  }\\n}\\n\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 2202539,
                "title": "java-clean-simple-easy-to-understand",
                "content": "```\\nclass MedianFinder {\\n    PriorityQueue<Integer> left;\\n    PriorityQueue<Integer> right;\\n\\n    public MedianFinder() {\\n        right = new PriorityQueue<>();\\n        left = new PriorityQueue<>((a, b) -> b - a);\\n    }\\n\\n    public void addNum(int num) {\\n        if (left.isEmpty() || num < left.peek())\\n            left.add(num);\\n        else\\n            right.add(num);\\n\\n        if (left.size() > right.size())\\n            right.add(left.poll());\\n        if (right.size() > left.size())\\n            left.add(right.poll());\\n    }\\n\\n    public double findMedian() {\\n        return left.size() != right.size() ? left.peek()\\n                : (double) (left.peek() + right.peek()) / 2;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n    PriorityQueue<Integer> left;\\n    PriorityQueue<Integer> right;\\n\\n    public MedianFinder() {\\n        right = new PriorityQueue<>();\\n        left = new PriorityQueue<>((a, b) -> b - a);\\n    }\\n\\n    public void addNum(int num) {\\n        if (left.isEmpty() || num < left.peek())\\n            left.add(num);\\n        else\\n            right.add(num);\\n\\n        if (left.size() > right.size())\\n            right.add(left.poll());\\n        if (right.size() > left.size())\\n            left.add(right.poll());\\n    }\\n\\n    public double findMedian() {\\n        return left.size() != right.size() ? left.peek()\\n                : (double) (left.peek() + right.peek()) / 2;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1989867,
                "title": "easy-priority-queue-based-solution-with-explanation",
                "content": "1. First we create 2 priority_queue - one the max priority_queue ( pqmax) and other min (pqmin).\\n2.  pqmax will save the first half of the data with smaller values, and pqmin will store second half of the data with bigger values. - logic written in addNum() function.\\n3. when inserting a new value, we first compare if it is smaller than the top of pqmax.top() - (the largest value of the first half), if so, insert into pqmax, else insert it into pqmin.\\n4. after inserting a element we will balance 2 queues according to this logic - make sure either they have the same length or the length difference is only 1.\\n5. balance logic is written in - balanceHeap() function in the code.\\n6. if the size of both pqmax and pqmin is equal then we return average of their top\\n7. else\\n8. we return the top value of queue with greater size.\\n```\\nclass MedianFinder {\\npublic:\\n     priority_queue<int> pqmax;\\n     priority_queue<int , vector<int> , greater<int>> pqmin;\\n  \\n    //function to simply add num in queues.\\n    void addNum(int num) {\\n        if(pqmax.empty() or pqmax.top()>=num)\\n            pqmax.push(num);\\n        else\\n            pqmin.push(num);\\n        balanceHeap();\\n        \\n    }\\n\\t//function to balance the queues.\\n    void balanceHeap(){  \\n        if(pqmax.size()>pqmin.size() and pqmax.size()-pqmin.size()>1){\\n            pqmin.push(pqmax.top());\\n            pqmax.pop();\\n        }\\n        else if(pqmin.size()>pqmax.size() and pqmin.size()-pqmax.size()>1){\\n            pqmax.push(pqmin.top());\\n            pqmin.pop();\\n        }\\n            \\n    }\\n    \\n    double findMedian() {\\n        if(pqmax.size() ==pqmin.size())\\n            return (pqmax.top() + pqmin.top())/2.0;\\n        else if(pqmax.size()>pqmin.size())\\n            return pqmax.top();\\n        else\\n            return pqmin.top();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n     priority_queue<int> pqmax;\\n     priority_queue<int , vector<int> , greater<int>> pqmin;\\n  \\n    //function to simply add num in queues.\\n    void addNum(int num) {\\n        if(pqmax.empty() or pqmax.top()>=num)\\n            pqmax.push(num);\\n        else\\n            pqmin.push(num);\\n        balanceHeap();\\n        \\n    }\\n\\t//function to balance the queues.\\n    void balanceHeap(){  \\n        if(pqmax.size()>pqmin.size() and pqmax.size()-pqmin.size()>1){\\n            pqmin.push(pqmax.top());\\n            pqmax.pop();\\n        }\\n        else if(pqmin.size()>pqmax.size() and pqmin.size()-pqmax.size()>1){\\n            pqmax.push(pqmin.top());\\n            pqmin.pop();\\n        }\\n            \\n    }\\n    \\n    double findMedian() {\\n        if(pqmax.size() ==pqmin.size())\\n            return (pqmax.top() + pqmin.top())/2.0;\\n        else if(pqmax.size()>pqmin.size())\\n            return pqmax.top();\\n        else\\n            return pqmin.top();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1984728,
                "title": "very-easy-to-understand-java-solution-using-heap",
                "content": "```\\nclass MedianFinder {\\n    PriorityQueue<Integer> left ;\\n    PriorityQueue<Integer> right ;\\n    \\n    public MedianFinder() {\\n        left = new PriorityQueue<>(Collections.reverseOrder());\\n        right = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        left.add(num);\\n        right.add(left.remove());\\n        if(right.size()>left.size()){\\n           left.add(right.remove());\\n       }\\n    }\\n    \\n    public double findMedian() {\\n        if(left.size() == right.size()){\\n            int i = left.peek();\\n            int j = right.peek();\\n            return (double)(i+j)/2;\\n        }\\n        return (double)left.peek();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n    PriorityQueue<Integer> left ;\\n    PriorityQueue<Integer> right ;\\n    \\n    public MedianFinder() {\\n        left = new PriorityQueue<>(Collections.reverseOrder());\\n        right = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        left.add(num);\\n        right.add(left.remove());\\n        if(right.size()>left.size()){\\n           left.add(right.remove());\\n       }\\n    }\\n    \\n    public double findMedian() {\\n        if(left.size() == right.size()){\\n            int i = left.peek();\\n            int j = right.peek();\\n            return (double)(i+j)/2;\\n        }\\n        return (double)left.peek();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1455744,
                "title": "c-priority-queue",
                "content": "```\\nclass MedianFinder\\n{\\npublic:\\n    priority_queue<int> mxHeap,mnHeap;\\n    MedianFinder() {}\\n\\n    void addNum(int num)\\n    {\\n        mxHeap.push(num);\\n        mnHeap.push(-1 * mxHeap.top());\\n        mxHeap.pop();\\n        if (mxHeap.size() < mnHeap.size())\\n        {\\n            mxHeap.push(-1 * mnHeap.top());\\n            mnHeap.pop();\\n        }\\n    }\\n\\n    double findMedian()\\n    {\\n        return mxHeap.size() > mnHeap.size() ? mxHeap.top() : ((double)mxHeap.top() - mnHeap.top()) * 0.5;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder\\n{\\npublic:\\n    priority_queue<int> mxHeap,mnHeap;\\n    MedianFinder() {}\\n\\n    void addNum(int num)\\n    {\\n        mxHeap.push(num);\\n        mnHeap.push(-1 * mxHeap.top());\\n        mxHeap.pop();\\n        if (mxHeap.size() < mnHeap.size())\\n        {\\n            mxHeap.push(-1 * mnHeap.top());\\n            mnHeap.pop();\\n        }\\n    }\\n\\n    double findMedian()\\n    {\\n        return mxHeap.size() > mnHeap.size() ? mxHeap.top() : ((double)mxHeap.top() - mnHeap.top()) * 0.5;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1331487,
                "title": "easy-c-solution-using-ordered-set",
                "content": "```\\n#include <ext/pb_ds/assoc_container.hpp> // Common file\\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\\n#include <ext/pb_ds/detail/standard_policies.hpp>\\nusing namespace __gnu_pbds;\\n\\n\\n\\ntypedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    vector<int> a;\\n    ordered_set s;\\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        a.push_back(num);s.insert(num);\\n    }\\n    \\n    double findMedian() {\\n        double med = 0.0;\\n        int n=a.size();\\n        if(n%2==0){\\n            med = ((double)(*(s.find_by_order(n/2))+(*(s.find_by_order(n/2-1)))))/2.0;\\n        }else{\\n            med = (*(s.find_by_order(n/2)))*1.0;\\n        }\\n        return med;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\n#include <ext/pb_ds/assoc_container.hpp> // Common file\\n#include <ext/pb_ds/tree_policy.hpp> // Including tree_order_statistics_node_update\\n#include <ext/pb_ds/detail/standard_policies.hpp>\\nusing namespace __gnu_pbds;\\n\\n\\n\\ntypedef tree<int, null_type, less_equal<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    vector<int> a;\\n    ordered_set s;\\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        a.push_back(num);s.insert(num);\\n    }\\n    \\n    double findMedian() {\\n        double med = 0.0;\\n        int n=a.size();\\n        if(n%2==0){\\n            med = ((double)(*(s.find_by_order(n/2))+(*(s.find_by_order(n/2-1)))))/2.0;\\n        }else{\\n            med = (*(s.find_by_order(n/2)))*1.0;\\n        }\\n        return med;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1331384,
                "title": "rust-translated-two-heap-solution",
                "content": "```rust\\nuse std::cmp::Reverse;\\nuse std::collections::BinaryHeap;\\n\\n#[derive(Default)]\\nstruct MedianFinder {\\n    small: BinaryHeap<i32>,\\n    large: BinaryHeap<Reverse<i32>>,\\n    odd: bool,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    fn add_num(&mut self, num: i32) {\\n        if self.odd {\\n            self.small.push(num);\\n            if let Some(max) = self.small.pop() {\\n                self.large.push(Reverse(max));\\n            }\\n        } else {\\n            self.large.push(Reverse(num));\\n            if let Some(Reverse(min)) = self.large.pop() {\\n                self.small.push(min);\\n            }\\n        }\\n        self.odd = !self.odd;\\n    }\\n    \\n    fn find_median(&self) -> f64 {\\n        if self.odd {\\n            *self.small.peek().unwrap() as f64\\n        } else {\\n            (self.small.peek().unwrap() + self.large.peek().unwrap().0) as f64 / 2.0\\n        }\\n    }\\n}\\n ```",
                "solutionTags": [
                    "Rust",
                    "Heap (Priority Queue)"
                ],
                "code": "```rust\\nuse std::cmp::Reverse;\\nuse std::collections::BinaryHeap;\\n\\n#[derive(Default)]\\nstruct MedianFinder {\\n    small: BinaryHeap<i32>,\\n    large: BinaryHeap<Reverse<i32>>,\\n    odd: bool,\\n}\\n\\n\\n/** \\n * `&self` means the method takes an immutable reference.\\n * If you need a mutable reference, change it to `&mut self` instead.\\n */\\nimpl MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    fn new() -> Self {\\n        Default::default()\\n    }\\n    \\n    fn add_num(&mut self, num: i32) {\\n        if self.odd {\\n            self.small.push(num);\\n            if let Some(max) = self.small.pop() {\\n                self.large.push(Reverse(max));\\n            }\\n        } else {\\n            self.large.push(Reverse(num));\\n            if let Some(Reverse(min)) = self.large.pop() {\\n                self.small.push(min);\\n            }\\n        }\\n        self.odd = !self.odd;\\n    }\\n    \\n    fn find_median(&self) -> f64 {\\n        if self.odd {\\n            *self.small.peek().unwrap() as f64\\n        } else {\\n            (self.small.peek().unwrap() + self.large.peek().unwrap().0) as f64 / 2.0\\n        }\\n    }\\n}\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1331369,
                "title": "find-median-from-data-stream-easy-c-solution-using-multiset",
                "content": "Multiset data structure stores the elements in sorted order and it can store repeated elements also unlike sets.\\nThe code is pretty much understandable, feel free to comment if you  have some doubt. Thanks :)\\n```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    multiset<int> m;\\n    MedianFinder() {\\n        m.clear();\\n    }\\n    \\n    void addNum(int num) {\\n        m.insert(num);\\n    }\\n    \\n    double findMedian() {\\n        int n = m.size(),i;\\n        double ans;\\n        auto iter = m.begin();\\n        advance(iter, n / 2);\\n        if(n%2==0){\\n            auto iter2= iter--;\\n            ans = double(*iter+*iter2)/2;\\n        }else{\\n            ans = double(*iter);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    multiset<int> m;\\n    MedianFinder() {\\n        m.clear();\\n    }\\n    \\n    void addNum(int num) {\\n        m.insert(num);\\n    }\\n    \\n    double findMedian() {\\n        int n = m.size(),i;\\n        double ans;\\n        auto iter = m.begin();\\n        advance(iter, n / 2);\\n        if(n%2==0){\\n            auto iter2= iter--;\\n            ans = double(*iter+*iter2)/2;\\n        }else{\\n            ans = double(*iter);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1330805,
                "title": "heap-solution-o-logn-insertion-sort-solution-o-n",
                "content": "**Using Insertion sort**\\n```\\nclass MedianFinder {\\n\\n    ArrayList<Integer> a;\\n    public MedianFinder() {\\n        a = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(a.size()==0){\\n            a.add(num);\\n            return;\\n        }\\n        a.add(num);\\n        int j = a.size()-2;\\n        while(j >= 0 && a.get(j) > num) {\\n            a.set(j + 1,a.get(j));\\n            j--;\\n        }\\n        a.set(j + 1,num);\\n    }\\n    \\n    public double findMedian() {\\n        if(a.size()%2==0){\\n            return (a.get(a.size()/2)+a.get((a.size()-1)/2)+0.0)/2;\\n        } else{\\n            return a.get(a.size()/2)+0.0;\\n        }\\n    }\\n}\\n```\\n\\n**Using Heap**\\nApproach :\\ndivide the aray in two halfs and store left half in max heap and right half in min heap.\\nso that when we need to find median the mid element are at the top of max heap or min heap\\n\\nexample  :\\nwhen array is even\\narr = [2,4,5,6]\\n\\nmax_heap: 2 4\\nmin_heap = 6 5\\n\\nmedian is top of max_heap+minheap/2; = (4+5)/2\\n\\nwhen array is odd\\n\\narr = [2,3,4,5,6]\\n\\nmax_heap: 2 3 4 \\nmin_heap = 6 5\\n\\nmedian is top of max_heap = 4\\n\\nNow this will work when we have sorted array so, we have to insert element in heap such that the all element in max heap is less than all element in min heap .\\n\\n**0.0 in code is added to typecast from int to double**\\n```\\nclass MedianFinder {\\n\\n    PriorityQueue<Integer> max;\\n    PriorityQueue<Integer> min;\\n    public MedianFinder() {\\n\\t\\t  max =  = new PriorityQueue<>(Collections.reverseOrder());\\n\\t\\t  min = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(max.isEmpty() && min.isEmpty()){\\n            max.add(num);\\n            return;\\n        }\\n        if(max.size()==min.size()){\\n            if(min.peek()<num){\\n                max.add(min.poll());\\n                min.add(num);\\n            } else{\\n                max.add(num);\\n            }\\n        } else {\\n\\t\\t\\t\\n            if(num<max.peek()){\\n                min.add(max.poll());\\n                max.add(num);\\n            } else {\\n                min.add(num);\\n            }\\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        if(max.size()==min.size()){\\n            return (max.peek()+min.peek()+0.0)/2;\\n        }\\n        return max.peek()+0.0;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n\\n    ArrayList<Integer> a;\\n    public MedianFinder() {\\n        a = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(a.size()==0){\\n            a.add(num);\\n            return;\\n        }\\n        a.add(num);\\n        int j = a.size()-2;\\n        while(j >= 0 && a.get(j) > num) {\\n            a.set(j + 1,a.get(j));\\n            j--;\\n        }\\n        a.set(j + 1,num);\\n    }\\n    \\n    public double findMedian() {\\n        if(a.size()%2==0){\\n            return (a.get(a.size()/2)+a.get((a.size()-1)/2)+0.0)/2;\\n        } else{\\n            return a.get(a.size()/2)+0.0;\\n        }\\n    }\\n}\\n```\n```\\nclass MedianFinder {\\n\\n    PriorityQueue<Integer> max;\\n    PriorityQueue<Integer> min;\\n    public MedianFinder() {\\n\\t\\t  max =  = new PriorityQueue<>(Collections.reverseOrder());\\n\\t\\t  min = new PriorityQueue<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(max.isEmpty() && min.isEmpty()){\\n            max.add(num);\\n            return;\\n        }\\n        if(max.size()==min.size()){\\n            if(min.peek()<num){\\n                max.add(min.poll());\\n                min.add(num);\\n            } else{\\n                max.add(num);\\n            }\\n        } else {\\n\\t\\t\\t\\n            if(num<max.peek()){\\n                min.add(max.poll());\\n                max.add(num);\\n            } else {\\n                min.add(num);\\n            }\\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        if(max.size()==min.size()){\\n            return (max.peek()+min.peek()+0.0)/2;\\n        }\\n        return max.peek()+0.0;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1035255,
                "title": "ruby-two-heaps-with-algorithms-gem",
                "content": "```ruby\\nclass MedianFinder\\n  def initialize()\\n    @small = Containers::MaxHeap.new\\n    @large = Containers::MinHeap.new\\n  end\\n  def add_num(num)\\n    if @small.length == @large.length\\n      @small.push(num)\\n      @large.push(@small.pop())\\n    else\\n      @large.push(num)\\n      @small.push(@large.pop())\\n    end\\n  end\\n  def find_median()\\n    if @small.length == @large.length\\n      return (@small.max + @large.min) / 2.0\\n    else\\n      return @large.min\\n    end\\n  end  \\nend",
                "solutionTags": [],
                "code": "```ruby\\nclass MedianFinder\\n  def initialize()\\n    @small = Containers::MaxHeap.new\\n    @large = Containers::MinHeap.new\\n  end\\n  def add_num(num)\\n    if @small.length == @large.length\\n      @small.push(num)\\n      @large.push(@small.pop())\\n    else\\n      @large.push(num)\\n      @small.push(@large.pop())\\n    end\\n  end\\n  def find_median()\\n    if @small.length == @large.length\\n      return (@small.max + @large.min) / 2.0\\n    else\\n      return @large.min\\n    end\\n  end  \\nend",
                "codeTag": "Java"
            },
            {
                "id": 867195,
                "title": "simple-and-intuitive-c-solution-using-multiset-o-logn-add-o-1-find-beats-99-90",
                "content": "Space Complexity = O(DataStream)\\nAny feedbacks are welcomed\\n```\\nclass MedianFinder {\\npublic:\\n    multiset<int> mset;\\n    multiset<int>::iterator miditer;     ///Keeps track of middle iterator of the multiset, if the list is even the iterator points to first element of the mid\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        mset.insert(num);\\n        if(mset.size() == 1){\\n            miditer = mset.begin();      //Initially only one element \\n        }else if(mset.size()%2 == 0 && num < *miditer){   //Decrement the iterator only if after insertion of \"num\" the multiset size becomes even and the number is inserted before previous mid, since the list is even make iterator point to first element\\n                miditer--;    \\n        }else if(mset.size()%2 != 0 && num >= *miditer){  //Increment the iterator only if after insertion of \"num\" the multiset size becomes odd and the number is inserted after previous mid\\n                miditer++;\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(mset.size()%2 == 0){\\n            double ans = (*miditer + *(++miditer))/2.0;\\n            --miditer;\\n            return ans;\\n        }else{\\n            return *miditer;\\n        }     \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    multiset<int> mset;\\n    multiset<int>::iterator miditer;     ///Keeps track of middle iterator of the multiset, if the list is even the iterator points to first element of the mid\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        mset.insert(num);\\n        if(mset.size() == 1){\\n            miditer = mset.begin();      //Initially only one element \\n        }else if(mset.size()%2 == 0 && num < *miditer){   //Decrement the iterator only if after insertion of \"num\" the multiset size becomes even and the number is inserted before previous mid, since the list is even make iterator point to first element\\n                miditer--;    \\n        }else if(mset.size()%2 != 0 && num >= *miditer){  //Increment the iterator only if after insertion of \"num\" the multiset size becomes odd and the number is inserted after previous mid\\n                miditer++;\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(mset.size()%2 == 0){\\n            double ans = (*miditer + *(++miditer))/2.0;\\n            --miditer;\\n            return ans;\\n        }else{\\n            return *miditer;\\n        }     \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 461738,
                "title": "python-2-heaps-beats-95",
                "content": "Solution explains the concept quite well. This is a Python implementation. \\nOne thing is that I used the built in heappushpop method when needing to perform a push plus a pop to maintain heap balance. According to the documentations, performing a heappushpop is faster than pushing and then popping. \\n\\n```\\nfrom heapq import heappush, heappop, heapify, heappushpop\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # min-heap containing the 1/2 largest elements\\n        self.minOfMax = []\\n        \\n        # max-heap containing the 1/2 smallest elements\\n        self.maxOfMin = []\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: None\\n        \"\"\"\\n        if not self.minOfMax:\\n            heappush(self.minOfMax, num)\\n        elif not self.maxOfMin:\\n            if num > self.minOfMax[0]:\\n                minNum = heappushpop(self.minOfMax, num)\\n                heappush(self.maxOfMin, -minNum)\\n            else:\\n                heappush(self.maxOfMin, -num)\\n        else:\\n            if num > -self.maxOfMin[0]: # larger than the max of the min 1/2 elements\\n                if len(self.maxOfMin) >= len(self.minOfMax):\\n                    heappush(self.minOfMax, num)\\n                else:\\n                    num_replace = heappushpop(self.minOfMax, num)\\n                    heappush(self.maxOfMin, -num_replace)\\n            else: # smaller than the max of the min 1/2 elements or equal\\n                if len(self.maxOfMin) <= len(self.minOfMax):\\n                    heappush(self.maxOfMin, -num)\\n                else:\\n                    num_replace = -heappushpop(self.maxOfMin, -num)\\n                    heappush(self.minOfMax, num_replace)\\n\\n    def findMedian(self):\\n        \"\"\"\\n        :rtype: float\\n        \"\"\"\\n        if len(self.minOfMax) == len(self.maxOfMin):\\n            return (self.minOfMax[0] - self.maxOfMin[0])/2.0\\n        elif len(self.minOfMax) > len(self.maxOfMin):\\n            return self.minOfMax[0]\\n        else:\\n            return -self.maxOfMin[0]\\n        \\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import heappush, heappop, heapify, heappushpop\\nclass MedianFinder(object):\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # min-heap containing the 1/2 largest elements\\n        self.minOfMax = []\\n        \\n        # max-heap containing the 1/2 smallest elements\\n        self.maxOfMin = []\\n\\n    def addNum(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: None\\n        \"\"\"\\n        if not self.minOfMax:\\n            heappush(self.minOfMax, num)\\n        elif not self.maxOfMin:\\n            if num > self.minOfMax[0]:\\n                minNum = heappushpop(self.minOfMax, num)\\n                heappush(self.maxOfMin, -minNum)\\n            else:\\n                heappush(self.maxOfMin, -num)\\n        else:\\n            if num > -self.maxOfMin[0]: # larger than the max of the min 1/2 elements\\n                if len(self.maxOfMin) >= len(self.minOfMax):\\n                    heappush(self.minOfMax, num)\\n                else:\\n                    num_replace = heappushpop(self.minOfMax, num)\\n                    heappush(self.maxOfMin, -num_replace)\\n            else: # smaller than the max of the min 1/2 elements or equal\\n                if len(self.maxOfMin) <= len(self.minOfMax):\\n                    heappush(self.maxOfMin, -num)\\n                else:\\n                    num_replace = -heappushpop(self.maxOfMin, -num)\\n                    heappush(self.minOfMax, num_replace)\\n\\n    def findMedian(self):\\n        \"\"\"\\n        :rtype: float\\n        \"\"\"\\n        if len(self.minOfMax) == len(self.maxOfMin):\\n            return (self.minOfMax[0] - self.maxOfMin[0])/2.0\\n        elif len(self.minOfMax) > len(self.maxOfMin):\\n            return self.minOfMax[0]\\n        else:\\n            return -self.maxOfMin[0]\\n        \\n        \\n\\n\\n# Your MedianFinder object will be instantiated and called as such:\\n# obj = MedianFinder()\\n# obj.addNum(num)\\n# param_2 = obj.findMedian()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 447469,
                "title": "go-golang-two-heaps-solution",
                "content": "```go\\nimport \"container/heap\"\\n\\ntype MinHeap []int\\n\\nfunc (h MinHeap) Len() int { return len(h) }\\nfunc (h MinHeap) Less(i, j int) bool { return h[i] < h[j] }\\nfunc (h MinHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] }\\nfunc (h *MinHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\\nfunc (h *MinHeap) Pop() interface{} {\\n    min := (*h)[len(*h) - 1]\\n    *h = (*h)[:len(*h) - 1]\\n    return min\\n}\\n\\ntype MaxHeap []int\\n\\nfunc (h MaxHeap) Len() int { return len(h) }\\nfunc (h MaxHeap) Less(i, j int) bool { return h[i] > h[j] }\\nfunc (h MaxHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] }\\nfunc (h *MaxHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\\nfunc (h *MaxHeap) Pop() interface{} {\\n    min := (*h)[len(*h) - 1]\\n    *h = (*h)[:len(*h) - 1]\\n    return min\\n}\\n\\ntype MedianFinder struct {\\n    minHeap MinHeap\\n    maxHeap MaxHeap\\n}\\n\\nfunc Constructor() MedianFinder {\\n    return MedianFinder{\\n        minHeap: MinHeap{},\\n        maxHeap: MaxHeap{},\\n    }\\n}\\n\\nfunc (this *MedianFinder) AddNum(num int) {\\n    if this.maxHeap.Len() == 0 || num <= this.maxHeap[0] {\\n        heap.Push(&this.maxHeap, num)\\n    } else {\\n        heap.Push(&this.minHeap, num)\\n    }\\n    if this.maxHeap.Len() > this.minHeap.Len() + 1 {\\n        maxLeft := heap.Pop(&this.maxHeap)\\n        heap.Push(&this.minHeap, maxLeft)\\n    }\\n    if this.minHeap.Len() > this.maxHeap.Len() {\\n        minRight := heap.Pop(&this.minHeap)\\n        heap.Push(&this.maxHeap, minRight)\\n    }\\n}\\n\\nfunc (this *MedianFinder) FindMedian() float64 {\\n    if this.minHeap.Len() == this.maxHeap.Len() {\\n        return float64(this.minHeap[0] + this.maxHeap[0]) / 2\\n    }\\n    return float64(this.maxHeap[0])\\n}\\n```",
                "solutionTags": [],
                "code": "```go\\nimport \"container/heap\"\\n\\ntype MinHeap []int\\n\\nfunc (h MinHeap) Len() int { return len(h) }\\nfunc (h MinHeap) Less(i, j int) bool { return h[i] < h[j] }\\nfunc (h MinHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] }\\nfunc (h *MinHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\\nfunc (h *MinHeap) Pop() interface{} {\\n    min := (*h)[len(*h) - 1]\\n    *h = (*h)[:len(*h) - 1]\\n    return min\\n}\\n\\ntype MaxHeap []int\\n\\nfunc (h MaxHeap) Len() int { return len(h) }\\nfunc (h MaxHeap) Less(i, j int) bool { return h[i] > h[j] }\\nfunc (h MaxHeap) Swap(i, j int) { h[i], h[j] = h[j], h[i] }\\nfunc (h *MaxHeap) Push(x interface{}) { *h = append(*h, x.(int)) }\\nfunc (h *MaxHeap) Pop() interface{} {\\n    min := (*h)[len(*h) - 1]\\n    *h = (*h)[:len(*h) - 1]\\n    return min\\n}\\n\\ntype MedianFinder struct {\\n    minHeap MinHeap\\n    maxHeap MaxHeap\\n}\\n\\nfunc Constructor() MedianFinder {\\n    return MedianFinder{\\n        minHeap: MinHeap{},\\n        maxHeap: MaxHeap{},\\n    }\\n}\\n\\nfunc (this *MedianFinder) AddNum(num int) {\\n    if this.maxHeap.Len() == 0 || num <= this.maxHeap[0] {\\n        heap.Push(&this.maxHeap, num)\\n    } else {\\n        heap.Push(&this.minHeap, num)\\n    }\\n    if this.maxHeap.Len() > this.minHeap.Len() + 1 {\\n        maxLeft := heap.Pop(&this.maxHeap)\\n        heap.Push(&this.minHeap, maxLeft)\\n    }\\n    if this.minHeap.Len() > this.maxHeap.Len() {\\n        minRight := heap.Pop(&this.minHeap)\\n        heap.Push(&this.maxHeap, minRight)\\n    }\\n}\\n\\nfunc (this *MedianFinder) FindMedian() float64 {\\n    if this.minHeap.Len() == this.maxHeap.Len() {\\n        return float64(this.minHeap[0] + this.maxHeap[0]) / 2\\n    }\\n    return float64(this.maxHeap[0])\\n}\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 439595,
                "title": "java-treeset-solution-beats-93",
                "content": "\\n```\\nimport java.io.*; \\nimport java.util.*; \\nimport java.lang.*;\\n\\nclass MyComparator implements Comparator<int[]>{\\n\\tpublic int compare(int[] a, int[] b) {\\n\\t\\tif (a[0]!=b[0]) {\\n\\t\\t\\treturn a[0] - b[0];\\n\\t\\t}\\n\\t\\treturn a[1] - b[1];\\n\\t}\\n}\\n\\n\\nclass MedianFinder {\\n\\tint time;\\n\\tMyComparator MyCom;\\n\\n    /** initialize your data structure here. */\\n\\tTreeSet<int[]> set ;\\n\\tint[] point1;\\n\\tint[] point2;\\n\\tpublic MedianFinder() {\\n        time = 0;\\n        MyCom = new MyComparator();\\n        set = new TreeSet<>(MyCom);\\n    }\\n\\t\\n    public void addNum(int num) {\\n    \\tint[] item = new int[] {num, time++};\\n        set.add(item);\\n        if (time == 1) {\\n        \\tpoint1 = set.first();\\n        \\tpoint2 = set.first();\\n        \\treturn;\\n        }\\n                \\n        if (point1 == point2) {\\n        \\tif (MyCom.compare(item, point1)<0) {\\n        \\t\\tpoint2 = point1;\\n        \\t\\tpoint1 = set.lower(point1);\\n        \\t}\\n        \\telse {\\n        \\t\\tpoint1 = point2;\\n        \\t\\tpoint2 = set.higher(point2);\\n        \\t}\\n        \\treturn;\\n        }\\n        \\n        if (point1 != point2) {\\n        \\tif (MyCom.compare(item, point1) < 0) {\\n        \\t\\tpoint2 = point1;\\n        \\t}\\n        \\telse if (MyCom.compare(item, point2) > 0) {\\n        \\t\\tpoint1 = point2;\\n        \\t}\\n        \\telse {\\n        \\t\\tpoint1 = item;\\n        \\t\\tpoint2 = item;\\n        \\t}\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        return ((double)point1[0] + (double)point2[0])/2.0;\\n    }\\n}\\n \\n```",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Ordered Set"
                ],
                "code": "```\\nimport java.io.*; \\nimport java.util.*; \\nimport java.lang.*;\\n\\nclass MyComparator implements Comparator<int[]>{\\n\\tpublic int compare(int[] a, int[] b) {\\n\\t\\tif (a[0]!=b[0]) {\\n\\t\\t\\treturn a[0] - b[0];\\n\\t\\t}\\n\\t\\treturn a[1] - b[1];\\n\\t}\\n}\\n\\n\\nclass MedianFinder {\\n\\tint time;\\n\\tMyComparator MyCom;\\n\\n    /** initialize your data structure here. */\\n\\tTreeSet<int[]> set ;\\n\\tint[] point1;\\n\\tint[] point2;\\n\\tpublic MedianFinder() {\\n        time = 0;\\n        MyCom = new MyComparator();\\n        set = new TreeSet<>(MyCom);\\n    }\\n\\t\\n    public void addNum(int num) {\\n    \\tint[] item = new int[] {num, time++};\\n        set.add(item);\\n        if (time == 1) {\\n        \\tpoint1 = set.first();\\n        \\tpoint2 = set.first();\\n        \\treturn;\\n        }\\n                \\n        if (point1 == point2) {\\n        \\tif (MyCom.compare(item, point1)<0) {\\n        \\t\\tpoint2 = point1;\\n        \\t\\tpoint1 = set.lower(point1);\\n        \\t}\\n        \\telse {\\n        \\t\\tpoint1 = point2;\\n        \\t\\tpoint2 = set.higher(point2);\\n        \\t}\\n        \\treturn;\\n        }\\n        \\n        if (point1 != point2) {\\n        \\tif (MyCom.compare(item, point1) < 0) {\\n        \\t\\tpoint2 = point1;\\n        \\t}\\n        \\telse if (MyCom.compare(item, point2) > 0) {\\n        \\t\\tpoint1 = point2;\\n        \\t}\\n        \\telse {\\n        \\t\\tpoint1 = item;\\n        \\t\\tpoint2 = item;\\n        \\t}\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        return ((double)point1[0] + (double)point2[0])/2.0;\\n    }\\n}\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 333680,
                "title": "python-standard-implementation-commented-explained",
                "content": "```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.low=[]\\n        self.high=[]\\n        \\n        \\n    def addNum(self, num: int) -> None:\\n        \\n        if len(self.low)>len(self.high):    #Max heap \\'low\\' has more\\n            if(num<self.findMedian()): #Item smaller than median-> make space-> push to low\\n                shifted=heapq.heappop(self.low)\\n                heapq.heappush(self.high,-shifted)\\n                heapq.heappush(self.low,-num)\\n            else: #Item bigger than median-> push to high\\n                heapq.heappush(self.high,num)\\n        elif len(self.low)==len(self.high): #Both heaps have equal size\\n            if num>self.findMedian():  #Item bigger than median->push to high\\n                heapq.heappush(self.high,num)\\n            else: #Item smaller than median->push to low\\n                heapq.heappush(self.low,-num)\\n        else:                               #Min heap \\'high\\' has more \\n            if(num>self.findMedian()): #Item bigger than median->make space->push to high\\n                shifted=heapq.heappop(self.high)\\n                heapq.heappush(self.low,-shifted)\\n                heapq.heappush(self.high,num)\\n            else: #Item smaller than median->push to low\\n                heapq.heappush(self.low,-num)\\n     \\n    def findMedian(self):\\n        low = self.low\\n        high = self.high\\n        if low and high:\\n            if len(low)==len(high):\\n                return (float(low[0])*-1+float(high[0]))/2.0\\n            if len(low)>len(high):\\n                return float(low[0]) *-1\\n            else:\\n                return float(high[0])\\n        elif not low and high:\\n            return float(high[0])\\n        elif not high and low:\\n            return float(low[0])*-1\\n        else:\\n            return 0.0\\n```\\n\\nWait. What. Howww?? \\nHere goes:\\nIf you have a stream of numbers like 1,2,3,4,5,6,7,8,9,10, you need to find the median. Do this by using two heaps. A max heap and a min heap. Why? Because you want to separate the stream of data into an upper and a lower half. The upper half is held in a min heap(with index 0 holding the least num) and the lower half is held with a max heap(with index 0 holding the max num). So out stream looks like this after we\\'re done adding to the heaps:\\nMax heap-> [5,4,3,2,1]\\nMin heap-> [6,7,8,9,10]\\n\\nNow as to how to add elements to the resepective heaps and retreive the median, remember that the challenge is to keep the heaps balanced( never different in size by more than one.) \\nBasically, for every \"num\" you\\'d like to add, add it appropriately and also keep the heaps balanced. \\n\\nLook at the following algo:\\n\\n```\\nTo add a \"num\":\\n\\tIs lower max heap bigger? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tJust push to high\\n\\t\\t\\telse, it has to go to the bottom half:\\n\\t\\t\\t\\tuh oh. Got to balance. Shift element from low to high. Then push to low\\n\\tIs higher min heap bigger? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tuh oh. Got to balance. Shift element from high to low. Then push to high\\n\\t\\t\\tElse, it goes in the lower half:\\n\\t\\t\\t\\tJust push to low.\\n\\tAre both heaps of same size? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tJust push to high\\n\\t\\t\\tElse, it goes in the lower half:\\n\\t\\t\\t\\tJust push to low\\n```\\n\\nLastly, to find the median:\\n```\\nIf the heaps are of equal size, then average the tops of both heaps.\\nElse return the top of the bigger heap. \\n```\\n\\nVoila ;) As usual, correct me if I\\'m wrong.",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.low=[]\\n        self.high=[]\\n        \\n        \\n    def addNum(self, num: int) -> None:\\n        \\n        if len(self.low)>len(self.high):    #Max heap \\'low\\' has more\\n            if(num<self.findMedian()): #Item smaller than median-> make space-> push to low\\n                shifted=heapq.heappop(self.low)\\n                heapq.heappush(self.high,-shifted)\\n                heapq.heappush(self.low,-num)\\n            else: #Item bigger than median-> push to high\\n                heapq.heappush(self.high,num)\\n        elif len(self.low)==len(self.high): #Both heaps have equal size\\n            if num>self.findMedian():  #Item bigger than median->push to high\\n                heapq.heappush(self.high,num)\\n            else: #Item smaller than median->push to low\\n                heapq.heappush(self.low,-num)\\n        else:                               #Min heap \\'high\\' has more \\n            if(num>self.findMedian()): #Item bigger than median->make space->push to high\\n                shifted=heapq.heappop(self.high)\\n                heapq.heappush(self.low,-shifted)\\n                heapq.heappush(self.high,num)\\n            else: #Item smaller than median->push to low\\n                heapq.heappush(self.low,-num)\\n     \\n    def findMedian(self):\\n        low = self.low\\n        high = self.high\\n        if low and high:\\n            if len(low)==len(high):\\n                return (float(low[0])*-1+float(high[0]))/2.0\\n            if len(low)>len(high):\\n                return float(low[0]) *-1\\n            else:\\n                return float(high[0])\\n        elif not low and high:\\n            return float(high[0])\\n        elif not high and low:\\n            return float(low[0])*-1\\n        else:\\n            return 0.0\\n```\n```\\nTo add a \"num\":\\n\\tIs lower max heap bigger? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tJust push to high\\n\\t\\t\\telse, it has to go to the bottom half:\\n\\t\\t\\t\\tuh oh. Got to balance. Shift element from low to high. Then push to low\\n\\tIs higher min heap bigger? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tuh oh. Got to balance. Shift element from high to low. Then push to high\\n\\t\\t\\tElse, it goes in the lower half:\\n\\t\\t\\t\\tJust push to low.\\n\\tAre both heaps of same size? If yes:\\n\\t\\tIs num bigger than current median? \\n\\t\\t\\tIf so, it has to go to the upper half:\\n\\t\\t\\t\\tJust push to high\\n\\t\\t\\tElse, it goes in the lower half:\\n\\t\\t\\t\\tJust push to low\\n```\n```\\nIf the heaps are of equal size, then average the tops of both heaps.\\nElse return the top of the bigger heap. \\n```",
                "codeTag": "Java"
            },
            {
                "id": 74092,
                "title": "easy-to-understand-c-solution-beats-97",
                "content": "class MedianFinder {\\n\\n    priority_queue<int> left;\\n    priority_queue<int, vector<int>, greater<int> > right;\\npublic:\\n\\n    // Adds a number into the data structure.\\n    void addNum(int num) {\\n        if(left.empty()){\\n            left.push(num);\\n            return;\\n        }\\n        if(num <= left.top()){\\n            left.push(num);\\n            if(left.size()-right.size() > 1){\\n                right.push(left.top());\\n                left.pop();\\n            }\\n        }\\n        else{\\n            right.push(num);\\n            if(right.size()-left.size() > 1){\\n                left.push(right.top());\\n                right.pop();\\n            }\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() {\\n        if(left.size() == right.size()){\\n            return (left.top()+right.top())/2.0;\\n        }\\n        else if(left.size() > right.size()) return left.top();\\n        else return right.top();\\n    }\\n};",
                "solutionTags": [],
                "code": "class MedianFinder {\\n\\n    priority_queue<int> left;\\n    priority_queue<int, vector<int>, greater<int> > right;\\npublic:\\n\\n    // Adds a number into the data structure.\\n    void addNum(int num) {\\n        if(left.empty()){\\n            left.push(num);\\n            return;\\n        }\\n        if(num <= left.top()){\\n            left.push(num);\\n            if(left.size()-right.size() > 1){\\n                right.push(left.top());\\n                left.pop();\\n            }\\n        }\\n        else{\\n            right.push(num);\\n            if(right.size()-left.size() > 1){\\n                left.push(right.top());\\n                right.pop();\\n            }\\n        }\\n    }\\n\\n    // Returns the median of current data stream\\n    double findMedian() {\\n        if(left.size() == right.size()){\\n            return (left.top()+right.top())/2.0;\\n        }\\n        else if(left.size() > right.size()) return left.top();\\n        else return right.top();\\n    }\\n};",
                "codeTag": "Java"
            },
            {
                "id": 3769304,
                "title": "very-easy-solution-using-heap-priority-queue",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(klogn)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(k)$$\\n\\n# C++ Code\\n```\\nclass MedianFinder {\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\npublic:\\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size() == 0 || maxHeap.top() >= num) maxHeap.push(num);\\n        else minHeap.push(num);\\n        balancingHeaps();\\n        \\n    }\\n    \\n    double findMedian() {\\n        if(maxHeap.size() > minHeap.size()) return maxHeap.top();\\n        else if(minHeap.size() > maxHeap.size()) return minHeap.top();\\n        else return (maxHeap.top() + minHeap.top()) / 2.0;\\n        \\n    }\\n    void balancingHeaps(){\\n        if (maxHeap.size() > minHeap.size() + 1) {\\n\\t\\t\\tminHeap.push(maxHeap.top());\\n\\t\\t\\tmaxHeap.pop();\\n\\t\\t} else if (minHeap.size() > maxHeap.size() + 1) {\\n\\t\\t\\tmaxHeap.push(minHeap.top());\\n\\t\\t\\tminHeap.pop();\\n\\t\\t}\\n\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```\\n# Java Code\\n```\\nclass MedianFinder {\\n    private PriorityQueue<Integer> maxHeap = null;\\n    private PriorityQueue<Integer> minHeap = null;\\n\\n    public MedianFinder() {\\n        maxHeap = new PriorityQueue<>((a, b)-> (b - a));\\n        minHeap = new PriorityQueue<>((a, b)-> (a - b));\\n    }\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.size() == 0 || maxHeap.peek() >= num) maxHeap.offer(num);\\n        else minHeap.offer(num);\\n        balancingHeaps();\\n        \\n    }\\n    \\n    \\n    public double findMedian() {\\n        if(maxHeap.size() > minHeap.size()) return maxHeap.peek();\\n        else if(minHeap.size() > maxHeap.size()) return minHeap.peek();\\n        else return (maxHeap.peek() + minHeap.peek()) / 2.0;\\n        \\n    }\\n    private void balancingHeaps(){\\n        if(maxHeap.size() - minHeap.size() > 1) minHeap.offer(maxHeap.poll());\\n        else if(minHeap.size() - maxHeap.size() > 1) maxHeap.offer(minHeap.poll());\\n\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\npublic:\\n    MedianFinder() {\\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size() == 0 || maxHeap.top() >= num) maxHeap.push(num);\\n        else minHeap.push(num);\\n        balancingHeaps();\\n        \\n    }\\n    \\n    double findMedian() {\\n        if(maxHeap.size() > minHeap.size()) return maxHeap.top();\\n        else if(minHeap.size() > maxHeap.size()) return minHeap.top();\\n        else return (maxHeap.top() + minHeap.top()) / 2.0;\\n        \\n    }\\n    void balancingHeaps(){\\n        if (maxHeap.size() > minHeap.size() + 1) {\\n\\t\\t\\tminHeap.push(maxHeap.top());\\n\\t\\t\\tmaxHeap.pop();\\n\\t\\t} else if (minHeap.size() > maxHeap.size() + 1) {\\n\\t\\t\\tmaxHeap.push(minHeap.top());\\n\\t\\t\\tminHeap.pop();\\n\\t\\t}\\n\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3666984,
                "title": "c-easy-properly-commented-heaps-priority-queues",
                "content": "# Intuition\\nbasically we want to mantain 2 heaps.\\nmaxheap will apparently have all the elements to the left of the media. minheap will apparently have all the elements to the right of the median\\n\\nThe main property of the median is that all elements before the median are smaller than itself and all elements after the median are larger than itself, thus we assume 2 arrays (heaps actually).\\n\\n# Complexity\\n- Time complexity for addNum: $$O(logn)$$ \\n- Time complexity for findMedian: $$O(1)$$ \\n\\n- Space complexity: $$O(n)$$\\n\\n\\n# Code\\n```\\nclass MedianFinder {\\npublic:\\n  priority_queue<int, vector<int>, greater<int>> minHeap;\\n  priority_queue<int> maxHeap;\\n    MedianFinder() {\\n        \\n    }\\n    //basically we want to mantain 2 heaps.\\n    // maxheap will apparently have all the elements to the left of the median \\n    //minheap will apparently have all the elements to the right of the median\\n    void addNum(int num) {\\n\\n        //we\\'ll check if the element should go to the left side of the array (before median) \\n        //or to the right side of the array (after median)\\n        if (maxHeap.empty() || maxHeap.top()>num) maxHeap.push(num); \\n        else minHeap.push(num);\\n\\n\\n        //but after inserting there is a possibility that we disrupted the balance between the heaps.\\n        // we need both heaps to have equal size or differ at max by 1.\\n        if (maxHeap.size()>minHeap.size()+1){\\n            minHeap.push(maxHeap.top());\\n            maxHeap.pop();\\n            //removed topmost element from maxHeap and pushed it to minHeap.\\n        } \\n        else if (minHeap.size()>maxHeap.size()+1){\\n            maxHeap.push(minHeap.top());\\n            minHeap.pop();\\n            //removed topmost element from minHeap and pushed it to maxHeap.\\n        } \\n\\n             \\n    }\\n    \\n    double findMedian() {\\n\\n        if (maxHeap.size()==minHeap.size()){\\n            if (maxHeap.empty()) return 0; //the first case where we did not input any number and directly asked for a median.\\n            else return (double) (maxHeap.top()+minHeap.top())/2.0;\\n            // because median is the average of 2 middles when length is even\\n        }\\n        else{\\n            // if the size is not equal then return the top of the largest heap simply\\n            if (maxHeap.size()>minHeap.size()) return maxHeap.top();\\n            else return minHeap.top();\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```\\n\\n## Do Upvote if you understood the solution!\\n\\n\\n\\n#### thank you!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n  priority_queue<int, vector<int>, greater<int>> minHeap;\\n  priority_queue<int> maxHeap;\\n    MedianFinder() {\\n        \\n    }\\n    //basically we want to mantain 2 heaps.\\n    // maxheap will apparently have all the elements to the left of the median \\n    //minheap will apparently have all the elements to the right of the median\\n    void addNum(int num) {\\n\\n        //we\\'ll check if the element should go to the left side of the array (before median) \\n        //or to the right side of the array (after median)\\n        if (maxHeap.empty() || maxHeap.top()>num) maxHeap.push(num); \\n        else minHeap.push(num);\\n\\n\\n        //but after inserting there is a possibility that we disrupted the balance between the heaps.\\n        // we need both heaps to have equal size or differ at max by 1.\\n        if (maxHeap.size()>minHeap.size()+1){\\n            minHeap.push(maxHeap.top());\\n            maxHeap.pop();\\n            //removed topmost element from maxHeap and pushed it to minHeap.\\n        } \\n        else if (minHeap.size()>maxHeap.size()+1){\\n            maxHeap.push(minHeap.top());\\n            minHeap.pop();\\n            //removed topmost element from minHeap and pushed it to maxHeap.\\n        } \\n\\n             \\n    }\\n    \\n    double findMedian() {\\n\\n        if (maxHeap.size()==minHeap.size()){\\n            if (maxHeap.empty()) return 0; //the first case where we did not input any number and directly asked for a median.\\n            else return (double) (maxHeap.top()+minHeap.top())/2.0;\\n            // because median is the average of 2 middles when length is even\\n        }\\n        else{\\n            // if the size is not equal then return the top of the largest heap simply\\n            if (maxHeap.size()>minHeap.size()) return maxHeap.top();\\n            else return minHeap.top();\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805691,
                "title": "arraylist-java-solution-without-sorting-easy-to-uderstand-with-comments",
                "content": "```\\nclass MedianFinder {\\n    int count=0;\\n    ArrayList<Integer> list;\\n    public MedianFinder() {\\n        list=new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int index = Collections.binarySearch(list, num); // provides the position of element in sorted list\\n        if (index < 0) index = ~index;           //if position is -ve converting it to actual postion value\\n        list.add(index,num);\\n        count++;\\n    }\\n    \\n    public double findMedian() {\\n        double median=-1.0;\\n        if(count%2==0){\\n            median=list.get(count/2-1)+list.get(count/2);\\n            median=median/2.0;\\n        }\\n        else{\\n            median=list.get(count/2);\\n        }\\n        return median;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass MedianFinder {\\n    int count=0;\\n    ArrayList<Integer> list;\\n    public MedianFinder() {\\n        list=new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int index = Collections.binarySearch(list, num); // provides the position of element in sorted list\\n        if (index < 0) index = ~index;           //if position is -ve converting it to actual postion value\\n        list.add(index,num);\\n        count++;\\n    }\\n    \\n    public double findMedian() {\\n        double median=-1.0;\\n        if(count%2==0){\\n            median=list.get(count/2-1)+list.get(count/2);\\n            median=median/2.0;\\n        }\\n        else{\\n            median=list.get(count/2);\\n        }\\n        return median;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805420,
                "title": "java-beats-96-memory-easiest-short-implementation-explained",
                "content": "# Intuition\\nJust implelement the 2 given functions\\n\\n# Approach\\n1. Initialize an ArrayList in the constructor.\\n\\n2. In addNum method, \\nkeep adding the incoming elements and at the time of adding itself insert them in their correct place such that they are in ascending order. (See the code)\\n\\n3. In the findMedian method,\\nReturn the middle element if the size of the list is odd,\\nElse return the average of middle two elements.\\n\\n**Why Inbuilt Sort function isn\\'t used?\\nAns: Because it\\'s giving Time Limit Exceeding(TLE) Error**\\n\\n# Complexity\\n- Time complexity:\\nO(n^2)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass MedianFinder {\\n    List<Integer> list; \\n    public MedianFinder() {\\n        this.list = new ArrayList<Integer>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(list.size() == 0) list.add(0, num);  \\n        else{\\n            int i=0;\\n            while(list.get(i) <= num && i<list.size()-1) i++;\\n            //*****The reason why I didn\\'t traversed till the last index was to escape from IndexOutOfBounds Error*****\\n            if(list.get(i) <= num) list.add(i+1, num);\\n            else list.add(i, num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = list.size();\\n        if(n == 0) return 0;\\n        if(n%2 == 1) return list.get(n/2);\\n        return (double)((list.get(n/2) + list.get(n/2 - 1)))/2;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass MedianFinder {\\n    List<Integer> list; \\n    public MedianFinder() {\\n        this.list = new ArrayList<Integer>();\\n    }\\n    \\n    public void addNum(int num) {\\n        if(list.size() == 0) list.add(0, num);  \\n        else{\\n            int i=0;\\n            while(list.get(i) <= num && i<list.size()-1) i++;\\n            //*****The reason why I didn\\'t traversed till the last index was to escape from IndexOutOfBounds Error*****\\n            if(list.get(i) <= num) list.add(i+1, num);\\n            else list.add(i, num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = list.size();\\n        if(n == 0) return 0;\\n        if(n%2 == 1) return list.get(n/2);\\n        return (double)((list.get(n/2) + list.get(n/2 - 1)))/2;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2714911,
                "title": "java-solution-using-min-and-max-heaps",
                "content": "```\\nclass MedianFinder {\\n        /*\\nKey points to solve this problem :-\\n- > create max heap for smaller half of the list\\n- > create min heap for the larger half of the list\\n- > check the size of the two heaps, if they differ by more the 1 element, rebalace them by transfering 1 element from heap with greater size to smaller\\n-> if the two heaps has equal sizes, median will be average of top element of min and the max heap\\n- > else if whichever heaps has the max no. of elements, top element of that heap will be the median\\n    */\\n\\n    \\n    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();\\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());\\n    public MedianFinder() {\\n        \\n    }\\n    public void addNum(int num) {\\n        if(maxHeap.size() == 0 || maxHeap.peek() >= num){\\n            maxHeap.add(num);\\n        }\\n        else{\\n            minHeap.add(num);\\n        }\\n        if(maxHeap.size() > minHeap.size() + 1){\\n            minHeap.add(maxHeap.poll());\\n        }\\n        if(minHeap.size() > maxHeap.size() + 1){\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n       double median = 0.0;\\n       if(minHeap.size() > maxHeap.size()){\\n           median = minHeap.peek();\\n       }else if(maxHeap.size() > minHeap.size()){\\n           median = maxHeap.peek();\\n       }else{\\n           median = (minHeap.peek() + maxHeap.peek())/2.0;\\n       }\\n      return median;\\n    }\\n}\\n\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n        /*\\nKey points to solve this problem :-\\n- > create max heap for smaller half of the list\\n- > create min heap for the larger half of the list\\n- > check the size of the two heaps, if they differ by more the 1 element, rebalace them by transfering 1 element from heap with greater size to smaller\\n-> if the two heaps has equal sizes, median will be average of top element of min and the max heap\\n- > else if whichever heaps has the max no. of elements, top element of that heap will be the median\\n    */\\n\\n    \\n    PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>();\\n    PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(Collections.reverseOrder());\\n    public MedianFinder() {\\n        \\n    }\\n    public void addNum(int num) {\\n        if(maxHeap.size() == 0 || maxHeap.peek() >= num){\\n            maxHeap.add(num);\\n        }\\n        else{\\n            minHeap.add(num);\\n        }\\n        if(maxHeap.size() > minHeap.size() + 1){\\n            minHeap.add(maxHeap.poll());\\n        }\\n        if(minHeap.size() > maxHeap.size() + 1){\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n       double median = 0.0;\\n       if(minHeap.size() > maxHeap.size()){\\n           median = minHeap.peek();\\n       }else if(maxHeap.size() > minHeap.size()){\\n           median = maxHeap.peek();\\n       }else{\\n           median = (minHeap.peek() + maxHeap.peek())/2.0;\\n       }\\n      return median;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2668097,
                "title": "simple-code-using-pbds",
                "content": "```\\n#include <ext/pb_ds/assoc_container.hpp>\\n#include <ext/pb_ds/tree_policy.hpp>\\nusing namespace __gnu_pbds;\\n  \\n#define ordered_set tree<double, null_type,less_equal<double>, rb_tree_tag,tree_order_statistics_node_update>\\nclass MedianFinder {\\npublic:\\n    ordered_set s;\\n    int size=0;\\n    MedianFinder() {\\n        \\n    }\\n    void addNum(int num) {\\n        s.insert(double(num));\\n        size++;\\n    }\\n    \\n    double findMedian() {\\n        if(size%2==1)\\n            return *(s.find_by_order(size/2));\\n        else\\n            return (*(s.find_by_order(size/2))+*(s.find_by_order(size/2-1)))/2;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\n#include <ext/pb_ds/assoc_container.hpp>\\n#include <ext/pb_ds/tree_policy.hpp>\\nusing namespace __gnu_pbds;\\n  \\n#define ordered_set tree<double, null_type,less_equal<double>, rb_tree_tag,tree_order_statistics_node_update>\\nclass MedianFinder {\\npublic:\\n    ordered_set s;\\n    int size=0;\\n    MedianFinder() {\\n        \\n    }\\n    void addNum(int num) {\\n        s.insert(double(num));\\n        size++;\\n    }\\n    \\n    double findMedian() {\\n        if(size%2==1)\\n            return *(s.find_by_order(size/2));\\n        else\\n            return (*(s.find_by_order(size/2))+*(s.find_by_order(size/2-1)))/2;\\n    }\\n};",
                "codeTag": "C++"
            },
            {
                "id": 2446327,
                "title": "3-approaches-explained-in-detail-c-code",
                "content": "**APPROACH-1:** We sort the \\'arr\\' everytime after an insertion\\n-> So, we apply the insertion_sort() here, as the array is almost sorted every time (only one element is inserted)\\n\\n**TC: O(N^2)** -> N: Number of insertions, N: insertion_sort()\\n**SC: O(1)**, as we don\\'t take any aux space\\n\\n\\n```\\nclass MedianFinder {\\n    vector<int> arr;\\n    \\npublic:\\n    MedianFinder() {\\n    }\\n    void addNum(int num) {\\n        arr.push_back(num);\\n        insertion_sort(arr);\\n    }\\n    \\n    double findMedian() {\\n        int n=arr.size();\\n        return n%2==1? arr[n/2] : (double)(arr[n/2]+arr[n/2-1])/2.0;\\n    }\\n    \\n    void insertion_sort(vector<int> &arr){\\n        for(int i=arr.size()-1; i>=0; i--){\\n            if(i-1>=0 && arr[i]<arr[i-1]) swap(arr[i],arr[i-1]);\\n            else break;\\n        }\\n    }\\n};\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n**APPROACH-2: DO WE NEED TO SORT THE ENTIRE ARRAY?**\\n-> **NO!** we only need the middle elements(s) in ordered form\\n-> So, we can apply **quick_select()** algorithm here, as it does the same thing that we want\\n-> There will be two cases- \\n    - in case of odd size, we need only one element\\n    - in case pf even size, we need two elements\\n\\n**TC: O(N^2)** ->  N: Number of insertions, N: quick_select() takes O(N), as the search space gets reduced in this way - N, N/2, N/4,... (in average case BTW)\\n**SC: O(logN),** for the stack space -> can be O(N) in extremely worst cases\\n\\n```\\nclass MedianFinder {\\n    vector<int> arr;\\n    \\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        arr.push_back(num);\\n    }\\n    \\n    double findMedian() {\\n        int n=arr.size();\\n        if(n%2==1){\\n            int itf=n/2;\\n            quick_select(arr,0,n-1,itf);  // O(N) -> Search space-> N, N/2, N/4, N/8, ... and so on \\n            return arr[itf];\\n        } \\n        \\n        int itf1=n/2, itf2=n/2-1;\\n        quick_select(arr,0,n-1,itf1);\\n        quick_select(arr,0,n-1,itf2);\\n        return (arr[itf1]+arr[itf2])/2.0;\\n    }\\n    \\n    void quick_select(vector<int> &arr, int lb, int ub, int itf){\\n        int pi=partition(arr,lb,ub);\\n        if(pi==itf) return;\\n        if(pi<itf) quick_select(arr,pi+1,ub,itf);\\n        else quick_select(arr,lb,pi-1,itf); \\n    }\\n    \\n    int partition(vector<int> &arr, int lb, int ub){\\n        int pivot=ub, i=lb, j=lb;\\n        while(j<pivot){\\n            if(arr[j]<arr[pivot]) swap(arr[i],arr[j]), i++;\\n            j++;\\n        }\\n        swap(arr[i],arr[pivot]);\\n        return i;\\n    } \\n};\\n```\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n**APPROACH-3: USING HEAP (PRIORITY_QUEUE)**\\n-> We divide the entire array into two halves, and there can be two cases -\\n    - In case of ODD size, the maximum element from the left side will be the mediun (as we keep one extra element in the left side)\\n    - In case of EVEN size, the average of \\'maximum from left\\' and \\'minimum from right\\' will be the mediun\\n-> In order to maintain the max and min from both the sides respectively we can use maxHeap for the left-side (as the root will hold the max), and minHeap for the right-side (as the root will hold the min)\\n\\n**BUT, WHEN TO INSERT IN WHICH SIDE?**\\n-> There can be **3 major cases**-\\n    1. When both the sides are empty - Insertion will take place in left side for sure\\n    2. When both the sides have equal elements (but, not 0) - One element will surely be inserted in left-side as we keep one extra element in left side, BUT not \\n       necesarily the current element. There will be 2 cases-\\n        - when the current element is lesser than the minimum of right-side, the current element will surely be inserted in left-side, as there\\'s NO VIOLATION\\n        - Otherwise, shift the minHeap.top() to the maxHeap, and push the \\'num\\' in minHeap (to maintain the overall ordering)\\n    3. When left-side already have one extra element - in this case one element will surely be inserted in right-side, BUT not necessarily the current one. There \\n       will be 2 cases-\\n        - if the current element is greater than the maximum of left-side, then obviously the current element will be placed in the right-side (No Violation)\\n        - Otherwise, we need to shift the maxHeap.top() to the minHeap, and push the \\'num\\' in maxHeap\\n\\n**TC: O(NlogN)**, as it takes O(logN) for the operations in HEAP\\n**SC: O(N),** as we store the elements in HEAP\\n\\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> maxheap; //1st half  -> in case odd size of the total stream, the extra ele will be in the left half (max-heap)\\n    priority_queue<int,vector<int>,greater<int>> minheap; //2nd half \\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        int lsize = maxheap.size();\\n        int rsize = minheap.size();\\n        \\n        if(lsize==0) maxheap.push(num);  // the right-half is surely empty -> so, num is the 1st element in stream -> store it in the first half \\n        else if(lsize==rsize) {  // as the max-heap can take one extra element -> So, ONE element will go on first half (BUT, NOT NECESSARILY \\'NUM\\')\\n            if(num<minheap.top()) maxheap.push(num); // when num<miHeap.top(), num can be pushed into the maxHeap  -> No Violation\\n            else {  // Otherwise, shift the minHeap.top() to the maxHeap, and push the \\'num\\' in minHeap\\n                int temp = minheap.top(); minheap.pop();  \\n                maxheap.push(temp);\\n                minheap.push(num); \\n            }\\n        }\\n        else {  // lsize!=0, and lsize!=rsize -> that means lsize>rsize. So, one element will surely be inserted in right side (BUT, NOT NECESSARILY \\'NUM\\') \\n            if(num>maxheap.top()) minheap.push(num);  // when num>maxHeap.top(), it will obviously go on the right-side -> No Violation\\n            else{ // Otherwise, we need to shift the maxHeap.top() to the minHeap, and push the \\'num\\' in maxHeap\\n                int temp = maxheap.top(); maxheap.pop();\\n                maxheap.push(num);\\n                minheap.push(temp);\\n            }\\n        }\\n    } \\n    \\n    \\n    double findMedian() {\\n        int totSize = maxheap.size() + minheap.size();\\n        return totSize%2==1? maxheap.top() : (maxheap.top()+minheap.top())/2.0;\\n    }\\n};\\n```\\n\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass MedianFinder {\\n    vector<int> arr;\\n    \\npublic:\\n    MedianFinder() {\\n    }\\n    void addNum(int num) {\\n        arr.push_back(num);\\n        insertion_sort(arr);\\n    }\\n    \\n    double findMedian() {\\n        int n=arr.size();\\n        return n%2==1? arr[n/2] : (double)(arr[n/2]+arr[n/2-1])/2.0;\\n    }\\n    \\n    void insertion_sort(vector<int> &arr){\\n        for(int i=arr.size()-1; i>=0; i--){\\n            if(i-1>=0 && arr[i]<arr[i-1]) swap(arr[i],arr[i-1]);\\n            else break;\\n        }\\n    }\\n};\\n```\n```\\nclass MedianFinder {\\n    vector<int> arr;\\n    \\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        arr.push_back(num);\\n    }\\n    \\n    double findMedian() {\\n        int n=arr.size();\\n        if(n%2==1){\\n            int itf=n/2;\\n            quick_select(arr,0,n-1,itf);  // O(N) -> Search space-> N, N/2, N/4, N/8, ... and so on \\n            return arr[itf];\\n        } \\n        \\n        int itf1=n/2, itf2=n/2-1;\\n        quick_select(arr,0,n-1,itf1);\\n        quick_select(arr,0,n-1,itf2);\\n        return (arr[itf1]+arr[itf2])/2.0;\\n    }\\n    \\n    void quick_select(vector<int> &arr, int lb, int ub, int itf){\\n        int pi=partition(arr,lb,ub);\\n        if(pi==itf) return;\\n        if(pi<itf) quick_select(arr,pi+1,ub,itf);\\n        else quick_select(arr,lb,pi-1,itf); \\n    }\\n    \\n    int partition(vector<int> &arr, int lb, int ub){\\n        int pivot=ub, i=lb, j=lb;\\n        while(j<pivot){\\n            if(arr[j]<arr[pivot]) swap(arr[i],arr[j]), i++;\\n            j++;\\n        }\\n        swap(arr[i],arr[pivot]);\\n        return i;\\n    } \\n};\\n```\n```\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> maxheap; //1st half  -> in case odd size of the total stream, the extra ele will be in the left half (max-heap)\\n    priority_queue<int,vector<int>,greater<int>> minheap; //2nd half \\n    \\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        int lsize = maxheap.size();\\n        int rsize = minheap.size();\\n        \\n        if(lsize==0) maxheap.push(num);  // the right-half is surely empty -> so, num is the 1st element in stream -> store it in the first half \\n        else if(lsize==rsize) {  // as the max-heap can take one extra element -> So, ONE element will go on first half (BUT, NOT NECESSARILY \\'NUM\\')\\n            if(num<minheap.top()) maxheap.push(num); // when num<miHeap.top(), num can be pushed into the maxHeap  -> No Violation\\n            else {  // Otherwise, shift the minHeap.top() to the maxHeap, and push the \\'num\\' in minHeap\\n                int temp = minheap.top(); minheap.pop();  \\n                maxheap.push(temp);\\n                minheap.push(num); \\n            }\\n        }\\n        else {  // lsize!=0, and lsize!=rsize -> that means lsize>rsize. So, one element will surely be inserted in right side (BUT, NOT NECESSARILY \\'NUM\\') \\n            if(num>maxheap.top()) minheap.push(num);  // when num>maxHeap.top(), it will obviously go on the right-side -> No Violation\\n            else{ // Otherwise, we need to shift the maxHeap.top() to the minHeap, and push the \\'num\\' in maxHeap\\n                int temp = maxheap.top(); maxheap.pop();\\n                maxheap.push(num);\\n                minheap.push(temp);\\n            }\\n        }\\n    } \\n    \\n    \\n    double findMedian() {\\n        int totSize = maxheap.size() + minheap.size();\\n        return totSize%2==1? maxheap.top() : (maxheap.top()+minheap.top())/2.0;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2384644,
                "title": "python-o-logn-optimised-solution-two-heaps",
                "content": "\\nSolution structure:\\n* I have used two heaps: max_heap and min_heap to store left and right elements to the median resp.  \\n\\t* whenever a new number comes I can check if it should go into left block or right block\\n\\t* left block elements: numbers less than median value are stored in max_heap, I have used max_heap since I will be checking with the highest value element everytime.\\n\\t* right block elements: numbers greater than median value are stored in min_heap, I have used min_heap since I will be checking with the lowest value element everytime.\\n* when list has odd numbers: median will be stored in min_heap, `median = min_heap[0]`\\n\\t* here, `len(max_heap) + 1 = len(min_heap)`\\n* when list has even numbers: each of the median numbers will be stored in max_heap and min_heap, `median = (max_heap[0] + min_heap[0] ) / 2 `\\n\\t* here, `len(max_heap) = len(min_heap)`\\n\\nTime complexity: \\n* addNum: `O(logn)`\\n* findMedian: `O(1)`\\n\\n\\n```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.min_hp = []\\n        self.max_hp = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if len(self.min_hp) == len(self.max_hp):\\n            if len(self.max_hp) and num<-self.max_hp[0]:\\n                cur = -heapq.heappop(self.max_hp)\\n                heapq.heappush(self.max_hp, -num)\\n                heapq.heappush(self.min_hp, cur)\\n            else:\\n                heapq.heappush(self.min_hp, num)\\n        else:\\n            if num>self.min_hp[0]:\\n                cur = heapq.heappop(self.min_hp)\\n                heapq.heappush(self.min_hp, num)\\n                heapq.heappush(self.max_hp, -cur)\\n            else:\\n                heapq.heappush(self.max_hp, -num)\\n        \\n    def findMedian(self) -> float:\\n        if len(self.min_hp) == len(self.max_hp):\\n            return (self.min_hp[0] + -self.max_hp[0]) /2\\n        else:\\n            return self.min_hp[0]\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```python\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.min_hp = []\\n        self.max_hp = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if len(self.min_hp) == len(self.max_hp):\\n            if len(self.max_hp) and num<-self.max_hp[0]:\\n                cur = -heapq.heappop(self.max_hp)\\n                heapq.heappush(self.max_hp, -num)\\n                heapq.heappush(self.min_hp, cur)\\n            else:\\n                heapq.heappush(self.min_hp, num)\\n        else:\\n            if num>self.min_hp[0]:\\n                cur = heapq.heappop(self.min_hp)\\n                heapq.heappush(self.min_hp, num)\\n                heapq.heappush(self.max_hp, -cur)\\n            else:\\n                heapq.heappush(self.max_hp, -num)\\n        \\n    def findMedian(self) -> float:\\n        if len(self.min_hp) == len(self.max_hp):\\n            return (self.min_hp[0] + -self.max_hp[0]) /2\\n        else:\\n            return self.min_hp[0]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2375029,
                "title": "c-priority-queue-min-heap-and-max-heap",
                "content": "Basic idea : \\nLet we have two boxes ( left box and right box )  then, \\n1) Max difference between number of elements of the two box should be 1\\n2) All elements of left box should be smaller than all elements of right box\\n```\\nclass MedianFinder {\\npublic:\\n    \\n    priority_queue<int> left;\\n    priority_queue<int,vector<int>, greater<int> > right;\\n    \\n    MedianFinder() {\\n    }\\n    \\n    void addNum (int num) {\\n        // initial condition\\n        if ( left.size() == 0){\\n            left.push(num);\\n        }\\n        else if ( left.size() > right.size() ){\\n            \\n            if( num > left.top() ) right.push(num);\\n            else{\\n                right.push( left.top() );\\n                left.pop();\\n                left.push(num);\\n            }\\n        }\\n        else if ( left.size() < right.size() ){\\n            \\n            if ( num < right.top() ) left.push(num);\\n            else {\\n                left.push(right.top());\\n                right.pop(); \\n                right.push(num);\\n            }\\n        }\\n        else {\\n            if( num > left.top() ) right.push(num);\\n            else left.push(num);\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        \\n        if ( left.size() > right.size() ) return left.top();\\n\\t\\t\\n        else if (right.size() > left.size()) return right.top();\\n\\t\\t\\n        else return (left.top()+right.top())/2.0;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    \\n    priority_queue<int> left;\\n    priority_queue<int,vector<int>, greater<int> > right;\\n    \\n    MedianFinder() {\\n    }\\n    \\n    void addNum (int num) {\\n        // initial condition\\n        if ( left.size() == 0){\\n            left.push(num);\\n        }\\n        else if ( left.size() > right.size() ){\\n            \\n            if( num > left.top() ) right.push(num);\\n            else{\\n                right.push( left.top() );\\n                left.pop();\\n                left.push(num);\\n            }\\n        }\\n        else if ( left.size() < right.size() ){\\n            \\n            if ( num < right.top() ) left.push(num);\\n            else {\\n                left.push(right.top());\\n                right.pop(); \\n                right.push(num);\\n            }\\n        }\\n        else {\\n            if( num > left.top() ) right.push(num);\\n            else left.push(num);\\n        }\\n        \\n    }\\n    \\n    double findMedian() {\\n        \\n        if ( left.size() > right.size() ) return left.top();\\n\\t\\t\\n        else if (right.size() > left.size()) return right.top();\\n\\t\\t\\n        else return (left.top()+right.top())/2.0;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2298911,
                "title": "last-test-case-is-failing",
                "content": "I implemented two heap soultion with JavaScript. Since JavaScript itself doesn\\'t provide any built-in heaps, I implemented my own heaps implemetation for min and max heaps. \\n\\nThis soultion is passing 21/22 testcases yet the last one which contains 49999 quries failing for some reason.\\nI belive issues lies with my heap\\'s trickle down and up code. But to actually debug this is overhelming task because of the huge test case.\\n\\nI went through my code countless times but still unable to find what is the issue.  Here is my soultion. Am I missing someting here ?\\n\\n```\\nvar MedianFinder = function () {\\n  this.smallHeap = new Heap.max();\\n  this.bigHeap = new Heap.min();\\n};\\n\\n/**\\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function (num) {\\n  this.smallHeap.heapPush(num);\\n\\n  if (this.smallHeap.heapPeek() > this.bigHeap.heapPeek()) {\\n    this.bigHeap.heapPush(this.smallHeap.heapPop());\\n  }\\n  const diff = Math.abs(this.smallHeap.length() - this.bigHeap.length());\\n  if (diff > 1) {\\n    const largerLength = Math.max(\\n      this.smallHeap.length(),\\n      this.bigHeap.length()\\n    );\\n    if (this.smallHeap.length() === largerLength) {\\n      this.bigHeap.heapPush(this.smallHeap.heapPop());\\n    } else {\\n      this.smallHeap.heapPush(this.bigHeap.heapPop());\\n    }\\n  }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function () {\\n  const smallLength = this.smallHeap.length();\\n  const bigLength = this.bigHeap.length();\\n  if (smallLength === bigLength) {\\n    return (this.smallHeap.heapPeek() + this.bigHeap.heapPeek()) / 2;\\n  }\\n  const maxLength = Math.max(smallLength, bigLength);\\n  if (smallLength === maxLength) {\\n    return this.smallHeap.heapPeek();\\n  }\\n  return this.bigHeap.heapPeek();\\n};\\n```\\n\\nAnd the heaps code,\\n\\n```\\nconst trickleUp = function (heapType, heap) {\\n  return function (val) {\\n    // trickle up\\n    heap.push(val);\\n    if (heap.length < 2) {\\n      return heap.length;\\n    }\\n\\n    let i = heap.length - 1;\\n    while (i > 0) {\\n      const parent = Math.floor((i - 1) / 2);\\n      // change the condtion beased on heap type\\n      if (heapType === \"max\" && heap[i] <= heap[parent]) {\\n        break;\\n      }\\n      if (heapType === \"min\" && heap[i] >= heap[parent]) {\\n        break;\\n      }\\n      const temp = heap[i];\\n      heap[i] = heap[parent];\\n      heap[parent] = temp;\\n      i = parent;\\n    }\\n    return heap.length;\\n  };\\n};\\n\\nconst trickleDown = function (heapType, heap) {\\n  return function () {\\n    // trickle up\\n    if (heap.length < 2) {\\n      return heap.pop();\\n    }\\n    const top = heap[0];\\n    heap[0] = heap.pop();\\n\\tlet i=0;\\n    while(i*2+1 < heap.length) {\\n      const left = i*2 + 1;\\n      const right = i*2 + 2;\\n      const parent = i;\\n      /*\\n\\t\\tleft should definitely exsist if insed the loop\\n\\t\\twhy? i+1<heap.length\\n\\n\\t\\tbut right child might or might not exisits\\n        */\\n      const childVal = heap[right]\\n        ? Math[heapType](heap[left], heap[right])\\n        : heap[left];\\n      // check need to perform swap\\n      if (heapType === \"max\" && childVal <= heap[parent]) {\\n        break;\\n      }\\n      if (heapType === \"min\" && childVal >= heap[parent]) {\\n        break;\\n      }\\n      //which child to swap\\n      const child = heap[left] === childVal ? left : right;\\n      // swap\\n      const temp = heap[parent];\\n      heap[parent] = heap[child];\\n      heap[child] = temp;\\n\\t  i=child;\\n    }\\n\\n    return top;\\n  };\\n};\\n\\nconst Heap = (function () {\\n  const heapFunc = function (heapType) {\\n    return function () {\\n      const heap = [];\\n      const heapPush = trickleUp(heapType, heap);\\n      const heapPop = trickleDown(heapType, heap);\\n      return {\\n        length: function () {\\n          return heap.length;\\n        },\\n        heapPush,\\n        heapPop,\\n        heapPeek: () => heap[0],\\n\\t\\theap\\n      };\\n    };\\n  };\\n\\n  return {\\n    max: heapFunc(\"max\"),\\n    min: heapFunc(\"min\"),\\n  };\\n})();\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar MedianFinder = function () {\\n  this.smallHeap = new Heap.max();\\n  this.bigHeap = new Heap.min();\\n};\\n\\n/**\\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function (num) {\\n  this.smallHeap.heapPush(num);\\n\\n  if (this.smallHeap.heapPeek() > this.bigHeap.heapPeek()) {\\n    this.bigHeap.heapPush(this.smallHeap.heapPop());\\n  }\\n  const diff = Math.abs(this.smallHeap.length() - this.bigHeap.length());\\n  if (diff > 1) {\\n    const largerLength = Math.max(\\n      this.smallHeap.length(),\\n      this.bigHeap.length()\\n    );\\n    if (this.smallHeap.length() === largerLength) {\\n      this.bigHeap.heapPush(this.smallHeap.heapPop());\\n    } else {\\n      this.smallHeap.heapPush(this.bigHeap.heapPop());\\n    }\\n  }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function () {\\n  const smallLength = this.smallHeap.length();\\n  const bigLength = this.bigHeap.length();\\n  if (smallLength === bigLength) {\\n    return (this.smallHeap.heapPeek() + this.bigHeap.heapPeek()) / 2;\\n  }\\n  const maxLength = Math.max(smallLength, bigLength);\\n  if (smallLength === maxLength) {\\n    return this.smallHeap.heapPeek();\\n  }\\n  return this.bigHeap.heapPeek();\\n};\\n```\n```\\nconst trickleUp = function (heapType, heap) {\\n  return function (val) {\\n    // trickle up\\n    heap.push(val);\\n    if (heap.length < 2) {\\n      return heap.length;\\n    }\\n\\n    let i = heap.length - 1;\\n    while (i > 0) {\\n      const parent = Math.floor((i - 1) / 2);\\n      // change the condtion beased on heap type\\n      if (heapType === \"max\" && heap[i] <= heap[parent]) {\\n        break;\\n      }\\n      if (heapType === \"min\" && heap[i] >= heap[parent]) {\\n        break;\\n      }\\n      const temp = heap[i];\\n      heap[i] = heap[parent];\\n      heap[parent] = temp;\\n      i = parent;\\n    }\\n    return heap.length;\\n  };\\n};\\n\\nconst trickleDown = function (heapType, heap) {\\n  return function () {\\n    // trickle up\\n    if (heap.length < 2) {\\n      return heap.pop();\\n    }\\n    const top = heap[0];\\n    heap[0] = heap.pop();\\n\\tlet i=0;\\n    while(i*2+1 < heap.length) {\\n      const left = i*2 + 1;\\n      const right = i*2 + 2;\\n      const parent = i;\\n      /*\\n\\t\\tleft should definitely exsist if insed the loop\\n\\t\\twhy? i+1<heap.length\\n\\n\\t\\tbut right child might or might not exisits\\n        */\\n      const childVal = heap[right]\\n        ? Math[heapType](heap[left], heap[right])\\n        : heap[left];\\n      // check need to perform swap\\n      if (heapType === \"max\" && childVal <= heap[parent]) {\\n        break;\\n      }\\n      if (heapType === \"min\" && childVal >= heap[parent]) {\\n        break;\\n      }\\n      //which child to swap\\n      const child = heap[left] === childVal ? left : right;\\n      // swap\\n      const temp = heap[parent];\\n      heap[parent] = heap[child];\\n      heap[child] = temp;\\n\\t  i=child;\\n    }\\n\\n    return top;\\n  };\\n};\\n\\nconst Heap = (function () {\\n  const heapFunc = function (heapType) {\\n    return function () {\\n      const heap = [];\\n      const heapPush = trickleUp(heapType, heap);\\n      const heapPop = trickleDown(heapType, heap);\\n      return {\\n        length: function () {\\n          return heap.length;\\n        },\\n        heapPush,\\n        heapPop,\\n        heapPeek: () => heap[0],\\n\\t\\theap\\n      };\\n    };\\n  };\\n\\n  return {\\n    max: heapFunc(\"max\"),\\n    min: heapFunc(\"min\"),\\n  };\\n})();\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2298430,
                "title": "simple-with-heap",
                "content": "```\\ntype MedianFinder struct {\\n    minH minHeap\\n    maxH maxHeap\\n}\\n\\nfunc Constructor() MedianFinder {\\n    var minH minHeap\\n    var maxH maxHeap\\n    \\n    return MedianFinder {\\n        minH: minH,\\n        maxH: maxH,\\n    }\\n}\\n\\nfunc (this *MedianFinder) AddNum(num int)  {\\n    if len(this.maxH) == 0 || num <= this.maxH[0] {\\n        this.maxH.add(num)\\n    } else {\\n        this.minH.add(num)\\n    }\\n    \\n    if len(this.maxH) > len(this.minH)+1 {\\n        this.minH.add(this.maxH.pop())\\n    } else if len(this.maxH) < len(this.minH) {\\n        this.maxH.add(this.minH.pop())\\n    }\\n}\\n\\nfunc (this *MedianFinder) FindMedian() float64 {\\n    if len(this.minH) == len(this.maxH) {\\n        return (float64(this.minH[0]) + float64(this.maxH[0]))/float64(2)\\n    }\\n    \\n    return float64(this.maxH[0])\\n}\\n\\ntype minHeap []int\\n\\ntype maxHeap []int\\n\\nfunc (h *maxHeap) pop() int {\\n    poppedItem := (*h)[0]\\n    \\n    (*h)[0] = (*h)[len(*h)-1]\\n    (*h) = (*h)[:len(*h)-1]\\n    h.heapDown(0)\\n    \\n    return poppedItem\\n}\\n\\nfunc (h *minHeap) pop() int {\\n    poppedItem := (*h)[0]\\n    \\n    (*h)[0] = (*h)[len(*h)-1]\\n    (*h) = (*h)[:len(*h)-1]\\n    h.heapDown(0)\\n    \\n    return poppedItem\\n}\\n\\nfunc (h *minHeap) add(num int) {\\n    *h = append(*h, num)\\n    h.heapUp(len(*h)-1)\\n}\\n\\nfunc (h *maxHeap) add(num int) {\\n    *h = append(*h, num)\\n    h.heapUp(len(*h)-1)\\n}\\n\\nfunc (h *minHeap) heapDown(p int) {\\n    l, r := 2*p+1, 2*p+2\\n    smaller := p\\n    \\n    if l < len(*h) && (*h)[l] < (*h)[smaller] {\\n        smaller = l\\n    }\\n    \\n    if r < len(*h) && (*h)[r] < (*h)[smaller] {\\n        smaller = r\\n    }\\n    \\n    if smaller != p {\\n        (*h)[smaller], (*h)[p] = (*h)[p], (*h)[smaller]\\n        h.heapDown(smaller)\\n    }\\n}\\n\\nfunc (h *minHeap) heapUp(p int) {\\n    parent := (p-1)/2\\n    \\n    if parent >= 0 && (*h)[p] < (*h)[parent] {\\n        (*h)[p], (*h)[parent] = (*h)[parent], (*h)[p]\\n        h.heapUp(parent)\\n    }\\n}\\n\\nfunc (h *maxHeap) heapDown(p int) {\\n    l, r := 2*p+1, 2*p+2\\n    bigger := p \\n    \\n    if l < len(*h) && (*h)[l] > (*h)[bigger] {\\n        bigger = l\\n    }\\n    \\n    if r < len(*h)&& (*h)[r] > (*h)[bigger] {\\n        bigger = r\\n    }\\n    \\n    if bigger != p {\\n        (*h)[bigger], (*h)[p] = (*h)[p], (*h)[bigger]\\n        h.heapDown(bigger)\\n    }\\n}\\n\\nfunc (h *maxHeap) heapUp(p int) {\\n    parent := (p-1)/2\\n    \\n    if parent >= 0 && (*h)[p] > (*h)[parent] {\\n        (*h)[p], (*h)[parent] = (*h)[parent], (*h)[p]\\n        h.heapUp(parent)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ntype MedianFinder struct {\\n    minH minHeap\\n    maxH maxHeap\\n}\\n\\nfunc Constructor() MedianFinder {\\n    var minH minHeap\\n    var maxH maxHeap\\n    \\n    return MedianFinder {\\n        minH: minH,\\n        maxH: maxH,\\n    }\\n}\\n\\nfunc (this *MedianFinder) AddNum(num int)  {\\n    if len(this.maxH) == 0 || num <= this.maxH[0] {\\n        this.maxH.add(num)\\n    } else {\\n        this.minH.add(num)\\n    }\\n    \\n    if len(this.maxH) > len(this.minH)+1 {\\n        this.minH.add(this.maxH.pop())\\n    } else if len(this.maxH) < len(this.minH) {\\n        this.maxH.add(this.minH.pop())\\n    }\\n}\\n\\nfunc (this *MedianFinder) FindMedian() float64 {\\n    if len(this.minH) == len(this.maxH) {\\n        return (float64(this.minH[0]) + float64(this.maxH[0]))/float64(2)\\n    }\\n    \\n    return float64(this.maxH[0])\\n}\\n\\ntype minHeap []int\\n\\ntype maxHeap []int\\n\\nfunc (h *maxHeap) pop() int {\\n    poppedItem := (*h)[0]\\n    \\n    (*h)[0] = (*h)[len(*h)-1]\\n    (*h) = (*h)[:len(*h)-1]\\n    h.heapDown(0)\\n    \\n    return poppedItem\\n}\\n\\nfunc (h *minHeap) pop() int {\\n    poppedItem := (*h)[0]\\n    \\n    (*h)[0] = (*h)[len(*h)-1]\\n    (*h) = (*h)[:len(*h)-1]\\n    h.heapDown(0)\\n    \\n    return poppedItem\\n}\\n\\nfunc (h *minHeap) add(num int) {\\n    *h = append(*h, num)\\n    h.heapUp(len(*h)-1)\\n}\\n\\nfunc (h *maxHeap) add(num int) {\\n    *h = append(*h, num)\\n    h.heapUp(len(*h)-1)\\n}\\n\\nfunc (h *minHeap) heapDown(p int) {\\n    l, r := 2*p+1, 2*p+2\\n    smaller := p\\n    \\n    if l < len(*h) && (*h)[l] < (*h)[smaller] {\\n        smaller = l\\n    }\\n    \\n    if r < len(*h) && (*h)[r] < (*h)[smaller] {\\n        smaller = r\\n    }\\n    \\n    if smaller != p {\\n        (*h)[smaller], (*h)[p] = (*h)[p], (*h)[smaller]\\n        h.heapDown(smaller)\\n    }\\n}\\n\\nfunc (h *minHeap) heapUp(p int) {\\n    parent := (p-1)/2\\n    \\n    if parent >= 0 && (*h)[p] < (*h)[parent] {\\n        (*h)[p], (*h)[parent] = (*h)[parent], (*h)[p]\\n        h.heapUp(parent)\\n    }\\n}\\n\\nfunc (h *maxHeap) heapDown(p int) {\\n    l, r := 2*p+1, 2*p+2\\n    bigger := p \\n    \\n    if l < len(*h) && (*h)[l] > (*h)[bigger] {\\n        bigger = l\\n    }\\n    \\n    if r < len(*h)&& (*h)[r] > (*h)[bigger] {\\n        bigger = r\\n    }\\n    \\n    if bigger != p {\\n        (*h)[bigger], (*h)[p] = (*h)[p], (*h)[bigger]\\n        h.heapDown(bigger)\\n    }\\n}\\n\\nfunc (h *maxHeap) heapUp(p int) {\\n    parent := (p-1)/2\\n    \\n    if parent >= 0 && (*h)[p] > (*h)[parent] {\\n        (*h)[p], (*h)[parent] = (*h)[parent], (*h)[p]\\n        h.heapUp(parent)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2152596,
                "title": "python-detailed-heap-solutions-for-noobs-like-moi",
                "content": "The\\xA0**median**\\xA0is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.\\n\\n- For example, for\\xA0`arr = [2,3,4]`, the median is\\xA0`3`.\\n- For example, for\\xA0`arr = [2,3]`, the median is\\xA0`(2 + 3) / 2 = 2.5`.\\n\\nImplement the MedianFinder class:\\n\\n- `MedianFinder()`\\xA0initializes the\\xA0`MedianFinder`\\xA0object.\\n- `void addNum(int num)`\\xA0adds the integer\\xA0`num`\\xA0from the data stream to the data structure.\\n- `double findMedian()`\\xA0returns the median of all elements so far. Answers within\\xA0`105`\\xA0of the actual answer will be accepted.\\n\\n**Example 1:**\\n\\n```\\nInput\\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\\n[[], [1], [2], [], [3], []]\\nOutput\\n[null, null, null, 1.5, null, 2.0]\\n\\nExplanation\\nMedianFinder medianFinder = new MedianFinder();\\nmedianFinder.addNum(1);    // arr = [1]\\nmedianFinder.addNum(2);    // arr = [1, 2]\\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\\nmedianFinder.addNum(3);    // arr[1, 2, 3]\\nmedianFinder.findMedian(); // return 2.0\\n\\n```\\n\\n**Constraints:**\\n\\n- `105\\xA0<= num <= 105`\\n- There will be at least one element in the data structure before calling\\xA0`findMedian`.\\n- At most\\xA0`5 * 104`\\xA0calls will be made to\\xA0`addNum`\\xA0and\\xA0`findMedian`.\\n\\n### Brainstorming\\n\\n1. We are given a stream of numbers coming in random order and we need to find the median of the numbers as if they were ordered. So\\n    1. numbers coming in 4,3,2,1,5 median of this will be\\n        1. First we order the numbers coming in [1,2,3,4,5]\\n        2. Median is the the value at the midpoint in a sorted array.\\n            1. So in this case it will be 3\\n                1. However there is a caveat when the array is even the median becomes the average of the two values near the middle.\\n                    1. [1,2,3,4] median = (2+3)/2 = 2.5\\n2. Now we dissected the question how can we go about solving it, A common method is that we can keep putting numbers in an array and every time we put a number in the array we sort the array. Adding an item in a sorted array will cost us a time complexity of O(n) as we will have to go over the whole array. And to add a value we will have to move all the values in the array one index ahead.\\n    1. [1,2,3,4,5 ] add 3 [1,2,3,3,4,5] will have to go over all the values until we have found the sorted position for 3 and then will have to move positions 3 will come in the place of 4 and 4 will have to be moved.See how this can get really time complex.\\n3. What do you think is a better solution for this, what if we divided the numbers coming in into two arrays one having the smaller set of numbers and the other having the larger set of numbers, after equalizing for the median. \\n    1. even [1,2,3,4] \\u2014>  can be either [1,2] [3,4] \\n        1. Median is the sum divided by 2 of the largest value in the smaller array and the smallest value of the set of larger numbers.\\n    2. odd [1,2,3,4,5] \\u2014>  it can be either [1,2,3] [4,5] or [1,2] [3,4,5]\\n        1. Median in the odd case is the largest value if the array with a smaller  set of numbers is larger(by 1 ) and the smallest value if the array with the set of larger numbers is larger in length(by 1).\\n4. Now you have seen how we can keep the order the numbers in the two separate arrays, what structure in your eyes is appropriate to get the max and the mins of separate arrays. Heaps anyone. Yes we will use heaps.\\n    1. How is heaps implemented in python\\n        \\n        Implementing a min heap requires you to use heapq.\\n        \\n        There are only min heaps in python \\n        \\n        ```python\\n        #initiated as a list\\n        minheap = []\\n        heapq.heappush(minheap,1)\\n        \\n        # to convert it into a max heap we just multiply the values by -1 so\\n        # the largest value becomes the smallest value and the min heap in python is able to get\\n        # that for you \\n        \\n        maxheap = []\\n        heapq.heappush(minheap,1 * -1)\\n        maxheap[0] # the smallest value is stored at the first index \\n        ```\\n        \\n    2. This is a little counter intuitive as we our smaller set of numbers heap is a max heap but is called small\\n        \\n        ```python\\n        #small = maxheap\\n        #large = minheap \\n        small,large = [],[]\\n        ```\\n        \\n    3. We will add the incoming number by default to the small array.\\n        \\n        ```python\\n        heapq.heappush(small,-1* incomingNumber) # -1 as this is a max heap\\n        ```\\n        \\n5. But not so fast we need to maintain the sizes of the two array as we are adding different number into them. What are a few conditions we need to maintain. As we add the numbers to the small array\\n    1. All the numbers in the smaller heap need to be less than those in the larger heap.\\n        \\n        ```python\\n        #when adding a number check [1,2] [3,4] 5 is being \\n        #added to the smaller heap [1,2,5] [3,4] \\n        #the size condition is meet but not the values in the small set being smaller\\n        #then the large set as 5 is larger value then 3 the min in the large heap.\\n        \\n        #how can we check that since we already have an imbalanced heaps\\n        \\n        if (small and large and (-1 * small[0]) > large[0]):\\n        \\t# we take the number that is too large in the small array and put it \\n        \\t# into the large array.\\n        \\t\\n        \\t#pop from small array\\n        \\tval = -1 * heapq.heappop(small) # multply by -1 again to equalize positivity :)\\n        \\t#push to large\\n        \\theapq.heappush(large, val)\\n        \\n        ```\\n        \\n        1. I know multiplying by -1 is tedious but that is the only way to implement it in python\\n    2. The difference of sizes between the two heaps can\\u2019t be more than 1.\\n        \\n        ```python\\n        if len(small) > len(large) + 1: \\n        \\t#pop from small array\\n        \\tval = -1 * heapq.heappop(small) # multply by -1 again to equalize positivity :)\\n        \\t#push to large\\n        \\theapq.heappush(large, val)\\n        \\n        \\t\\n        \\n        if len(small)+ 1 < len(large): \\n        \\t#pop from large array\\n        \\tval =  heapq.heappop(large) \\n        \\t#push to small\\n        \\theapq.heappush(small, -1* val)\\n        \\n        ```\\n        \\n6. Now the add number shenanigans are sorted ;). how do we return the median. Refer to point number 3.\\n    \\n    ```python\\n    \\n    def findMedian(self):\\n    if len(small) > len(large): # [1,2,3] [4,5]\\n    \\t# get the max from teh smalll array\\n    \\treturn -1 * small[0] \\n    elif len(small) < len(large): # [1,2] [3,4,5]\\n    \\t# get the max from teh smalll array\\n    \\t return large[0] \\n    \\n    else: \\n    \\treturn (-1* small[0] + large[0]) / 2\\n    \\n    ```\\n    \\n7. That is it lets write the code now.\\n    \\n    ```python\\n    import heapq\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            # two heaps\\n            self.small = [] # smaller set of numbers max heap \\n            self.large = [] # larger set of numbers min heap \\n            \\n            #they need to be equal\\n            \\n            \\n    \\n        def addNum(self, num: int) -> None:\\n            \\n            # push to the small heap\\n            heapq.heappush(self.small,- 1*num)\\n            \\n            # Conditions\\n            \\n            # all the numbers in the smaller heap need to be less than those in the larger heap.\\n            if (self.small and self.large and (-1 * self.small[0]) > self.large[0]): \\n                # pop from small array\\n                val = -1 * heapq.heappop(self.small) # multply by -1 again to equalize positivity :)\\n                # push to large array\\n                heapq.heappush(self.large, val)\\n                \\n                \\n            \\n            #The difference of sizes between the two heaps can\\u2019t be more than 1 \\n            # Two possibiltes \\n            \\n            \\n            if len(self.small) > len(self.large) + 1: # [1,2,4] [3]\\n                #pop from small array\\n                val = -1 * heapq.heappop(self.small) \\n                #push to large\\n                heapq.heappush(self.large, val)\\n        \\n                \\n            \\n            \\n            if (len(self.small) + 1) < len(self.large): # [1] [3,4]\\n                #pop from large array\\n                val =  heapq.heappop(self.large) \\n                #push to small\\n                heapq.heappush(self.small, -1 *val)\\n                \\n    \\n    \\t\\n    \\n                \\n    \\n        def findMedian(self) -> float:\\n            # print(self.small)\\n            # print(self.large)\\n            \\n            if len(self.small) > len(self.large): # [1,2,3] [4,5]\\n                # get the max from teh smalll array\\n                return -1 * self.small[0] \\n            elif len(self.small) < len(self.large): # [1,2] [3,4,5]\\n                # get the max from teh smalll array\\n                 return self.large[0] \\n            else: # [1,2] [3,4]\\n                return (-1 * self.small[0] + self.large[0]) / 2\\n    ```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nInput\\n[\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\\n[[], [1], [2], [], [3], []]\\nOutput\\n[null, null, null, 1.5, null, 2.0]\\n\\nExplanation\\nMedianFinder medianFinder = new MedianFinder();\\nmedianFinder.addNum(1);    // arr = [1]\\nmedianFinder.addNum(2);    // arr = [1, 2]\\nmedianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\\nmedianFinder.addNum(3);    // arr[1, 2, 3]\\nmedianFinder.findMedian(); // return 2.0\\n\\n```\n```python\\n        #initiated as a list\\n        minheap = []\\n        heapq.heappush(minheap,1)\\n        \\n        # to convert it into a max heap we just multiply the values by -1 so\\n        # the largest value becomes the smallest value and the min heap in python is able to get\\n        # that for you \\n        \\n        maxheap = []\\n        heapq.heappush(minheap,1 * -1)\\n        maxheap[0] # the smallest value is stored at the first index \\n        ```\n```python\\n        #small = maxheap\\n        #large = minheap \\n        small,large = [],[]\\n        ```\n```python\\n        heapq.heappush(small,-1* incomingNumber) # -1 as this is a max heap\\n        ```\n```python\\n        #when adding a number check [1,2] [3,4] 5 is being \\n        #added to the smaller heap [1,2,5] [3,4] \\n        #the size condition is meet but not the values in the small set being smaller\\n        #then the large set as 5 is larger value then 3 the min in the large heap.\\n        \\n        #how can we check that since we already have an imbalanced heaps\\n        \\n        if (small and large and (-1 * small[0]) > large[0]):\\n        \\t# we take the number that is too large in the small array and put it \\n        \\t# into the large array.\\n        \\t\\n        \\t#pop from small array\\n        \\tval = -1 * heapq.heappop(small) # multply by -1 again to equalize positivity :)\\n        \\t#push to large\\n        \\theapq.heappush(large, val)\\n        \\n        ```\n```python\\n        if len(small) > len(large) + 1: \\n        \\t#pop from small array\\n        \\tval = -1 * heapq.heappop(small) # multply by -1 again to equalize positivity :)\\n        \\t#push to large\\n        \\theapq.heappush(large, val)\\n        \\n        \\t\\n        \\n        if len(small)+ 1 < len(large): \\n        \\t#pop from large array\\n        \\tval =  heapq.heappop(large) \\n        \\t#push to small\\n        \\theapq.heappush(small, -1* val)\\n        \\n        ```\n```python\\n    \\n    def findMedian(self):\\n    if len(small) > len(large): # [1,2,3] [4,5]\\n    \\t# get the max from teh smalll array\\n    \\treturn -1 * small[0] \\n    elif len(small) < len(large): # [1,2] [3,4,5]\\n    \\t# get the max from teh smalll array\\n    \\t return large[0] \\n    \\n    else: \\n    \\treturn (-1* small[0] + large[0]) / 2\\n    \\n    ```\n```python\\n    import heapq\\n    class MedianFinder:\\n    \\n        def __init__(self):\\n            # two heaps\\n            self.small = [] # smaller set of numbers max heap \\n            self.large = [] # larger set of numbers min heap \\n            \\n            #they need to be equal\\n            \\n            \\n    \\n        def addNum(self, num: int) -> None:\\n            \\n            # push to the small heap\\n            heapq.heappush(self.small,- 1*num)\\n            \\n            # Conditions\\n            \\n            # all the numbers in the smaller heap need to be less than those in the larger heap.\\n            if (self.small and self.large and (-1 * self.small[0]) > self.large[0]): \\n                # pop from small array\\n                val = -1 * heapq.heappop(self.small) # multply by -1 again to equalize positivity :)\\n                # push to large array\\n                heapq.heappush(self.large, val)\\n                \\n                \\n            \\n            #The difference of sizes between the two heaps can\\u2019t be more than 1 \\n            # Two possibiltes \\n            \\n            \\n            if len(self.small) > len(self.large) + 1: # [1,2,4] [3]\\n                #pop from small array\\n                val = -1 * heapq.heappop(self.small) \\n                #push to large\\n                heapq.heappush(self.large, val)\\n        \\n                \\n            \\n            \\n            if (len(self.small) + 1) < len(self.large): # [1] [3,4]\\n                #pop from large array\\n                val =  heapq.heappop(self.large) \\n                #push to small\\n                heapq.heappush(self.small, -1 *val)\\n                \\n    \\n    \\t\\n    \\n                \\n    \\n        def findMedian(self) -> float:\\n            # print(self.small)\\n            # print(self.large)\\n            \\n            if len(self.small) > len(self.large): # [1,2,3] [4,5]\\n                # get the max from teh smalll array\\n                return -1 * self.small[0] \\n            elif len(self.small) < len(self.large): # [1,2] [3,4,5]\\n                # get the max from teh smalll array\\n                 return self.large[0] \\n            else: # [1,2] [3,4]\\n                return (-1 * self.small[0] + self.large[0]) / 2\\n    ```",
                "codeTag": "Java"
            },
            {
                "id": 2035008,
                "title": "clean-and-clear-heap-solution-in-python-very-easy-to-understand",
                "content": "Very classical question that could be efficiently solved using **heap**!\\n\\nUse **two heaps**:\\nheap1, a max heap\\nheap2, a min heap\\nWhen **adding**, always make sure all numbers in heap1 is smaller than all numbers in heap2.\\nWhen **finding median**, there are two cases: odd numbers in total, even numbers in total.\\n\\n**Time:**\\naddNum: O(lgn)\\nfindMedian: O(1)\\n**Space:**\\nO(n)\\n\\n```\\nfrom heapq import heappush, heappop\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.heap1 = []\\n        self.heap2 = []    \\n\\n    def addNum(self, num: int) -> None:\\n        \\n        if len(self.heap1) == 0:\\n            heappush(self.heap1, -num)\\n            return\\n        \\n        if len(self.heap1) > len(self.heap2):\\n            heappush(self.heap1, -num)\\n            num_poped = -heappop(self.heap1)\\n            heappush(self.heap2, num_poped)\\n            return\\n        \\n        if len(self.heap1) == len(self.heap2):\\n            heappush(self.heap2, num)\\n            num_poped = heappop(self.heap2)\\n            heappush(self.heap1, -num_poped)\\n            return\\n\\n    def findMedian(self) -> float:\\n\\n        if len(self.heap1) == len(self.heap2):\\n            left = -1 * self.heap1[0]\\n            right = self.heap2[0]\\n            return (left + right) / 2.0\\n        if len(self.heap1) > len(self.heap2):\\n            return self.heap1[0] * -1\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import heappush, heappop\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        self.heap1 = []\\n        self.heap2 = []    \\n\\n    def addNum(self, num: int) -> None:\\n        \\n        if len(self.heap1) == 0:\\n            heappush(self.heap1, -num)\\n            return\\n        \\n        if len(self.heap1) > len(self.heap2):\\n            heappush(self.heap1, -num)\\n            num_poped = -heappop(self.heap1)\\n            heappush(self.heap2, num_poped)\\n            return\\n        \\n        if len(self.heap1) == len(self.heap2):\\n            heappush(self.heap2, num)\\n            num_poped = heappop(self.heap2)\\n            heappush(self.heap1, -num_poped)\\n            return\\n\\n    def findMedian(self) -> float:\\n\\n        if len(self.heap1) == len(self.heap2):\\n            left = -1 * self.heap1[0]\\n            right = self.heap2[0]\\n            return (left + right) / 2.0\\n        if len(self.heap1) > len(self.heap2):\\n            return self.heap1[0] * -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1868086,
                "title": "javascript-priority-queue-inbuilt-lc-priority-queue-time-add-o-logn-find-o-1",
                "content": "```\\nvar MedianFinder = function () {\\n    // Use below links if you want to understand more about the PriorityQueue\\n\\t// https://github.com/datastructures-js/priority-queue\\n    // https://support.leetcode.com/hc/en-us/articles/360011833974-What-are-the-environments-for-the-programming-languages-\\n    this.minHeap = new MinPriorityQueue(); // holds right part \\n    this.maxHeap = new MaxPriorityQueue(); // holds left part(elements in right > elements in left)\\n};\\n\\n\\nMedianFinder.prototype.addNum = function (num) {\\n    // inserting in min heap bubbles up the smallest element in this heap to top\\n    this.minHeap.enqueue(num); \\n    this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n    // To balance the size\\n    // This will always keep min heap size >= max heap size\\n    if (this.minHeap.size() < this.maxHeap.size()) {\\n        this.minHeap.enqueue(this.maxHeap.dequeue().element); \\n    }\\n};\\n\\n\\nMedianFinder.prototype.findMedian = function () {\\n    // Odd size input array\\n    if (this.minHeap.size() > this.maxHeap.size()) return this.minHeap.front().element;\\n    else return (this.minHeap.front().element + this.maxHeap.front().element) / 2; // Even size input array\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nvar MedianFinder = function () {\\n    // Use below links if you want to understand more about the PriorityQueue\\n\\t// https://github.com/datastructures-js/priority-queue\\n    // https://support.leetcode.com/hc/en-us/articles/360011833974-What-are-the-environments-for-the-programming-languages-\\n    this.minHeap = new MinPriorityQueue(); // holds right part \\n    this.maxHeap = new MaxPriorityQueue(); // holds left part(elements in right > elements in left)\\n};\\n\\n\\nMedianFinder.prototype.addNum = function (num) {\\n    // inserting in min heap bubbles up the smallest element in this heap to top\\n    this.minHeap.enqueue(num); \\n    this.maxHeap.enqueue(this.minHeap.dequeue().element);\\n    // To balance the size\\n    // This will always keep min heap size >= max heap size\\n    if (this.minHeap.size() < this.maxHeap.size()) {\\n        this.minHeap.enqueue(this.maxHeap.dequeue().element); \\n    }\\n};\\n\\n\\nMedianFinder.prototype.findMedian = function () {\\n    // Odd size input array\\n    if (this.minHeap.size() > this.maxHeap.size()) return this.minHeap.front().element;\\n    else return (this.minHeap.front().element + this.maxHeap.front().element) / 2; // Even size input array\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1763216,
                "title": "java-two-priority-queues-easy-to-understand-solution",
                "content": "### Concept\\n* Lets take two priority queues, imagining that they are the left half and right half of the array of integers. \\n* The median is the one that is calculated from the center elements.\\n* Therefore we want the maximum integer from the left side and minimum integer from the right side. This concludes that the left pq will be a max heap and the right pq will be a min min heap.\\n\\n### Addition of Elements\\n* We allways add a new element in the left pq, and later check if the count of elements have become even then we will remove the maximum element from the left pq and add it to the right pq, to equally distribute the elements. Also pq automantically adjusts the maximum and minimum elements so we do not have to worry.\\n* Whenever we adda new element to the left side, firstly we check for the size (in prev point), else we will check if the max of left is greater than the min of right, then we will swap them, or else if will later create conflicts. Since we always want to have lower elements in the left and higher ones in the right.\\n\\n### Find Median\\n* Check if size of left pq is greater than the size of right pq, then return the peek of left. Since this will be the median. [case of odd numbers].\\n* Else we take peeks of both pqs and return the median. [case of even numbers]\\n\\n```\\nclass MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    \\n    PriorityQueue<Integer> left;\\n    PriorityQueue<Integer> right;\\n    \\n    int l, r;\\n    \\n    public MedianFinder() {\\n        left=new PriorityQueue<>(Collections.reverseOrder());\\n        right=new PriorityQueue<>();\\n        \\n        l=0;\\n        r=0;\\n    }\\n    \\n    public void addNum(int num) {\\n        left.add(num);\\n        l++;\\n        \\n        if (l-r>1) {\\n            right.add(left.poll());\\n            l--;\\n            r++;\\n        } else if (right.size()>0 && left.peek()>right.peek()) {\\n            int temp1=left.poll();\\n            int temp2=right.poll();\\n\\n            left.add(temp2);\\n            right.add(temp1);\\n            \\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        \\n        if (l>r) {\\n            return left.peek();\\n        } else {\\n            return (left.peek()+right.peek())/2.0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    \\n    PriorityQueue<Integer> left;\\n    PriorityQueue<Integer> right;\\n    \\n    int l, r;\\n    \\n    public MedianFinder() {\\n        left=new PriorityQueue<>(Collections.reverseOrder());\\n        right=new PriorityQueue<>();\\n        \\n        l=0;\\n        r=0;\\n    }\\n    \\n    public void addNum(int num) {\\n        left.add(num);\\n        l++;\\n        \\n        if (l-r>1) {\\n            right.add(left.poll());\\n            l--;\\n            r++;\\n        } else if (right.size()>0 && left.peek()>right.peek()) {\\n            int temp1=left.poll();\\n            int temp2=right.poll();\\n\\n            left.add(temp2);\\n            right.add(temp1);\\n            \\n        }\\n        \\n    }\\n    \\n    public double findMedian() {\\n        \\n        if (l>r) {\\n            return left.peek();\\n        } else {\\n            return (left.peek()+right.peek())/2.0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1381191,
                "title": "priority-queue-based-very-easy-c-solution",
                "content": "EXPLANATION : -\\nIdea -  Median divides array into 2 equal parts.\\nWe will make 2 heaps one max heap and one min heap. We will store first half of current elements in max heap (as top() function will return maximum value of first half) and min heap will store second half (as top() function will give minimum value of second half ) While inserting the new element if it is less than left.top() (max heap ) then we will insert it into left part else into right part. As to maintain size of both of the parts equal if the difference between both the parts is greater than 1 then we will exchange one element from larger part to smaller part.\\nFor finding median : - if size of both parts is same then median = (left.top()+right.top())/2; else the top element of bigger part.\\n\\nNote - ap function is just doing functionality of abs function.\\n\\nIt would be great if you upvote.\\n\\n\\n```\\n int ap(int n)\\n    {\\n        if(n<0)\\n        {\\n            return -1*n;\\n        }\\n        return n;\\n    }\\nclass MedianFinder {\\npublic:\\n    priority_queue<long> left;                        // max heap (left part)\\n    priority_queue<long,vector<long>,greater<long>> right;   // min heap(right part)\\n    MedianFinder() {\\n       \\n    }\\n   \\n    void addNum(int num) {\\n\\n        if(left.empty())\\n        {\\n            left.push(num);\\n                \\n        }\\n        else if(num<left.top())\\n        {\\n            left.push(num);\\n        }\\n        else\\n        {\\n            right.push(num);\\n        }\\n        \\n        if(ap(left.size()-right.size())>1)\\n        {\\n            if(left.size()>right.size())\\n            {\\n                right.push(left.top());\\n                left.pop();\\n            }\\n            else\\n            {\\n                left.push(right.top());\\n                right.pop();\\n            }\\n        }\\n       \\n        \\n    }\\n    \\n    double findMedian() {\\n        if(left.size()==right.size())\\n        {\\n            double a=(left.top()+right.top())/2.0;\\n            return a;\\n        }\\n        if(left.size()>right.size())\\n        {\\n            return double(left.top());\\n        }\\n        return double(right.top());\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n \\n ```\\n  \\nIt would be great if you upvote.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n int ap(int n)\\n    {\\n        if(n<0)\\n        {\\n            return -1*n;\\n        }\\n        return n;\\n    }\\nclass MedianFinder {\\npublic:\\n    priority_queue<long> left;                        // max heap (left part)\\n    priority_queue<long,vector<long>,greater<long>> right;   // min heap(right part)\\n    MedianFinder() {\\n       \\n    }\\n   \\n    void addNum(int num) {\\n\\n        if(left.empty())\\n        {\\n            left.push(num);\\n                \\n        }\\n        else if(num<left.top())\\n        {\\n            left.push(num);\\n        }\\n        else\\n        {\\n            right.push(num);\\n        }\\n        \\n        if(ap(left.size()-right.size())>1)\\n        {\\n            if(left.size()>right.size())\\n            {\\n                right.push(left.top());\\n                left.pop();\\n            }\\n            else\\n            {\\n                left.push(right.top());\\n                right.pop();\\n            }\\n        }\\n       \\n        \\n    }\\n    \\n    double findMedian() {\\n        if(left.size()==right.size())\\n        {\\n            double a=(left.top()+right.top())/2.0;\\n            return a;\\n        }\\n        if(left.size()>right.size())\\n        {\\n            return double(left.top());\\n        }\\n        return double(right.top());\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n \\n ```",
                "codeTag": "Java"
            },
            {
                "id": 1331041,
                "title": "c-simplest-solution",
                "content": "Using simple vectors for storage. Using binary search O(log n) for inserting each time maintaning sorted order.\\n```\\nclass MedianFinder {\\n\\npublic:\\n\\n\\tvector<int> arr;\\n\\n\\tvoid addNum(int num) {\\n\\t\\tarr.insert(lower_bound(arr.begin(), arr.end(), num), num);\\n\\t}\\n\\n\\tdouble findMedian() {\\n\\t\\tif( arr.size() % 2 == 1) {\\n\\t\\t\\treturn arr[arr.size()/2];\\n\\t\\t} else {\\n\\t\\t\\treturn ( (arr[arr.size()/2]) + (arr[arr.size()/2 - 1]) ) / 2.0;\\n\\t\\t}\\n\\t}\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n\\npublic:\\n\\n\\tvector<int> arr;\\n\\n\\tvoid addNum(int num) {\\n\\t\\tarr.insert(lower_bound(arr.begin(), arr.end(), num), num);\\n\\t}\\n\\n\\tdouble findMedian() {\\n\\t\\tif( arr.size() % 2 == 1) {\\n\\t\\t\\treturn arr[arr.size()/2];\\n\\t\\t} else {\\n\\t\\t\\treturn ( (arr[arr.size()/2]) + (arr[arr.size()/2 - 1]) ) / 2.0;\\n\\t\\t}\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1330976,
                "title": "c-2-approaches-using-insertion-sort-techinique-tle-priority-queue-accepted-youtube-video",
                "content": "```\\n//Approach-1 (O(n^2) - Insertion Sort) - TLE\\nclass MedianFinder {\\npublic:\\n    vector<int> vec;\\n    int i = 0;\\n    MedianFinder() {\\n        vec.resize(5*10000+1);\\n    }\\n    \\n    void addNum(int num) {\\n        if(i == 0) {\\n            vec[i++] = num;\\n            return;\\n        }\\n        int j = i-1;\\n        while(j >= 0 && vec[j] > num) {\\n            vec[j+1] = vec[j];\\n            j--;\\n        }\\n        vec[j+1] = num;\\n        i++;\\n    }\\n    \\n    double findMedian() {\\n        int n = i;\\n        if(n%2 == 0) {\\n            int l = n/2-1;\\n            int r = n/2;\\n            return (float)(vec[l]+vec[r])/2;\\n        }\\n        \\n        return vec[n/2];\\n    }\\n};\\n```\\n\\n```\\n//YouTube Video : https://www.youtube.com/watch?v=jnj87BSi9Is\\n//Approach-2 (O(logn)  using priority_queue) (Accepted)\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> left_max; //max_heap\\n    priority_queue<int, vector<int>, greater<int>> right_min; //min_heap\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(left_max.empty() || num < left_max.top())\\n            left_max.push(num);\\n        else\\n            right_min.push(num);\\n        \\n        //Now, adjust the size\\n        //left_max can only be greater than right_min by 1 in size;\\n        if(left_max.size() > right_min.size()+1) {\\n            right_min.push(left_max.top());\\n            left_max.pop();\\n        } else if(left_max.size() < right_min.size()) {\\n            left_max.push(right_min.top());\\n            right_min.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(left_max.size() == right_min.size())\\n            return (double)(left_max.top()+right_min.top())/2;\\n        \\n        return left_max.top();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n//Approach-1 (O(n^2) - Insertion Sort) - TLE\\nclass MedianFinder {\\npublic:\\n    vector<int> vec;\\n    int i = 0;\\n    MedianFinder() {\\n        vec.resize(5*10000+1);\\n    }\\n    \\n    void addNum(int num) {\\n        if(i == 0) {\\n            vec[i++] = num;\\n            return;\\n        }\\n        int j = i-1;\\n        while(j >= 0 && vec[j] > num) {\\n            vec[j+1] = vec[j];\\n            j--;\\n        }\\n        vec[j+1] = num;\\n        i++;\\n    }\\n    \\n    double findMedian() {\\n        int n = i;\\n        if(n%2 == 0) {\\n            int l = n/2-1;\\n            int r = n/2;\\n            return (float)(vec[l]+vec[r])/2;\\n        }\\n        \\n        return vec[n/2];\\n    }\\n};\\n```\n```\\n//YouTube Video : https://www.youtube.com/watch?v=jnj87BSi9Is\\n//Approach-2 (O(logn)  using priority_queue) (Accepted)\\nclass MedianFinder {\\npublic:\\n    priority_queue<int> left_max; //max_heap\\n    priority_queue<int, vector<int>, greater<int>> right_min; //min_heap\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(left_max.empty() || num < left_max.top())\\n            left_max.push(num);\\n        else\\n            right_min.push(num);\\n        \\n        //Now, adjust the size\\n        //left_max can only be greater than right_min by 1 in size;\\n        if(left_max.size() > right_min.size()+1) {\\n            right_min.push(left_max.top());\\n            left_max.pop();\\n        } else if(left_max.size() < right_min.size()) {\\n            left_max.push(right_min.top());\\n            right_min.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        if(left_max.size() == right_min.size())\\n            return (double)(left_max.top()+right_min.top())/2;\\n        \\n        return left_max.top();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1116125,
                "title": "javascript-java-brute-force",
                "content": "javascript\\n```\\nclass MedianFinder {\\n    constructor() {\\n        this.a = [];\\n    }\\n\\n    addNum(num) {\\n        this.a.push(num);\\n    }\\n\\n    findMedian() {\\n        this.a.sort((x, y) => x - y);\\n        let n = this.a.length;\\n        let m = n >> 1;\\n        return n & 1 ? this.a[m] : (this.a[m - 1] + this.a[m]) / 2;\\n    }\\n}\\n```\\njava\\n```\\nclass MedianFinder {\\n\\n\\tList<Integer> l;\\n\\n\\tpublic MedianFinder() {\\n\\t\\tl = new ArrayList<>();\\n\\t}\\n\\n\\tpublic void addNum(int num) {\\n\\t\\tl.add(num);\\n\\t}\\n\\n\\tpublic double findMedian() {\\n\\t\\tCollections.sort(l);\\n        int n = l.size();\\n        int m = n >> 1;\\n        return (n & 1) == 1 ? l.get(m) : (double) (l.get(m -1) + l.get(m)) / 2;\\n\\t}\\n}\\n```\\njavascript solution 2: use multiset (improved 1659ms)\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3047663/javascript-multiset-1658ms/",
                "solutionTags": [
                    "Java",
                    "JavaScript"
                ],
                "code": "```\\nclass MedianFinder {\\n    constructor() {\\n        this.a = [];\\n    }\\n\\n    addNum(num) {\\n        this.a.push(num);\\n    }\\n\\n    findMedian() {\\n        this.a.sort((x, y) => x - y);\\n        let n = this.a.length;\\n        let m = n >> 1;\\n        return n & 1 ? this.a[m] : (this.a[m - 1] + this.a[m]) / 2;\\n    }\\n}\\n```\n```\\nclass MedianFinder {\\n\\n\\tList<Integer> l;\\n\\n\\tpublic MedianFinder() {\\n\\t\\tl = new ArrayList<>();\\n\\t}\\n\\n\\tpublic void addNum(int num) {\\n\\t\\tl.add(num);\\n\\t}\\n\\n\\tpublic double findMedian() {\\n\\t\\tCollections.sort(l);\\n        int n = l.size();\\n        int m = n >> 1;\\n        return (n & 1) == 1 ? l.get(m) : (double) (l.get(m -1) + l.get(m)) / 2;\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 810725,
                "title": "javascript-insertion-sort-using-binary-search-o-n-o-logn-o-n",
                "content": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.nums = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.size = function(num) {\\n    return this.nums.length;\\n}\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if (this.size() === 0) {\\n        this.nums.push(num);\\n    } else {\\n        let idx = search(this.nums, num);\\n        this.nums.splice(idx, 0, num)\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if (this.size() === 0) return 0;\\n    let isSizeEven = this.size() % 2 === 0;\\n    let mid = isSizeEven ? (this.size() / 2) : ((this.size() - 1) / 2);\\n    return isSizeEven ? (this.nums[mid] + this.nums[mid - 1]) / 2 : this.nums[mid];\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n\\nfunction search(arr, num) {\\n    let start = 0;\\n    let end = arr.length - 1;\\n    \\n    if (num < arr[0]) return 0;\\n    \\n    if (num > arr[end]) return end + 1;\\n\\n    let ans = -1; \\n    \\n    while (start <= end) {\\n        const mid = start + ((end - start) >> 1);\\n        if (arr[mid] <= num) {\\n            start = mid + 1;\\n            ans = mid;\\n        } else {\\n            end = mid - 1;\\n        }\\n    }\\n    \\n    return ans + 1;\\n}",
                "solutionTags": [
                    "JavaScript",
                    "Binary Tree"
                ],
                "code": "```\\n/**\\n * initialize your data structure here.\\n */\\nvar MedianFinder = function() {\\n    this.nums = [];\\n};\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.size = function(num) {\\n    return this.nums.length;\\n}\\n\\n/** \\n * @param {number} num\\n * @return {void}\\n */\\nMedianFinder.prototype.addNum = function(num) {\\n    if (this.size() === 0) {\\n        this.nums.push(num);\\n    } else {\\n        let idx = search(this.nums, num);\\n        this.nums.splice(idx, 0, num)\\n    }\\n};\\n\\n/**\\n * @return {number}\\n */\\nMedianFinder.prototype.findMedian = function() {\\n    if (this.size() === 0) return 0;\\n    let isSizeEven = this.size() % 2 === 0;\\n    let mid = isSizeEven ? (this.size() / 2) : ((this.size() - 1) / 2);\\n    return isSizeEven ? (this.nums[mid] + this.nums[mid - 1]) / 2 : this.nums[mid];\\n};\\n\\n/** \\n * Your MedianFinder object will be instantiated and called as such:\\n * var obj = new MedianFinder()\\n * obj.addNum(num)\\n * var param_2 = obj.findMedian()\\n */\\n\\nfunction search(arr, num) {\\n    let start = 0;\\n    let end = arr.length - 1;\\n    \\n    if (num < arr[0]) return 0;\\n    \\n    if (num > arr[end]) return end + 1;\\n\\n    let ans = -1; \\n    \\n    while (start <= end) {\\n        const mid = start + ((end - start) >> 1);\\n        if (arr[mid] <= num) {\\n            start = mid + 1;\\n            ans = mid;\\n        } else {\\n            end = mid - 1;\\n        }\\n    }\\n    \\n    return ans + 1;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 597182,
                "title": "javascript-solution-simple-binary-search-99-100",
                "content": "The idea behind this solution is to use binary search to find the index of insertion.\\n\\nRuntime: 216 ms, faster than 99.54% of JavaScript online submissions for Find Median from Data Stream.\\nMemory Usage: 64.1 MB, less than 100.00% of JavaScript online submissions for Find Median from Data Stream.\\n\\n```\\nfunction binarySearch(arr, target, l, r) {\\n  if (l === r) {\\n    return arr[l] > target ? l : l + 1;\\n  }\\n  let mid = Math.floor((l + r) / 2);\\n  if (arr[mid] < target) return binarySearch(arr, target, mid + 1, r);\\n  if (arr[mid] > target) return binarySearch(arr, target, l, mid);\\n  return mid;\\n}\\n\\nvar MedianFinder = function() {\\n  this.arr = [];\\n};\\n\\nMedianFinder.prototype.addNum = function(num) {\\n  if (this.arr.length === 0) {\\n    this.arr.push(num);\\n    return;\\n  }\\n  let index = binarySearch(this.arr, num, 0, this.arr.length - 1);\\n  this.arr.splice(index, 0, num);\\n};\\n\\nMedianFinder.prototype.findMedian = function() {\\n  if (this.arr.length === 0) {\\n    return null;\\n  }\\n  let mid = this.arr.length / 2;\\n  if (this.arr.length % 2 === 0) {\\n    return ((this.arr[mid] + this.arr[mid - 1]) / 2);\\n  }\\n  return this.arr[Math.floor(mid)];\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nfunction binarySearch(arr, target, l, r) {\\n  if (l === r) {\\n    return arr[l] > target ? l : l + 1;\\n  }\\n  let mid = Math.floor((l + r) / 2);\\n  if (arr[mid] < target) return binarySearch(arr, target, mid + 1, r);\\n  if (arr[mid] > target) return binarySearch(arr, target, l, mid);\\n  return mid;\\n}\\n\\nvar MedianFinder = function() {\\n  this.arr = [];\\n};\\n\\nMedianFinder.prototype.addNum = function(num) {\\n  if (this.arr.length === 0) {\\n    this.arr.push(num);\\n    return;\\n  }\\n  let index = binarySearch(this.arr, num, 0, this.arr.length - 1);\\n  this.arr.splice(index, 0, num);\\n};\\n\\nMedianFinder.prototype.findMedian = function() {\\n  if (this.arr.length === 0) {\\n    return null;\\n  }\\n  let mid = this.arr.length / 2;\\n  if (this.arr.length % 2 === 0) {\\n    return ((this.arr[mid] + this.arr[mid - 1]) / 2);\\n  }\\n  return this.arr[Math.floor(mid)];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 571849,
                "title": "solution-to-follow-ups-add-o-100-find-o-lg100",
                "content": "# Follow up\\n1. Maintain an array of size `101` such that for each number `i` in `[0,100]` we know the count of numbers smaller than or equal to `i`. And, we binary search for median; median has half the numbers smaller than or equal to it. So, we can binary search in that array for finding median - since it\\'ll be in non-decreasing order.\\n\\n```\\nclass MedianFinder {\\n    private int[] se = new int[101];\\n\\n    public MedianFinder() {\\n    }\\n    \\n    public void addNum(int num) {\\n        for (int i = num; i < se.length; i++) {\\n              se[i]++;\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = se[100];\\n        int middle = (n + 1) / 2;\\n        double ans = smallestEqualOrGreater(middle);\\n        if (n % 2 == 0) {\\n            ans += smallestEqualOrGreater(middle + 1);\\n            ans /= 2;\\n        }\\n        return ans;\\n    }\\n        \\n    private int smallestEqualOrGreater(int key) {\\n        int lo = 0, hi = se.length - 1;\\n        int index = -1;\\n        while (lo <= hi) {\\n            int mid = (lo + hi) / 2;\\n            if (se[mid] >= key) {\\n                index = mid;\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```\\n\\n2. What changes for the second follow up? Keeping counters for elements smaller than `0` and greater than `100` should suffice. And, we use `se` array only for the purpose; indexes `0` and `102`. Why only counters are enough for numbers outside the range `[0,100]`? Only `1%` of the numbers are outside of that range, so the median will never be outside of the range; so, we need not remember those numbers.\\n\\n```\\nclass MedianFinder {\\n    private int[] se = new int[103];\\n\\n    public MedianFinder() {\\n    }\\n    \\n    public void addNum(int num) {\\n\\t    int start = num + 1;\\n\\t    if (num < 0) {\\n\\t\\t    start = 0;\\n\\t\\t}\\n\\t\\tif (num > 100) {\\n\\t\\t    start = 102;\\n\\t\\t}\\n        for (int i = start; i < se.length; i++) {\\n              se[i]++;\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = se[102];\\n        int middle = (n + 1) / 2;\\n\\t\\t// remember, index=0 corresponds to negative numbers\\n        double ans = smallestEqualOrGreater(middle) - 1;\\n        if (n % 2 == 0) {\\n            ans += smallestEqualOrGreater(middle + 1) - 1;\\n            ans /= 2;\\n        }\\n        return ans;\\n    }\\n        \\n    private int smallestEqualOrGreater(int key) {\\n        int lo = 0, hi = se.length - 1;\\n        int index = -1;\\n        while (lo <= hi) {\\n            int mid = (lo + hi) / 2;\\n            if (se[mid] >= key) {\\n                index = mid;\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n    private int[] se = new int[101];\\n\\n    public MedianFinder() {\\n    }\\n    \\n    public void addNum(int num) {\\n        for (int i = num; i < se.length; i++) {\\n              se[i]++;\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = se[100];\\n        int middle = (n + 1) / 2;\\n        double ans = smallestEqualOrGreater(middle);\\n        if (n % 2 == 0) {\\n            ans += smallestEqualOrGreater(middle + 1);\\n            ans /= 2;\\n        }\\n        return ans;\\n    }\\n        \\n    private int smallestEqualOrGreater(int key) {\\n        int lo = 0, hi = se.length - 1;\\n        int index = -1;\\n        while (lo <= hi) {\\n            int mid = (lo + hi) / 2;\\n            if (se[mid] >= key) {\\n                index = mid;\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```\n```\\nclass MedianFinder {\\n    private int[] se = new int[103];\\n\\n    public MedianFinder() {\\n    }\\n    \\n    public void addNum(int num) {\\n\\t    int start = num + 1;\\n\\t    if (num < 0) {\\n\\t\\t    start = 0;\\n\\t\\t}\\n\\t\\tif (num > 100) {\\n\\t\\t    start = 102;\\n\\t\\t}\\n        for (int i = start; i < se.length; i++) {\\n              se[i]++;\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        int n = se[102];\\n        int middle = (n + 1) / 2;\\n\\t\\t// remember, index=0 corresponds to negative numbers\\n        double ans = smallestEqualOrGreater(middle) - 1;\\n        if (n % 2 == 0) {\\n            ans += smallestEqualOrGreater(middle + 1) - 1;\\n            ans /= 2;\\n        }\\n        return ans;\\n    }\\n        \\n    private int smallestEqualOrGreater(int key) {\\n        int lo = 0, hi = se.length - 1;\\n        int index = -1;\\n        while (lo <= hi) {\\n            int mid = (lo + hi) / 2;\\n            if (se[mid] >= key) {\\n                index = mid;\\n                hi = mid - 1;\\n            } else {\\n                lo = mid + 1;\\n            }\\n        }\\n        return index;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 499195,
                "title": "java-avl-tree-based-solution-for-understanding-the-use-of-avl-tree-with-comments",
                "content": "```\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    NODE\\nclass Node {\\n\\tint key;\\n\\tint freq; //duplicates are allowed in stream\\n\\tint lcount; // number of items in left subtree\\n\\tint rcount; // number of items in right subtree\\n\\tint height; // height for avl operations\\n\\tNode left;\\n\\tNode right;\\n\\n\\tNode(int key) {\\n\\t\\tthis.key = key;\\n\\t\\theight = 1;\\n\\t\\tleft = right = null;\\n\\t\\tlcount = rcount = 0;\\n\\t\\tfreq = 1;\\n\\t}\\n}\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    AVL\\nclass AVL {\\n\\tNode root;\\n\\tint size;\\n\\n\\tAVL() {\\n\\t\\tsize = 0;\\n\\t\\troot = null;\\n\\t}\\n\\n\\tvoid insert(int key) {\\n\\t\\troot = insertHelper(root, key);\\n\\t}\\n\\n\\tNode leftR(Node x) {\\n\\t\\tNode y = x.right;\\n\\t\\tNode T2 = y.left;\\n\\n\\t\\t// Perform rotation\\n\\t\\ty.left = x;\\n\\t\\tx.right = T2;\\n\\n\\t\\t// Update heights\\n\\t\\tx.height = Math.max(height(x.left), height(x.right)) + 1;\\n\\t\\ty.height = Math.max(height(y.left), height(y.right)) + 1;\\n\\n\\t\\t// update count\\n\\t\\tx.rcount = (T2 != null) ? T2.lcount + T2.rcount + T2.freq : 0;\\n\\t\\ty.lcount = x.lcount + x.rcount + x.freq;\\n\\n\\t\\t// Return new root\\n\\t\\treturn y;\\n\\t}\\n\\n\\tNode rightR(Node y) {\\n\\t\\tNode x = y.left;\\n\\t\\tNode T2 = x.right;\\n\\n\\t\\t// Perform rotation\\n\\t\\tx.right = y;\\n\\t\\ty.left = T2;\\n\\n\\t\\t// Update heights\\n\\t\\ty.height = Math.max(height(y.left), height(y.right)) + 1;\\n\\t\\tx.height = Math.max(height(x.left), height(x.right)) + 1;\\n\\n\\t\\t// update count\\n\\t\\ty.lcount = (T2 != null) ? T2.lcount + T2.rcount +T2.freq : 0;\\n\\t\\tx.rcount = y.lcount + y.rcount + y.freq;\\n\\n\\t\\t// Return new root\\n\\t\\treturn x;\\n\\t}\\n\\n\\tint getBalance(Node root) {\\n\\t\\tif (root == null)\\n\\t\\t\\treturn 0;\\n\\t\\treturn height(root.left) - height(root.right);\\n\\t}\\n\\n\\tint height(Node root) {\\n\\t\\tif (root == null)\\n\\t\\t\\treturn 0;\\n\\t\\treturn root.height;\\n\\t}\\n\\n\\tNode insertHelper(Node root, int key) {\\n\\t\\t// insert in tree\\n\\t\\t// increment size\\n\\t\\tif (root == null) {\\n\\t\\t\\tsize++;\\n\\t\\t\\treturn new Node(key);\\n\\t\\t}\\n\\n\\t\\tif (key < root.key) {\\n\\t\\t\\troot.left = insertHelper(root.left, key);\\n\\t\\t\\troot.lcount++;\\n\\t\\t}\\n\\n\\t\\telse if (key > root.key) {\\n\\t\\t\\troot.right = insertHelper(root.right, key);\\n\\t\\t\\troot.rcount++;\\n\\t\\t}\\n\\n\\t\\telse {\\n\\t\\t\\troot.freq++;\\n\\t\\t\\tsize++;\\n\\t\\t\\treturn root;\\n\\t\\t}\\n\\n\\t\\t// insertion is done, update height and check for balancing factor\\n\\t\\troot.height = 1 + Math.max(height(root.left), height(root.right));\\n\\n\\t\\tint balance = getBalance(root);\\n\\n\\t\\t// If this node becomes unbalanced, then there\\n\\t\\t// are 4 cases Left Left Case\\n\\t\\tif (balance > 1 && key < root.left.key)\\n\\t\\t\\treturn rightR(root);\\n\\n\\t\\t// Right Right Case\\n\\t\\tif (balance < -1 && key > root.right.key)\\n\\t\\t\\treturn leftR(root);\\n\\n\\t\\t// Left Right Case\\n\\t\\tif (balance > 1 && key > root.left.key) {\\n\\t\\t\\troot.left = leftR(root.left);\\n\\t\\t\\treturn rightR(root);\\n\\t\\t}\\n\\n\\t\\t// Right Left Case\\n\\t\\tif (balance < -1 && key < root.right.key) {\\n\\t\\t\\troot.right = rightR(root.right);\\n\\t\\t\\treturn leftR(root);\\n\\t\\t}\\n\\n\\t\\t/* return the (unchanged) node pointer */\\n\\t\\treturn root;\\n\\n\\t}\\n\\n\\tdouble findMedian() {\\n\\t\\t// as per size find out element(s) to find\\n\\t\\t// return median\\n\\t\\tint idx = size / 2 + 1;\\n\\t\\tint k1 = 0, k2 = 0;\\n\\t\\tdouble median = 0;\\n\\n\\t\\tk1 = find(root, idx);\\n\\t\\tmedian = k1 / 1.0;\\n\\t\\tif (size % 2 == 0) {\\n\\t\\t\\tk2 = find(root, idx - 1);\\n\\t\\t\\tmedian = (k1 + k2) / 2.0;\\n\\t\\t}\\n\\t\\treturn median;\\n\\t}\\n\\n\\tint find(Node root, int idx) {\\n\\t\\t\\n\\t\\tif (idx>= root.lcount + 1  && idx< root.lcount+1+root.freq)\\n\\t\\t\\treturn root.key;\\n\\n\\t\\telse if (idx <= root.lcount)\\n\\t\\t\\treturn find(root.left, idx);\\n\\n\\t\\telse\\n\\t\\t\\treturn find(root.right, idx - root.lcount - root.freq);\\n\\t}\\n}\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    MedianFinder\\nclass MedianFinder {\\n\\n\\tAVL avl;\\n\\n\\tpublic MedianFinder() {\\n\\t\\tavl = new AVL();\\n\\t}\\n\\n\\tpublic void addNum(int num) {\\n\\t\\tavl.insert(num);\\n\\t}\\n\\n\\tpublic double findMedian() {\\n\\t\\treturn avl.findMedian();\\n\\t}\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    NODE\\nclass Node {\\n\\tint key;\\n\\tint freq; //duplicates are allowed in stream\\n\\tint lcount; // number of items in left subtree\\n\\tint rcount; // number of items in right subtree\\n\\tint height; // height for avl operations\\n\\tNode left;\\n\\tNode right;\\n\\n\\tNode(int key) {\\n\\t\\tthis.key = key;\\n\\t\\theight = 1;\\n\\t\\tleft = right = null;\\n\\t\\tlcount = rcount = 0;\\n\\t\\tfreq = 1;\\n\\t}\\n}\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    AVL\\nclass AVL {\\n\\tNode root;\\n\\tint size;\\n\\n\\tAVL() {\\n\\t\\tsize = 0;\\n\\t\\troot = null;\\n\\t}\\n\\n\\tvoid insert(int key) {\\n\\t\\troot = insertHelper(root, key);\\n\\t}\\n\\n\\tNode leftR(Node x) {\\n\\t\\tNode y = x.right;\\n\\t\\tNode T2 = y.left;\\n\\n\\t\\t// Perform rotation\\n\\t\\ty.left = x;\\n\\t\\tx.right = T2;\\n\\n\\t\\t// Update heights\\n\\t\\tx.height = Math.max(height(x.left), height(x.right)) + 1;\\n\\t\\ty.height = Math.max(height(y.left), height(y.right)) + 1;\\n\\n\\t\\t// update count\\n\\t\\tx.rcount = (T2 != null) ? T2.lcount + T2.rcount + T2.freq : 0;\\n\\t\\ty.lcount = x.lcount + x.rcount + x.freq;\\n\\n\\t\\t// Return new root\\n\\t\\treturn y;\\n\\t}\\n\\n\\tNode rightR(Node y) {\\n\\t\\tNode x = y.left;\\n\\t\\tNode T2 = x.right;\\n\\n\\t\\t// Perform rotation\\n\\t\\tx.right = y;\\n\\t\\ty.left = T2;\\n\\n\\t\\t// Update heights\\n\\t\\ty.height = Math.max(height(y.left), height(y.right)) + 1;\\n\\t\\tx.height = Math.max(height(x.left), height(x.right)) + 1;\\n\\n\\t\\t// update count\\n\\t\\ty.lcount = (T2 != null) ? T2.lcount + T2.rcount +T2.freq : 0;\\n\\t\\tx.rcount = y.lcount + y.rcount + y.freq;\\n\\n\\t\\t// Return new root\\n\\t\\treturn x;\\n\\t}\\n\\n\\tint getBalance(Node root) {\\n\\t\\tif (root == null)\\n\\t\\t\\treturn 0;\\n\\t\\treturn height(root.left) - height(root.right);\\n\\t}\\n\\n\\tint height(Node root) {\\n\\t\\tif (root == null)\\n\\t\\t\\treturn 0;\\n\\t\\treturn root.height;\\n\\t}\\n\\n\\tNode insertHelper(Node root, int key) {\\n\\t\\t// insert in tree\\n\\t\\t// increment size\\n\\t\\tif (root == null) {\\n\\t\\t\\tsize++;\\n\\t\\t\\treturn new Node(key);\\n\\t\\t}\\n\\n\\t\\tif (key < root.key) {\\n\\t\\t\\troot.left = insertHelper(root.left, key);\\n\\t\\t\\troot.lcount++;\\n\\t\\t}\\n\\n\\t\\telse if (key > root.key) {\\n\\t\\t\\troot.right = insertHelper(root.right, key);\\n\\t\\t\\troot.rcount++;\\n\\t\\t}\\n\\n\\t\\telse {\\n\\t\\t\\troot.freq++;\\n\\t\\t\\tsize++;\\n\\t\\t\\treturn root;\\n\\t\\t}\\n\\n\\t\\t// insertion is done, update height and check for balancing factor\\n\\t\\troot.height = 1 + Math.max(height(root.left), height(root.right));\\n\\n\\t\\tint balance = getBalance(root);\\n\\n\\t\\t// If this node becomes unbalanced, then there\\n\\t\\t// are 4 cases Left Left Case\\n\\t\\tif (balance > 1 && key < root.left.key)\\n\\t\\t\\treturn rightR(root);\\n\\n\\t\\t// Right Right Case\\n\\t\\tif (balance < -1 && key > root.right.key)\\n\\t\\t\\treturn leftR(root);\\n\\n\\t\\t// Left Right Case\\n\\t\\tif (balance > 1 && key > root.left.key) {\\n\\t\\t\\troot.left = leftR(root.left);\\n\\t\\t\\treturn rightR(root);\\n\\t\\t}\\n\\n\\t\\t// Right Left Case\\n\\t\\tif (balance < -1 && key < root.right.key) {\\n\\t\\t\\troot.right = rightR(root.right);\\n\\t\\t\\treturn leftR(root);\\n\\t\\t}\\n\\n\\t\\t/* return the (unchanged) node pointer */\\n\\t\\treturn root;\\n\\n\\t}\\n\\n\\tdouble findMedian() {\\n\\t\\t// as per size find out element(s) to find\\n\\t\\t// return median\\n\\t\\tint idx = size / 2 + 1;\\n\\t\\tint k1 = 0, k2 = 0;\\n\\t\\tdouble median = 0;\\n\\n\\t\\tk1 = find(root, idx);\\n\\t\\tmedian = k1 / 1.0;\\n\\t\\tif (size % 2 == 0) {\\n\\t\\t\\tk2 = find(root, idx - 1);\\n\\t\\t\\tmedian = (k1 + k2) / 2.0;\\n\\t\\t}\\n\\t\\treturn median;\\n\\t}\\n\\n\\tint find(Node root, int idx) {\\n\\t\\t\\n\\t\\tif (idx>= root.lcount + 1  && idx< root.lcount+1+root.freq)\\n\\t\\t\\treturn root.key;\\n\\n\\t\\telse if (idx <= root.lcount)\\n\\t\\t\\treturn find(root.left, idx);\\n\\n\\t\\telse\\n\\t\\t\\treturn find(root.right, idx - root.lcount - root.freq);\\n\\t}\\n}\\n\\n//>>>>>>>>>>>>>>>>>>>>>>>>>>    MedianFinder\\nclass MedianFinder {\\n\\n\\tAVL avl;\\n\\n\\tpublic MedianFinder() {\\n\\t\\tavl = new AVL();\\n\\t}\\n\\n\\tpublic void addNum(int num) {\\n\\t\\tavl.insert(num);\\n\\t}\\n\\n\\tpublic double findMedian() {\\n\\t\\treturn avl.findMedian();\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 420630,
                "title": "python3-solution-using-two-heaps",
                "content": "This is the python version of the method given in solutions tab.\\n```\\nfrom heapq import heappush, heappop\\n\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # for left half of the data stream we maintain a max heap\\n        self.left_max_heap = []\\n        # vice-versa\\n        self.right_min_heap = []\\n\\n    def max_heap_push(self, x):\\n        heappush(self.left_max_heap, -x)\\n\\n    def min_heap_push(self, x):\\n        heappush(self.right_min_heap, x)\\n\\n    def max_heap_pop(self):\\n        return -heappop(self.left_max_heap)\\n\\n    def min_heap_pop(self):\\n        return heappop(self.right_min_heap)\\n\\n    @property\\n    def left_max_heap_size(self):\\n        return len(self.left_max_heap)\\n\\n    @property\\n    def right_min_heap_size(self):\\n        return len(self.right_min_heap)\\n\\n    def addNum(self, num: int) -> None:\\n        self.max_heap_push(num)\\n        self.min_heap_push(self.max_heap_pop())\\n        while self.left_max_heap_size < self.right_min_heap_size:\\n            self.max_heap_push(self.min_heap_pop())\\n\\n    def findMedian(self) -> float:\\n        if self.left_max_heap_size > self.right_min_heap_size:\\n            return -self.left_max_heap[0]\\n        return (-self.left_max_heap[0] + self.right_min_heap[0]) / 2\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import heappush, heappop\\n\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        # for left half of the data stream we maintain a max heap\\n        self.left_max_heap = []\\n        # vice-versa\\n        self.right_min_heap = []\\n\\n    def max_heap_push(self, x):\\n        heappush(self.left_max_heap, -x)\\n\\n    def min_heap_push(self, x):\\n        heappush(self.right_min_heap, x)\\n\\n    def max_heap_pop(self):\\n        return -heappop(self.left_max_heap)\\n\\n    def min_heap_pop(self):\\n        return heappop(self.right_min_heap)\\n\\n    @property\\n    def left_max_heap_size(self):\\n        return len(self.left_max_heap)\\n\\n    @property\\n    def right_min_heap_size(self):\\n        return len(self.right_min_heap)\\n\\n    def addNum(self, num: int) -> None:\\n        self.max_heap_push(num)\\n        self.min_heap_push(self.max_heap_pop())\\n        while self.left_max_heap_size < self.right_min_heap_size:\\n            self.max_heap_push(self.min_heap_pop())\\n\\n    def findMedian(self) -> float:\\n        if self.left_max_heap_size > self.right_min_heap_size:\\n            return -self.left_max_heap[0]\\n        return (-self.left_max_heap[0] + self.right_min_heap[0]) / 2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 380288,
                "title": "python-solution-with-binary-search-tree",
                "content": "I tried to code the BST solution in Python and it didn\\'t result in a faster time(because the tree is not balanced) but atleast have something for the interview. :)\\n\\n```\\nclass TreeNode:\\n    def __init__(self, val):\\n        self.val = val\\n        self.right = self.left = None\\n        self.leftSize = 0\\n\\n\\nclass BinarySearchTree:\\n\\n    def __init__(self):\\n        self.root = None\\n        self.count = 0\\n        \\n    def _add(self, root, num):\\n        if not root:\\n            root = TreeNode(num)\\n            return root\\n\\n        if num <= root.val: \\n            root.left = self._add(root.left, num)\\n            root.leftSize += 1\\n        else:\\n            root.right = self._add(root.right, num)\\n        return root\\n\\n    def add(self, num):\\n        self.root = self._add(self.root, num)\\n        self.count += 1\\n    \\n    def rank(self, k):\\n        return self._Rank(self.root, k)\\n    \\n    def _Rank(self, root,  k):\\n\\n        if not root:\\n            return -1\\n\\n        if root.leftSize == k:\\n            return root.val\\n\\n        if root.leftSize > k:\\n            return self._Rank(root.left, k)\\n\\n        else:\\n            return self._Rank(root.right, k - root.leftSize - 1)\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.bst = BinarySearchTree()\\n\\n    def addNum(self, num: int) -> None:\\n        \\n        self.bst.add(num)\\n        \\n    def findMedian(self) -> float:\\n        \\n        #check the size of elements:\\n        size = self.bst.count\\n        if size % 2 == 0: #even number of nodes, return median of two middle            \\n            rank1 = self.bst.rank(size // 2)\\n            rank2 = self.bst.rank(size // 2 - 1)\\n            return (rank1 + rank2) / 2\\n        else:\\n            return self.bst.rank(size//2)\\n```",
                "solutionTags": [],
                "code": "```\\nclass TreeNode:\\n    def __init__(self, val):\\n        self.val = val\\n        self.right = self.left = None\\n        self.leftSize = 0\\n\\n\\nclass BinarySearchTree:\\n\\n    def __init__(self):\\n        self.root = None\\n        self.count = 0\\n        \\n    def _add(self, root, num):\\n        if not root:\\n            root = TreeNode(num)\\n            return root\\n\\n        if num <= root.val: \\n            root.left = self._add(root.left, num)\\n            root.leftSize += 1\\n        else:\\n            root.right = self._add(root.right, num)\\n        return root\\n\\n    def add(self, num):\\n        self.root = self._add(self.root, num)\\n        self.count += 1\\n    \\n    def rank(self, k):\\n        return self._Rank(self.root, k)\\n    \\n    def _Rank(self, root,  k):\\n\\n        if not root:\\n            return -1\\n\\n        if root.leftSize == k:\\n            return root.val\\n\\n        if root.leftSize > k:\\n            return self._Rank(root.left, k)\\n\\n        else:\\n            return self._Rank(root.right, k - root.leftSize - 1)\\n\\nclass MedianFinder:\\n\\n    def __init__(self):\\n        \"\"\"\\n        initialize your data structure here.\\n        \"\"\"\\n        self.bst = BinarySearchTree()\\n\\n    def addNum(self, num: int) -> None:\\n        \\n        self.bst.add(num)\\n        \\n    def findMedian(self) -> float:\\n        \\n        #check the size of elements:\\n        size = self.bst.count\\n        if size % 2 == 0: #even number of nodes, return median of two middle            \\n            rank1 = self.bst.rank(size // 2)\\n            rank2 = self.bst.rank(size // 2 - 1)\\n            return (rank1 + rank2) / 2\\n        else:\\n            return self.bst.rank(size//2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 318054,
                "title": "simple-solution-with-min-and-max-heap-java",
                "content": "```\\nclass MedianFinder {\\n\\n    PriorityQueue<Integer> maxHeap;\\n    PriorityQueue<Integer> minHeap;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        maxHeap = new PriorityQueue<>((a,b) -> b-a);\\n        minHeap = new PriorityQueue<>((a,b) -> a-b);\\n    }\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.isEmpty() || maxHeap.peek() >= num) {\\n            maxHeap.add(num);\\n        } else {\\n            minHeap.add(num);\\n        }\\n        \\n        if(maxHeap.size() > minHeap.size() + 1) {\\n            minHeap.add(maxHeap.poll());\\n        } else if(maxHeap.size() < minHeap.size()) {\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap.size() == minHeap.size()) {\\n            return maxHeap.peek() / 2.0 + minHeap.peek() / 2.0;\\n        }\\n        \\n        return maxHeap.peek();\\n    }\\n}\\n```\\n\\nAlgorithm\\n\\n* We can store the first half of numbers (i.e., smallNumList) in a Max Heap. We should use a Max Heap as we are interested in knowing the largest number in the first half.\\n* We can store the second half of numbers (i.e., largeNumList) in a Min Heap, as we are interested in knowing the smallest number in the second half.\\n* Inserting a number in a heap will take O(logN)O(logN), which is better than the brute force approach.\\n* At any time, the median of the current list of numbers can be calculated from the top element of the two heaps.",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n\\n    PriorityQueue<Integer> maxHeap;\\n    PriorityQueue<Integer> minHeap;\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        maxHeap = new PriorityQueue<>((a,b) -> b-a);\\n        minHeap = new PriorityQueue<>((a,b) -> a-b);\\n    }\\n    \\n    public void addNum(int num) {\\n        if(maxHeap.isEmpty() || maxHeap.peek() >= num) {\\n            maxHeap.add(num);\\n        } else {\\n            minHeap.add(num);\\n        }\\n        \\n        if(maxHeap.size() > minHeap.size() + 1) {\\n            minHeap.add(maxHeap.poll());\\n        } else if(maxHeap.size() < minHeap.size()) {\\n            maxHeap.add(minHeap.poll());\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        if(maxHeap.size() == minHeap.size()) {\\n            return maxHeap.peek() / 2.0 + minHeap.peek() / 2.0;\\n        }\\n        \\n        return maxHeap.peek();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 301613,
                "title": "couting-sort-in-java-for-follow-up-1",
                "content": "Follow up: \\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n\\n```\\n// Time Complexity:\\n// addNum: O(1)\\n// findMedian: O(m),  m is the length of buckets, in this case, it\\'s 101 \\nclass MedianFinder {\\n    \\n    int[] buckets;\\n    int len;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        buckets = new int[101];\\n        len = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        len ++;\\n        buckets[num] ++;\\n    }\\n    \\n    public double findMedian() {\\n        double half = (double) len / 2;\\n        int sum = 0;\\n        int preSum = 0;\\n        if(len % 2 == 0){\\n            for(int i = 0; i < buckets.length; i ++){\\n                sum += buckets[i];\\n                if(sum > half && preSum < half){\\n                    return (double) i;\\n                }\\n                if(sum == half && preSum < half){\\n                    for(int j = i + 1; j < buckets.length; j ++){\\n                        if(buckets[j] > 0){\\n                            return (double) (i + j) / 2;\\n                        }\\n                    }\\n                }\\n                preSum = sum;\\n            }\\n        }else{\\n            for(int i = 0; i < buckets.length; i ++){\\n                sum += buckets[i];\\n                if(sum >= half && preSum < half){\\n                    return (double) i;\\n                }\\n                preSum = sum;\\n            }\\n        }\\n        \\n        return 0.0;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\n// Time Complexity:\\n// addNum: O(1)\\n// findMedian: O(m),  m is the length of buckets, in this case, it\\'s 101 \\nclass MedianFinder {\\n    \\n    int[] buckets;\\n    int len;\\n\\n    /** initialize your data structure here. */\\n    public MedianFinder() {\\n        buckets = new int[101];\\n        len = 0;\\n    }\\n    \\n    public void addNum(int num) {\\n        len ++;\\n        buckets[num] ++;\\n    }\\n    \\n    public double findMedian() {\\n        double half = (double) len / 2;\\n        int sum = 0;\\n        int preSum = 0;\\n        if(len % 2 == 0){\\n            for(int i = 0; i < buckets.length; i ++){\\n                sum += buckets[i];\\n                if(sum > half && preSum < half){\\n                    return (double) i;\\n                }\\n                if(sum == half && preSum < half){\\n                    for(int j = i + 1; j < buckets.length; j ++){\\n                        if(buckets[j] > 0){\\n                            return (double) (i + j) / 2;\\n                        }\\n                    }\\n                }\\n                preSum = sum;\\n            }\\n        }else{\\n            for(int i = 0; i < buckets.length; i ++){\\n                sum += buckets[i];\\n                if(sum >= half && preSum < half){\\n                    return (double) i;\\n                }\\n                preSum = sum;\\n            }\\n        }\\n        \\n        return 0.0;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 291599,
                "title": "clean-multiset-solution",
                "content": "We continuosly refresh an iterator pointing to the middle of a multiset depending on two things: 1) whether the new elements are inserted to the right or left of the middle iterator, 2) whether the number of current elements is even or odd.\\n\\n```\\ntypedef multiset<int> MS;\\nclass MedianFinder {\\n    int size;\\n    MS ordered_multiset;\\n    MS::iterator it;\\n    bool even;\\n    \\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {\\n        size=0;\\n        it = ordered_multiset.begin();\\n        even = true;\\n    }\\n    \\n    void addNum(int num) {\\n        size++;\\n        even=!even;\\n        ordered_multiset.insert(num);        \\n        if(it==ordered_multiset.end() || (even && num>=(*it))) it++; \\n        if(!even && num<*it) it--;\\n    }\\n    \\n    double findMedian() {\\n        return (!even)? *it:(*it + *prev(it))/2.0;            \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n ```",
                "solutionTags": [],
                "code": "```\\ntypedef multiset<int> MS;\\nclass MedianFinder {\\n    int size;\\n    MS ordered_multiset;\\n    MS::iterator it;\\n    bool even;\\n    \\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {\\n        size=0;\\n        it = ordered_multiset.begin();\\n        even = true;\\n    }\\n    \\n    void addNum(int num) {\\n        size++;\\n        even=!even;\\n        ordered_multiset.insert(num);        \\n        if(it==ordered_multiset.end() || (even && num>=(*it))) it++; \\n        if(!even && num<*it) it--;\\n    }\\n    \\n    double findMedian() {\\n        return (!even)? *it:(*it + *prev(it))/2.0;            \\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n ```",
                "codeTag": "Java"
            },
            {
                "id": 265977,
                "title": "double-heap-solution-in-swift",
                "content": "```swift\\nclass MedianFinder {\\n\\n    let maxHeap = Heap(topToBottom: >) // left half\\n    let minHeap = Heap(topToBottom: <) // right half\\n\\n    // make sure `maxHeap.count == minHeap.count || maxHeap.count == minHeap.count + 1`\\n    func addNum(_ num: Int) {\\n        if maxHeap.count == 0 || maxHeap.peek()! >= num {\\n            maxHeap.add(num)\\n            if maxHeap.count > minHeap.count + 1 {\\n                minHeap.add(maxHeap.extract()!)\\n            }\\n        } else {\\n            minHeap.add(num)\\n            if minHeap.count > maxHeap.count {\\n                maxHeap.add(minHeap.extract()!)\\n            }\\n        }\\n    }\\n    \\n    func findMedian() -> Double {\\n        if maxHeap.count != minHeap.count {\\n            return Double(maxHeap.peek()!)\\n        } else {\\n            return Double(maxHeap.peek()! + minHeap.peek()!) / 2\\n        }\\n    }\\n}\\n\\n// heap definition\\nclass Heap {    \\n    private var heap = [Int]()\\n    \\n    private let comparator: (_ top: Int, _ bottom: Int) -> Bool\\n    init(topToBottom comparator: @escaping (Int, Int) -> Bool) {\\n        self.comparator = comparator\\n    }\\n    \\n    var count: Int {\\n        return heap.count\\n    }\\n    \\n    func add(_ num: Int) {\\n        heap.append(num)\\n        var curr = heap.count - 1\\n        while curr > 0 {\\n            let parent = (curr - 1) / 2\\n            if !comparator(heap[parent], heap[curr]) {\\n                heap.swapAt(curr, parent)\\n                curr = parent\\n            } else {\\n                break\\n            }\\n        }\\n    }\\n    \\n    func extract() -> Int? {\\n        guard heap.count > 0 else { return nil }\\n        let result = heap[0]\\n        let last = heap.removeLast()\\n        if heap.count > 0 {\\n            heap[0] = last\\n            var curr = 0\\n            while curr < heap.count {\\n                let next: Int\\n                let left = curr * 2 + 1, right = curr * 2 + 2\\n                if right < heap.count {\\n                    next = comparator(heap[left], heap[right]) ? left : right\\n                } else if left < heap.count {\\n                    next = left\\n                } else {\\n                    break\\n                }\\n                \\n                if !comparator(heap[curr], heap[next]) {\\n                    heap.swapAt(curr, next)\\n                    curr = next\\n                } else {\\n                    break\\n                }\\n            }\\n        }\\n        return result\\n    }\\n    \\n    func peek() -> Int? {\\n        return heap.first\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```swift\\nclass MedianFinder {\\n\\n    let maxHeap = Heap(topToBottom: >) // left half\\n    let minHeap = Heap(topToBottom: <) // right half\\n\\n    // make sure `maxHeap.count == minHeap.count || maxHeap.count == minHeap.count + 1`\\n    func addNum(_ num: Int) {\\n        if maxHeap.count == 0 || maxHeap.peek()! >= num {\\n            maxHeap.add(num)\\n            if maxHeap.count > minHeap.count + 1 {\\n                minHeap.add(maxHeap.extract()!)\\n            }\\n        } else {\\n            minHeap.add(num)\\n            if minHeap.count > maxHeap.count {\\n                maxHeap.add(minHeap.extract()!)\\n            }\\n        }\\n    }\\n    \\n    func findMedian() -> Double {\\n        if maxHeap.count != minHeap.count {\\n            return Double(maxHeap.peek()!)\\n        } else {\\n            return Double(maxHeap.peek()! + minHeap.peek()!) / 2\\n        }\\n    }\\n}\\n\\n// heap definition\\nclass Heap {    \\n    private var heap = [Int]()\\n    \\n    private let comparator: (_ top: Int, _ bottom: Int) -> Bool\\n    init(topToBottom comparator: @escaping (Int, Int) -> Bool) {\\n        self.comparator = comparator\\n    }\\n    \\n    var count: Int {\\n        return heap.count\\n    }\\n    \\n    func add(_ num: Int) {\\n        heap.append(num)\\n        var curr = heap.count - 1\\n        while curr > 0 {\\n            let parent = (curr - 1) / 2\\n            if !comparator(heap[parent], heap[curr]) {\\n                heap.swapAt(curr, parent)\\n                curr = parent\\n            } else {\\n                break\\n            }\\n        }\\n    }\\n    \\n    func extract() -> Int? {\\n        guard heap.count > 0 else { return nil }\\n        let result = heap[0]\\n        let last = heap.removeLast()\\n        if heap.count > 0 {\\n            heap[0] = last\\n            var curr = 0\\n            while curr < heap.count {\\n                let next: Int\\n                let left = curr * 2 + 1, right = curr * 2 + 2\\n                if right < heap.count {\\n                    next = comparator(heap[left], heap[right]) ? left : right\\n                } else if left < heap.count {\\n                    next = left\\n                } else {\\n                    break\\n                }\\n                \\n                if !comparator(heap[curr], heap[next]) {\\n                    heap.swapAt(curr, next)\\n                    curr = next\\n                } else {\\n                    break\\n                }\\n            }\\n        }\\n        return result\\n    }\\n    \\n    func peek() -> Int? {\\n        return heap.first\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 228234,
                "title": "java-treemap-implementation-and-follow-up-o-logn-remove-function",
                "content": "My basic idea is use two treemaps (one is minHeap called as upperMap, one is maxHeap called as lowerMap) and each time we can add and remove elements in O(log N). And once we want to find median, we need to adjust the number of two Heaps. So the remove operation will be only O(logn).\\n```\\nclass MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    TreeMap<Integer, Integer> upperMap, lowerMap;\\n    int countU, countL;\\n    //39\\n    public MedianFinder() {\\n        countU = 0;\\n        countL = 0;\\n        upperMap = new TreeMap<>();\\n        lowerMap = new TreeMap<>(Collections.reverseOrder());\\n    }\\n    \\n    public void addNum(int num){\\n        addNumHelper(num);\\n        // remove(num);\\n        // addNumHelper(num);\\n    }\\n    public void addNumHelper(int num) {\\n        if (upperMap.isEmpty() || num >= upperMap.firstKey()){//here, we should be careful about the if we can get upperMap.firstKey\\n            upperMap.put(num, upperMap.getOrDefault(num, 0) + 1);\\n            countU++;\\n        }else{\\n            lowerMap.put(num, lowerMap.getOrDefault(num, 0) + 1);\\n            countL++;\\n        }\\n        adjust();\\n    }\\n    public boolean remove(int num){\\n        if (num >= upperMap.firstKey()){\\n            if (!upperMap.containsKey(num)){\\n                return false;\\n            }\\n            int val = upperMap.get(num) -1;\\n            if(val == 0){upperMap.remove(num);}\\n            else{upperMap.put(num, val);}\\n            countU--;\\n        }else{\\n            if (!lowerMap.containsKey(num)){\\n                return false;\\n            }\\n            int val = lowerMap.get(num) - 1;\\n            if (val == 0){lowerMap.remove(num);}\\n            else{lowerMap.put(num, val);}\\n            countL--;\\n            \\n        }\\n        adjust();\\n        return true;\\n    }\\n    private void adjust(){\\n        if (countU > countL + 1){\\n            // Map.Entry<Integer,Integer> firstEntry = upperMap.firstEntry();\\n            int firstKey = upperMap.firstKey();\\n            int firstVal = upperMap.get(firstKey);\\n            if (countU - firstVal >= countL + firstVal){\\n                lowerMap.put(firstKey, firstVal);\\n                countU -= firstVal;\\n                countL += firstVal;\\n                upperMap.remove(firstKey);//remove need to be at last\\n            }\\n            \\n        }\\n        if (countL > countU + 1 ){\\n            // Map.Entry<Integer, Integer> firstEntry = lowerMap.firstEntry();\\n            int firstKey = lowerMap.firstKey();\\n            int firstVal = lowerMap.get(firstKey);\\n            if (countL - firstVal >= countU + firstVal){\\n                upperMap.put(firstKey, firstVal);\\n                countL -= firstVal;\\n                countU += firstVal;\\n                lowerMap.remove(firstKey);\\n            }\\n            \\n        }\\n    }\\n    public double findMedian() {\\n        // adjust();\\n        \\n        if (countU == countL){\\n            return (double)(upperMap.firstKey() + lowerMap.firstKey()) / 2;\\n        }else if (countU < countL){\\n            return lowerMap.firstKey();\\n        }else{\\n            return upperMap.firstKey();\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "solutionTags": [],
                "code": "```\\nclass MedianFinder {\\n\\n    /** initialize your data structure here. */\\n    TreeMap<Integer, Integer> upperMap, lowerMap;\\n    int countU, countL;\\n    //39\\n    public MedianFinder() {\\n        countU = 0;\\n        countL = 0;\\n        upperMap = new TreeMap<>();\\n        lowerMap = new TreeMap<>(Collections.reverseOrder());\\n    }\\n    \\n    public void addNum(int num){\\n        addNumHelper(num);\\n        // remove(num);\\n        // addNumHelper(num);\\n    }\\n    public void addNumHelper(int num) {\\n        if (upperMap.isEmpty() || num >= upperMap.firstKey()){//here, we should be careful about the if we can get upperMap.firstKey\\n            upperMap.put(num, upperMap.getOrDefault(num, 0) + 1);\\n            countU++;\\n        }else{\\n            lowerMap.put(num, lowerMap.getOrDefault(num, 0) + 1);\\n            countL++;\\n        }\\n        adjust();\\n    }\\n    public boolean remove(int num){\\n        if (num >= upperMap.firstKey()){\\n            if (!upperMap.containsKey(num)){\\n                return false;\\n            }\\n            int val = upperMap.get(num) -1;\\n            if(val == 0){upperMap.remove(num);}\\n            else{upperMap.put(num, val);}\\n            countU--;\\n        }else{\\n            if (!lowerMap.containsKey(num)){\\n                return false;\\n            }\\n            int val = lowerMap.get(num) - 1;\\n            if (val == 0){lowerMap.remove(num);}\\n            else{lowerMap.put(num, val);}\\n            countL--;\\n            \\n        }\\n        adjust();\\n        return true;\\n    }\\n    private void adjust(){\\n        if (countU > countL + 1){\\n            // Map.Entry<Integer,Integer> firstEntry = upperMap.firstEntry();\\n            int firstKey = upperMap.firstKey();\\n            int firstVal = upperMap.get(firstKey);\\n            if (countU - firstVal >= countL + firstVal){\\n                lowerMap.put(firstKey, firstVal);\\n                countU -= firstVal;\\n                countL += firstVal;\\n                upperMap.remove(firstKey);//remove need to be at last\\n            }\\n            \\n        }\\n        if (countL > countU + 1 ){\\n            // Map.Entry<Integer, Integer> firstEntry = lowerMap.firstEntry();\\n            int firstKey = lowerMap.firstKey();\\n            int firstVal = lowerMap.get(firstKey);\\n            if (countL - firstVal >= countU + firstVal){\\n                upperMap.put(firstKey, firstVal);\\n                countL -= firstVal;\\n                countU += firstVal;\\n                lowerMap.remove(firstKey);\\n            }\\n            \\n        }\\n    }\\n    public double findMedian() {\\n        // adjust();\\n        \\n        if (countU == countL){\\n            return (double)(upperMap.firstKey() + lowerMap.firstKey()) / 2;\\n        }else if (countU < countL){\\n            return lowerMap.firstKey();\\n        }else{\\n            return upperMap.firstKey();\\n        }\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74039,
                "title": "c-two-heaps",
                "content": "Sorted Array: Left (Max Heap) - Mid - Right (Min Heap)\\n\\n```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        (left.empty() || num <= left.top()) ? left.push(num) : right.push(num);\\n        if(left.size() > right.size() + 1){\\n            right.push(left.top());\\n            left.pop();\\n        }\\n        if(right.size() > left.size()){\\n            left.push(right.top());\\n            right.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        return left.size() > right.size()? left.top() : (left.top() + right.top()) / 2.0;\\n    }\\n\\nprivate:\\n    priority_queue<int>left;\\n    priority_queue<int, vector<int>, greater<int>>right;\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass MedianFinder {\\npublic:\\n    /** initialize your data structure here. */\\n    MedianFinder() {}\\n    \\n    void addNum(int num) {\\n        (left.empty() || num <= left.top()) ? left.push(num) : right.push(num);\\n        if(left.size() > right.size() + 1){\\n            right.push(left.top());\\n            left.pop();\\n        }\\n        if(right.size() > left.size()){\\n            left.push(right.top());\\n            right.pop();\\n        }\\n    }\\n    \\n    double findMedian() {\\n        return left.size() > right.size()? left.top() : (left.top() + right.top()) / 2.0;\\n    }\\n\\nprivate:\\n    priority_queue<int>left;\\n    priority_queue<int, vector<int>, greater<int>>right;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 74048,
                "title": "c-heap-solution",
                "content": "Have a C# solution using a heap. No heap exists in C# for some reason so I had to write one.\\nSince I wrote it, it is capable of both Min and Max via a switch enum. Solution is much like the others, where we use 2 heaps, one min, and one max. We pop and push judging on the respective size of each queue. The 'upper' value numbers are held in a Min heap, the 'lower' value numbers are held in a max heap. If a number is truly on the Maximum end of the spectrum, it will be in the 'bottom' of MIN Heap with no possibility of being ejected. If a number is truly on the Minimum end of the spectrum, it will be in the 'bottom' of the MAX Heap with no possibility of being ejected.\\n\\nAs an insertion example, we'll use 4 numbers: 10, 5, 7, 4. \\n\\nInsert(10)\\n\\nWe push to the MIN Heap.\\nThe contents of MIN Heap are (10).\\nThe contents of MAX Heap are ().\\n\\nThen we push to the MAX Heap, the Pop() of the MIN Heap.\\nThe contents of MIN Heap are ().\\nThe contents of MAX Heap are (10).\\n\\nIf MIN Heap's size is less than MAX Heap (**TRUE**), we push to the MIN Heap, the Pop() of the MAX Heap. \\nThe contents of MIN Heap are (10).\\nThe contents of MAX Heap are ().\\n\\nInsert(5)\\n\\nWe push to the MIN Heap.\\nThe contents of MIN Heap are (10, 5).\\nThe contents of MAX Heap are ().\\n\\nThen we push to the MAX Heap, the Pop() of the MIN Heap.\\nThe contents of MIN Heap are (10).\\nThe contents of MAX Heap are (5).\\n\\nIf MIN Heap's size is less than MAX Heap (**FALSE**), we push to the MIN Heap, the Pop() of the MAX Heap. \\nThe contents of MIN Heap are (10).\\nThe contents of MAX Heap are (5).\\n\\nInsert(7)\\n\\nFirst we push to the MIN Heap.\\nThe contents of MIN Heap are (10, 7).\\nThe contents of MAX Heap are (5).\\n\\nThen we push to the MAX Heap, the Pop() of the MIN Heap.\\nThe contents of MIN Heap are (10).\\nThe contents of MAX Heap are (5, 7).\\n\\nIf MIN Heap's size is less than MAX Heap (**TRUE**), we push to the MIN Heap, the Pop() of the MAX Heap. \\nThe contents of MIN Heap are (10, 7).\\nThe contents of MAX Heap are (5).\\n\\nInsert(4)\\n\\nFirst we push to the MIN Heap.\\nThe contents of MIN Heap are (10, 7, 4).\\nThe contents of MAX Heap are (5).\\n\\nThen we push to the MAX Heap, the Pop() of the MIN Heap.\\nThe contents of MIN Heap are (10, 7).\\nThe contents of MAX Heap are (5, 4).\\n\\nIf MIN Heap's size is less than MAX Heap (**FALSE**), we push to the MIN Heap, the Pop() of the MAX Heap. \\nThe contents of MIN Heap are (10, 7).\\nThe contents of MAX Heap are (5, 4).\\n\\nFinding The Median:\\n\\nIf the MIN Heap is larger, we have an odd number of contents, so we Pop() the MIN Heap for our median.\\n\\nIf the MIN Heap and the MAX Heap are the same size, we have an even number of contents, so we\\nPop() both and average the value, so in this case.\\nThe contents of MIN Heap are (10, 7).\\nWe pop 7.\\n\\nThe contents of MAX Heap are (5, 4).\\nWe pop 5.\\n\\n7 + 5 / 2 = 6\\n\\n\\n```\\npublic class MedianFinder\\n{\\n    private IntegerHeap m_MinHeap;\\n    private IntegerHeap m_MaxHeap;\\n    /** initialize your data structure here. */\\n    public MedianFinder()\\n    {\\n        m_MinHeap = new IntegerHeap(IntegerHeap.SortType.MIN);\\n        m_MaxHeap = new IntegerHeap(IntegerHeap.SortType.MAX);\\n    }\\n\\n    public void AddNum(int num)\\n    {\\n        m_MinHeap.Insert(num);\\n        m_MaxHeap.Insert(m_MinHeap.Pop());\\n        if (m_MinHeap.m_Size < m_MaxHeap.m_Size) m_MinHeap.Insert(m_MaxHeap.Pop());\\n    }\\n\\n\\n    public double FindMedian()\\n    {\\n        if (m_MinHeap.m_Size > m_MaxHeap.m_Size)\\n        {\\n            return m_MinHeap.Peek();\\n        }\\n        else\\n        {\\n            return (m_MinHeap.Peek() + m_MaxHeap.Peek()) / 2.0;\\n        }\\n    }\\n\\n\\n    /// <summary>\\n    /// Integer Heap by Steve Stermer. \\n    /// Integer heap is held as an array. Left child is indexed as 2i + 1, right child is indexed as 2i + 2.\\n    /// </summary>\\n    private class IntegerHeap\\n    {\\n        public enum SortType\\n        {\\n            MIN,\\n            MAX\\n        }\\n\\n        private SortType m_ActiveSort;\\n        private int[] m_Heap = new int[100];\\n        public int m_Size;\\n\\n        public IntegerHeap(SortType activeSort)\\n        {\\n            m_ActiveSort = activeSort;\\n        }\\n\\n        private void ResizeHeap()\\n        {\\n            if (m_Size * 2 + 2 >= m_Heap.Length)\\n            {\\n                int[] newHeap = new int[m_Heap.Length * 2];\\n                Array.Copy(m_Heap, newHeap, m_Size);\\n                m_Heap = newHeap;\\n            }\\n        }\\n\\n        public void Insert(int number)\\n        {\\n            ResizeHeap();\\n            m_Heap[m_Size] = number;\\n            BubbleUp(m_Size);\\n            m_Size++;\\n        }\\n\\n        private void SwapAToB(int indexA, int indexB)\\n        {\\n            int tempVal = m_Heap[indexA];\\n            m_Heap[indexA] = m_Heap[indexB];\\n            m_Heap[indexB] = tempVal;\\n        }\\n\\n        //When inserting a new number, we 'bubble up' to find its right place.\\n        private void BubbleUp(int index)\\n        {\\n            if (index == 0) return;\\n\\n            int parentOffset = index % 2 == 0 ? parentOffset = 2 : 1; //Was a 'right' node it was even, else, it was a left.\\n            bool swapIndices = false;\\n\\n            switch (m_ActiveSort)\\n            {\\n                case SortType.MAX:\\n                    if (m_Heap[index] > m_Heap[(index - parentOffset) / 2]) swapIndices = true; //If greater than its parent, setup swap.\\n                    break;\\n                case SortType.MIN:\\n                    if (m_Heap[index] < m_Heap[(index - parentOffset) / 2]) swapIndices = true; //If less than its parent, setup swap.\\n                    break;\\n            }\\n\\n            if (swapIndices)\\n            {\\n                SwapAToB((index - parentOffset) / 2, index);\\n                BubbleUp((index - parentOffset) / 2);\\n            }\\n        }\\n\\n        //If we pop the root, we place the last added number in the root, and 'bubble down' to find its right place\\n        private void BubbleDown(int index)\\n        {\\n            if (index >= m_Size - 1) return; //No where to bubble.\\n\\n            bool swapLeft = false;\\n            bool swapRight = false;\\n\\n            switch (m_ActiveSort)\\n            {\\n                case SortType.MAX:\\n                    if (2 * index + 1 < m_Size && m_Heap[index] < m_Heap[2 * index + 1]) //if less than left child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 1);\\n                        swapLeft = true;\\n                    }\\n                    if (2 * index + 2 < m_Size && m_Heap[index] < m_Heap[2 * index + 2]) //if less than right child, swap. Chick if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 2);\\n                        swapRight = true;\\n                    }\\n                    break;\\n                case SortType.MIN:\\n                    if (2 * index + 1 < m_Size && m_Heap[index] > m_Heap[2 * index + 1]) //if greater than left child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 1);\\n                        swapLeft = true;\\n                    }\\n                    if (2 * index + 2 < m_Size && m_Heap[index] > m_Heap[2 * index + 2]) //if greater than right child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 2);\\n                        swapRight = true;\\n                    }\\n                    break;\\n            }\\n\\n            if (swapRight) BubbleDown(2 * index + 2); //If a swap was performed, continue the bubbling down.\\n            if (swapLeft) BubbleDown(2 * index + 1); //Since we could have swapped both sides above, we most now perform on both sides.\\n        }\\n\\n        public int Peek()\\n        {\\n            if (m_Size != 0) return m_Heap[0];\\n            return int.MinValue;\\n        }\\n\\n        public int Pop()\\n        {\\n            if (m_Size != 0)\\n            {\\n                int rootValue = m_Heap[0];\\n                m_Heap[0] = m_Heap[m_Size - 1];\\n                m_Size--;\\n\\n                BubbleDown(0);\\n                return rootValue;\\n\\n            }\\n\\n            return int.MinValue;\\n        }\\n    } //end Integer Heap\\n\\n}//end Median Finder\\n\\n```",
                "solutionTags": [],
                "code": "```\\npublic class MedianFinder\\n{\\n    private IntegerHeap m_MinHeap;\\n    private IntegerHeap m_MaxHeap;\\n    /** initialize your data structure here. */\\n    public MedianFinder()\\n    {\\n        m_MinHeap = new IntegerHeap(IntegerHeap.SortType.MIN);\\n        m_MaxHeap = new IntegerHeap(IntegerHeap.SortType.MAX);\\n    }\\n\\n    public void AddNum(int num)\\n    {\\n        m_MinHeap.Insert(num);\\n        m_MaxHeap.Insert(m_MinHeap.Pop());\\n        if (m_MinHeap.m_Size < m_MaxHeap.m_Size) m_MinHeap.Insert(m_MaxHeap.Pop());\\n    }\\n\\n\\n    public double FindMedian()\\n    {\\n        if (m_MinHeap.m_Size > m_MaxHeap.m_Size)\\n        {\\n            return m_MinHeap.Peek();\\n        }\\n        else\\n        {\\n            return (m_MinHeap.Peek() + m_MaxHeap.Peek()) / 2.0;\\n        }\\n    }\\n\\n\\n    /// <summary>\\n    /// Integer Heap by Steve Stermer. \\n    /// Integer heap is held as an array. Left child is indexed as 2i + 1, right child is indexed as 2i + 2.\\n    /// </summary>\\n    private class IntegerHeap\\n    {\\n        public enum SortType\\n        {\\n            MIN,\\n            MAX\\n        }\\n\\n        private SortType m_ActiveSort;\\n        private int[] m_Heap = new int[100];\\n        public int m_Size;\\n\\n        public IntegerHeap(SortType activeSort)\\n        {\\n            m_ActiveSort = activeSort;\\n        }\\n\\n        private void ResizeHeap()\\n        {\\n            if (m_Size * 2 + 2 >= m_Heap.Length)\\n            {\\n                int[] newHeap = new int[m_Heap.Length * 2];\\n                Array.Copy(m_Heap, newHeap, m_Size);\\n                m_Heap = newHeap;\\n            }\\n        }\\n\\n        public void Insert(int number)\\n        {\\n            ResizeHeap();\\n            m_Heap[m_Size] = number;\\n            BubbleUp(m_Size);\\n            m_Size++;\\n        }\\n\\n        private void SwapAToB(int indexA, int indexB)\\n        {\\n            int tempVal = m_Heap[indexA];\\n            m_Heap[indexA] = m_Heap[indexB];\\n            m_Heap[indexB] = tempVal;\\n        }\\n\\n        //When inserting a new number, we 'bubble up' to find its right place.\\n        private void BubbleUp(int index)\\n        {\\n            if (index == 0) return;\\n\\n            int parentOffset = index % 2 == 0 ? parentOffset = 2 : 1; //Was a 'right' node it was even, else, it was a left.\\n            bool swapIndices = false;\\n\\n            switch (m_ActiveSort)\\n            {\\n                case SortType.MAX:\\n                    if (m_Heap[index] > m_Heap[(index - parentOffset) / 2]) swapIndices = true; //If greater than its parent, setup swap.\\n                    break;\\n                case SortType.MIN:\\n                    if (m_Heap[index] < m_Heap[(index - parentOffset) / 2]) swapIndices = true; //If less than its parent, setup swap.\\n                    break;\\n            }\\n\\n            if (swapIndices)\\n            {\\n                SwapAToB((index - parentOffset) / 2, index);\\n                BubbleUp((index - parentOffset) / 2);\\n            }\\n        }\\n\\n        //If we pop the root, we place the last added number in the root, and 'bubble down' to find its right place\\n        private void BubbleDown(int index)\\n        {\\n            if (index >= m_Size - 1) return; //No where to bubble.\\n\\n            bool swapLeft = false;\\n            bool swapRight = false;\\n\\n            switch (m_ActiveSort)\\n            {\\n                case SortType.MAX:\\n                    if (2 * index + 1 < m_Size && m_Heap[index] < m_Heap[2 * index + 1]) //if less than left child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 1);\\n                        swapLeft = true;\\n                    }\\n                    if (2 * index + 2 < m_Size && m_Heap[index] < m_Heap[2 * index + 2]) //if less than right child, swap. Chick if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 2);\\n                        swapRight = true;\\n                    }\\n                    break;\\n                case SortType.MIN:\\n                    if (2 * index + 1 < m_Size && m_Heap[index] > m_Heap[2 * index + 1]) //if greater than left child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 1);\\n                        swapLeft = true;\\n                    }\\n                    if (2 * index + 2 < m_Size && m_Heap[index] > m_Heap[2 * index + 2]) //if greater than right child, swap. Check if child is out of bounds.\\n                    {\\n                        SwapAToB(index, 2 * index + 2);\\n                        swapRight = true;\\n                    }\\n                    break;\\n            }\\n\\n            if (swapRight) BubbleDown(2 * index + 2); //If a swap was performed, continue the bubbling down.\\n            if (swapLeft) BubbleDown(2 * index + 1); //Since we could have swapped both sides above, we most now perform on both sides.\\n        }\\n\\n        public int Peek()\\n        {\\n            if (m_Size != 0) return m_Heap[0];\\n            return int.MinValue;\\n        }\\n\\n        public int Pop()\\n        {\\n            if (m_Size != 0)\\n            {\\n                int rootValue = m_Heap[0];\\n                m_Heap[0] = m_Heap[m_Size - 1];\\n                m_Size--;\\n\\n                BubbleDown(0);\\n                return rootValue;\\n\\n            }\\n\\n            return int.MinValue;\\n        }\\n    } //end Integer Heap\\n\\n}//end Median Finder\\n\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564564,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567243,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567590,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1566833,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567744,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1851791,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1569168,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1568410,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1566495,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567412,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1564564,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567243,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567590,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1566833,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567744,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1851791,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1569168,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1568410,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1566495,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1567412,
                "content": [
                    {
                        "username": "nupt_wang",
                        "content": "***1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nWe can maintain an integer array of length 100 to store the count of each number along with a total count.  Then, we can iterate over the array to find the middle value to get our median.\\n\\nTime and space complexity would be O(100) = O(1).\\n\\n***2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?***\\n\\nIn this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100]."
                    },
                    {
                        "username": "kevintancs",
                        "content": "[@psing9968](/psing9968) iterating over an array with fixed size of 100 is O(100) = O(1)"
                    },
                    {
                        "username": "A5HU705H",
                        "content": "[@murlinwang](/murlinwang) but it guarantees a 99% hits on 0, 100"
                    },
                    {
                        "username": "psing9968",
                        "content": "If we are iterating over the array, how can it be O(1) ?"
                    },
                    {
                        "username": "hombreingwar",
                        "content": "2. why not just ignore values outside [0, 100]. They won\\'t impact the median since they are anomalies median calculation is designed for to ignore.  "
                    },
                    {
                        "username": "murlinwang",
                        "content": "[@Max7cd](/Max7cd) I think there could be cases where integers in the data stream are all out of the range of 0-100. In that case, if we want the median, the count of those integers would not help. I am also learning so correct me if I am wrong."
                    },
                    {
                        "username": "c0s",
                        "content": "[@Max7cd](/Max7cd) it would not let to call findMedian() until this requirement is met on already streamed values"
                    },
                    {
                        "username": "Max7cd",
                        "content": "> 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n> \\n> In this case, we need an integer array of length 100 and a hashmap for these numbers that are not in [0,100].\\n\\nI am not 100% sure, but couldn\\'t we just keep a count of how many numbers are above 100 and how many numbers are below 0, since these numbers could never get to be the median and are therefore not important to keep?\\nThis would keep the solution in O(1) time and memory."
                    },
                    {
                        "username": "mahapatro",
                        "content": "Really great"
                    },
                    {
                        "username": "Future6",
                        "content": "[\"MedianFinder\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\",\"addNum\",\"findMedian\"]\\n[[],[6],[],[10],[],[2],[],[6],[],[5],[],[0],[],[6],[],[3],[],[1],[],[0],[],[0],[]]\\n\\nso the list is {6, 10, 2, 6, 5, 0, 6, 3, 1, 0, 0}\\nand the MedianFinder result should be: 6, 8, 10, 6, 2, 4, 6, 5.5, 5, 2.5, 0\\n\\nBut it offers answer as follows:\\n[null,null,6.00000,null,8.00000,null,**6.00000**,null,6.00000,null,**6.00000**,null,5.50000,null,6.00000,null,5.50000,null,5.00000,null,4.00000,null,3.00000]\\n\\nOr I misunderstand this quesiton"
                    },
                    {
                        "username": "rajputasif",
                        "content": "[@CrossBon3](/CrossBon3) Thanks for the reply... my data is already sorted in multiset strange!\\n\\n6 out:6\\n6 10 out:8\\n2 6 10 out:6\\n2 6 6 10 out:6\\n2 5 6 6 10 out:6\\n0 2 5 6 6 10 out:5 //5.5 expected\\n0 2 5 6 6 6 10 out:5 //6 expected\\n0 2 3 5 6 6 6 10 out:5 //5.5 expected\\n0 1 2 3 5 6 6 6 10 out:5\\n0 0 1 2 3 5 6 6 6 10 out:5\\n0 0 0 1 2 3 5 6 6 6 10 out:5"
                    },
                    {
                        "username": "adanaza89",
                        "content": "[@CrossBon3](/CrossBon3) Oh wow!! I missed this very important aspect of the question. I came here because I was sure I was right. Thanks for your answer"
                    },
                    {
                        "username": "CrossBon3",
                        "content": "median is performed on sorted array.\\nfor first 2 numbers you get correct cause they are already in sorted fashion so you got median as 6 and 8.\\nwhen 2 is added to the array, array need to be sorted(it looks [2,6,10]). thus median will be 6. "
                    },
                    {
                        "username": "vyshnavkr",
                        "content": "**Important posts from discussions:**\\n- I was asked this question in an interview today. I told about the minHeap and maxHeap approach. The interviewer asked what if the data is very very large. How would you handle it? Any thoughts?! \\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/228442/Java-Solution-with-Tree-O(Log-N)-Insertion-and-Lookup-+-Explanation : Java Solution with Tree - O(Log N) Insertion and Lookup + Explanation\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/111698/Be-asked-for-a-multi-thread-and-thread-safe-solution-in-a-real-interview. : Be asked for a multi-thread and thread-safe solution in a real interview\\n- https://leetcode.com/problems/find-median-from-data-stream/discuss/652498/Good-for-interviews:-Python-general-sort-greater-insertion-sort-greater-two-heaps-greater-follow-ups : Good for interviews: Python general sort -> insertion sort -> two heaps -> follow-ups\\n\\n**Observations:**\\n- The change in Median: when a new element comes, the new median will be either 1 unit left or 1 unit right to the prvious median. We use 2 pointers to implement this along with taking care of average of middle numbers for even size.\\n- Median means sorted data and middle element(s). Sorted data means \\'array/collection + manual sort\\' or self balanced bst or miltuple heaps or monotonic stack or deque (which isn\\'t useful for this problem since monotonic stack/deque will involve removal exisiting elements).  \\n- Heap utilities:\\n\\t- using a heap for a data set helps to get the smallest/largest element fastly\\n\\t- using 2 heaps: if we divide the random data (non sorted data) into 2 heaps (1 min and other max) such that the first half of sorted data (data if it had been sorted) is in max heap and second half of sorted data (data if it had been sorted) is in min heap, we could easily get the middle element of the sorted data (data if it had been sorted). VISUALIZE!!!"
                    },
                    {
                        "username": "prYsm",
                        "content": "If there is a condition that the calls to findMedian() are less, we can lazily compute the median.\n\n1. Have two lists: Unsorted list, sorted list.\n2. If query == Addelement():\n    2.1 Add element to unsorted list.\n3. If query == FindMedian():\n    3.1 sort(unsorted list) call it X.\n    3.2 Merge(x, sortedlist) and assign it back to sortedlist.\n    3.3 Use indexes to find middle elements from sorted list.\n\nYes, 3 in the worst case would take O(nlogn). But, we are not computing it every time we get a query. This way we only spend cycles, which is especially important if we have large amount of data, when we want to compute median."
                    },
                    {
                        "username": "avminus",
                        "content": "Hey your second link is not opening, can you please share something regarding this thread safety discussion can\\'t seem to find it anywhere.\\n"
                    },
                    {
                        "username": "chao4",
                        "content": "In real world streaming application. The data amount will be huge so it is impossible to hold all the data in the stream into memory.\\n\\nI think it is a good open-end question to ask. What if the memory is not allowed to hold all the data from the beginning. Some data needs to go to hard drive. How will we optmize that."
                    },
                    {
                        "username": "ChaiBapchya",
                        "content": "what would be the solution in that case? i\\'m guessing some amount of memoization would be needed?"
                    },
                    {
                        "username": "prakashsellathurai",
                        "content": "`1. If all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\nSince the input range is bounded we can use counter array to calculate median, where count[i] represents the number of times integer data occur in the stream in O(1) space and time\\n**refer this problem**: [statistics-from-a-large-sample](https://leetcode.com/problems/statistics-from-a-large-sample/description/)\\n\\n`2. If 99% of all integer numbers from the stream are in the range [0, 100], how would you optimize your solution?`\\n\\nIF 99% of all integers from the stream are in the range [0,100] then considering empirical rule \\n\\n\"99.7% of data observed following a normal distribution lies within 3 standard deviations of the mean\"\\n\\nwe can assume that the input stream is normally distributed in this case.\\nIf we maintain a   reservoir  of  100 items sampled with equal probability stored in a array then we can estimate the median of the the input data with highest confidence  for large input data distribution of unknown size .\\n\\n**Alternate Interesting Solution**: By using median filter [stackoverflow](https://stackoverflow.com/a/15150968/8336491)\\n\\n  \\n\\n\\n\\n\\n\\n\\n"
                    },
                    {
                        "username": "Msey",
                        "content": "Wanted to complete it quickly by using Sorting instead of two heaps and got TLE haha"
                    },
                    {
                        "username": "54564269",
                        "content": "Got it done pretty soon using 2 heaps in a real interview. However, in the follow-up, I'm asked how to improve it and make sure the method is thread-safe if the two heaps are shared."
                    },
                    {
                        "username": "adit2005",
                        "content": "can u pls share the answer for follow-up question asked ??"
                    },
                    {
                        "username": "animish01",
                        "content": "do you know it now? can you share?"
                    },
                    {
                        "username": "bayernkang",
                        "content": "Should I implement the Heap data structure myself ? (that\\'s a lot of code to memorize and write).\\n\\nDo anyone encounter a quesiton in a real interview that have to use heap but you are using Javascript?"
                    },
                    {
                        "username": "suziray",
                        "content": "I saw there is some solution for using BST in C++, and I heard some hint for using Counting Sort or maintaining the median and the numbers next to it. Is there a way to do these in Java?\\n\\nAdditionally,  another version is to return the median of recent k numbers added, how could this be achieved..."
                    },
                    {
                        "username": "jsnoob",
                        "content": "Follow up:\\n\\n1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\\n2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?"
                    }
                ]
            },
            {
                "id": 1573694,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1569631,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1569452,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 2034237,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1575093,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1573390,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1571547,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1571546,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1681260,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 1575156,
                "content": [
                    {
                        "username": "mukunda-",
                        "content": "Don\\'t build your algorithm around a counting sort due to the \"hints\": *If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?*\\n\\nSome of the tests do not follow this at all.\\n"
                    },
                    {
                        "username": "neelambuj2",
                        "content": "Please reply in comments"
                    },
                    {
                        "username": "Narayanadev",
                        "content": "Any idea on how to solve the follow-up questions?"
                    },
                    {
                        "username": "sergant_123",
                        "content": "Hello anyone please could tell me why it is passing only 20 testcases out of 21 is there any bug in last testcase\\n\\n\\n `class MedianFinder {\\npublic:\\n\\n   priority_queue<int> maxheap;\\n   priority_queue<int,vector<int>,greater<int>> minheap;\\n   double median;\\n\\n   int sgnum(int a,int b){\\n       if(a==b)\\n       return 0;\\n       else if(a>b)\\n       return 1;\\n       else\\n       return -1;\\n   }\\n\\n    MedianFinder() {\\n        this->median  = 0;\\n    }\\n    \\n    void addNum(int num) {\\n        switch(sgnum(maxheap.size(),minheap.size())){\\n            case 0:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n            case 1:\\n            if(num>this->median){\\n                minheap.push(num);\\n            }\\n            else{\\n                minheap.push(maxheap.top());\\n                maxheap.pop();\\n                maxheap.push(num);\\n            }\\n            break;\\n            case -1:\\n            if(num>this->median){\\n                maxheap.push(minheap.top());\\n                minheap.pop();\\n\\n                minheap.push(num);\\n            }\\n            else{\\n                maxheap.push(num);\\n            }\\n            break;\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        if(maxheap.size()>minheap.size()){\\n            this->median  = maxheap.top();\\n        }\\n        else if(maxheap.size()<minheap.size()){\\n            this->median  = minheap.top();\\n        }\\n        else{\\n            this->median  = (maxheap.top()+minheap.top())/2.0;\\n        }\\n        return this->median;\\n    }\\n};`"
                    },
                    {
                        "username": "Vithesh",
                        "content": "typecaste it properly. maybe thats the issue...and do check the last testcase..."
                    },
                    {
                        "username": "GrandChieftain",
                        "content": "Same issue here. Compared the actual and expected outputs, both when submitting and running the testcase in isolation, and it keeps failing even though they\\'re the exact same."
                    },
                    {
                        "username": "csjobhelp2",
                        "content": "Aren\\'t they the same time complexity NlogN?  Why do the more complicated two heap?"
                    },
                    {
                        "username": "drsagitn",
                        "content": "My code succeeded on when try \"Run Code\" but failed on \"Submission\". Exact same testcase used. I dont know why??? Is this because of soem environment difference?\\n\\n![image](https://assets.leetcode.com/users/drsagitn/image_1580253193.png)\\n"
                    },
                    {
                        "username": "LizLemon777",
                        "content": "I'm just thinking of this idea, and it seems the majority of people here use two heaps. Has anyone tried two pointers (pointing to two middle values) and a doubly linked list? When adding a new value, compare it to the middle values, and place the value at the right place using binary search, and update middle value pointers. Does this idea work?"
                    },
                    {
                        "username": "vansharora03",
                        "content": "unfortunately you cannot perform a logn sorted insertion of a doubly linked list. I tried using a hashmap of indexes to nodes, but realized I would have to update the indexes anyways after insertion. "
                    },
                    {
                        "username": "meetug",
                        "content": "I find this solution by HelloWorld123456 to be very intuitive. \\n\\nhttps://leetcode.com/discuss/80600/java-easy-version-to-understand\\n\\nC# does not have native support for priority queue/heap. How can I write equivalent code that will be accepted by LeetCode? What is an acceptable alternative with O(lgn) insert and remove?"
                    },
                    {
                        "username": "codewhisperer__",
                        "content": "This is a fun question but I feel as though it should be Medium Difficulty because it just involves a sorted array search and that computation is of medium difficulty."
                    },
                    {
                        "username": "nathan_code",
                        "content": "Hi, Everyone. I saw a interview follow up for this question \"what if data can\\'t fit into memory\"\\nso how can we handle this?  something about Divide and Conquer?\\nMany Thanks"
                    }
                ]
            },
            {
                "id": 2062053,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 2062000,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 2054094,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 2016944,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 2001435,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1997090,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1990946,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1971601,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1937216,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1927984,
                "content": [
                    {
                        "username": "Vithesh",
                        "content": "this question is somewhere in between a medium and a hard problem. Beacuse the approach becomes so obvious once we think about max and min heaps.."
                    },
                    {
                        "username": "harshit_rathr3",
                        "content": " \\n`Why my code is not working giving TLE. The exact similar solution worked on other platform and also submitted by someone else in leetcode as well\\n`\\n\\ndef __init__(self):\\n        self.max_heap = []\\n        self.min_heap = []\\n        \\n    def addNum(self, num: int) -> None:\\n        if self.max_heap and self.max_heap[0]>num:\\n            self.max_heap.append(num)\\n            heapq._heapify_max(self.max_heap)\\n        else:\\n            heapq.heappush(self.min_heap, num)\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff>1:\\n            heapq.heappush(self.min_heap, heapq._heappop_max(self.max_heap))\\n        if diff<-1:\\n            self.max_heap.append(heapq.heappop(self.min_heap))\\n            heapq._heapify_max(self.max_heap)\\n        \\n\\n    def findMedian(self) -> float:\\n        diff = len(self.max_heap) - len(self.min_heap)\\n\\n        if diff==0:\\n            return (self.max_heap[0] + self.min_heap[0])/2\\n        elif diff>0:\\n            return self.max_heap[0]\\n        else:\\n            return self.min_heap[0]`\\n \\n"
                    },
                    {
                        "username": "thicktruyenche9",
                        "content": "i wonder if input number list get sorted ?"
                    },
                    {
                        "username": "khushmeetchugh",
                        "content": "Trying to do this question using quick select but still time limit exceeding in large data set (testcase 16)"
                    },
                    {
                        "username": "sid9812",
                        "content": "How do we approach the follow ups? "
                    },
                    {
                        "username": "Dhruv_Khanna123",
                        "content": "works using ordered map"
                    },
                    {
                        "username": "elizfitz",
                        "content": "I think there\\'s a bug on the testcases. It says I have passed them all, but also that I have a TLE. However, the last executed input is empty. "
                    },
                    {
                        "username": "wtfcoder",
                        "content": "Using multiset doesn\\'t give TLE \\uD83D\\uDC4D"
                    },
                    {
                        "username": "rakeshks7",
                        "content": "Should be medium tbh"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "What\\'s wrong with this approach?\\nI\\'m always balancing the 2 heaps, and maxHeap will have 1 extra number if at all sizes are different.\\n\\nMy code below is giving runtime error:\\nruntime error: reference binding to null pointer of type \\'const int\\' (stl_iterator.h)\\n\\n\\nclass MedianFinder {\\nprivate:\\n    priority_queue<int> maxHeap;\\n    priority_queue<int, vector<int>, greater<int>> minHeap;\\n\\npublic:\\n    MedianFinder() {\\n        \\n    }\\n    \\n    void addNum(int num) {\\n        if(maxHeap.size()==0) maxHeap.push(num);\\n        else if(maxHeap.size()==minHeap.size()){\\n            if(num<maxHeap.top()){\\n                maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                int temp = minHeap.top();\\n                minHeap.pop();\\n                maxHeap.push(temp);\\n                minHeap.push(num);\\n            }else{\\n                maxHeap.push(num);\\n            }\\n        }else{\\n            if(num<maxHeap.top()){\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n                // maxHeap.push(num);\\n            }else if(num>minHeap.top()){\\n                minHeap.push(num);\\n            }else{\\n                int temp = maxHeap.top();\\n                maxHeap.pop();\\n                minHeap.push(temp);\\n                maxHeap.push(num);\\n            }\\n        }\\n\\n    }\\n    \\n    double findMedian() {\\n        double ans;\\n        if(maxHeap.size()==minHeap.size()){\\n            ans = (maxHeap.top()+minHeap.top())/2;\\n        }else ans = maxHeap.top();\\n        return ans;\\n    }\\n};\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder* obj = new MedianFinder();\\n * obj->addNum(num);\\n * double param_2 = obj->findMedian();\\n */\\n"
                    },
                    {
                        "username": "NakulJaju",
                        "content": "[@codepiyush1](/codepiyush1) Hi I\\'ve written a code such that when the heap sizes are equal and an element comes I\\'ll balance the heaps such that the new element goes to the maxHeap always \\n"
                    },
                    {
                        "username": "codepiyush1",
                        "content": "Bro U r not checking the heap size.\\nOnly once u checked both heap equal or not.\\nelse if(maxHeap.size()==minHeap.size())\\n\\\\\\nNote: In Else condition.\\nthere may be the difference between both heap is more than one because u haven\\'t  check the heap size of both heap.\\n\\nCheck Out this solution\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/\\n\\nIf Understand Please Upvote."
                    }
                ]
            },
            {
                "id": 1926813,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1903481,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1834451,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1798020,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1783328,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1772254,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1762656,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1743495,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1712386,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            },
            {
                "id": 1682822,
                "content": [
                    {
                        "username": "codepiyush1",
                        "content": "We can use the concept of MaxHeap & MinHeap concept.\\nThe MaxHeap size is alwys greater than or equal to MinHeap size.\\nSo If the number of element is even then the MaxHeap store the first n/2 element and MinHeap store next n/2 element.\\n->For median Do the sum of top of (MaxHeap + MinHeap )/2.\\nIf the number of element is odd. then first (n/2 + 1) element is stored in the MaxHeap. the remaining is in the MinHeap.\\nFor Median return the MaxHeap top. because in case of number of odd elements. MaxHeap size is graeter then MinHeap size.\\nTime Complexity:\\nO(nLogn) In worst case Each time in heap insertion deletion take place.\\nSpace Complexity:\\nO(n) n/2 +n/2 heap used so total n size heap.\\n\\nPlease Upvote .If you understand the concept....\\nSolution link:\\nhttps://leetcode.com/problems/find-median-from-data-stream/solutions/3629630/c-undestand-the-concept/"
                    },
                    {
                        "username": "sspenst",
                        "content": "Not sure I understand why two heaps are supposed to be used here. My solution was to create an array and use binary search to find where to insert - addNum is always O(log(n)) and findMedian is always O(1). Most solutions I\\'ve seen use multiple heap pushes/pops within addNum, which means multiple O(log(n)) operations instead of just one."
                    },
                    {
                        "username": "kotian97",
                        "content": "When you insert new element (say \\'num\\') into your array after binary search, won\\'t you have to move all elements > num to one position right? This moving will have O(n) complexity"
                    },
                    {
                        "username": "Crispy_coffee",
                        "content": "itna wahiyaad question hai, mtlb itna hi jyada bisi 30 min pehle laga linkedlist ki approach se solution likhne me aur litteraly 4 hourse se jyada ho gya hai , still debugging for null pointer access, patani bisi kaha kaha se null aaye ja rha hai hr baar, hr ek test case me ek naya aaye ja rha hai, "
                    },
                    {
                        "username": "devashish2008",
                        "content": "/*\\n    Time: add : O(nlogn) find: O(1)\\n    Space: O(n)\\n    */\\n    \\nclass MedianFinder {\\n\\n    private PriorityQueue<Integer> smallHeap = new PriorityQueue<>((a,b) -> b.compareTo(a));\\n    private PriorityQueue<Integer> largeHeap = new PriorityQueue<>((a,b) -> a.compareTo(b));\\n\\n    public MedianFinder() {\\n\\n    }\\n    \\n    public void addNum(int num) {\\n        smallHeap.add(num);\\n        satisfy();\\n    }\\n\\n    private void satisfy(){\\n\\n        while(true){\\n            boolean touch = false;\\n\\n            if(smallHeap.size() > largeHeap.size() && smallHeap.size() - largeHeap.size() > 1) {\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(largeHeap.size() > smallHeap.size() && largeHeap.size() - smallHeap.size() > 1) {\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 && smallHeap.peek() > largeHeap.peek()){\\n                largeHeap.add(smallHeap.poll());\\n                touch = true;\\n            }\\n\\n            if(smallHeap.size() > 0 && largeHeap.size() > 0 &&  largeHeap.peek() < smallHeap.peek()){\\n                smallHeap.add(largeHeap.poll());\\n                touch = true;\\n            }    \\n            \\n            if (!touch){\\n                break;\\n            }\\n        }\\n        \\n    }\\n\\n    public double findMedian() {\\n        if(smallHeap.size() > largeHeap.size()){\\n            return smallHeap.peek();\\n        }\\n\\n        if(largeHeap.size() > smallHeap.size()){\\n            return largeHeap.peek();\\n        }\\n\\n        Double res = (Double.valueOf(smallHeap.peek()) + Double.valueOf(largeHeap.peek())) /2;\\n        return res;\\n    }\\n}\\n\\n/**\\n * Your MedianFinder object will be instantiated and called as such:\\n * MedianFinder obj = new MedianFinder();\\n * obj.addNum(num);\\n * double param_2 = obj.findMedian();\\n */"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    },
                    {
                        "username": "user3245tw",
                        "content": "# Dart 'package.collection' not available ? \n\nimport 'package:collection/collection.dart'; Throws an error"
                    },
                    {
                        "username": "user5248P",
                        "content": "The question doesn\\'t mention that the values inserted should be considered sorted"
                    },
                    {
                        "username": "nayandubey08",
                        "content": "The very first line of question stated this,have a look\\n\\n\"The median is the middle value in an ordered integer list.\"\\n"
                    },
                    {
                        "username": "karans92837",
                        "content": "How on earth is one supposed to come up with a min heap/max heap solution during an interview for this question? God have some mercy on the people who get asked this question during an interview!"
                    },
                    {
                        "username": "kzduy2507",
                        "content": "# Will this take up O(inf) space?\n\nWill this take up Infinite space for Data Stream because **the data in the data stream is infinite and non-stationary**? Can we remove the unused value in Large and Small heaps to save space?"
                    },
                    {
                        "username": "yongjunchai",
                        "content": "a little change to the solution of the second follow up question. \n\n# 1. If all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nWe can maintain an integer array of length 100 to store the count of each number along with a total count. Then, we can iterate over the array to find the middle value to get our median.\n\nTime and space complexity would be O(100) = O(1).\n\n# 2. If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?\n\nIn this case, we need an integer array of length 100 and two sored lists, one stores numbers less than 0, the other store numbers bigger than 100."
                    },
                    {
                        "username": "Shivamshrivaastava",
                        "content": "class MedianFinder {\\n    \\n    ArrayList<Integer> list;\\n\\n    public MedianFinder() {\\n        list = new ArrayList<>();\\n    }\\n    \\n    public void addNum(int num) {\\n        int i;\\n        if(list.size() > 0){\\n            for (i = 0; (i < list.size()  && list.get(i) < num); i++);\\n            if(i == -1){\\n                i = 0;\\n            }\\n            list.add(i , num);\\n        }else{\\n            list.add(num);\\n        }\\n    }\\n    \\n    public double findMedian() {\\n        // System.out.println(list);\\n        int index = list.size()/2;\\n        if(list.size() % 2 == 0){\\n            return (double) (list.get(index) + list.get(index - 1))/2;\\n        }else{\\n            return list.get(index);\\n        }\\n        \\n    }\\n}"
                    },
                    {
                        "username": "georgezakharov",
                        "content": "Great!\\nNow lets read the rules together.\\n\\n\\uD83D\\uDCA1 Discussion Rules\\n1. Please don\\'t post any solutions in this discussion.\\n\\n2. The problem discussion is for asking questions about the problem or for sharing tips - anything except for solutions.\\n\\n3. If you\\'d like to share your solution for feedback and ideas, please head to the solutions tab and post it there."
                    }
                ]
            }
        ]
    },
    {
        "title": "Longest Substring with At Least K Repeating Characters",
        "question_content": "<p>Given a string <code>s</code> and an integer <code>k</code>, return <em>the length of the longest substring of</em> <code>s</code> <em>such that the frequency of each character in this substring is greater than or equal to</em> <code>k</code>.</p>\n\n<p data-pm-slice=\"1 1 []\">if no such substring exists, return 0.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aaabb&quot;, k = 3\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> The longest substring is &quot;aaa&quot;, as &#39;a&#39; is repeated 3 times.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;ababbc&quot;, k = 2\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> The longest substring is &quot;ababb&quot;, as &#39;a&#39; is repeated 2 times and &#39;b&#39; is repeated 3 times.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>s</code> consists of only lowercase English letters.</li>\n\t<li><code>1 &lt;= k &lt;= 10<sup>5</sup></code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 87739,
                "title": "java-strict-o-n-two-pointer-solution",
                "content": "For each h, apply two pointer technique to find the longest substring with at least K repeating characters and the number of unique characters in substring is h. \\n```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        char[] str = s.toCharArray();\\n        int[] counts = new int[26];\\n        int h, i, j, idx, max = 0, unique, noLessThanK;\\n        \\n        for (h = 1; h <= 26; h++) {\\n            Arrays.fill(counts, 0);\\n            i = 0; \\n            j = 0;\\n            unique = 0;\\n            noLessThanK = 0;\\n            while (j < str.length) {\\n                if (unique <= h) {\\n                    idx = str[j] - 'a';\\n                    if (counts[idx] == 0)\\n                        unique++;\\n                    counts[idx]++;\\n                    if (counts[idx] == k)\\n                        noLessThanK++;\\n                    j++;\\n                }\\n                else {\\n                    idx = str[i] - 'a';\\n                    if (counts[idx] == k)\\n                        noLessThanK--;\\n                    counts[idx]--;\\n                    if (counts[idx] == 0)\\n                        unique--;\\n                    i++;\\n                }\\n                if (unique == h && unique == noLessThanK)\\n                    max = Math.max(j - i, max);\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n````",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        char[] str = s.toCharArray();\\n        int[] counts = new int[26];\\n        int h, i, j, idx, max = 0, unique, noLessThanK;\\n        \\n        for (h = 1; h <= 26; h++) {\\n            Arrays.fill(counts, 0);\\n            i = 0; \\n            j = 0;\\n            unique = 0;\\n            noLessThanK = 0;\\n            while (j < str.length) {\\n                if (unique <= h) {\\n                    idx = str[j] - 'a';\\n                    if (counts[idx] == 0)\\n                        unique++;\\n                    counts[idx]++;\\n                    if (counts[idx] == k)\\n                        noLessThanK++;\\n                    j++;\\n                }\\n                else {\\n                    idx = str[i] - 'a';\\n                    if (counts[idx] == k)\\n                        noLessThanK--;\\n                    counts[idx]--;\\n                    if (counts[idx] == 0)\\n                        unique--;\\n                    i++;\\n                }\\n                if (unique == h && unique == noLessThanK)\\n                    max = Math.max(j - i, max);\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87738,
                "title": "java-20-lines-very-easy-solution-7ms-with-explanation",
                "content": "```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0) return 0;\\n        char[] chars = new char[26];\\n        // record the frequency of each character\\n        for (int i = 0; i < s.length(); i += 1) chars[s.charAt(i) - 'a'] += 1;\\n        boolean flag = true;\\n        for (int i = 0; i < chars.length; i += 1) {\\n            if (chars[i] < k && chars[i] > 0) flag = false;\\n        }\\n        // return the length of string if this string is a valid string\\n        if (flag == true) return s.length();\\n        int result = 0;\\n        int start = 0, cur = 0;\\n        // otherwise we use all the infrequent elements as splits\\n        while (cur < s.length()) {\\n            if (chars[s.charAt(cur) - 'a'] < k) {\\n                result = Math.max(result, longestSubstring(s.substring(start, cur), k));\\n                start = cur + 1;\\n            }\\n            cur++;\\n        }\\n        result = Math.max(result, longestSubstring(s.substring(start), k));\\n        return result;\\n    }\\n}\\n```\\nIn each step, just find the infrequent elements (show less than k times) as splits since any of these infrequent elements couldn't be any part of the substring we want.",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0) return 0;\\n        char[] chars = new char[26];\\n        // record the frequency of each character\\n        for (int i = 0; i < s.length(); i += 1) chars[s.charAt(i) - 'a'] += 1;\\n        boolean flag = true;\\n        for (int i = 0; i < chars.length; i += 1) {\\n            if (chars[i] < k && chars[i] > 0) flag = false;\\n        }\\n        // return the length of string if this string is a valid string\\n        if (flag == true) return s.length();\\n        int result = 0;\\n        int start = 0, cur = 0;\\n        // otherwise we use all the infrequent elements as splits\\n        while (cur < s.length()) {\\n            if (chars[s.charAt(cur) - 'a'] < k) {\\n                result = Math.max(result, longestSubstring(s.substring(start, cur), k));\\n                start = cur + 1;\\n            }\\n            cur++;\\n        }\\n        result = Math.max(result, longestSubstring(s.substring(start), k));\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87768,
                "title": "4-lines-python",
                "content": "## Update:\\n\\nAs pointed out by @hayleyhu, I can just take the first too rare character instead of a rarest. Submitted once, accepted in 48 ms.\\n\\n    def longestSubstring(self, s, k):\\n        for c in set(s):\\n            if s.count(c) < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(c))\\n        return len(s)\\n\\n## Original:\\n\\n    def longestSubstring(self, s, k):\\n        if len(s) < k:\\n            return 0\\n        c = min(set(s), key=s.count)\\n        if s.count(c) >= k:\\n            return len(s)\\n        return max(self.longestSubstring(t, k) for t in s.split(c))\\n\\nIf every character appears at least k times, the whole string is ok. Otherwise split by a least frequent character (because it will always be too infrequent and thus can't be part of any ok substring) and make the most out of the splits.\\n\\nAs usual for Python here, the runtime varies a lot, this got accepted in times from 32 ms to 74 ms.",
                "solutionTags": [],
                "code": "## Update:\\n\\nAs pointed out by @hayleyhu, I can just take the first too rare character instead of a rarest. Submitted once, accepted in 48 ms.\\n\\n    def longestSubstring(self, s, k):\\n        for c in set(s):\\n            if s.count(c) < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(c))\\n        return len(s)\\n\\n## Original:\\n\\n    def longestSubstring(self, s, k):\\n        if len(s) < k:\\n            return 0\\n        c = min(set(s), key=s.count)\\n        if s.count(c) >= k:\\n            return len(s)\\n        return max(self.longestSubstring(t, k) for t in s.split(c))\\n\\nIf every character appears at least k times, the whole string is ok. Otherwise split by a least frequent character (because it will always be too infrequent and thus can't be part of any ok substring) and make the most out of the splits.\\n\\nAs usual for Python here, the runtime varies a lot, this got accepted in times from 32 ms to 74 ms.",
                "codeTag": "Python3"
            },
            {
                "id": 87736,
                "title": "c-recursive-solution",
                "content": "1. in the first pass I record counts of every character in a hashmap\\n2. in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.\\n3. keep doing this recursively and the maximum of the left/right part is the answer.\\n```\\n    int longestSubstring(string s, int k) {\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        \\n        unordered_map<char,int> Map;\\n        for(int i = 0; i < s.size(); i++){\\n            Map[s[i]]++;\\n        }\\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n        \\n        return max(left, right);\\n        \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    int longestSubstring(string s, int k) {\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        \\n        unordered_map<char,int> Map;\\n        for(int i = 0; i < s.size(); i++){\\n            Map[s[i]]++;\\n        }\\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n        \\n        return max(left, right);\\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 87741,
                "title": "java-divide-and-conquer-recursion-solution",
                "content": "```\\npublic int longestSubstring(String s, int k) {\\n\\tchar[] str = s.toCharArray();\\n\\treturn helper(str,0,s.length(),k);\\n}\\nprivate int helper(char[] str, int start, int end,  int k){\\n\\tif (end - start < k) return 0;//substring length shorter than k.\\n\\tint[] count = new int [26];\\n\\tfor (int i = start; i<end; i++) {\\n\\t\\tint idx = str[i] - \\'a\\';\\n\\t\\tcount[idx]++;\\n\\t}\\n\\tfor (int i=0; i<26; i++) {\\n\\t\\tif (count[i] < k && count[i] > 0) { //count[i]=0 => i+\\'a\\' does not exist in the string, skip it.\\n\\t\\t\\tfor (int j = start; j<end; j++) {\\n\\t\\t\\t\\tif (str[j] == i+\\'a\\') {\\n\\t\\t\\t\\t\\tint left = helper(str, start, j, k);\\n\\t\\t\\t\\t\\tint right = helper(str, j+1, end, k);\\n\\t\\t\\t\\t\\treturn Math.max(left, right);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn end - start;\\n}\\n\\t\\n```\\n\\t\\nEdit: Aother recursion solution. Similar idea.\\n\\t\\n\\tclass Solution {\\n\\t\\tpublic int longestSubstring(String s, int k) {\\n\\t\\t\\tint[] count = new int[26];\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\t\\tcount[s.charAt(i) - \\'a\\']++;\\n\\t\\t\\t}\\n\\t\\t\\tint start = 0;\\n\\t\\t\\tint i = 0;\\n\\t\\t\\tint maxLen = 0;\\n\\t\\t\\tboolean isContinuous = true;\\n\\t\\t\\twhile(i < n) {\\n\\t\\t\\t\\tif (count[s.charAt(i)-\\'a\\'] < k) {\\n\\t\\t\\t\\t\\tisContinuous = false;\\n\\t\\t\\t\\t\\tint subRes = longestSubstring(s.substring(start, i), k);\\n\\t\\t\\t\\t\\tmaxLen = Math.max(subRes, maxLen);\\n\\t\\t\\t\\t\\twhile (i < n && count[s.charAt(i) -\\'a\\'] < k) {\\n\\t\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tstart = i;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (isContinuous) {\\n\\t\\t\\t\\tmaxLen = i - start;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tmaxLen = Math.max(maxLen, longestSubstring(s.substring(start, i), k));\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn maxLen;\\n\\t\\t}\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int longestSubstring(String s, int k) {\\n\\tchar[] str = s.toCharArray();\\n\\treturn helper(str,0,s.length(),k);\\n}\\nprivate int helper(char[] str, int start, int end,  int k){\\n\\tif (end - start < k) return 0;//substring length shorter than k.\\n\\tint[] count = new int [26];\\n\\tfor (int i = start; i<end; i++) {\\n\\t\\tint idx = str[i] - \\'a\\';\\n\\t\\tcount[idx]++;\\n\\t}\\n\\tfor (int i=0; i<26; i++) {\\n\\t\\tif (count[i] < k && count[i] > 0) { //count[i]=0 => i+\\'a\\' does not exist in the string, skip it.\\n\\t\\t\\tfor (int j = start; j<end; j++) {\\n\\t\\t\\t\\tif (str[j] == i+\\'a\\') {\\n\\t\\t\\t\\t\\tint left = helper(str, start, j, k);\\n\\t\\t\\t\\t\\tint right = helper(str, j+1, end, k);\\n\\t\\t\\t\\t\\treturn Math.max(left, right);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn end - start;\\n}\\n\\t\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 949531,
                "title": "error-in-description-fixed",
                "content": "According to the description, the frequency of each character in the substring must be **less than or equal to k** ```(<=k)``` which seems to be the opposite of the expected result. Shouldn\\'t it be **greater than or equal to k** ```(>=k)``` instead?\\nP.S. They fixed that, hooray :)",
                "solutionTags": [],
                "code": "```(<=k)```\n```(>=k)```",
                "codeTag": "Unknown"
            },
            {
                "id": 170010,
                "title": "java-o-n-solution-with-detailed-explanation-sliding-window",
                "content": "Same Idea as: https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87739/Java-Strict-O(N)-Two-Pointer-Solution but didn\\'t really see a complete explanation.\\n\\nBasically iterate through the number of possible unique letters 1 to 26. Lets call our target amount of unique letters **u**. We search all windows of letters where the number of unique letters <= u. This is the number of any unique letters, not the number of unique letters that occur k or more times.\\nWe count the number of current unique letters, and the number of letters that have a count of k or more using a sliding window.  \\n\\n**We expand, if our number of unique letters is less than or equal to u**, we need to add a letter, so we increment the right pointer, and add the count of the right letter by 1. If the count is equal to 1 we know this is a new letter so we increment unique, and if it is equal to k we increment k or more since it just became k or more.  Note that the reason we choose this route if it\\'s equal is that **we need to keep expanding the letters if its at the target u** because we can still have a chance at getting more kOrMore letters and u==unique.  For example, aaabb if we stop at \"a\"  since unique == u (1=1) we won\\'t ever get to \"aaa\" which is the answer.\\n\\n**We shorten, if our number of unique letters is more than u** , we need to remove a letter, so we decrement the left pointer, and decrease the count of the left letter by 1.  If the count is equal to 0 we decrement the number of unique letters since all instances of this letter are gone, if it\\'s equal to k-1 it is now not k or more so we decrement kOrMore.\\n\\n**This interval is a valid candidate if the number of unique letters is u and all the unique letters have kOrMore counts** (unique==kOrMore). So we take the maximum of valid candidates.\\n\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int [] counts = new int[26];\\n        int max = 0;\\n        for(int u=1; u<=26;++u){\\n            Arrays.fill(counts,0);\\n            int left = 0;\\n            int right = 0;\\n            int unique=0;\\n            int kOrMore = 0;\\n            while(right<s.length()){\\n                if(unique<=u){\\n                    char c = s.charAt(right);\\n                    int idx = (int)c-(int)\\'a\\';\\n                    counts[idx]++;\\n                    if(counts[idx]==1){\\n                        ++unique;\\n                    }\\n                    if(counts[idx]==k){\\n                        ++kOrMore;\\n                    }\\n                    ++right;\\n                }\\n                else{\\n                    char o = s.charAt(left);\\n                    int idx = (int)o-(int)\\'a\\';\\n                    counts[idx]--;\\n                    if(counts[idx]==0){\\n                        --unique;\\n                    }\\n                    if(counts[idx]==k-1){\\n                        --kOrMore;\\n                    }\\n                    ++left;\\n                }\\n                if(unique==u && kOrMore==unique){\\n                    max=Math.max(max,right-left);\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int [] counts = new int[26];\\n        int max = 0;\\n        for(int u=1; u<=26;++u){\\n            Arrays.fill(counts,0);\\n            int left = 0;\\n            int right = 0;\\n            int unique=0;\\n            int kOrMore = 0;\\n            while(right<s.length()){\\n                if(unique<=u){\\n                    char c = s.charAt(right);\\n                    int idx = (int)c-(int)\\'a\\';\\n                    counts[idx]++;\\n                    if(counts[idx]==1){\\n                        ++unique;\\n                    }\\n                    if(counts[idx]==k){\\n                        ++kOrMore;\\n                    }\\n                    ++right;\\n                }\\n                else{\\n                    char o = s.charAt(left);\\n                    int idx = (int)o-(int)\\'a\\';\\n                    counts[idx]--;\\n                    if(counts[idx]==0){\\n                        --unique;\\n                    }\\n                    if(counts[idx]==k-1){\\n                        --kOrMore;\\n                    }\\n                    ++left;\\n                }\\n                if(unique==u && kOrMore==unique){\\n                    max=Math.max(max,right-left);\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949552,
                "title": "python-sliding-window-solution-explained",
                "content": "First of all, be careful with this problem formulation: Given a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring <del>**is less than or equal to k** </del>: this is not correct statement, what you actually asked is **is more than or equal to k**. I spend some time figuring it out.\\n\\nNow, we will use sliding window approach to find the window of biggest length. However, it is not that easy. Imagine, that we have `s = aabbb...` and `k = 3`, what should we do when we reached window `aabbb`: should we expand it to the right hoping that we will meet another `a`? Or should we start to move left side of our window? One way to handle this problem is to do several sliding windows passes, where we fix `T` number of different symbols we must have in our substring. So, we check all posible `T = 1, ... 26` (if fact, not 26, but `len(Counter(s)) + 1)`) and do sliding window pass:\\n\\n1. Initialize `beg = 0`, `end = 0`, `Found = 0`: number of elements with frequency more or equal than `k`,  `freq` is array of frequencies `= [0]*26` and `MoreEqK = 0`, which count number of non-zero frequencies in our `freq` array.\\n2. Now, we check if `MoreEqK <=T` or not, that is we have `T` or less different symbols in our window: then we can add element to to right part of our sliding window: we increase its frequency, if this symbol is new, that is frequency become equal to `1`, we increment `MoreEqK`. Also, if frequency become equal to `k`, we increment `Found`.\\n3. In opposite case it means, that we already have `T+1` or more different symbols in or window, so we need to move left side of our sliding window. Again, we check if frequency was equal to `k` and if it was, we decrease `Found` by one, if frequency become equal to zero, we decrease `MoreEqK`.\\n4. Finally, if we have exactly `T` non-zero frequencies and all `T` of them more or equal than `k`, we update our `result`.\\n\\n**Complexity**: time complexity is `O(26n)`, because we can potentially have `26` passes over our data. Space complexity is `O(26)`. Yes, I understand, that `O(26n) = O(n)`, but here I want to stress that constant is quite big.\\n\\n```\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        result = 0\\n        for T in range(1, len(Counter(s))+1):\\n            beg, end, Found, freq, MoreEqK = 0, 0, 0, [0]*26, 0\\n            while end < len(s):\\n                if MoreEqK <= T:\\n                    s_new = ord(s[end]) - 97\\n                    freq[s_new] += 1\\n                    if freq[s_new] == 1:\\n                        MoreEqK += 1\\n                    if freq[s_new] == k:\\n                        Found += 1\\n                    end += 1\\n                else:\\n                    symb = ord(s[beg]) - 97\\n                    beg += 1\\n                    if freq[symb] == k:\\n                        Found -= 1\\n                    freq[symb] -= 1\\n                    if freq[symb] == 0:\\n                        MoreEqK -= 1\\n                            \\n                if MoreEqK == T and Found == T:\\n                    result = max(result, end - beg)\\n                    \\n        return result\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        result = 0\\n        for T in range(1, len(Counter(s))+1):\\n            beg, end, Found, freq, MoreEqK = 0, 0, 0, [0]*26, 0\\n            while end < len(s):\\n                if MoreEqK <= T:\\n                    s_new = ord(s[end]) - 97\\n                    freq[s_new] += 1\\n                    if freq[s_new] == 1:\\n                        MoreEqK += 1\\n                    if freq[s_new] == k:\\n                        Found += 1\\n                    end += 1\\n                else:\\n                    symb = ord(s[beg]) - 97\\n                    beg += 1\\n                    if freq[symb] == k:\\n                        Found -= 1\\n                    freq[symb] -= 1\\n                    if freq[symb] == 0:\\n                        MoreEqK -= 1\\n                            \\n                if MoreEqK == T and Found == T:\\n                    result = max(result, end - beg)\\n                    \\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1139114,
                "title": "c-super-easy-solution-100-faster-explanation-with-example",
                "content": "**Intution :**  Break the string into two  parts when a character with count less than k is found . Recursively check for longest substring for both part. 1 . String before breaking Point and  2. String after breaking point. \\n\\n\\n**Example : s  = aababcaabb  k = 2**\\n**Count of a = 5 , b = 4 , c = 1**\\n\\n```\\n//Count of c is less than k so break in two parts :\\n//Part before breaking point\\nl1 = longestSubstring(\"aabab\", 2);\\n//And part after breaking point\\nl2 = longestSubstring(\"aabb\",2)\\n```\\n\\n**l1 will be 5 and l2 will be 4 so answer will be 5**\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n\\t\\t\\n\\t\\t// if length of string is 0 or it is less than k then there will no longest substring so we will return 0.\\n        if(n == 0 or n < k) return 0;\\n\\t\\t\\n\\t\\t//k ==1 means that all the characters will be unique so we will return entire length.\\n        if(k <= 1) return n;\\n\\t\\t\\n\\t\\t//count map to store count of characters\\n        unordered_map<char,int> countMap;\\n        for(char c : s) countMap[c]++;\\n       \\n        int left =0;\\n\\t\\t\\n\\t\\t//We will increment left till the count of character is greater than k and left is less than string length\\n\\t\\t//if left >=n means all characters have count greater than k  so we will return left\\n        while(left < n && countMap[s[left]] >= k) left++;\\n        if(left >= n-1) return left;\\n\\t\\t\\n\\t\\t//We will break into two parts   , part before breaking and part after breaking point.\\n        int l1 = longestSubstring(s.substr(0,left) ,k);\\n        \\n\\t\\t// to check if more continious characters are having count less than k \\n        while(left < n && countMap[s[left]] < k) left++;\\n        \\n\\t\\t// to check for longest Substring in part after left\\n        int l2 = left < n ? longestSubstring(s.substr(left),k) : 0;\\n        \\n\\t\\t//return max of l1 and l2\\n        return max(l1,l2);\\n    }\\n};\\n\\n```\\n\\n\\n**Incase of doubt feel free to comment.**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\n//Count of c is less than k so break in two parts :\\n//Part before breaking point\\nl1 = longestSubstring(\"aabab\", 2);\\n//And part after breaking point\\nl2 = longestSubstring(\"aabb\",2)\\n```\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n\\t\\t\\n\\t\\t// if length of string is 0 or it is less than k then there will no longest substring so we will return 0.\\n        if(n == 0 or n < k) return 0;\\n\\t\\t\\n\\t\\t//k ==1 means that all the characters will be unique so we will return entire length.\\n        if(k <= 1) return n;\\n\\t\\t\\n\\t\\t//count map to store count of characters\\n        unordered_map<char,int> countMap;\\n        for(char c : s) countMap[c]++;\\n       \\n        int left =0;\\n\\t\\t\\n\\t\\t//We will increment left till the count of character is greater than k and left is less than string length\\n\\t\\t//if left >=n means all characters have count greater than k  so we will return left\\n        while(left < n && countMap[s[left]] >= k) left++;\\n        if(left >= n-1) return left;\\n\\t\\t\\n\\t\\t//We will break into two parts   , part before breaking and part after breaking point.\\n        int l1 = longestSubstring(s.substr(0,left) ,k);\\n        \\n\\t\\t// to check if more continious characters are having count less than k \\n        while(left < n && countMap[s[left]] < k) left++;\\n        \\n\\t\\t// to check for longest Substring in part after left\\n        int l2 = left < n ? longestSubstring(s.substr(left),k) : 0;\\n        \\n\\t\\t//return max of l1 and l2\\n        return max(l1,l2);\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949688,
                "title": "python-short-simple-recursive-solution",
                "content": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if len(s) == 0 or k > len(s):\\n            return 0\\n        c = Counter(s)\\n        sub1, sub2 = \"\", \"\"\\n        for i, letter in enumerate(s):\\n            if c[letter] < k:\\n                sub1 = self.longestSubstring(s[:i], k)\\n                sub2 = self.longestSubstring(s[i+1:], k)\\n                break\\n        else:\\n            return len(s)\\n        return max(sub1, sub2)\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if len(s) == 0 or k > len(s):\\n            return 0\\n        c = Counter(s)\\n        sub1, sub2 = \"\", \"\"\\n        for i, letter in enumerate(s):\\n            if c[letter] < k:\\n                sub1 = self.longestSubstring(s[:i], k)\\n                sub2 = self.longestSubstring(s[i+1:], k)\\n                break\\n        else:\\n            return len(s)\\n        return max(sub1, sub2)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87749,
                "title": "two-short-c-solutions-3ms-and-6ms",
                "content": "**Sol1:** a simple improvement on the naive quaratic solution. The idea is that if a locally longest substr is found, there's no need to check substrs overlapping it.\\nSol1 can run O(n) times in some cases, but worst case is O(n2). Anyway the C++ run time is 3ms.\\n\\n```\\nint longestSubstring(string s, int k) {\\n   int max_len = 0;\\n   for (int first = 0; first+k <= s.size();) {\\n       int count[26] = {0};\\n       int mask = 0;\\n       int max_last = first;\\n       for (int last = first; last < s.size(); ++last) {\\n           int i = s[last] - 'a';\\n           count[i]++;\\n           if (count[i]<k) mask |= (1 << i);\\n           else   mask &= (~(1 << i));\\n           \\n           if (mask == 0) {\\n               max_len = max(max_len, last-first+1);\\n               max_last = last;\\n           }\\n       }\\n       first = max_last + 1;\\n   }\\n   return max_len;\\n}\\n```\\n\\n**Sol2:** recursive: split the string into substrs by characters of occurrence less than k. Then recursively apply the problem to each substr.\\nWorst case of Sol2 is O(n), because there are at most 26 levels of recursions. The C++ impl. runs 6ms. I suspect this is because the current test cases does not cover enough cases  in favor of this solution in run time. \\n```\\nint longestSubstring(string s, int k) {\\n    return longestSubstring_recur(s, k, 0, s.size());\\n}\\n\\nint longestSubstring_recur(const string& s, int k, int first, int last) {\\n    int count[26] = {0};\\n    for (int j = first; j < last; ++j) ++count[s[j] - 'a'];\\n    \\n    int max_len = 0;\\n    for (int j = first; j < last;) {\\n        while (j < last && count[s[j]-'a']<k) ++j;\\n        if (j == last) break;\\n        int l = j;\\n        while (l < last && count[s[l]-'a']>=k) ++l;\\n        //all chars appear more than k times\\n        if (j == first && l == last) return last-first; \\n        max_len = max(max_len, longestSubstring_recur(s, k, j, l));\\n        j = l;\\n    }\\n    return max_len;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint longestSubstring(string s, int k) {\\n   int max_len = 0;\\n   for (int first = 0; first+k <= s.size();) {\\n       int count[26] = {0};\\n       int mask = 0;\\n       int max_last = first;\\n       for (int last = first; last < s.size(); ++last) {\\n           int i = s[last] - 'a';\\n           count[i]++;\\n           if (count[i]<k) mask |= (1 << i);\\n           else   mask &= (~(1 << i));\\n           \\n           if (mask == 0) {\\n               max_len = max(max_len, last-first+1);\\n               max_last = last;\\n           }\\n       }\\n       first = max_last + 1;\\n   }\\n   return max_len;\\n}\\n```\n```\\nint longestSubstring(string s, int k) {\\n    return longestSubstring_recur(s, k, 0, s.size());\\n}\\n\\nint longestSubstring_recur(const string& s, int k, int first, int last) {\\n    int count[26] = {0};\\n    for (int j = first; j < last; ++j) ++count[s[j] - 'a'];\\n    \\n    int max_len = 0;\\n    for (int j = first; j < last;) {\\n        while (j < last && count[s[j]-'a']<k) ++j;\\n        if (j == last) break;\\n        int l = j;\\n        while (l < last && count[s[l]-'a']>=k) ++l;\\n        //all chars appear more than k times\\n        if (j == first && l == last) return last-first; \\n        max_len = max(max_len, longestSubstring_recur(s, k, j, l));\\n        j = l;\\n    }\\n    return max_len;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 139609,
                "title": "python-iterative-and-recursive-solution",
                "content": "```\\n# recursive\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        if len(s) < k:\\n            return 0\\n        for c in set(s):\\n            if s.count(c) < k:\\n                return max(self.longestSubstring(z, k) for z in s.split(c))\\n        return len(s)\\n\\n# iterative\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        stack = []\\n        stack.append(s)\\n        ans = 0\\n        while stack:\\n            s = stack.pop()\\n            for c in set(s):\\n                if s.count(c) < k:\\n                    stack.extend([z for z in s.split(c)])\\n                    break\\n            else:\\n                ans = max(ans, len(s))\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\n# recursive\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        if len(s) < k:\\n            return 0\\n        for c in set(s):\\n            if s.count(c) < k:\\n                return max(self.longestSubstring(z, k) for z in s.split(c))\\n        return len(s)\\n\\n# iterative\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        stack = []\\n        stack.append(s)\\n        ans = 0\\n        while stack:\\n            s = stack.pop()\\n            for c in set(s):\\n                if s.count(c) < k:\\n                    stack.extend([z for z in s.split(c)])\\n                    break\\n            else:\\n                ans = max(ans, len(s))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87742,
                "title": "c-o-n-divide-and-conquer",
                "content": "In every step of DC, at least 1 character, let's say, 'a', is chosen to divide the string, then all substrings in following recursive calls have no 'a'. The level of DC is at most 26, otherwise you run out of character to divide, and each level is O(n).  The run time is 3 ms.\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        return helper(s, 0, n-1, k);\\n    }\\nprivate:\\n    // looking for longest string within index range [l, r]\\n    int helper(string& s, int l, int r, int k) {\\n        vector<int> mp(26, 0);\\n        for (int i = l; i <= r; i++) mp[s[i]-'a']++;\\n       // check whether the whole string meets requirement\\n        bool pass = true;\\n        for (int i = 0; i < 26 && pass; i++) {\\n            if (mp[i] && mp[i] < k)\\n                pass = false;\\n        }\\n        if (pass) return r-l+1;\\n        // using all characters with occurrence > 0 && < k to divide the string\\n        int i = l, ans = 0;\\n        for (int j = l; j <= r; j++) {\\n            if (mp[s[j]-'a'] && mp[s[j]-'a'] < k) {\\n                ans = max(ans, helper(s, i, j-1, k));\\n                i = j+1;\\n            }\\n        }\\n        return max(ans, helper(s, i, r, k));\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        return helper(s, 0, n-1, k);\\n    }\\nprivate:\\n    // looking for longest string within index range [l, r]\\n    int helper(string& s, int l, int r, int k) {\\n        vector<int> mp(26, 0);\\n        for (int i = l; i <= r; i++) mp[s[i]-'a']++;\\n       // check whether the whole string meets requirement\\n        bool pass = true;\\n        for (int i = 0; i < 26 && pass; i++) {\\n            if (mp[i] && mp[i] < k)\\n                pass = false;\\n        }\\n        if (pass) return r-l+1;\\n        // using all characters with occurrence > 0 && < k to divide the string\\n        int i = l, ans = 0;\\n        for (int j = l; j <= r; j++) {\\n            if (mp[s[j]-'a'] && mp[s[j]-'a'] < k) {\\n                ans = max(ans, helper(s, i, j-1, k));\\n                i = j+1;\\n            }\\n        }\\n        return max(ans, helper(s, i, r, k));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87761,
                "title": "java-d-c-solution",
                "content": "The idea is pretty basic, find the point where we should split the string, eg, the position of character which total count is <k, then dfs it then find the max.\\nFor Example: bbcddefegaghfh and 2, so we shall dfs on \"bb\", \"ddefeg\", \"ghfh\", since a , c only appears1 for once.\\n\\n ```java\\npublic int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0 || k == 0) return 0;\\n        int max = 0;\\n        int[] count = new int[26];\\n        int res = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            count[s.charAt(i) - 'a']++;\\n        }\\n        List<Integer> pos = new ArrayList<Integer>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (count[s.charAt(i) - 'a'] < k) pos.add(i);\\n        }\\n        if (pos.size() == 0) return s.length();\\n        pos.add(0, -1);\\n        pos.add(s.length());\\n        for (int i = 1; i < pos.size(); i++) {\\n            int start = pos.get(i-1) + 1;\\n            int end = pos.get(i);\\n            int next = longestSubstring(s.substring(start, end), k);\\n            res = Math.max(res, next);\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```java\\npublic int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0 || k == 0) return 0;\\n        int max = 0;\\n        int[] count = new int[26];\\n        int res = 0;\\n        for (int i = 0; i < s.length(); i++) {\\n            count[s.charAt(i) - 'a']++;\\n        }\\n        List<Integer> pos = new ArrayList<Integer>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (count[s.charAt(i) - 'a'] < k) pos.add(i);\\n        }\\n        if (pos.size() == 0) return s.length();\\n        pos.add(0, -1);\\n        pos.add(s.length());\\n        for (int i = 1; i < pos.size(); i++) {\\n            int start = pos.get(i-1) + 1;\\n            int end = pos.get(i);\\n            int next = longestSubstring(s.substring(start, end), k);\\n            res = Math.max(res, next);\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 403337,
                "title": "summary-of-3-approaches-from-brute-force-to-optimal",
                "content": "In the comment below,  substring **T** =  a substring with each unique letter appearing at least k times\\n\\n```\\n// Solution 1: O(n^2) brute force\\n// time O(n^2)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n        \\n        int[] map = new int[26]; // letter -> freq\\n        int n = s.length();\\n        int max = 0; // length of longest substring T so far\\n        for (int i = 0; i < n; i++) {\\n            Arrays.fill(map, 0);\\n            for (int j = i; j < n; j++) {\\n                map[s.charAt(j) - \\'a\\']++;                \\n                if (isValid(s, i, j, k, map)) {\\n                    max = Math.max(max, j - i + 1);\\n                }\\n            }\\n        }\\n        \\n        return max;\\n    }\\n    \\n    // return true if each distinct character in the substring s[left..right] appear >= k times\\n    private boolean isValid(String s, int left, int right, int k, int[] map) {\\n        int numLetters = 0; // number of distinct letters\\n        int numLettersAtLeastK = 0;\\n        for (int num : map) {\\n            if (num > 0) {\\n                numLetters++;\\n            }\\n            \\n            if (num >= k) {\\n                numLettersAtLeastK++;\\n            }\\n        }\\n        \\n        return numLettersAtLeastK == numLetters;\\n    }\\n}\\n```\\n\\n\\n```java\\n// Solution 2: O(n) brute force\\n// Instead of looping over all possible substrings, which takes O(n^2), we can loop over all possible number of unique letters in substring, from 1 to 26.\\n// time O(n)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n\\n        int max = 0; // length of longest substring T\\n        for (int numUniqueTarget = 1; numUniqueTarget <= 26; numUniqueTarget++) {    // numUniqueTarget = target number of unique letters in substring T\\n            max = Math.max(max, longestSubstringWithTargetUniqueLetters(s, k, numUniqueTarget));\\n        }\\n\\n        return max;\\n    }\\n\\n    // return the length of longest substring T with target number of unique letters\\n    private int longestSubstringWithTargetUniqueLetters(String s, int k, int numUniqueTarget) {\\n        int[] map = new int[26]; // letter -> freq\\n        int numUnique = 0;   // # of unique letters\\n        int numAtLeastK = 0; // # of unique letters with occurrence >= k\\n        int max = 0; // length of longest substring T with target number of unique letters\\n\\n        // slding window\\n        // if numUnique <= numUniqueTarget, expand right end, update numUnique & numAtLeastK\\n        // if numUnique > numUniqueTarget, shrink left end\\n        int left = 0;\\n        for (int right = 0; right < s.length(); right++) {\\n            char rChar = s.charAt(right); // new rightmost char\\n            if (map[rChar - \\'a\\'] == 0) {\\n                numUnique++;\\n            }\\n            map[rChar - \\'a\\']++;\\n            if (map[rChar - \\'a\\'] == k) {\\n                numAtLeastK++;\\n            }\\n\\n            while (numUnique > numUniqueTarget) {\\n                char lChar = s.charAt(left); // leftmost char in current window\\n                left++;\\n                if (map[lChar - \\'a\\'] == 1) {\\n                    numUnique--;\\n                }\\n                if (map[lChar - \\'a\\'] == k) {\\n                    numAtLeastK--;\\n                }\\n                map[lChar - \\'a\\']--;\\n            }\\n\\n            // now numUnique <= numUniqueTarget\\n            if (numUnique == numUniqueTarget && numUnique == numAtLeastK) {\\n                max = Math.max(max, right - left + 1);\\n            }\\n        }\\n\\n        return max;\\n    }\\n}\\n```\\n\\n\\n```\\n// Solution 3: divide and conquer\\n// If we count the occurrence of each unique letters in s, then each infrequent letter (letter with occurrence < k) can\\'t be included in any substring T.\\n// i.e. each infrequent letter is like a delimiter that splits s into several substrings; and within each substring,\\n// we want to find the longest substring T, which a subproblem of original problem, so we can use divide and conquer\\n\\n// complexity analysis\\n// In worst case, we would have at least one delimiter character at each level of divide and conquer.\\n// Suppose the delimiter at 1st level is letter \\'a\\', then all substrings in the rest of recursive calls will not have \\'a\\'\\n// So the max level of divide and conquer is 26, otherwise we run out of character to divide.\\n// each level of divide and conquer costs O(n) time and O(1) space\\n// time O(n)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n\\n        return longestSubstring(s, 0, s.length() - 1, k);\\n    }\\n\\n    // return the length of longest substring T in the range s[start..end]\\n    private int longestSubstring(String s, int start, int end, int k) {\\n        if (end - start + 1 < k) {\\n            return 0; // length of substring s[start..end] is less than k\\n        }\\n\\n        int[] map = new int[26]; // letter -> freq\\n        for (int i = start; i <= end; i++) {\\n            map[s.charAt(i) - \\'a\\']++;\\n        }\\n\\n        Set<Character> delimiters = new HashSet<>(); // set of infrequent letters\\n        for (int i = start; i <= end; i++) {\\n            char ch = s.charAt(i);\\n            if (0 < map[ch - \\'a\\'] && map[ch - \\'a\\'] < k) { // map[ch - \\'a\\'] = 0 means this letter doesn\\'t appear in current substring\\n                delimiters.add(ch);\\n            }\\n        }\\n\\n        if (delimiters.isEmpty()) {\\n            return end - start + 1; // there\\'s no infrequent letters in current substring\\n        }\\n\\n        // split current substring at each delimiter\\n        int max = 0;      // length of longest substring T in the range s[start..end]\\n        int left = start; // left end of splitted substring\\n        for (int right = start; right <= end; right++) {\\n            if (delimiters.contains(s.charAt(right))) {\\n                max = Math.max(max, longestSubstring(s, left, right - 1, k));\\n                left = right + 1;\\n            }\\n        }\\n\\n        // Don\\'t forget the last splitted substring after the last delimiter\\n        max = Math.max(max, longestSubstring(s, left, end, k));\\n        return max;\\n    }\\n}\\n```\\n\\nReference\\nhttps://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87739/Java-Strict-O(N)-Two-Pointer-Solution\\nhttps://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87741/Java-divide-and-conquer(recursion)-solution\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n// Solution 1: O(n^2) brute force\\n// time O(n^2)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n        \\n        int[] map = new int[26]; // letter -> freq\\n        int n = s.length();\\n        int max = 0; // length of longest substring T so far\\n        for (int i = 0; i < n; i++) {\\n            Arrays.fill(map, 0);\\n            for (int j = i; j < n; j++) {\\n                map[s.charAt(j) - \\'a\\']++;                \\n                if (isValid(s, i, j, k, map)) {\\n                    max = Math.max(max, j - i + 1);\\n                }\\n            }\\n        }\\n        \\n        return max;\\n    }\\n    \\n    // return true if each distinct character in the substring s[left..right] appear >= k times\\n    private boolean isValid(String s, int left, int right, int k, int[] map) {\\n        int numLetters = 0; // number of distinct letters\\n        int numLettersAtLeastK = 0;\\n        for (int num : map) {\\n            if (num > 0) {\\n                numLetters++;\\n            }\\n            \\n            if (num >= k) {\\n                numLettersAtLeastK++;\\n            }\\n        }\\n        \\n        return numLettersAtLeastK == numLetters;\\n    }\\n}\\n```\n```java\\n// Solution 2: O(n) brute force\\n// Instead of looping over all possible substrings, which takes O(n^2), we can loop over all possible number of unique letters in substring, from 1 to 26.\\n// time O(n)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n\\n        int max = 0; // length of longest substring T\\n        for (int numUniqueTarget = 1; numUniqueTarget <= 26; numUniqueTarget++) {    // numUniqueTarget = target number of unique letters in substring T\\n            max = Math.max(max, longestSubstringWithTargetUniqueLetters(s, k, numUniqueTarget));\\n        }\\n\\n        return max;\\n    }\\n\\n    // return the length of longest substring T with target number of unique letters\\n    private int longestSubstringWithTargetUniqueLetters(String s, int k, int numUniqueTarget) {\\n        int[] map = new int[26]; // letter -> freq\\n        int numUnique = 0;   // # of unique letters\\n        int numAtLeastK = 0; // # of unique letters with occurrence >= k\\n        int max = 0; // length of longest substring T with target number of unique letters\\n\\n        // slding window\\n        // if numUnique <= numUniqueTarget, expand right end, update numUnique & numAtLeastK\\n        // if numUnique > numUniqueTarget, shrink left end\\n        int left = 0;\\n        for (int right = 0; right < s.length(); right++) {\\n            char rChar = s.charAt(right); // new rightmost char\\n            if (map[rChar - \\'a\\'] == 0) {\\n                numUnique++;\\n            }\\n            map[rChar - \\'a\\']++;\\n            if (map[rChar - \\'a\\'] == k) {\\n                numAtLeastK++;\\n            }\\n\\n            while (numUnique > numUniqueTarget) {\\n                char lChar = s.charAt(left); // leftmost char in current window\\n                left++;\\n                if (map[lChar - \\'a\\'] == 1) {\\n                    numUnique--;\\n                }\\n                if (map[lChar - \\'a\\'] == k) {\\n                    numAtLeastK--;\\n                }\\n                map[lChar - \\'a\\']--;\\n            }\\n\\n            // now numUnique <= numUniqueTarget\\n            if (numUnique == numUniqueTarget && numUnique == numAtLeastK) {\\n                max = Math.max(max, right - left + 1);\\n            }\\n        }\\n\\n        return max;\\n    }\\n}\\n```\n```\\n// Solution 3: divide and conquer\\n// If we count the occurrence of each unique letters in s, then each infrequent letter (letter with occurrence < k) can\\'t be included in any substring T.\\n// i.e. each infrequent letter is like a delimiter that splits s into several substrings; and within each substring,\\n// we want to find the longest substring T, which a subproblem of original problem, so we can use divide and conquer\\n\\n// complexity analysis\\n// In worst case, we would have at least one delimiter character at each level of divide and conquer.\\n// Suppose the delimiter at 1st level is letter \\'a\\', then all substrings in the rest of recursive calls will not have \\'a\\'\\n// So the max level of divide and conquer is 26, otherwise we run out of character to divide.\\n// each level of divide and conquer costs O(n) time and O(1) space\\n// time O(n)\\n// space O(1)\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.isEmpty() || k > s.length()) {\\n            return 0;\\n        }\\n\\n        return longestSubstring(s, 0, s.length() - 1, k);\\n    }\\n\\n    // return the length of longest substring T in the range s[start..end]\\n    private int longestSubstring(String s, int start, int end, int k) {\\n        if (end - start + 1 < k) {\\n            return 0; // length of substring s[start..end] is less than k\\n        }\\n\\n        int[] map = new int[26]; // letter -> freq\\n        for (int i = start; i <= end; i++) {\\n            map[s.charAt(i) - \\'a\\']++;\\n        }\\n\\n        Set<Character> delimiters = new HashSet<>(); // set of infrequent letters\\n        for (int i = start; i <= end; i++) {\\n            char ch = s.charAt(i);\\n            if (0 < map[ch - \\'a\\'] && map[ch - \\'a\\'] < k) { // map[ch - \\'a\\'] = 0 means this letter doesn\\'t appear in current substring\\n                delimiters.add(ch);\\n            }\\n        }\\n\\n        if (delimiters.isEmpty()) {\\n            return end - start + 1; // there\\'s no infrequent letters in current substring\\n        }\\n\\n        // split current substring at each delimiter\\n        int max = 0;      // length of longest substring T in the range s[start..end]\\n        int left = start; // left end of splitted substring\\n        for (int right = start; right <= end; right++) {\\n            if (delimiters.contains(s.charAt(right))) {\\n                max = Math.max(max, longestSubstring(s, left, right - 1, k));\\n                left = right + 1;\\n            }\\n        }\\n\\n        // Don\\'t forget the last splitted substring after the last delimiter\\n        max = Math.max(max, longestSubstring(s, left, end, k));\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 722300,
                "title": "c-o-n-sliding-window-explanation-with-approach",
                "content": "Steps to approach this problem : \\nFirst select the number of unique elements which should constitute the answer substring.\\nthey can be [1, 26]\\nNow in a helper function keep the count of :\\n1. ending pointer\\n2. starting pointer\\n3. current unique elements\\n4. number of elements with count at least k\\n\\nIn the helper function slide through the entire string and check if there is a window where \"number of unique characters\"(`currunique`) == \"number of characters with frequency at least K\"(`numk`) and update the running counter and return it.\\n\\n```\\nint solver(string &s, int &k, int &totalUnique) {\\n        int start=0, end=0, currunique=0, numk=0;\\n        int cnt = 0;\\n        vector <int> chMap(26, 0);\\n        while(end < s.size()) {\\n            if (!chMap[s[end] - \\'a\\']) currunique++;\\n            chMap[s[end]-\\'a\\']++;\\n            if (chMap[s[end] - \\'a\\'] == k) numk++;\\n            end++;\\n            while(currunique > totalUnique) {\\n                if (chMap[s[start] - \\'a\\'] == k) numk--;\\n                chMap[s[start]-\\'a\\']--;\\n                if (!chMap[s[start] - \\'a\\']) currunique--;\\n                start++;\\n            }\\n            // number of unique elements are equal to the number of elements which have count of at least k\\n            if (currunique == numk) {\\n                cnt = max(cnt, end-start);\\n            }\\n        }\\n        return cnt;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        int cnt = 0;\\n        for(int i =1; i<=26; i++) {\\n            cnt = max(cnt, solver(s, k, i));\\n        }\\n        return cnt;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nint solver(string &s, int &k, int &totalUnique) {\\n        int start=0, end=0, currunique=0, numk=0;\\n        int cnt = 0;\\n        vector <int> chMap(26, 0);\\n        while(end < s.size()) {\\n            if (!chMap[s[end] - \\'a\\']) currunique++;\\n            chMap[s[end]-\\'a\\']++;\\n            if (chMap[s[end] - \\'a\\'] == k) numk++;\\n            end++;\\n            while(currunique > totalUnique) {\\n                if (chMap[s[start] - \\'a\\'] == k) numk--;\\n                chMap[s[start]-\\'a\\']--;\\n                if (!chMap[s[start] - \\'a\\']) currunique--;\\n                start++;\\n            }\\n            // number of unique elements are equal to the number of elements which have count of at least k\\n            if (currunique == numk) {\\n                cnt = max(cnt, end-start);\\n            }\\n        }\\n        return cnt;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        int cnt = 0;\\n        for(int i =1; i<=26; i++) {\\n            cnt = max(cnt, solver(s, k, i));\\n        }\\n        return cnt;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 492483,
                "title": "python-short-and-clean",
                "content": "The idea is that any characters in the string that do not satisfy the requirement break the string in multiple parts that do not contain these characters, and for each part we should check the requirement again. There are similar solutions (not many), though most use string methods like split or count, which keep some important details hidden. Here I am also using Counter for short code but it\\'s just replacing a usual dictionary and a single obvious loop to calculate counts of letters. \\n\\nConcerning complexity, it is indeed formally O(N), like it was mentioned in another solution despite recursion, because at each level of recursion we look at maximum 2N characters, and there can be not more than 26 levels of recursion, because we remove at least one character from 26 possible characters each time we move to the next level.\\n\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        cnt = collections.Counter(s)\\n        st = 0\\n        maxst = 0\\n        for i, c in enumerate(s):\\n            if cnt[c] < k:\\n                maxst = max(maxst, self.longestSubstring(s[st:i], k))\\n                st = i + 1\\n        return len(s) if st == 0 else max(maxst, self.longestSubstring(s[st:], k))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        cnt = collections.Counter(s)\\n        st = 0\\n        maxst = 0\\n        for i, c in enumerate(s):\\n            if cnt[c] < k:\\n                maxst = max(maxst, self.longestSubstring(s[st:i], k))\\n                st = i + 1\\n        return len(s) if st == 0 else max(maxst, self.longestSubstring(s[st:], k))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949699,
                "title": "c-super-easy-recursive-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if ((n == 0) && (k > n))\\n            return 0;\\n        \\n        unordered_map<char, int> counter;\\n        for (auto letter : s)\\n            counter[letter]++;\\n        \\n        int sub1, sub2;\\n        \\n        for (int i=0; i<n; i++) {\\n            if (counter[s[i]] < k) {\\n                sub1 = longestSubstring(s.substr(0, i), k);\\n                sub2 = longestSubstring(s.substr(i+1), k);\\n                break;\\n            }\\n            if (i == n-1)\\n                return n;\\n        }\\n        \\n        return max(sub1, sub2);\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if ((n == 0) && (k > n))\\n            return 0;\\n        \\n        unordered_map<char, int> counter;\\n        for (auto letter : s)\\n            counter[letter]++;\\n        \\n        int sub1, sub2;\\n        \\n        for (int i=0; i<n; i++) {\\n            if (counter[s[i]] < k) {\\n                sub1 = longestSubstring(s.substr(0, i), k);\\n                sub2 = longestSubstring(s.substr(i+1), k);\\n                break;\\n            }\\n            if (i == n-1)\\n                return n;\\n        }\\n        \\n        return max(sub1, sub2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949509,
                "title": "python-by-dict-and-recursion-w-comment",
                "content": "Python sol by dictioanry and recursion\\n\\n---\\n\\n**Implementation**:\\n\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \\n        if k > len(s):\\n            \\n            # k is too large, larger than the length of s\\n            # Quick response for invalid k\\n            return 0\\n        \\n        \\n        # just for the convenience of self-recursion\\n        f = self.longestSubstring\\n        \\n        ## dictionary\\n        # key: unique character\\n        # value: occurrence\\n        char_occ_dict = collections.Counter(s)\\n        \\n        # Scan each unique character and check occurrence\\n        for character, occurrence in char_occ_dict.items():\\n            \\n            if occurrence < k:\\n                \\n                # If occurrence of current character is less than k,\\n                # find possible longest substring without current character in recursion\\n                \\n                return max( f(sub_string, k) for sub_string in s.split(character) )\\n        \\n        # -------------------------------\\n        \\n        # If occurrences of all characters are larger than or equal to k\\n        # the length of s is the answer exactly\\n        \\n        return len(s)\\n```\\n\\n---\\n\\nReference:\\n\\n[1] [Python official docs about dictionary](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)\\n\\n[2] [Python official docs about built-in specialized dictionary collections.Counter()](https://docs.python.org/3/library/collections.html?highlight=counter#collections.Counter)",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \\n        if k > len(s):\\n            \\n            # k is too large, larger than the length of s\\n            # Quick response for invalid k\\n            return 0\\n        \\n        \\n        # just for the convenience of self-recursion\\n        f = self.longestSubstring\\n        \\n        ## dictionary\\n        # key: unique character\\n        # value: occurrence\\n        char_occ_dict = collections.Counter(s)\\n        \\n        # Scan each unique character and check occurrence\\n        for character, occurrence in char_occ_dict.items():\\n            \\n            if occurrence < k:\\n                \\n                # If occurrence of current character is less than k,\\n                # find possible longest substring without current character in recursion\\n                \\n                return max( f(sub_string, k) for sub_string in s.split(character) )\\n        \\n        # -------------------------------\\n        \\n        # If occurrences of all characters are larger than or equal to k\\n        # the length of s is the answer exactly\\n        \\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2821874,
                "title": "why-sliding-window-works-for-this-qustion-and-how-it-works-simple-analysis",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\nFirst think can we apply sliding window technique here?\\nBefore giving yes or no answer lets try to use it.\\n\\nSo our string is **\"aaabb**\" and **k = 3** that means in our target substring each char\\'s frequency must be greater or equal than k.\\n\\nSo lets start from first. **i = 0 to s.length() - 1**\\n**i = 0** -> we have **\\'a\\'** as it is first character so frequency is 1 which is less than k so we need to move further.\\n\\n**i = 1** -> we have \\'a\\'. So previously we have \\'a\\' already now another \\'a\\' so total 2 a. Frequency is 2 still it is less than k.\\n\\n**i = 2** -> we have \\'a\\' also. So considering this the frequency is 3. Which is equal to k so our condition satisfied and we can calculate substring length which is 3.\\n\\n> ***Now should we shrink the window or expand? There can be more \\'a\\' or more other characters. So we could not decide to shrink. Lets move***\\n\\n**i = 3 ->** We have \\'b\\'. So it is new character and its frequency is 1 which is less than k. So as our condition is broken we could not calculate substring length.\\n\\n> ***Now what? Still we don\\'t know should we shrink the window because if two more b comes our condition will satisfy. so we could not shrink . This is the problem. In any position we don\\'t have any logic to shrink the window.***\\n\\n**So what can we do? Can we think of any logic so that we can shrink the window.**\\n\\n# Approach\\n\\nSo when we are creating a window consider the maxUniqueCharCount. MaxUniqueCharcount can be determined from the given string.\\nHere above example we have 2 unique characters.\\n\\n***So our idea is we start from 1 to maxUniqueCharCount and operate out sliding window based on this condition and also the given k condition.*** What that means?\\n\\nLets find it. We have 2 unique characters.\\n\\nStarting maxUniqueCharCount = 1\\nSo our slidingWindow must have maximum one unique character. If unique is greater than maxUniqueCharCount we will shrink the window. Otherwise if unique character count is less than maxUniqueCharCount and also the frequency of each unique character is greater or equal k than we caculate the substring.\\n\\n**maxUniqueCharCount = 1**\\n**i = 0** -> we have \\'a\\'. Unique count 1 but frequency less than k so move forward\\n**i = 1** -> we have again \\'a\\'. Unique count still 1 but frequency is 2 which is less than k. Move forward\\n**i = 2** -> We have also \\'a\\'. Unique count still 1 but this time frequncy is 3 which is equal k. So calculate substring length which is 3 here. Still everything ok. So move forward\\n**i = 3** -> We have \\'b\\'. Unique count is now 2 which is grater than maxUniqueCharCount. So we need to shrink the winsow. So start shrinking from the window start which is i = 0.\\n\\nRemove i = 0 which is \\'a\\' from window. But still unique count is 2. Shrink  again i = 1 which is \\'a\\' but still unique count = 2 as sliding window has 1 **a** and 1 **b** chars.. So we need to shrink again. i = 2 now after removing this window has only 1 unique character which satisfy our **maxUniqueCharCount** condition. \\nAs frequency of this unique char is less than k so we could not calculate substring length. So move forward.\\n\\n**i = 4** -> we have b. Unique char count still 1. But frequency of that is 2 which is less than k. So could not calculate the length.\\n\\nEnd of string.\\n\\nS**o considering maxUniqueCharCount = 1 we got maxSubstringLength = 3**\\n\\nNow consider\\n**maxUniqueCharCount = 2**\\n\\n**i = 0** -> we have \\'a\\'. Unique count 1 but frequency less than k so move forward\\n**i = 1** -> we have again \\'a\\'. Unique count still 1 but frequency is 2 which is less than k. Move forward\\n**i = 2** -> We have also \\'a\\'. Unique count still 1 but this time frequncy is 3 which is equal k. So calculate substring length which is 3 here. Still everything ok. So move forward\\n**i = 3** -> We have \\'b\\'.  Unique count 2 which satisfy maxUniqueCharCount condition. But frequency of b is less than k so could not calculate\\n**i = 4** -> We have again \\'b\\'. Unique count 2 which satisfy maxUniqueCharCount condition. But frequency of b is less than k so could not calculate.\\n\\nWe don\\'t need to look more as we already checked all possiblity of unique characters.\\n\\n```\\npublic int longestSubstring(String s, int k) {\\n        int maxUnqiueCharCount =  getUniqueCharCount(s);\\n        int [] freqMap = new int [26];\\n        int result = 0;\\n        \\n        for (int currentUniqueChar = 1;  currentUniqueChar <= maxUnqiueCharCount; currentUniqueChar++) {\\n            Arrays.fill(freqMap, 0);\\n            int uniqueCount = 0, countAtLeastK = 0, windowStart  = 0, windowEnd = 0;\\n            \\n            while (windowEnd < s.length()) {\\n                \\n                if (uniqueCount <= currentUniqueChar) {\\n                    int idx = s.charAt(windowEnd) - \\'a\\';\\n                    if (freqMap[idx] == 0) {\\n                        uniqueCount++;\\n                    }\\n                    freqMap[idx]++;\\n                    \\n                    if (freqMap[idx] == k) {\\n                        countAtLeastK++;\\n                    }\\n                    windowEnd++;\\n                } else {\\n                    // We need to  shrink\\n                    int idx = s.charAt(windowStart) - \\'a\\';\\n                    if (freqMap[idx] == k) {\\n                        countAtLeastK--;\\n                    }\\n                    freqMap[idx]--;\\n                    if (freqMap[idx] == 0) {\\n                        uniqueCount--;\\n                    }\\n                    windowStart++;\\n                }\\n                \\n                if (uniqueCount == currentUniqueChar && uniqueCount == countAtLeastK) {\\n                    result = Math.max(windowEnd - windowStart, result);\\n                }\\n            }\\n            \\n        }\\n        \\n        return result;\\n    }\\n    \\n    private int getUniqueCharCount(String s) {\\n        boolean [] chars = new boolean [26];\\n        int uniqueCount = 0;\\n        \\n        for (char ch : s.toCharArray()) {\\n            int idx  = ch - \\'a\\';\\n            if (!chars[idx]) {\\n                uniqueCount++;\\n                chars[idx] = true;\\n            }\\n        }\\n        \\n        return uniqueCount;\\n    }\\n```\\n\\n\\n# Complexity\\n- Time complexity:\\nA string may contains max 26 unique characters. So we need to do the sliding window techniques max 26 times. So time complexity is O(26n) = O(n) where n is the length of the string.\\n\\n- Space complexity:\\nIn each iteration we just tracking the frequency of the window which requires max 26. So we can consider it O(1).\\n",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\npublic int longestSubstring(String s, int k) {\\n        int maxUnqiueCharCount =  getUniqueCharCount(s);\\n        int [] freqMap = new int [26];\\n        int result = 0;\\n        \\n        for (int currentUniqueChar = 1;  currentUniqueChar <= maxUnqiueCharCount; currentUniqueChar++) {\\n            Arrays.fill(freqMap, 0);\\n            int uniqueCount = 0, countAtLeastK = 0, windowStart  = 0, windowEnd = 0;\\n            \\n            while (windowEnd < s.length()) {\\n                \\n                if (uniqueCount <= currentUniqueChar) {\\n                    int idx = s.charAt(windowEnd) - \\'a\\';\\n                    if (freqMap[idx] == 0) {\\n                        uniqueCount++;\\n                    }\\n                    freqMap[idx]++;\\n                    \\n                    if (freqMap[idx] == k) {\\n                        countAtLeastK++;\\n                    }\\n                    windowEnd++;\\n                } else {\\n                    // We need to  shrink\\n                    int idx = s.charAt(windowStart) - \\'a\\';\\n                    if (freqMap[idx] == k) {\\n                        countAtLeastK--;\\n                    }\\n                    freqMap[idx]--;\\n                    if (freqMap[idx] == 0) {\\n                        uniqueCount--;\\n                    }\\n                    windowStart++;\\n                }\\n                \\n                if (uniqueCount == currentUniqueChar && uniqueCount == countAtLeastK) {\\n                    result = Math.max(windowEnd - windowStart, result);\\n                }\\n            }\\n            \\n        }\\n        \\n        return result;\\n    }\\n    \\n    private int getUniqueCharCount(String s) {\\n        boolean [] chars = new boolean [26];\\n        int uniqueCount = 0;\\n        \\n        for (char ch : s.toCharArray()) {\\n            int idx  = ch - \\'a\\';\\n            if (!chars[idx]) {\\n                uniqueCount++;\\n                chars[idx] = true;\\n            }\\n        }\\n        \\n        return uniqueCount;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 778876,
                "title": "0ms-solution-java-easy-divide-and-conquer",
                "content": "```\\n    public int longestSubstring(String s, int k) {\\n        if(s.length() < k) return 0;\\n        int[] count = new int[26];\\n        for(int i = 0; i < s.length(); i++) count[s.charAt(i)-\\'a\\']++;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(count[s.charAt(i)-\\'a\\'] >= k) continue;\\n            int j = i + 1;\\n            while(j < s.length() && count[s.charAt(j)-\\'a\\'] < k) j++;\\n            return Math.max(longestSubstring(s.substring(0, i), k), longestSubstring(s.substring(j), k));\\n        }\\n        return s.length();\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int longestSubstring(String s, int k) {\\n        if(s.length() < k) return 0;\\n        int[] count = new int[26];\\n        for(int i = 0; i < s.length(); i++) count[s.charAt(i)-\\'a\\']++;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(count[s.charAt(i)-\\'a\\'] >= k) continue;\\n            int j = i + 1;\\n            while(j < s.length() && count[s.charAt(j)-\\'a\\'] < k) j++;\\n            return Math.max(longestSubstring(s.substring(0, i), k), longestSubstring(s.substring(j), k));\\n        }\\n        return s.length();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 719383,
                "title": "python-o-n-sliding-window-solution-based-on-template",
                "content": "\\nSolved using template from https://leetcode.com/problems/minimum-window-substring/discuss/26808/here-is-a-10-line-template-that-can-solve-most-substring-problemsa\\n\\nTime Complexity: O(26n)\\nSpace Complexity: O(26) - Store character frequency array\\n\\nRuntime: 280 ms\\nMemory Usage: 13.6 MB - less than 99%\\n\\n``` python\\ndef longestSubstring(self, s, k):\\n    count = 0\\n    for i in range(1, 27):\\n        count = max(count, self.helper(s, k, i))\\n    return count\\n\\ndef helper(self, s, k, numUniqueTarget):\\n    start = end = numUnique = numNoLessThanK = count = 0\\n    chMap = [0]*128\\n\\n    while end < len(s):\\n        if chMap[ord(s[end])] == 0: numUnique += 1\\n        chMap[ord(s[end])] += 1\\n        if chMap[ord(s[end])] == k: numNoLessThanK += 1\\n        end += 1\\n        \\n        while numUnique > numUniqueTarget:\\n            if chMap[ord(s[start])] == k: numNoLessThanK -= 1\\n            chMap[ord(s[start])] -= 1\\n            if chMap[ord(s[start])] == 0: numUnique -= 1\\n            start += 1\\n            \\n        if numUnique == numNoLessThanK: count = max(count, end-start)\\n        \\n    return count\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "``` python\\ndef longestSubstring(self, s, k):\\n    count = 0\\n    for i in range(1, 27):\\n        count = max(count, self.helper(s, k, i))\\n    return count\\n\\ndef helper(self, s, k, numUniqueTarget):\\n    start = end = numUnique = numNoLessThanK = count = 0\\n    chMap = [0]*128\\n\\n    while end < len(s):\\n        if chMap[ord(s[end])] == 0: numUnique += 1\\n        chMap[ord(s[end])] += 1\\n        if chMap[ord(s[end])] == k: numNoLessThanK += 1\\n        end += 1\\n        \\n        while numUnique > numUniqueTarget:\\n            if chMap[ord(s[start])] == k: numNoLessThanK -= 1\\n            chMap[ord(s[start])] -= 1\\n            if chMap[ord(s[start])] == 0: numUnique -= 1\\n            start += 1\\n            \\n        if numUnique == numNoLessThanK: count = max(count, end-start)\\n        \\n    return count\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 949551,
                "title": "java-easy-to-understand",
                "content": "if you like it pls upvote\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n\\t\\tif(s.length() < k) return 0;\\n\\t\\tint[] count = new int[26];\\n\\t\\tfor(int i = 0; i < s.length(); i++) count[s.charAt(i)-\\'a\\']++;\\n\\t\\tfor(int i = 0; i < s.length(); i++) {\\n\\t\\t\\tif(count[s.charAt(i)-\\'a\\'] >= k) continue;\\n\\t\\t\\tint j = i + 1;\\n\\t\\t\\twhile(j < s.length() && count[s.charAt(j)-\\'a\\'] < k) j++;\\n\\t\\t\\treturn Math.max(longestSubstring(s.substring(0, i), k), longestSubstring(s.substring(j), k));\\n\\t\\t}\\n\\t\\treturn s.length();\\n\\t}\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n\\t\\tif(s.length() < k) return 0;\\n\\t\\tint[] count = new int[26];\\n\\t\\tfor(int i = 0; i < s.length(); i++) count[s.charAt(i)-\\'a\\']++;\\n\\t\\tfor(int i = 0; i < s.length(); i++) {\\n\\t\\t\\tif(count[s.charAt(i)-\\'a\\'] >= k) continue;\\n\\t\\t\\tint j = i + 1;\\n\\t\\t\\twhile(j < s.length() && count[s.charAt(j)-\\'a\\'] < k) j++;\\n\\t\\t\\treturn Math.max(longestSubstring(s.substring(0, i), k), longestSubstring(s.substring(j), k));\\n\\t\\t}\\n\\t\\treturn s.length();\\n\\t}\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3378437,
                "title": "best-intution-to-solve-this-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1. Here we will store the count of every character for this you can use hashmap or frequency array whatever you find easy;\\n2. Then after this we will find the first character whose frequency is less than k, certainly this characher will not be icluded in the substring \\n3. Here we will divide out string int two substring about this character\\n4. Then we will call the same function on left and right substrings and return the maximum of these two values.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        unordered_map<char,int> m;\\n        for(int i=0;i<n;i++) {\\n            m[s[i]]++;\\n        }\\n        int indx = 0;\\n        while(indx<n && m[s[indx]]>=k) indx++;\\n        if(indx == n) return n;\\n        int left = longestSubstring(s.substr(0,indx),k);\\n        int right = longestSubstring(s.substr(indx+1,n-indx-1),k);\\n        return max(left,right);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        unordered_map<char,int> m;\\n        for(int i=0;i<n;i++) {\\n            m[s[i]]++;\\n        }\\n        int indx = 0;\\n        while(indx<n && m[s[indx]]>=k) indx++;\\n        if(indx == n) return n;\\n        int left = longestSubstring(s.substr(0,indx),k);\\n        int right = longestSubstring(s.substr(indx+1,n-indx-1),k);\\n        return max(left,right);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 235995,
                "title": "python-fast-solution",
                "content": "```python\\nclass Solution(object):\\n   def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        lookup = collections.Counter(s)\\n        for c in lookup:\\n            if lookup[c] < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(c))\\n        return len(s)\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n   def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        lookup = collections.Counter(s)\\n        for c in lookup:\\n            if lookup[c] < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(c))\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 782553,
                "title": "python3-divide-and-conquer",
                "content": "\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n\\t\\n        if len(s) < k: return 0\\n\\t\\t\\n\\t\\tc = Counter(s)\\n        st = 0\\n        for p, v in enumerate(s):\\n            \\n            if c[v] < k:\\n                \\n                return max(self.longestSubstring(s[st:p],k), self.longestSubstring(s[p+1:],k))\\n        \\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3",
                    "Divide and Conquer"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n\\t\\n        if len(s) < k: return 0\\n\\t\\t\\n\\t\\tc = Counter(s)\\n        st = 0\\n        for p, v in enumerate(s):\\n            \\n            if c[v] < k:\\n                \\n                return max(self.longestSubstring(s[st:p],k), self.longestSubstring(s[p+1:],k))\\n        \\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 119700,
                "title": "java-3ms-10-lines-beat-100",
                "content": "\\n    public int longestSubstring(String s, int k) {\\n        return helper(s.toCharArray(), 0, s.length(), k);\\n    }\\n    public int helper(char[] chs, int left, int right, int k) {\\n        if(right - left < k) return 0;\\n        int[] count = new int[26];\\n        for(int i = left; i < right; i++)\\n            count[chs[i]-\\'a\\']++;\\n        for(int i = left; i < right; i++) {\\n            if(count[chs[i]-\\'a\\'] < k) {\\n                int j = i + 1;\\n                while(j < right && count[chs[j]-\\'a\\'] < k) j++;\\n                return Math.max(helper(chs, left, i, k), helper(chs, j, right, k));\\n            }\\n        }\\n        return right - left;\\n    }\\n",
                "solutionTags": [],
                "code": "\\n    public int longestSubstring(String s, int k) {\\n        return helper(s.toCharArray(), 0, s.length(), k);\\n    }\\n    public int helper(char[] chs, int left, int right, int k) {\\n        if(right - left < k) return 0;\\n        int[] count = new int[26];\\n        for(int i = left; i < right; i++)\\n            count[chs[i]-\\'a\\']++;\\n        for(int i = left; i < right; i++) {\\n            if(count[chs[i]-\\'a\\'] < k) {\\n                int j = i + 1;\\n                while(j < right && count[chs[j]-\\'a\\'] < k) j++;\\n                return Math.max(helper(chs, left, i, k), helper(chs, j, right, k));\\n            }\\n        }\\n        return right - left;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3258439,
                "title": "395-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. First, we check if the length of the string is less than k. If so, we can immediately return 0, since no substring of the string can have a frequency of each character greater than or equal to k.\\n\\n2. Next, we count the frequency of each character in the string using a dictionary. We can do this by iterating through each character in the string, and adding 1 to the corresponding dictionary value each time we encounter the character.\\n\\n3. We then find the index of the first character in the string that has a frequency less than k. If all characters have a frequency greater than or equal to k, we can immediately return the length of the string.\\n\\n4. If we have found a character with a frequency less than k, we split the string into two parts: the substring before the current index, and the substring after the current index. We then recursively call the longestSubstring function on each substring to find the longest substring in each part.\\n\\n5. Finally, we return the maximum length of the two substrings found in step 4.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of this solution is O(n log n), where n is the length of the input string. This is because we recursively split the string into smaller and smaller substrings until we reach substrings of length 1. At each level of recursion, we iterate through the string to count the frequency of each character, which takes O(n) time. Since we do this for each level of recursion, the total time complexity is O(n log n).\\n\\n- Space complexity:\\nThe space complexity of this solution is O(n), since we use a dictionary to store the frequency of each character in the string.\\n\\n# Code\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        # If the length of the string is less than k, return 0\\n        if len(s) < k:\\n            return 0\\n        \\n        # Count the frequency of each character in the string\\n        char_freq = {}\\n        for char in s:\\n            if char not in char_freq:\\n                char_freq[char] = 1\\n            else:\\n                char_freq[char] += 1\\n        \\n        # Find the index of the first character with a frequency less than k\\n        for i, char in enumerate(s):\\n            if char_freq[char] < k:\\n                # Split the string into two parts and recursively find the longest substring in each part\\n                left = self.longestSubstring(s[:i], k)\\n                right = self.longestSubstring(s[i+1:], k)\\n                # Return the maximum length of the two substrings\\n                return max(left, right)\\n        \\n        # If all characters have a frequency greater than or equal to k, return the length of the string\\n        return len(s)\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Hash Table",
                    "String",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        # If the length of the string is less than k, return 0\\n        if len(s) < k:\\n            return 0\\n        \\n        # Count the frequency of each character in the string\\n        char_freq = {}\\n        for char in s:\\n            if char not in char_freq:\\n                char_freq[char] = 1\\n            else:\\n                char_freq[char] += 1\\n        \\n        # Find the index of the first character with a frequency less than k\\n        for i, char in enumerate(s):\\n            if char_freq[char] < k:\\n                # Split the string into two parts and recursively find the longest substring in each part\\n                left = self.longestSubstring(s[:i], k)\\n                right = self.longestSubstring(s[i+1:], k)\\n                # Return the maximum length of the two substrings\\n                return max(left, right)\\n        \\n        # If all characters have a frequency greater than or equal to k, return the length of the string\\n        return len(s)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3091155,
                "title": "accepted-easy-solution-short-simple-best-method",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        if(n<k)\\n        return 0;\\n        if(k<2)\\n        return n;\\n        unordered_map<char, int> mp;\\n        for(char c:s)\\n        mp[c]++;\\n        int i=0, a=0, b=0;\\n        while(i<n && mp[s[i]]>=k)\\n        i++;\\n        if(i==n)\\n        return i;\\n        a=longestSubstring(s.substr(0, i), k);\\n        if(i<n-1)\\n        b=longestSubstring(s.substr(i+1), k);\\n        return max(a, b);\\n    }\\n};\\n```\\nPlease **UPVOTE** if it helps \\u2764\\uFE0F\\uD83D\\uDE0A\\nThank You and Happy To Help You!!",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        if(n<k)\\n        return 0;\\n        if(k<2)\\n        return n;\\n        unordered_map<char, int> mp;\\n        for(char c:s)\\n        mp[c]++;\\n        int i=0, a=0, b=0;\\n        while(i<n && mp[s[i]]>=k)\\n        i++;\\n        if(i==n)\\n        return i;\\n        a=longestSubstring(s.substr(0, i), k);\\n        if(i<n-1)\\n        b=longestSubstring(s.substr(i+1), k);\\n        return max(a, b);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1235759,
                "title": "c-easy-solution-commented-fully-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int res=0;\\n    int longestSubstring(string s, int k) {\\n        if(k>s.length())\\n        {\\n            //even if all character are same they can\\'t have freq k\\n            //as k>length of array\\n            return 0;\\n        }\\n        return helper(s,0,s.length(),k);\\n    }\\n    int helper(string s,int start,int end,int k)\\n    {\\n        if(end-start<k)\\n            return  0;\\n        //we get the freq of the every charcter in s between start and end\\n        vector<int> freq(26,0);\\n        for(int i=start;i<end;i++)\\n        {\\n         freq[s[i]-\\'a\\']++;   \\n        }\\n        //get the substring again where freq of every character is greater than k\\n        for(int i=start;i<end;i++)\\n        {\\n            if(freq[s[i]-\\'a\\']<k)\\n            {\\n                //this cannot form result\\n                //now find the last index upto which we cannot make result\\n                int j=i+1;\\n                while(j<end && freq[s[j]-\\'a\\']<k)\\n                    j++;\\n                //cal the max substr from left and right\\n                return max(helper(s,start,i,k),helper(s,j,end,k));\\n            }\\n        }\\n        //if all character freq >=k \\n        return end-start;\\n    }\\n};\\n```\\n**please upvote if this helps  you :)**",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int res=0;\\n    int longestSubstring(string s, int k) {\\n        if(k>s.length())\\n        {\\n            //even if all character are same they can\\'t have freq k\\n            //as k>length of array\\n            return 0;\\n        }\\n        return helper(s,0,s.length(),k);\\n    }\\n    int helper(string s,int start,int end,int k)\\n    {\\n        if(end-start<k)\\n            return  0;\\n        //we get the freq of the every charcter in s between start and end\\n        vector<int> freq(26,0);\\n        for(int i=start;i<end;i++)\\n        {\\n         freq[s[i]-\\'a\\']++;   \\n        }\\n        //get the substring again where freq of every character is greater than k\\n        for(int i=start;i<end;i++)\\n        {\\n            if(freq[s[i]-\\'a\\']<k)\\n            {\\n                //this cannot form result\\n                //now find the last index upto which we cannot make result\\n                int j=i+1;\\n                while(j<end && freq[s[j]-\\'a\\']<k)\\n                    j++;\\n                //cal the max substr from left and right\\n                return max(helper(s,start,i,k),helper(s,j,end,k));\\n            }\\n        }\\n        //if all character freq >=k \\n        return end-start;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 614714,
                "title": "c-divide-and-conquer-solution-with-explanation",
                "content": "```\\nclass Solution { \\npublic:\\n    int longestSubstring(string s, int k) {\\n        return divideAndConquer(0, s.length(), s, k);\\n    }\\npublic:\\n    int divideAndConquer(int start, int end, string s, int k)\\n    {\\n        //store frequency of each character in string\\n        int charCount[26] = {0};\\n        for(int i = start; i < end; i++)\\n            charCount[s[i] - \\'a\\']++;\\n        \\n        int flag = 1;\\n        \\n        //check if frequency of any character in string is less than k\\n        for(int i = 0; i < 26; i++)\\n            if(charCount[i] > 0 && charCount[i] < k)\\n                flag = 0;\\n        \\n        //if frequency of all characters is more than k, return length of string\\n        if(flag)\\n            return end - start;\\n        \\n        //split string at character whose frequency is less than k\\n        for(int i = start; i < end; i++)\\n        {\\n            int count = charCount[s[i] - \\'a\\'];\\n            if(count > 0 && count < k)\\n            {\\n                int leftside = divideAndConquer(start, i, s, k);\\n                int rightside = divideAndConquer(i + 1, end, s, k);\\n                return max(leftside, rightside); //return max length from left and right substring\\n            }\\n        }\\n        return end - start; //return length of string\\n    }\\n};\\n``",
                "solutionTags": [
                    "C++",
                    "C",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "class Solution { \\npublic:\\n    int longestSubstring(string s, int k) {\\n        return divideAndConquer(0, s.length(), s, k);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2718811,
                "title": "c-sliding-window-o-n-step-by-step-approach",
                "content": "# EXPLANATION: \\n* The problem of the question lies in the **\"ATLEAST\"** part : When to increase window & when to decrease?\\n* In all the sliding window problems we determine whether to increase to decrease the window on the basis of unique characters in the window and frequency of the characters.\\n* Hence, Here we\\'ll calculate the max window size of the window: containing **1 unique, 2 unique, ... , N unique elements** AND for each case find those windows where frequency of all those unique characters in the window must be greater than or equal to K.\\n* ***Explanation*** - \\n\\t* Find a windows containing X unique characters. (totalU)\\n\\t* After finding such window check if the frequency of all X characters are greater than or equal to K. (atleastK)\\n\\t* If it is, store the value as it will be candidate for answer.\\n* **Time Complexity : O(26 x N)**\\n* Upvote! XD\\n\\n```\\nclass Solution{\\nprivate: \\n    int fx(string &s, int k, int totalU){   //totalU : Total Unique\\n        int n = s.size();\\n        int i=0, j=0;\\n\\n        unordered_map<char, int> mpp;  //Character Frequency Map Of The Window.\\n        int windowU = 0;    //Unique Characters In Window.\\n        int atleastK = 0;   //Characters In Window With Atleast k Occurences.\\n        int maxi = 0;\\n\\n        while(j<n){\\n            if(mpp.find(s[j]) == mpp.end()) windowU++;    //If element in not already in the window. Increase atleastK of unique elements.\\n            \\n            mpp[s[j]]++; if(mpp[s[j]] == k) atleastK++;  //If the count of element >= k : Increase atleastK variable.\\n            \\n            //If the count of unique element exceeds the limit, decrease window. Else increase window.\\n            if(windowU > totalU){\\n                while(windowU > totalU){\\n                    if(mpp[s[i]] == k) atleastK--;  //If the frequency of character is k, decrease the atleastK.\\n                    mpp[s[i]]--; \\n                    \\n                    if(mpp[s[i]]==0){ \\n                        windowU--; \\n                        mpp.erase(mpp.find(s[i])); \\n                    }\\n\\n                    i++;\\n                }\\n            }\\n            \\n            if(atleastK == windowU) maxi = max(maxi, (j-i+1)); //If all the elements in the window occurs atleast k times.\\n            j++;\\n        }\\n\\n        return maxi;\\n    }\\n\\npublic:\\n    int findLongest(string &s, int k){\\n        int n = s.size();\\n        if(k>n) return 0;\\n\\n        //Find Total Number Of Unique Elements:\\n        vector<int> mpp(26, 0);\\n        int unique = 0;\\n        for(const char &c: s){\\n            if(mpp[c-\\'a\\']==0) unique++;\\n            mpp[c-\\'a\\']++;\\n        }\\n\\n        int maxi = 0;\\n        for(int i=1; i<=unique; i++){\\n            maxi = max(maxi, fx(s, k, i));\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution{\\nprivate: \\n    int fx(string &s, int k, int totalU){   //totalU : Total Unique\\n        int n = s.size();\\n        int i=0, j=0;\\n\\n        unordered_map<char, int> mpp;  //Character Frequency Map Of The Window.\\n        int windowU = 0;    //Unique Characters In Window.\\n        int atleastK = 0;   //Characters In Window With Atleast k Occurences.\\n        int maxi = 0;\\n\\n        while(j<n){\\n            if(mpp.find(s[j]) == mpp.end()) windowU++;    //If element in not already in the window. Increase atleastK of unique elements.\\n            \\n            mpp[s[j]]++; if(mpp[s[j]] == k) atleastK++;  //If the count of element >= k : Increase atleastK variable.\\n            \\n            //If the count of unique element exceeds the limit, decrease window. Else increase window.\\n            if(windowU > totalU){\\n                while(windowU > totalU){\\n                    if(mpp[s[i]] == k) atleastK--;  //If the frequency of character is k, decrease the atleastK.\\n                    mpp[s[i]]--; \\n                    \\n                    if(mpp[s[i]]==0){ \\n                        windowU--; \\n                        mpp.erase(mpp.find(s[i])); \\n                    }\\n\\n                    i++;\\n                }\\n            }\\n            \\n            if(atleastK == windowU) maxi = max(maxi, (j-i+1)); //If all the elements in the window occurs atleast k times.\\n            j++;\\n        }\\n\\n        return maxi;\\n    }\\n\\npublic:\\n    int findLongest(string &s, int k){\\n        int n = s.size();\\n        if(k>n) return 0;\\n\\n        //Find Total Number Of Unique Elements:\\n        vector<int> mpp(26, 0);\\n        int unique = 0;\\n        for(const char &c: s){\\n            if(mpp[c-\\'a\\']==0) unique++;\\n            mpp[c-\\'a\\']++;\\n        }\\n\\n        int maxi = 0;\\n        for(int i=1; i<=unique; i++){\\n            maxi = max(maxi, fx(s, k, i));\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 217730,
                "title": "javascript-very-easy-solution",
                "content": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar longestSubstring = function(s, k) {\\n    let map=new Map();\\n    map.clear();\\n    for(item of s){\\n        if(map.has(item))\\n            map.set(item,map.get(item)+1);\\n        else\\n            map.set(item,1);\\n    }\\n    for([item,val] of map){\\n        if(val<k){\\n            let ar=s.split(item);\\n            let res=0;\\n            for(word of ar){\\n                res=Math.max(res,longestSubstring(word,k));\\n            }\\n            return res;\\n        }\\n    }\\n    return s.length;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar longestSubstring = function(s, k) {\\n    let map=new Map();\\n    map.clear();\\n    for(item of s){\\n        if(map.has(item))\\n            map.set(item,map.get(item)+1);\\n        else\\n            map.set(item,1);\\n    }\\n    for([item,val] of map){\\n        if(val<k){\\n            let ar=s.split(item);\\n            let res=0;\\n            for(word of ar){\\n                res=Math.max(res,longestSubstring(word,k));\\n            }\\n            return res;\\n        }\\n    }\\n    return s.length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3775894,
                "title": "divide-and-conquer-method-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nSolve this problem by dividing the list at the point that has frequency less thn \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfrom collections import defaultdict\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        x=self.recursion(s,k)\\n        if x>=k:\\n            return x\\n        else:\\n            \\n            return 0\\n\\n    def recursion(self,s,k):\\n        if len(s)<=1 :\\n            return len(s)\\n        flag=True\\n        for i in range(len(s)):\\n            if s.count(s[i])<k:\\n                flag=False\\n                break\\n            \\n        if flag:\\n            return len(s)\\n        left=(self.recursion(s[:i],k))\\n        right=(self.recursion(s[i+1:],k))\\n        if left>right:\\n            return (left)\\n        return (right)\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Divide and Conquer"
                ],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        x=self.recursion(s,k)\\n        if x>=k:\\n            return x\\n        else:\\n            \\n            return 0\\n\\n    def recursion(self,s,k):\\n        if len(s)<=1 :\\n            return len(s)\\n        flag=True\\n        for i in range(len(s)):\\n            if s.count(s[i])<k:\\n                flag=False\\n                break\\n            \\n        if flag:\\n            return len(s)\\n        left=(self.recursion(s[:i],k))\\n        right=(self.recursion(s[i+1:],k))\\n        if left>right:\\n            return (left)\\n        return (right)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2432235,
                "title": "python-sliding-window",
                "content": "Not sure why it\\'s marked as \"medium\". SW for this one is for sure one of those medium++ problems.\\n\\nSimple sliding window will not work as we cannot quickly figure out conditions for expanding/shrinking.\\n`aaabb, k=3` Should we include `b`? maybe we should include `bb`? Maybe we should shrink `aaa` and work only with `bb`?\\n\\nThe problem here is that we do not know if we can form from `bb` the sequence `bbb` in the future, or if we can form `bbb`, but it will be something like `bbcb`, which does not meet our initial condition that **all char frequencies in a substring should be >= k**\\n\\nHow to solve it? The idea is not that easy-coming. It took a while to grasp it.\\n\\nWhat exactly should we track in the sliding window?\\n\\n**Chars.** Which chars? **max number of allowed unique chars**.\\n\\n!!! **max number of allowed unique chars** needs a clarification: !!!\\n!!! We are talking about `aaaaabbcccc` and unique chars are `a`, `b`, and `c`, so **unique_chars_count = 3** and not their frequency count !!! **frequency** of `a` in the string is 5.\\n\\nLet\\'s see the example:\\n\\n`aaabb, max_unique_chars_allowed = 1, k = 3`.\\n\\nWe  can count 3 `a` **OR** 2 `b` and max unique chars count in the string is 2. Now we can clearly see the conditions: expand until unique_chars_count < 2. If overflow, shrink the window and repeat.\\n\\nThis is solving the initial problem with the sliding window conditions for expanding/shrinking.\\n\\nNow what?\\n\\nRepeat the same process for `max_unique_chars_allowed = 2, 3, 4, ...` and how many unique chars do we have in the initial problem? 26 (lowercase). We can reduce 26 to count of unique chars in the strings later.\\n\\nThis is S\\u0336P\\u0336A\\u0336R\\u0336T\\u0336A\\u0336 **brute-force** approach on all **unique chars counts**!\\n\\nHopefully now you clearly see that we are looking for a max window len in the multitude of all sliding windows with unique chars counts ranging from 1 to max_unique_chars_in_the_string (could be 26)...\\n\\nYes, it\\'s going to be O(26 \\\\* n), but it\\'s still O(n).\\n\\n**</!\\\\/\\\\\\\\!\\\\\\\\/!\\\\\\\\> I think it\\'s too smart and hard to figure out quickly the approach. </!\\\\\\\\/!/\\\\\\\\!\\\\\\\\>**\\n\\nIntuitively from experience we know that it\\'s going to be the sliding window approach, but that it\\'s going to be a brute force over sliding windows is something new, like \\'soft deletions\\' in Sliding Window Median problem.\\n\\nP.S. D&C is easy/medium. The sliding window is harder.\\n\\n**Version w/o \"counter\" optimizations:**\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        N = len(s)\\n        \\n        char_freq = Counter(s)\\n        \\n        max_len = 0\\n        for max_allowed_unique_chars in range(1, len(char_freq.keys()) + 1):\\n            char_freq = defaultdict(int)\\n            \\n            current_unique_chars = 0\\n            start = 0\\n            for end in range(N):\\n\\t\\t\\t\\t# add new char to the window\\n                char_freq[s[end]] += 1\\n                \\n                if char_freq[s[end]] == 1:\\n                    current_unique_chars += 1\\n                \\n                while current_unique_chars > max_allowed_unique_chars:\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t# remove chars until we get current_unique_chars == max_allowed_unique_chars\\n                    char_freq[s[start]] -= 1\\n                    \\n                    if char_freq[s[start]] == 0:\\n                        del char_freq[s[start]]\\n                        current_unique_chars -= 1\\n                    \\n                    start += 1\\n\\n\\t\\t\\t\\t# are all char_freqs >= k?\\n                if all(v >= k for v in char_freq.values()):\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```\\n\\n**Version with \"counter\" optimizations:**\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        N = len(s)\\n        max_len = 0\\n        for max_allowed_unique_chars in range(1, len(Counter(s)) + 1):\\n            freq_count = defaultdict(int)\\n            current_unique_chars = 0\\n            freq_count_greater_or_equal_k = 0\\n            start = 0\\n            for end in range(N):\\n                freq_count[s[end]] += 1\\n                if freq_count[s[end]] == 1: current_unique_chars += 1\\n                if freq_count[s[end]] == k: freq_count_greater_or_equal_k += 1\\n                \\n                while current_unique_chars > max_allowed_unique_chars:\\n                    if freq_count[s[start]] == 1: current_unique_chars -= 1\\n                    if freq_count[s[start]] == k: freq_count_greater_or_equal_k -= 1\\n                    freq_count[s[start]] -= 1\\n                    start += 1\\n\\n                if freq_count_greater_or_equal_k == current_unique_chars:\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```\\n\\n**P.P.S. Upvote if you like the read**",
                "solutionTags": [
                    "Python",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        N = len(s)\\n        \\n        char_freq = Counter(s)\\n        \\n        max_len = 0\\n        for max_allowed_unique_chars in range(1, len(char_freq.keys()) + 1):\\n            char_freq = defaultdict(int)\\n            \\n            current_unique_chars = 0\\n            start = 0\\n            for end in range(N):\\n\\t\\t\\t\\t# add new char to the window\\n                char_freq[s[end]] += 1\\n                \\n                if char_freq[s[end]] == 1:\\n                    current_unique_chars += 1\\n                \\n                while current_unique_chars > max_allowed_unique_chars:\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t# remove chars until we get current_unique_chars == max_allowed_unique_chars\\n                    char_freq[s[start]] -= 1\\n                    \\n                    if char_freq[s[start]] == 0:\\n                        del char_freq[s[start]]\\n                        current_unique_chars -= 1\\n                    \\n                    start += 1\\n\\n\\t\\t\\t\\t# are all char_freqs >= k?\\n                if all(v >= k for v in char_freq.values()):\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        N = len(s)\\n        max_len = 0\\n        for max_allowed_unique_chars in range(1, len(Counter(s)) + 1):\\n            freq_count = defaultdict(int)\\n            current_unique_chars = 0\\n            freq_count_greater_or_equal_k = 0\\n            start = 0\\n            for end in range(N):\\n                freq_count[s[end]] += 1\\n                if freq_count[s[end]] == 1: current_unique_chars += 1\\n                if freq_count[s[end]] == k: freq_count_greater_or_equal_k += 1\\n                \\n                while current_unique_chars > max_allowed_unique_chars:\\n                    if freq_count[s[start]] == 1: current_unique_chars -= 1\\n                    if freq_count[s[start]] == k: freq_count_greater_or_equal_k -= 1\\n                    freq_count[s[start]] -= 1\\n                    start += 1\\n\\n                if freq_count_greater_or_equal_k == current_unique_chars:\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1965982,
                "title": "java-easiest-o-n-solution-o-1-space-comments-with-explanations",
                "content": "****Please upvote if you find this helpful\\n\\n\\n```java\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        \\n        //Base Conditions\\n        \\n        //if string length is less than k or string length is 0\\n        if(s.length()<k||s.length()==0)return 0;\\n        //if k is 0 or 1 so return whole string length\\n        if(k<=1)return s.length();\\n------------------------------------------------------------------------------------------------------------------------\\n        \\n        //small Calculations\\n        \\n        //to store the frequency of string characters\\n        HashMap<Character,Integer>map=new HashMap<>();\\n        for(char ch: s.toCharArray()){\\n            map.put(ch,map.getOrDefault(ch,0)+1);\\n        }\\n        //to count till which we find that char whose frequency is less than k\\n        int l=0;\\n       for(int i=0;i<s.length()&&map.get(s.charAt(i))>=k;i++){\\n           l++;\\n       }\\n        //if we reached at last index of string or l is equal to length than return the l\\n        if(l>=s.length()-1)return l;\\n        \\n------------------------------------------------------------------------------------------------------------------------        \\n        //Recursive calls\\n        \\n        //if we find that char whose frequency is less than k then divide the strings into two halves\\n        //and call the recursion individually\\n        int l1 = longestSubstring(s.substring(0,l),k);\\n        //to optimize the problem find the index till which that char whose frequency is less than k lies\\n        //for eg.. string = aaallbbb , k=3\\n        // if we reached third index than instead dividing into substr(0,l) & substr(l) we find till which that char whose           //freq less than k lies\\n        //and did substr(0,l) and then while and then substr(l).. where l==5;\\n        while(l<s.length()&&map.get(s.charAt(l))<k)l++;\\n        int l2 = longestSubstring(s.substring(l),k);\\n        \\n-------------------------------------------------------------------------------------------------------------------------\\n        //at last returned the longest substring length which recursion brings to us\\n        return Math.max(l1,l2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```java\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        \\n        //Base Conditions\\n        \\n        //if string length is less than k or string length is 0\\n        if(s.length()<k||s.length()==0)return 0;\\n        //if k is 0 or 1 so return whole string length\\n        if(k<=1)return s.length();\\n------------------------------------------------------------------------------------------------------------------------\\n        \\n        //small Calculations\\n        \\n        //to store the frequency of string characters\\n        HashMap<Character,Integer>map=new HashMap<>();\\n        for(char ch: s.toCharArray()){\\n            map.put(ch,map.getOrDefault(ch,0)+1);\\n        }\\n        //to count till which we find that char whose frequency is less than k\\n        int l=0;\\n       for(int i=0;i<s.length()&&map.get(s.charAt(i))>=k;i++){\\n           l++;\\n       }\\n        //if we reached at last index of string or l is equal to length than return the l\\n        if(l>=s.length()-1)return l;\\n        \\n------------------------------------------------------------------------------------------------------------------------        \\n        //Recursive calls\\n        \\n        //if we find that char whose frequency is less than k then divide the strings into two halves\\n        //and call the recursion individually\\n        int l1 = longestSubstring(s.substring(0,l),k);\\n        //to optimize the problem find the index till which that char whose frequency is less than k lies\\n        //for eg.. string = aaallbbb , k=3\\n        // if we reached third index than instead dividing into substr(0,l) & substr(l) we find till which that char whose           //freq less than k lies\\n        //and did substr(0,l) and then while and then substr(l).. where l==5;\\n        while(l<s.length()&&map.get(s.charAt(l))<k)l++;\\n        int l2 = longestSubstring(s.substring(l),k);\\n        \\n-------------------------------------------------------------------------------------------------------------------------\\n        //at last returned the longest substring length which recursion brings to us\\n        return Math.max(l1,l2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 935511,
                "title": "sliding-window-js-solution",
                "content": "```\\nvar longestSubstring = function(s, k) {\\n    let maxUnique = new Set(s).size;\\n    // we\\'ll try substrings consisting of one distinct character to those consisting of maximum distinct characters\\n    let max = 0;\\n    for (let curUnique = 1; curUnique <= maxUnique; curUnique++) {\\n        let start = 0, end = 0, atLeastK = 0, unique = 0, m = new Map();\\n        while (end < s.length) {    \\n            m.set(s[end], m.get(s[end]) + 1 || 1);\\n            if (m.get(s[end]) == 1) unique++;\\n            if (m.get(s[end]) == k) atLeastK++;\\n            \\n            while (unique > curUnique) { // move left pointer so that the number of unique characters do not exceed the upper bound\\n                m.set(s[start], m.get(s[start]) - 1);\\n                if (m.get(s[start]) == k-1) atLeastK--;\\n                if (m.get(s[start]) == 0) unique--;\\n                start++;\\n            }\\n            if (unique == curUnique && unique == atLeastK) {\\n                max = Math.max(max, end - start + 1);\\n            } \\n            end++;\\n        }\\n    }\\n    return max;\\n    // We are only considering lowercase alphaabets so maxUnique can be at most 26.\\n    // Therefore, Time complexity: O(26) * O(n) = O(n)\\n    // Space Complexity: O(26) = O(1)\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar longestSubstring = function(s, k) {\\n    let maxUnique = new Set(s).size;\\n    // we\\'ll try substrings consisting of one distinct character to those consisting of maximum distinct characters\\n    let max = 0;\\n    for (let curUnique = 1; curUnique <= maxUnique; curUnique++) {\\n        let start = 0, end = 0, atLeastK = 0, unique = 0, m = new Map();\\n        while (end < s.length) {    \\n            m.set(s[end], m.get(s[end]) + 1 || 1);\\n            if (m.get(s[end]) == 1) unique++;\\n            if (m.get(s[end]) == k) atLeastK++;\\n            \\n            while (unique > curUnique) { // move left pointer so that the number of unique characters do not exceed the upper bound\\n                m.set(s[start], m.get(s[start]) - 1);\\n                if (m.get(s[start]) == k-1) atLeastK--;\\n                if (m.get(s[start]) == 0) unique--;\\n                start++;\\n            }\\n            if (unique == curUnique && unique == atLeastK) {\\n                max = Math.max(max, end - start + 1);\\n            } \\n            end++;\\n        }\\n    }\\n    return max;\\n    // We are only considering lowercase alphaabets so maxUnique can be at most 26.\\n    // Therefore, Time complexity: O(26) * O(n) = O(n)\\n    // Space Complexity: O(26) = O(1)\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 756917,
                "title": "c-100-0ms-using-simple-sliding-window-concept",
                "content": "I saw many posts on recursion so I am sharing this approach in case someone\\'s been searching for a comparatively simpler approach using sliding window.\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n    int i=0,j=s.length()-1,left=0,right=s.length()-1;\\n    vector<int>f(26,0);\\n    for(auto c:s){f[c-\\'a\\']++;}\\n    while(i<=j){\\n        if(f[s[i]-\\'a\\']<k){\\n        while(left<=i){f[s[left++]-\\'a\\']--;}\\n        i++;j=right;\\n        }\\n        else if(f[s[j]-\\'a\\']<k){\\n            while(right>=j){f[s[right--]-\\'a\\']--;}\\n            j--;i=left;\\n        }\\n        else{\\n            i++;\\n            j--;\\n        }\\n    }\\n        return right-left+1;\\n    }\\n};\\n\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n    int i=0,j=s.length()-1,left=0,right=s.length()-1;\\n    vector<int>f(26,0);\\n    for(auto c:s){f[c-\\'a\\']++;}",
                "codeTag": "Java"
            },
            {
                "id": 741940,
                "title": "8-lines-cpp-extremely-simple-very-important-observation-which-got-me-ac",
                "content": "I submitted the same solution by just creating f ( as a vector ), it got me TLE, I just replaced it with integer array of 26 solution and it got accepted. \\uD83E\\uDD73 \\n\\nGive your Head a Read : [Click Me ](https://stackoverflow.com/questions/3664272/is-stdvector-so-much-slower-than-plain-arrays#:~:text=22%20Answers&text=So%20array%20is%20twice%20as,and%20the%20array%20only%20once.)\\n\\n```\\n bool check(int f[],int k){\\n        for(int i=0;i<26;i++)\\n            if(f[i]!=0 && f[i]<k) return 0;\\n        return 1;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int ans{0};\\n        for(int i=0;i<s.length();i++){\\n             int f[26]={0};\\n            for(int j=i;j<s.length();j++){\\n                f[s[j]-\\'a\\']++; if(f[s[j]-\\'a\\']<k) continue;\\n                if(check(f,k)) ans=max(ans,j-i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n\\t",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "I submitted the same solution by just creating f ( as a vector ), it got me TLE, I just replaced it with integer array of 26 solution and it got accepted. \\uD83E\\uDD73 \\n\\nGive your Head a Read : [Click Me ](https://stackoverflow.com/questions/3664272/is-stdvector-so-much-slower-than-plain-arrays#:~:text=22%20Answers&text=So%20array%20is%20twice%20as,and%20the%20array%20only%20once.)\\n\\n```\\n bool check(int f[],int k){\\n        for(int i=0;i<26;i++)\\n            if(f[i]!=0 && f[i]<k) return 0;\\n        return 1;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int ans{0};\\n        for(int i=0;i<s.length();i++){\\n             int f[26]={0};\\n            for(int j=i;j<s.length();j++){\\n                f[s[j]-\\'a\\']++; if(f[s[j]-\\'a\\']<k) continue;\\n                if(check(f,k)) ans=max(ans,j-i+1);\\n            }\\n        }\\n        return ans;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 430194,
                "title": "python-time-o-n-98-space-o-n-100-with-time-complexity-explanation",
                "content": "\\'\\'\\'\\nUse a dict to record the letter count.\\nThe target substring cannot contain letters with less than K repeating.\\nSo we can use these letters as boundary and divide the source string into substrings and then check recursively on substrings.\\nTime: O(n)\\nSpace: O(n)\\n\\nWhy time O(n)?\\nThat\\'s a very good question. Per descripition \"(consists of lowercase letters only)\". Any thought?\\n--If we break the string at \\'a\\' then the substrings on the next recursion MUST NOT contain \\'a\\', no matter how many segments you have.\\n--There are 26 letters in total to let you break the string. So the deepest recusion level is 26. Each level is O(N). O(26N) is also O(N).\\n--In fact, you can never reach 26th level, because recursion returns, if len(s) < k return 0 and if k < 2 return len(s)\\n\\'\\'\\'\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if not s or len(s) < k:\\n            return 0\\n        if k < 2:\\n            return len(s)\\n        \\n        my_dict = {}\\n        for c in s:\\n            my_dict[c] = my_dict.get(c, 0) + 1\\n        \\n        left = 0\\n        partition = []\\n        for right in range(len(s)):\\n            if my_dict[s[right]] < k: # s[right] must not apprear in the next recursion\\n                partition.append(s[left:right])\\n                left = right + 1\\n        partition.append(s[left:]) # don\\'t forget the last segment\\n        \\n        if len(partition) == 1:\\n            return len(s)\\n        \\n        res = 0\\n        for subs in partition:\\n            res = max(res, self.longestSubstring(subs, k))\\n        \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if not s or len(s) < k:\\n            return 0\\n        if k < 2:\\n            return len(s)\\n        \\n        my_dict = {}\\n        for c in s:\\n            my_dict[c] = my_dict.get(c, 0) + 1\\n        \\n        left = 0\\n        partition = []\\n        for right in range(len(s)):\\n            if my_dict[s[right]] < k: # s[right] must not apprear in the next recursion\\n                partition.append(s[left:right])\\n                left = right + 1\\n        partition.append(s[left:]) # don\\'t forget the last segment\\n        \\n        if len(partition) == 1:\\n            return len(s)\\n        \\n        res = 0\\n        for subs in partition:\\n            res = max(res, self.longestSubstring(subs, k))\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 740284,
                "title": "python-4-lines-44ms-51-counter-split",
                "content": "How about the following solution. You can make it without splits by passing the ranges... But it looks simple and passes the test cases...\\n\\n```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        for char, count in Counter(s).items():\\n            if count < k:\\n                return max(self.longestSubstring(s, k) for s in s.split(char))\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        for char, count in Counter(s).items():\\n            if count < k:\\n                return max(self.longestSubstring(s, k) for s in s.split(char))\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 679442,
                "title": "python-36-ms-recursion-and-counter-explained",
                "content": "### General Idea:\\n\\nIn this approach, we split ```s``` into substrings that contain only letters that occur at least ```k``` times.  \\n\\nThen the substrings are split into smaller substrings that contain only letters that occur at least  ```k``` times.  \\n\\nThis process is repeated until each substring is empty or consists only of letters that occur at least ```k``` times.  \\n\\nThe length of the longest substring is our result.  \\n\\nMore details can be found in the example below and docstring within the code.  Hope this helps!\\n\\n### Example:\\n\\nHere\\'s an example to illustrate how the code below works:\\n\\ne.g. ```s = \"abbdaba\" ; k = 2```\\n\\n1. ```c = Counter(\\'abbdaba\\') = {\\'a\\' : 3, \\'b\\': 3, \\'d\\': 1} ```\\n    * Since ```k = 2``` we know that the substring cannot contain ```\"d\"```\\n    * So we split ```s``` into ```\"abb\"``` and ```\"aba\"```\\n2. Recursively perform step 1 for our two new substrings,  ```\"abb\"``` and ```\"aba\"```\\n    * ```c = Counter(\"abb\") =  {\\'a\\' : 1, \\'b\\': 2}``` which tells us ```\"a\"``` cannot be in this substring\\n    * ```c = Counter(\"bb\")``` now all letters in substring ```\"bb\"``` occur ```k``` or more times so add  ```\"bb\"``` (length 2) to our list of possible results\\n    * For the other half of s ```c = Counter(\"aba\")``` will eventually result in ```\"\"``` (length) 0\\n    * So our final answer will be 2 because \"bb\" is longer than \"\"\\n\\n### Annotated Code:\\n\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        valid_substrings = []\\n        \\n        def helper(string):\\n            \\'\\'\\'\\n            Takes s as an argument\\n            \\n            If there is a letter in s that occurs less than k times, s is split into substrings\\n            that do not include the infrequent letter\\n            \\n            The helper function is recursively called on these substrings (in the for-loop) until\\n            a substring is passed to helper that contains either:\\n                \\n                1) All letters that occur k or more times\\n                2) No letters that occur k or more times\\n                \\n            In the first case, the string is added to valid_substrings\\n            In the second case, return None and cotinue checking the next substring of s\\n            \\n            Returns None but results in a list of valid_substrings\\n            \\'\\'\\'\\n            nonlocal k, valid_substrings\\n            \\n            if not string:\\n                return None\\n            \\n            c = Counter(string)\\n            \\n            if min(c.values()) >= k: #All letters in substring occur k or more times, add to result\\n                valid_substrings.append(string)\\n                return None\\n            elif max(c.values()) < k: #no characters in substring occur k or more times, stop looking\\n                return None\\n            \\n            sub = \\'\\'\\n            for l in string:\\n                if c[l] >= k:\\n                    sub += l\\n                else:\\n                    helper(sub)\\n                    sub = \\'\\'\\n            else:\\n                helper(sub)\\n        \\n        helper(s)\\n        \\n        #If there are any substrings that contain only letters occuring k or more times\\n        #return the length of the longest string\\n        if valid_substrings:\\n            return len(max(valid_substrings, key = len))\\n        \\n        #if there are no such substrings, then return 0\\n        return 0\\n```",
                "solutionTags": [],
                "code": "```s```\n```k```\n```k```\n```k```\n```s = \"abbdaba\" ; k = 2```\n```c = Counter(\\'abbdaba\\') = {\\'a\\' : 3, \\'b\\': 3, \\'d\\': 1} ```\n```k = 2```\n```\"d\"```\n```s```\n```\"abb\"```\n```\"aba\"```\n```\"abb\"```\n```\"aba\"```\n```c = Counter(\"abb\") =  {\\'a\\' : 1, \\'b\\': 2}```\n```\"a\"```\n```c = Counter(\"bb\")```\n```\"bb\"```\n```k```\n```\"bb\"```\n```c = Counter(\"aba\")```\n```\"\"```\n```\\nfrom collections import Counter\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        valid_substrings = []\\n        \\n        def helper(string):\\n            \\'\\'\\'\\n            Takes s as an argument\\n            \\n            If there is a letter in s that occurs less than k times, s is split into substrings\\n            that do not include the infrequent letter\\n            \\n            The helper function is recursively called on these substrings (in the for-loop) until\\n            a substring is passed to helper that contains either:\\n                \\n                1) All letters that occur k or more times\\n                2) No letters that occur k or more times\\n                \\n            In the first case, the string is added to valid_substrings\\n            In the second case, return None and cotinue checking the next substring of s\\n            \\n            Returns None but results in a list of valid_substrings\\n            \\'\\'\\'\\n            nonlocal k, valid_substrings\\n            \\n            if not string:\\n                return None\\n            \\n            c = Counter(string)\\n            \\n            if min(c.values()) >= k: #All letters in substring occur k or more times, add to result\\n                valid_substrings.append(string)\\n                return None\\n            elif max(c.values()) < k: #no characters in substring occur k or more times, stop looking\\n                return None\\n            \\n            sub = \\'\\'\\n            for l in string:\\n                if c[l] >= k:\\n                    sub += l\\n                else:\\n                    helper(sub)\\n                    sub = \\'\\'\\n            else:\\n                helper(sub)\\n        \\n        helper(s)\\n        \\n        #If there are any substrings that contain only letters occuring k or more times\\n        #return the length of the longest string\\n        if valid_substrings:\\n            return len(max(valid_substrings, key = len))\\n        \\n        #if there are no such substrings, then return 0\\n        return 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3298786,
                "title": "c-well-commented-hashmap-o-nlogn",
                "content": "# Approach\\n1. Create an **unordered_map** ***freq*** to count the freq of each character in the string ***s***.\\n2. Find the first character with frequency less than k using a while loop that iterates through ***s***.\\n3. If all char have valid freq -> return **s.length()**;\\n4. Otherwise, split the substring in 2 parts : **left part** from beginning of string to the first invalid char & **right part** from the first invalid char to the end of the string.\\n5. Recursively call **longestSubstring** function on both parts to find the longest valid substring.\\n6. The length of the longest valid susbtring is the **max** value of the lengths of left & right substrings.\\n7. Return the max length of substrings found.\\n\\n# Complexity\\n- Time complexity: ***O(nlogn)***\\n\\n![leetcode_395.jpg](https://assets.leetcode.com/users/images/453641d0-622f-41e1-9cee-e88719ede7f5_1678856314.9428208.jpeg)\\n\\n_Please upvote if you found it useful!_\\n\\n_Follow my **[Github](https://github.com/HimeshKohad)** for more such solutions and DSA content._ \\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n        unordered_map <char, int> freq;\\n\\n        //count the frequency of each char in the string \\'s\\'\\n        for (char c : s) {\\n            freq[c]++;\\n        }\\n\\n        // find the first char with freq < k\\n        int i = 0;\\n        while (i < n && freq[s[i]] >= k) {\\n            i++;\\n        }\\n\\n        // base case - whole string has valid frequencies\\n        if (i == n) return n;\\n\\n        // recursively search for valid substrings in between invalid characters\\n        int left = longestSubstring(s.substr(0, i), k);\\n\\n        while (i < n && freq[s[i]] < k) {\\n            i++;\\n        }\\n\\n        int right = (i < n) ? longestSubstring(s.substr(i), k) : 0;\\n\\n        return max(left, right);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "String",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n        unordered_map <char, int> freq;\\n\\n        //count the frequency of each char in the string \\'s\\'\\n        for (char c : s) {\\n            freq[c]++;\\n        }\\n\\n        // find the first char with freq < k\\n        int i = 0;\\n        while (i < n && freq[s[i]] >= k) {\\n            i++;\\n        }\\n\\n        // base case - whole string has valid frequencies\\n        if (i == n) return n;\\n\\n        // recursively search for valid substrings in between invalid characters\\n        int left = longestSubstring(s.substr(0, i), k);\\n\\n        while (i < n && freq[s[i]] < k) {\\n            i++;\\n        }\\n\\n        int right = (i < n) ? longestSubstring(s.substr(i), k) : 0;\\n\\n        return max(left, right);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1362793,
                "title": "c-0ms-100-fast-with-detailed-explanation-o-n-sliding-window",
                "content": "**The idea is to find candidate substring and evaluate it to see if it matches the required criteria (all characters in substring have frequency >= k). Update the answer if the criteria matches and candidate substring is longest.**\\n\\nNote: Candidate substring is a potential substring that might match required criteria and lead to answer.\\n\\n#### **Identifying candidate substring**\\n\\n* Candidate substring: s[l..r) where l=starting point of sliding window, r=end point of sliding window (not inclusive)\\n\\n* To find candidate substring, we make use of frequency count of characters in string s. Distinguishing point for candidate substring is when frequency of last character of sliding window (s[r]) is < k, then s[r] cannot be part of candidate string. Hence, s[l..r) becomes a candidate substring.\\n\\n\\n#### **Evaluating candidate substring**\\n\\n* To evaluate candidate substring, trim the unnecessary portions of substring from left and right end that do not match the required criteria i.e. remove the characters from substring from left / right whose frequency < k. Update temporary frequency array that stores character frequency count of substring s[l..r).\\n\\n* For the remaining substring, check if all the characters have frequency >= k. If so, then we have a substring matching required criteria. Update final answer with length of substring if it is larger than current answer.\\n\\n```\\n// Sliding Window\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int l = 0, r = 0, ans = 0; // l=staring point of sliding window, r=ending point of sliding window, ans=required answer\\n        int freq[26] = {0}; // stores frequency of characters in string s\\n        int temp[26] = {0}; // stores frequency of characters in sub string s[l..r) \\n        \\n        for(int i=0; i<s.size(); i++)\\n            freq[s[i]-\\'a\\']++;\\n        \\n        while(l<=r && r<=s.size())\\n        {\\n\\t\\t    // below is the condition to identify candidate substring\\n\\t\\t\\t// if frequency of given character is less than k, then we have substring s[l..r) as a candidate substring\\n            if(r==s.size() || freq[s[r]-\\'a\\']<k)\\n            {\\n                int templ = l, tempr = r-1;\\n                \\n\\t\\t\\t\\t// evaluate the candidate substring to see if it can be a potential answer\\n                while(templ<=tempr)\\n                {\\n                    bool change = false;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// trimming candidate substring from left on the basis of character frequency in temporary count array (temp)\\n                    while(templ<=tempr && temp[s[templ]-\\'a\\']<k)\\n                    {\\n                            temp[s[templ]-\\'a\\']--; // decrement count of char s[templ] from temp\\n                            templ++;  \\n                            change = true;\\n                    }\\n                    \\n\\t\\t\\t\\t\\t// trimming candidate substring from right on the basis of character frequency in temporary count array (temp)\\n                    while(templ<tempr && temp[s[tempr]-\\'a\\']<k)\\n                    {\\n                            temp[s[tempr]-\\'a\\']--; // decrement count of char s[tempr] from temp\\n                            tempr--;\\n                    }\\n\\n\\t\\t\\t\\t\\t// below is O(26) operation (constant time)\\n\\t\\t\\t\\t\\t// use below loop to find if candidate substring s[templ..tempr] has characters with frequency >= k\\n                    int i=0;\\n                    for(i=0; i<26; i++)\\n                    {\\n                        if(temp[i]<k && temp[i]>0)\\n                            break;\\n                    }\\n                 \\n\\t\\t\\t\\t    // if above loop runs till 26, it means that we have a substring s[templ..tempr] meeting question criteria (all characters in substring have frequency >= k)\\n                    if(i==26)\\n                    {\\n\\t\\t\\t\\t\\t    // check if answer can be updated with length of substring s[templ..tempr]\\n\\t\\t\\t\\t\\t\\t// and break out of the loop as we don\\'t need to check any further due to the fact that we want only max length, hence, no need to find smaller substrings satisfying the criteria\\n                        if(tempr-templ+1>=ans)\\n                        {\\n                            ans = tempr-templ+1;\\n                            break;\\n                        }\\n                    }\\n\\n\\t\\t\\t\\t\\t// if no trimming has occurred from left then update templ to continue checking the candidate substring\\n                    if(!change)\\n                    {\\n                        temp[s[templ]-\\'a\\']--;\\n                        templ++;\\n                    }\\n                }         \\n                \\n\\t\\t\\t\\t// update starting pointer (l) for new candidate substring\\n                l = r; \\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// reset temp\\n                for(int i=0; i<26; i++) temp[i] = 0;\\n            }\\n            else // make s[r] a part of candidate substring as frequency of character s[r] in s is >= k\\n            {\\n                temp[s[r]-\\'a\\']++;\\n            }\\n\\n\\t\\t\\t// keep updating end of window with r\\n            r++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\n// Sliding Window\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int l = 0, r = 0, ans = 0; // l=staring point of sliding window, r=ending point of sliding window, ans=required answer\\n        int freq[26] = {0}; // stores frequency of characters in string s\\n        int temp[26] = {0}; // stores frequency of characters in sub string s[l..r) \\n        \\n        for(int i=0; i<s.size(); i++)\\n            freq[s[i]-\\'a\\']++;\\n        \\n        while(l<=r && r<=s.size())\\n        {\\n\\t\\t    // below is the condition to identify candidate substring\\n\\t\\t\\t// if frequency of given character is less than k, then we have substring s[l..r) as a candidate substring\\n            if(r==s.size() || freq[s[r]-\\'a\\']<k)\\n            {\\n                int templ = l, tempr = r-1;\\n                \\n\\t\\t\\t\\t// evaluate the candidate substring to see if it can be a potential answer\\n                while(templ<=tempr)\\n                {\\n                    bool change = false;\\n\\t\\t\\t\\t\\t\\n\\t\\t\\t\\t\\t// trimming candidate substring from left on the basis of character frequency in temporary count array (temp)\\n                    while(templ<=tempr && temp[s[templ]-\\'a\\']<k)\\n                    {\\n                            temp[s[templ]-\\'a\\']--; // decrement count of char s[templ] from temp\\n                            templ++;  \\n                            change = true;\\n                    }\\n                    \\n\\t\\t\\t\\t\\t// trimming candidate substring from right on the basis of character frequency in temporary count array (temp)\\n                    while(templ<tempr && temp[s[tempr]-\\'a\\']<k)\\n                    {\\n                            temp[s[tempr]-\\'a\\']--; // decrement count of char s[tempr] from temp\\n                            tempr--;\\n                    }\\n\\n\\t\\t\\t\\t\\t// below is O(26) operation (constant time)\\n\\t\\t\\t\\t\\t// use below loop to find if candidate substring s[templ..tempr] has characters with frequency >= k\\n                    int i=0;\\n                    for(i=0; i<26; i++)\\n                    {\\n                        if(temp[i]<k && temp[i]>0)\\n                            break;\\n                    }\\n                 \\n\\t\\t\\t\\t    // if above loop runs till 26, it means that we have a substring s[templ..tempr] meeting question criteria (all characters in substring have frequency >= k)\\n                    if(i==26)\\n                    {\\n\\t\\t\\t\\t\\t    // check if answer can be updated with length of substring s[templ..tempr]\\n\\t\\t\\t\\t\\t\\t// and break out of the loop as we don\\'t need to check any further due to the fact that we want only max length, hence, no need to find smaller substrings satisfying the criteria\\n                        if(tempr-templ+1>=ans)\\n                        {\\n                            ans = tempr-templ+1;\\n                            break;\\n                        }\\n                    }\\n\\n\\t\\t\\t\\t\\t// if no trimming has occurred from left then update templ to continue checking the candidate substring\\n                    if(!change)\\n                    {\\n                        temp[s[templ]-\\'a\\']--;\\n                        templ++;\\n                    }\\n                }         \\n                \\n\\t\\t\\t\\t// update starting pointer (l) for new candidate substring\\n                l = r; \\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// reset temp\\n                for(int i=0; i<26; i++) temp[i] = 0;\\n            }\\n            else // make s[r] a part of candidate substring as frequency of character s[r] in s is >= k\\n            {\\n                temp[s[r]-\\'a\\']++;\\n            }\\n\\n\\t\\t\\t// keep updating end of window with r\\n            r++;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118450,
                "title": "faster-than-12",
                "content": "class Solution {\\npublic:\\n    int f(string s,int k){\\n     \\n        int n=s.size();\\n        if(n<k){\\n       \\n            return 0;\\n        }\\n       int mi=0;\\n        for(int i=0;i<n;i++){  \\n            for( j=n-1;j>=i;j--){\\n                bool flag=true;\\n                string str=s.substr(i,j-i+1);\\n                \\n                 unordered_map<char,int>m;\\n                 cout<<str<<endl;\\n        for(char c:str){\\n            m[c]++;\\n           \\n        }\\n           for(char y:str){\\n               cout<<m[y]<<\" \";\\n            if(m[y]<k){\\n                flag=false;\\n                break;\\n            }\\n        }\\n          if(flag){\\n             mi=max(mi,j-i+1);\\n              \\n              break;\\n          }\\n            }\\n           \\n            \\n        }\\n        return mi;\\n         \\n        \\n    }\\n    int longestSubstring(string s, int k) {\\n        unordered_map<char,int>m;\\n        int n=s.size();\\n        for(int i=0;i<n;i++){\\n            m[s[i]]++;\\n        }\\n        vector<int>bori;\\n        bori.push_back(0);\\n        for(int i=0;i<n;i++){\\n            if(m[s[i]]<k){\\n                bori.push_back(i);\\n            }\\n        }\\n        bori.push_back(n-1);\\n        int mi=0;\\n        for(int i=1;i<bori.size();i++){\\n            mi=max(f(s.substr(bori[i-1],bori[i]-bori[i-1]+1),k),mi);\\n        }\\n        return mi;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int f(string s,int k){\\n     \\n        int n=s.size();\\n        if(n<k){\\n       \\n            return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 949958,
                "title": "c-2-easy-solution-dfs-memoization-pruning-and-divide-and-conquer",
                "content": "Motivation:\\nThe original solution is from a very old article[1], which is unfortunately took too much running time and causes TLE!\\n\\n1) in the first pass I record counts of every character in a hashmap\\n2) in the second pass I locate the first character that appear less than k times in the string. this character is definitely not included in the result, and that separates the string into two parts.\\n3) keep doing this recursively and the maximum of the left/right part is the answer.\\n4) To optimize, memoization is used to avoid repated checking on the same string.\\n5) A simple pruning rule is implemented by adding \\'bestAnswerByFar\\' to track best answer by far and stop searching in shorter string.\\n6) use string_view instead of string to reduce memory consumption\\n\\nSolution 1: string version\\n```\\nclass Solution {\\npublic:\\n    int bestAnswerByFar = 0;\\n    int longestSubstring(string s, int k) {\\n        if(seen.count(s)) return seen[s];\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        if(s.size() <= bestAnswerByFar) return seen[s]=bestAnswerByFar;        \\n\\n        int Map[26]={};\\n        for(int i = 0; i < s.size(); i++)  Map[s[i]-\\'a\\']++;                \\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]-\\'a\\'] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n\\t\\tint bestAnwser = max(left, right);\\n        bestAnswerByFar = max(bestAnwser, bestAnswerByFar);\\n        return seen[s] = bestAnwser;        \\n    }\\n    \\nprivate:\\n    unordered_map<string, int> seen;    \\n};\\n```\\n\\nSolution 2: Use string_view to replace to string to reduce memory consumption\\n```\\nclass Solution {\\npublic:\\n    int bestAnswerByFar = 0;\\n    int longestSubstring(string_view s, int k) {\\n        if(seen.count(s)) return seen[s];\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        if(s.size() <= bestAnswerByFar) return seen[s]=bestAnswerByFar;        \\n\\n        int Map[26]={};\\n        for(int i = 0; i < s.size(); i++)  Map[s[i]-\\'a\\']++;                \\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]-\\'a\\'] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        string_view sLeft = s.substr(0 , idx);\\n        string_view sRight = s.substr(idx+1);\\n        int left = longestSubstring(sLeft, k);\\n        int right = longestSubstring(sRight, k);\\n\\t\\tint bestAnwser = max(left, right);\\n        bestAnswerByFar = max(bestAnwser, bestAnswerByFar);\\n        return seen[s] = bestAnwser;        \\n    }\\n    \\nprivate:\\n    unordered_map<string_view, int> seen;    \\n};\\n```\\n\\nSolution 3:\\n```\\n/* The following is in Chinese, I will translate it into English when got time. [2]\\n\\u7528\\u5206\\u6CBB\\u6CD5 Divide and Conquer. \\u8FD9\\u91CC\\u4F7F\\u7528\\u4E86\\u4E00\\u4E2A\\u53D8\\u91CF max_idx\\uFF0C\\u662F\\u7528\\u6765\\u5206\\u5272\\u5B50\\u4E32\\u7684\\u3002 \\u5148\\u7EDF\\u8BA1\\u597D\\u5B57\\u7B26\\u4E32s\\u7684\\u6BCF\\u4E2A\\u5B57\\u6BCD\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\uFF0C\\u7136\\u540E\\u518D\\u6B21\\u904D\\u5386\\u6BCF\\u4E2A\\u5B57\\u6BCD\\uFF0C\\u82E5\\u5F53\\u524D\\u5B57\\u6BCD\\u7684\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\u4E86\\uFF0C\\u5219\\u4ECE\\u5F00\\u5934\\u5230\\u524D\\u4E00\\u4E2A\\u5B57\\u6BCD\\u7684\\u8303\\u56F4\\u5185\\u7684\\u5B50\\u4E32\\u53EF\\u80FD\\u662F\\u6EE1\\u8DB3\\u9898\\u610F\\u7684\\uFF0C\\u8FD8\\u9700\\u8981\\u5BF9\\u524D\\u9762\\u7684\\u5B50\\u4E32\\u8FDB\\u4E00\\u6B65\\u8C03\\u7528\\u9012\\u5F52\\uFF0C\\u7528\\u8FD4\\u56DE\\u503C\\u6765\\u66F4\\u65B0\\u5F53\\u524D\\u7ED3\\u679C res\\uFF0C\\u6B64\\u65F6\\u53D8\\u91CF ok \\u6807\\u8BB0\\u4E3A false\\uFF0C\\u8868\\u793A\\u5F53\\u524D\\u6574\\u4E2A\\u5B57\\u7B26\\u4E32s\\u662F\\u4E0D\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u56E0\\u4E3A\\u6709\\u5B57\\u6BCD\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\uFF0C\\u6B64\\u65F6 max_idx \\u66F4\\u65B0\\u4E3A i+1\\uFF0C\\u8868\\u793A\\u518D\\u4ECE\\u65B0\\u7684\\u4F4D\\u7F6E\\u5F00\\u59CB\\u627E\\u4E0B\\u4E00\\u4E2A\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\u7684\\u5B57\\u6BCD\\u7684\\u4F4D\\u7F6E\\uFF0C\\u53EF\\u4EE5\\u5BF9\\u65B0\\u7684\\u8303\\u56F4\\u7684\\u5B50\\u4E32\\u7EE7\\u7EED\\u8C03\\u7528\\u9012\\u5F52\\u3002\\u5F53 for \\u5FAA\\u73AF\\u7ED3\\u675F\\u540E\\uFF0C\\u82E5 ok \\u662F true\\uFF0C\\u8BF4\\u660E\\u6574\\u4E2As\\u4E32\\u90FD\\u662F\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u76F4\\u63A5\\u8FD4\\u56DEn\\uFF0C\\u5426\\u5219\\u8981\\u5BF9 [max_idx, n-1] \\u8303\\u56F4\\u5185\\u7684\\u5B50\\u4E32\\u518D\\u6B21\\u8C03\\u7528\\u9012\\u5F52\\uFF0C\\u56E0\\u4E3A\\u8FD9\\u4E2A\\u533A\\u95F4\\u7684\\u5B50\\u4E32\\u4E5F\\u53EF\\u80FD\\u662F\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u8FD8\\u662F\\u7528\\u8FD4\\u56DE\\u503C\\u8DDF\\u7ED3\\u679C res \\u6BD4\\u8F83\\uFF0C\\u8C01\\u5927\\u5C31\\u8FD4\\u56DE\\u8C01\\uFF0C\\u53C2\\u89C1\\u4EE3\\u7801\\u5982\\u4E0B\\n*/\\nclass Solution { // Divide and conquer\\npublic: // Time/Space: O(N^2); O(N)\\n    int longestSubstring(string s, int k) {\\n        int n = s.size(), max_idx = 0, res = 0;\\n        int m[128] = {0};\\n        bool ok = true; // bool flag to indicate whether whole string s is a leagal candidate\\n        for (char c : s) ++m[c];\\n        for (int i = 0; i < n; ++i) {\\n            if (m[s[i]] < k) {\\n                //res = max(res, i - max_idx); // Wrong! Why?  Check test case: \"ababacb\", 3; Output: 5;\\n                res = max(res, longestSubstring(s.substr(max_idx, i - max_idx), k)); // for test case: \"ababacb\", 3; \\'c\\' will activate this line\\n                ok = false; // current string s itself has illeagal char, so the whole string is not candidate.\\n                max_idx = i + 1; // move to next begining of unchecked portion\\n            }\\n        }\\n        return ok ? n : max(res, longestSubstring(s.substr(max_idx), k));\\n    }\\n};\\n```\\n[1] https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/discuss/87736/C%2B%2B-recursive-solution\\n[2] https://www.cnblogs.com/grandyang/p/5852352.html",
                "solutionTags": [
                    "C",
                    "Divide and Conquer",
                    "Memoization"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int bestAnswerByFar = 0;\\n    int longestSubstring(string s, int k) {\\n        if(seen.count(s)) return seen[s];\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        if(s.size() <= bestAnswerByFar) return seen[s]=bestAnswerByFar;        \\n\\n        int Map[26]={};\\n        for(int i = 0; i < s.size(); i++)  Map[s[i]-\\'a\\']++;                \\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]-\\'a\\'] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n\\t\\tint bestAnwser = max(left, right);\\n        bestAnswerByFar = max(bestAnwser, bestAnswerByFar);\\n        return seen[s] = bestAnwser;        \\n    }\\n    \\nprivate:\\n    unordered_map<string, int> seen;    \\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int bestAnswerByFar = 0;\\n    int longestSubstring(string_view s, int k) {\\n        if(seen.count(s)) return seen[s];\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        if(s.size() <= bestAnswerByFar) return seen[s]=bestAnswerByFar;        \\n\\n        int Map[26]={};\\n        for(int i = 0; i < s.size(); i++)  Map[s[i]-\\'a\\']++;                \\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]-\\'a\\'] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        string_view sLeft = s.substr(0 , idx);\\n        string_view sRight = s.substr(idx+1);\\n        int left = longestSubstring(sLeft, k);\\n        int right = longestSubstring(sRight, k);\\n\\t\\tint bestAnwser = max(left, right);\\n        bestAnswerByFar = max(bestAnwser, bestAnswerByFar);\\n        return seen[s] = bestAnwser;        \\n    }\\n    \\nprivate:\\n    unordered_map<string_view, int> seen;    \\n};\\n```\n```\\n/* The following is in Chinese, I will translate it into English when got time. [2]\\n\\u7528\\u5206\\u6CBB\\u6CD5 Divide and Conquer. \\u8FD9\\u91CC\\u4F7F\\u7528\\u4E86\\u4E00\\u4E2A\\u53D8\\u91CF max_idx\\uFF0C\\u662F\\u7528\\u6765\\u5206\\u5272\\u5B50\\u4E32\\u7684\\u3002 \\u5148\\u7EDF\\u8BA1\\u597D\\u5B57\\u7B26\\u4E32s\\u7684\\u6BCF\\u4E2A\\u5B57\\u6BCD\\u51FA\\u73B0\\u7684\\u6B21\\u6570\\uFF0C\\u7136\\u540E\\u518D\\u6B21\\u904D\\u5386\\u6BCF\\u4E2A\\u5B57\\u6BCD\\uFF0C\\u82E5\\u5F53\\u524D\\u5B57\\u6BCD\\u7684\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\u4E86\\uFF0C\\u5219\\u4ECE\\u5F00\\u5934\\u5230\\u524D\\u4E00\\u4E2A\\u5B57\\u6BCD\\u7684\\u8303\\u56F4\\u5185\\u7684\\u5B50\\u4E32\\u53EF\\u80FD\\u662F\\u6EE1\\u8DB3\\u9898\\u610F\\u7684\\uFF0C\\u8FD8\\u9700\\u8981\\u5BF9\\u524D\\u9762\\u7684\\u5B50\\u4E32\\u8FDB\\u4E00\\u6B65\\u8C03\\u7528\\u9012\\u5F52\\uFF0C\\u7528\\u8FD4\\u56DE\\u503C\\u6765\\u66F4\\u65B0\\u5F53\\u524D\\u7ED3\\u679C res\\uFF0C\\u6B64\\u65F6\\u53D8\\u91CF ok \\u6807\\u8BB0\\u4E3A false\\uFF0C\\u8868\\u793A\\u5F53\\u524D\\u6574\\u4E2A\\u5B57\\u7B26\\u4E32s\\u662F\\u4E0D\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u56E0\\u4E3A\\u6709\\u5B57\\u6BCD\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\uFF0C\\u6B64\\u65F6 max_idx \\u66F4\\u65B0\\u4E3A i+1\\uFF0C\\u8868\\u793A\\u518D\\u4ECE\\u65B0\\u7684\\u4F4D\\u7F6E\\u5F00\\u59CB\\u627E\\u4E0B\\u4E00\\u4E2A\\u51FA\\u73B0\\u6B21\\u6570\\u5C0F\\u4E8Ek\\u7684\\u5B57\\u6BCD\\u7684\\u4F4D\\u7F6E\\uFF0C\\u53EF\\u4EE5\\u5BF9\\u65B0\\u7684\\u8303\\u56F4\\u7684\\u5B50\\u4E32\\u7EE7\\u7EED\\u8C03\\u7528\\u9012\\u5F52\\u3002\\u5F53 for \\u5FAA\\u73AF\\u7ED3\\u675F\\u540E\\uFF0C\\u82E5 ok \\u662F true\\uFF0C\\u8BF4\\u660E\\u6574\\u4E2As\\u4E32\\u90FD\\u662F\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u76F4\\u63A5\\u8FD4\\u56DEn\\uFF0C\\u5426\\u5219\\u8981\\u5BF9 [max_idx, n-1] \\u8303\\u56F4\\u5185\\u7684\\u5B50\\u4E32\\u518D\\u6B21\\u8C03\\u7528\\u9012\\u5F52\\uFF0C\\u56E0\\u4E3A\\u8FD9\\u4E2A\\u533A\\u95F4\\u7684\\u5B50\\u4E32\\u4E5F\\u53EF\\u80FD\\u662F\\u7B26\\u5408\\u9898\\u610F\\u7684\\uFF0C\\u8FD8\\u662F\\u7528\\u8FD4\\u56DE\\u503C\\u8DDF\\u7ED3\\u679C res \\u6BD4\\u8F83\\uFF0C\\u8C01\\u5927\\u5C31\\u8FD4\\u56DE\\u8C01\\uFF0C\\u53C2\\u89C1\\u4EE3\\u7801\\u5982\\u4E0B\\n*/\\nclass Solution { // Divide and conquer\\npublic: // Time/Space: O(N^2); O(N)\\n    int longestSubstring(string s, int k) {\\n        int n = s.size(), max_idx = 0, res = 0;\\n        int m[128] = {0};\\n        bool ok = true; // bool flag to indicate whether whole string s is a leagal candidate\\n        for (char c : s) ++m[c];\\n        for (int i = 0; i < n; ++i) {\\n            if (m[s[i]] < k) {\\n                //res = max(res, i - max_idx); // Wrong! Why?  Check test case: \"ababacb\", 3; Output: 5;\\n                res = max(res, longestSubstring(s.substr(max_idx, i - max_idx), k)); // for test case: \"ababacb\", 3; \\'c\\' will activate this line\\n                ok = false; // current string s itself has illeagal char, so the whole string is not candidate.\\n                max_idx = i + 1; // move to next begining of unchecked portion\\n            }\\n        }\\n        return ok ? n : max(res, longestSubstring(s.substr(max_idx), k));\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87778,
                "title": "python-solution-with-detailed-explanation",
                "content": "**Solution**\\n\\n**Longest Substring with At Least K Repeating Characters** https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/\\n\\n**Brute force solution is O(N^2)**\\n* The longest substring can begin anywhere from [0, N-1]. We just do linear forward scan from each such position, recording the the frequencies and updating valid sets.\\n\\n```\\nfrom collections import defaultdict\\nclass Solution(object):\\n    def build_candidate(self, start, s, k):\\n        fmap, valid, last= defaultdict(int), set([]), -1\\n        for i in range(start, len(s)):\\n            fmap[s[i]] += 1\\n            if fmap[s[i]] >= k:\\n                valid.add(s[i])\\n            if len(fmap) == len(valid):\\n                last = i\\n        return 0 if last == -1 else last-start+1\\n    \\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        max_so_far = 0\\n        for i in range(len(s)):\\n            max_so_far = max(max_so_far, self.build_candidate(i, s, k))\\n        return max_so_far\\n```\\n\\n**Divide and Conquer Approach** \\n* Find the character which has the least frequency. If the least frequency is more than k, then our answer is len(s). If the length of the string is less than k, return 0.\\n* Otherwise split the string around this character and apply above to each string. Note this least frequency character can never be a part of a solution.\\n* Note that instead of picking the rarest/least frequency character, we could have picked the first character with frequency less than k.\\n* This is an N * lg N solution. Masters theorem: T(N) = b * T(N/b) + N. Now lg N will be the height of the recursion tree and it is limited by 26 or the alphabet size.\\n* More details: https://discuss.leetcode.com/topic/57092/4-lines-python/7\\n\\n```\\nclass Solution(object):\\n    def helper(self, s, k):\\n        if len(s) < k:\\n            return 0\\n        ch = min(set(s), key=s.count)\\n        if s.count(ch) >= k:\\n            return len(s)\\n        return max(self.helper(t, k) for t in s.split(ch))\\n    \\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        return self.helper(s, k)\\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution(object):\\n    def build_candidate(self, start, s, k):\\n        fmap, valid, last= defaultdict(int), set([]), -1\\n        for i in range(start, len(s)):\\n            fmap[s[i]] += 1\\n            if fmap[s[i]] >= k:\\n                valid.add(s[i])\\n            if len(fmap) == len(valid):\\n                last = i\\n        return 0 if last == -1 else last-start+1\\n    \\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        max_so_far = 0\\n        for i in range(len(s)):\\n            max_so_far = max(max_so_far, self.build_candidate(i, s, k))\\n        return max_so_far\\n```\n```\\nclass Solution(object):\\n    def helper(self, s, k):\\n        if len(s) < k:\\n            return 0\\n        ch = min(set(s), key=s.count)\\n        if s.count(ch) >= k:\\n            return len(s)\\n        return max(self.helper(t, k) for t in s.split(ch))\\n    \\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        return self.helper(s, k)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87828,
                "title": "share-my-12ms-c-solution-with-explanation",
                "content": "**Algorithm:**\\n\\n1. Count the times of each character in ``s``.\\n2. Remove the character whose times is less than ``k`` from ``begin`` and ``end``.\\n3. Find the character ``i`` whose times is less than ``k`` and divide ``s``  from ``i`` and return ``max(longestSubstring(s[begin:i], int k), longestSubstring(s[i + 1:end+1], int k) ) ``\\n\\n**C++ Code:**\\n```c++\\nclass Solution {\\n    public:\\n        int longestSubstring(string s, int k) {\\n            int N = s.size();\\n            /* If k > N, it's impossible to find a substring with k duplicates. */\\n            if(k > N) return 0;\\n            \\n            /* Count the number of characters in s. */\\n            map<char, int> counts;\\n            for(int i = 0; i < N; i++)\\n                counts[s[i]]++;\\n            \\n            int begin = 0, end = N - 1;\\n            /* Remove the character whose times is less than k from begin. */\\n            while(begin < N && counts[s[begin]] < k) begin++;\\n            /* Remove the character whose times is less than k from end. */\\n            while(end >= 0 && counts[s[end]] < k) end--;\\n            \\n            /* If s[begin : end + 1] contain character whose times is less than k,\\n               it must not be the answer. So we divide from the character we just find.\\n             */ \\n            int i;\\n            for(i = begin; i <= end; i++) \\n                if(counts[s[i]] < k)\\n                    return max(longestSubstring(s.substr(begin, i - begin + 1), k), \\\\\\n                               longestSubstring(s.substr(i + 1, end - (i + 1) + 1), k));\\n            \\n            /* If the above for loop complete (i == (end + 1)), all characters' times are larger than k.\\n               So, return (end - begin + 1) else return 0\\n            */\\n            return (i == (end + 1))? (end - begin + 1) : 0;\\n        }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\n    public:\\n        int longestSubstring(string s, int k) {\\n            int N = s.size();\\n            /* If k > N, it's impossible to find a substring with k duplicates. */\\n            if(k > N) return 0;\\n            \\n            /* Count the number of characters in s. */\\n            map<char, int> counts;\\n            for(int i = 0; i < N; i++)\\n                counts[s[i]]++;\\n            \\n            int begin = 0, end = N - 1;\\n            /* Remove the character whose times is less than k from begin. */\\n            while(begin < N && counts[s[begin]] < k) begin++;\\n            /* Remove the character whose times is less than k from end. */\\n            while(end >= 0 && counts[s[end]] < k) end--;\\n            \\n            /* If s[begin : end + 1] contain character whose times is less than k,\\n               it must not be the answer. So we divide from the character we just find.\\n             */ \\n            int i;\\n            for(i = begin; i <= end; i++) \\n                if(counts[s[i]] < k)\\n                    return max(longestSubstring(s.substr(begin, i - begin + 1), k), \\\\\\n                               longestSubstring(s.substr(i + 1, end - (i + 1) + 1), k));\\n            \\n            /* If the above for loop complete (i == (end + 1)), all characters' times are larger than k.\\n               So, return (end - begin + 1) else return 0\\n            */\\n            return (i == (end + 1))? (end - begin + 1) : 0;\\n        }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3378647,
                "title": "solving-the-longest-substring-with-at-least-k-repeating-characters-pseudo-code-o-nlogn",
                "content": "# Intuition\\nGiven a string s and an integer k, find the length of the longest substring that contains at least k repeating characters.\\n\\n\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nTo solve this problem, we will use a recursive approach. First, we count the frequency of each character in the given string. Then, we identify the characters that appear less than k times in the string, and split the string by these characters. We then recursively solve the problem for each of the substrings, and return the maximum length among all the substrings.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\n> The time complexity of this algorithm is O(n log n), where n is the length of the input string s. The splitting of the string can be done in O(n), and the recursion tree can have at most O(log n) levels.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n> The space complexity of this algorithm is O(n), where n is the length of the input string s. This is because we store the frequency count of each character in a hash map.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n>     **//try to solve problem using pseudo code only**\\n# Pseudo Code:\\n    function longestSubstring(s, k):\\n    if s is empty or k is greater than the length of s, return 0\\n    count = count of frequency of each character in s\\n    for each character c in s:\\n        if count[c] is less than k:\\n            split s into substrings by c\\n            return the maximum of longestSubstring for each substring\\n    return the length of s\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n        if(n == 0 || n < k) return 0;\\n        if(k == 1) return n;\\n\\n        unordered_map<char,int> freq;\\n        for(char c : s) freq[c]++;\\n\\n        int i = 0;\\n        while(i < n && freq[s[i]] >= k) i++;\\n        if(i == n) return n;\\n\\n        int left = longestSubstring(s.substr(0,i), k);\\n        while(i < n && freq[s[i]] < k) i++;\\n        int right = longestSubstring(s.substr(i), k);\\n\\n        return max(left,right);\\n    }\\n};\\n//upvote if this solution helps you\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Divide and Conquer",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.length();\\n        if(n == 0 || n < k) return 0;\\n        if(k == 1) return n;\\n\\n        unordered_map<char,int> freq;\\n        for(char c : s) freq[c]++;\\n\\n        int i = 0;\\n        while(i < n && freq[s[i]] >= k) i++;\\n        if(i == n) return n;\\n\\n        int left = longestSubstring(s.substr(0,i), k);\\n        while(i < n && freq[s[i]] < k) i++;\\n        int right = longestSubstring(s.substr(i), k);\\n\\n        return max(left,right);\\n    }\\n};\\n//upvote if this solution helps you\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1806086,
                "title": "c-100-faster-divide-and-conquer",
                "content": "class Solution {\\npublic:\\n    \\n\\tint longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if(n<k) return 0;\\n        unordered_map<char,int>m;\\n        for(auto x:s){\\n            m[x]++;\\n        }\\n        int j = 0;\\n        while(j<n && m[s[j]]>=k) j++;\\n        if(j>=n-1) return j;\\n        int c1 = longestSubstring(s.substr(0,j),k);\\n        while(j<n && m[s[j]]<k) j++;\\n        int c2 = longestSubstring(s.substr(j),k);\\n        return max(c1,c2);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Divide and Conquer",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n    \\n\\tint longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if(n<k) return 0;\\n        unordered_map<char,int>m;\\n        for(auto x:s){\\n            m[x]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 950044,
                "title": "longest-substring-with-at-least-k-repeating-characters-java",
                "content": "```\\nclass Solution \\n{\\n    /* The approach used here is a recursive devide-and-concour method.  First a frequency map of\\n     * the characters appearing in the string is created.  The string is scanned one character at\\n     * a time until a charcter who\\'s frequency is below k is found or the end of string is \\n     * reached.  If a character is encountered, two substrings are created.  One before the the\\n     * character and one after.  The process method is called recursively on each of these \\n     * substrings and the max result is returned.  If the end of string is encountered then all\\n     * characters are assumed to be valid and the length of the substring is returned.\\n     */\\n    \\n    public int longestSubstring(String s, int k) \\n    {\\n        return process( s, k );\\n    }\\n    \\n    private static int process( String s, int k )\\n    {\\n        int     len = s.length();\\n        \\n        if( len < k )   return 0;\\n        if( k == 1 )    return len;\\n        \\n        Map<Character, Integer>     frq = new HashMap<Character, Integer>();\\n        int                         div = 0;\\n        \\n        // --- map the frequency ---\\n        \\n        for( char c : s.toCharArray() )\\n        {\\n            frq.put( c, frq.getOrDefault( c, 0 ) + 1 );\\n        }\\n        \\n        // --- find the divide ---\\n                \\n        while( div < len && frq.get( s.charAt( div ) ) >= k )\\n        {\\n            div++;\\n        }\\n        \\n        // --- process pre/post divide and return max ---\\n        \\n        return  ( div == len )\\n                                ?   len\\n                                :   Math.max(    \\n                                        process( s.substring( 0, div ),  k ), \\n                                        process( s.substring( div + 1 ), k ) \\n                                    );\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    /* The approach used here is a recursive devide-and-concour method.  First a frequency map of\\n     * the characters appearing in the string is created.  The string is scanned one character at\\n     * a time until a charcter who\\'s frequency is below k is found or the end of string is \\n     * reached.  If a character is encountered, two substrings are created.  One before the the\\n     * character and one after.  The process method is called recursively on each of these \\n     * substrings and the max result is returned.  If the end of string is encountered then all\\n     * characters are assumed to be valid and the length of the substring is returned.\\n     */\\n    \\n    public int longestSubstring(String s, int k) \\n    {\\n        return process( s, k );\\n    }\\n    \\n    private static int process( String s, int k )\\n    {\\n        int     len = s.length();\\n        \\n        if( len < k )   return 0;\\n        if( k == 1 )    return len;\\n        \\n        Map<Character, Integer>     frq = new HashMap<Character, Integer>();\\n        int                         div = 0;\\n        \\n        // --- map the frequency ---\\n        \\n        for( char c : s.toCharArray() )\\n        {\\n            frq.put( c, frq.getOrDefault( c, 0 ) + 1 );\\n        }\\n        \\n        // --- find the divide ---\\n                \\n        while( div < len && frq.get( s.charAt( div ) ) >= k )\\n        {\\n            div++;\\n        }\\n        \\n        // --- process pre/post divide and return max ---\\n        \\n        return  ( div == len )\\n                                ?   len\\n                                :   Math.max(    \\n                                        process( s.substring( 0, div ),  k ), \\n                                        process( s.substring( div + 1 ), k ) \\n                                    );\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949638,
                "title": "c-using-map-well-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.length();\\n        if(n==0 || k>n){\\n            return 0;\\n        }\\n        map<int,int>mp;\\n        for(int i=0;i<n;i++){\\n            mp[s[i]]++;  //frequency map \\n        }\\n        int j=0;\\n        while(j<n && mp[s[j]]>=k){\\n            j++;  //if frequency of each character is more than k \\n            }\\n            if(j>=n-1){\\n                return j; //if we reach the end of string\\n            }\\n        int substring1=longestSubstring(s.substr(0,j),k); \\n        while(j<n && mp[s[j]]<k){ // if more than one character appears which has frequency less than k\\n            j++;\\n        }\\n        int substring2;\\n        if(j<n){ \\n             substring2=longestSubstring(s.substr(j),k);\\n        }else{\\n             substring2=0;\\n        }\\n        return max(substring1,substring2);\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.length();\\n        if(n==0 || k>n){\\n            return 0;\\n        }\\n        map<int,int>mp;\\n        for(int i=0;i<n;i++){\\n            mp[s[i]]++;  //frequency map \\n        }\\n        int j=0;\\n        while(j<n && mp[s[j]]>=k){\\n            j++;  //if frequency of each character is more than k \\n            }\\n            if(j>=n-1){\\n                return j; //if we reach the end of string\\n            }\\n        int substring1=longestSubstring(s.substr(0,j),k); \\n        while(j<n && mp[s[j]]<k){ // if more than one character appears which has frequency less than k\\n            j++;\\n        }\\n        int substring2;\\n        if(j<n){ \\n             substring2=longestSubstring(s.substr(j),k);\\n        }else{\\n             substring2=0;\\n        }\\n        return max(substring1,substring2);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 392474,
                "title": "java-2-pass-strict-o-n-divide-and-conquer-unlike-other-posts",
                "content": "Came up by myself before seeing any discussion solution.\\nThe key idea here is to record ```count``` of each character at every position, and record the index of each occurrence of a character.\\nThere will be two passes. The first pass is to calculate the ```count``` array and ```idxs``` array. The second pass is ```divide and conquer``` call. Each index will be examined at most once. Therefore O(n) in total.\\n```\\nclass Solution {\\n    private int result = 0;\\n    \\n    public int longestSubstring(String s, int k) {\\n        if (s == null || k <= 0 || s.length() < k) return result;\\n        \\n        char[] arr = s.toCharArray();\\n        int n = arr.length;\\n        // count[char][i] is the count of char before index i (exclusive) in arr\\n        int[][] count = new int[26][n + 1];\\n        // idxs[char][i] is the index of char\\'s i-th occurrence in arr\\n        int[][] idxs = new int[26][n + 1];\\n        \\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < 26; j++) count[j][i + 1] = count[j][i];\\n            int c = arr[i] - \\'a\\';\\n            count[c][i + 1]++;\\n            idxs[c][count[c][i + 1]] = i;\\n        }\\n        \\n        divideNconquer(0, n, k, count, idxs);\\n        return result;\\n    }\\n    // test range [left, right)\\n    private void divideNconquer(int left, int right, int k, int[][] count, int[][] idxs) {\\n        if (right - left <= result) return;\\n        \\n        int invalid = invalidChar(left, right, k, count);\\n\\n        if (invalid < 0) {\\n\\t\\t    // it\\'s valid, we update the result\\n            result = right - left;\\n            return;\\n        }\\n        // it\\'s invalid; we discard this character.\\n        // we can test every range between this character\\'s occurrences;\\n\\t\\t// for example, if the invalid char is \\'a\\', and the original range looks like: {...... a ... a ........... a ...}\\n\\t\\t// Then every consecutive dotted range above will be tested in the next recursion call.\\n        int leftOccurrenceCt = count[invalid][left] + 1;\\n        int rightOccurrenceCt = count[invalid][right];\\n        while (leftOccurrenceCt <= rightOccurrenceCt) {\\n            int end = idxs[invalid][leftOccurrenceCt];\\n            divideNconquer(left, end, k, count, idxs);\\n            left = end + 1;\\n            leftOccurrenceCt = count[invalid][left] + 1;\\n        }\\n        // the last range\\n        divideNconquer(idxs[invalid][rightOccurrenceCt] + 1, right, k, count, idxs);\\n    }\\n    \\n    \\n    // if it returns -1, it means the range is valid;\\n    // otherwise, it returns a char that\\'s invalid;\\n    private int invalidChar(int left, int right, int k, int[][] count) {\\n        for (int c = 0; c < 26; c++) {\\n            int occurrence = count[c][right] - count[c][left];\\n            if (occurrence > 0 && occurrence < k) return c;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```count```\n```count```\n```idxs```\n```divide and conquer```\n```\\nclass Solution {\\n    private int result = 0;\\n    \\n    public int longestSubstring(String s, int k) {\\n        if (s == null || k <= 0 || s.length() < k) return result;\\n        \\n        char[] arr = s.toCharArray();\\n        int n = arr.length;\\n        // count[char][i] is the count of char before index i (exclusive) in arr\\n        int[][] count = new int[26][n + 1];\\n        // idxs[char][i] is the index of char\\'s i-th occurrence in arr\\n        int[][] idxs = new int[26][n + 1];\\n        \\n        for (int i = 0; i < n; i++) {\\n            for (int j = 0; j < 26; j++) count[j][i + 1] = count[j][i];\\n            int c = arr[i] - \\'a\\';\\n            count[c][i + 1]++;\\n            idxs[c][count[c][i + 1]] = i;\\n        }\\n        \\n        divideNconquer(0, n, k, count, idxs);\\n        return result;\\n    }\\n    // test range [left, right)\\n    private void divideNconquer(int left, int right, int k, int[][] count, int[][] idxs) {\\n        if (right - left <= result) return;\\n        \\n        int invalid = invalidChar(left, right, k, count);\\n\\n        if (invalid < 0) {\\n\\t\\t    // it\\'s valid, we update the result\\n            result = right - left;\\n            return;\\n        }\\n        // it\\'s invalid; we discard this character.\\n        // we can test every range between this character\\'s occurrences;\\n\\t\\t// for example, if the invalid char is \\'a\\', and the original range looks like: {...... a ... a ........... a ...}\\n\\t\\t// Then every consecutive dotted range above will be tested in the next recursion call.\\n        int leftOccurrenceCt = count[invalid][left] + 1;\\n        int rightOccurrenceCt = count[invalid][right];\\n        while (leftOccurrenceCt <= rightOccurrenceCt) {\\n            int end = idxs[invalid][leftOccurrenceCt];\\n            divideNconquer(left, end, k, count, idxs);\\n            left = end + 1;\\n            leftOccurrenceCt = count[invalid][left] + 1;\\n        }\\n        // the last range\\n        divideNconquer(idxs[invalid][rightOccurrenceCt] + 1, right, k, count, idxs);\\n    }\\n    \\n    \\n    // if it returns -1, it means the range is valid;\\n    // otherwise, it returns a char that\\'s invalid;\\n    private int invalidChar(int left, int right, int k, int[][] count) {\\n        for (int c = 0; c < 26; c++) {\\n            int occurrence = count[c][right] - count[c][left];\\n            if (occurrence > 0 && occurrence < k) return c;\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 386049,
                "title": "simple-python3-solution-faster-than-98",
                "content": "Every time input a new string and k, count each character first. \\nFind the character (illegal character) whose count is less than k, which means final substring cannot include such character.\\nTherefore, split the raw string into several substrings according to these illegal characters. \\nRepeat above on these substrings and return their max value.\\n\\n\\n    class Solution:\\n\\t\\tdef longestSubstring(self, s: str, k: int) -> int:\\n\\t\\t\\treturn self.check(s, k)\\n\\t\\t\\n\\t\\tdef check(self, s, k):\\n\\t\\t\\tif len(s) == 0:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\td = {}\\n\\t\\t\\tfor l in s:\\n\\t\\t\\t\\ttry:\\n\\t\\t\\t\\t\\td[l] += 1\\n\\t\\t\\t\\texcept:\\n\\t\\t\\t\\t\\td[l] = 1\\n\\t\\t\\tstop = []\\n\\t\\t\\tfor key in d.keys():\\n\\t\\t\\t\\tif d[key] < k:\\n\\t\\t\\t\\t\\tstop.append(key)\\n\\t\\t\\tif len(stop) == 0:\\n\\t\\t\\t\\treturn len(s)\\n\\t\\t\\tvalid_s = []\\n\\t\\t\\tstart = 0\\n\\t\\t\\tfor i in range(len(s)):\\n\\t\\t\\t\\tif s[i] in stop:\\n\\t\\t\\t\\t\\tvalid_s.append(s[start:i])\\n\\t\\t\\t\\t\\tstart = i+1\\n\\t\\t\\tvalid_s.append(s[start:])\\n\\t\\t\\tmax_v = 0\\n\\t\\t\\tfor vs in valid_s:\\n\\t\\t\\t\\tif len(vs) == 0:\\n\\t\\t\\t\\t\\tcontinue\\n\\t\\t\\t\\ttmp = self.check(vs, k)\\n\\t\\t\\t\\tif tmp > max_v:\\n\\t\\t\\t\\t\\tmax_v = tmp\\n\\t\\t\\treturn max_v",
                "solutionTags": [
                    "Python3"
                ],
                "code": "class Solution:\\n\\t\\tdef longestSubstring(self, s: str, k: int) -> int:\\n\\t\\t\\treturn self.check(s, k)\\n\\t\\t\\n\\t\\tdef check(self, s, k):\\n\\t\\t\\tif len(s) == 0:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\td = {}",
                "codeTag": "Java"
            },
            {
                "id": 87775,
                "title": "java-hashmap-solution-worst-case-o-n-2-26",
                "content": "These commented blocks are for speeding up the code, in case of Time Limit Exceed.Basically,denote index as the position of each character in String s,I use a HashMap<index,int[]> to store the occurence of all characters in input s[0,index],index inclusively,which, ranges from 0 to s.length()-1;every substring then can be expressed as map.get(i)-map.get(j), 0<=j<i, we can just check whether if it's valid,update the maxLen and also the hashmap.\\n\\nI was totally inspired by a guy and he gave an idea of solving subarray/substring problem, and it's stunning!\\nhttps://discuss.leetcode.com/topic/33537/java-o-n-explain-how-i-come-up-with-this-idea\\n\\n\\n\\n```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        HashMap<Integer,int[]> map=new HashMap<>();\\n        int maxLen=0;\\n        map.put(-1,new int[26]);\\n        for(int i=0;i<s.length();i++){\\n            int[] curr=Arrays.copyOf(map.get(i-1),26);\\n            curr[s.charAt(i)-'a']++;\\n            // if(i+1<k){\\n            //     map.put(i,curr);\\n            //     continue;\\n            // }\\n            for(int j=-1;j<i;j++){\\n                // if(i-j<k){\\n                //     continue;\\n                // }\\n                int[] tmp=map.get(j);\\n                boolean flag=true;\\n                for(int m=0;m<26;m++){\\n                    if(curr[m]!=tmp[m]&&curr[m]-tmp[m]<k){\\n                        flag=false;\\n                        break;\\n                    }\\n                }\\n                \\n                if(flag){\\n\\t\\t    maxLen=Math.max(maxLen,i-j);\\n                    break;\\n                }\\n            }\\n            map.put(i,curr);\\n       }\\n       return maxLen;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        HashMap<Integer,int[]> map=new HashMap<>();\\n        int maxLen=0;\\n        map.put(-1,new int[26]);\\n        for(int i=0;i<s.length();i++){\\n            int[] curr=Arrays.copyOf(map.get(i-1),26);\\n            curr[s.charAt(i)-'a']++;\\n            // if(i+1<k){\\n            //     map.put(i,curr);\\n            //     continue;\\n            // }\\n            for(int j=-1;j<i;j++){\\n                // if(i-j<k){\\n                //     continue;\\n                // }\\n                int[] tmp=map.get(j);\\n                boolean flag=true;\\n                for(int m=0;m<26;m++){\\n                    if(curr[m]!=tmp[m]&&curr[m]-tmp[m]<k){\\n                        flag=false;\\n                        break;\\n                    }\\n                }\\n                \\n                if(flag){\\n\\t\\t    maxLen=Math.max(maxLen,i-j);\\n                    break;\\n                }\\n            }\\n            map.put(i,curr);\\n       }\\n       return maxLen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 984586,
                "title": "clean-and-simple-c",
                "content": "```\\nint helper(string &s, int k,int start,int end)\\n{\\n\\tint hashmap[256]={0};\\n\\tfor(int i=start;i<end;i++)\\n\\t{\\n\\t\\thashmap[s[i]]++;\\n\\t}\\n\\tfor(int i=start;i<end;i++)\\n\\t{\\n\\t\\tif(hashmap[s[i]]<k)\\n\\t\\t\\treturn max(helper(s,k,start,i),helper(s,k,i+1,end));\\n\\t}\\n\\treturn end-start;\\n}\\nint longestSubstring(string s, int k) {\\n\\treturn helper(s,k,0,s.length());\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint helper(string &s, int k,int start,int end)\\n{\\n\\tint hashmap[256]={0};\\n\\tfor(int i=start;i<end;i++)\\n\\t{\\n\\t\\thashmap[s[i]]++;\\n\\t}\\n\\tfor(int i=start;i<end;i++)\\n\\t{\\n\\t\\tif(hashmap[s[i]]<k)\\n\\t\\t\\treturn max(helper(s,k,start,i),helper(s,k,i+1,end));\\n\\t}\\n\\treturn end-start;\\n}\\nint longestSubstring(string s, int k) {\\n\\treturn helper(s,k,0,s.length());\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 949566,
                "title": "python-prefix-sum",
                "content": "This is once again a prefix sum problem, but I\\'d say its rating is somewhere between Medium and Hard. \\n\\nSince the string consists of only lowercase letters, there are `O(1)` choices of letters. This will be the key. For each character we will store an array of prefix sums, where, for example, `prefix[\\'a\\'][5]` is the frequency of `a` in `s[0:5]`. \\n\\nOnce we have `prefix`, we loop over `s`. During the loop we have another hash table called `last` which keeps the last seen position of each character (up to the current index). Now if a character has frequency `0 < prefix[char] < k` this violates the frequency requirement. In that case we update the left-end of the array s.t. `left = last[char] + 1`. This ensures that we get rid of all problematic letters.\\n\\nNow you have the substring `s[left:i]`. Do one more loop and check if every letter satisfies the frequency requirement. This check is necessary, as a letter that satisfied the requirement in `s[0:i]` may no longer do so in `s[left:i]`. But if all of them do, then update `ans` accordingly.\\n\\nTime: `O(N)`\\nSpace: `O(N)`\\n\\n```python\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        #prefix holds prefix sums for each character\\n        prefix, tmp = defaultdict(list), defaultdict(int)\\n        for c in s:\\n            tmp[c] += 1\\n            for i in range(97,123):\\n                ci = chr(i)\\n                prefix[ci].append(tmp[ci])\\n        \\n        ans = 0 #answer of the question\\n        last = defaultdict(int) #last seen position of each character so far\\n        for i,c in enumerate(s):\\n            last[c] = i #update last seen position for the current character\\n            #get rid of all characters that have frequency < k\\n            left = -1\\n            for j in range(97,123):\\n                cj = chr(j)\\n                if 0 < prefix[cj][i] < k:\\n                    left = max(left, last[cj]) #letter violates frequency requirement, update left\\n            #now you are left with string[left+1:i]\\n            #check if this substring satisfies the frequenct requirement\\n            flag = True\\n            for j in range(97,123):\\n                cj = chr(j)\\n                if 0 < prefix[cj][i]-prefix[cj][left] < k:\\n                    flag = False #frequency condition violated\\n                    break\\n            if flag: \\n                ans = max(ans, i-left) #this is a valid substring, compare to the current ans\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def longestSubstring(self, s, k):\\n        #prefix holds prefix sums for each character\\n        prefix, tmp = defaultdict(list), defaultdict(int)\\n        for c in s:\\n            tmp[c] += 1\\n            for i in range(97,123):\\n                ci = chr(i)\\n                prefix[ci].append(tmp[ci])\\n        \\n        ans = 0 #answer of the question\\n        last = defaultdict(int) #last seen position of each character so far\\n        for i,c in enumerate(s):\\n            last[c] = i #update last seen position for the current character\\n            #get rid of all characters that have frequency < k\\n            left = -1\\n            for j in range(97,123):\\n                cj = chr(j)\\n                if 0 < prefix[cj][i] < k:\\n                    left = max(left, last[cj]) #letter violates frequency requirement, update left\\n            #now you are left with string[left+1:i]\\n            #check if this substring satisfies the frequenct requirement\\n            flag = True\\n            for j in range(97,123):\\n                cj = chr(j)\\n                if 0 < prefix[cj][i]-prefix[cj][left] < k:\\n                    flag = False #frequency condition violated\\n                    break\\n            if flag: \\n                ans = max(ans, i-left) #this is a valid substring, compare to the current ans\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87774,
                "title": "simple-java-o-n-solution",
                "content": "The exact time complexity is O(26n) = O(n), where n is the length of the input string.\\nThe proof is simply that every time, we remove a letter (all of that one) from string (or sub-string). So the maximum level of recursion tree is 26, since there are only 26 letters in this case. And at each level, the total characters we need process are no more than n. Thus, the time complexity is O(n).\\n\\nVisualization:\\n\\n[00000000000000000000000000]  number of kinds of letters remained: no more than L (L<=26);\\n[000000000].....[000000]...[00000]  number of kinds of letters remained  no more than L-1;\\n...\\n...\\n...\\n\\nSo the total level is no more than 26;\\n\\n\\n```\\npublic int longestSubstring(String s, int k) {\\n        int[] map = new int[26];\\n        for(int i=0;i<s.length();i++) {\\n            map[s.charAt(i)-'a']++;\\n        }\\n        char noChar = 'a';\\n        boolean containsNoChar = false;\\n        for(int i=0;i<26;i++) {\\n            noChar = (char)('a'+i);\\n            if(map[i]<k&&map[i]!=0) {\\n                containsNoChar = true;\\n                break;\\n            }\\n        }\\n        if(containsNoChar==false) return s.length();\\n        int ans = 0;\\n        int start = 0;\\n        while(s.indexOf(noChar, start)!=-1) {\\n            int end = s.indexOf(noChar, start);\\n            ans = Math.max(ans, longestSubstring(s.substring(start,end), k));\\n            start = end + 1;\\n        }\\n        ans = Math.max(ans, longestSubstring(s.substring(start,s.length()), k));\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int longestSubstring(String s, int k) {\\n        int[] map = new int[26];\\n        for(int i=0;i<s.length();i++) {\\n            map[s.charAt(i)-'a']++;\\n        }\\n        char noChar = 'a';\\n        boolean containsNoChar = false;\\n        for(int i=0;i<26;i++) {\\n            noChar = (char)('a'+i);\\n            if(map[i]<k&&map[i]!=0) {\\n                containsNoChar = true;\\n                break;\\n            }\\n        }\\n        if(containsNoChar==false) return s.length();\\n        int ans = 0;\\n        int start = 0;\\n        while(s.indexOf(noChar, start)!=-1) {\\n            int end = s.indexOf(noChar, start);\\n            ans = Math.max(ans, longestSubstring(s.substring(start,end), k));\\n            start = end + 1;\\n        }\\n        ans = Math.max(ans, longestSubstring(s.substring(start,s.length()), k));\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 87771,
                "title": "java-nlogn-recursive-solution-by-dividing-the-string-into-substrings-15ms",
                "content": "Count the times that each characters appear, and if any characters appear less than k time, divide the string to substring until the substring meets the requirement\\n\\npublic class Solution {\\n\\n    public int longestSubstring(String s, int k) {\\n        char[] schar=s.toCharArray();\\n        return longest(schar,0,schar.length-1,k);\\n    }\\n    public int longest(char[] schar,int start,int end,int k){\\n        if(end-start+1<k){\\n            return 0;\\n        }\\n        Map<Character,List<Integer>> map=new HashMap<Character,List<Integer>>();\\n        for(int i=start;i<=end;i++){   //count hwo many times each characters appears\\n            if(!map.containsKey(schar[i])){\\n                List<Integer> newlist=new ArrayList<Integer>();\\n                map.put(schar[i],newlist);\\n            }\\n            map.get(schar[i]).add(i);\\n        }\\n        List<Integer> less=new ArrayList<Integer>();\\n        for(char c:map.keySet()){\\n            if(map.get(c).size()<k){\\n                less.addAll(map.get(c));\\n            }\\n        }\\n        if(less.size()==0){\\n            return end-start+1;\\n        }\\n        int max=0;\\n        Collections.sort(less);\\n        less.add(end+1);\\n        int last=start-1;\\n        for(int i=0;i<less.size();i++){               //divide the string into substrirng\\n            int cur=less.get(i);\\n            max=Math.max(max,longest(schar,last+1,cur-1,k));\\n            last=cur;\\n        }\\n        return max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int longestSubstring(String s, int k) {\\n        char[] schar=s.toCharArray();\\n        return longest(schar,0,schar.length-1,k);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 87819,
                "title": "java-solution-using-2d-array-to-store-letter-occurrences-17ms",
                "content": " *The for-loop for `end` is executed for at most 26 times under each `start`. So, since we consider 26 as a constant, the loops take O(n).*\\n\\n*However, thanks to @StefanPochmann, I noticed that my indexOf() takes O(n) time too, so it is O(n^2) in worst case.*\\n\\nFirst, traverse the string to store how many times each letter has occurred from 0 to i.\\nThen, find the longest working substring starting at each position, with the starting point from left to right.\\n\\nThe key to not get TLE is to start with the longest, then (1) if the long substring does not work, cut its tail to exclude the letter that makes it not working (2) obviously, if the long substring works, no need to check its substrings shorter than it (3) [most important to get \"aaaaaaa....a\" test case to work] if `s.length() - start` is already smaller than the known working longest substring, we are done.\\n\\nBy the way, as I have commented, I could have deleted some characters that didn't appear at all to decrease the constant.\\n```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() < 1) return 0;\\n\\n        int[][] letters = new int[26][s.length() + 1];\\n        for (int i = 0; i < s.length(); i++) {\\n            for (int c = 0; c < 26; c++) {\\n                letters[c][i+1] = letters[c][i];\\n            }\\n            letters[s.charAt(i) - 'a'][i+1] += 1;\\n        }\\n        // May also optimize by deleting letters entries with 0 at end\\n        \\n        int longest = 0;\\n        for (int start = 0; start < s.length(); start++) {\\n            if (longest >= s.length() - start) return longest;\\n            for (int end = s.length(); end > start; end--) {\\n                boolean works = true;\\n                for (int c = 0; c < 26; c++) {\\n                    int num = letters[c][end] - letters[c][start];\\n                    if (num < k && num > 0) {\\n                        works = false;\\n                        end = s.indexOf('a' + c, start) + 1;\\n                        break;\\n                    }\\n                }\\n                if (works) {\\n                    if (end - start > longest) longest = end - start;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return longest;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() < 1) return 0;\\n\\n        int[][] letters = new int[26][s.length() + 1];\\n        for (int i = 0; i < s.length(); i++) {\\n            for (int c = 0; c < 26; c++) {\\n                letters[c][i+1] = letters[c][i];\\n            }\\n            letters[s.charAt(i) - 'a'][i+1] += 1;\\n        }\\n        // May also optimize by deleting letters entries with 0 at end\\n        \\n        int longest = 0;\\n        for (int start = 0; start < s.length(); start++) {\\n            if (longest >= s.length() - start) return longest;\\n            for (int end = s.length(); end > start; end--) {\\n                boolean works = true;\\n                for (int c = 0; c < 26; c++) {\\n                    int num = letters[c][end] - letters[c][start];\\n                    if (num < k && num > 0) {\\n                        works = false;\\n                        end = s.indexOf('a' + c, start) + 1;\\n                        break;\\n                    }\\n                }\\n                if (works) {\\n                    if (end - start > longest) longest = end - start;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return longest;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3377644,
                "title": "easy-solution-in-c-using-simple-map",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        map<char,int>mp;\\n          for(int i=0; i<s.size(); i++){\\n              mp[s[i]]++;\\n          }\\n\\n         int j=0;\\n        while(j<s.size() and mp[s[j]]>=k){\\n            j++;\\n        }\\n         if(j==s.size()) return j;\\n\\n        int lft = longestSubstring(s.substr(0,j),k);\\n        int rt = longestSubstring(s.substr(j+1),k);\\n\\n        return max(lft,rt);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        map<char,int>mp;\\n          for(int i=0; i<s.size(); i++){\\n              mp[s[i]]++;\\n          }\\n\\n         int j=0;\\n        while(j<s.size() and mp[s[j]]>=k){\\n            j++;\\n        }\\n         if(j==s.size()) return j;\\n\\n        int lft = longestSubstring(s.substr(0,j),k);\\n        int rt = longestSubstring(s.substr(j+1),k);\\n\\n        return max(lft,rt);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3187814,
                "title": "c-sliding-window-detailed-explanation",
                "content": "In this problem, we want to get the longest substring that _all of its characters_ have _at least k instances_.\\n\\n1. We will divide the problem into the subproblem of finding the longest substring that contains 1 unique characer, and at least k instances of that characer.\\n\\n2. Then solve the same problem, but with a substring of 2 uniques, then with substring with 3 uniques, and so on, till we process substrings with 26 uniques (max number of uniques, since we deal with lowercase characters only).\\n\\n3. Then find the best answer of them all.\\n\\n__Time Complexity__: O(n * 26) = O(n).\\n__Space Complexity__: O(n).\\n\\n```c++\\nint longestSubStringWithMaxUniquesAndAtLeastKFrequency(string s, int maxUniques, int k) {\\n    unordered_map<char, int> subStringCountMap;\\n    int j = 0, currSubstringUniquesCount = 0, charsWithAtLeastKOccurances = 0, result = 0, n = s.size();\\n\\n    for (int i = 0; i < n; i++) {\\n        if (subStringCountMap[ s[i] ] == 0) currSubstringUniquesCount++;\\n        subStringCountMap[ s[i] ]++;\\n        if (subStringCountMap[ s[i] ] == k) charsWithAtLeastKOccurances++;\\n\\n        while (currSubstringUniquesCount > maxUniques && j < n) {\\n            if (subStringCountMap[ s[j] ] == k)  charsWithAtLeastKOccurances--;\\n            subStringCountMap[ s[j] ]--;\\n            if (subStringCountMap[ s[j] ] == 0)  currSubstringUniquesCount--;\\n            j++;\\n        }\\n\\n        // If **all** characters in this substring have at least k occurances\\n        if (currSubstringUniquesCount == charsWithAtLeastKOccurances) {\\n            result = max(i - j + 1, result);\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nint longestSubstring(string s, int k) {\\n    int result = 0;\\n\\n    for (int i = 1; i <= 26; i++) {\\n        int localResult = longestSubStringWithMaxUniquesAndAtLeastKFrequency(s, i, k);\\n        result = max(localResult, result);\\n    }\\n\\n    return result;\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```c++\\nint longestSubStringWithMaxUniquesAndAtLeastKFrequency(string s, int maxUniques, int k) {\\n    unordered_map<char, int> subStringCountMap;\\n    int j = 0, currSubstringUniquesCount = 0, charsWithAtLeastKOccurances = 0, result = 0, n = s.size();\\n\\n    for (int i = 0; i < n; i++) {\\n        if (subStringCountMap[ s[i] ] == 0) currSubstringUniquesCount++;\\n        subStringCountMap[ s[i] ]++;\\n        if (subStringCountMap[ s[i] ] == k) charsWithAtLeastKOccurances++;\\n\\n        while (currSubstringUniquesCount > maxUniques && j < n) {\\n            if (subStringCountMap[ s[j] ] == k)  charsWithAtLeastKOccurances--;\\n            subStringCountMap[ s[j] ]--;\\n            if (subStringCountMap[ s[j] ] == 0)  currSubstringUniquesCount--;\\n            j++;\\n        }\\n\\n        // If **all** characters in this substring have at least k occurances\\n        if (currSubstringUniquesCount == charsWithAtLeastKOccurances) {\\n            result = max(i - j + 1, result);\\n        }\\n    }\\n\\n    return result;\\n}\\n\\nint longestSubstring(string s, int k) {\\n    int result = 0;\\n\\n    for (int i = 1; i <= 26; i++) {\\n        int localResult = longestSubStringWithMaxUniquesAndAtLeastKFrequency(s, i, k);\\n        result = max(localResult, result);\\n    }\\n\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2786191,
                "title": "divide-and-conquer-easy-to-understand-commented",
                "content": "Intution: If frequency of any character in the current string is less than k then it can\\'t be part of any substring hence we will divide our string from that character.\\n\\neg. s = \"abaccd\", k = 2\\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"abaccd\" (In this string \\'b\\' and \\'d\\' are less than k times  so divide from \\'b\\')\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/      \\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\"a\"      \"accd\"     (In this substring a and d are 1 time (< k) so will divide from \\'a\\' \\n\\t\\t\\t\\t\\t\\t\\t\\t\\t/ \\\\        /  \\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\"\"     \"\"     \"\"   \"ccd\"\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t/  \\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\"cc\"    \"d\"        (\"cc\" returns 2 as here all chars are greater than k(2) times)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t/  \\\\\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  \"\"    \"\"    (Empty string returns 0)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  \\nThose substrings which have more than 1 characters having frequency less than k we are dividing it from first occurance of that character rest of the division will be handled in further substrings.\\nFor example at the 2nd level there are 2 chars \\'a\\' and \\'d\\' having frequency less than k but we are dividing it from first occurance of that character \\'a\\' But division from char \\'d\\' is handled at next level 3.\\nWe can divide it from all those characters at the same time but it will be little bit complex.\\n\\n```\\nclass Solution {\\npublic:\\n    int helper(int lo, int hi, string &s, int k){\\n        if(lo > hi)return 0;//empty substring\\n        \\n        unordered_map<int, int> m;\\n        for(int i = lo;i <= hi;i++){//storing frequencies of every character in current substring\\n            m[s[i]]++;\\n        }\\n        int breakPoint = -1;\\n        for(int i = lo;i <= hi;i++){//Checking if any characters frequncy is less than k or not\\n            if(m[s[i]] < k){\\n                breakPoint = i;\\n                break;\\n            }\\n        }\\n        if(breakPoint == -1)return (hi - lo + 1);//when every char in substring are greater or equal to k times\\n\\t\\t//else divide and conquer\\n\\t\\tint left = helper(lo, breakPoint - 1, s, k);\\n\\t\\tint right = helper(breakPoint + 1, hi, s, k)\\n\\t\\t\\n        return max(left, right);\\n    }\\n    int longestSubstring(string s, int k) {\\n        return helper(0, s.size() - 1, s, k);\\n    }\\n};\\n```\\n\\nPlease Upvote if you find it helpfull.",
                "solutionTags": [
                    "C",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int helper(int lo, int hi, string &s, int k){\\n        if(lo > hi)return 0;//empty substring\\n        \\n        unordered_map<int, int> m;\\n        for(int i = lo;i <= hi;i++){//storing frequencies of every character in current substring\\n            m[s[i]]++;\\n        }\\n        int breakPoint = -1;\\n        for(int i = lo;i <= hi;i++){//Checking if any characters frequncy is less than k or not\\n            if(m[s[i]] < k){\\n                breakPoint = i;\\n                break;\\n            }\\n        }\\n        if(breakPoint == -1)return (hi - lo + 1);//when every char in substring are greater or equal to k times\\n\\t\\t//else divide and conquer\\n\\t\\tint left = helper(lo, breakPoint - 1, s, k);\\n\\t\\tint right = helper(breakPoint + 1, hi, s, k)\\n\\t\\t\\n        return max(left, right);\\n    }\\n    int longestSubstring(string s, int k) {\\n        return helper(0, s.size() - 1, s, k);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2549197,
                "title": "easy-sliding-window-approach",
                "content": "\\tclass Solution:\\n\\t\\tdef longestSubstring(self, s: str, k: int) -> int:\\n\\n\\t\\t\\t# number of unique characters available\\n\\t\\t\\tmax_chars = len(set(s))\\n\\t\\t\\tn = len(s)\\n\\t\\t\\tans = 0\\n\\n\\t\\t\\t# for all char from 1 to max_chars \\n\\t\\t\\tfor available_char in range(1,max_chars+1):\\n\\n\\t\\t\\t\\th = {}\\n\\t\\t\\t\\ti = j = 0\\n\\n\\n\\t\\t\\t\\t# simple sliding window approach\\n\\t\\t\\t\\twhile(j < n):\\n\\n\\t\\t\\t\\t\\tif(s[j] not in h):\\n\\t\\t\\t\\t\\t\\th[s[j]] = 0\\n\\t\\t\\t\\t\\th[s[j]] += 1\\n\\n\\t\\t\\t\\t\\t# if len of h is less than no of available chars\\n\\t\\t\\t\\t\\tif(len(h) < available_char):\\n\\t\\t\\t\\t\\t\\tj += 1\\n\\n\\t\\t\\t\\t\\t# if equal then check all have values >=k\\n\\t\\t\\t\\t\\telif(len(h) == available_char):\\n\\t\\t\\t\\t\\t\\tcount = 0\\n\\t\\t\\t\\t\\t\\tfor x in h.values():\\n\\t\\t\\t\\t\\t\\t\\tif(x >= k):\\n\\t\\t\\t\\t\\t\\t\\t\\tcount += 1\\n\\t\\t\\t\\t\\t\\tif(count == available_char):\\n\\t\\t\\t\\t\\t\\t\\tans = max(ans,j - i + 1)\\n\\t\\t\\t\\t\\t\\tj += 1\\n\\n\\t\\t\\t\\t\\t# if greater than remove from starting\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\twhile(len(h) != available_char):\\n\\t\\t\\t\\t\\t\\t\\th[s[i]] -= 1\\n\\t\\t\\t\\t\\t\\t\\tif(h[s[i]] == 0):\\n\\t\\t\\t\\t\\t\\t\\t\\tdel h[s[i]]\\n\\t\\t\\t\\t\\t\\t\\ti += 1\\n\\t\\t\\t\\t\\t\\tj += 1\\n\\n\\t\\t\\treturn ans\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "class Solution:\\n\\t\\tdef longestSubstring(self, s: str, k: int) -> int:\\n\\n\\t\\t\\t# number of unique characters available\\n\\t\\t\\tmax_chars = len(set(s))\\n\\t\\t\\tn = len(s)\\n\\t\\t\\tans = 0\\n\\n\\t\\t\\t# for all char from 1 to max_chars \\n\\t\\t\\tfor available_char in range(1,max_chars+1):\\n\\n\\t\\t\\t\\th = {}",
                "codeTag": "Java"
            },
            {
                "id": 2539224,
                "title": "c-explained-with-comments-sliding-window",
                "content": "Here is my code with comments!\\n///\\n\\nclass Solution {\\npublic:\\n\\n    int help(string s, int k , int totalUnique)\\n    {\\n        int i = 0 , j = 0 , CurrUnique = 0,AtleastKCount = 0;\\n        int ans = 0;\\n        vector<int> Char(26,0);  // initialized array of 26 size each with 0 value \\n        while(j < s.length())\\n        {\\n            if(!Char[s[j]-\\'a\\'])  // if value is not zero then add and increase currunique\\n                CurrUnique++;\\n            \\n            Char[s[j]-\\'a\\']++;   // if there, increase the count \\n            \\n            if(Char[s[j]-\\'a\\'] == k)   // if occurence is equal to k then it is a potential ans \\n                AtleastKCount++;\\n            j++;\\n            \\n            while(CurrUnique > totalUnique)  // if unique elements increases then remove \\n            {\\n                if(Char[s[i]-\\'a\\'] == k)   // remove k count if ith ele and jth ele are same\\n                    AtleastKCount--; \\n                Char[s[i]-\\'a\\']--;      // otherwise decrement the first ele count\\n                if(!Char[s[i]-\\'a\\'])\\n                    CurrUnique--;    // if ele count become zero decrease the unique count too\\n                i++;                 // repeat this until curruniqe < totalunique\\n            }\\n            \\n            if(CurrUnique == AtleastKCount)   // to get ans check currUnique == AtleastKCount to get \\n                ans = max(ans,j-i);           // one possible ans and maximize the window\\n            \\n        }\\n        return ans;\\n        \\n    }\\n        int longestSubstring(string s, int k) {\\n        set<char> st;\\n        for(auto ele : s)  // To count total unique character, we insert into set and get the size\\n            st.insert(ele);\\n        \\n        int res = 0; \\n        for(int i = 1 ; i <= st.size() ; i++)\\n        {\\n            res = max(res,help(s,k,i));   // get the maximum window for each(i) unique character \\n        }\\n        return res;\\n    }\\n\\n};\\n\\n|| UPVOTE ||\\n\\n",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int help(string s, int k , int totalUnique)\\n    {\\n        int i = 0 , j = 0 , CurrUnique = 0,AtleastKCount = 0;\\n        int ans = 0;\\n        vector<int> Char(26,0);  // initialized array of 26 size each with 0 value \\n        while(j < s.length())\\n        {\\n            if(!Char[s[j]-\\'a\\'])  // if value is not zero then add and increase currunique\\n                CurrUnique++;\\n            \\n            Char[s[j]-\\'a\\']++;   // if there, increase the count \\n            \\n            if(Char[s[j]-\\'a\\'] == k)   // if occurence is equal to k then it is a potential ans \\n                AtleastKCount++;\\n            j++;\\n            \\n            while(CurrUnique > totalUnique)  // if unique elements increases then remove \\n            {\\n                if(Char[s[i]-\\'a\\'] == k)   // remove k count if ith ele and jth ele are same\\n                    AtleastKCount--; \\n                Char[s[i]-\\'a\\']--;      // otherwise decrement the first ele count\\n                if(!Char[s[i]-\\'a\\'])\\n                    CurrUnique--;    // if ele count become zero decrease the unique count too\\n                i++;                 // repeat this until curruniqe < totalunique\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2308043,
                "title": "a-simple-divide-and-conquer-question",
                "content": "```\\nclass Solution {\\npublic:\\n    int answer(string s, int k){\\n        map<char,int>mp;\\n        for(int i=0; i<s.size(); i++){\\n            mp[s[i]]++;\\n        }\\n        int index=0;\\n        while(index<s.size()&&mp[s[index]]>=k){\\n            index++;\\n        }\\n        if(index==s.size())\\n            return s.size();\\n        int left=answer(s.substr(0,index),k);\\n        while(index<s.size()&&mp[s[index]]<k){\\n            index++;\\n        }\\n        int right=answer(s.substr(index,s.size()-index),k);\\n        return max(left,right);\\n    }\\n    int longestSubstring(string s, int k) {\\n        return answer(s,k);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int answer(string s, int k){\\n        map<char,int>mp;\\n        for(int i=0; i<s.size(); i++){\\n            mp[s[i]]++;\\n        }\\n        int index=0;\\n        while(index<s.size()&&mp[s[index]]>=k){\\n            index++;\\n        }\\n        if(index==s.size())\\n            return s.size();\\n        int left=answer(s.substr(0,index),k);\\n        while(index<s.size()&&mp[s[index]]<k){\\n            index++;\\n        }\\n        int right=answer(s.substr(index,s.size()-index),k);\\n        return max(left,right);\\n    }\\n    int longestSubstring(string s, int k) {\\n        return answer(s,k);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2257136,
                "title": "python-shortest-solution-faster-than-97-15",
                "content": "**EXPLANATION:**\\n\\nIf any charcter in the string is present less than k times then obviously that character cannot be taken in any substring so we split the string around every occurences of that very character and store the resulting array of string into an array temp. Now we recursively call this function for every string in temp and if every string in temp is a valid substring then we get hold of the one with max length, and return it.\\n\\nNow suppose every element in the string is present at lease k times, then our answer is simply the length of the entire string as it will be the longest one.\\n\\n**CODE:**\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        for ch in set(s):\\n            if s.count(ch) < k:\\n                temp = s.split(ch)\\n                return max(self.longestSubstring(sub, k) for sub in temp)\\n        length = len(s)\\n        return length\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        for ch in set(s):\\n            if s.count(ch) < k:\\n                temp = s.split(ch)\\n                return max(self.longestSubstring(sub, k) for sub in temp)\\n        length = len(s)\\n        return length\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2097893,
                "title": "python-recursion-sliding-window-simple-solution-with-explanation",
                "content": "### Logic:\\n1. Calculate the frequency of each character and store it in a hashmap.\\n2. Now think greedy that any character whose frequency is less than k, will never be a part of a valid substring.\\n3. So whenever any such character is encountered(let\\'s say at ith index) while iterating over the **s**, we could say that a valid substring might be present before ith index if not empty.\\n4. We will partition our string on every such character encountered and check for the valid substring in that partition recursively and get the longest substring among all the partitions.\\n\\n```\\nclass Solution:            \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if k > len(s):\\n            return 0\\n                \\n        freq = {}\\n        for i, ch in enumerate(s):\\n            if ch not in freq:\\n                freq[ch] = 0\\n            freq[ch] += 1\\n        \\n        longSubstring = 0\\n        start = 0\\n        invalidSubstring = False\\n        for end in range(len(s)):\\n            if freq[s[end]] < k:\\n                longSubstring = max(longSubstring, self.longestSubstring(s[start:end], k))\\n                start = end+1\\n                invalidSubstring = True\\n        \\n        if not invalidSubstring:\\n            return len(s)\\n        else:\\n            return max(longSubstring, self.longestSubstring(s[start:], k))\\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python",
                    "Recursion",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:            \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if k > len(s):\\n            return 0\\n                \\n        freq = {}\\n        for i, ch in enumerate(s):\\n            if ch not in freq:\\n                freq[ch] = 0\\n            freq[ch] += 1\\n        \\n        longSubstring = 0\\n        start = 0\\n        invalidSubstring = False\\n        for end in range(len(s)):\\n            if freq[s[end]] < k:\\n                longSubstring = max(longSubstring, self.longestSubstring(s[start:end], k))\\n                start = end+1\\n                invalidSubstring = True\\n        \\n        if not invalidSubstring:\\n            return len(s)\\n        else:\\n            return max(longSubstring, self.longestSubstring(s[start:], k))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2031322,
                "title": "no-fancy-stuff-even-brute-force-accepts-5-lines",
                "content": "```\\n   bool check(vector<int>f,int k){\\n        for(int i=0;i<26;i++)\\n            if(f[i]!=0 && f[i]<k) return 0;\\n        return 1;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int ans{0};\\n        for(int i=0;i<s.length();i++){\\n             vector<int>f(26,0);\\n            for(int j=i;j<s.length();j++){\\n                f[s[j]-\\'a\\']++;\\n                if(f[s[j]-\\'a\\']>=k && check(f,k)) ans=max(ans,j-i+1);\\n            }\\n        }\\n        return ans;\\n    }",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n   bool check(vector<int>f,int k){\\n        for(int i=0;i<26;i++)\\n            if(f[i]!=0 && f[i]<k) return 0;\\n        return 1;\\n    }\\n    int longestSubstring(string s, int k) {\\n        int ans{0};\\n        for(int i=0;i<s.length();i++){\\n             vector<int>f(26,0);\\n            for(int j=i;j<s.length();j++){\\n                f[s[j]-\\'a\\']++;\\n                if(f[s[j]-\\'a\\']>=k && check(f,k)) ans=max(ans,j-i+1);\\n            }\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1937792,
                "title": "easy-c-unordered-map",
                "content": "```\\n    int longestSubstring(string s, int k) {\\n        if(s.size()<k) return 0;\\n        unordered_map<char,int> freq;\\n        for(auto a:s) ++freq[a];\\n        int i=0;\\n        while(i<s.size() and freq[s[i]]>=k) ++i;\\n        if(i==s.size()) return i;\\n        if(i==0) return (s.size()>1)?longestSubstring(s.substr(1,s.size()-1),k):0;\\n        return max(longestSubstring(s.substr(0,i),k),longestSubstring(s.substr(i,s.size()-i),k));\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Divide and Conquer",
                    "Sliding Window"
                ],
                "code": "```\\n    int longestSubstring(string s, int k) {\\n        if(s.size()<k) return 0;\\n        unordered_map<char,int> freq;\\n        for(auto a:s) ++freq[a];\\n        int i=0;\\n        while(i<s.size() and freq[s[i]]>=k) ++i;\\n        if(i==s.size()) return i;\\n        if(i==0) return (s.size()>1)?longestSubstring(s.substr(1,s.size()-1),k):0;\\n        return max(longestSubstring(s.substr(0,i),k),longestSubstring(s.substr(i,s.size()-i),k));\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1570711,
                "title": "simplest-and-intuitive-approach-guaranteed",
                "content": "IDEA :\\n\\nconsider a substring from i to j, observation  that can be made :-\\n1. Every character occurring in substring must be occuring greater than or equal to k times.\\n2. Which means no character should occur  less than k times.\\n3. Which means  if  we encounter a character at position \"m\" (i<=m<=j)  which is occuring less than k times in that particular substring ( from i to j ), then that m should not be included in the answer substring or the part of substring from **i to m-1** will no longer extend its length i.e the substring has now been cut into two parts from **i to m-1** and **m+1 to j**.\\n4. if every character in substring is occuring greater than or equal to k times then the answer would be **j-i+1**.\\n\\n\\nThis forms the basis of recursive solution.\\n```\\nrecursive( i , j ) {\\n\\t\\t1. store frequency of all chars at a place of the  substring from i to j\\n\\t\\t2.loop from i to j \\n\\t\\t\\t2.1 if any character found at index \"m\" having frequency less than or equal to k ( fetched from step 1 ) then call the recursive function from  i to m-1 and m+1 to j , and return the maximum from both the recursive solution.\\n\\t\\t3. if you reach here that means every character in the substring is having frequencey greater than or equal to k so in that case return j-i+1 ;\\n}\\n```\\nCODE :\\n\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\t\\t// driver code\\n         int n =  s.size() ;\\n        return solve(0,n-1,s,k) ;\\n    }\\n    \\n\\t// main util function\\n    \\n    int solve( int i, int j, string s, int k){\\n        // base case,  easy to guess! \\n         if(k==1) return j-i+1 ;\\n         if(i>=j) return 0 ;\\n        \\n        // step 1 , the place to store frequency , one can use maps too!\\n        vector<int> al(26,0) ;\\n         \\n        for( int m = i; m<=j ; m++){\\n             al[s[m]-\\'a\\']++ ;\\n        };\\n        \\n            // step 2 \\n        for( int m = i; m<=j ; m++){\\n\\t\\t\\t//step 2.1\\n             if(al[s[m]-\\'a\\'] < k){\\n                return max( solve(i, m-1,s,k), solve(m+1,j,s,k)); \\n             }\\n        };\\n\\t\\t\\n\\t\\t// step 3 \\n\\t\\t// if you reach here that means the  subtring has all characters having frequency greater than or equal to k \\n         return j-i+1 ;\\n    }\\n    \\n```\\n\\nDont hesitate to discuss any possible pitfalls and do upvote if you liked it .",
                "solutionTags": [],
                "code": "```\\nrecursive( i , j ) {\\n\\t\\t1. store frequency of all chars at a place of the  substring from i to j\\n\\t\\t2.loop from i to j \\n\\t\\t\\t2.1 if any character found at index \"m\" having frequency less than or equal to k ( fetched from step 1 ) then call the recursive function from  i to m-1 and m+1 to j , and return the maximum from both the recursive solution.\\n\\t\\t3. if you reach here that means every character in the substring is having frequencey greater than or equal to k so in that case return j-i+1 ;\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\t\\t// driver code\\n         int n =  s.size() ;\\n        return solve(0,n-1,s,k) ;\\n    }\\n    \\n\\t// main util function\\n    \\n    int solve( int i, int j, string s, int k){\\n        // base case,  easy to guess! \\n         if(k==1) return j-i+1 ;\\n         if(i>=j) return 0 ;\\n        \\n        // step 1 , the place to store frequency , one can use maps too!\\n        vector<int> al(26,0) ;\\n         \\n        for( int m = i; m<=j ; m++){\\n             al[s[m]-\\'a\\']++ ;\\n        };\\n        \\n            // step 2 \\n        for( int m = i; m<=j ; m++){\\n\\t\\t\\t//step 2.1\\n             if(al[s[m]-\\'a\\'] < k){\\n                return max( solve(i, m-1,s,k), solve(m+1,j,s,k)); \\n             }\\n        };\\n\\t\\t\\n\\t\\t// step 3 \\n\\t\\t// if you reach here that means the  subtring has all characters having frequency greater than or equal to k \\n         return j-i+1 ;\\n    }\\n    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1380910,
                "title": "c",
                "content": "```\\nclass Solution {\\npublic:\\n       int longestSubstring(string s, int k) {\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        \\n        unordered_map<char,int> Map;\\n        for(int i = 0; i < s.size(); i++){\\n            Map[s[i]]++;\\n        }\\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n        \\n        return max(left, right);\\n        \\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n       int longestSubstring(string s, int k) {\\n        if(s.size() == 0 || k > s.size())   return 0;\\n        if(k == 0)  return s.size();\\n        \\n        unordered_map<char,int> Map;\\n        for(int i = 0; i < s.size(); i++){\\n            Map[s[i]]++;\\n        }\\n        \\n        int idx =0;\\n        while(idx <s.size() && Map[s[idx]] >= k)    idx++;\\n        if(idx == s.size()) return s.size();\\n        \\n        int left = longestSubstring(s.substr(0 , idx) , k);\\n        int right = longestSubstring(s.substr(idx+1) , k);\\n        \\n        return max(left, right);\\n        \\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1263028,
                "title": "c-0ms-solution-neat-commented-code",
                "content": "```\\n# include <string>\\n# include <vector>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    int longestSubstring(string str, int k) {\\n        // count no.of unique characters\\n        int count[26] = {0};\\n        int numberOfUniqueChar = 0;\\n        for (int i = 0; i < str.size(); i++) {\\n            if (!count[str[i] - \\'a\\']) numberOfUniqueChar++;\\n            count[str[i] - \\'a\\']++;\\n        }\\n\\n        // longest substring length\\n        int result = 0;\\n\\n        // Now, find longest substring for each number of unique characters\\n        // i.e longest substring, where number of unique characters lies from\\n        // [1, numberOfUniqueChar]\\n        for (int n = 1; n <= numberOfUniqueChar; n++) { // can be atmax 26\\n            // store the count of n unique characters\\n            int count[26] = {0};\\n            // count how many unique characters are there\\n            int countUniqueChar = 0;\\n            // count how many unique character occurs >= K times\\n            int charHasK = 0;\\n            // sliding window\\n            int l = 0, h = 0;\\n            while (h < str.size()) {\\n                // if number of unique character is <= n\\n                if (countUniqueChar <= n) {\\n                    int indx = str[h] - \\'a\\';\\n                    if (count[indx] == 0) countUniqueChar++;\\n                    count[indx]++;\\n                    if (count[indx] == k) charHasK++;\\n                    // move end pointer to right\\n                    h++;\\n                } else {\\n                    int indx = str[l] - \\'a\\';\\n                    if (count[indx] == k) charHasK--;\\n                    count[indx]--;\\n                    if (count[indx] == 0) countUniqueChar--;\\n                    // move start pointer to right\\n                    l++;\\n                }\\n                // satisfies the condition for question\\n                if (countUniqueChar == n && charHasK == n) {\\n                    result = max(result, h - l);\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n```",
                "solutionTags": [],
                "code": "```\\n# include <string>\\n# include <vector>\\nusing namespace std;\\n\\nclass Solution {\\npublic:\\n    int longestSubstring(string str, int k) {\\n        // count no.of unique characters\\n        int count[26] = {0};\\n        int numberOfUniqueChar = 0;\\n        for (int i = 0; i < str.size(); i++) {\\n            if (!count[str[i] - \\'a\\']) numberOfUniqueChar++;\\n            count[str[i] - \\'a\\']++;\\n        }\\n\\n        // longest substring length\\n        int result = 0;\\n\\n        // Now, find longest substring for each number of unique characters\\n        // i.e longest substring, where number of unique characters lies from\\n        // [1, numberOfUniqueChar]\\n        for (int n = 1; n <= numberOfUniqueChar; n++) { // can be atmax 26\\n            // store the count of n unique characters\\n            int count[26] = {0};\\n            // count how many unique characters are there\\n            int countUniqueChar = 0;\\n            // count how many unique character occurs >= K times\\n            int charHasK = 0;\\n            // sliding window\\n            int l = 0, h = 0;\\n            while (h < str.size()) {\\n                // if number of unique character is <= n\\n                if (countUniqueChar <= n) {\\n                    int indx = str[h] - \\'a\\';\\n                    if (count[indx] == 0) countUniqueChar++;\\n                    count[indx]++;\\n                    if (count[indx] == k) charHasK++;\\n                    // move end pointer to right\\n                    h++;\\n                } else {\\n                    int indx = str[l] - \\'a\\';\\n                    if (count[indx] == k) charHasK--;\\n                    count[indx]--;\\n                    if (count[indx] == 0) countUniqueChar--;\\n                    // move start pointer to right\\n                    l++;\\n                }\\n                // satisfies the condition for question\\n                if (countUniqueChar == n && charHasK == n) {\\n                    result = max(result, h - l);\\n                }\\n            }\\n        }\\n\\n        return result;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1169750,
                "title": "java-o-n-sliding-window-for-each-unique-character",
                "content": "**Approach**\\n1. We think of finding longest substring with at least K repeating characters for each possible number of unique characters. That is we can have a substring with minimum one unique character to maximum 26 unique characters(since only lowercase letters of alphabet are considered in input). \\n2. Thereby we go on applying sliding window for each possible number of unique characters in the substring, checking out that repeating charcters are at least k for each unique character in substring and obtaining maximum length substring for each case if exists.\\n3. Henceforth, maintaining a global maximum of all cases.\\n\\n\\n```\\nclass Solution {\\n    static HashMap<Character,Integer>hm;\\n    public static int maxLenStrWithIuniqueChars(String s,int k,int unique){\\n        int ans,i,j,cnt,len=s.length();\\n        ans=i=j=cnt=0;\\n        hm=new HashMap<>();\\n        char c;\\n        while(j<len){\\n            c=s.charAt(j);\\n            hm.put(c,hm.getOrDefault(c,0)+1);\\n            if(hm.get(c)==k){\\n                cnt++;\\n            }\\n            if(hm.size()==cnt){\\n                ans=Math.max(ans,j-i+1);\\n            }\\n            while(hm.size()>unique){\\n                c=s.charAt(i);\\n                if(hm.get(c)==k){\\n                    cnt--;\\n                }\\n                hm.put(c,hm.get(c)-1);\\n                if(hm.get(c)==0){\\n                    hm.remove(c);\\n                }\\n                i++;\\n            }\\n            j++;\\n        }\\n        return ans;\\n    }\\n    public int longestSubstring(String s, int k) {\\n        int res=0;\\n        for(int i=1;i<=26;i++){\\n            res=Math.max(res,maxLenStrWithIuniqueChars(s,k,i));\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    static HashMap<Character,Integer>hm;\\n    public static int maxLenStrWithIuniqueChars(String s,int k,int unique){\\n        int ans,i,j,cnt,len=s.length();\\n        ans=i=j=cnt=0;\\n        hm=new HashMap<>();\\n        char c;\\n        while(j<len){\\n            c=s.charAt(j);\\n            hm.put(c,hm.getOrDefault(c,0)+1);\\n            if(hm.get(c)==k){\\n                cnt++;\\n            }\\n            if(hm.size()==cnt){\\n                ans=Math.max(ans,j-i+1);\\n            }\\n            while(hm.size()>unique){\\n                c=s.charAt(i);\\n                if(hm.get(c)==k){\\n                    cnt--;\\n                }\\n                hm.put(c,hm.get(c)-1);\\n                if(hm.get(c)==0){\\n                    hm.remove(c);\\n                }\\n                i++;\\n            }\\n            j++;\\n        }\\n        return ans;\\n    }\\n    public int longestSubstring(String s, int k) {\\n        int res=0;\\n        for(int i=1;i<=26;i++){\\n            res=Math.max(res,maxLenStrWithIuniqueChars(s,k,i));\\n        }\\n        return res;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1041531,
                "title": "python-sliding-window-solution",
                "content": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        #sliding window and hashmap O(n) or Divide and conquer(O(n*n))\\n        n=len(s)\\n        ans=0     \\n        freq= Counter(s)\\n        max_nums=len(freq)\\n        for num in range(1,max_nums+1):\\n            counter=defaultdict(int)\\n            left=0\\n            for right in range(n):\\n                counter[s[right]]+=1 \\n                \\n                while len(counter)>num:\\n                    counter[s[left]]-=1\\n                    if counter[s[left]]==0:\\n                        del counter[s[left]]\\n                    left+=1\\n                for key in counter:\\n                    if counter[key]>=k :\\n                        flag=1\\n                    else:\\n                        flag=0\\n                        break\\n                if flag==1:\\n                    ans=max(ans,right-left+1)\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        #sliding window and hashmap O(n) or Divide and conquer(O(n*n))\\n        n=len(s)\\n        ans=0     \\n        freq= Counter(s)\\n        max_nums=len(freq)\\n        for num in range(1,max_nums+1):\\n            counter=defaultdict(int)\\n            left=0\\n            for right in range(n):\\n                counter[s[right]]+=1 \\n                \\n                while len(counter)>num:\\n                    counter[s[left]]-=1\\n                    if counter[s[left]]==0:\\n                        del counter[s[left]]\\n                    left+=1\\n                for key in counter:\\n                    if counter[key]>=k :\\n                        flag=1\\n                    else:\\n                        flag=0\\n                        break\\n                if flag==1:\\n                    ans=max(ans,right-left+1)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 699994,
                "title": "python-recursive-solution",
                "content": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        ## RC ##\\n        ## APPROACH : RECURSION ##\\n        ## LOGIC ##\\n        # The idea is that any characters in the string that do not satisfy the requirement break the string in multiple parts that do not contain these characters, and for each part we should check the requirement again.\\n        # Concerning complexity, it is indeed formally O(N), like it was mentioned in another solution despite recursion, because at each level of recursion we look at maximum 2N characters, and there can be not more than 26 levels of recursion, because we remove at least one character from 26 possible characters each time we move to the next level.\\n\\n        cnt = collections.Counter(s)\\n        st = 0\\n        maxst = 0\\n        for i, c in enumerate(s):\\n            if cnt[c] < k:\\n                maxst = max(maxst, self.longestSubstring(s[st:i], k))\\n                st = i + 1\\n        return len(s) if st == 0 else max(maxst, self.longestSubstring(s[st:], k))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        ## RC ##\\n        ## APPROACH : RECURSION ##\\n        ## LOGIC ##\\n        # The idea is that any characters in the string that do not satisfy the requirement break the string in multiple parts that do not contain these characters, and for each part we should check the requirement again.\\n        # Concerning complexity, it is indeed formally O(N), like it was mentioned in another solution despite recursion, because at each level of recursion we look at maximum 2N characters, and there can be not more than 26 levels of recursion, because we remove at least one character from 26 possible characters each time we move to the next level.\\n\\n        cnt = collections.Counter(s)\\n        st = 0\\n        maxst = 0\\n        for i, c in enumerate(s):\\n            if cnt[c] < k:\\n                maxst = max(maxst, self.longestSubstring(s[st:i], k))\\n                st = i + 1\\n        return len(s) if st == 0 else max(maxst, self.longestSubstring(s[st:], k))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 431268,
                "title": "java-beat-100-time-100-space-w-explanations-about-time-complexity",
                "content": "\\nThe idea is straightforard - we first go through the String and count the number of appearance for each letters. Then we use a pointer i to go through every letter in the string. Once we see a letter (at index = i) that has counts less than k; we know the final valid answer must NOT include this letter. ==> then we SHOULD SEARCH FOR ANSWERS from substring before i, and after i. The divide and conquer part then becomes: search(start of string, i - 1), and then search(i + 1, end of string).\\n\\nSo the main function would be just one loop to loop through index i to check whether the letter at position i is invalid (count < k). If it is invalid, then search before and after it. \\n\\nUPDATE:\\nI saw bunch of ppl asking about time complexity. I think it is O(N). Why? \\nSuppose two extreme cases: (1) all letters that appear in the string is invalid, then in this case, we need to enter the recursion ~O(N/(K - 1)) times. But in each recursion like this, we know that the substring is shorter than K because this is extreme cases that every substring is NOT valid (in the for loop, we enter divide and concquer as many time as possible). So then the time complexity is O(N) because EACH recursion stops right away with (end - start + 1) < k !!\\nCase(2), the entire string is valid, we never need to enter divide and conquer recursion, and it only takes O(N) time to go through this string.... so still O(N).\\n\\nThe short reasoning of this problem is O(N), is, if you spend more time in dealing with invalid characters, then your recursion stops right away even you enter recursion more times; if you spend more time in dealing with valid characters, then you do not have recursion, all the time is spent on loop itself. In either case, it is ~O(N).\\n\\n\\tclass Solution {\\n\\t\\tpublic int longestSubstring(String s, int k) {\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\treturn helper(0, n - 1, s, k); /* to avoid doing hard copy of substring, I used start and end as the beginning and ending of the substring we need to do the search. This helper function returns the max length that satisfies criteria for the substring between index 0 to n - 1 */\\n\\t\\t}\\n\\n\\t\\tprivate int helper(int start, int end, String s, int k) {\\n\\n\\t\\t\\tif (end - start + 1 < k) {\\n\\t\\t\\t\\treturn 0; /* stop searching if substring is already too short */\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t/*  redo the counting process for the current substring */\\n\\t\\t\\tint[] letters = new int[26];\\n\\t\\t\\tfor (int i = start; i <= end; i++) {\\n\\t\\t\\t\\tletters[s.charAt(i) - \\'a\\'] ++;\\n\\t\\t\\t}\\n\\n\\t\\t\\tint left = start;\\n\\t\\t\\tint res = 0;\\n\\t\\t\\t/*  key loop process */\\n\\t\\t\\tfor (int i = start; i <= end; i++) {\\n\\t\\t\\t\\tif (letters[s.charAt(i) - \\'a\\'] < k && letters[s.charAt(i) - \\'a\\'] > 0) { /* we land at index == i where this letter is INVALID, then we need divide and conquer*/\\n\\t\\t\\t\\t\\tint subres = helper(left, i - 1, s, k); /* chopped part */\\n\\t\\t\\t\\t\\tres = Math.max(res, subres);\\n\\t\\t\\t\\t\\tleft = i + 1; /* later part, basically this loop ensures that the string is CHOPPED into multiple pieces with INVALID letters EXCLUDED */\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\\n\\t\\t\\t/* if the left is never updated, that means we never met an invalid letter in the entire substring, so we can directly return the lenght of this substring. */\\n\\t\\t\\tif (left == start) {\\n\\t\\t\\t\\treturn end - start + 1;\\n\\t\\t\\t}\\n\\n\\t\\t\\tint subres = helper(left, end, s, k); /* we still have the last part not searched yet */\\n\\t\\t\\tres = Math.max(res, subres);\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\n\\t}\\n",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic int longestSubstring(String s, int k) {\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\treturn helper(0, n - 1, s, k); /* to avoid doing hard copy of substring, I used start and end as the beginning and ending of the substring we need to do the search. This helper function returns the max length that satisfies criteria for the substring between index 0 to n - 1 */\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 383134,
                "title": "java-simple-sliding-window-solution",
                "content": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0) return 0;\\n        int maxLength = Integer.MIN_VALUE;\\n        for (int i = 1; i <= 26; i++) {\\n            maxLength = Math.max(maxLength, getLongest(i, k, s));\\n        }\\n        return maxLength;\\n    }\\n    private int getLongest(int num, int k, String s) {\\n        int left = 0, right = 0, count = 0, times = 0;\\n        int[] map = new int[128];\\n        int maxLen = Integer.MIN_VALUE;\\n        while (right < s.length()) {\\n            if (map[s.charAt(right)]++ == 0) count++;\\n            if (map[s.charAt(right++)] == k) times++;\\n            while (count > num) {\\n                if (map[s.charAt(left)]-- == k) times--;\\n                if (map[s.charAt(left++)] == 0) count--;\\n            }\\n            if (times == num && times == count) {\\n                maxLen = Math.max(maxLen, right - left);\\n            }\\n        }\\n        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s == null || s.length() == 0) return 0;\\n        int maxLength = Integer.MIN_VALUE;\\n        for (int i = 1; i <= 26; i++) {\\n            maxLength = Math.max(maxLength, getLongest(i, k, s));\\n        }\\n        return maxLength;\\n    }\\n    private int getLongest(int num, int k, String s) {\\n        int left = 0, right = 0, count = 0, times = 0;\\n        int[] map = new int[128];\\n        int maxLen = Integer.MIN_VALUE;\\n        while (right < s.length()) {\\n            if (map[s.charAt(right)]++ == 0) count++;\\n            if (map[s.charAt(right++)] == k) times++;\\n            while (count > num) {\\n                if (map[s.charAt(left)]-- == k) times--;\\n                if (map[s.charAt(left++)] == 0) count--;\\n            }\\n            if (times == num && times == count) {\\n                maxLen = Math.max(maxLen, right - left);\\n            }\\n        }\\n        return maxLen == Integer.MIN_VALUE ? 0 : maxLen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 150252,
                "title": "python-dc-solution",
                "content": "```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        counter = collections.Counter(s)\\n        if all(counter[i] >= k for i in counter):\\n            return len(s)\\n\\n        start, longest = 0, 0\\n        for i in xrange(len(s)):\\n            if counter[s[i]] < k:\\n                longest = max(longest, self.longestSubstring(s[start:i], k))\\n                start = i + 1\\n        \\n        longest = max(longest, self.longestSubstring(s[start:], k))\\n        return longest\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        counter = collections.Counter(s)\\n        if all(counter[i] >= k for i in counter):\\n            return len(s)\\n\\n        start, longest = 0, 0\\n        for i in xrange(len(s)):\\n            if counter[s[i]] < k:\\n                longest = max(longest, self.longestSubstring(s[start:i], k))\\n                start = i + 1\\n        \\n        longest = max(longest, self.longestSubstring(s[start:], k))\\n        return longest\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87745,
                "title": "easy-understanding-java-solution-beats-97",
                "content": "The idea is to keep a counts array that will capture the occurrences of a character in the string. Later start iterating the string and whenever you encounter a character that is not more than 'K' times in the string, you stop and check if the string until now is valid (i.e. all the characters until now occur k times). If not you call the function again with the substring. This function call will give us the maximum length of the string. Consider an example:\\n\\n\"abababacabadccccc\" and k as \"3\"\\n\\nNow since the counts look like this:\\na -> 6\\nb -> 4\\nc- > 6\\nd -> 1\\n\\nThe function until it encounters the char 'd' will accumulate the count. Now when it sees a 'd' it needs to check if the current string is valid. It is not valid because, 'c' occurs only once (< k) times. As such we now call the function again with this substring \"abababacaba\". Now here the counts are calculated again, and it'll look like this:\\n\\na -> 6\\nb -> 4\\nc -> 1 (< k)\\n\\nNow it'll accumulate the count. Now when it encounters 'c' a validation is done and we see that the string is valid because both 'a' and 'b' occur more than 'k' times. So it'll send the count as 7. Had it not been valid another function call would be made to get the count for the substring and so on.\\n\\nHope the explanation is clear.\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int length = s.length();\\n\\tchar[] chars = s.toCharArray();\\n\\tint[] counts = new int[26];\\n\\tint[] curCount = new int[26];\\n\\n\\tfor(int i = 0; i < length; ++i) {\\n\\t    counts[chars[i] - 'a']++;\\n\\t}\\n\\n\\tint max = 0;\\n\\tint count = 0;\\n\\tint curStart = 0;\\n\\n\\tfor(int i = 0; i < length; ++i) {\\n            if(counts[chars[i] - 'a'] >= k) {\\n\\t        curCount[chars[i] - 'a']++;\\n\\t\\tcount++;\\n\\t    } else {\\n\\t        if(count > 0 && validSubstring(curCount, k)) {\\n\\t\\t    max = Math.max(max, count);\\n\\t\\t} else if(count > max){\\n\\t\\t    max = Math.max(max, longestSubstring(s.substring(curStart, i), k));\\n\\t\\t}\\n\\t\\tcount = 0;\\n\\t\\tcurStart = i + 1;\\n\\t\\tcurCount = new int[26];\\n\\t    }\\n    }\\n\\n\\tif(count > 0 && validSubstring(curCount, k)) {\\n\\t    max = Math.max(max, count);\\n\\t} else if (count > max){\\n\\t    max = Math.max(max, longestSubstring(s.substring(curStart), k));\\n\\t}\\n\\n\\treturn max;\\n    }\\n\\n    public boolean validSubstring(int[] curCount, int k) {\\n\\tfor(int j = 0; j < 26; ++j) {\\n    \\t    if(curCount[j] != 0 && curCount[j] < k) {\\n\\t        return false;\\n\\t    }\\n        }\\n\\treturn true;\\n    }\\n}\\n```\\nThe runtime in the worst case is O(n2).\\nif you however fail to put \"count > max\" condition in the below condition, then it'll be a stackoverflow exception.\\n\\n```\\n} else if (count > max){\\n      max = Math.max(max, longestSubstring(s.substring(curStart), k));\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int length = s.length();\\n\\tchar[] chars = s.toCharArray();\\n\\tint[] counts = new int[26];\\n\\tint[] curCount = new int[26];\\n\\n\\tfor(int i = 0; i < length; ++i) {\\n\\t    counts[chars[i] - 'a']++;\\n\\t}\\n\\n\\tint max = 0;\\n\\tint count = 0;\\n\\tint curStart = 0;\\n\\n\\tfor(int i = 0; i < length; ++i) {\\n            if(counts[chars[i] - 'a'] >= k) {\\n\\t        curCount[chars[i] - 'a']++;\\n\\t\\tcount++;\\n\\t    } else {\\n\\t        if(count > 0 && validSubstring(curCount, k)) {\\n\\t\\t    max = Math.max(max, count);\\n\\t\\t} else if(count > max){\\n\\t\\t    max = Math.max(max, longestSubstring(s.substring(curStart, i), k));\\n\\t\\t}\\n\\t\\tcount = 0;\\n\\t\\tcurStart = i + 1;\\n\\t\\tcurCount = new int[26];\\n\\t    }\\n    }\\n\\n\\tif(count > 0 && validSubstring(curCount, k)) {\\n\\t    max = Math.max(max, count);\\n\\t} else if (count > max){\\n\\t    max = Math.max(max, longestSubstring(s.substring(curStart), k));\\n\\t}\\n\\n\\treturn max;\\n    }\\n\\n    public boolean validSubstring(int[] curCount, int k) {\\n\\tfor(int j = 0; j < 26; ++j) {\\n    \\t    if(curCount[j] != 0 && curCount[j] < k) {\\n\\t        return false;\\n\\t    }\\n        }\\n\\treturn true;\\n    }\\n}\\n```\n```\\n} else if (count > max){\\n      max = Math.max(max, longestSubstring(s.substring(curStart), k));\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87799,
                "title": "python-56ms-solution",
                "content": "```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        if len(s) < k:\\n            return 0\\n        mydict, myset = {}, set()\\n        for c in s:\\n            if c in mydict.keys():\\n                mydict[c] += 1\\n            else:\\n                mydict[c] = 1\\n            if mydict[c] >= k:\\n                myset.discard(c)\\n            else:\\n                myset.add(c)\\n        if len(myset) == 0:\\n            return len(s)\\n        intervals, start = [], 0\\n        while start < len(s):\\n            if s[start] not in myset:\\n                i = start\\n                while start < len(s):\\n                    if s[start] not in myset:\\n                        start += 1\\n                    else:\\n                        break \\n                intervals.append((i, start))\\n            else:\\n                start += 1\\n        gMax = 0\\n        for interval in intervals:\\n            gMax = max(gMax, self.longestSubstring(s[interval[0]:interval[1]], k))\\n        return gMax\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        if len(s) < k:\\n            return 0\\n        mydict, myset = {}, set()\\n        for c in s:\\n            if c in mydict.keys():\\n                mydict[c] += 1\\n            else:\\n                mydict[c] = 1\\n            if mydict[c] >= k:\\n                myset.discard(c)\\n            else:\\n                myset.add(c)\\n        if len(myset) == 0:\\n            return len(s)\\n        intervals, start = [], 0\\n        while start < len(s):\\n            if s[start] not in myset:\\n                i = start\\n                while start < len(s):\\n                    if s[start] not in myset:\\n                        start += 1\\n                    else:\\n                        break \\n                intervals.append((i, start))\\n            else:\\n                start += 1\\n        gMax = 0\\n        for interval in intervals:\\n            gMax = max(gMax, self.longestSubstring(s[interval[0]:interval[1]], k))\\n        return gMax\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3228027,
                "title": "c-solution-easy-to-understand-explanation",
                "content": "# Intuition\\nSince it was asked about all the substrings there must be some way to get all substrings by breaking the main string into multiple substrings and the checking the whether there exist any longest term;\\n\\n# Approach\\n1. If we were considering only one substring that is the whole string itself from 0 to s.size()-1 the the best way to find the required length would be to simple count the elements and checking with k correspondily.\\n2. But here we were asked to check for all substrings i.e the best to get all substring would be to divide our bigger problem to small problems.\\n3. with the index (l) we skipped all the characters whose occureneces were either >=k until l reaches end of the string.\\n4. then we took the above approach for all the strings in its left side and all the strings on the right and performed the same operation.\\n5. and ultimately returned the maximum of the two. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            mp[s[i]]++;\\n        }\\n        int l=0;\\n        while(l<s.size() and mp[s[l]]>=k)l++;\\n        if(l==s.size())return s.size();\\n\\n        int left = longestSubstring(s.substr(0,l),k);\\n        int right = longestSubstring(s.substr(l+1),k);\\n\\n        return max(left,right);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<s.size();i++){\\n            mp[s[i]]++;\\n        }\\n        int l=0;\\n        while(l<s.size() and mp[s[l]]>=k)l++;\\n        if(l==s.size())return s.size();\\n\\n        int left = longestSubstring(s.substr(0,l),k);\\n        int right = longestSubstring(s.substr(l+1),k);\\n\\n        return max(left,right);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3073148,
                "title": "very-simple-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n     //inserting frequency of all characters in map   \\n     unordered_map<char,int>mp;\\n    for(auto &it:s)\\n    {\\n        mp[it]++;\\n    }\\n    \\n        int ind=0;\\n        //first index of character which has frequency less than k\\n        while(ind<s.size()&&mp[s[ind]]>=k)\\n            ind++;\\n        \\n        if(ind==s.size())\\n            return s.size();\\n        //ans must be in the left part or right part \\n        int left= longestSubstring(s.substr(0,ind),k) ;\\n        int right= longestSubstring(s.substr(ind+1),k);\\n        return max(left,right);\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Dynamic Programming",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n     //inserting frequency of all characters in map   \\n     unordered_map<char,int>mp;\\n    for(auto &it:s)\\n    {\\n        mp[it]++;\\n    }\\n    \\n        int ind=0;\\n        //first index of character which has frequency less than k\\n        while(ind<s.size()&&mp[s[ind]]>=k)\\n            ind++;\\n        \\n        if(ind==s.size())\\n            return s.size();\\n        //ans must be in the left part or right part \\n        int left= longestSubstring(s.substr(0,ind),k) ;\\n        int right= longestSubstring(s.substr(ind+1),k);\\n        return max(left,right);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2837360,
                "title": "python-3-approaches-sliding-window-brute-force-divide-n-conquor",
                "content": "```\\nclass Solution:\\n    \"\"\"\\n    only append to answer if substring mei each letter length is greater.equal to k\\n    \"\"\"    \\n    \\n    \\n    def longestSubstring_bruteforce_TLE(self, s: str, k: int) -> int:\\n        \\n        \"\"\"\\n            T: O(n^2)\\n            \\n            . lets try brute force first\\n            a. find all substrings of s and check for given condition\\n                O(n^2) to make all substrings : \\n                    i = 0 -> n , j = i+1 -> n \\n                then checking for condition can be done using counter() so O(26)\\n        \"\"\"\\n        \\n        if k == 1:\\n            return len(s)\\n        \\n        m = 0\\n        \\n        def all_k(c):\\n            for v in c.values():\\n                if v < k:\\n                    return False\\n            \\n            return True\\n        \\n        for i in range(len(s)):\\n            for j in range(i+1, len(s)):\\n                c = Counter(s[i:j + 1])\\n                if all_k(c):\\n                    m = max(m, j - i + 1)\\n        \\n        return m\\n    \\n    def longestSubstring_DIVIDE_AND_CONQUOR(self, s: str, k: int) -> int:\\n        \"\"\"\\n            \\n            divide n conquor\\n            \\n            . from start to end, find pivot , divide and conquor .. so how to find pivot?\\n              pivot is places which will never be in answer which we can easily find. if count of something from start to end is less than k, it will never be answer\\n            \\n            q. how to know when to decrease window size?\\n            a. example\\n                \"cbbacab\", 2\\n                here its not even required to decrease window size\\n                    \\n                \"bbaacbbaa\", 2\\n                here at c , it makes sense to do it\\n                \\n                \"aacbbrfrfgc\", 2\\n                \\n                here if g , didnt now exist we donot need split\\n        \"\"\"\\n        \\n        if k == 1:\\n            return len(s)\\n        \\n        def divide_n_conq(start, end):\\n            \\n            if start >= end:\\n                return 0\\n            \\n            c = Counter()\\n            \\n            for i in range(start, end + 1):\\n                c[s[i]] += 1\\n            \\n            for i in range(start, end + 1):\\n                curr = s[i]\\n                if c[curr] < k:\\n                    return max(divide_n_conq(start , i - 1), divide_n_conq(i + 1 , end))\\n            \\n            return end - start + 1\\n        \\n        return divide_n_conq(0, len(s) - 1)\\n        \\n        \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \"\"\" \\n            . sliding window\\n            \\n            for sliding window, we need to know when to slide the window. here its not very obvious . \\n            \\n            q. what good be good sliding strategies?\\n            a. we cannot slide on count of letter, \\n            \\n            a. we have to try all unique letter substrings.. lemme explain\\n                . for s = \"aacbbrfrfgc\", k = 2\\n                unique letter = a, c, b, r, f, g, c\\n                total unique letters = 7\\n                \\n                now for i in range(7):\\n                    get_substring within s with maxximum i unique letter\\n                    \\n                    so for i = 1 (max unique letters in substring should be 1)\\n                        aa, c, bb, r, f, r, f, r, f, g, c : are all substrings with 1 unique letter\\n                    for i = 2 (max unique letters in substring should be 2)\\n                        aac, cbb, bbrfrf, rfrfg, ...\\n                    for i = 3 : (max unique letters in substring should be 3)\\n                        aacbb, cbbr ...\\n                    ...\\n                    \\n                    and return max ever found\\n                \\n                now this is not intuitive so lets see how can we come to this solution during interview when using sliding window\\n                now since we know its sliding window, we have to find , when to slide.. this now here need creative problem solving. \\n                    . try sliding window based on letter count in window : this dont work bcz a letter can arrive in i+nth position and make the sequence valid so we need lookahead which doesnt look much possible\\n                    . \\n                \\n        \"\"\"\\n        \\n        c = Counter(s)\\n        unique_character = len(c)\\n        ans = 0\\n        \\n        for i in range(1, unique_character + 1):\\n            \\n            l = 0\\n            counter = defaultdict(int)\\n            for r in range(len(s)):\\n                curr = s[r]\\n                counter[curr] += 1\\n                \\n                while len(counter) > i:\\n                    counter[s[l]] -= 1\\n                    if counter[s[l]] == 0:\\n                        del counter[s[l]]\\n                    l += 1\\n                \\n                if all(j >= k for j in counter.values()):\\n                    ans = max(ans, r - l + 1)\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    \"\"\"\\n    only append to answer if substring mei each letter length is greater.equal to k\\n    \"\"\"    \\n    \\n    \\n    def longestSubstring_bruteforce_TLE(self, s: str, k: int) -> int:\\n        \\n        \"\"\"\\n            T: O(n^2)\\n            \\n            . lets try brute force first\\n            a. find all substrings of s and check for given condition\\n                O(n^2) to make all substrings : \\n                    i = 0 -> n , j = i+1 -> n \\n                then checking for condition can be done using counter() so O(26)\\n        \"\"\"\\n        \\n        if k == 1:\\n            return len(s)\\n        \\n        m = 0\\n        \\n        def all_k(c):\\n            for v in c.values():\\n                if v < k:\\n                    return False\\n            \\n            return True\\n        \\n        for i in range(len(s)):\\n            for j in range(i+1, len(s)):\\n                c = Counter(s[i:j + 1])\\n                if all_k(c):\\n                    m = max(m, j - i + 1)\\n        \\n        return m\\n    \\n    def longestSubstring_DIVIDE_AND_CONQUOR(self, s: str, k: int) -> int:\\n        \"\"\"\\n            \\n            divide n conquor\\n            \\n            . from start to end, find pivot , divide and conquor .. so how to find pivot?\\n              pivot is places which will never be in answer which we can easily find. if count of something from start to end is less than k, it will never be answer\\n            \\n            q. how to know when to decrease window size?\\n            a. example\\n                \"cbbacab\", 2\\n                here its not even required to decrease window size\\n                    \\n                \"bbaacbbaa\", 2\\n                here at c , it makes sense to do it\\n                \\n                \"aacbbrfrfgc\", 2\\n                \\n                here if g , didnt now exist we donot need split\\n        \"\"\"\\n        \\n        if k == 1:\\n            return len(s)\\n        \\n        def divide_n_conq(start, end):\\n            \\n            if start >= end:\\n                return 0\\n            \\n            c = Counter()\\n            \\n            for i in range(start, end + 1):\\n                c[s[i]] += 1\\n            \\n            for i in range(start, end + 1):\\n                curr = s[i]\\n                if c[curr] < k:\\n                    return max(divide_n_conq(start , i - 1), divide_n_conq(i + 1 , end))\\n            \\n            return end - start + 1\\n        \\n        return divide_n_conq(0, len(s) - 1)\\n        \\n        \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \"\"\" \\n            . sliding window\\n            \\n            for sliding window, we need to know when to slide the window. here its not very obvious . \\n            \\n            q. what good be good sliding strategies?\\n            a. we cannot slide on count of letter, \\n            \\n            a. we have to try all unique letter substrings.. lemme explain\\n                . for s = \"aacbbrfrfgc\", k = 2\\n                unique letter = a, c, b, r, f, g, c\\n                total unique letters = 7\\n                \\n                now for i in range(7):\\n                    get_substring within s with maxximum i unique letter\\n                    \\n                    so for i = 1 (max unique letters in substring should be 1)\\n                        aa, c, bb, r, f, r, f, r, f, g, c : are all substrings with 1 unique letter\\n                    for i = 2 (max unique letters in substring should be 2)\\n                        aac, cbb, bbrfrf, rfrfg, ...\\n                    for i = 3 : (max unique letters in substring should be 3)\\n                        aacbb, cbbr ...\\n                    ...\\n                    \\n                    and return max ever found\\n                \\n                now this is not intuitive so lets see how can we come to this solution during interview when using sliding window\\n                now since we know its sliding window, we have to find , when to slide.. this now here need creative problem solving. \\n                    . try sliding window based on letter count in window : this dont work bcz a letter can arrive in i+nth position and make the sequence valid so we need lookahead which doesnt look much possible\\n                    . \\n                \\n        \"\"\"\\n        \\n        c = Counter(s)\\n        unique_character = len(c)\\n        ans = 0\\n        \\n        for i in range(1, unique_character + 1):\\n            \\n            l = 0\\n            counter = defaultdict(int)\\n            for r in range(len(s)):\\n                curr = s[r]\\n                counter[curr] += 1\\n                \\n                while len(counter) > i:\\n                    counter[s[l]] -= 1\\n                    if counter[s[l]] == 0:\\n                        del counter[s[l]]\\n                    l += 1\\n                \\n                if all(j >= k for j in counter.values()):\\n                    ans = max(ans, r - l + 1)\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2462907,
                "title": "c-easy-solution",
                "content": "\\n\\t int longestSubstring(string s, int k) {\\n         int i=0;\\n         int j = 0;\\n        int n = s.length();\\n        unordered_map<char,int> m;\\n        int count =0;\\n        int d = 0;\\n        while(i<n && j<n){\\n            m[s[j]]++;\\n            if(m[s[j]]==k){\\n                count++;\\n            }\\n            if(count == m.size()){\\n                d = max(d,j-i+1);\\n                // cout<<d<<\" \";\\n            }\\n            \\n            j++;\\n            if(j==n){\\n                m.clear();\\n                i++;\\n                j=i;\\n                count=0;\\n            }\\n            \\n        }\\n        return d;\\n    }",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "\\n\\t int longestSubstring(string s, int k) {\\n         int i=0;\\n         int j = 0;\\n        int n = s.length();\\n        unordered_map<char,int> m;\\n        int count =0;\\n        int d = 0;\\n        while(i<n && j<n){\\n            m[s[j]]++;\\n            if(m[s[j]]==k){\\n                count++;\\n            }\\n            if(count == m.size()){\\n                d = max(d,j-i+1);\\n                // cout<<d<<\" \";\\n            }\\n            \\n            j++;\\n            if(j==n){\\n                m.clear();\\n                i++;\\n                j=i;\\n                count=0;\\n            }\\n            \\n        }\\n        return d;\\n    }",
                "codeTag": "C++"
            },
            {
                "id": 2163848,
                "title": "python-divide-and-conquer-w-queue-t-m-90-99",
                "content": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        ans, queue = 0, deque()     # Divide & conquer: for a given word, determine\\n        queue.append(s)             # whether it is valid, i.e, each char occurs at \\n                                    # least k times. If so, we update the ans as needed.\\n                                    # If not, split the word at each under-represented \\n                                    # char, and then check each new word in the split.\\n                                    # A queue is used to keep track of all the splits, \\n                                    # and s is the first word to check.\\n \\n        while queue:                        # pop a word from the queue until len(word) \\n            word = queue.pop()              # is greater than the current answer. \\n            if len(word) > ans:         \\n                c = Counter(word)\\n                if min(c.values()) >= k:    # if the word is valid, update the answer\\n                    ans = len(word)\\n                else:                       # else, append the new splits to the queue\\n                    for ch in c:\\n                        if c[ch] < k:\\n                            word = word.replace(ch, \\'X\\')\\n                    queue.extend(word.strip(\\'X\\').split(\\'X\\'))\\n\\n        return ans",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        ans, queue = 0, deque()     # Divide & conquer: for a given word, determine\\n        queue.append(s)             # whether it is valid, i.e, each char occurs at \\n                                    # least k times. If so, we update the ans as needed.\\n                                    # If not, split the word at each under-represented \\n                                    # char, and then check each new word in the split.\\n                                    # A queue is used to keep track of all the splits, \\n                                    # and s is the first word to check.\\n \\n        while queue:                        # pop a word from the queue until len(word) \\n            word = queue.pop()              # is greater than the current answer. \\n            if len(word) > ans:         \\n                c = Counter(word)\\n                if min(c.values()) >= k:    # if the word is valid, update the answer\\n                    ans = len(word)\\n                else:                       # else, append the new splits to the queue\\n                    for ch in c:\\n                        if c[ch] < k:\\n                            word = word.replace(ch, \\'X\\')\\n                    queue.extend(word.strip(\\'X\\').split(\\'X\\'))\\n\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 1972861,
                "title": "c-easy-solution-using-recursion-well-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    //in this question we use divide and conquerer algorithm\\n    // first we calculate frequency of each element\\n    // then we check if element have frequency less then k we divide the string from that point \\n    //and the do recursively search for left part and right part\\n    // then return max from both;\\n    \\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        int sub1=0;\\n        int sub2=0;\\n        unordered_map<char,int>mp;\\n        \\n        for(auto x:s){\\n            mp[x]++;// calculating frequency\\n        }\\n        for(int i=0;i<n;i++){\\n            if(mp[s[i]]<k){ // if frequency is smaller then k we send recursion for left part and right part from that point\\n                sub1=longestSubstring( s.substr(0,i),  k);\\n                sub2=longestSubstring(s.substr(i+1),  k);\\n                break;\\n            }\\n            if(i==n-1){// if i ==n-1 that means we traverse whole string so we return n\\n                return n;\\n            }\\n        }\\n        return max(sub1,sub2);// find max from left and right\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    //in this question we use divide and conquerer algorithm\\n    // first we calculate frequency of each element\\n    // then we check if element have frequency less then k we divide the string from that point \\n    //and the do recursively search for left part and right part\\n    // then return max from both;\\n    \\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        int sub1=0;\\n        int sub2=0;\\n        unordered_map<char,int>mp;\\n        \\n        for(auto x:s){\\n            mp[x]++;// calculating frequency\\n        }\\n        for(int i=0;i<n;i++){\\n            if(mp[s[i]]<k){ // if frequency is smaller then k we send recursion for left part and right part from that point\\n                sub1=longestSubstring( s.substr(0,i),  k);\\n                sub2=longestSubstring(s.substr(i+1),  k);\\n                break;\\n            }\\n            if(i==n-1){// if i ==n-1 that means we traverse whole string so we return n\\n                return n;\\n            }\\n        }\\n        return max(sub1,sub2);// find max from left and right\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1880594,
                "title": "js-sliding-window",
                "content": "```\\n//approach: Sliding window\\n//it mentions \\'substring\\', \\'repeating characters\\'\\n\\n//since each letter has to be \\'greater or equal to k\\'.\\n//we will count all unique letter in s. We can use Set to do so.\\n//\\n//we will try to get the possible longest substring within the range from 1 to UniqueLetterMax. \\n//we start from 1, as there has to be at least 1 unqiue letter in s. so yea, \\n//we want to find the longest length of that unqiue letter, so we keep expanding our window to find that letter, \\n//once we stumble upon another letter, we will shrink the window. \\n//\\n//time --> O(26) * O(n) = O(n)\\n//space --> at most  = O(26) //since we are only looking at the letters.\\nvar longestSubstring = function(s, k) {\\n  \\n    let uniqueLetterMax = new Set(s).size;\\n    let max = 0;\\n   \\n    //this loop accounts for individual letter\\n    for(let i = 1; i <= uniqueLetterMax; i++){ //at worst case, could run 26 times,(since alphabet)\\n        \\n        let right = 0;\\n        let left = 0;\\n        let map = new Map();\\n        let currUnique = 0; //goal is to hold one letter at a time\\n        let kCount = 0;     //goal is to hold the letter count that matches k criteria\\n        while(right < s.length){ //runs O(n)\\n            \\n            map.set(s[right], (map.get(s[right]) || 0) + 1);\\n            \\n            //if value is 1, we know we found a new unique letter\\n            if(map.get(s[right]) === 1) \\n                currUnique++;\\n            \\n            //if the value == k, we know, this unique letter matches the criteria, and we can count the length of this letter\\n            if(map.get(s[right]) === k) \\n                kCount++;\\n            \\n            //we shrink because, currUnique holds more than 1 unique letter. \\n            while(currUnique > i){\\n                //since, shrinking, we want to reduce the kCount, so we can make space for letter count for another letter\\n                if(map.get(s[left]) === k) \\n                    kCount--;\\n                \\n                map.set(s[left], map.get(s[left]) - 1);\\n                \\n                //since, shrinking, we want to try to make sure we remove the previous letter count, and only care of new letter count\\n                if(map.get(s[left]) === 0)  \\n                    currUnique--;\\n                \\n                left++;\\n            }\\n            \\n            //since the letter we are looking right now, has the length of k or greater\\n            if(currUnique === kCount)\\n                max = Math.max(max, right-left+1);\\n            \\n            right++;\\n        }\\n    }\\n    \\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\n//approach: Sliding window\\n//it mentions \\'substring\\', \\'repeating characters\\'\\n\\n//since each letter has to be \\'greater or equal to k\\'.\\n//we will count all unique letter in s. We can use Set to do so.\\n//\\n//we will try to get the possible longest substring within the range from 1 to UniqueLetterMax. \\n//we start from 1, as there has to be at least 1 unqiue letter in s. so yea, \\n//we want to find the longest length of that unqiue letter, so we keep expanding our window to find that letter, \\n//once we stumble upon another letter, we will shrink the window. \\n//\\n//time --> O(26) * O(n) = O(n)\\n//space --> at most  = O(26) //since we are only looking at the letters.\\nvar longestSubstring = function(s, k) {\\n  \\n    let uniqueLetterMax = new Set(s).size;\\n    let max = 0;\\n   \\n    //this loop accounts for individual letter\\n    for(let i = 1; i <= uniqueLetterMax; i++){ //at worst case, could run 26 times,(since alphabet)\\n        \\n        let right = 0;\\n        let left = 0;\\n        let map = new Map();\\n        let currUnique = 0; //goal is to hold one letter at a time\\n        let kCount = 0;     //goal is to hold the letter count that matches k criteria\\n        while(right < s.length){ //runs O(n)\\n            \\n            map.set(s[right], (map.get(s[right]) || 0) + 1);\\n            \\n            //if value is 1, we know we found a new unique letter\\n            if(map.get(s[right]) === 1) \\n                currUnique++;\\n            \\n            //if the value == k, we know, this unique letter matches the criteria, and we can count the length of this letter\\n            if(map.get(s[right]) === k) \\n                kCount++;\\n            \\n            //we shrink because, currUnique holds more than 1 unique letter. \\n            while(currUnique > i){\\n                //since, shrinking, we want to reduce the kCount, so we can make space for letter count for another letter\\n                if(map.get(s[left]) === k) \\n                    kCount--;\\n                \\n                map.set(s[left], map.get(s[left]) - 1);\\n                \\n                //since, shrinking, we want to try to make sure we remove the previous letter count, and only care of new letter count\\n                if(map.get(s[left]) === 0)  \\n                    currUnique--;\\n                \\n                left++;\\n            }\\n            \\n            //since the letter we are looking right now, has the length of k or greater\\n            if(currUnique === kCount)\\n                max = Math.max(max, right-left+1);\\n            \\n            right++;\\n        }\\n    }\\n    \\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1763897,
                "title": "sliding-window-recursion-c",
                "content": "**Simply keep track of the frequency of characters to see if a substring is a candidate for the answer or not.**\\nKeep a track of all the characters in an array.\\nNow if we see that all the characters appear more than or equal to k times then the string itself is the answer.\\nOtherwise, we iterate through the string and find substrings till which can be possible answers and then recursively call the longestSubstring function on them.\\nWhat it does is returns the largest substring with all characters occuring atleast k times from those substring and at the end combines all the results at the root of the recursion tree.\\nFinally we get our answer as the largest among all such traversed substrings.\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size() == 0)\\n           return 0;\\n        \\n        int arr[26] = {0};\\n        for(auto i : s){\\n            arr[i - \\'a\\']++;\\n        }\\n        \\n        bool flag = true;\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr[i] > 0 && arr[i] < k){\\n                flag = false;\\n                break;\\n            }\\n        }\\n        if(flag) return s.size();\\n        \\n        int i = 0 , start = 0 , ans = 0;\\n        while(i < s.size()){\\n            if(arr[s[i] - \\'a\\'] < k ){\\n                ans = max(ans,longestSubstring(s.substr(start,i - start),k));\\n                start++;\\n            }\\n            i++;\\n        }\\n        \\n        ans = max(ans,longestSubstring(s.substr(start),k));\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Two Pointers",
                    "String",
                    "Divide and Conquer",
                    "Recursion",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size() == 0)\\n           return 0;\\n        \\n        int arr[26] = {0};\\n        for(auto i : s){\\n            arr[i - \\'a\\']++;\\n        }\\n        \\n        bool flag = true;\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr[i] > 0 && arr[i] < k){\\n                flag = false;\\n                break;\\n            }\\n        }\\n        if(flag) return s.size();\\n        \\n        int i = 0 , start = 0 , ans = 0;\\n        while(i < s.size()){\\n            if(arr[s[i] - \\'a\\'] < k ){\\n                ans = max(ans,longestSubstring(s.substr(start,i - start),k));\\n                start++;\\n            }\\n            i++;\\n        }\\n        \\n        ans = max(ans,longestSubstring(s.substr(start),k));\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1721267,
                "title": "faster-than-97-6-recursion",
                "content": "![image](https://assets.leetcode.com/users/images/64490eea-cdda-4cce-b7ee-f48f26106e82_1643197763.2125227.png)\\n\\n```\\nclass Solution:\\n    def rec(self, s, k):\\n        c = Counter(s)\\n\\n        if pattern := \"|\".join(filter(lambda x: c[x] < k, c)):\\n            if arr := list(filter(lambda x: len(x) >= k, re.split(pattern, s))):\\n            \\n                return max(map(lambda x: self.rec(x, k), arr))\\n            \\n            return 0\\n        \\n        return len(s)\\n    \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        return self.rec(s, k)\\n```\\nPlease, upvote, if you like the solution",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def rec(self, s, k):\\n        c = Counter(s)\\n\\n        if pattern := \"|\".join(filter(lambda x: c[x] < k, c)):\\n            if arr := list(filter(lambda x: len(x) >= k, re.split(pattern, s))):\\n            \\n                return max(map(lambda x: self.rec(x, k), arr))\\n            \\n            return 0\\n        \\n        return len(s)\\n    \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        return self.rec(s, k)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1373131,
                "title": "python-sliding-window-using-counter",
                "content": "```python\\ndef slidingWindowSoln(self, s: str, k: int) -> int:\\n        max_unique = len(Counter(s))\\n        n = len(s)\\n        max_ = 0\\n        for i in range(1,max_unique+1):\\n            counter = Counter()\\n            l = r = 0\\n            while r < n:\\n                if len(counter) > i:\\n                    counter[s[l]] -= 1\\n                    if not counter[s[l]]:\\n                        del counter[s[l]]\\n                    l += 1\\n                else:\\n                    counter[s[r]] += 1\\n                    r += 1\\n                    if min(counter.values()) >= k:\\n                        max_ = max(max_, r-l)\\n        return max_\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```python\\ndef slidingWindowSoln(self, s: str, k: int) -> int:\\n        max_unique = len(Counter(s))\\n        n = len(s)\\n        max_ = 0\\n        for i in range(1,max_unique+1):\\n            counter = Counter()\\n            l = r = 0\\n            while r < n:\\n                if len(counter) > i:\\n                    counter[s[l]] -= 1\\n                    if not counter[s[l]]:\\n                        del counter[s[l]]\\n                    l += 1\\n                else:\\n                    counter[s[r]] += 1\\n                    r += 1\\n                    if min(counter.values()) >= k:\\n                        max_ = max(max_, r-l)\\n        return max_\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1215967,
                "title": "split-string-by-eliminating-less-frequent-characters-99-8-speed",
                "content": "Runtime: 20 ms, faster than 99.80% of Python3 online submissions for Longest Substring with At Least K Repeating Characters.\\nMemory Usage: 14.4 MB, less than 40.93% of Python3 online submissions for Longest Substring with At Least K Repeating Characters.\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        max_len = 0\\n        lst = [s]\\n        while lst:\\n            new_lst = []\\n            for sub_s in lst:\\n                new_sub = sub_s\\n                for c, n in Counter(new_sub).items():\\n                    if n < k:\\n                        new_sub = new_sub.replace(c, \"#\")\\n                for new_s in new_sub.split(\"#\"):\\n                    if new_s:\\n                        if min(Counter(new_s).values()) >= k:\\n                            max_len = max(max_len, len(new_s))\\n                        elif len(new_s) >= k:\\n                            new_lst.append(new_s)\\n            lst = new_lst\\n        return max_len\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        max_len = 0\\n        lst = [s]\\n        while lst:\\n            new_lst = []\\n            for sub_s in lst:\\n                new_sub = sub_s\\n                for c, n in Counter(new_sub).items():\\n                    if n < k:\\n                        new_sub = new_sub.replace(c, \"#\")\\n                for new_s in new_sub.split(\"#\"):\\n                    if new_s:\\n                        if min(Counter(new_s).values()) >= k:\\n                            max_len = max(max_len, len(new_s))\\n                        elif len(new_s) >= k:\\n                            new_lst.append(new_s)\\n            lst = new_lst\\n        return max_len\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1161131,
                "title": "o-n-100",
                "content": "At every index i we store freq of every character as a list of 26 numbers in the arr[i][26]. In the array largest[i] we store the largest index at which char (\\'a\\' + i) occurs.\\nWhenever at any index i we have the following cases:\\n1. all charcters with  freq == 0 or freq >= k the answer for that substring will be the length of the prefix itself. \\n2. all charcters have freq < k in that case the length will be 0\\n3. some charcters have freq >= k in this case we need to shorten our window. We will keep the right pointer of our window fixed at i whereas our left pointer will vary. We put the left pointer at max index corresponding to that char(\\'a\\' + j) s.t 0<arr[i][j] < k that becomes our new window where we compare the difference in freq for each char and if the diff in freq of each char is s.t either the diff is 0 or >=k for all charcters we consider that a valid window and check if its length is gretaer than whatever we have calculated so far.\\n \\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k){\\n        int i, n = s.length();\\n\\t\\t// base case\\n        if(k==1)\\n            return n;\\n        \\n        int arr[n][26], ans = 0;\\n        memset(arr, 0, sizeof(arr));\\n\\t\\t\\n\\t\\t// for 0th index freq of every char is zero except s[0] \\n        arr[0][s[0]-\\'a\\'] = 1;\\n        \\n\\t\\t// stores largest index where a char occurs\\n        int largest[26];\\n        memset(largest, -1, sizeof(largest));\\n        largest[s[0]-\\'a\\'] = 0;\\n        \\n        for(i=1;i<n;i++){\\n\\t\\t\\n\\t\\t\\t// prev prefix results\\n            for(int j=0;j<26;j++)\\n                arr[i][j] = arr[i-1][j];\\n\\t\\t\\t\\t\\n            // freq for ith char increases by 1\\n\\t\\t\\tarr[i][s[i]-\\'a\\']++;\\n            \\n            bool is = 0, f = 1;\\n            for(int j=0;j<26;j++){\\n                if(arr[i][j] >= k)\\n                    is = 1;\\n                if(arr[i][j] && arr[i][j] < k)\\n                    f = 0;\\n            }\\n            \\n\\t\\t\\t// all char have freq either 0 or greater than equal to k\\n            if(f){\\n                ans = max(ans, i+1);\\n                is = 0;\\n            }\\n            \\n\\t\\t\\t// some char have freq greater than equal to k\\n            if(is && i>=k-1){\\n\\t\\t\\t\\n\\t\\t\\t\\t// mx will store the left pointer index as explained above\\n                int mx = 0;\\n                for(int j=0;j<26;j++){\\n                    if(arr[i][j] && arr[i][j] < k)\\n                        mx = max(largest[j], mx);\\n                }\\n                \\n                bool flag = 1;\\n                // if the diff in freq is either 0 or greater than equal to k for all char only then that window is valid \\n\\t\\t\\t\\tfor(int j=0;j<26;j++){\\n                    if(arr[i][j] != arr[mx][j] && arr[i][j] - arr[mx][j] < k){\\n                        flag = 0;\\n                        break;\\n                    }\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// flag == 1 for valid windows only\\n                if(flag)\\n                    ans = max(ans, i-mx);\\n            }\\n\\t\\t\\t// largest index at which char s[i] occurs\\n            largest[s[i]-\\'a\\'] = i;\\n        }\\n        \\n        return ans;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k){\\n        int i, n = s.length();\\n\\t\\t// base case\\n        if(k==1)\\n            return n;\\n        \\n        int arr[n][26], ans = 0;\\n        memset(arr, 0, sizeof(arr));\\n\\t\\t\\n\\t\\t// for 0th index freq of every char is zero except s[0] \\n        arr[0][s[0]-\\'a\\'] = 1;\\n        \\n\\t\\t// stores largest index where a char occurs\\n        int largest[26];\\n        memset(largest, -1, sizeof(largest));\\n        largest[s[0]-\\'a\\'] = 0;\\n        \\n        for(i=1;i<n;i++){\\n\\t\\t\\n\\t\\t\\t// prev prefix results\\n            for(int j=0;j<26;j++)\\n                arr[i][j] = arr[i-1][j];\\n\\t\\t\\t\\t\\n            // freq for ith char increases by 1\\n\\t\\t\\tarr[i][s[i]-\\'a\\']++;\\n            \\n            bool is = 0, f = 1;\\n            for(int j=0;j<26;j++){\\n                if(arr[i][j] >= k)\\n                    is = 1;\\n                if(arr[i][j] && arr[i][j] < k)\\n                    f = 0;\\n            }\\n            \\n\\t\\t\\t// all char have freq either 0 or greater than equal to k\\n            if(f){\\n                ans = max(ans, i+1);\\n                is = 0;\\n            }\\n            \\n\\t\\t\\t// some char have freq greater than equal to k\\n            if(is && i>=k-1){\\n\\t\\t\\t\\n\\t\\t\\t\\t// mx will store the left pointer index as explained above\\n                int mx = 0;\\n                for(int j=0;j<26;j++){\\n                    if(arr[i][j] && arr[i][j] < k)\\n                        mx = max(largest[j], mx);\\n                }\\n                \\n                bool flag = 1;\\n                // if the diff in freq is either 0 or greater than equal to k for all char only then that window is valid \\n\\t\\t\\t\\tfor(int j=0;j<26;j++){\\n                    if(arr[i][j] != arr[mx][j] && arr[i][j] - arr[mx][j] < k){\\n                        flag = 0;\\n                        break;\\n                    }\\n                }\\n\\t\\t\\t\\t\\n\\t\\t\\t\\t// flag == 1 for valid windows only\\n                if(flag)\\n                    ans = max(ans, i-mx);\\n            }\\n\\t\\t\\t// largest index at which char s[i] occurs\\n            largest[s[i]-\\'a\\'] = i;\\n        }\\n        \\n        return ans;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1113358,
                "title": "c-easy-and-short-solution",
                "content": "```\\n    int longestSubstring(string s, int k) \\n    {\\n        if(k==1)\\n        return s.size();\\n        int ans=0;\\n        for(int i=0;i+k<=s.size();i++)\\n        {\\n            int c=0,a[26]={0};\\n            for(int j=i;j<s.size();j++)\\n            {\\n                if(a[s[j]-\\'a\\']==0 )\\n                    c++;\\n                a[s[j]-\\'a\\']++;\\n                if(a[s[j]-\\'a\\']==k)\\n                    c--;\\n                if(c==0)\\n                ans=max(ans,j-i+1);  \\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n    int longestSubstring(string s, int k) \\n    {\\n        if(k==1)\\n        return s.size();\\n        int ans=0;\\n        for(int i=0;i+k<=s.size();i++)\\n        {\\n            int c=0,a[26]={0};\\n            for(int j=i;j<s.size();j++)\\n            {\\n                if(a[s[j]-\\'a\\']==0 )\\n                    c++;\\n                a[s[j]-\\'a\\']++;\\n                if(a[s[j]-\\'a\\']==k)\\n                    c--;\\n                if(c==0)\\n                ans=max(ans,j-i+1);  \\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1053917,
                "title": "python-accepted-brute-force-solution",
                "content": "more than 9000ms...\\n```\\nfrom collections import defaultdict\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        maxi=0\\n        for i in range(len(s)):\\n            check=set()\\n            table=defaultdict(int)\\n            for j in range(i, len(s)):\\n                table[s[j]]+=1\\n                if table[s[j]]>=k:\\n                    check.add(s[j])\\n                if len(check)==len(table):\\n                    maxi=max(maxi, j-i+1)\\n        return maxi\\n```",
                "solutionTags": [],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        maxi=0\\n        for i in range(len(s)):\\n            check=set()\\n            table=defaultdict(int)\\n            for j in range(i, len(s)):\\n                table[s[j]]+=1\\n                if table[s[j]]>=k:\\n                    check.add(s[j])\\n                if len(check)==len(table):\\n                    maxi=max(maxi, j-i+1)\\n        return maxi\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1024820,
                "title": "javascript-easy-sliding-window",
                "content": "```javascript\\nvar longestSubstring = function(s, k) {\\n    if(k === 1) return s.length;\\n \\n    let maxUnique = new Set(s).size;\\n    let maxLen = 0;\\n    \\n    for(let i = 1; i <= maxUnique; i++) {\\n        const freq = new Map();\\n        let start = 0, currUnique = 0, countAtLeastK = 0;\\n        \\n        for(let end = 0; end < s.length; end++) {\\n            freq.set(s[end], (freq.get(s[end]) || 0) + 1);\\n            if(freq.get(s[end]) === k) countAtLeastK++;\\n            if(freq.get(s[end]) === 1) currUnique++;\\n            \\n            while(currUnique > i) {\\n                if(freq.get(s[start]) === k) countAtLeastK--;\\n                freq.set(s[start], freq.get(s[start]) - 1);\\n                if(!freq.get(s[start])) currUnique--;\\n                start++;\\n            }\\n            if(currUnique === countAtLeastK) {\\n                maxLen = Math.max(maxLen, end-start+1);\\n            }\\n        }\\n    }\\n    return maxLen;    \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```javascript\\nvar longestSubstring = function(s, k) {\\n    if(k === 1) return s.length;\\n \\n    let maxUnique = new Set(s).size;\\n    let maxLen = 0;\\n    \\n    for(let i = 1; i <= maxUnique; i++) {\\n        const freq = new Map();\\n        let start = 0, currUnique = 0, countAtLeastK = 0;\\n        \\n        for(let end = 0; end < s.length; end++) {\\n            freq.set(s[end], (freq.get(s[end]) || 0) + 1);\\n            if(freq.get(s[end]) === k) countAtLeastK++;\\n            if(freq.get(s[end]) === 1) currUnique++;\\n            \\n            while(currUnique > i) {\\n                if(freq.get(s[start]) === k) countAtLeastK--;\\n                freq.set(s[start], freq.get(s[start]) - 1);\\n                if(!freq.get(s[start])) currUnique--;\\n                start++;\\n            }\\n            if(currUnique === countAtLeastK) {\\n                maxLen = Math.max(maxLen, end-start+1);\\n            }\\n        }\\n    }\\n    return maxLen;    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1016370,
                "title": "recursive-solution-c-can-we-optimize-it-more",
                "content": "```\\nclass Solution {\\npublic:\\n    int fun(int start,int end,int k,string s){\\n        vector<int>count(26,0);\\n        for(auto i=start;i<end;i++){\\n            count[s[i]-\\'a\\']+=1;\\n        }\\n        for(auto i=start;i<end;i++){\\n            if(count[s[i]-\\'a\\']<k){\\n                int left=fun(start,i,k,s);\\n                int right=fun(i+1,end,k,s);\\n                \\n                return max(left,right);\\n            }\\n        }\\n        return end-start;\\n    }\\n    int longestSubstring(string s, int k) {\\n        if(k==1) return s.length();\\n       return fun(0,s.size(),k,s);\\n    }\\n};\\n\\n//if you know any other approach to solve this plzz comment below\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int fun(int start,int end,int k,string s){\\n        vector<int>count(26,0);\\n        for(auto i=start;i<end;i++){\\n            count[s[i]-\\'a\\']+=1;\\n        }\\n        for(auto i=start;i<end;i++){\\n            if(count[s[i]-\\'a\\']<k){\\n                int left=fun(start,i,k,s);\\n                int right=fun(i+1,end,k,s);\\n                \\n                return max(left,right);\\n            }\\n        }\\n        return end-start;\\n    }\\n    int longestSubstring(string s, int k) {\\n        if(k==1) return s.length();\\n       return fun(0,s.size(),k,s);\\n    }\\n};\\n\\n//if you know any other approach to solve this plzz comment below\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1015750,
                "title": "intuitive-solution-using-some-precalculation",
                "content": "Explanation-\\n1. Let\\'s try to calculate answer for each index i, such that index i is included in the string, if s[i, s.length()) is valid(every letter in that string has frequency greater than K), then that is the best you can get for index i.\\n2. If s[i, s.length()) is not valid, then we need to remove letters whose frequency is less than k till we get a string which is valid.\\n3. Let\\'s calculate index[i][j], which is the minimum index of character j in the substring s(i, s.length()). \\n4. Now if at s[i, s.length()) we have some pairs of characters whose frequency is less than k, then we will need to discard all of them and consider the new string s[i, ind].\\n4.  We will repeat the step 3 for each index i, till s[i, j] is valid and the length of our final string would be our answer for index i.\\n4. Take the maximum of the answer from each index i.\\n\\nComplexities-\\nTime Complexity-O(26n)  This might feel a bit intuitive but at each index i, our while loop won\\'t run more than 26 times.\\nSpace Complexity-O(26n)\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        //suffix sum of all characters. In other words, suffix[i] is the frequency of all the\\n        //letters in the s[i, s.length())\\n        int[][] suffix=new int[s.length()][26];\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(i==s.length()-1){\\n                suffix[i][s.charAt(i)-\\'a\\']++;\\n                continue;\\n            }\\n            for(int j=0;j<26;j++){\\n                suffix[i][j]=suffix[i+1][j];\\n            }\\n            suffix[i][s.charAt(i)-\\'a\\']++;\\n        }\\n        //index[i][j]->minimum index where character j can be found in s[i,s.length())\\n        int[][] index=new int[s.length()][26];\\n        for(int i=s.length()-1;i>=0;i--){\\n            index[i][s.charAt(i)-\\'a\\']=i;\\n            if(i==s.length()-1){\\n                continue;\\n            }\\n            for(int j=0;j<26;j++){\\n                if(s.charAt(i)-\\'a\\'==j){\\n                    continue;\\n                }\\n                index[i][j]=index[i+1][j];\\n            }\\n        }\\n        int max=0;\\n        for(int i=0;i<s.length();i++){\\n            int ind=s.length();\\n            while(true){\\n                int temp=Integer.MAX_VALUE;\\n                boolean fine=true;\\n                for(int j=0;j<26;j++){\\n                    if(suffix[i][j]-(ind==s.length()?0:suffix[ind][j])>0 && suffix[i][j]-(ind==s.length()?0:suffix[ind][j])<k){\\n                        temp=Math.min(temp, index[i][j]);\\n                        fine=false;\\n                    }\\n                }\\n                if(fine){\\n                    break;\\n                }\\n                ind=temp;\\n            }\\n            max=Math.max(max, ind-i);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        //suffix sum of all characters. In other words, suffix[i] is the frequency of all the\\n        //letters in the s[i, s.length())\\n        int[][] suffix=new int[s.length()][26];\\n        for(int i=s.length()-1;i>=0;i--){\\n            if(i==s.length()-1){\\n                suffix[i][s.charAt(i)-\\'a\\']++;\\n                continue;\\n            }\\n            for(int j=0;j<26;j++){\\n                suffix[i][j]=suffix[i+1][j];\\n            }\\n            suffix[i][s.charAt(i)-\\'a\\']++;\\n        }\\n        //index[i][j]->minimum index where character j can be found in s[i,s.length())\\n        int[][] index=new int[s.length()][26];\\n        for(int i=s.length()-1;i>=0;i--){\\n            index[i][s.charAt(i)-\\'a\\']=i;\\n            if(i==s.length()-1){\\n                continue;\\n            }\\n            for(int j=0;j<26;j++){\\n                if(s.charAt(i)-\\'a\\'==j){\\n                    continue;\\n                }\\n                index[i][j]=index[i+1][j];\\n            }\\n        }\\n        int max=0;\\n        for(int i=0;i<s.length();i++){\\n            int ind=s.length();\\n            while(true){\\n                int temp=Integer.MAX_VALUE;\\n                boolean fine=true;\\n                for(int j=0;j<26;j++){\\n                    if(suffix[i][j]-(ind==s.length()?0:suffix[ind][j])>0 && suffix[i][j]-(ind==s.length()?0:suffix[ind][j])<k){\\n                        temp=Math.min(temp, index[i][j]);\\n                        fine=false;\\n                    }\\n                }\\n                if(fine){\\n                    break;\\n                }\\n                ind=temp;\\n            }\\n            max=Math.max(max, ind-i);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1007860,
                "title": "c-o-n-log-n-efficiency-o-log-n-memory-divide-and-conquer-explanation",
                "content": "The next solution, which came to my mind after `O(N^2)`, was `O(N*log(N))`.\\n\\n1. The idea is based on the ***divide and conquer*** approach: on each merge step, we try to maximize the length of the resulting substring, starting from  `[l, r]` and removing edge characters with a left count less than `k` one by one.\\n\\n2. Computed counts of characters for both left and right halves - `array<int, 26> arr[2]` - allows us on the merge step to identify what characters to exclude from the result. These are the ones with a frequency less than `k`.\\n\\n3. Now we remove characters from the edges and reduce the initial `[l, r]` window. While doing that we might meet the characters, which frequency becomes less than `k`, so I update the `cnt` respectively.\\n\\nI can add a lot more detailed explanation on the request.\\n\\nHere is full code:\\n```\\nclass Solution {\\n    int res = 0;\\n    int k;\\n    array<int, 26> solve(const string& s, int l, int r) {\\n        if (l == r) {\\n            array<int, 26> temp = {0};\\n            ++temp[s[l]-\\'a\\'];\\n            return temp;\\n        }\\n        \\n        int m = l + (r-l)/2;\\n        array<int, 26> arr[2] = { solve(s, l, m), solve(s, m+1, r) };\\n    \\n        int cnt[2] = {0};\\n        array<int, 26> temp = {0};\\n        for (int i = 0; i < 26; ++i) {\\n            temp[i] = arr[0][i] + arr[1][i];\\n            if (temp[i] < k) {\\n                if (arr[0][i]) ++cnt[0];\\n                if (arr[1][i]) ++cnt[1];\\n            }\\n        }\\n        \\n        while (cnt[0] || cnt[1]) {\\n            int p, idx;\\n            if (cnt[0])\\n                p = 0, idx = s[l++]-\\'a\\';\\n            else\\n                p = 1, idx = s[r--]-\\'a\\';\\n            \\n            if (arr[p][idx]-- + arr[1-p][idx] == k) {\\n                ++cnt[p];\\n                if (arr[1-p][idx]) ++cnt[1-p];\\n            }\\n            \\n            if (!arr[p][idx] && arr[1-p][idx] < k)\\n                --cnt[p];\\n        }\\n\\n        res = max(res, r - l + 1);\\n        return temp;\\n    }\\npublic:\\n    int longestSubstring(const string &s, int k) {\\n        if (k == 1) return s.size();\\n        this->k = k;\\n        solve(s, 0, s.size()-1);\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution {\\n    int res = 0;\\n    int k;\\n    array<int, 26> solve(const string& s, int l, int r) {\\n        if (l == r) {\\n            array<int, 26> temp = {0};\\n            ++temp[s[l]-\\'a\\'];\\n            return temp;\\n        }\\n        \\n        int m = l + (r-l)/2;\\n        array<int, 26> arr[2] = { solve(s, l, m), solve(s, m+1, r) };\\n    \\n        int cnt[2] = {0};\\n        array<int, 26> temp = {0};\\n        for (int i = 0; i < 26; ++i) {\\n            temp[i] = arr[0][i] + arr[1][i];\\n            if (temp[i] < k) {\\n                if (arr[0][i]) ++cnt[0];\\n                if (arr[1][i]) ++cnt[1];\\n            }\\n        }\\n        \\n        while (cnt[0] || cnt[1]) {\\n            int p, idx;\\n            if (cnt[0])\\n                p = 0, idx = s[l++]-\\'a\\';\\n            else\\n                p = 1, idx = s[r--]-\\'a\\';\\n            \\n            if (arr[p][idx]-- + arr[1-p][idx] == k) {\\n                ++cnt[p];\\n                if (arr[1-p][idx]) ++cnt[1-p];\\n            }\\n            \\n            if (!arr[p][idx] && arr[1-p][idx] < k)\\n                --cnt[p];\\n        }\\n\\n        res = max(res, r - l + 1);\\n        return temp;\\n    }\\npublic:\\n    int longestSubstring(const string &s, int k) {\\n        if (k == 1) return s.size();\\n        this->k = k;\\n        solve(s, 0, s.size()-1);\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949627,
                "title": "python-longest-substring-short-recursive-solution",
                "content": "Recursively split string around invalid characters (less than K instances in current substring). Splits to left of first invalid character, and to right of last consecutive invalid character as an optimisation.\\n\\n\\tdef longestSubstring(self, s, k):\\n        \\n        def divide_and_conquer(s):\\n            \\n            char_freq = collections.Counter(s)\\n            \\n            for i, c in enumerate(s):\\n                \\n                if char_freq[c] < k:\\n                    \\n                    j = i + 1\\n                    while j < len(s) - 1 and char_freq[s[j]] < k:\\n                        j += 1\\n                        \\n                    return max(divide_and_conquer(s[:i]), divide_and_conquer(s[j:]))\\n                         \\n            return len(s)\\n                  \\n        return divide_and_conquer(s)",
                "solutionTags": [],
                "code": "Recursively split string around invalid characters (less than K instances in current substring). Splits to left of first invalid character, and to right of last consecutive invalid character as an optimisation.\\n\\n\\tdef longestSubstring(self, s, k):\\n        \\n        def divide_and_conquer(s):\\n            \\n            char_freq = collections.Counter(s)\\n            \\n            for i, c in enumerate(s):\\n                \\n                if char_freq[c] < k:\\n                    \\n                    j = i + 1\\n                    while j < len(s) - 1 and char_freq[s[j]] < k:\\n                        j += 1\\n                        \\n                    return max(divide_and_conquer(s[:i]), divide_and_conquer(s[j:]))\\n                         \\n            return len(s)\\n                  \\n        return divide_and_conquer(s)",
                "codeTag": "Python3"
            },
            {
                "id": 949626,
                "title": "my-java-divide-and-conquer-solution",
                "content": "```\\n// we split the string or divide the string when we see a count < k\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return divideAndConquer(s, 0, s.length(), k);\\n    }\\n    public int divideAndConquer(String s, int start, int end, int k) {\\n        if (end - start < k)\\n            return 0;\\n        int [] count = new int [26];\\n        for (int i=start; i<end; i++) {\\n            count[s.charAt(i) - \\'a\\'] += 1;\\n        }\\n        for (int i=0; i<26; i++) {\\n            if (count[i] < k && count[i] > 0) {\\n                for (int j=start; j<end; j++) {\\n                    if (s.charAt(j) == i + \\'a\\') {\\n                        int left = divideAndConquer(s, start, j, k);\\n                        int right = divideAndConquer(s, j+1, end, k);\\n                        return Math.max(left, right);\\n                    }\\n                }\\n            }\\n        }\\n        return end - start;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer",
                    "Recursion"
                ],
                "code": "```\\n// we split the string or divide the string when we see a count < k\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return divideAndConquer(s, 0, s.length(), k);\\n    }\\n    public int divideAndConquer(String s, int start, int end, int k) {\\n        if (end - start < k)\\n            return 0;\\n        int [] count = new int [26];\\n        for (int i=start; i<end; i++) {\\n            count[s.charAt(i) - \\'a\\'] += 1;\\n        }\\n        for (int i=0; i<26; i++) {\\n            if (count[i] < k && count[i] > 0) {\\n                for (int j=start; j<end; j++) {\\n                    if (s.charAt(j) == i + \\'a\\') {\\n                        int left = divideAndConquer(s, start, j, k);\\n                        int right = divideAndConquer(s, j+1, end, k);\\n                        return Math.max(left, right);\\n                    }\\n                }\\n            }\\n        }\\n        return end - start;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 790979,
                "title": "hashmap-java-5-ms-solution",
                "content": "\\tclass Solution {\\n\\t\\tpublic int longestSubstring(String s, int k) {\\n\\t\\treturn fn(s,k);\\n\\t\\t}\\n\\t\\tpublic int fn(String s ,int k ){\\n\\t\\t\\tif(s.length()<k){\\n\\t\\t\\t\\treturn 0;\\n\\t\\t\\t}\\n\\t\\t\\tMap<Character,Integer>map=new HashMap<>();\\n\\t\\t\\tfor(int i=0;i<s.length();i++){\\n\\t\\t\\t\\tchar temp=s.charAt(i);\\n\\t\\t\\t\\tmap.put(temp,map.getOrDefault(temp,0)+1);\\n\\t\\t\\t}\\n\\t\\t\\tfor(char key:map.keySet()){\\n\\t\\t\\t\\tif(map.get(key)<k){\\n\\t\\t\\t\\t\\tint ans=0;\\n\\t\\t\\t\\t\\tfor(int i=0;i<s.length();i++){\\n\\t\\t\\t\\t\\t\\tif(s.charAt(i)==key){\\n\\t\\t\\t\\t\\t\\t\\tans=Math.max(ans,fn(s.substring(0,i),k));\\n\\t\\t\\t\\t\\t\\t\\ts=s.substring(i+1,s.length());\\n\\t\\t\\t\\t\\t\\t\\ti=0;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tans=Math.max(ans,fn(s,k));\\n\\t\\t\\t\\t\\treturn ans;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn s.length();\\n\\t\\t}\\n\\t}",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer"
                ],
                "code": "class Solution {\\n\\t\\tpublic int longestSubstring(String s, int k) {\\n\\t\\treturn fn(s,k);\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 753840,
                "title": "python-solution-from-youtube-tutorial-not-a-medium-question-for-sure-for-interviews",
                "content": "Credits  - https://www.youtube.com/watch?v=bHZkCAcj3dc\\nThis person explained it really well and code is similar to what he came up with and his explanations as comments. Hope this would benifit others looking for a good explaination.\\n```\\n    def longestSubstring(self, s, k):\\n        \\n        # Time  - O(N)\\n        # Space  - O(1) \\n        # Base case1 - If the k is larger than length of string\\n        # or if the given string is empty\\n        if k > len(s) or not s:\\n            return 0\\n        \\n        # Base case2 - If the k is less tha or equal to 1, whoel string length is valid\\n        if k <= 1:\\n            return len(s)\\n        \\n        # Create a hashmap for storing the frequency of chars in string as we need to look\\n        # through it when looping through the string to check if the freq of that particular\\n        # char is greater than or equal to make it as result\\n        \\n        hashmap = {}\\n        \\n        for char in s:\\n            hashmap[char] = hashmap.get(char, 0) + 1\\n        \\n        \\n        left = 0\\n        \\n        # Iterate throught the loop to check if there\\'s any char whose freq is less than k\\n        # stop iteration at that point\\n        while left < len(s) and hashmap[s[left]] >= k:\\n            left += 1\\n        \\n        # If the left pointer is at the end of the string then whole string is valid\\n        if left >= len(s) - 1:\\n            return left\\n        \\n        # Else we can recursively call our function with the string splitted into parts\\n        # The string before left is totally valid so one call for that.\\n        substringBeforeFaultyChar = self.longestSubstring(s[:left], k)\\n        \\n        # Remove the excess repeating chars as they can slow down our function and it helps in\\n        # optimization as well as we do not need these chars in our final result\\n        while left < len(s) and hashmap[s[left]] < k:\\n            left += 1\\n        \\n        # Before making the second call to the string after we removed all the faulty chars,\\n        # we need to make sure if we have not reached the end, as if we have then the whole\\n        # string starting after left contains chars whose freq is less than k, but if we \\n        # find that our left pointer is valid, make another call as this is also a valid\\n        # part of the string\\n        substringAfterFaultyChar = self.longestSubstring(s[left:len(s)], k) if left < len(s) else 0\\n        \\n        \\n        # Return the max of the resultant calls as we need to find longest substring\\n        return max(substringBeforeFaultyChar, substringAfterFaultyChar)\\n```",
                "solutionTags": [],
                "code": "```\\n    def longestSubstring(self, s, k):\\n        \\n        # Time  - O(N)\\n        # Space  - O(1) \\n        # Base case1 - If the k is larger than length of string\\n        # or if the given string is empty\\n        if k > len(s) or not s:\\n            return 0\\n        \\n        # Base case2 - If the k is less tha or equal to 1, whoel string length is valid\\n        if k <= 1:\\n            return len(s)\\n        \\n        # Create a hashmap for storing the frequency of chars in string as we need to look\\n        # through it when looping through the string to check if the freq of that particular\\n        # char is greater than or equal to make it as result\\n        \\n        hashmap = {}\\n        \\n        for char in s:\\n            hashmap[char] = hashmap.get(char, 0) + 1\\n        \\n        \\n        left = 0\\n        \\n        # Iterate throught the loop to check if there\\'s any char whose freq is less than k\\n        # stop iteration at that point\\n        while left < len(s) and hashmap[s[left]] >= k:\\n            left += 1\\n        \\n        # If the left pointer is at the end of the string then whole string is valid\\n        if left >= len(s) - 1:\\n            return left\\n        \\n        # Else we can recursively call our function with the string splitted into parts\\n        # The string before left is totally valid so one call for that.\\n        substringBeforeFaultyChar = self.longestSubstring(s[:left], k)\\n        \\n        # Remove the excess repeating chars as they can slow down our function and it helps in\\n        # optimization as well as we do not need these chars in our final result\\n        while left < len(s) and hashmap[s[left]] < k:\\n            left += 1\\n        \\n        # Before making the second call to the string after we removed all the faulty chars,\\n        # we need to make sure if we have not reached the end, as if we have then the whole\\n        # string starting after left contains chars whose freq is less than k, but if we \\n        # find that our left pointer is valid, make another call as this is also a valid\\n        # part of the string\\n        substringAfterFaultyChar = self.longestSubstring(s[left:len(s)], k) if left < len(s) else 0\\n        \\n        \\n        # Return the max of the resultant calls as we need to find longest substring\\n        return max(substringBeforeFaultyChar, substringAfterFaultyChar)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 728802,
                "title": "java-sliding-window-o-n",
                "content": "class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s.length()==0)return 0;\\n        int[] a=new int[26];\\n        for (int i=0;i<s.length();i++){\\n            a[s.charAt(i)-\\'a\\']++;\\n        } \\n        int left=-1,right=s.length();\\n        int i=0,j=s.length()-1;\\n        while(i<=j){\\n            if (a[s.charAt(i)-\\'a\\']<k){\\n                while(left!=i){\\n                    a[s.charAt(++left)-\\'a\\']--;\\n                }\\n                i++;j=right-1;\\n            }else if (a[s.charAt(j)-\\'a\\']<k){\\n                while(right!=j){\\n                    a[s.charAt(--right)-\\'a\\']--;\\n                }\\n                j--;i=left+1;\\n            }else {\\n                i++;j--;\\n            }\\n            \\n        }\\n        \\n       return right-left-1;\\n        \\n    }\\n}\\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public int longestSubstring(String s, int k) {\\n        if (s.length()==0)return 0;\\n        int[] a=new int[26];\\n        for (int i=0;i<s.length();i++){\\n            a[s.charAt(i)-\\'a\\']++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 704604,
                "title": "python-3-longest-substring-with-atleast-k-repeating-characters-beats-85",
                "content": "**Idea :** The character around which **```cnt[i] < k```** holds true, split from there and check the lengths of two splitted sides. \\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \\n        if len(s)==0:\\n            return 0\\n        \\n        cnt = collections.Counter(s)\\n        \\n        for i in cnt:\\n            if cnt[i] < k:\\n                # print(s.split(i))\\n                return max(self.longestSubstring(p,k) for p in s.split(i))\\n                \\n        return len(s)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```cnt[i] < k```\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        \\n        if len(s)==0:\\n            return 0\\n        \\n        cnt = collections.Counter(s)\\n        \\n        for i in cnt:\\n            if cnt[i] < k:\\n                # print(s.split(i))\\n                return max(self.longestSubstring(p,k) for p in s.split(i))\\n                \\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 692871,
                "title": "java-sliding-windows-solution-with-some-thought",
                "content": "This question is hard to adapt the template menitioned [here](https://leetcode.com/problems/minimum-window-substring/discuss/26808/here-is-a-10-line-template-that-can-solve-most-substring-problems).\\nSince it is not able to find a valid window by moving \"end pointer\" only.\\n\\nI try to make a adjustment for the kind of case.\\nHope this help.\\n``` \\n1. Use two pointers: start and end to represent a window.\\n2. Move end to find a possible valid window.\\n3. When a possible valid window is found, try to move start to make it real valid\\n4. If we can\\'t find a valid window, restore the start to 0. \\n```\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int left = 0, max = 0;\\n        int[] count = new int[26];;\\n        for(int right = 0; right < s.length(); right++){\\n            count[s.charAt(right) - \\'a\\']++;\\n            \\n            if(count[s.charAt(right) - \\'a\\'] >= k){\\n                while( right - left + 1 >= k){\\n                    if(isValid(count, k)){\\n                        max = Math.max(max, right - left + 1);\\n                        break;\\n                    }\\n                    count[s.charAt(left) - \\'a\\']--;\\n                    left++;\\n                }\\n                for(int i = 0; i < left; i++){\\n                    count[s.charAt(i) - \\'a\\']++;\\n                }\\n                left = 0;\\n            }\\n        }\\n        return max;\\n    }\\n    \\n    public boolean isValid(int[] count, int k){\\n        \\n        for(int i = 0; i < 26; i++){\\n            if(count[i] < k && count[i] != 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }   \\n}\\n```\\n",
                "solutionTags": [],
                "code": "``` \\n1. Use two pointers: start and end to represent a window.\\n2. Move end to find a possible valid window.\\n3. When a possible valid window is found, try to move start to make it real valid\\n4. If we can\\'t find a valid window, restore the start to 0. \\n```\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int left = 0, max = 0;\\n        int[] count = new int[26];;\\n        for(int right = 0; right < s.length(); right++){\\n            count[s.charAt(right) - \\'a\\']++;\\n            \\n            if(count[s.charAt(right) - \\'a\\'] >= k){\\n                while( right - left + 1 >= k){\\n                    if(isValid(count, k)){\\n                        max = Math.max(max, right - left + 1);\\n                        break;\\n                    }\\n                    count[s.charAt(left) - \\'a\\']--;\\n                    left++;\\n                }\\n                for(int i = 0; i < left; i++){\\n                    count[s.charAt(i) - \\'a\\']++;\\n                }\\n                left = 0;\\n            }\\n        }\\n        return max;\\n    }\\n    \\n    public boolean isValid(int[] count, int k){\\n        \\n        for(int i = 0; i < 26; i++){\\n            if(count[i] < k && count[i] != 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }   \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 549140,
                "title": "java-0-ms-100-divide-and-conquer",
                "content": "This is how it works : \\n1. Loop through the string , store the counts into an array\\n2. Loop through the string again , but this time treat the characters that have `count < k` as break points , that break string into multiple segments ( this is the divide part )\\n3. Now each of this segment has the same problem again, so keep on recursivley dividing until there is no chance for anymore partitioning .. then you get the maximum substring length from one of those strings ( this is the conquering part )\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int n = s.length();\\n        if(n < k)return 0;\\n        \\n        int[] mem = new int[26];\\n        int count = 0; // this will be used to determine whether the whole string works out\\n        \\n        for(int i=0;i<n;i++){\\n            char ch = s.charAt(i);\\n            int t = ++mem[ch - \\'a\\'];\\n            if(t == 1) // a new character ? increment the count\\n                count++;\\n            if(t == k) // some character is worth ? decrement the count\\n                count--;\\n        }\\n        \\n        if(count == 0)return n; // if every character cancelled out itself, means the whole string is acceptable\\n        \\n        int max = 0;\\n        StringBuilder sb = new StringBuilder(); // holder for substrings\\n        \\n        for(int i=0;i<n;i++){\\n            char ch = s.charAt(i);\\n            if(mem[ch - \\'a\\'] < k){ // found a break point\\n                max = Math.max( max, longestSubstring(sb.toString(),k) ); // now solve this sub-problem\\n                sb = new StringBuilder(); // get ready for next substring after  the break point\\n            }\\n            else\\n                sb.append(ch); // build the string until a breakpoint \\n        }\\n        max = Math.max(max,longestSubstring(sb.toString(),k)); // one last check for last sub string\\n\\t\\t\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        int n = s.length();\\n        if(n < k)return 0;\\n        \\n        int[] mem = new int[26];\\n        int count = 0; // this will be used to determine whether the whole string works out\\n        \\n        for(int i=0;i<n;i++){\\n            char ch = s.charAt(i);\\n            int t = ++mem[ch - \\'a\\'];\\n            if(t == 1) // a new character ? increment the count\\n                count++;\\n            if(t == k) // some character is worth ? decrement the count\\n                count--;\\n        }\\n        \\n        if(count == 0)return n; // if every character cancelled out itself, means the whole string is acceptable\\n        \\n        int max = 0;\\n        StringBuilder sb = new StringBuilder(); // holder for substrings\\n        \\n        for(int i=0;i<n;i++){\\n            char ch = s.charAt(i);\\n            if(mem[ch - \\'a\\'] < k){ // found a break point\\n                max = Math.max( max, longestSubstring(sb.toString(),k) ); // now solve this sub-problem\\n                sb = new StringBuilder(); // get ready for next substring after  the break point\\n            }\\n            else\\n                sb.append(ch); // build the string until a breakpoint \\n        }\\n        max = Math.max(max,longestSubstring(sb.toString(),k)); // one last check for last sub string\\n\\t\\t\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 493213,
                "title": "c-solution-with-linq",
                "content": "```\\npublic int LongestSubstring(string s, int k) {\\n\\tif (s == \"\")\\n\\t\\treturn 0;\\n\\n\\tvar chars = s\\n\\t\\t.ToCharArray()\\n\\t\\t.GroupBy(c => c)\\n\\t\\t.ToDictionary(c => c.Key, c => c.Count())\\n\\t\\t.Where(d => d.Value < k)\\n\\t\\t.Select(d => d.Key)\\n\\t\\t.ToArray();\\n\\n\\tif (!chars.Any())\\n\\t\\treturn s.Length;\\n\\n\\treturn chars\\n\\t\\t.Aggregate(new List<string> { s },\\n\\t\\t\\t(x, y) => x.SelectMany(z => z.Split(y)).ToList())\\n\\t\\t.Select(r => LongestSubstring(r, k))\\n\\t\\t.Max();\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int LongestSubstring(string s, int k) {\\n\\tif (s == \"\")\\n\\t\\treturn 0;\\n\\n\\tvar chars = s\\n\\t\\t.ToCharArray()\\n\\t\\t.GroupBy(c => c)\\n\\t\\t.ToDictionary(c => c.Key, c => c.Count())\\n\\t\\t.Where(d => d.Value < k)\\n\\t\\t.Select(d => d.Key)\\n\\t\\t.ToArray();\\n\\n\\tif (!chars.Any())\\n\\t\\treturn s.Length;\\n\\n\\treturn chars\\n\\t\\t.Aggregate(new List<string> { s },\\n\\t\\t\\t(x, y) => x.SelectMany(z => z.Split(y)).ToList())\\n\\t\\t.Select(r => LongestSubstring(r, k))\\n\\t\\t.Max();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 404499,
                "title": "very-simple-recursive-divide-and-conquer-solution",
                "content": "Thanks, tedhcang102!\\n```\\nclass Solution {     \\n  int search(string s,int k){\\n        if(s.size() < k)\\n            return 0;\\n        unordered_map<char,int> count_map;\\n        for(int i = 0;i < s.length(); i++)\\n            count_map[s[i]]++;\\n        for(auto item: count_map)\\n            if(item.second < k){\\n                int char_index = s.find(item.first);\\n                return max(search(s.substr(0,char_index),k), search(s.substr(char_index+1),k));\\n            }\\n        return s.size();\\n    }       \\n  public:\\n    int longestSubstring(string s, int k) {\\n        return search(s,k);\\n    }      \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {     \\n  int search(string s,int k){\\n        if(s.size() < k)\\n            return 0;\\n        unordered_map<char,int> count_map;\\n        for(int i = 0;i < s.length(); i++)\\n            count_map[s[i]]++;\\n        for(auto item: count_map)\\n            if(item.second < k){\\n                int char_index = s.find(item.first);\\n                return max(search(s.substr(0,char_index),k), search(s.substr(char_index+1),k));\\n            }\\n        return s.size();\\n    }       \\n  public:\\n    int longestSubstring(string s, int k) {\\n        return search(s,k);\\n    }      \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 392928,
                "title": "java-d-c-recursive-concise-solution-0ms-beats-100-time-and-memory",
                "content": "General idea is the same as in most of divide and conquer solutions out there but with a couple of optimizations which allow to avoid unnecessary recursive calls:\\n* test left and right fragments only when it makes sense i.e. when their length is longer than current longest which makes them possible new longest candidates\\n* before testing right fragment skip all consecutive not good characters (with count < k)\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return longest(s.toCharArray(), 0, s.length(), k, 0);\\n    }\\n    private int longest(char[] s, int start, int end, int k, int longest) {\\n        int[] hist = new int[\\'z\\' - \\'a\\' + 1]; // histogram i.e. characters\\' counts\\n        for (int i = start; i < end; i++) hist[s[i] - \\'a\\']++;\\n        for (int i = start; i < end; i++) {\\n            if (hist[s[i] - \\'a\\'] < k) { // split upon not good character\\n                if (i - start > longest) longest = longest(s, start, i, k, longest);\\n                while (i < end && hist[s[i] - \\'a\\'] < k) i++; // skip all not good characters\\n                if (end - i > longest) longest = longest(s, i, end, k, longest);\\n                return longest;\\n            }\\n        }\\n        return end - start; // if we didn\\'t exit earlier it means all characters in fragment are good\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return longest(s.toCharArray(), 0, s.length(), k, 0);\\n    }\\n    private int longest(char[] s, int start, int end, int k, int longest) {\\n        int[] hist = new int[\\'z\\' - \\'a\\' + 1]; // histogram i.e. characters\\' counts\\n        for (int i = start; i < end; i++) hist[s[i] - \\'a\\']++;\\n        for (int i = start; i < end; i++) {\\n            if (hist[s[i] - \\'a\\'] < k) { // split upon not good character\\n                if (i - start > longest) longest = longest(s, start, i, k, longest);\\n                while (i < end && hist[s[i] - \\'a\\'] < k) i++; // skip all not good characters\\n                if (end - i > longest) longest = longest(s, i, end, k, longest);\\n                return longest;\\n            }\\n        }\\n        return end - start; // if we didn\\'t exit earlier it means all characters in fragment are good\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 320188,
                "title": "c-dfs-and-the-improvement",
                "content": "```\\npublic class Solution {\\n    public int LongestSubstring(string s, int k) {\\n        int[] charAndCount = new int[256];\\n        foreach (char c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                // this char is wrong, either left or right has longestSubstring\\n                int left = LongestSubstring(s.Substring(0, i), k);\\n                int right = LongestSubstring(s.Substring(i + 1), k);\\n                return Math.Max(left, right);\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```\\n\\n```\\npublic class Solution {\\n    public int LongestSubstring(string s, int k) {\\n        int[] charAndCount = new int[256];\\n        foreach (char c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                // this char is wrong, either left or right has longestSubstring\\n                int left = LongestSubstring(s.Substring(0, i), k);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t// improvement: find the first available char as the left of the rightStr part\\n                while (i < s.Length && charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                    i++;\\n                }\\n\\n                int right = LongestSubstring(s.Substring(i), k);\\n                return Math.Max(left, right);\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int LongestSubstring(string s, int k) {\\n        int[] charAndCount = new int[256];\\n        foreach (char c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                // this char is wrong, either left or right has longestSubstring\\n                int left = LongestSubstring(s.Substring(0, i), k);\\n                int right = LongestSubstring(s.Substring(i + 1), k);\\n                return Math.Max(left, right);\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```\n```\\npublic class Solution {\\n    public int LongestSubstring(string s, int k) {\\n        int[] charAndCount = new int[256];\\n        foreach (char c in s) {\\n            charAndCount[c]++;\\n        }\\n\\n        for (int i = 0; i < s.Length; i++) {\\n            if (charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                // this char is wrong, either left or right has longestSubstring\\n                int left = LongestSubstring(s.Substring(0, i), k);\\n\\t\\t\\t\\t\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t\\t// improvement: find the first available char as the left of the rightStr part\\n                while (i < s.Length && charAndCount[s[i]] > 0 && charAndCount[s[i]] < k) {\\n                    i++;\\n                }\\n\\n                int right = LongestSubstring(s.Substring(i), k);\\n                return Math.Max(left, right);\\n            }\\n        }\\n\\n        return s.Length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 293614,
                "title": "clean-and-easy-to-understand-java-solution-using-divide-and-conquer",
                "content": "Time Complexity - varies between nlogn (best case) to n^2 (worst case)\\nn * Height of Recurision which is best case will be log n (if left and right parts are split equally) and in worst case the split will happen for last character in the string which leads to n\\n\\n```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if(s==null) {\\n            return 0;\\n        }\\n        return helper(s, 0, s.length()-1, k);\\n    }\\n    private int helper(String s, int start, int end, int k) {\\n        int[] count = new int[26];\\n        for(int j=start; j<=end ; j++) {\\n            count[s.charAt(j)-\\'a\\'] +=1;\\n        }\\n       \\n        for(int i=start; i<=end; i++) {\\n            if(count[s.charAt(i)-\\'a\\']> 0 && count[s.charAt(i)-\\'a\\']<k) { //if char has less than k count, recursively look for left and right substrings\\n                return Math.max(helper(s, start, i-1, k), helper(s, i+1, end, k));\\n            }\\n        }\\n        return end-start+1; \\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        if(s==null) {\\n            return 0;\\n        }\\n        return helper(s, 0, s.length()-1, k);\\n    }\\n    private int helper(String s, int start, int end, int k) {\\n        int[] count = new int[26];\\n        for(int j=start; j<=end ; j++) {\\n            count[s.charAt(j)-\\'a\\'] +=1;\\n        }\\n       \\n        for(int i=start; i<=end; i++) {\\n            if(count[s.charAt(i)-\\'a\\']> 0 && count[s.charAt(i)-\\'a\\']<k) { //if char has less than k count, recursively look for left and right substrings\\n                return Math.max(helper(s, start, i-1, k), helper(s, i+1, end, k));\\n            }\\n        }\\n        return end-start+1; \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 87795,
                "title": "10-lines-c-solution-clear-and-simple-3ms",
                "content": "# Solution 1\\nFrom Java solution: https://discuss.leetcode.com/topic/57372/java-3ms-divide-and-conquer-recursion-solution\\n\\n```\\nint longestSubstring(const string &s, int k) {\\n    return helper(s, 0, s.size(), k);\\n}\\nint helper(const string &s, int beg, int end, int k){\\n    if(end - beg < k) return 0;\\n    int cnt[26]{};\\n    for(int i = beg; i < end; ++i) ++cnt[s[i]-'a'];\\n    for(int i = 0; i < 26; ++i)\\n        if (cnt[i] && cnt[i] < k)\\n            for(int j = beg; j < end; ++j)\\n                if(s[j] == i + 'a')\\n                    return max(helper(s, beg, j, k), helper(s, j + 1, end, k));\\n    return end - beg;\\n}\\n```\\n\\n# Solution 2\\nLess iterations, faster and shorter(8 lines):\\n\\n```\\nint longestSubstring(const string &s, int k) {\\n    return helper(s, 0, s.size(), k);\\n}\\nint helper(const string &s, int beg, int end, int k){\\n    if(end - beg < k) return 0;\\n    int cnt[26]{};\\n    for(int i = beg; i < end; ++i) ++cnt[s[i]-'a'];\\n    for(int i = beg; i < end; ++i)\\n        if (cnt[s[i] - 'a'] < k)\\n            return max(helper(s, beg, i, k), helper(s, i + 1, end, k));\\n    return end - beg;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint longestSubstring(const string &s, int k) {\\n    return helper(s, 0, s.size(), k);\\n}\\nint helper(const string &s, int beg, int end, int k){\\n    if(end - beg < k) return 0;\\n    int cnt[26]{};\\n    for(int i = beg; i < end; ++i) ++cnt[s[i]-'a'];\\n    for(int i = 0; i < 26; ++i)\\n        if (cnt[i] && cnt[i] < k)\\n            for(int j = beg; j < end; ++j)\\n                if(s[j] == i + 'a')\\n                    return max(helper(s, beg, j, k), helper(s, j + 1, end, k));\\n    return end - beg;\\n}\\n```\n```\\nint longestSubstring(const string &s, int k) {\\n    return helper(s, 0, s.size(), k);\\n}\\nint helper(const string &s, int beg, int end, int k){\\n    if(end - beg < k) return 0;\\n    int cnt[26]{};\\n    for(int i = beg; i < end; ++i) ++cnt[s[i]-'a'];\\n    for(int i = beg; i < end; ++i)\\n        if (cnt[s[i] - 'a'] < k)\\n            return max(helper(s, beg, i, k), helper(s, i + 1, end, k));\\n    return end - beg;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4022618,
                "title": "alphabet-approach-solution-complexity-o-n",
                "content": "# Approach\\n\\nHere i am calling function each time with some character in pass , and in that function i am excluding that character and checking for all subarrays , because that\\'s how i am gonna get all possible subarrays . And we are also checking condition by iterating map while working on that function .\\n\\nNow one question arises that what gonna happen if all characters of the string are satisfying  \\'>=\\'\\nproperty , so for that i am again calling function with passing any other character that is not alphabet \\nfor example \\'#\\' . or we can add all charcaters of string s in map and call check function  .\\n\\n# Complexity : O(N)\\nAs 26 times i am calling function which is constant and complexity of function is O(N)\\n\\n# Code\\n```\\nclass Solution {\\n\\n    bool check(map<char,int> mp,int k) {\\n        for(auto jj:mp) {\\n            if(jj.second<k) {\\n                return false;\\n            }\\n        }\\n        return true ;\\n    }\\n\\n    int func(string s, int k,char c) {\\n        map<char,int> mp ;\\n        int i =0, j=0 , n = s.length() , ret = 0 ;\\n\\n        while(i<n && j<n) {\\n            if(s[j]==c) {\\n                i = j+1 ;\\n                j++ ;\\n                mp.clear() ;\\n            }\\n            else {\\n                mp[s[j]]++;\\n                if(check(mp,k)) {\\n                    ret = max(ret,j-i+1) ;\\n                }\\n                j++ ;\\n            }\\n        }\\n        return ret ;\\n    }\\n\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\n        int i =0, j=0 , n = s.length() , ans=0;\\n\\n        for(char it = \\'a\\' ;it<=\\'z\\';it++) {\\n            ans = max(ans,func(s,k,it)) ;\\n        }\\n        ans = max(ans,func(s,k,\\'#\\')) ;\\n        return ans ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n\\n    bool check(map<char,int> mp,int k) {\\n        for(auto jj:mp) {\\n            if(jj.second<k) {\\n                return false;\\n            }\\n        }\\n        return true ;\\n    }\\n\\n    int func(string s, int k,char c) {\\n        map<char,int> mp ;\\n        int i =0, j=0 , n = s.length() , ret = 0 ;\\n\\n        while(i<n && j<n) {\\n            if(s[j]==c) {\\n                i = j+1 ;\\n                j++ ;\\n                mp.clear() ;\\n            }\\n            else {\\n                mp[s[j]]++;\\n                if(check(mp,k)) {\\n                    ret = max(ret,j-i+1) ;\\n                }\\n                j++ ;\\n            }\\n        }\\n        return ret ;\\n    }\\n\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\n        int i =0, j=0 , n = s.length() , ans=0;\\n\\n        for(char it = \\'a\\' ;it<=\\'z\\';it++) {\\n            ans = max(ans,func(s,k,it)) ;\\n        }\\n        ans = max(ans,func(s,k,\\'#\\')) ;\\n        return ans ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3687538,
                "title": "c-map-frequency",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        if(n<k) return 0;\\n        if(k<2)  return n;\\n        map<char, int> mp;\\n        for(char c:s)  mp[c]++;\\n\\n        int i=0, a=0, b=0;\\n        while(i<n && mp[s[i]]>=k)\\n        { i++; }\\n        if(i==n) return i;\\n        a=longestSubstring(s.substr(0, i), k);\\n        if(i<n-1)\\n        b=longestSubstring(s.substr(i+1), k);\\n        return max(a, b);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n=s.size();\\n        if(n<k) return 0;\\n        if(k<2)  return n;\\n        map<char, int> mp;\\n        for(char c:s)  mp[c]++;\\n\\n        int i=0, a=0, b=0;\\n        while(i<n && mp[s[i]]>=k)\\n        { i++; }\\n        if(i==n) return i;\\n        a=longestSubstring(s.substr(0, i), k);\\n        if(i<n-1)\\n        b=longestSubstring(s.substr(i+1), k);\\n        return max(a, b);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3595913,
                "title": "divide-and-conquer-approach-beats-100-time",
                "content": "# Intuition\\nthe intuition is to split the string into smaller parts whenever we find a char with freq less than k and recursively call the longestSubstring func for smaller parts of the string. keep track of the maximum size of valid string found so far. to check the freq of chars keep a freq array of size 26.\\n\\n# Approach\\n1.check edge cases for when size of string is less than k and when k==1\\n2.keep two pointers start and end, iterate for end over the string\\n3.check freq of char, divide if needed and call the func recursively(pass the new string from start to (end-start))\\n4.update the start pointer to end+1\\n5.another edge case is the check for the last remaining part of string\\n\\n# Complexity\\n- Time complexity: O(nlogn)\\nO(n) as we are iterating over the whole string\\nO(logn) is the number of levels in recursion tree as we are dividing the string whenever needed\\n- Space complexity: O(n)\\nO(n) for recursion stack space \\nO(1) for frequency array(independent of input size)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size()<k) return 0;\\n        if(k==1) return s.size();\\n        vector<int> freq(26,0);\\n        for(auto it:s) freq[it-\\'a\\']++;\\n        bool valid=1;\\n        int maxi=0, i=0, j=0;\\n        for(j=0;j<s.size();j++){\\n            if(freq[s[j]-\\'a\\']<k){\\n                maxi=max(maxi, longestSubstring(s.substr(i,j-i),k));\\n                i=j+1;\\n                valid=0;\\n            }\\n        }\\n        if(valid) return s.size();\\n        //for remaining string\\n        maxi=max(maxi, longestSubstring(s.substr(i),k));\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Divide and Conquer",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size()<k) return 0;\\n        if(k==1) return s.size();\\n        vector<int> freq(26,0);\\n        for(auto it:s) freq[it-\\'a\\']++;\\n        bool valid=1;\\n        int maxi=0, i=0, j=0;\\n        for(j=0;j<s.size();j++){\\n            if(freq[s[j]-\\'a\\']<k){\\n                maxi=max(maxi, longestSubstring(s.substr(i,j-i),k));\\n                i=j+1;\\n                valid=0;\\n            }\\n        }\\n        if(valid) return s.size();\\n        //for remaining string\\n        maxi=max(maxi, longestSubstring(s.substr(i),k));\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381697,
                "title": "sliding-window-with-explanation-c-ruby-rust-python",
                "content": "## Problem Statement\\n\\nGiven a string `s` and an integer `k`, find the length of the longest substring with at least `k` repeating characters.\\n\\n## Approach\\n\\nWe can solve this problem using a sliding window approach. We iterate over the range of unique characters in the string `s`, and for each range, we use a sliding window to find the longest substring that has at least `k` repeating characters and has only the characters within the current range.\\n\\nIn the sliding window, we maintain a count of the characters that appear in the current window, and we shrink the window from the left side if the number of unique characters exceeds the range or if the number of characters with frequency `k` is less than the number of unique characters in the window.\\n\\nWe keep track of the maximum length of the valid substring seen so far and return it as the result.\\n\\n## Intuition\\n\\nThe problem asks us to find the length of the longest substring with at least `k` repeating characters. We can approach this problem by considering different ranges of unique characters in the string `s`. For each range, we use a sliding window to find the longest substring with at least `k` repeating characters and only characters from the current range.\\n\\n## Time Complexity\\n\\nThe time complexity of this approach is O(n^2), where n is the length of the input string `s`. This is because we are iterating over all possible ranges of unique characters in the string and using a sliding window approach within each range.\\n\\n## Space Complexity\\n\\nThe space complexity of this approach is O(n), where n is the length of the input string `s`. This is because we are maintaining a count of the characters that appear in the current sliding window, which can have at most n distinct characters in the worst case.\\n\\n\\n```C++ []\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size(), maxlen = 0;\\n\\n        for(int num_uniq = 1; num_uniq <= 26; ++num_uniq) { //iterate over different count of unique symbols in substr\\n            int count[128] = {0};\\n            int num_valid_uniq = 0, start = 0;\\n\\n            for(int end = 0; end < n; ++end) {\\n                int index = s[end];\\n                if(count[index] == 0) num_valid_uniq++;\\n                count[index]++;\\n\\n                while(num_valid_uniq > num_uniq) {\\n                    int index = s[start];\\n                    count[index]--;\\n                    if(count[index] == 0) num_valid_uniq--;\\n                    start++;\\n                }\\n\\n                bool valid = true;\\n                for(int i = 0; i < 128; ++i) {\\n                    if(count[i] > 0 && count[i] < k) {\\n                        valid = false;\\n                        break;\\n                    }\\n                }\\n                if(valid) maxlen = max(maxlen, end - start + 1);\\n            }\\n        }\\n\\n        return maxlen;\\n    }\\n};\\n```\\n```python []\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        max_len = 0\\n        \\n        # Iterate over different counts of unique characters in substring\\n        for n_unique_chars in range(1, len(set(s))+1):\\n            \\n            start = 0\\n            char_count = {}\\n            n_chars_at_least_k = 0\\n            \\n            # Iterate over each character in the string\\n            for end in range(len(s)):\\n                # Count the frequency of the current character\\n                char_count[s[end]] = char_count.get(s[end], 0) + 1\\n                # If the frequency of the current character is at least k, increment the count of characters with at least k frequency\\n                if char_count[s[end]] == k:\\n                    n_chars_at_least_k += 1\\n                \\n                # Shrink the window from the left side if the number of unique characters exceeds the limit\\n                while len(char_count) > n_unique_chars:\\n                    # If the frequency of the character at the left end of the window is k, decrement the count of characters with at least k frequency\\n                    if char_count[s[start]] == k:\\n                        n_chars_at_least_k -= 1\\n                    # Decrement the frequency count of the character at the left end of the window\\n                    char_count[s[start]] -= 1\\n                    # Remove the character from the frequency count dictionary if its frequency becomes zero\\n                    if char_count[s[start]] == 0:\\n                        del char_count[s[start]]\\n                    start += 1\\n                \\n                # Update the maximum length of the substring with at least k repeating characters seen so far\\n                if len(char_count) == n_unique_chars and n_chars_at_least_k == n_unique_chars:\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```\\n```Ruby []\\ndef longest_substring(s, k)\\n  uniq_symb_set = s.chars.uniq\\n  maxlen = 0 # max length of potential substring, if we cannot find this string, it\\'ll remain 0\\n\\n  (1..uniq_symb_set.size).each do |uniq_symbs| # iterate over different count of unique symbols in substr\\n    at_least_k_chars = 0\\n    cnt = Hash.new(0) # count symbols in our window\\n\\n    l = 0\\n\\n    s.chars.each_with_index do |c, r| # using dynamic size of sliding window to fit into our uniq_symbs and k freq limits\\n      cnt[c] += 1 # move right border of this window\\n\\n      if cnt[c] == k # count this symbol as at least k times repeated in sliding window\\n        at_least_k_chars += 1\\n      end\\n\\n      while l < r && cnt.size > uniq_symbs # when window contains more than uniq_symbs chars, we need to shrink left border to t\\n        if cnt[s[l]] == k # if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is at_least_char symbol\\n          at_least_k_chars -= 1\\n        end\\n        cnt[s[l]] -= 1 # remove it from window counter\\n        cnt.delete(s[l]) if cnt[s[l]] == 0 # it it was last s[l] in window we need to erase it from set to maintain actual set size\\n        l += 1\\n      end\\n\\n      if cnt.size == uniq_symbs && at_least_k_chars == uniq_symbs\\n        maxlen = [maxlen, r - l + 1].max\\n      end\\n    end\\n  end\\n\\n  maxlen\\nend\\n```\\n\\n```Rust []\\nuse std::collections::{HashMap, HashSet};\\n\\nfn longest_substring(s: String, k: i32) -> i32 {\\n    let s = s.as_bytes();\\n    let uniq_symb_set: HashSet<u8> = s.iter().cloned().collect();\\n    let mut maxlen = 0; // max length of potential substring, if we cannot find this string, it\\'ll remain 0\\n\\n    for uniq_symbs in 1..=uniq_symb_set.len() { // iterate over different count of unique symbols in substr\\n        let mut at_least_k_chars = 0;\\n        let mut cnt: HashMap<u8, i32> = HashMap::new(); // count symbols in our window\\n\\n        let mut l = 0;\\n\\n        for r in 0..s.len() { // using dynamic size of sliding window to fit into our uniq_symbs and k freq limits\\n            let c = s[r];\\n            let count = cnt.entry(c).or_insert(0);\\n            *count += 1; // move right border of this window\\n\\n            if *count == k { // count this symbol as at least k times repeated in sliding window\\n                at_least_k_chars += 1;\\n            }\\n\\n            while l < r && cnt.len() > uniq_symbs { // when window contains more than uniq_symbs chars, we need to shrink left border to t\\n                let c = s[l];\\n                let count = cnt.get_mut(&c).unwrap();\\n                if *count == k { // if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is at_least_char symbol\\n                    at_least_k_chars -= 1;\\n                }\\n                *count -= 1; // remove it from window counter\\n                if *count == 0 { // it it was last s[l] in window we need to erase it from set to maintain actual set size\\n                    cnt.remove(&c);\\n                }\\n                l += 1;\\n            }\\n\\n            if cnt.len() == uniq_symbs && at_least_k_chars == uniq_symbs {\\n                maxlen = maxlen.max((r - l + 1) as i32);\\n            }\\n        }\\n    }\\n\\n    maxlen\\n}\\n```\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Python",
                    "Ruby",
                    "Rust",
                    "Hash Table"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size(), maxlen = 0;\\n\\n        for(int num_uniq = 1; num_uniq <= 26; ++num_uniq) { //iterate over different count of unique symbols in substr\\n            int count[128] = {0};\\n            int num_valid_uniq = 0, start = 0;\\n\\n            for(int end = 0; end < n; ++end) {\\n                int index = s[end];\\n                if(count[index] == 0) num_valid_uniq++;\\n                count[index]++;\\n\\n                while(num_valid_uniq > num_uniq) {\\n                    int index = s[start];\\n                    count[index]--;\\n                    if(count[index] == 0) num_valid_uniq--;\\n                    start++;\\n                }\\n\\n                bool valid = true;\\n                for(int i = 0; i < 128; ++i) {\\n                    if(count[i] > 0 && count[i] < k) {\\n                        valid = false;\\n                        break;\\n                    }\\n                }\\n                if(valid) maxlen = max(maxlen, end - start + 1);\\n            }\\n        }\\n\\n        return maxlen;\\n    }\\n};\\n```\n```python []\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        max_len = 0\\n        \\n        # Iterate over different counts of unique characters in substring\\n        for n_unique_chars in range(1, len(set(s))+1):\\n            \\n            start = 0\\n            char_count = {}\\n            n_chars_at_least_k = 0\\n            \\n            # Iterate over each character in the string\\n            for end in range(len(s)):\\n                # Count the frequency of the current character\\n                char_count[s[end]] = char_count.get(s[end], 0) + 1\\n                # If the frequency of the current character is at least k, increment the count of characters with at least k frequency\\n                if char_count[s[end]] == k:\\n                    n_chars_at_least_k += 1\\n                \\n                # Shrink the window from the left side if the number of unique characters exceeds the limit\\n                while len(char_count) > n_unique_chars:\\n                    # If the frequency of the character at the left end of the window is k, decrement the count of characters with at least k frequency\\n                    if char_count[s[start]] == k:\\n                        n_chars_at_least_k -= 1\\n                    # Decrement the frequency count of the character at the left end of the window\\n                    char_count[s[start]] -= 1\\n                    # Remove the character from the frequency count dictionary if its frequency becomes zero\\n                    if char_count[s[start]] == 0:\\n                        del char_count[s[start]]\\n                    start += 1\\n                \\n                # Update the maximum length of the substring with at least k repeating characters seen so far\\n                if len(char_count) == n_unique_chars and n_chars_at_least_k == n_unique_chars:\\n                    max_len = max(max_len, end - start + 1)\\n        \\n        return max_len\\n```\n```Ruby []\\ndef longest_substring(s, k)\\n  uniq_symb_set = s.chars.uniq\\n  maxlen = 0 # max length of potential substring, if we cannot find this string, it\\'ll remain 0\\n\\n  (1..uniq_symb_set.size).each do |uniq_symbs| # iterate over different count of unique symbols in substr\\n    at_least_k_chars = 0\\n    cnt = Hash.new(0) # count symbols in our window\\n\\n    l = 0\\n\\n    s.chars.each_with_index do |c, r| # using dynamic size of sliding window to fit into our uniq_symbs and k freq limits\\n      cnt[c] += 1 # move right border of this window\\n\\n      if cnt[c] == k # count this symbol as at least k times repeated in sliding window\\n        at_least_k_chars += 1\\n      end\\n\\n      while l < r && cnt.size > uniq_symbs # when window contains more than uniq_symbs chars, we need to shrink left border to t\\n        if cnt[s[l]] == k # if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is at_least_char symbol\\n          at_least_k_chars -= 1\\n        end\\n        cnt[s[l]] -= 1 # remove it from window counter\\n        cnt.delete(s[l]) if cnt[s[l]] == 0 # it it was last s[l] in window we need to erase it from set to maintain actual set size\\n        l += 1\\n      end\\n\\n      if cnt.size == uniq_symbs && at_least_k_chars == uniq_symbs\\n        maxlen = [maxlen, r - l + 1].max\\n      end\\n    end\\n  end\\n\\n  maxlen\\nend\\n```\n```Rust []\\nuse std::collections::{HashMap, HashSet};\\n\\nfn longest_substring(s: String, k: i32) -> i32 {\\n    let s = s.as_bytes();\\n    let uniq_symb_set: HashSet<u8> = s.iter().cloned().collect();\\n    let mut maxlen = 0; // max length of potential substring, if we cannot find this string, it\\'ll remain 0\\n\\n    for uniq_symbs in 1..=uniq_symb_set.len() { // iterate over different count of unique symbols in substr\\n        let mut at_least_k_chars = 0;\\n        let mut cnt: HashMap<u8, i32> = HashMap::new(); // count symbols in our window\\n\\n        let mut l = 0;\\n\\n        for r in 0..s.len() { // using dynamic size of sliding window to fit into our uniq_symbs and k freq limits\\n            let c = s[r];\\n            let count = cnt.entry(c).or_insert(0);\\n            *count += 1; // move right border of this window\\n\\n            if *count == k { // count this symbol as at least k times repeated in sliding window\\n                at_least_k_chars += 1;\\n            }\\n\\n            while l < r && cnt.len() > uniq_symbs { // when window contains more than uniq_symbs chars, we need to shrink left border to t\\n                let c = s[l];\\n                let count = cnt.get_mut(&c).unwrap();\\n                if *count == k { // if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is at_least_char symbol\\n                    at_least_k_chars -= 1;\\n                }\\n                *count -= 1; // remove it from window counter\\n                if *count == 0 { // it it was last s[l] in window we need to erase it from set to maintain actual set size\\n                    cnt.remove(&c);\\n                }\\n                l += 1;\\n            }\\n\\n            if cnt.len() == uniq_symbs && at_least_k_chars == uniq_symbs {\\n                maxlen = maxlen.max((r - l + 1) as i32);\\n            }\\n        }\\n    }\\n\\n    maxlen\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3335345,
                "title": "python-recursive-divide-and-conquer-beats-80",
                "content": "\\n```\\n\\n    def rec(self,s,k):\\n        #s += \\'0\\' will lead to infinite loop\\n        # eg \"aaa0\" will always be checked, s[0:3]->s[0:3]  \\n        #so on\\n        hmap = defaultdict(int);\\n        for c in s : hmap[c]+= 1\\n        p ,res = -1,0\\n        for i in range(0,len(s)):\\n            if( hmap[s[i]] < k ):\\n                res = max(res,self.rec(s[p+1:i],k))\\n                p = i\\n\\n        if( p > -1 ):\\n            res = max(res,self.rec(s[p+1:len(s)],k))\\n        \\n        if( p == -1 ): return len(s);\\n        else: return res \\n        \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        return self.rec(s,k)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\n\\n    def rec(self,s,k):\\n        #s += \\'0\\' will lead to infinite loop\\n        # eg \"aaa0\" will always be checked, s[0:3]->s[0:3]  \\n        #so on\\n        hmap = defaultdict(int);\\n        for c in s : hmap[c]+= 1\\n        p ,res = -1,0\\n        for i in range(0,len(s)):\\n            if( hmap[s[i]] < k ):\\n                res = max(res,self.rec(s[p+1:i],k))\\n                p = i\\n\\n        if( p > -1 ):\\n            res = max(res,self.rec(s[p+1:len(s)],k))\\n        \\n        if( p == -1 ): return len(s);\\n        else: return res \\n        \\n    def longestSubstring(self, s: str, k: int) -> int:\\n        return self.rec(s,k)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3147359,
                "title": "c-more-intuitive-and-simple-to-understand-sliding-window-solution",
                "content": "# Intuition\\nWe can make reference solution more readeble using builtin unordered_set and unordered_map, also this solution is suitable for large alpahbets(unicode, as an example) \\n\\n# Approach\\nJust similar as in author\\'s but with slight improvements\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        unordered_set<char> uniq_symb_set(begin(s), end(s));\\n        int maxlen = 0; // max length of potencial substring, if we cannot find this string, it\\'ll remain 0\\n        for(auto uniq_symbs = 1; uniq_symbs <= uniq_symb_set.size(); ++uniq_symbs) { //iterate over defferent count of unique symbols in substr\\n            int atLeastKChars = 0;\\n            unordered_map<char, int> cnt; // count symbols in our window\\n            for(size_t r=0, l=0; r < s.size(); ++r){ // using dymaic size of sliding window to fit into our uniq_symbs and k freq limits\\n                 ++cnt[s[r]]; // move right border of this window\\n                 if(cnt[s[r]] == k) ++atLeastKChars; // count this symbol as at least k times repeated in sliding window\\n\\n                while(l < r && cnt.size() > uniq_symbs) { // when window contain more than uniq_symbs chars, we need to shrink left border to t\\n                    if(cnt[s[l]] == k) --atLeastKChars; // if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is atLeastChar symbol\\n                    --cnt[s[l]]; //remove it from window counter\\n                    if(cnt[s[l]] == 0) cnt.erase(s[l]); // it it was last s[l] in window we need to erase it from set to maintain actual set size\\n                    ++l;\\n                }\\n                if(cnt.size() == uniq_symbs && atLeastKChars == uniq_symbs) maxlen = max(maxlen, static_cast<int>(r-l+1));\\n            }\\n        }\\n\\n        return maxlen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        unordered_set<char> uniq_symb_set(begin(s), end(s));\\n        int maxlen = 0; // max length of potencial substring, if we cannot find this string, it\\'ll remain 0\\n        for(auto uniq_symbs = 1; uniq_symbs <= uniq_symb_set.size(); ++uniq_symbs) { //iterate over defferent count of unique symbols in substr\\n            int atLeastKChars = 0;\\n            unordered_map<char, int> cnt; // count symbols in our window\\n            for(size_t r=0, l=0; r < s.size(); ++r){ // using dymaic size of sliding window to fit into our uniq_symbs and k freq limits\\n                 ++cnt[s[r]]; // move right border of this window\\n                 if(cnt[s[r]] == k) ++atLeastKChars; // count this symbol as at least k times repeated in sliding window\\n\\n                while(l < r && cnt.size() > uniq_symbs) { // when window contain more than uniq_symbs chars, we need to shrink left border to t\\n                    if(cnt[s[l]] == k) --atLeastKChars; // if l is located on such symbol s[l] that consists k times in window [l, r] it means that it is atLeastChar symbol\\n                    --cnt[s[l]]; //remove it from window counter\\n                    if(cnt[s[l]] == 0) cnt.erase(s[l]); // it it was last s[l] in window we need to erase it from set to maintain actual set size\\n                    ++l;\\n                }\\n                if(cnt.size() == uniq_symbs && atLeastKChars == uniq_symbs) maxlen = max(maxlen, static_cast<int>(r-l+1));\\n            }\\n        }\\n\\n        return maxlen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2755658,
                "title": "understanding-the-slide-window-solution",
                "content": "Hi, guys!  I have found that it\\'s easier to understand the solution if we focus back on the problem.\\nFirst of all, the numbers of unique characters of a string, and the number of repeating of each character are two different concepts.\\nlet\\'s take some cases for example.\\n1.input str: abc, k=1,  answer:abc\\n2.input str: abc, k= 2, answer:\"\"\\n3.input str: aabbc, k=2, answer:aabb\\n4.input str: aaabbc, k=3, answer: aaa\\nthe numbers of unique characters of a string, it range from 1 to 26\\nthe number of repeating for each character,  it\\'s the input variable k.\\nOur mission is to find the largest substring from all the substrings which has from 1 to 26 unique characters, and every character appears at least k times.\\nSo our code looking like this at the beginning:\\n```\\n\\t public int longestSubstring(String s, int k) {\\n        int res = 0;\\n        for (int curUnique = 1; curUnique <= 26; curUnique++) {\\n            res = Math.max(res, slideWindow(s, k, curUnique));\\n        }\\n        return res;\\n    }\\n```\\nAfter finishing the skeleton above, let\\'s fill the slide window function.\\n```\\n    public int slideWindow(String s, int k, int curUnique) {\\n\\t    int res = 0, start = 0, end = 0;\\n\\t    while (end < s.length()) {\\n\\t        // todo\\n\\t\\t\\t// expand the window \\n\\t\\t\\t// shrink the window\\n\\t\\t\\t// compute the window length\\n\\t\\t\\tres =  Math.max(res, end - start);\\n\\t    }\\n\\t    return res;\\n    }\\n```\\nWhen do we expand the window?\\nIf the substring has number of unique characters no greater than curUnique, we expand the window, otherwise we shrink the window.\\nwe calcuate the window length when the current substring has number of curUnique unique characters and \\nLet\\'s see a case in detail,  the symbol [] indicates the window.\\ne.g. s = ababbc, k=2, curUnique = 1\\n[a]babbc --> [ab]abbc, we stop expand window, because [ab] has 2 unique characters(greater than curUnique=1), so we need to shrink the window now\\n[a]babbc --> [ab]abbc --> a[b]abbc\\nthe right pointer has not reached to the end of the string, we move end pointer to right.\\n[a]babbc --> [ab]abbc --> a[b]abbc --> a[ba]bbc -->ab[a]bbc --> ab[ab]bc --> aba[b]bc --> aba[bb]c,  res=max(0, 2)=2  --> aba[bbc] --> end loop of curUnique=1\\nthe max length of the first round: res = 2.\\n\\ne.g. s = ababbc, k=2, curUnique = 2\\n[a]babbc --> [ab]abbc --> [aba]bbc --> [abab]bc, window [abab] has 2 unique characters and each character appears at least 2 times, res = max(2, 4)=4 --> [ababb]c, res = max(4, 5) = 5 --> [ababbc], window has 3 unique characters, but only a, b has appears at least 2 times(a appears 2 times, b appears 3 times, c appears 1 times),  we don\\'t need to calcalute the max, and right pointer goes to the end of the string.\\nthe max length of the second round: res = 5\\n\\ne.g. s = ababbc, k=2, curUnique = 3\\n[a]babbc --> [ab]abbc --> [aba]bbc --> [abab]bc  --> [ababb]c --> [ababbc].\\nNone of the above substrings have 3 unique characters, and each unique character appears 2 times.\\nSo we needn\\'t to calcuate the max length.\\n...\\n```\\n     public int slideWindow(String s, int k, int curUnique) {\\n\\t    int res = 0, start = 0, end = 0;\\n\\t\\tint uniqueCnt = 0, countK = 0;\\n\\t    while (end < s.length()) {\\n\\t\\t\\tif (uniqueCnt <= curUnique) {\\n\\t\\t\\t   // update operations here\\n\\t\\t\\t   // expand the window \\n\\t\\t\\t   end++;\\n\\t\\t\\t} else {\\n\\t\\t\\t   // update operations here\\n\\t\\t\\t   // shrink the window\\n\\t\\t\\t   start++;\\n\\t\\t\\t}\\n\\t\\t\\t/**\\n\\t\\t\\t * uniqueCnt means the number of these characters that appear only once in each substring.\\n             * countK means the number of these characters that appear at least k times in each substring.\\n             * substring:[ababbc], k = 2, so uniqueCnt=3(only a, b, c three characters), countK = 2 (ababbc, a appears\\n             * two times, b appears three times, c appears only once, so there are only two characters a and b appears \\n             * at least k=2 times)\\n             *\\n\\t\\t\\t * e.g. s = ababbc, curUnique=1, k = 2\\n\\t\\t\\t * aba[bb]c, window [bb] has 1 unique character b, and the b character in window[bb]  appears 2 times.\\n\\t\\t\\t * So uniqueCnt == 1, countK == 1\\n             * curUnique=2, k = 2\\n             * window [ababb] has 2 unique characters, and there are 2 unique characters showing at least 2 times.\\n             * So uniqueCnt == 2, countK == 2\\n\\t\\t\\t */\\n\\t\\t\\tif (uniqueCnt == curUnique && countK == curUnique) {\\n\\t\\t\\t   // compute the window length\\n\\t\\t\\t   res =  Math.max(res, end - start);\\n\\t\\t\\t}\\n\\t    }\\n\\t    return res;\\n    }\\n```\\nNotice the symmetry structure of expanding window and shrinking window.\\n```\\n     private int slideWindow(String s, int k, int curUnique) {\\n        int res = 0;\\n        int[] freq = new int[26];\\n        int start = 0, end = 0;\\n        int uniqueCnt = 0, countK = 0;\\n        while (end < s.length()) {\\n            if (uniqueCnt <= curUnique) {\\n                int idx = s.charAt(end) - \\'a\\';\\n                freq[idx]++;\\n                // New unique character\\n                if (freq[idx] == 1) uniqueCnt++;\\n                // New character which occurs at least k times\\n                if (freq[idx] == k) countK++;\\n                // Expand window by incrementing end by 1\\n                end++;\\n            } else {\\n                int idx = s.charAt(start) - \\'a\\';\\n                // Check if this character is present at least k times\\n                if (freq[idx] == k) countK--;\\n                // Check if this character is unique\\n                if (freq[idx] == 1) uniqueCnt--;\\n                freq[idx]--;\\n                // Shrink the window by incrementing start by 1\\n                start++;\\n            }\\n\\n            if (uniqueCnt == curUnique && countK == curUnique) {\\n                res = Math.max(res, end - start);\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\n\\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t public int longestSubstring(String s, int k) {\\n        int res = 0;\\n        for (int curUnique = 1; curUnique <= 26; curUnique++) {\\n            res = Math.max(res, slideWindow(s, k, curUnique));\\n        }\\n        return res;\\n    }\\n```\n```\\n    public int slideWindow(String s, int k, int curUnique) {\\n\\t    int res = 0, start = 0, end = 0;\\n\\t    while (end < s.length()) {\\n\\t        // todo\\n\\t\\t\\t// expand the window \\n\\t\\t\\t// shrink the window\\n\\t\\t\\t// compute the window length\\n\\t\\t\\tres =  Math.max(res, end - start);\\n\\t    }\\n\\t    return res;\\n    }\\n```\n```\\n     public int slideWindow(String s, int k, int curUnique) {\\n\\t    int res = 0, start = 0, end = 0;\\n\\t\\tint uniqueCnt = 0, countK = 0;\\n\\t    while (end < s.length()) {\\n\\t\\t\\tif (uniqueCnt <= curUnique) {\\n\\t\\t\\t   // update operations here\\n\\t\\t\\t   // expand the window \\n\\t\\t\\t   end++;\\n\\t\\t\\t} else {\\n\\t\\t\\t   // update operations here\\n\\t\\t\\t   // shrink the window\\n\\t\\t\\t   start++;\\n\\t\\t\\t}\\n\\t\\t\\t/**\\n\\t\\t\\t * uniqueCnt means the number of these characters that appear only once in each substring.\\n             * countK means the number of these characters that appear at least k times in each substring.\\n             * substring:[ababbc], k = 2, so uniqueCnt=3(only a, b, c three characters), countK = 2 (ababbc, a appears\\n             * two times, b appears three times, c appears only once, so there are only two characters a and b appears \\n             * at least k=2 times)\\n             *\\n\\t\\t\\t * e.g. s = ababbc, curUnique=1, k = 2\\n\\t\\t\\t * aba[bb]c, window [bb] has 1 unique character b, and the b character in window[bb]  appears 2 times.\\n\\t\\t\\t * So uniqueCnt == 1, countK == 1\\n             * curUnique=2, k = 2\\n             * window [ababb] has 2 unique characters, and there are 2 unique characters showing at least 2 times.\\n             * So uniqueCnt == 2, countK == 2\\n\\t\\t\\t */\\n\\t\\t\\tif (uniqueCnt == curUnique && countK == curUnique) {\\n\\t\\t\\t   // compute the window length\\n\\t\\t\\t   res =  Math.max(res, end - start);\\n\\t\\t\\t}\\n\\t    }\\n\\t    return res;\\n    }\\n```\n```\\n     private int slideWindow(String s, int k, int curUnique) {\\n        int res = 0;\\n        int[] freq = new int[26];\\n        int start = 0, end = 0;\\n        int uniqueCnt = 0, countK = 0;\\n        while (end < s.length()) {\\n            if (uniqueCnt <= curUnique) {\\n                int idx = s.charAt(end) - \\'a\\';\\n                freq[idx]++;\\n                // New unique character\\n                if (freq[idx] == 1) uniqueCnt++;\\n                // New character which occurs at least k times\\n                if (freq[idx] == k) countK++;\\n                // Expand window by incrementing end by 1\\n                end++;\\n            } else {\\n                int idx = s.charAt(start) - \\'a\\';\\n                // Check if this character is present at least k times\\n                if (freq[idx] == k) countK--;\\n                // Check if this character is unique\\n                if (freq[idx] == 1) uniqueCnt--;\\n                freq[idx]--;\\n                // Shrink the window by incrementing start by 1\\n                start++;\\n            }\\n\\n            if (uniqueCnt == curUnique && countK == curUnique) {\\n                res = Math.max(res, end - start);\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2592706,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\t//  Base Conditions.\\n        int n=s.size();\\n        if(n==0||n<k)\\n            return 0;\\n        if(k==0)\\n            return n;\\n\\t// Storing Frequency of Each character.\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<n;i++)\\n            mp[s[i]]++;\\n  // Finding a character whose Frequency is less than k .     \\n        int brk=0;\\n        while(brk<n&&mp[s[brk]]>=k)\\n            brk++;\\n // If our brk reaches to n means every character has frequency >=k.\\n // we got our result.\\n        if(brk==n)\\n            return n;\\n// breaking our string into two parts .\\n// And applying recursion.\\n        int left=longestSubstring(s.substr(0,brk),k);\\n// To Skip characters whose frequency is <k\\n        while(brk<n&&mp[s[brk]]<k)\\n            brk++;\\n        int right=longestSubstring(s.substr(brk),k);\\n// Analyzing which side has the longest string.\\n        return max(left,right);\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Recursion"
                ],
                "code": "class Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n\\t//  Base Conditions.\\n        int n=s.size();\\n        if(n==0||n<k)\\n            return 0;\\n        if(k==0)\\n            return n;\\n\\t// Storing Frequency of Each character.\\n        unordered_map<char,int>mp;\\n        for(int i=0;i<n;i++)\\n            mp[s[i]]++;\\n  // Finding a character whose Frequency is less than k .     \\n        int brk=0;\\n        while(brk<n&&mp[s[brk]]>=k)\\n            brk++;\\n // If our brk reaches to n means every character has frequency >=k.\\n // we got our result.\\n        if(brk==n)\\n            return n;\\n// breaking our string into two parts .\\n// And applying recursion.\\n        int left=longestSubstring(s.substr(0,brk),k);\\n// To Skip characters whose frequency is <k\\n        while(brk<n&&mp[s[brk]]<k)\\n            brk++;\\n        int right=longestSubstring(s.substr(brk),k);\\n// Analyzing which side has the longest string.\\n        return max(left,right);\\n    }",
                "codeTag": "Java"
            },
            {
                "id": 2552660,
                "title": "c-solution",
                "content": "**Sliding Window**\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int result=0;\\n        for(int i=1;i<=26;i++)\\n        {\\n            result=max(fun(s,k,i),result);\\n        }\\n        return result;\\n    }\\n    int fun(string &s,int k,int total_unique)\\n    {\\n        int i=0;\\n        int j=0;\\n        int current_unique=0;\\n        unordered_map<int,int>mp;\\n        int count=0;\\n        int result=0;\\n        while(j<s.size())\\n        {\\n            // Pre-Calculation\\n            mp[s[j]-\\'a\\']++;\\n            if(mp[s[j]-\\'a\\']==1)\\n                current_unique++;\\n            if(mp[s[j]-\\'a\\']==k)\\n                count++;\\n            \\n            // Play With Condition\\n            if(current_unique<total_unique)\\n                j++;\\n            else\\n            {\\n                while(current_unique>total_unique)\\n                {\\n                    // remove calculation for i\\n                    mp[s[i]-\\'a\\']--;\\n                    if(mp[s[i]-\\'a\\']==0)\\n                        current_unique--;\\n                    if(mp[s[i]-\\'a\\']==k-1)\\n                        count--;\\n                    i++;\\n                }\\n                \\n                if(count==total_unique)\\n                    result=max(result,j-i+1);\\n                j++;\\n            }\\n        \\n        }\\n        return result;\\n    }\\n};\\n\\nTime Complexity: O(26*n)\\nSpace Compexity: O(n)\\n```\\n\\n**Recursion**\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size()==0) return 0;\\n        \\n        vector<int>freq(26,0);\\n        for(auto ch:s)\\n            freq[ch-\\'a\\']++;\\n        int i;\\n        for( i=0;i<s.size();i++)\\n            if(freq[s[i]-\\'a\\']<k)\\n                break;\\n        if(i==s.size())\\n            return s.size();\\n        int left=longestSubstring(s.substr(0,i),k);\\n        int right=longestSubstring(s.substr(i+1),k);\\n        return max(left,right);\\n    }\\n};\\n\\nTime Complexity: O(nlog2(n))\\nSpace Compelxity: O(1)\\n```\\n\\n***PLEASE UPVOTE IF YOU FIND IT A LITTLE BIT HELFPUL, MEANS A LOT ;)***",
                "solutionTags": [
                    "C++",
                    "C",
                    "Divide and Conquer",
                    "Recursion",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int result=0;\\n        for(int i=1;i<=26;i++)\\n        {\\n            result=max(fun(s,k,i),result);\\n        }\\n        return result;\\n    }\\n    int fun(string &s,int k,int total_unique)\\n    {\\n        int i=0;\\n        int j=0;\\n        int current_unique=0;\\n        unordered_map<int,int>mp;\\n        int count=0;\\n        int result=0;\\n        while(j<s.size())\\n        {\\n            // Pre-Calculation\\n            mp[s[j]-\\'a\\']++;\\n            if(mp[s[j]-\\'a\\']==1)\\n                current_unique++;\\n            if(mp[s[j]-\\'a\\']==k)\\n                count++;\\n            \\n            // Play With Condition\\n            if(current_unique<total_unique)\\n                j++;\\n            else\\n            {\\n                while(current_unique>total_unique)\\n                {\\n                    // remove calculation for i\\n                    mp[s[i]-\\'a\\']--;\\n                    if(mp[s[i]-\\'a\\']==0)\\n                        current_unique--;\\n                    if(mp[s[i]-\\'a\\']==k-1)\\n                        count--;\\n                    i++;\\n                }\\n                \\n                if(count==total_unique)\\n                    result=max(result,j-i+1);\\n                j++;\\n            }\\n        \\n        }\\n        return result;\\n    }\\n};\\n\\nTime Complexity: O(26*n)\\nSpace Compexity: O(n)\\n```\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        if(s.size()==0) return 0;\\n        \\n        vector<int>freq(26,0);\\n        for(auto ch:s)\\n            freq[ch-\\'a\\']++;\\n        int i;\\n        for( i=0;i<s.size();i++)\\n            if(freq[s[i]-\\'a\\']<k)\\n                break;\\n        if(i==s.size())\\n            return s.size();\\n        int left=longestSubstring(s.substr(0,i),k);\\n        int right=longestSubstring(s.substr(i+1),k);\\n        return max(left,right);\\n    }\\n};\\n\\nTime Complexity: O(nlog2(n))\\nSpace Compelxity: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2471131,
                "title": "c-sliding-window",
                "content": "```\\nclass Solution {\\npublic:\\n    int solve(string s, int start, int end, int k){\\n        if(end-start < k) return 0;\\n        vector<int>arr(26, 0);\\n        for(int i = start; i < end; i++){\\n            arr[s[i]-\\'a\\']++;\\n        }\\n        for(int i = start; i < end; i++){\\n            if(arr[s[i]-\\'a\\'] < k){\\n                int j = i+1;\\n                while(j < end && arr[s[j]-\\'a\\'] < k){\\n                    j++;\\n                }\\n                return max(solve(s,start,i,k),solve(s,j,end,k));\\n            }\\n        }\\n        return end-start;\\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n        return solve(s,0,s.size(),k);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int solve(string s, int start, int end, int k){\\n        if(end-start < k) return 0;\\n        vector<int>arr(26, 0);\\n        for(int i = start; i < end; i++){\\n            arr[s[i]-\\'a\\']++;\\n        }\\n        for(int i = start; i < end; i++){\\n            if(arr[s[i]-\\'a\\'] < k){\\n                int j = i+1;\\n                while(j < end && arr[s[j]-\\'a\\'] < k){\\n                    j++;\\n                }\\n                return max(solve(s,start,i,k),solve(s,j,end,k));\\n            }\\n        }\\n        return end-start;\\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n        return solve(s,0,s.size(),k);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2444441,
                "title": "java-solution-recursive-sliding-window",
                "content": "**1. Recursive Solution**\\n```java\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return findLongestSubstring(s, k, 0, s.length());\\n    }\\n    private int findLongestSubstring(String s, int k, int start, int end) {\\n        if (end - start < k) {\\n            return 0;\\n        }\\n        \\n        int[] freq = new int[26];\\n        for (int i = start; i < end; i++) {\\n            freq[s.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        for (int i = start; i < end; i++) {\\n            if (freq[s.charAt(i) - \\'a\\'] < k) {\\n                int leftSubstring = findLongestSubstring(s, k, start, i);\\n                int rightSubstring = findLongestSubstring(s, k, i + 1, end);\\n                return Math.max(leftSubstring, rightSubstring);\\n            }\\n        }\\n        \\n        return end - start;\\n    }\\n}\\n```\\n\\n**2. Sliding Window Solution**\\n```java\\nclass Solution {\\n    public int longestSubstring(String st, int k) {\\n        int ans = 0;\\n        \\n        char[] s = st.toCharArray();\\n        \\n        int[] freq = new int[26];\\n        for (int i = 0; i < s.length; i++) {\\n            freq[s[i] - \\'a\\']++;\\n        }\\n        \\n        int uniChars = 0;\\n        for (int i = 0; i < 26; i++) {\\n            if (freq[i] != 0) {\\n                uniChars++;\\n            }\\n        }\\n        \\n        for (int curr = 1; curr <= uniChars; curr++) {\\n            Arrays.fill(freq, 0);\\n            int start = 0, end = 0;\\n            int count = 0, count_k = 0;\\n            \\n            while (end < s.length) {\\n                if (count <= curr) {\\n                    int ind = s[end] - \\'a\\';\\n                    if (freq[ind] == 0) {\\n                        count++;\\n                    }\\n                    freq[ind]++;\\n                    if (freq[ind] == k) {\\n                        count_k++;\\n                    }\\n                    end++;\\n                } else {\\n                    int ind = s[start] - \\'a\\';\\n                    if (freq[ind] == k) {\\n                        count_k--;\\n                    }\\n                    freq[ind]--;\\n                    if (freq[ind] == 0) {\\n                        count--;\\n                    }\\n                    start++;\\n                }\\n                if (count == curr && count_k == curr) {\\n                    ans = Math.max(ans, end - start);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Divide and Conquer",
                    "Recursion",
                    "Sliding Window"
                ],
                "code": "```java\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        return findLongestSubstring(s, k, 0, s.length());\\n    }\\n    private int findLongestSubstring(String s, int k, int start, int end) {\\n        if (end - start < k) {\\n            return 0;\\n        }\\n        \\n        int[] freq = new int[26];\\n        for (int i = start; i < end; i++) {\\n            freq[s.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        for (int i = start; i < end; i++) {\\n            if (freq[s.charAt(i) - \\'a\\'] < k) {\\n                int leftSubstring = findLongestSubstring(s, k, start, i);\\n                int rightSubstring = findLongestSubstring(s, k, i + 1, end);\\n                return Math.max(leftSubstring, rightSubstring);\\n            }\\n        }\\n        \\n        return end - start;\\n    }\\n}\\n```\n```java\\nclass Solution {\\n    public int longestSubstring(String st, int k) {\\n        int ans = 0;\\n        \\n        char[] s = st.toCharArray();\\n        \\n        int[] freq = new int[26];\\n        for (int i = 0; i < s.length; i++) {\\n            freq[s[i] - \\'a\\']++;\\n        }\\n        \\n        int uniChars = 0;\\n        for (int i = 0; i < 26; i++) {\\n            if (freq[i] != 0) {\\n                uniChars++;\\n            }\\n        }\\n        \\n        for (int curr = 1; curr <= uniChars; curr++) {\\n            Arrays.fill(freq, 0);\\n            int start = 0, end = 0;\\n            int count = 0, count_k = 0;\\n            \\n            while (end < s.length) {\\n                if (count <= curr) {\\n                    int ind = s[end] - \\'a\\';\\n                    if (freq[ind] == 0) {\\n                        count++;\\n                    }\\n                    freq[ind]++;\\n                    if (freq[ind] == k) {\\n                        count_k++;\\n                    }\\n                    end++;\\n                } else {\\n                    int ind = s[start] - \\'a\\';\\n                    if (freq[ind] == k) {\\n                        count_k--;\\n                    }\\n                    freq[ind]--;\\n                    if (freq[ind] == 0) {\\n                        count--;\\n                    }\\n                    start++;\\n                }\\n                if (count == curr && count_k == curr) {\\n                    ans = Math.max(ans, end - start);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2400608,
                "title": "java-recursion-with-map-solution",
                "content": "class Solution {\\n    public int longestSubstring(String s, int k) {\\n        \\n        HashMap<Character,Integer>map = new HashMap<>();\\n        \\n        for(int i = 0; i<s.length(); i++){\\n            \\n            char ch= s.charAt(i);\\n            if(map.containsKey(ch)){\\n                int freq = map.get(ch);\\n                freq++;\\n                map.put(ch,freq);\\n            }\\n            else{\\n                map.put(ch,1);\\n            }\\n        }\\n        \\n        int ans = 0;\\n        while(ans < s.length() && map.get(s.charAt(ans)) >= k){\\n            ans++;\\n        }\\n        \\n        if(ans == s.length()){\\n            return ans;\\n        }\\n        \\n        int left = longestSubstring(s.substring(0,ans),k);\\n        int right = longestSubstring(s.substring(ans+1),k);\\n        \\n        return Math.max(left,right);\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "class Solution {\\n    public int longestSubstring(String s, int k) {\\n        \\n        HashMap<Character,Integer>map = new HashMap<>();\\n        \\n        for(int i = 0; i<s.length(); i++){\\n            \\n            char ch= s.charAt(i);\\n            if(map.containsKey(ch)){\\n                int freq = map.get(ch);\\n                freq++;\\n                map.put(ch,freq);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2383684,
                "title": "python-simple-maths",
                "content": "\\n    def longestSubstring(self, s, k):\\n        for i in set(s):\\n            if s.count(i) < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(i))\\n            \\n        return len(s)",
                "solutionTags": [],
                "code": "\\n    def longestSubstring(self, s, k):\\n        for i in set(s):\\n            if s.count(i) < k:\\n                return max(self.longestSubstring(t, k) for t in s.split(i))\\n            \\n        return len(s)",
                "codeTag": "Python3"
            },
            {
                "id": 2380074,
                "title": "c-fast-easy",
                "content": "class Solution {\\npublic:\\n\\n    int longestSubstring(string s, int k) {\\n         int n=s.length();\\n        if(n==0 || n < k) return 0;\\n        if(k<=1) return n;\\n        \\n        unordered_map<char,int> count;\\n        for(int i=0;i<n;i++){\\n            count[s[i]]++;\\n        }\\n        int l=0;\\n        while(l < n && count[s[l]] >= k){\\n            l++;\\n        }\\n        if(l >= n-1) return l;\\n        \\n        int ls1=longestSubstring(s.substr(0,l),k);\\n        while(l<n &&  count[s[l]] < k){\\n            l++;\\n        }\\n        int ls2=(l<n) ? longestSubstring(s.substr(l),k) : 0;\\n        return max(ls1,ls2);\\n        \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int longestSubstring(string s, int k) {\\n         int n=s.length();\\n        if(n==0 || n < k) return 0;\\n        if(k<=1) return n;\\n        \\n        unordered_map<char,int> count;\\n        for(int i=0;i<n;i++){\\n            count[s[i]]++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2314287,
                "title": "javascript-divide-and-conquer-recursion-solution",
                "content": "```\\nvar longestSubstring = function(s, k) {\\n    let n = s.length;\\n    if(n == 0 || n < k)\\n        return 0;\\n    if(k == 1)\\n        return n;\\n    \\n    const freq = {};  // object to store the freq of each character ex . { \\'a\\' : 2 , \\'b\\' : 1 ...}\\n    \\n\\t// counting the freq. of each character\\n    for(let i=0;i<n;i++)  \\n    {\\n        let char = s[i];\\n        if(freq[char])    // if the character is already present , increase it\\'s freq.\\n            freq[char]++;\\n        else\\n            freq[char] = 1; // else assign the freq. as 1\\n    }\\n    let i = 0;\\n    while(i < n && freq[s[i]] >= k)  // while loop continue till the freq. of character is greater than or equal to k\\n        i++;\\n    \\n    if(i >= n-1) // if i == string.length\\n        return i;\\n    \\n    let left1 = longestSubstring(s.substring(0,i),k);  // dividing the string at index where freq. of character is less than k and calling the func again on the substring\\n    \\n    while(i < n && freq[s[i]] < k) // ignore the char whose freq. is less than k\\n        i++;\\n    \\n    let right1 = longestSubstring(s.substring(i),k); // second part of the string\\n    \\n    return Math.max(left1,right1);\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion"
                ],
                "code": "```\\nvar longestSubstring = function(s, k) {\\n    let n = s.length;\\n    if(n == 0 || n < k)\\n        return 0;\\n    if(k == 1)\\n        return n;\\n    \\n    const freq = {};  // object to store the freq of each character ex . { \\'a\\' : 2 , \\'b\\' : 1 ...}\\n    \\n\\t// counting the freq. of each character\\n    for(let i=0;i<n;i++)  \\n    {\\n        let char = s[i];\\n        if(freq[char])    // if the character is already present , increase it\\'s freq.\\n            freq[char]++;\\n        else\\n            freq[char] = 1; // else assign the freq. as 1\\n    }\\n    let i = 0;\\n    while(i < n && freq[s[i]] >= k)  // while loop continue till the freq. of character is greater than or equal to k\\n        i++;\\n    \\n    if(i >= n-1) // if i == string.length\\n        return i;\\n    \\n    let left1 = longestSubstring(s.substring(0,i),k);  // dividing the string at index where freq. of character is less than k and calling the func again on the substring\\n    \\n    while(i < n && freq[s[i]] < k) // ignore the char whose freq. is less than k\\n        i++;\\n    \\n    let right1 = longestSubstring(s.substring(i),k); // second part of the string\\n    \\n    return Math.max(left1,right1);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2279667,
                "title": "python-o-26-n-two-pointer-solution",
                "content": "```\\n def longestSubstring(self, s: str, k: int) -> int:\\n        ans = 0\\n        for i in range(1, 27):\\n            c = Counter(); j = 0\\n            for ch in s:\\n                if (ch in c) or (ch not in c and len(c) < i):\\n                    c.update(ch)\\n                    val = 0\\n                    for keys,values in c.items():\\n                        if values<k:\\n                            val = 0\\n                            break\\n                        val += values\\n                    ans = max(ans,val)\\n                else:\\n                    while len(c) == i:\\n                        c[s[j]] -= 1\\n                        if c[s[j]] == 0: del c[s[j]]\\n                        j += 1\\n                    c.update(ch)\\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\n def longestSubstring(self, s: str, k: int) -> int:\\n        ans = 0\\n        for i in range(1, 27):\\n            c = Counter(); j = 0\\n            for ch in s:\\n                if (ch in c) or (ch not in c and len(c) < i):\\n                    c.update(ch)\\n                    val = 0\\n                    for keys,values in c.items():\\n                        if values<k:\\n                            val = 0\\n                            break\\n                        val += values\\n                    ans = max(ans,val)\\n                else:\\n                    while len(c) == i:\\n                        c[s[j]] -= 1\\n                        if c[s[j]] == 0: del c[s[j]]\\n                        j += 1\\n                    c.update(ch)\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1892528,
                "title": "2-solutions-recursion-and-iteration",
                "content": "**Recursion**\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if(n < k) return 0;\\n        \\n        unordered_map<char,int> mp;\\n        for(auto &it : s) mp[it]++;\\n        \\n        int j = 0;\\n        \\n        while(j < n and mp[s[j]] >= k) j++;\\n        \\n        if(j >= n-1) return j;\\n\\n        int c1 = longestSubstring(s.substr(0,j),k);\\n        \\n        while(j < n and mp[s[j]] < k) j++;\\n        \\n        int c2 = longestSubstring(s.substr(j),k);\\n        \\n        return max(c1,c2);\\n    }\\n};\\n```\\n\\n**Iteration**\\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int ans = 0;\\n        for(int i=0;i<s.size();i++){\\n            int count = 0;\\n            unordered_map<char,int> mp;\\n            for(int j=i;j<s.size();j++){\\n                mp[s[j]]++;\\n                if(mp[s[j]] == k) count++;\\n                if(count == mp.size()) ans = max(ans,j-i+1);\\n            }\\n        }      \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int n = s.size();\\n        if(n < k) return 0;\\n        \\n        unordered_map<char,int> mp;\\n        for(auto &it : s) mp[it]++;\\n        \\n        int j = 0;\\n        \\n        while(j < n and mp[s[j]] >= k) j++;\\n        \\n        if(j >= n-1) return j;\\n\\n        int c1 = longestSubstring(s.substr(0,j),k);\\n        \\n        while(j < n and mp[s[j]] < k) j++;\\n        \\n        int c2 = longestSubstring(s.substr(j),k);\\n        \\n        return max(c1,c2);\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n        int ans = 0;\\n        for(int i=0;i<s.size();i++){\\n            int count = 0;\\n            unordered_map<char,int> mp;\\n            for(int j=i;j<s.size();j++){\\n                mp[s[j]]++;\\n                if(mp[s[j]] == k) count++;\\n                if(count == mp.size()) ans = max(ans,j-i+1);\\n            }\\n        }      \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1764489,
                "title": "python-sliding-window-o-n-solution-with-better-abstraction-for-readability",
                "content": "#### Background\\nI try to write this solution in a more readable way by providing `getLongestSubstringWithTConstraint` (see below).\\n\\nBy iterating through 1 to num_of_unique_char in s, we thus can have the max_length of sub_string where each char repeats k times.\\n\\n##### Steps:\\nmax_length_of_sub_string_contains_one_char: `get substring length of s where each char repeats k times and only have 1 unique char`\\nmax_length_of_sub_string_contains_two_char: `get substring length of s where each char repeats k times and only have 2 unique char`\\n...\\nmax_length_of_sub_string_contains_k_char: `get substring length of s where each char repeats k times and only have k unique char`\\n\\nNote: k <= 26 because we only have 26 alphabets (a-z)\\n\\n##### Result\\n`result = max([max_length_of_sub_string_contains_one_char, ..., max_length_of_sub_string_contains_k_char])`\\nNote: time complexity will be O(26) * O(getLongestSubstringWithTConstraint) = O(getLongestSubstringWithTConstraint) because we at most iterating k(max: 26) times\\n\\n#### **getLongestSubstringWithTConstraint(s, k, t)**\\n```\\ns: substring\\nk: repeated k times\\nt: num of unique elements\\n```\\nThis function get the length of sub_string where contains only t unique char which repeated at least k times.\\n\\nThe sliding window is kept to contain at most t element. When t is equal to num_of_unique_element in sliding_windows, we check if each elements in the sliding_windos is repeated with at least k times and update the max_substring_length to get max substring length.\\n\\nNote: time complexity will be O(N) * O(len(counter)) = O(N) * O(26) = O(N) `see below solution`\\n\\n#### Solution\\nAs mentioned above, the overall time complexity:\\nO(26) * O(getLongestSubstringWithTConstraint) = O(getLongestSubstringWithTConstraint) = O(26) * O(N) = O(N)\\n\\nSpace Complexity will be `O(N)` where N is the length of s\\n\\n```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        for i in range(1, len(set([c for c in s]))+1):\\n            length = self.getLongestSubstringWithTConstraint(s, k, i)\\n            max_length = max(max_length, length)\\n        return max_length\\n    \\n    def getLongestSubstringWithTConstraint(self, s, k, t):\\n        \"\"\"\\n        :param str s: input string\\n        :param int k: frequency\\n        :param int t: number of unique element\\n        \"\"\"\\n        counter = {}\\n        start = 0\\n        result = 0\\n        for idx, char in enumerate(s):\\n            counter[char] = counter.get(char, 0) + 1\\n\\t\\t\\t# shrink the window\\n            while len(counter) > t:\\n                removed_char = s[start]\\n                counter[removed_char] -= 1\\n                if counter[removed_char] == 0:\\n                    counter.pop(removed_char)\\n                start += 1\\n\\t\\t\\t# check if each char repeated at least k times\\n            if min(counter.values()) >= k:\\n                result = max(result, idx-start+1)\\n        return result\\n```",
                "solutionTags": [
                    "Python",
                    "Sliding Window"
                ],
                "code": "```\\ns: substring\\nk: repeated k times\\nt: num of unique elements\\n```\n```\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        \"\"\"\\n        :type s: str\\n        :type k: int\\n        :rtype: int\\n        \"\"\"\\n        max_length = 0\\n        for i in range(1, len(set([c for c in s]))+1):\\n            length = self.getLongestSubstringWithTConstraint(s, k, i)\\n            max_length = max(max_length, length)\\n        return max_length\\n    \\n    def getLongestSubstringWithTConstraint(self, s, k, t):\\n        \"\"\"\\n        :param str s: input string\\n        :param int k: frequency\\n        :param int t: number of unique element\\n        \"\"\"\\n        counter = {}\\n        start = 0\\n        result = 0\\n        for idx, char in enumerate(s):\\n            counter[char] = counter.get(char, 0) + 1\\n\\t\\t\\t# shrink the window\\n            while len(counter) > t:\\n                removed_char = s[start]\\n                counter[removed_char] -= 1\\n                if counter[removed_char] == 0:\\n                    counter.pop(removed_char)\\n                start += 1\\n\\t\\t\\t# check if each char repeated at least k times\\n            if min(counter.values()) >= k:\\n                result = max(result, idx-start+1)\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1721780,
                "title": "100-fast-divide-and-conquere-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n          int n = s.size();\\n          unordered_map<char, int> fre;\\n         \\n         if(k==1) return n;\\n         if(k > n || n==0) return 0;\\n         int l = 0;\\n         \\n          for(char ch : s) fre[ch]++;\\n        \\n         while(l < n && fre[s[l]] >= k) l++;\\n         \\n         if(l >= n-1) return l;\\n        \\n         int ls1 = longestSubstring(s.substr(0,l), k);\\n         \\n         while(l < n && fre[s[l]] < k) l++;\\n         int ls2 = (l < n) ? longestSubstring(s.substr(l), k) : 0;\\n        \\n         return max(ls1, ls2);\\n        \\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Divide and Conquer"
                ],
                "code": "class Solution {\\npublic:\\n    int longestSubstring(string s, int k) {\\n          int n = s.size();\\n          unordered_map<char, int> fre;\\n         \\n         if(k==1) return n;\\n         if(k > n || n==0) return 0;\\n         int l = 0;\\n         \\n          for(char ch : s) fre[ch]++;\\n        \\n         while(l < n && fre[s[l]] >= k) l++;\\n         \\n         if(l >= n-1) return l;\\n        \\n         int ls1 = longestSubstring(s.substr(0,l), k);\\n         \\n         while(l < n && fre[s[l]] < k) l++;\\n         int ls2 = (l < n) ? longestSubstring(s.substr(l), k) : 0;\\n        \\n         return max(ls1, ls2);\\n        \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 1556404,
                "title": "python-recursive-o-n-time-and-space",
                "content": "Create a historgram of string. If all occurrences are >=k, return length of string.\\n\\nElse there exists a bad character with occurence less than k. Remove the bad character and repeat the function call on all the resulting nonempty substrings, return the max function call on substrings.\\n\\nBase case is when string is empty or is string has all character frequency >=k.\\n\\nRuntime: O(26n)=O(n) because there are at most 26 characters, each recursion step removes a character, each set of subproblems has total length less than n.\\n\\nMemory: O(1), recursion depth is 26, each step is fixed sized data structures of 26 characters.\\n\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        hist=collections.Counter(s)\\n        \\n        if not s or min(hist.values())>=k:\\n            return len(s)\\n        \\n        for key in hist:\\n            if hist[key]<k:\\n                bad_char=key\\n        \\n        substrings=s.split(bad_char)\\n        \\n        sub_problems=[self.longestSubstring(substring,k) for substring in substrings]\\n        \\n        return max(sub_problems)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        hist=collections.Counter(s)\\n        \\n        if not s or min(hist.values())>=k:\\n            return len(s)\\n        \\n        for key in hist:\\n            if hist[key]<k:\\n                bad_char=key\\n        \\n        substrings=s.split(bad_char)\\n        \\n        sub_problems=[self.longestSubstring(substring,k) for substring in substrings]\\n        \\n        return max(sub_problems)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1394188,
                "title": "windowing-o-26-n-simple-two-pointer-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    \\n    \\n    int func(string s, int k, int tunique){\\n        \\n    int end =0;\\n    int start =0;\\n    int currunique=0;\\n    int numk =0;\\n        \\n    vector<int>v(26,0);\\n    int mx =0;\\n    \\n    while(end<s.length()){\\n        \\n        if(v[s[end]-\\'a\\']==0) currunique++;\\n        v[s[end]-\\'a\\']++;\\n        if(v[s[end]-\\'a\\']==k) numk++;\\n        end++;\\n        \\n        while(currunique>tunique){\\n            \\n            if(v[s[start]-\\'a\\']==k) numk--;\\n            v[s[start]-\\'a\\']--;\\n            if(v[s[start]-\\'a\\']==0) currunique--;\\n            start++;\\n            \\n        }\\n        \\n        if(numk==currunique) mx = max(mx,end-start);\\n        \\n        \\n    }\\n    \\n    return mx;    \\n        \\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n    int n = s.size();\\n    int cnt =0;\\n    for(int i =1; i<=26; i++){\\n        cnt = max(cnt,func(s,k,i));\\n    }\\n    return cnt;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    \\n    \\n    int func(string s, int k, int tunique){\\n        \\n    int end =0;\\n    int start =0;\\n    int currunique=0;\\n    int numk =0;\\n        \\n    vector<int>v(26,0);\\n    int mx =0;\\n    \\n    while(end<s.length()){\\n        \\n        if(v[s[end]-\\'a\\']==0) currunique++;\\n        v[s[end]-\\'a\\']++;\\n        if(v[s[end]-\\'a\\']==k) numk++;\\n        end++;\\n        \\n        while(currunique>tunique){\\n            \\n            if(v[s[start]-\\'a\\']==k) numk--;\\n            v[s[start]-\\'a\\']--;\\n            if(v[s[start]-\\'a\\']==0) currunique--;\\n            start++;\\n            \\n        }\\n        \\n        if(numk==currunique) mx = max(mx,end-start);\\n        \\n        \\n    }\\n    \\n    return mx;    \\n        \\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n    int n = s.size();\\n    int cnt =0;\\n    for(int i =1; i<=26; i++){\\n        cnt = max(cnt,func(s,k,i));\\n    }\\n    return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1386157,
                "title": "2-python-solution-explained-divide-and-conquer-sliding-window-with-other-similar-problems",
                "content": "# Divide And Conquer\\n```python\\n\"\"\"\\nTime: O(N^2) (Worst case). O(N) (Best case)\\nSpace: O(N)\\n\\nThe \"Substring\" must be a continuous part of s.\\nIf a certain char with index i does not have count>=k, the answer must be in `s[:i]` or `s[i+1:]`.\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        if not s: return 0\\n        counter = collections.Counter(s)\\n        \\n        i = 0\\n        while i<len(s):\\n            c = s[i]\\n            \\n            if counter[c]>=k:\\n                i += 1\\n            else:\\n                return max(self.longestSubstring(s[:i], k), self.longestSubstring(s[i+1:], k))\\n        return i\\n\\n\"\"\"\\nOptimize the above solution to using O(1) space by pointers `l` and `r`\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        def helper(l, r):\\n            if r-l==0: return 0\\n            counter = collections.Counter(s[l:r])\\n            \\n            i = l\\n            while i<r:\\n                c = s[i]\\n                \\n                if counter[c]>=k:\\n                    i += 1\\n                else:\\n                    return max(helper(l, i), helper(i+1, r))\\n            return i-l\\n        \\n        return helper(0, len(s))\\n```\\n\\n# Sliding Window\\n```python\\n\"\"\"\\nTime: O(N). Each `helper()` takes O(N), uniqueCount will be at most 26, O(26N) ~= O(N).\\nSpace: O(N).\\n\\nUse a sliding window (`s[i:j+1]`) to go through `s`.\\nGivin a fixed i we move the j as right as possible. Then move the i right (Before we move the i, recalculate a those var tracking s[i:j+1]) [0]\\nFor each sliding window if all the unique char has count>=k (`len(counter)==m and count==m`), update the answer.\\n\\nWhat is \"m\"?\\nWithout \"m\", you will soon notice that we are not able to stop sliding window growing.\\nSo we need to add the constraint: Get longestSubstring with m unique char. [1]\\nThe final answer will be the max of:\\nlongestSubstring with 1 unique char.\\nlongestSubstring with 2 unique char.\\n...\\n...\\nlongestSubstring with uniqueCount unique char.\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        ans = 0\\n        uniqueCount = len(set(s))\\n        \\n        for m in xrange(1, uniqueCount+1):\\n            ans = max(ans, self.helper(s, k, m))\\n            \\n        return ans\\n    \\n    #[1]\\n    def helper(self, s, k, m):\\n        j = 0\\n        counter = collections.Counter() #count each char in s[i:j+1]\\n        countOverK = 0 #number of char in s[i:j+1] count>=k\\n        ans = 0\\n        \\n        for i in xrange(len(s)):\\n            while j<len(s) and len(counter)<=m:\\n                counter[s[j]] += 1\\n                \\n                if counter[s[j]]==k: countOverK += 1\\n                \\n                #all char in the sliding window has count larger or equal to k.\\n                if len(counter)==m and countOverK==m: ans = max(ans, j-i+1)\\n                \\n                j += 1\\n            \\n            #[0]\\n            counter[s[i]] -= 1\\n            if counter[s[i]]==k-1: countOverK -= 1\\n            if counter[s[i]]==0: counter.pop(s[i], None)\\n                \\n        return ans\\n\\t\\t\\n\"\"\"\\nRelated Problems:\\nLongest Substring Without Repeating Characters\\nLongest Substring that contains k unique characters\\nSubstring with Concatenation of All Words\\nMinimum Window Substring\\nLongest Substring with At Least K Repeating Characters\\nPermutation in String\\n\\nFor more other topics similar problems, check out my GitHub.\\nIt took me a lots of time to make the solution. Becuase I want to help others like me.\\nPlease give me a star if you like it. Means a lot to me.\\nhttps://github.com/wuduhren/leetcode-python\\n\"\"\"\\n```",
                "solutionTags": [],
                "code": "```python\\n\"\"\"\\nTime: O(N^2) (Worst case). O(N) (Best case)\\nSpace: O(N)\\n\\nThe \"Substring\" must be a continuous part of s.\\nIf a certain char with index i does not have count>=k, the answer must be in `s[:i]` or `s[i+1:]`.\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        if not s: return 0\\n        counter = collections.Counter(s)\\n        \\n        i = 0\\n        while i<len(s):\\n            c = s[i]\\n            \\n            if counter[c]>=k:\\n                i += 1\\n            else:\\n                return max(self.longestSubstring(s[:i], k), self.longestSubstring(s[i+1:], k))\\n        return i\\n\\n\"\"\"\\nOptimize the above solution to using O(1) space by pointers `l` and `r`\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        def helper(l, r):\\n            if r-l==0: return 0\\n            counter = collections.Counter(s[l:r])\\n            \\n            i = l\\n            while i<r:\\n                c = s[i]\\n                \\n                if counter[c]>=k:\\n                    i += 1\\n                else:\\n                    return max(helper(l, i), helper(i+1, r))\\n            return i-l\\n        \\n        return helper(0, len(s))\\n```\n```python\\n\"\"\"\\nTime: O(N). Each `helper()` takes O(N), uniqueCount will be at most 26, O(26N) ~= O(N).\\nSpace: O(N).\\n\\nUse a sliding window (`s[i:j+1]`) to go through `s`.\\nGivin a fixed i we move the j as right as possible. Then move the i right (Before we move the i, recalculate a those var tracking s[i:j+1]) [0]\\nFor each sliding window if all the unique char has count>=k (`len(counter)==m and count==m`), update the answer.\\n\\nWhat is \"m\"?\\nWithout \"m\", you will soon notice that we are not able to stop sliding window growing.\\nSo we need to add the constraint: Get longestSubstring with m unique char. [1]\\nThe final answer will be the max of:\\nlongestSubstring with 1 unique char.\\nlongestSubstring with 2 unique char.\\n...\\n...\\nlongestSubstring with uniqueCount unique char.\\n\"\"\"\\nclass Solution(object):\\n    def longestSubstring(self, s, k):\\n        ans = 0\\n        uniqueCount = len(set(s))\\n        \\n        for m in xrange(1, uniqueCount+1):\\n            ans = max(ans, self.helper(s, k, m))\\n            \\n        return ans\\n    \\n    #[1]\\n    def helper(self, s, k, m):\\n        j = 0\\n        counter = collections.Counter() #count each char in s[i:j+1]\\n        countOverK = 0 #number of char in s[i:j+1] count>=k\\n        ans = 0\\n        \\n        for i in xrange(len(s)):\\n            while j<len(s) and len(counter)<=m:\\n                counter[s[j]] += 1\\n                \\n                if counter[s[j]]==k: countOverK += 1\\n                \\n                #all char in the sliding window has count larger or equal to k.\\n                if len(counter)==m and countOverK==m: ans = max(ans, j-i+1)\\n                \\n                j += 1\\n            \\n            #[0]\\n            counter[s[i]] -= 1\\n            if counter[s[i]]==k-1: countOverK -= 1\\n            if counter[s[i]]==0: counter.pop(s[i], None)\\n                \\n        return ans\\n\\t\\t\\n\"\"\"\\nRelated Problems:\\nLongest Substring Without Repeating Characters\\nLongest Substring that contains k unique characters\\nSubstring with Concatenation of All Words\\nMinimum Window Substring\\nLongest Substring with At Least K Repeating Characters\\nPermutation in String\\n\\nFor more other topics similar problems, check out my GitHub.\\nIt took me a lots of time to make the solution. Becuase I want to help others like me.\\nPlease give me a star if you like it. Means a lot to me.\\nhttps://github.com/wuduhren/leetcode-python\\n\"\"\"\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1322626,
                "title": "c-divide-conquer-solution-o-n",
                "content": "Runtime: 0 ms, faster than 100.00% of C++ online submissions for Longest Substring with At Least K Repeating Characters.\\nMemory Usage: 6.3 MB, less than 90.93% of C++ online submissions for Longest Substring with At Least K Repeating Characters.\\n\\nSimilar Problem : [1763. Longest Nice Substring](https://leetcode.com/problems/longest-nice-substring/) \\n\\n```\\nGiven string S and limit K. We need to find the longest substring where all unique character frequency \\nis at least K.\\n\\nWe can use frequency count and divide & conquer approach to solve this problem. At first we count the\\nfreq of chars in current string and then find the invalid chars whose freq < k and then call the recursive\\nmethod again for the left substring of that invalid freq char. This way we divide the string into pieces\\nwhen we get a char with invalid freq and get the max length substring with all char freq >= k.\\n\\nBase cases : \\n* k==1 => total string is the solution\\n* Substring length < k => no possible solution\\n* All char has freq >= k => total string is the solution\\n* All char has freq < k => no possible solution\\n```\\n\\n\\n```\\nExample : S= \"uuubsgbbbbgwk\" and K = 3, result is \"bbbb\" => Length 4\\nBelow is the simulation of divide & conqure approach\\n```\\n![image](https://assets.leetcode.com/users/images/98d0ade5-b685-4dc3-9ee4-96fb5c1e26b1_1626497397.3259056.png)\\n\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    int findLongestSubstring(string & s, int l, int h, int k)\\n    {\\n        // base case : l>=h then no solution\\n        if(l>=h) return 0;\\n        \\n        // base case : k > current substring length then no solution\\n        if(k>(h-l+1))return 0;\\n        \\n        // keep char frequency count in current substring\\n        int char_freq[26] = {0};\\n        \\n        // count no of char have freq >= k in current substring\\n        int validCount = 0;\\n        // count no of unique char in current substring\\n        int uniqueCount = 0;        \\n        for(int i=l;i<=h;i++)\\n        {\\n            char_freq[s[i]-\\'a\\']++;\\n            if(char_freq[s[i]-\\'a\\']==k)validCount++;\\n            if(char_freq[s[i]-\\'a\\']==1)uniqueCount++;\\n        }\\n        \\n        // no possible solution if no char has freq >= k\\n        if(validCount==0)return 0;\\n        \\n        // full substring is the solution if no char has freq < k\\n        if(uniqueCount == validCount)return h-l+1;\\n        \\n        // max length valid substring \\n        int result = 0;\\n        int start = l;\\n        int curr = l;\\n        \\n        // loop though current substring and call this divide conquire method for\\n        // substring start to current index when any char has freq < k\\n        // and recursively get the max valid substring length \\n        while(curr <= h)\\n        {\\n            // invalid char found and so call recusrsion over substring start to current index\\n            if(char_freq[s[curr]-\\'a\\']<k)\\n            {\\n                result = max(result,findLongestSubstring(s,start,curr-1,k));\\n                start = curr + 1;\\n            }\\n            curr++;\\n        }\\n        \\n        if(start<h)result = max(result,findLongestSubstring(s,start,h,k));\\n        \\n        return result;\\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n        \\n        // string S length\\n        int sl = s.length();\\n        \\n        // base case : K > sl then no possible solution\\n        if(k>sl) return 0;\\n        \\n        // if K == 1  then total string is the soution\\n        if(k==1) return sl;\\n        \\n        // call divide conquer algo over full string \\n        return findLongestSubstring(s,0,sl-1,k);\\n               \\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C",
                    "String",
                    "Divide and Conquer"
                ],
                "code": "```\\nGiven string S and limit K. We need to find the longest substring where all unique character frequency \\nis at least K.\\n\\nWe can use frequency count and divide & conquer approach to solve this problem. At first we count the\\nfreq of chars in current string and then find the invalid chars whose freq < k and then call the recursive\\nmethod again for the left substring of that invalid freq char. This way we divide the string into pieces\\nwhen we get a char with invalid freq and get the max length substring with all char freq >= k.\\n\\nBase cases : \\n* k==1 => total string is the solution\\n* Substring length < k => no possible solution\\n* All char has freq >= k => total string is the solution\\n* All char has freq < k => no possible solution\\n```\n```\\nExample : S= \"uuubsgbbbbgwk\" and K = 3, result is \"bbbb\" => Length 4\\nBelow is the simulation of divide & conqure approach\\n```\n```\\nclass Solution {\\npublic:\\n    \\n    int findLongestSubstring(string & s, int l, int h, int k)\\n    {\\n        // base case : l>=h then no solution\\n        if(l>=h) return 0;\\n        \\n        // base case : k > current substring length then no solution\\n        if(k>(h-l+1))return 0;\\n        \\n        // keep char frequency count in current substring\\n        int char_freq[26] = {0};\\n        \\n        // count no of char have freq >= k in current substring\\n        int validCount = 0;\\n        // count no of unique char in current substring\\n        int uniqueCount = 0;        \\n        for(int i=l;i<=h;i++)\\n        {\\n            char_freq[s[i]-\\'a\\']++;\\n            if(char_freq[s[i]-\\'a\\']==k)validCount++;\\n            if(char_freq[s[i]-\\'a\\']==1)uniqueCount++;\\n        }\\n        \\n        // no possible solution if no char has freq >= k\\n        if(validCount==0)return 0;\\n        \\n        // full substring is the solution if no char has freq < k\\n        if(uniqueCount == validCount)return h-l+1;\\n        \\n        // max length valid substring \\n        int result = 0;\\n        int start = l;\\n        int curr = l;\\n        \\n        // loop though current substring and call this divide conquire method for\\n        // substring start to current index when any char has freq < k\\n        // and recursively get the max valid substring length \\n        while(curr <= h)\\n        {\\n            // invalid char found and so call recusrsion over substring start to current index\\n            if(char_freq[s[curr]-\\'a\\']<k)\\n            {\\n                result = max(result,findLongestSubstring(s,start,curr-1,k));\\n                start = curr + 1;\\n            }\\n            curr++;\\n        }\\n        \\n        if(start<h)result = max(result,findLongestSubstring(s,start,h,k));\\n        \\n        return result;\\n    }\\n    \\n    int longestSubstring(string s, int k) {\\n        \\n        // string S length\\n        int sl = s.length();\\n        \\n        // base case : K > sl then no possible solution\\n        if(k>sl) return 0;\\n        \\n        // if K == 1  then total string is the soution\\n        if(k==1) return sl;\\n        \\n        // call divide conquer algo over full string \\n        return findLongestSubstring(s,0,sl-1,k);\\n               \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228590,
                "title": "divide-and-conquer-c-faster-than-100",
                "content": "```c++\\nint longestSubstring(string s, int k)\\n    {\\n\\t\\t// will never be valid if total length is less than k\\n        if (s.size() < k)\\n            return 0;\\n        int mx = INT_MIN;\\n        bool base = true;\\n        unordered_map<char, int> amnt;\\n        vector<int> split;\\n\\t\\t// get all frequencies\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            amnt[s[i]]++;\\n        }\\n\\t\\t// find splitting points i.e index of elements that have frequency less than k\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (amnt[s[i]] < k)\\n            {\\n                split.push_back(i);\\n                base = false;\\n            }\\n        }\\n\\t\\t// if no splitting points then string is valid. Return size\\n        if (base)\\n            return s.size();\\n\\t\\t// calculate initial split of 0 to first split point\\n        mx = max(mx, longestSubstring(s.substr(0, split[0] - 0), k));\\n\\t\\t//recursively find longest out of all valid sequences\\n        for (int i = 0; i < split.size() - 1; i++)\\n        {\\n            mx = max(mx, longestSubstring(s.substr(split[i] + 1, split[i + 1] - split[i] - 1), k));\\n        }\\n\\t\\t// one more call for split of last index of split to end of s\\n\\t\\t// only if end of s is not a split point already\\n        if (split[split.size() - 1] != s.size() - 1)\\n            mx = max(mx, longestSubstring(s.substr(split[split.size() - 1] + 1, s.size() - 1 - split[split.size() - 1]), k));\\n        return mx;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Divide and Conquer"
                ],
                "code": "```c++\\nint longestSubstring(string s, int k)\\n    {\\n\\t\\t// will never be valid if total length is less than k\\n        if (s.size() < k)\\n            return 0;\\n        int mx = INT_MIN;\\n        bool base = true;\\n        unordered_map<char, int> amnt;\\n        vector<int> split;\\n\\t\\t// get all frequencies\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            amnt[s[i]]++;\\n        }\\n\\t\\t// find splitting points i.e index of elements that have frequency less than k\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (amnt[s[i]] < k)\\n            {\\n                split.push_back(i);\\n                base = false;\\n            }\\n        }\\n\\t\\t// if no splitting points then string is valid. Return size\\n        if (base)\\n            return s.size();\\n\\t\\t// calculate initial split of 0 to first split point\\n        mx = max(mx, longestSubstring(s.substr(0, split[0] - 0), k));\\n\\t\\t//recursively find longest out of all valid sequences\\n        for (int i = 0; i < split.size() - 1; i++)\\n        {\\n            mx = max(mx, longestSubstring(s.substr(split[i] + 1, split[i + 1] - split[i] - 1), k));\\n        }\\n\\t\\t// one more call for split of last index of split to end of s\\n\\t\\t// only if end of s is not a split point already\\n        if (split[split.size() - 1] != s.size() - 1)\\n            mx = max(mx, longestSubstring(s.substr(split[split.size() - 1] + 1, s.size() - 1 - split[split.size() - 1]), k));\\n        return mx;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 968860,
                "title": "a-recursive-method-in-python",
                "content": "\\'\\'\\'\\n\\n    def longestSubstring(self, s: str, k: int) -> int:       \\n        \\n        def recursive(s, k):\\n            if not s: return 0\\n            count = collections.Counter(s)\\n            gap = min(count, key=count.get) \\n            if count[gap] >= k: return len(s)\\n            else:\\n                return max(recursive(x, k) for x in s.split(gap))\\n        \\n        return recursive(s, k)",
                "solutionTags": [],
                "code": "\\'\\'\\'\\n\\n    def longestSubstring(self, s: str, k: int) -> int:       \\n        \\n        def recursive(s, k):\\n            if not s: return 0\\n            count = collections.Counter(s)\\n            gap = min(count, key=count.get) \\n            if count[gap] >= k: return len(s)\\n            else:\\n                return max(recursive(x, k) for x in s.split(gap))\\n        \\n        return recursive(s, k)",
                "codeTag": "Python3"
            },
            {
                "id": 949962,
                "title": "python-3-divide-and-conquer-solution-beats-98",
                "content": "the idea is simple \\nconvert the given string in a set \\nfor every character of set check if its count is less than k\\n\\nif the count is less than k than split the string from every index of the character check for every split of string.and return the maximum of it ..\\n\\nfollow the code \\n```\\nclass Solution:\\n    def longestSubstring(self, string: str, k: int) -> int:\\n\\n        def find(string,k):\\n            for c in set(string):\\n                if string.count(c)<k:\\n                    return max(find(t,k)for t in string.split(c))\\n            return len(string)\\n\\n        return (find(string,k))\\n\\n\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, string: str, k: int) -> int:\\n\\n        def find(string,k):\\n            for c in set(string):\\n                if string.count(c)<k:\\n                    return max(find(t,k)for t in string.split(c))\\n            return len(string)\\n\\n        return (find(string,k))\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 949537,
                "title": "wrong-description-the-frequency-of-each-character-in-substring-should-be-k",
                "content": "Here is the original description\\n> Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is **less** than or equal to `k`.\\n> \\n\\nAs suggested by the title and examples, the description should be: \\n> Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is **greater** than or equal to `k`.\\n> \\n\\nBelow is a solution with brute-forced divide and conquer. \\nWe can simply exclude all char with frequency less than k and use them as pivot to split the current string into sub strings. \\nThen we perform the same operations on those sub strings. If all chars have frequency >= k, we find a eligible sub string. \\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if k<2:\\n            return len(s)\\n        self.ret=0\\n        def check(start,end):\\n            if end-start<k:\\n                return\\n            record={}\\n            for i in range(start,end):\\n                item=s[i]\\n                record[item]=record.get(item,0)+1\\n            split=[]\\n            for i in range(start,end):\\n                item=s[i]\\n                if record[item]<k:\\n                    split.append(i)\\n            if len(split)<1:\\n                self.ret=max(self.ret,end-start)\\n                return\\n            check(start,split[0])\\n            split.append(end)\\n            for i in range(len(split)-1):\\n                check(split[i]+1,split[i+1])\\n        check(0,len(s))\\n        return self.ret\\n```",
                "solutionTags": [
                    "Python",
                    "Divide and Conquer"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if k<2:\\n            return len(s)\\n        self.ret=0\\n        def check(start,end):\\n            if end-start<k:\\n                return\\n            record={}\\n            for i in range(start,end):\\n                item=s[i]\\n                record[item]=record.get(item,0)+1\\n            split=[]\\n            for i in range(start,end):\\n                item=s[i]\\n                if record[item]<k:\\n                    split.append(i)\\n            if len(split)<1:\\n                self.ret=max(self.ret,end-start)\\n                return\\n            check(start,split[0])\\n            split.append(end)\\n            for i in range(len(split)-1):\\n                check(split[i]+1,split[i+1])\\n        check(0,len(s))\\n        return self.ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 948338,
                "title": "python-solution-with-video-explanation",
                "content": "[Here\\'s the video explanation:-](https://www.youtube.com/watch?v=8hCBgTuynVw)\\n\\nCode:\\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        problematic_letters = []\\n        valid = True\\n        counter = Counter(s)\\n        for letter in counter:\\n            if counter[letter] < k:\\n                problematic_letters.append(letter)\\n                valid = False\\n        if valid:\\n            return len(s)\\n\\n        for letter in problematic_letters:\\n            s = s.replace(letter, \\' \\')\\n        strings_after_divide = s.split()\\n\\n        ans = 0\\n        for string in strings_after_divide:\\n            ans = max(ans, self.longestSubstring(string, k))\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Recursion"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        problematic_letters = []\\n        valid = True\\n        counter = Counter(s)\\n        for letter in counter:\\n            if counter[letter] < k:\\n                problematic_letters.append(letter)\\n                valid = False\\n        if valid:\\n            return len(s)\\n\\n        for letter in problematic_letters:\\n            s = s.replace(letter, \\' \\')\\n        strings_after_divide = s.split()\\n\\n        ans = 0\\n        for string in strings_after_divide:\\n            ans = max(ans, self.longestSubstring(string, k))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 863924,
                "title": "c-divide-and-conquer",
                "content": "\\'\\'\\'class Solution { \\n    \\n    int fun(int start, int end, string s, int k)\\n    {\\n        if(s.length()==0 || k>s.length())\\n            return 0;\\n        \\n        if(k <= 1)\\n            return (s.length());\\n        \\n        int aage, piche;\\n        int freq[26] = {};\\n        \\n        for(int i=start;i<end;i++)\\n        {\\n            freq[s[i]-\\'a\\']++;\\n        }    \\n               \\n        for(int i=start;i<end;i++)\\n        {\\n            if(freq[s[i]-\\'a\\'] < k)\\n            {\\n                aage = fun(start, i, s, k);\\n                piche = fun(i+1, end, s, k);\\n                \\n                return max(aage, piche);\\n            }\\n        }\\n        \\n        return (end - start);\\n    }\\n    \\n    public:\\n    \\n    int longestSubstring(string s, int k) \\n    {\\n                \\n        return fun(0, s.length(), s, k);\\n    }\\n        \\n    \\n};\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution { \\n    \\n    int fun(int start, int end, string s, int k)\\n    {\\n        if(s.length()==0 || k>s.length())\\n            return 0;\\n        \\n        if(k <= 1)\\n            return (s.length());\\n        \\n        int aage, piche;\\n        int freq[26] = {}",
                "codeTag": "Java"
            },
            {
                "id": 825847,
                "title": "python3-divide-conquer",
                "content": "Find least frequent character and compare its frequency with `k`\\n1) if its frequency is higher than `k`, return the length;\\n2) otherwise, split the string by this character. \\n```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if not s: return 0 # edge case \\n        \\n        freq = {} # frequency table \\n        for c in s: freq[c] = 1 + freq.get(c, 0)\\n            \\n        if min(freq.values()) < k: \\n            m = min(freq, key=freq.get)\\n            return max(self.longestSubstring(ss, k) for ss in s.split(m))\\n        return len(s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def longestSubstring(self, s: str, k: int) -> int:\\n        if not s: return 0 # edge case \\n        \\n        freq = {} # frequency table \\n        for c in s: freq[c] = 1 + freq.get(c, 0)\\n            \\n        if min(freq.values()) < k: \\n            m = min(freq, key=freq.get)\\n            return max(self.longestSubstring(ss, k) for ss in s.split(m))\\n        return len(s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 777637,
                "title": "easy-divide-conquer-java-solution-beats-100-time-0-ms-comments-on-time-complexity",
                "content": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        char[] strn=s.toCharArray();\\n        return longestSubstring(strn,0,s.length()-1,k);      \\n    }\\n    private int longestSubstring(char[] strn,int start, int end, int frequency){\\n        int N=end-start+1;\\n        int s=start;\\n        int e=end;\\n        int k=frequency;\\n    \\n        if(s==e && k==1) return 1;\\n        if(N<k) return 0;\\n        \\n        int[] FrequencyArray=new int[26];\\n\\t\\t//counting the occurences... \\n\\t\\t\\n        for(int i=s;i<=e;i++){\\n            char ch=strn[i];\\n            int index=ch-\\'a\\';\\n            FrequencyArray[index]+=1;\\n        }\\n        \\n        boolean Condition_Satisfied=true;\\n        \\n        for(int i=s;i<=e;i++){\\n            char ch=strn[i];\\n            int index=ch-\\'a\\';\\n            if(FrequencyArray[index]<k){\\n                Condition_Satisfied=false;\\n\\t\\t\\t\\tbreak;\\n            }\\n        }\\n        \\n        if(Condition_Satisfied==true){\\n\\t\\t//if the entire string satisifies the condition\\n            return N;\\n        }\\n        \\n        int Res=0;\\n        int i=s;\\n        int j=s;\\n        \\n        while(j<=e){\\n            char ch=strn[j];\\n            int f=FrequencyArray[ch-\\'a\\'];\\n\\t\\t\\t//if the frequency is not k then we this character to split\\n            if(f<k){\\n                Res=Math.max(Res,longestSubstring(strn,i,j-1,k));\\n\\t\\t\\t\\t//idea is in substring(i,j) there is no character ch\\n                i=j+1;\\n            }\\n            j=j+1;\\n        }\\n        \\n        return Math.max(Res,longestSubstring(strn,i,e,k));\\n\\t\\t//also the take maximum of the last left string...\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Recursion"
                ],
                "code": "```\\nclass Solution {\\n    public int longestSubstring(String s, int k) {\\n        char[] strn=s.toCharArray();\\n        return longestSubstring(strn,0,s.length()-1,k);      \\n    }\\n    private int longestSubstring(char[] strn,int start, int end, int frequency){\\n        int N=end-start+1;\\n        int s=start;\\n        int e=end;\\n        int k=frequency;\\n    \\n        if(s==e && k==1) return 1;\\n        if(N<k) return 0;\\n        \\n        int[] FrequencyArray=new int[26];\\n\\t\\t//counting the occurences... \\n\\t\\t\\n        for(int i=s;i<=e;i++){\\n            char ch=strn[i];\\n            int index=ch-\\'a\\';\\n            FrequencyArray[index]+=1;\\n        }\\n        \\n        boolean Condition_Satisfied=true;\\n        \\n        for(int i=s;i<=e;i++){\\n            char ch=strn[i];\\n            int index=ch-\\'a\\';\\n            if(FrequencyArray[index]<k){\\n                Condition_Satisfied=false;\\n\\t\\t\\t\\tbreak;\\n            }\\n        }\\n        \\n        if(Condition_Satisfied==true){\\n\\t\\t//if the entire string satisifies the condition\\n            return N;\\n        }\\n        \\n        int Res=0;\\n        int i=s;\\n        int j=s;\\n        \\n        while(j<=e){\\n            char ch=strn[j];\\n            int f=FrequencyArray[ch-\\'a\\'];\\n\\t\\t\\t//if the frequency is not k then we this character to split\\n            if(f<k){\\n                Res=Math.max(Res,longestSubstring(strn,i,j-1,k));\\n\\t\\t\\t\\t//idea is in substring(i,j) there is no character ch\\n                i=j+1;\\n            }\\n            j=j+1;\\n        }\\n        \\n        return Math.max(Res,longestSubstring(strn,i,e,k));\\n\\t\\t//also the take maximum of the last left string...\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 701451,
                "title": "very-short-and-simple-c-sol-using-recursion-beats-100",
                "content": "please upvote, if you like the solution\\n```\\ntypedef long long ll;\\n#define f first\\n#define s second\\n#define ss string\\n#define mp make_pair\\n#define pb push_back\\n#define p pair<int, int>\\n#define pp pair<int, p>\\n#define v vector<int>\\n#define vl vector<ll>\\n#define vb vector<bool>\\n#define vs vector<string>\\n#define vp vector<p>\\n#define vpp vector<pair<int, p>>\\n#define vv vector<v>\\n#define vvl vector<vl>\\n#define vvp vector<vp>\\n#define rep(i, n) for(int i = 0; i < (n); ++i)\\n#define repa(i, a, n) for(int i = a; i <= (n); ++i)\\n#define repd(i, n) for(int i = n; i >= 0; --i)\\n#define all(x) (x).begin(), (x).end()\\n\\nclass Solution {\\npublic:\\n    int longestSubstring(string a, int k) {\\n        int n = a.size();\\n        if(n == 0 || k > n){\\n            return 0;\\n        }\\n        if(k == 0 || k == 1){\\n            return n;\\n        }\\n        v count(26, 0);\\n        rep(i, n){\\n            count[(int)(a[i]-\\'a\\')]++;\\n        }\\n        int idx = 0;\\n        while(idx < n && count[(int)(a[idx]-\\'a\\')] >= k){\\n            idx++;\\n        }\\n        if(idx == n){\\n            return n;\\n        }\\n        int left = longestSubstring(a.substr(0, idx), k);\\n        while(idx < n && count[(int)(a[idx]-\\'a\\')] < k){\\n            idx++;\\n        }\\n        int right = 0;\\n        if(idx < n){\\n            right = longestSubstring(a.substr(idx), k);\\n        }\\n        return max(left, right);\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int longestSubstring(string a, int k) {\\n        int n = a.size();\\n        if(n == 0 || k > n){\\n            return 0;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 641859,
                "title": "javascript-6-lines-solution-beats-88",
                "content": "```js\\n/*\\n * @lc app=leetcode id=395 lang=javascript\\n *\\n * [395] Longest Substring with At Least K Repeating Characters\\n */\\n\\n// @lc code=start\\n\\n\\n\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar longestSubstring = function(s, k) {\\n    for (var char of Array.from(new Set(s))) {\\n        if (s.match(new RegExp(char, \\'g\\')).length < k) {\\n            return Math.max(...s.split(char).map(str => longestSubstring(str, k)));\\n        }\\n    }\\n    return s.length;\\n};\\n\\n// @lc code=end\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\n/*\\n * @lc app=leetcode id=395 lang=javascript\\n *\\n * [395] Longest Substring with At Least K Repeating Characters\\n */\\n\\n// @lc code=start\\n\\n\\n\\n/**\\n * @param {string} s\\n * @param {number} k\\n * @return {number}\\n */\\nvar longestSubstring = function(s, k) {\\n    for (var char of Array.from(new Set(s))) {\\n        if (s.match(new RegExp(char, \\'g\\')).length < k) {\\n            return Math.max(...s.split(char).map(str => longestSubstring(str, k)));\\n        }\\n    }\\n    return s.length;\\n};\\n\\n// @lc code=end\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 568833,
                "title": "java-recursion-3ms-solution",
                "content": "```\\npublic int longestSubstring(String s, int k) {\\n        if(s.length() == 0) return 0;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(char c : s.toCharArray()) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        Set<Character> set = new HashSet<>();\\n        for(char c : map.keySet()) {\\n            if(map.get(c) < k) {\\n                set.add(c);\\n            }\\n        }\\n        \\n        if(set.isEmpty()) return s.length();\\n        \\n        int max=0, i=0, j=0;\\n        while(i < s.length()) {\\n            char c = s.charAt(i);\\n            if(set.contains(c)) {\\n                if(i!=j) {\\n                    max = Math.max(max, longestSubstring(s.substring(j, i), k));\\n                }\\n                j=i+1;\\n            }\\n            i++;\\n        }\\n        \\n        if(i!=j) {\\n            max = Math.max(max, longestSubstring(s.substring(j, i), k));\\n        }\\n        \\n        return max;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int longestSubstring(String s, int k) {\\n        if(s.length() == 0) return 0;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(char c : s.toCharArray()) {\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        Set<Character> set = new HashSet<>();\\n        for(char c : map.keySet()) {\\n            if(map.get(c) < k) {\\n                set.add(c);\\n            }\\n        }\\n        \\n        if(set.isEmpty()) return s.length();\\n        \\n        int max=0, i=0, j=0;\\n        while(i < s.length()) {\\n            char c = s.charAt(i);\\n            if(set.contains(c)) {\\n                if(i!=j) {\\n                    max = Math.max(max, longestSubstring(s.substring(j, i), k));\\n                }\\n                j=i+1;\\n            }\\n            i++;\\n        }\\n        \\n        if(i!=j) {\\n            max = Math.max(max, longestSubstring(s.substring(j, i), k));\\n        }\\n        \\n        return max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 552660,
                "title": "javascript-solution-with-2-pointers-sliding-window",
                "content": "Advance the right pointer to a character whose count satisfies k. Then, advance the left pointer toward the right pointer. On each substring between left and right, if it satisfies k, then save the max. The algorithm yields squared runtime and constant space.\\n\\n```\\nconst longestSubstring = (string, k) => {\\n  if (string.length < k) return 0;\\n\\n  let longest = 0;\\n  const count = {};\\n\\n  for (let right = 0; right < string.length; right++) {\\n    const char = string[right];\\n    count[char] = count[char] + 1 || 1;\\n\\n    if (right < k - 1 || count[char] < k) continue;\\n\\n    const temp = Object.assign({}, count);\\n\\n    for (let left = 0; left <= right + 1 - k; left++) {\\n      if (Object.values(temp).every(v => v >= k)) {\\n        longest = Math.max(longest, right - left + 1);\\n        break;\\n      } else {\\n        temp[string[left]] = temp[string[left]] - 1;\\n        if (temp[string[left]] === 0) delete temp[string[left]];\\n      }\\n    }\\n  }\\n\\n  return longest;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst longestSubstring = (string, k) => {\\n  if (string.length < k) return 0;\\n\\n  let longest = 0;\\n  const count = {};\\n\\n  for (let right = 0; right < string.length; right++) {\\n    const char = string[right];\\n    count[char] = count[char] + 1 || 1;\\n\\n    if (right < k - 1 || count[char] < k) continue;\\n\\n    const temp = Object.assign({}, count);\\n\\n    for (let left = 0; left <= right + 1 - k; left++) {\\n      if (Object.values(temp).every(v => v >= k)) {\\n        longest = Math.max(longest, right - left + 1);\\n        break;\\n      } else {\\n        temp[string[left]] = temp[string[left]] - 1;\\n        if (temp[string[left]] === 0) delete temp[string[left]];\\n      }\\n    }\\n  }\\n\\n  return longest;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 498064,
                "title": "java-0ms-100-with-comments-recursion",
                "content": "```\\nclass Solution {\\n    \\n    \\n    public int longestSubstring(String s, int k) {\\n        return longest(s.toCharArray(), 0, s.length(), k, 0);\\n    }\\n    \\n    private int longest(char[] s, int start, int end, int k, int longest) {\\n       //to count freq \\n       int[] count = new int[26];\\n       \\n       for(int i=start; i<end; i++)\\n           count[s[i]-\\'a\\']++;\\n        \\n       for(int i=start; i<end; i++){\\n           if(count[s[i]-\\'a\\'] < k){ //if some char has freq less than k, split around this character\\n               if(i-start > longest){ // if left part can be longer than longest, only then check\\n                   longest = longest(s,start,i,k,longest);\\n               }\\n               \\n               //skip all less than k freq items\\n               while(i<end && count[s[i]-\\'a\\'] < k)\\n                   i++;\\n               \\n               //similarly if right sub arr can give better result, only then check\\n               if(end-i>longest)\\n                   longest = longest(s,i,end,k,longest);\\n               \\n               //return longest calculated\\n               return longest;\\n                   \\n           }\\n       }\\n        \\n       //nothing returned yet, means no less than k freq item\\n       // so return full length \\n       return end-start; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    \\n    public int longestSubstring(String s, int k) {\\n        return longest(s.toCharArray(), 0, s.length(), k, 0);\\n    }\\n    \\n    private int longest(char[] s, int start, int end, int k, int longest) {\\n       //to count freq \\n       int[] count = new int[26];\\n       \\n       for(int i=start; i<end; i++)\\n           count[s[i]-\\'a\\']++;\\n        \\n       for(int i=start; i<end; i++){\\n           if(count[s[i]-\\'a\\'] < k){ //if some char has freq less than k, split around this character\\n               if(i-start > longest){ // if left part can be longer than longest, only then check\\n                   longest = longest(s,start,i,k,longest);\\n               }\\n               \\n               //skip all less than k freq items\\n               while(i<end && count[s[i]-\\'a\\'] < k)\\n                   i++;\\n               \\n               //similarly if right sub arr can give better result, only then check\\n               if(end-i>longest)\\n                   longest = longest(s,i,end,k,longest);\\n               \\n               //return longest calculated\\n               return longest;\\n                   \\n           }\\n       }\\n        \\n       //nothing returned yet, means no less than k freq item\\n       // so return full length \\n       return end-start; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 421445,
                "title": "javascript-recursive-sliding-window-solution",
                "content": "#### The Idea - Sliding Window\\n1. Apply sliding window technique\\n2. Use unique characters as a constraint, so we can move `start`\\n3. If unique characters exceeded requirement, `start++`\\n4. If unique characters = noLessThanK characters, substring is correct\\n``` javascript\\nvar longestSubstringSlidingWindow = function(s, k) {\\n    var ls = function(u) {\\n        let start = 0, end = 0, curU = 0, curK = 0, max = 0; \\n        let hash = {};\\n        while(end<s.length) {;\\n            hash[s[end]] = hash[s[end]]+1||1;\\n            if (hash[s[end]]==1) curU++;\\n            if (hash[s[end]]==k) curK++;\\n            end++;\\n\\n            // extra letter coming in, so we shrink left\\n            while(curU > u) {\\n                if (hash[s[start]]-- == k) curK--; // start will be < k\\n                if (hash[s[start++]] == 0) curU--; // start is 0\\n            }\\n\\n            if (curU == curK && curU == u) {\\n                max = Math.max((end-start), max);\\n            }\\n        }\\n        return max;\\n    }\\n\\n    let max = 0;\\n    for (let i=0;i<26;i++) {\\n        max = Math.max(max, ls(i+1));\\n    }\\n    return max;\\n};\\n```\\n\\n#### The Idea - Recursion\\n1. Split the string with useless characters\\n2. Asking #1 for each segment\\n3. String with no useless characters is a valid string\\n``` javascript\\nvar longestSubstringRecursion = function(s, k) {\\n    let hash = {}, max = 0;\\n    s.split(\\'\\').forEach((val)=>{hash[val]=hash[val]+1||1})\\n    let c = Object.entries(hash).filter(([key, val])=>val<k);\\n    \\n    if (c[0]){\\n        for (let seg of s.split(c.shift()[0])) {\\n            max = Math.max(longestSubstring(seg, k), max)\\n        }\\n        return max;\\n    }\\n    return s.length;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Recursion",
                    "Sliding Window"
                ],
                "code": "``` javascript\\nvar longestSubstringSlidingWindow = function(s, k) {\\n    var ls = function(u) {\\n        let start = 0, end = 0, curU = 0, curK = 0, max = 0; \\n        let hash = {};\\n        while(end<s.length) {;\\n            hash[s[end]] = hash[s[end]]+1||1;\\n            if (hash[s[end]]==1) curU++;\\n            if (hash[s[end]]==k) curK++;\\n            end++;\\n\\n            // extra letter coming in, so we shrink left\\n            while(curU > u) {\\n                if (hash[s[start]]-- == k) curK--; // start will be < k\\n                if (hash[s[start++]] == 0) curU--; // start is 0\\n            }\\n\\n            if (curU == curK && curU == u) {\\n                max = Math.max((end-start), max);\\n            }\\n        }\\n        return max;\\n    }\\n\\n    let max = 0;\\n    for (let i=0;i<26;i++) {\\n        max = Math.max(max, ls(i+1));\\n    }\\n    return max;\\n};\\n```\n``` javascript\\nvar longestSubstringRecursion = function(s, k) {\\n    let hash = {}, max = 0;\\n    s.split(\\'\\').forEach((val)=>{hash[val]=hash[val]+1||1})\\n    let c = Object.entries(hash).filter(([key, val])=>val<k);\\n    \\n    if (c[0]){\\n        for (let seg of s.split(c.shift()[0])) {\\n            max = Math.max(longestSubstring(seg, k), max)\\n        }\\n        return max;\\n    }\\n    return s.length;\\n}\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1575692,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1566646,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1570240,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1569290,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1566507,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1574434,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1574622,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1763665,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1570241,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1569110,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1575692,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1566646,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1570240,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1569290,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1566507,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1574434,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1574622,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1763665,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1570241,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1569110,
                "content": [
                    {
                        "username": "WereTiger",
                        "content": "Who else thinks this should be categorized as hard?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "I want to make secondary accounts to upvote this multiple times. This problem took away what little sanity I had left in me and I still couldn't do any better that O(nlogn)"
                    },
                    {
                        "username": "jingjing_334",
                        "content": "This is a poorly written problem. The examples in the problem are quite the opposite of what the problem description says. \\n\\nPlease fix it."
                    },
                    {
                        "username": "andrew_in_code",
                        "content": "[@cartesPerforees](/cartesPerforees) they did not"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "As of 2023, I see no contradiction between examples and problem statement. Did they fix it?"
                    },
                    {
                        "username": "gabhishek1411",
                        "content": "It should be\\nGiven a string s and an integer k, return the length of the longest substring of s such that the frequency of each character in this substring is **more** than or equal to k."
                    },
                    {
                        "username": "bhavya0990",
                        "content": "Input:\\n\"ababacb\"\\n3\\nOutput:\\n6\\nExpected:\\n0\\n\\nIdeally expected should be 6 right ?? please correct me if my understanding is wrong."
                    },
                    {
                        "username": "Pallavi_Dhakne",
                        "content": "no 0 is correct answer coz  as they mention in problem statement \" the frequency of each character in the substring is greater than or equal to k\""
                    },
                    {
                        "username": "Aravind2722",
                        "content": "its 0 only, coz in middle c comes and messes up everything"
                    },
                    {
                        "username": "hqglichao",
                        "content": "It is \\'0\\' because disturbed by \\'c\\'."
                    },
                    {
                        "username": "SpidyCoder_1",
                        "content": "if subseq is asked then output will be 6 but here substring is asked so output will be 0 as substring are continous part of string"
                    },
                    {
                        "username": "java_run",
                        "content": "Yeah , In this case , it should be 6.\\nI am getting the same error as well.\\nAs its clear in this case that there are 3 A-s and 3 B-s , so ideally answer should be 6."
                    },
                    {
                        "username": "avenka10",
                        "content": "its 0 because no substring has a character whose frequency is 3 if k = 3. ex: ababa has 3 \\'a\\'\\'s but only 2 b\\'s"
                    },
                    {
                        "username": "Mozi96",
                        "content": "Depends on the value of k\\n"
                    },
                    {
                        "username": "lzlmike",
                        "content": "The first one is a simple solution of O(n^2), we find the max length starting at each character in s.  The three if statement in for loop is to check if the string is satisfied, I use math methods instead of iterator the map each time to save time.\\n\\n![0_1473033447412_Screen Shot 2016-09-04 at 4.21.35 PM.png](/uploads/files/1473033447854-screen-shot-2016-09-04-at-4.21.35-pm.png) \\n\\nThis is a backtracking solution with O(nlogn), worst case O(n ^2), from my schoolmate.\\nsplit the string by the minimal apperence character  temp in string, if count(temp) >= k, we just return s, else, we split the string by temp since temp can't be included. \\n![0_1473033614238_Screen Shot 2016-09-04 at 4.59.40 PM.png](/uploads/files/1473033614684-screen-shot-2016-09-04-at-4.59.40-pm.png)"
                    },
                    {
                        "username": "Larry_CN",
                        "content": "There are some posts shared with \"Sliding windows\" solutions, which are wrong actually but pass all the tests. \\n\\nSo plz try to add this test case\\n\"bbaaacddcaabdbd\"\\n3"
                    },
                    {
                        "username": "volsurf",
                        "content": "Is it just me or is the wording way off.\\n\"repeated at least k times\" is not the same as \"frequency of each character in this substring is less than or equal to k\"\\nWhat am I missing?!"
                    },
                    {
                        "username": "rajender7",
                        "content": "How can this be a medium level question ? \\uD83D\\uDE42"
                    },
                    {
                        "username": "pratik77sahoo",
                        "content": "The description is wrongly written as less than but I assumed it as greater than without even knowing that I misread less than as greater than. Lol."
                    },
                    {
                        "username": "weilai_email",
                        "content": "![0_1473124143956_upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc](/uploads/files/1473124148103-upload-ba512e46-9536-4bb8-8186-cdb4e79ce6fc.png) \\nIn this case, the result is wrong. But the code can be accepted."
                    }
                ]
            },
            {
                "id": 1571668,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1969580,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1867269,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1776886,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1771409,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1718029,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1739655,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 2068204,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 2024251,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            },
            {
                "id": 1934912,
                "content": [
                    {
                        "username": "yhatl",
                        "content": "why is the expected answer 0 ?"
                    },
                    {
                        "username": "mahesh105",
                        "content": "Who else thinks Expected Time and Space complexity must be given?"
                    },
                    {
                        "username": "cartesPerforees",
                        "content": "If anyone is eager for a horribly convoluted divide and conquer approach that runs in a suboptimal O(26nlogn) time complexity and makes you question your sanity and the reasons why you're alive, just let me know.\nI got just what you need, and my therapist tells me that posting it as a solution would help me move on."
                    },
                    {
                        "username": "sparshm2k",
                        "content": "bro I am down this is so funny lol"
                    },
                    {
                        "username": "explorer231203",
                        "content": "poorly written question"
                    },
                    {
                        "username": "mohamed_waseela",
                        "content": "https://youtu.be/61i-qpZSfyg"
                    },
                    {
                        "username": "Kapish_Shewale",
                        "content": "Spent 2 hours, but finally came up with an optimal solution. Is this question really a medium? I found it to be hard."
                    },
                    {
                        "username": "ChinErdene",
                        "content": "Here is a ChatGPT answer haha. It literally solved the problem in 5 sec. \\n\\n1. Iterate through the string, character by character. For each character, check if it appears at least k times in the current substring. If not, reset the current substring to start at the next character.\\n\\n2. If the current character appears at least k times in the current substring, update the maximum length substring found so far.\\n\\n3. Repeat until the end of the string is reached.\\n\\nclass Solution {\\n    public static int longestSubstring(String s, int k) {\\n    int maxLen = 0;\\n    for (int i = 0; i < s.length(); i++) {\\n        int[] freq = new int[26];\\n        for (int j = i; j < s.length(); j++) {\\n            char c = s.charAt(j);\\n            freq[c - \\'a\\']++;\\n            if (allCharactersHaveAtLeastKFrequency(freq, k)) {\\n                maxLen = Math.max(maxLen, j - i + 1);\\n            }\\n        }\\n    }\\n    return maxLen;\\n}\\n\\nprivate static boolean allCharactersHaveAtLeastKFrequency(int[] freq, int k) {\\n    for (int i = 0; i < freq.length; i++) {\\n        if (freq[i] > 0 && freq[i] < k) {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n\\n}"
                    },
                    {
                        "username": "21Cash",
                        "content": "Its O(n^2)"
                    },
                    {
                        "username": "dead_pool",
                        "content": "Here is a detailed explanation of this problem : https://www.youtube.com/watch?v=TM65EiDALeY"
                    },
                    {
                        "username": "Mohit_Jariwala",
                        "content": "Really Good question it\\'s not the question of sliding window the tags can be changed to divide and conquer and 2 pointers"
                    },
                    {
                        "username": "AyemunHossain",
                        "content": "Unclear question and example."
                    }
                ]
            }
        ]
    },
    {
        "title": "Teemo Attacking",
        "question_content": "<p>Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly <code>duration</code> seconds. More formally, an attack at second <code>t</code> will mean Ashe is poisoned during the <strong>inclusive</strong> time interval <code>[t, t + duration - 1]</code>. If Teemo attacks again <strong>before</strong> the poison effect ends, the timer for it is <strong>reset</strong>, and the poison effect will end <code>duration</code> seconds after the new attack.</p>\n\n<p>You are given a <strong>non-decreasing</strong> integer array <code>timeSeries</code>, where <code>timeSeries[i]</code> denotes that Teemo attacks Ashe at second <code>timeSeries[i]</code>, and an integer <code>duration</code>.</p>\n\n<p>Return <em>the <strong>total</strong> number of seconds that Ashe is poisoned</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> timeSeries = [1,4], duration = 2\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> Teemo&#39;s attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.\nAshe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> timeSeries = [1,2], duration = 2\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> Teemo&#39;s attacks on Ashe go as follows:\n- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.\n- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.\nAshe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= timeSeries.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= timeSeries[i], duration &lt;= 10<sup>7</sup></code></li>\n\t<li><code>timeSeries</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 97475,
                "title": "python-solution-for-teemo",
                "content": "![alt text](https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSa-yd3K7uW2ocdpJ-7mA3kMyF-XLUjkVproRQxIzhrRzh_osOW)\\n\\n    class Solution(object):\\n        def findPoisonedDuration(self, timeSeries, duration):\\n            ans = duration * len(timeSeries)\\n            for i in range(1,len(timeSeries)):\\n                ans -= max(0, duration - (timeSeries[i] - timeSeries[i-1]))\\n            return ans\\n\\n![alt text](https://www.baronsteal.net/images/champion/loading/Ashe_4.jpg)",
                "solutionTags": [],
                "code": "![alt text](https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcSa-yd3K7uW2ocdpJ-7mA3kMyF-XLUjkVproRQxIzhrRzh_osOW)\\n\\n    class Solution(object):\\n        def findPoisonedDuration(self, timeSeries, duration):\\n            ans = duration * len(timeSeries)\\n            for i in range(1,len(timeSeries)):\\n                ans -= max(0, duration - (timeSeries[i] - timeSeries[i-1]))\\n            return ans\\n\\n![alt text](https://www.baronsteal.net/images/champion/loading/Ashe_4.jpg)",
                "codeTag": "Java"
            },
            {
                "id": 97465,
                "title": "o-n-java-solution-using-same-idea-of-merge-intervals",
                "content": "The same idea as https://leetcode.com/problems/merge-intervals/\\nAlgorithm:\\n1. Use two variable to record current start and end point.\\n2. If the start of new interval is greater than current end, meaning NO overlapping, we can sum the current interval length to result and then update start and end.\\n3. Otherwise just update the current end;\\n\\n```\\npublic class Solution {\\n    public int findPosisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries == null || timeSeries.length == 0 || duration == 0) return 0;\\n        \\n        int result = 0, start = timeSeries[0], end = timeSeries[0] + duration;\\n        for (int i = 1; i < timeSeries.length; i++) {\\n            if (timeSeries[i] > end) {\\n                result += end - start;\\n                start = timeSeries[i];\\n            }\\n            end = timeSeries[i] + duration;\\n        }\\n        result += end - start;\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int findPosisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries == null || timeSeries.length == 0 || duration == 0) return 0;\\n        \\n        int result = 0, start = timeSeries[0], end = timeSeries[0] + duration;\\n        for (int i = 1; i < timeSeries.length; i++) {\\n            if (timeSeries[i] > end) {\\n                result += end - start;\\n                start = timeSeries[i];\\n            }\\n            end = timeSeries[i] + duration;\\n        }\\n        result += end - start;\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 864975,
                "title": "python-merge-intervals-o-n-solution-explained",
                "content": "If we look carefully at this problem we can see that all we need to do is to merge some intervals with equal length and return total length of merged intervals. Note also that intervals are already sorted by its beginings (and ends as well, because they have equal length), so usual sorting step can be skipped.\\n \\n All we need to do is to traverse our `timeSeries` and check if difference between current point and previous is more than `duration`. If it is more, we add `duration` to total sum, if it is less, we add difference between current and previous elements. Also we need to deal with border case of empty array and if array is not empty, add `duration` in the end. \\n \\n **Complexity**: time complexity is `O(n)`, space complexity is `O(1)`.\\n\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        n, out = len(timeSeries), 0\\n        if n == 0: return 0\\n        for i in range(n-1):\\n            out += min(timeSeries[i+1] - timeSeries[i], duration)\\n        return out + duration\\n```\\n\\nIf you have any questions, feel free to ask. If you like solution and explanations, please **Upvote!**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        n, out = len(timeSeries), 0\\n        if n == 0: return 0\\n        for i in range(n-1):\\n            out += min(timeSeries[i+1] - timeSeries[i], duration)\\n        return out + duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1956310,
                "title": "java-easy-o-n-solution-with-intuition",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Calculate total duration of attacks from teemo\\n- If next attack occurs before current duration ends, include the difference\\n   \\n# Complexity\\n- Time complexity: $$O(n)$$ \\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int total = 0;\\n        for (int i = 0; i < timeSeries.length-1; i++) {\\n            // if next attack occurs before current duration ends, include the difference\\n            if (timeSeries[i+1] <= timeSeries[i] + duration-1) {\\n                total += timeSeries[i+1] - timeSeries[i];\\n            } else { // add duration normally\\n                total += duration;\\n            }\\n        }\\n        total += duration; // include last attack from teemo\\n        return total;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int total = 0;\\n        for (int i = 0; i < timeSeries.length-1; i++) {\\n            // if next attack occurs before current duration ends, include the difference\\n            if (timeSeries[i+1] <= timeSeries[i] + duration-1) {\\n                total += timeSeries[i+1] - timeSeries[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 97502,
                "title": "simple-question-obscured-by-unnecessary-story",
                "content": "One of the reasons I prefer Leetcode to other coding sites is that the questions are presented in a straightforward way, if it's about trees or arrays then that is what is asked in the question.  Unfortunately that is not the case here and the real logic is dressed up with a story about Teemo and Ashe (which I have never heard of).  I would prefer to get straight to the point and for the title of the question to convey some meaning about what it is about.\\n\\nHowever, the underlying problem is simple, I would not say this was \"medium\"\\n```\\n    def findPosisonedDuration(self, timeSeries, duration):\\n        if not timeSeries:\\n            return 0\\n        poisoned = duration\\n        for i in range(1, len(timeSeries)):\\n            poisoned += duration - max(0, timeSeries[i-1]+duration - timeSeries[i])\\n        return poisoned",
                "solutionTags": [],
                "code": "One of the reasons I prefer Leetcode to other coding sites is that the questions are presented in a straightforward way, if it's about trees or arrays then that is what is asked in the question.  Unfortunately that is not the case here and the real logic is dressed up with a story about Teemo and Ashe (which I have never heard of).  I would prefer to get straight to the point and for the title of the question to convey some meaning about what it is about.\\n\\nHowever, the underlying problem is simple, I would not say this was \"medium\"\\n```\\n    def findPosisonedDuration(self, timeSeries, duration):\\n        if not timeSeries:\\n            return 0\\n        poisoned = duration\\n        for i in range(1, len(timeSeries)):\\n            poisoned += duration - max(0, timeSeries[i-1]+duration - timeSeries[i])\\n        return poisoned",
                "codeTag": "Python3"
            },
            {
                "id": 97451,
                "title": "java-7-lines-o-n-solution",
                "content": "For each ```begin``` followed by ```t```\\nIf ```t``` is within previous duration ```[begin, begin + duration]``` then increase total by ```t - begin```\\nIf ```t``` in out of previous duration ```[begin, begin + duration]``` then increase total by ```duration```\\nIn both cases update ```begin``` to the new begin time ```t```\\n\\n```\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        int begin = timeSeries[0], total = 0;\\n        for (int t : timeSeries) {\\n            total = total + (t < begin + duration ? t - begin : duration);\\n            begin = t;\\n        }   \\n        return total + duration;\\n    } \\n```",
                "solutionTags": [],
                "code": "```begin```\n```t```\n```t```\n```[begin, begin + duration]```\n```t - begin```\n```t```\n```[begin, begin + duration]```\n```duration```\n```begin```\n```t```\n```\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        int begin = timeSeries[0], total = 0;\\n        for (int t : timeSeries) {\\n            total = total + (t < begin + duration ? t - begin : duration);\\n            begin = t;\\n        }   \\n        return total + duration;\\n    } \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 97558,
                "title": "it-does-not-deserve-a-medium-difficulty-is-it",
                "content": "As title, it's very straightfoward, isn't it?\\n\\nBTW, my simple JavaScript solution.\\n\\n```javascript\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n  let ans = 0;\\n\\n  for (let i = 0, len = timeSeries.length; i < len; i++) {\\n    if (i === len - 1) {\\n      ans += duration;\\n      continue;\\n    }\\n\\n    let curItem = timeSeries[i]\\n      , nextItem = timeSeries[i + 1];\\n\\n    if (curItem + duration <= nextItem)\\n      ans += duration;\\n    else\\n      ans += nextItem - curItem;\\n  }\\n\\n  return ans;\\n};\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n  let ans = 0;\\n\\n  for (let i = 0, len = timeSeries.length; i < len; i++) {\\n    if (i === len - 1) {\\n      ans += duration;\\n      continue;\\n    }\\n\\n    let curItem = timeSeries[i]\\n      , nextItem = timeSeries[i + 1];\\n\\n    if (curItem + duration <= nextItem)\\n      ans += duration;\\n    else\\n      ans += nextItem - curItem;\\n  }\\n\\n  return ans;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 865761,
                "title": "c-super-simple-and-short-solution-o-n-o-1-faster-than-98",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if (timeSeries.size() == 0)\\n            return 0;\\n        int res = 0;\\n        for(int i=0; i<timeSeries.size()-1; i++) {\\n            if (timeSeries[i+1] - timeSeries[i] < duration)\\n                res += timeSeries[i+1] - timeSeries[i];\\n            else\\n                res += duration;\\n        }\\n        return res+duration;\\n    }\\n};\\n```\\n**Like it? please upvote...**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if (timeSeries.size() == 0)\\n            return 0;\\n        int res = 0;\\n        for(int i=0; i<timeSeries.size()-1; i++) {\\n            if (timeSeries[i+1] - timeSeries[i] < duration)\\n                res += timeSeries[i+1] - timeSeries[i];\\n            else\\n                res += duration;\\n        }\\n        return res+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 97584,
                "title": "easy-to-understand-java-solution",
                "content": "We just need to take the minimum value between the difference of previous timestamp and the current timestamp, and the duration.\\nThis makes sense because the poisoning will happen at each timestamp.\\nAt the end, I am adding the duration to the total answer to take in consideration the poisoning at the last timestamp.\\n\\n```\\npublic class Solution {\\n    public int findPosisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries.length == 0)return 0;\\n        if(timeSeries.length == 1)return duration;\\n        \\n        int total = 0;\\n        for(int i=1; i<timeSeries.length;i++)\\n        {\\n            total += Math.min(duration,timeSeries[i]-timeSeries[i-1]);\\n        }\\n        \\n        total += duration;\\n     \\n     return total;   \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int findPosisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries.length == 0)return 0;\\n        if(timeSeries.length == 1)return duration;\\n        \\n        int total = 0;\\n        for(int i=1; i<timeSeries.length;i++)\\n        {\\n            total += Math.min(duration,timeSeries[i]-timeSeries[i-1]);\\n        }\\n        \\n        total += duration;\\n     \\n     return total;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 97523,
                "title": "short-o-n-c-solution",
                "content": "```\\nlass Solution {\\npublic:\\n    int findPosisonedDuration(vector<int>& ts, int duration) {\\n        int tp = 0, pe = 0;\\n        for(int i=0; i<ts.size(); ++i){\\n            tp += duration - (ts[i] < pe) *(pe - ts[i]);\\n            pe = ts[i] + duration;\\n        }\\n        return tp;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\nlass Solution {\\npublic:\\n    int findPosisonedDuration(vector<int>& ts, int duration) {\\n        int tp = 0, pe = 0;\\n        for(int i=0; i<ts.size(); ++i){\\n            tp += duration - (ts[i] < pe) *(pe - ts[i]);\\n            pe = ts[i] + duration;\\n        }\\n        return tp;\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 97476,
                "title": "python-easy-and-concise",
                "content": "Just calculate ````sum(min(duration, next attack time - this attack time))````\\n`````\\ndef findPoisonedDuration(self, s, d):\\n        return sum(min(d, b - a) for a, b in zip(s, s[1:] + [10e7]))",
                "solutionTags": [],
                "code": "````sum(min(duration, next attack time - this attack time))```",
                "codeTag": "Unknown"
            },
            {
                "id": 1602614,
                "title": "python-6-lines-o-n-concise-solution",
                "content": "The answer is the length of timeSeries multiply the duration with minus the repeat duration.\\nRuntime beats 94% and memory usage beats 80% of python solutions.\\n\\n\\n```\\nclass Solution(object):\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        repeat = 0\\n        for i in range(len(timeSeries)-1):\\n            diff = timeSeries[i+1] - timeSeries[i]\\n            if diff < duration:\\n                repeat += duration - diff\\n        return len(timeSeries)*duration - repeat\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        repeat = 0\\n        for i in range(len(timeSeries)-1):\\n            diff = timeSeries[i+1] - timeSeries[i]\\n            if diff < duration:\\n                repeat += duration - diff\\n        return len(timeSeries)*duration - repeat\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866661,
                "title": "faster-than-98-41-easy-understanding-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n=timeSeries.size();\\n\\t\\t\\n        if(n==0) return 0;\\n\\t\\t\\n        int sum=0;\\n        for(int i=0;i<n-1;i++){\\n            if(timeSeries[i]+duration<=timeSeries[i+1]) sum+=duration;\\n            else sum+=(timeSeries[i+1]-timeSeries[i]);\\n        }\\n\\t\\t\\n        return sum+duration;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n=timeSeries.size();\\n\\t\\t\\n        if(n==0) return 0;\\n\\t\\t\\n        int sum=0;\\n        for(int i=0;i<n-1;i++){\\n            if(timeSeries[i]+duration<=timeSeries[i+1]) sum+=duration;\\n            else sum+=(timeSeries[i+1]-timeSeries[i]);\\n        }\\n\\t\\t\\n        return sum+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865037,
                "title": "495-teemo-attacking-javascript-solution",
                "content": "```\\n\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    if (timeSeries.length === 0 ) return 0; \\n    let res = duration;\\n    for (let i = 1; i < timeSeries.length; i++) {\\n            res += Math.min(timeSeries[i] - timeSeries[i - 1], duration);\\n    }\\n    return res; \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    if (timeSeries.length === 0 ) return 0; \\n    let res = duration;\\n    for (let i = 1; i < timeSeries.length; i++) {\\n            res += Math.min(timeSeries[i] - timeSeries[i - 1], duration);\\n    }\\n    return res; \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3283028,
                "title": "495-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1. Begin by defining a function findPoisonedDuration that takes in two arguments - a list timeSeries containing non-decreasing integers and an integer duration.\\n\\n2. Check if the list timeSeries is empty. If it is, return 0 as there are no poison attacks.\\n\\n3. Get the length of the list timeSeries and initialize a variable poisoned_time to 0.\\n\\n4. Iterate through the list timeSeries from index 0 to n-2, where n is the length of timeSeries.\\n\\n5. At each iteration, calculate the duration of the poison effect by finding the minimum value between duration and the difference between the next and current element in the list.\\n\\n6. Add the calculated duration of the poison effect to the poisoned_time variable.\\n\\n7. Once the loop is completed, add the duration of the last poison effect to the poisoned_time variable.\\n\\n8. Return the value of poisoned_time.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n  def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n    if not timeSeries:\\n        return 0\\n    n = len(timeSeries)\\n    poisoned_time = 0\\n    \\n    for i in range(n-1):\\n        # calculate the duration of the poison effect\\n        duration_of_effect = min(duration, timeSeries[i+1]-timeSeries[i])\\n        poisoned_time += duration_of_effect\\n        \\n    # add the duration of the last poison effect\\n    poisoned_time += duration\\n    \\n    return poisoned_time\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution:\\n  def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n    if not timeSeries:\\n        return 0\\n    n = len(timeSeries)\\n    poisoned_time = 0\\n    \\n    for i in range(n-1):\\n        # calculate the duration of the poison effect\\n        duration_of_effect = min(duration, timeSeries[i+1]-timeSeries[i])\\n        poisoned_time += duration_of_effect\\n        \\n    # add the duration of the last poison effect\\n    poisoned_time += duration\\n    \\n    return poisoned_time\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2962458,
                "title": "1-line-solution",
                "content": "\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, t: List[int], d: int) -> int:\\n        return d+sum(min(t[i+1]-t[i], d) for i in range(len(t)-1))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, t: List[int], d: int) -> int:\\n        return d+sum(min(t[i+1]-t[i], d) for i in range(len(t)-1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 340922,
                "title": "this-should-not-be-ranked-medium",
                "content": "This question should probably be rated Easy, it\\'s pretty straightforward compared to most other Medium rated questions.\\n\\nAnyways, here\\'s my O(n) Javascript solution:\\n```javascript\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\nfunction findPoisonedDuration(timeSeries, duration) {\\n    let total = 0\\n    for (let i = 0; i < timeSeries.length; i++) {\\n        let diff = timeSeries[i+1] - timeSeries[i]\\n        if (diff < duration) total += diff\\n        else total += duration\\n    }\\n    return total\\n}\\n```",
                "solutionTags": [],
                "code": "```javascript\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\nfunction findPoisonedDuration(timeSeries, duration) {\\n    let total = 0\\n    for (let i = 0; i < timeSeries.length; i++) {\\n        let diff = timeSeries[i+1] - timeSeries[i]\\n        if (diff < duration) total += diff\\n        else total += duration\\n    }\\n    return total\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3490378,
                "title": "one-liner-logic-with-explanation-c-java",
                "content": "# Intuition\\nThe intuition behind this approach is that we can add duration of the poison effect for each attack it to the total duration. However, if current poison effect starts before the previous poison effect ends, we need to subtract the overlap duration to avoid double-counting.\\n\\n# Approach\\nThe approach used in the given code is straightforward and efficient. It iterates through the timeSeries array, keeping track of the end time of the poison effect for each attack. If the next attack occurs before the current poison effect ends, the duration of the overlap is subtracted to avoid double-counting. Otherwise, the full duration of the poison effect is added. The total duration of the poison effect is returned at the end.\\n\\nTo implement this approach, we can use a variable \\'prev_end\\' to keep track of the end time of the poison effect for each attack. We initialize \\'prev_end\\' to timeSeries[0]-1 for the first attack since there is no previous attack to overlap with. We then iterate through the remaining attacks and update \\'prev_end\\' to the end time of the poison effect for each attack. If the next attack occurs before the current poison effect ends (timeSeries[i] <= prev_end), we calculate the duration of the overlap and subtract it from the orignal duration which is then added to total duration. Otherwise, we add the full duration of the poison effect to the total duration. Finally, we return the total duration of the poison effect.\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nC++\\n\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time,int d){\\n        int total_duration=0;\\n        for(int i=0,prev_end=time[0]-1;i<time.size();prev_end=time[i]+d-1,i++)\\n        total_duration+=time[i]<=prev_end?d-prev_end-1+time[i]:d;\\n        return total_duration;\\n    }\\n};\\n```\\n\\n```\\nJava\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] time, int d) {\\n        int total_duration=0;\\n        for(int i=0,prev_end=time[0]-1;i<time.length;prev_end=time[i]+d-1,i++) \\n        total_duration+=time[i]<=prev_end?d-(prev_end-time[i]+1):d;\\n        return total_duration;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```\\nC++\\n\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time,int d){\\n        int total_duration=0;\\n        for(int i=0,prev_end=time[0]-1;i<time.size();prev_end=time[i]+d-1,i++)\\n        total_duration+=time[i]<=prev_end?d-prev_end-1+time[i]:d;\\n        return total_duration;\\n    }\\n};\\n```\n```\\nJava\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] time, int d) {\\n        int total_duration=0;\\n        for(int i=0,prev_end=time[0]-1;i<time.length;prev_end=time[i]+d-1,i++) \\n        total_duration+=time[i]<=prev_end?d-(prev_end-time[i]+1):d;\\n        return total_duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753704,
                "title": "rust-idiomatic-solution",
                "content": "\\nEdit, shorter version:\\n```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series\\n\\t\\t\\t.windows(2)\\n\\t\\t\\t.fold(duration, |acc, pair| acc + cmp::min(duration, pair[1] - pair[0]))\\n    }\\n}\\n```\\n\\nOld version:\\n```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series\\n\\t\\t\\t.windows(2)\\n\\t\\t\\t.fold(duration, |acc, pair| if let [prev, curr] = pair {\\n                acc + cmp::min(duration, curr - prev)\\n            } else {\\n                acc\\n            })\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series\\n\\t\\t\\t.windows(2)\\n\\t\\t\\t.fold(duration, |acc, pair| acc + cmp::min(duration, pair[1] - pair[0]))\\n    }\\n}\\n```\n```\\nuse std::cmp;\\n\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series\\n\\t\\t\\t.windows(2)\\n\\t\\t\\t.fold(duration, |acc, pair| if let [prev, curr] = pair {\\n                acc + cmp::min(duration, curr - prev)\\n            } else {\\n                acc\\n            })\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2512844,
                "title": "java-iterative-easy-implementation",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int n=timeSeries.length;\\n        if(n==0) \\n             return 0;\\n        int total=0;\\n        for(int i=0;i<n-1;i++)\\n            total = total + Math.min(timeSeries[i+1]-timeSeries[i],duration);\\n        return total+duration;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "Iterator"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int n=timeSeries.length;\\n        if(n==0) \\n             return 0;\\n        int total=0;\\n        for(int i=0;i<n-1;i++)\\n            total = total + Math.min(timeSeries[i+1]-timeSeries[i],duration);\\n        return total+duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866913,
                "title": "c-soltuion",
                "content": "### Idea\\n\\nWe calculate the poisoned condition time between any two consecutive time, then sum them up to get the result. Now assume t1 and t2 are two consecutive time that Teemo attacks, then how long Ashe will be in poisoned condition between t1 and t2?\\n\\n* Case 1: ```t2-t1 >= duration```, the poisoned condition between t1 and t2 will last for ```duration```.\\n![image](https://assets.leetcode.com/users/images/3f250721-fe96-4ae8-b18b-ec8959396dca_1601226575.4473505.png)\\n\\n\\n* Case 2: ```t2-t1 < duration```, the poisoned condition between t1 and t2 will last for ```t2-t1```.\\n\\t![image](https://assets.leetcode.com/users/images/be838431-0a7b-4bba-947a-2db0cce2c7dc_1601191573.5588152.png)\\n\\n\\n\\n### Solution\\n```\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries == null || timeSeries.Length == 0)\\n            return 0;\\n        \\n        int res = 0;\\n        \\n        for(int i = 0; i < timeSeries.Length - 1; i++)\\n        {         \\n            int diff = timeSeries[i + 1] - timeSeries[i];\\n            \\n            if(diff >= duration)\\n                res += duration;\\n            else\\n                res += diff;          \\n        }\\n        \\n        return res + duration;\\n    }\\n}\\n```\\n\\n### Complexity\\n* Time: O(n)\\n* Space: O(1)\\n\\nhttps://www.youtube.com/watch?v=XkWu1nN7o2k&feature=youtu.be",
                "solutionTags": [],
                "code": "```t2-t1 >= duration```\n```duration```\n```t2-t1 < duration```\n```t2-t1```\n```\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries == null || timeSeries.Length == 0)\\n            return 0;\\n        \\n        int res = 0;\\n        \\n        for(int i = 0; i < timeSeries.Length - 1; i++)\\n        {         \\n            int diff = timeSeries[i + 1] - timeSeries[i];\\n            \\n            if(diff >= duration)\\n                res += duration;\\n            else\\n                res += diff;          \\n        }\\n        \\n        return res + duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865050,
                "title": "easiest-java-1-liner-logic-commented-easy-to-understand",
                "content": "We need to find the time for which opponent was poisoned.\\nTherefore,\\n1. If array is empty, return 0\\n2. As the timeframes are in ascending order, we find Minimum of duration and timeSeries[i] - timeSeries[i-1]. This is because either he will be poisoned for complete duration, or till he was poisoned again.\\n3. At the last timeframe, the opponent will be poisoned for the complete duration. So, add duration at the end.\\n\\n\\n\\nclass Solution {\\n    \\n\\tpublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int pTime = 0;\\n        \\n\\t\\t// If array is empty, return 0\\n        if(timeSeries.length == 0)\\n            return 0;\\n        \\n        for(int i = 1; i < timeSeries.length; i++) {\\n            \\n\\t\\t\\t// Find minimum of duration and difference between timeframes.\\n            pTime += Math.min(duration, timeSeries[i] - timeSeries[i-1]);\\n            \\n        }\\n        \\n\\t\\t// Add the last complete duration of poisoned\\n        pTime += duration;\\n        \\n        return pTime;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    \\n\\tpublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int pTime = 0;\\n        \\n\\t\\t// If array is empty, return 0\\n        if(timeSeries.length == 0)\\n            return 0;\\n        \\n        for(int i = 1; i < timeSeries.length; i++) {\\n            \\n\\t\\t\\t// Find minimum of duration and difference between timeframes.\\n            pTime += Math.min(duration, timeSeries[i] - timeSeries[i-1]);\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 97578,
                "title": "4-lines-o-n-python",
                "content": "```\\nclass Solution(object):\\n    def findPosisonedDuration(self, timeSeries, duration):\\n        \"\"\"\\n        :type timeSeries: List[int]\\n        :type duration: int\\n        :rtype: int\\n        \"\"\"\\n        ans = 0\\n        for i in range(len(timeSeries) - 1):\\n            ans += min(duration, timeSeries[i+1] - timeSeries[i])\\n        return ans + duration if timeSeries else 0\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def findPosisonedDuration(self, timeSeries, duration):\\n        \"\"\"\\n        :type timeSeries: List[int]\\n        :type duration: int\\n        :rtype: int\\n        \"\"\"\\n        ans = 0\\n        for i in range(len(timeSeries) - 1):\\n            ans += min(duration, timeSeries[i+1] - timeSeries[i])\\n        return ans + duration if timeSeries else 0\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3574963,
                "title": "c-simple-solution",
                "content": "# Approach\\n- Iterate thorugh all the elements of the list except the last\\n- Find the timeDiff between the adjacent elements\\n- If it is less the duration of the attack, then the attack will not work for it\\'s entire duration and it resets at the adjacent time value. So, we only add the duration of this attack which is $timeSeries[i+1] - timeSeries[i]$\\n- If the timeDiff is greater than the duration, it means that the attack will work for the entire duration. In this case, we add the given duration\\n- After we exit the loop, regardless of previous durations, the last attack will for the entire duration because there are no further attacks\\n\\n![image.png](https://assets.leetcode.com/users/images/c20c123c-8aba-4a6c-a0fc-8e91d5cebcc6_1685355687.953393.png)\\n\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration)\\n    {\\n        int time=0;\\n\\n        for(int i=0; i<timeSeries.size()-1; i++)\\n        {\\n            int timeDiff = timeSeries[i+1]-timeSeries[i];\\n\\n            time += (timeDiff < duration) ? (timeDiff) : (duration);\\n        }\\n\\n        time += duration;\\n\\n        return time;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration)\\n    {\\n        int time=0;\\n\\n        for(int i=0; i<timeSeries.size()-1; i++)\\n        {\\n            int timeDiff = timeSeries[i+1]-timeSeries[i];\\n\\n            time += (timeDiff < duration) ? (timeDiff) : (duration);\\n        }\\n\\n        time += duration;\\n\\n        return time;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 97573,
                "title": "6-lines-of-java-o-n-using-math-min",
                "content": "```\\npublic class Solution {\\n    /*\\n    if time.length == 0: return 0\\n    for i = 1...n\\n        diff = time[i] - time[i-1]\\n        result += diff > duration ? duration : diff\\n    result += duration\\n    */\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        int result = 0;\\n        for (int i = 1; i < timeSeries.length; i += 1) \\n            result += Math.min(timeSeries[i] - timeSeries[i-1], duration);\\n        result += duration;\\n        return result;\\n```\\n    }\\n}",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    /*\\n    if time.length == 0: return 0\\n    for i = 1...n\\n        diff = time[i] - time[i-1]\\n        result += diff > duration ? duration : diff\\n    result += duration\\n    */\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        int result = 0;\\n        for (int i = 1; i < timeSeries.length; i += 1) \\n            result += Math.min(timeSeries[i] - timeSeries[i-1], duration);\\n        result += duration;\\n        return result;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 97577,
                "title": "o-n-java-solution",
                "content": "```java\\npublic class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int res=0;\\n        if(timeSeries==null||timeSeries.length==0||duration<=0) return res;\\n        for(int i=1;i<timeSeries.length;i++){\\n            res+=Math.min(duration, timeSeries[i]-timeSeries[i-1]);\\n        }\\n        return res+duration;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```java\\npublic class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int res=0;\\n        if(timeSeries==null||timeSeries.length==0||duration<=0) return res;\\n        for(int i=1;i<timeSeries.length;i++){\\n            res+=Math.min(duration, timeSeries[i]-timeSeries[i-1]);\\n        }\\n        return res+duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3669941,
                "title": "90-beats-java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] arr, int duration) {\\n     int n  = arr.length;\\n     int neg=0;\\n     for(int i=0;i<n-1;i++){\\n         if((arr[i+1]-arr[i])<duration){\\n         neg+=duration-(arr[i+1]-arr[i]);\\n         }\\n     }\\n     return (n)*duration-neg;   \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] arr, int duration) {\\n     int n  = arr.length;\\n     int neg=0;\\n     for(int i=0;i<n-1;i++){\\n         if((arr[i+1]-arr[i])<duration){\\n         neg+=duration-(arr[i+1]-arr[i]);\\n         }\\n     }\\n     return (n)*duration-neg;   \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3566866,
                "title": "java-solution-beats-95-space-time-complexity",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Since the minimum poision time would me the duration given(because ashe would always be poisioned for \"duration\" for the last value in timeSeries array).\\n- Now if ,during the time when ashe was hit , she was already poisined , It means she was only poisened for the union of the two time lapses.\\n- Which is further calculated in Poision time. \\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\nN is the number of time ashe was poisioned.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n![image.png](https://assets.leetcode.com/users/images/b5f076c7-e043-4578-9e24-90844007b0a5_1685167008.9423625.png)\\n\\n# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int poision=duration;\\n        for(int i=1;i<timeSeries.length;i++){\\n            if(timeSeries[i-1]+duration>timeSeries[i]){\\n                poision=poision+timeSeries[i]-timeSeries[i-1];\\n            }else {\\n                poision+=duration;\\n            }}\\n        return poision;\\n    }\\n}\\n```\\n# An Upvote will be encouraging \\uD83D\\uDC4D",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int poision=duration;\\n        for(int i=1;i<timeSeries.length;i++){\\n            if(timeSeries[i-1]+duration>timeSeries[i]){\\n                poision=poision+timeSeries[i]-timeSeries[i-1];\\n            }else {\\n                poision+=duration;\\n            }}\\n        return poision;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3398111,
                "title": "easy-approach-o-n",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        count=0\\n        for i in range(len(timeSeries)):\\n            if(i<len(timeSeries)-1):\\n                if(timeSeries[i]+duration-1<timeSeries[i+1]):\\n                    count+=duration\\n                elif(timeSeries[i]+duration-1==timeSeries[i+1]):\\n                    count+=timeSeries[i+1]-timeSeries[i]\\n                else:\\n                    count+=timeSeries[i+1]-timeSeries[i]\\n            else:\\n                count+=duration\\n        return(count)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        count=0\\n        for i in range(len(timeSeries)):\\n            if(i<len(timeSeries)-1):\\n                if(timeSeries[i]+duration-1<timeSeries[i+1]):\\n                    count+=duration\\n                elif(timeSeries[i]+duration-1==timeSeries[i+1]):\\n                    count+=timeSeries[i+1]-timeSeries[i]\\n                else:\\n                    count+=timeSeries[i+1]-timeSeries[i]\\n            else:\\n                count+=duration\\n        return(count)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3087169,
                "title": "easy-to-understand-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int total=0;\\n        int temp;\\n\\n        for(int i =0;i<timeSeries.length-1;i++){\\n            if(timeSeries[i]+duration<timeSeries[i+1]){\\n                total += duration;\\n            }\\n            else{\\n                temp=timeSeries[i];\\n                while(temp<timeSeries[i+1]){\\n                total++;\\n                temp++; \\n                }\\n            }\\n        }\\n        total += duration;\\n        return total;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int total=0;\\n        int temp;\\n\\n        for(int i =0;i<timeSeries.length-1;i++){\\n            if(timeSeries[i]+duration<timeSeries[i+1]){\\n                total += duration;\\n            }\\n            else{\\n                temp=timeSeries[i];\\n                while(temp<timeSeries[i+1]){\\n                total++;\\n                temp++; \\n                }\\n            }\\n        }\\n        total += duration;\\n        return total;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3014307,
                "title": "c-solution-94-92-time-67-30-space-basic-arithmetic",
                "content": "# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration);\\n};\\n/***************************************************************/\\nint Solution::findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n    int count=0, i, size = timeSeries.size();\\n    for (i = 0; i < size-1; ++i) {\\n        count+= (timeSeries[i+1] - timeSeries[i] >= duration) ? duration : timeSeries[i+1]-timeSeries[i];\\n    }\\n    count+=duration;\\n    return count;\\n}\\n/***************************************************************/\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration);\\n};\\n/***************************************************************/\\nint Solution::findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n    int count=0, i, size = timeSeries.size();\\n    for (i = 0; i < size-1; ++i) {\\n        count+= (timeSeries[i+1] - timeSeries[i] >= duration) ? duration : timeSeries[i+1]-timeSeries[i];\\n    }\\n    count+=duration;\\n    return count;\\n}\\n/***************************************************************/\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2820507,
                "title": "c-easy-solution-simple-tc-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int count=0;\\n        for(int z=1;z<timeSeries.size();z++){\\n            if(timeSeries[z-1]+duration<=timeSeries[z]){\\n                count+=duration;\\n            }\\n            else{\\n                count+=timeSeries[z]-timeSeries[z-1];\\n            }\\n        }\\n        count+=duration;\\n        return count;\\n           \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int count=0;\\n        for(int z=1;z<timeSeries.size();z++){\\n            if(timeSeries[z-1]+duration<=timeSeries[z]){\\n                count+=duration;\\n            }\\n            else{\\n                count+=timeSeries[z]-timeSeries[z-1];\\n            }\\n        }\\n        count+=duration;\\n        return count;\\n           \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2565997,
                "title": "nothing-can-be-as-simple-as-this-sol",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int d) {\\n       int ans=0;\\n        for(int i=0;i<ts.size()-1;i++){\\n            if(ts[i]+d-1>=ts[i+1]){\\n                ans+=ts[i+1]-ts[i];\\n            }\\n            else ans+=d;\\n        }\\n        ans+=d;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int d) {\\n       int ans=0;\\n        for(int i=0;i<ts.size()-1;i++){\\n            if(ts[i]+d-1>=ts[i+1]){\\n                ans+=ts[i+1]-ts[i];\\n            }\\n            else ans+=d;\\n        }\\n        ans+=d;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1796795,
                "title": "python-o-n-time-and-o-1-space-solution",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if len(timeSeries) == 0:\\n            return 0\\n        \\n        ans = 0\\n        \\n        for i in range(0,len(timeSeries)-1):\\n            ans += min(timeSeries[i+1] - timeSeries[i], duration)\\n            \\n        return ans + duration\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if len(timeSeries) == 0:\\n            return 0\\n        \\n        ans = 0\\n        \\n        for i in range(0,len(timeSeries)-1):\\n            ans += min(timeSeries[i+1] - timeSeries[i], duration)\\n            \\n        return ans + duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1267625,
                "title": "python-3-easy-solution-explained",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if duration == 0: return 0\\n        res = 0\\n        for i in range(len(timeSeries)-1):\\n            res += min(timeSeries[i] + duration, timeSeries[i+1]) - timeSeries[i]\\n        res += duration\\n        return res\\n```\\n\\nSo, let us break the above solution. \\n\\nFirstly, in the constraints there is a possibility that **duration** can be 0 which means no matter how much Teemo attacks, Ashe will not be poisoned for even a second. So this is treated as an edge case *(although our code could have dealt with the duration 0 thing even without the need of putting an edge case condition return, but this was my first instinct so I went with this)*.\\n\\nNow, what we want is to count the seconds our enemy (Ashe) is poisoned. According to our problem statement, if Teemo attacks Ashe when they are already poisoned, the duration will reset and continue from that second. Which is another way to state that the time frames of Ashe being poisoned can and will overlap. \\n\\nExplaining what I mean is let us take an example. So for the below conditions. \\n```\\nduration = 5, timeSeries  = [1,3]\\n```\\nTeemo first attacks at **Second 1** and Ashe is supposed to be poisoned for **Second 1, Second 2, Second 3, Second 4 and Second 5**. \\n\\nBut, Teemo could not wait and attacked at **Second 3** again which restarted the timer again and now, Ashe will also be poisoned for **Second 3, Second 4, Second 5, Second 6, Second 7**.\\n\\nThat gives us a total of **7 Seconds** of Ashe being poisoned for the above variables as **Second 3, Second 4, Second 5** are common and are overlapping and will basically be counted only once. \\n\\nSo to simulate the counting of the poisoned seconds, my approach is to start a loop for each time Teemo attacked except the last time (basically a loop from 1st element to the second-last element), and add the duration minus the overlapped seconds. \\n\\nTo check/calculate how may seconds are relevant from each attack from Teemo, just check if the last poisoned second of the attack goes past the next attack\\'s time. If it does, we do not count any time that was past the next attack\\'s time. Those seconds will be counted in the next iteration of the loop. \\n\\ne.g. To explain further, take the above example. \\n```\\ntimeSeries = [1,3]. duration = 5\\n```\\nSo for the first attack, \\n**Poisoned Time - 1 2 3 4 5 = 5 seconds**\\n\\nBut, there is a second attack om **Second 3** before Ashe is recovered. So from the first attack, 3 4 5 were irrelevant for our count and Teemo only managed to effectively poison Aishe for only **2 seconds** before they landed their next attack.\\n\\nIn our code, we calculate that using the minimum function to see which is minimum; The next attack\\'s time (in case of an overlap) or the time when Ashe recovers (in case where there is no overlap with the next attack) and subtract our original time of attack to calculate the duration Ashe was effectively poisoned for that attack. \\n\\nWe do this for all attacks but the last one in our list and deal with it separately outside our for loop because there is going to be no next attack for which we need to check any overlapping and we can directly just add the **duration** variable in our result and return it.\\n\\n**Note:** We can only implement the above solution when our **timeSeries** variable is sorted (which it is), or generally we would had to separately sort it before going forward or we would have not been able to directly compare one attack with the other as they were basically not in a sequential order. \\n\\n**Author Notes:** Sorry this is a very long solution to read, but feel free to ask if anything is unclear or you need clarity on what I explained. \\n\\n**Happy Coding!!**\\n\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if duration == 0: return 0\\n        res = 0\\n        for i in range(len(timeSeries)-1):\\n            res += min(timeSeries[i] + duration, timeSeries[i+1]) - timeSeries[i]\\n        res += duration\\n        return res\\n```\n```\\nduration = 5, timeSeries  = [1,3]\\n```\n```\\ntimeSeries = [1,3]. duration = 5\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1252958,
                "title": "very-easy-c-solution-with-explanation",
                "content": "## Logic:\\n* If it is poisoned after the duration period (not intersecting time periods) , add last duration period to answer\\n* else (intersecting time period) counter again starts \\n\\t* Add the time Elapsed to answer\\n* Update the duration end period at each iteration \\n* Add the duration at the end of loop means the last duration period occur without interruption\\n\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        int end=timeSeries[0]+duration-1;\\n        for(int i=1;i<timeSeries.size();i++){\\n            if(timeSeries[i]>end){\\n                ans+=duration; \\n            }else{\\n                ans+=(timeSeries[i]-timeSeries[i-1]);\\n            }\\n             end=timeSeries[i]+duration-1;                \\n        }\\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        int end=timeSeries[0]+duration-1;\\n        for(int i=1;i<timeSeries.size();i++){\\n            if(timeSeries[i]>end){\\n                ans+=duration; \\n            }else{\\n                ans+=(timeSeries[i]-timeSeries[i-1]);\\n            }\\n             end=timeSeries[i]+duration-1;                \\n        }\\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866046,
                "title": "c-simulation-time-space-o-n-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans = 0;                           \\n        vector<int> last;  // {start, end}      \\n        for(auto i: timeSeries){\\n            if(last.empty()) last={i, i+duration};  // case 1: 1st segment\\n            else if(i <=last[1]) last[1] =  max(last[1], i+duration); // case 2: overlapping segment\\n            else ans += last[1] - last[0], last={i, i+duration}; // case 3: non-overlapping segment\\n        }\\n        if(!last.empty())  ans += last[1] - last[0]; // if there is unprocessed.\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans = 0;                           \\n        vector<int> last;  // {start, end}      \\n        for(auto i: timeSeries){\\n            if(last.empty()) last={i, i+duration};  // case 1: 1st segment\\n            else if(i <=last[1]) last[1] =  max(last[1], i+duration); // case 2: overlapping segment\\n            else ans += last[1] - last[0], last={i, i+duration}; // case 3: non-overlapping segment\\n        }\\n        if(!last.empty())  ans += last[1] - last[0]; // if there is unprocessed.\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865521,
                "title": "don-t-play-league",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self,t,d):\\n\\t\\tres = 0\\n\\t\\tif not t: return 0\\n\\t\\tfor i in range(len(t)-1):\\n\\t\\t\\tres += min(d,t[i+1]-t[i])\\n\\t\\treturn res+d\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self,t,d):\\n\\t\\tres = 0\\n\\t\\tif not t: return 0\\n\\t\\tfor i in range(len(t)-1):\\n\\t\\t\\tres += min(d,t[i+1]-t[i])\\n\\t\\treturn res+d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865372,
                "title": "c-simple-solution-beats-98-runtime-self-explanatory",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    int findPoisonedDuration(vector<int> &timeSeries, int duration)\\n    {\\n        if (timeSeries.size() == 0)\\n            return 0;\\n        int res = duration;\\n        for (int i = 1; i < timeSeries.size(); ++i)\\n        {\\n            if (duration <= timeSeries[i] - timeSeries[i - 1])\\n                res += duration;\\n            else\\n                res += timeSeries[i] - timeSeries[i - 1];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int findPoisonedDuration(vector<int> &timeSeries, int duration)\\n    {\\n        if (timeSeries.size() == 0)\\n            return 0;\\n        int res = duration;\\n        for (int i = 1; i < timeSeries.size(); ++i)\\n        {\\n            if (duration <= timeSeries[i] - timeSeries[i - 1])\\n                res += duration;\\n            else\\n                res += timeSeries[i] - timeSeries[i - 1];\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 864934,
                "title": "c-linear-solution-explained-100-time-30-space",
                "content": "I am not sure how I am supposed to use less memory than this, but okay.\\n\\nThe idea is pretty simple and we just have to work through the series incrementing our accumulator variable `res` for all the elements minus the last one so that `res` increases as the minimum value between the distance with the next point in time (`s[i + 1] - s[i]`) and the duration (`d`).\\n\\nIn order for it to work, we need to deal with the edge case of an empty series (no attacks => `0` damage) and finally we need to return `res + d`, since the last attack will always be in full :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& s, int d) {\\n        // support variables\\n        int res = 0, len = s.size() - 1;\\n        // edge case\\n        if (len == -1) return res;\\n        // computing the overall poison for all attacks but last\\n        for (int i = 0; i < len; i++) res += min(s[i + 1] - s[i], d);\\n        return res + d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& s, int d) {\\n        // support variables\\n        int res = 0, len = s.size() - 1;\\n        // edge case\\n        if (len == -1) return res;\\n        // computing the overall poison for all attacks but last\\n        for (int i = 0; i < len; i++) res += min(s[i + 1] - s[i], d);\\n        return res + d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 830875,
                "title": "c-most-simple-logic",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& a, int d) {\\n        int n = a.size();\\n        if(n==0)\\n            return 0;\\n        long long int ans = 0;\\n        int time = 0;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(a[i]-a[i-1]>=d)\\n                ans+=d;\\n            else ans += a[i]-a[i-1];\\n        }\\n        ans += d;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& a, int d) {\\n        int n = a.size();\\n        if(n==0)\\n            return 0;\\n        long long int ans = 0;\\n        int time = 0;\\n        for(int i=1;i<n;i++)\\n        {\\n            if(a[i]-a[i-1]>=d)\\n                ans+=d;\\n            else ans += a[i]-a[i-1];\\n        }\\n        ans += d;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 757771,
                "title": "java-3-lines",
                "content": "```\\n    public int findPoisonedDuration(int[] ts, int d) {\\n        int res = 0, n = ts.length;\\n        for (int i = n - 1; i >= 0; i--) res += Math.min(d, (i == n - 1 ? Integer.MAX_VALUE : ts[i + 1]) - ts[i]);\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int findPoisonedDuration(int[] ts, int d) {\\n        int res = 0, n = ts.length;\\n        for (int i = n - 1; i >= 0; i--) res += Math.min(d, (i == n - 1 ? Integer.MAX_VALUE : ts[i + 1]) - ts[i]);\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3795773,
                "title": "c-intuitive-approach-o-n-99-99-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& nums, int duration) {\\n        int ans=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i==nums.size()-1){\\n                ans+=duration;\\n                break;\\n            }\\n            if(duration+nums[i]<=nums[i+1]){\\n                ans+=duration;\\n            }\\n            else //clash nums[i]+duration>nums[i+1]\\n            {\\n                ans+=nums[i+1]-nums[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& nums, int duration) {\\n        int ans=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(i==nums.size()-1){\\n                ans+=duration;\\n                break;\\n            }\\n            if(duration+nums[i]<=nums[i+1]){\\n                ans+=duration;\\n            }\\n            else //clash nums[i]+duration>nums[i+1]\\n            {\\n                ans+=nums[i+1]-nums[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3583813,
                "title": "easiest-solution-ever-p",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->O(N)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeseries, int duration) {\\n        int ans = 0;\\n        for(int i = 0; i< timeseries.size()-1; i++)\\n        {\\n            if(timeseries[i]+duration<timeseries[i+1])\\n            {\\n                ans+=duration;\\n            }\\n            else\\n            ans+=timeseries[i+1]-timeseries[i];\\n        }\\n        return ans+duration;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeseries, int duration) {\\n        int ans = 0;\\n        for(int i = 0; i< timeseries.size()-1; i++)\\n        {\\n            if(timeseries[i]+duration<timeseries[i+1])\\n            {\\n                ans+=duration;\\n            }\\n            else\\n            ans+=timeseries[i+1]-timeseries[i];\\n        }\\n        return ans+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3464186,
                "title": "most-easy-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans=duration;\\n        for(int i=1;i<timeSeries.length;i++){ \\n            ans+=Math.min(duration,timeSeries[i]-timeSeries[i-1]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans=duration;\\n        for(int i=1;i<timeSeries.length;i++){ \\n            ans+=Math.min(duration,timeSeries[i]-timeSeries[i-1]);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3454101,
                "title": "teemo-attacking-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int i, time=0;\\n        for(i=0 ; i<timeSeries.size()-1 ; i++)\\n        {\\n            if(timeSeries[i]+duration-1<timeSeries[i+1])\\n            {\\n                time += duration;\\n            }\\n            else\\n            {\\n                time += timeSeries[i+1]-timeSeries[i];\\n            }\\n        }\\n        time += duration;\\n        return time;\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/d8b4e942-4e8c-49dd-a133-bdd3e831d8eb_1682612623.4015508.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int i, time=0;\\n        for(i=0 ; i<timeSeries.size()-1 ; i++)\\n        {\\n            if(timeSeries[i]+duration-1<timeSeries[i+1])\\n            {\\n                time += duration;\\n            }\\n            else\\n            {\\n                time += timeSeries[i+1]-timeSeries[i];\\n            }\\n        }\\n        time += duration;\\n        return time;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3408968,
                "title": "simple-understandable-python-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        total = 0\\n        l = len(timeSeries)\\n        for i in range(l):\\n        \\n            if i < l - 1:\\n\\n                if timeSeries[i] + duration - 1 < timeSeries[i+1]:\\n                    total += duration\\n                \\n                else:\\n                    total += timeSeries[i+1] - timeSeries[i]\\n        \\n            else:\\n                total += duration\\n        \\n        return total\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        total = 0\\n        l = len(timeSeries)\\n        for i in range(l):\\n        \\n            if i < l - 1:\\n\\n                if timeSeries[i] + duration - 1 < timeSeries[i+1]:\\n                    total += duration\\n                \\n                else:\\n                    total += timeSeries[i+1] - timeSeries[i]\\n        \\n            else:\\n                total += duration\\n        \\n        return total\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2846713,
                "title": "cpp-easy-to-understand-simulation",
                "content": "# Code\\n```\\nclass Solution \\n{\\npublic:\\nset<int>st;\\nint findPoisonedDuration(vector<int>& arr, int duration) \\n{\\n    for(int i=0;i<arr.size();i++)\\n    {\\n       st.insert(arr[i]);\\t\\n\\t}\\n\\tint count=0;\\n\\t\\n\\tfor(auto t : st)\\n\\t{\\n\\t\\tint start_time = t;\\n\\t\\tint temp=0;\\n\\t    \\n\\t    while(temp <= (duration -1))\\n\\t    {\\n\\t    \\tif((start_time + temp)==start_time or st.find(start_time + temp)==st.end())  //poisenod for this second\\n\\t    \\t{\\n\\t    \\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(st.find(start_time + temp) != st.end()) //new start_time found\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\ttemp++;\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n} \\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Simulation"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\nset<int>st;\\nint findPoisonedDuration(vector<int>& arr, int duration) \\n{\\n    for(int i=0;i<arr.size();i++)\\n    {\\n       st.insert(arr[i]);\\t\\n\\t}\\n\\tint count=0;\\n\\t\\n\\tfor(auto t : st)\\n\\t{\\n\\t\\tint start_time = t;\\n\\t\\tint temp=0;\\n\\t    \\n\\t    while(temp <= (duration -1))\\n\\t    {\\n\\t    \\tif((start_time + temp)==start_time or st.find(start_time + temp)==st.end())  //poisenod for this second\\n\\t    \\t{\\n\\t    \\t\\tcount++;\\n\\t\\t\\t}\\n\\t\\t\\telse if(st.find(start_time + temp) != st.end()) //new start_time found\\n\\t\\t\\t{\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t\\ttemp++;\\n\\t\\t}\\n\\t}\\n\\treturn count;\\n} \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2771283,
                "title": "java-1-ms",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int sum=duration;\\n        int d=timeSeries[0]+duration-1;\\n        for(int i=1; i<timeSeries.length; i++){\\n            if(timeSeries[i]<=d){\\n                sum=sum+timeSeries[i]-timeSeries[i-1];\\n            }\\n            else{\\n                sum=sum+duration;\\n            }\\n            d=timeSeries[i]+duration-1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int sum=duration;\\n        int d=timeSeries[0]+duration-1;\\n        for(int i=1; i<timeSeries.length; i++){\\n            if(timeSeries[i]<=d){\\n                sum=sum+timeSeries[i]-timeSeries[i-1];\\n            }\\n            else{\\n                sum=sum+duration;\\n            }\\n            d=timeSeries[i]+duration-1;\\n        }\\n        return sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2716256,
                "title": "c-easy-short",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int findPoisonedDuration(vector<int>& tS, int duration) {\\n    int out = 0;\\n    for(int i=0;i<tS.size()-1;i++) {\\n        if(tS[i] + duration > tS[i+1])\\n            out += tS[i+1] - tS[i];\\n        else\\n            out += duration;\\n    }\\n    return out + duration;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   int findPoisonedDuration(vector<int>& tS, int duration) {\\n    int out = 0;\\n    for(int i=0;i<tS.size()-1;i++) {\\n        if(tS[i] + duration > tS[i+1])\\n            out += tS[i+1] - tS[i];\\n        else\\n            out += duration;\\n    }\\n    return out + duration;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2607190,
                "title": "python-easy-to-understand-121ms",
                "content": "\\t\\t\\t\\tclass Solution:\\n\\t\\t\\t\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\t\\t\\t\\tans =0\\n\\t\\t\\t\\t\\t\\ttime=0\\n\\t\\t\\t\\t\\t\\tfor i in timeSeries:\\n\\t\\t\\t\\t\\t\\t\\tans += i + duration - max(i, time)\\n\\t\\t\\t\\t\\t\\t\\ttime = i + duration\\n\\t\\t\\t\\t\\t\\treturn ans",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\t\\t\\t\\tclass Solution:\\n\\t\\t\\t\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\t\\t\\t\\tans =0\\n\\t\\t\\t\\t\\t\\ttime=0\\n\\t\\t\\t\\t\\t\\tfor i in timeSeries:\\n\\t\\t\\t\\t\\t\\t\\tans += i + duration - max(i, time)\\n\\t\\t\\t\\t\\t\\t\\ttime = i + duration\\n\\t\\t\\t\\t\\t\\treturn ans",
                "codeTag": "Java"
            },
            {
                "id": 2506925,
                "title": "100-t-c-easy-short-fast-solution",
                "content": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```\\n```\\n    public int findPoisonedDuration(int[] t, int d) {\\n        \\n        int sum = d;\\n        int temp = t[0] + d - 1;\\n\\n        for (int i = 1; i < t.length; i++) {\\n            if (t[i] > temp){\\n                sum += d;\\n            }\\n            else {\\n                sum += t[i] + d - 1 - temp;\\n            }\\n            temp = t[i] + d - 1;\\n        }\\n        return sum;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nPLEASE UPVOTE IF YOU LIKE\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2209014,
                "title": "javascript-5-6-lines-easy-understand-o-n",
                "content": "```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    const length = timeSeries.length;\\n    let sum = 0;\\n    for(let index = 1; index < length; index++) {\\n        if(timeSeries[index] - timeSeries[index-1] > duration) {\\n            sum += duration;\\n        }\\n        else {\\n            sum += timeSeries[index] - timeSeries[index-1];\\n        }\\n    }\\n    sum += duration;\\n    return sum;    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    const length = timeSeries.length;\\n    let sum = 0;\\n    for(let index = 1; index < length; index++) {\\n        if(timeSeries[index] - timeSeries[index-1] > duration) {\\n            sum += duration;\\n        }\\n        else {\\n            sum += timeSeries[index] - timeSeries[index-1];\\n        }\\n    }\\n    sum += duration;\\n    return sum;    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2002988,
                "title": "java-o-n-time-o-1-space-clean-solution-well-explained",
                "content": "Hi there ! \\n\\nIdea : on each iteration we want to do the following \\n1. check if at  current second ```timeSeries[i]``` is poisoned and for how long to compare it with next value to\\n2. indentify the actuall time Ashe was poisoned between two points ```timeSeries[i] ``` and ```timeSeries[i + 1]```\\n``` if(timeSeries[i] + duration > timeSeries[i + 1])``` \\nit\\'s either the time difference between points ```timeSeries[i + 1] - timeSeries[i];``` example[1,2]\\nor ```duration``` example [1,4];\\n\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int result = 0; //number of seconds Ashe was poisoned.\\n        for(int i = 0; i < timeSeries.length - 1; i++){\\n            if(timeSeries[i] + duration > timeSeries[i + 1]) // checking how long poison will last.\\n                result+= timeSeries[i + 1] - timeSeries[i];  \\n            else\\n                result+= duration; // add duration if current time + duration is less than time when Teemo will poison Ashe again\\n        } \\n        return result + duration; // add last one cause its missing :) \\n    }\\n}\\n```\\nPlease upvote if you like this solution !",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```timeSeries[i]```\n```timeSeries[i] ```\n```timeSeries[i + 1]```\n``` if(timeSeries[i] + duration > timeSeries[i + 1])```\n```timeSeries[i + 1] - timeSeries[i];```\n```duration```\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int result = 0; //number of seconds Ashe was poisoned.\\n        for(int i = 0; i < timeSeries.length - 1; i++){\\n            if(timeSeries[i] + duration > timeSeries[i + 1]) // checking how long poison will last.\\n                result+= timeSeries[i + 1] - timeSeries[i];  \\n            else\\n                result+= duration; // add duration if current time + duration is less than time when Teemo will poison Ashe again\\n        } \\n        return result + duration; // add last one cause its missing :) \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1836114,
                "title": "teemo-attacking-solution-java",
                "content": "class Solution {\\n  public int findPoisonedDuration(int[] timeSeries, int duration) {\\n    if (duration == 0)\\n      return 0;\\n\\n    int ans = 0;\\n\\n    for (int i = 0; i + 1 < timeSeries.length; ++i)\\n      ans += Math.min(timeSeries[i + 1] - timeSeries[i], duration);\\n\\n    return ans + duration;\\n  }\\n}\\n",
                "solutionTags": [
                    "Array",
                    "Simulation"
                ],
                "code": "class Solution {\\n  public int findPoisonedDuration(int[] timeSeries, int duration) {\\n    if (duration == 0)\\n      return 0;\\n\\n    int ans = 0;\\n\\n    for (int i = 0; i + 1 < timeSeries.length; ++i)\\n      ans += Math.min(timeSeries[i + 1] - timeSeries[i], duration);\\n\\n    return ans + duration;\\n  }",
                "codeTag": "Java"
            },
            {
                "id": 1819834,
                "title": "c-time-complexity-o-n-simple-logic-using-for-loop",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int i, n=timeSeries.size();\\n        if(n==1) return duration;\\n        \\n        int ans=0;\\n        for(i=0;i<n-1;i++){\\n            if(timeSeries[i+1]-timeSeries[i] < duration)\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            else \\n                ans+=duration;\\n        }\\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```\\n**Do UPVOTE if u liked the soln :\\')**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int i, n=timeSeries.size();\\n        if(n==1) return duration;\\n        \\n        int ans=0;\\n        for(i=0;i<n-1;i++){\\n            if(timeSeries[i+1]-timeSeries[i] < duration)\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            else \\n                ans+=duration;\\n        }\\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1668742,
                "title": "beginner-friendly-easy-to-understand-c-code",
                "content": "* ***Time Complexity : O(N)***\\n* ***Space Complexity : O(N)***\\n\\n```\\nint findPoisonedDuration(vector<int>& time, int duration) {\\n        \\n        int n = time.size();\\n        \\n        vector<pair<int, int>> res;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int x = time[i];\\n            int y = time[i] + duration - 1;\\n            \\n            res.push_back({x, y});\\n        }\\n        \\n        \\n        int ans = 0;\\n        \\n        ans += res[0].second - res[0].first + 1;\\n        \\n        for(int i = 1; i < n; i++)\\n        {\\n            if(res[i].first <= res[i-1].second)\\n            {\\n                int temp = (res[i].second - res[i].first) - (res[i-1].second - res[i].first);\\n                ans += temp;\\n            }\\n            \\n            else\\n            {\\n                ans += res[i].second - res[i].first + 1;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nint findPoisonedDuration(vector<int>& time, int duration) {\\n        \\n        int n = time.size();\\n        \\n        vector<pair<int, int>> res;\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            int x = time[i];\\n            int y = time[i] + duration - 1;\\n            \\n            res.push_back({x, y});\\n        }\\n        \\n        \\n        int ans = 0;\\n        \\n        ans += res[0].second - res[0].first + 1;\\n        \\n        for(int i = 1; i < n; i++)\\n        {\\n            if(res[i].first <= res[i-1].second)\\n            {\\n                int temp = (res[i].second - res[i].first) - (res[i-1].second - res[i].first);\\n                ans += temp;\\n            }\\n            \\n            else\\n            {\\n                ans += res[i].second - res[i].first + 1;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1581141,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& t, int duration) {\\n        int ans = 0;\\n        for(int i = 0;i < t.size() - 1;i++)\\n        {\\n            ans = ans + min(duration,t[i + 1] - t[i]);\\n        }\\n        return ans + duration;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& t, int duration) {\\n        int ans = 0;\\n        for(int i = 0;i < t.size() - 1;i++)\\n        {\\n            ans = ans + min(duration,t[i + 1] - t[i]);\\n        }\\n        return ans + duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1575435,
                "title": "python3-1-line",
                "content": "* Same logic as Merge Intervals\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        return duration+sum(min(duration,timeSeries[i+1]-timeSeries[i]) for i in range(len(timeSeries)-1))\\n```\\n* Readable version:\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res=0\\n        for i in range(len(timeSeries)-1):\\n            res+=min(duration,timeSeries[i+1]-timeSeries[i])\\n        return res+duration\\n```\\n* Even more simple:\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res=0\\n        for i in range(len(timeSeries)-1):\\n            if timeSeries[i+1]<timeSeries[i]+duration: \\n                res+=(timeSeries[i+1]-timeSeries[i])\\n            else:\\n                res+=duration\\n        return res+duration\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        return duration+sum(min(duration,timeSeries[i+1]-timeSeries[i]) for i in range(len(timeSeries)-1))\\n```\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res=0\\n        for i in range(len(timeSeries)-1):\\n            res+=min(duration,timeSeries[i+1]-timeSeries[i])\\n        return res+duration\\n```\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res=0\\n        for i in range(len(timeSeries)-1):\\n            if timeSeries[i+1]<timeSeries[i]+duration: \\n                res+=(timeSeries[i+1]-timeSeries[i])\\n            else:\\n                res+=duration\\n        return res+duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1562528,
                "title": "python3-4-lines-easy-implemenatation",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        \\n        total_time = duration # for last poision\\n        for i in range(len(timeSeries)-1):\\n            total_time += min(duration, (timeSeries[i+1] - timeSeries[i]))   \\n        return total_time\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        \\n        total_time = duration # for last poision\\n        for i in range(len(timeSeries)-1):\\n            total_time += min(duration, (timeSeries[i+1] - timeSeries[i]))   \\n        return total_time\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1458790,
                "title": "c-keep-track-of-the-end-time",
                "content": "Please upvote of you like the solution !!!\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int sum = 0, end = -1;\\n        \\n        for(int i = 0; i <timeSeries.size(); i++){\\n            //if the time interval collides\\n            //exclude the common interval \\n            //as it is already included in the answer\\n            if(end >= timeSeries[i])\\n                sum += duration - (end - timeSeries[i]+1);\\n            else\\n            sum += duration; //if no collision,simply add the whole duration\\n            end = timeSeries[i] + duration - 1; //keep updating end time\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int sum = 0, end = -1;\\n        \\n        for(int i = 0; i <timeSeries.size(); i++){\\n            //if the time interval collides\\n            //exclude the common interval \\n            //as it is already included in the answer\\n            if(end >= timeSeries[i])\\n                sum += duration - (end - timeSeries[i]+1);\\n            else\\n            sum += duration; //if no collision,simply add the whole duration\\n            end = timeSeries[i] + duration - 1; //keep updating end time\\n        }\\n        \\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1414052,
                "title": "clean-concise-very-easy-91-faster",
                "content": "## IDEA:\\n\\uD83D\\uDC49*Since list is given in non-decreasing order, we dont have to bother about the sorting. \\n\\uD83D\\uDC49 Directly we can check that if we poisoned ash then for how long time it would be in sleep mode, which is **timeseries[i]+duration-1**. \\n\\uD83D\\uDC49 If this time is less then the next poisioning time then directly we will add the difference as a sleeping time. \\n\\uD83D\\uDC49 But If it gets exceede or equal to next poisioning time then directly we can add the difference of these two adjacent number and contiue the loop.\\n\\uD83D\\uDC49 At last we have to add the duration because after giving final poison it will remain in sleep mode for \"duration\"  time.*\\n\\'\\'\\'\\n\\n\\tclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        \\n        res = 0\\n        for i in range(len(timeSeries)-1):\\n            s = timeSeries[i]+duration-1\\n            if s<timeSeries[i+1]:\\n                res+=s-timeSeries[i]+1\\n            else:\\n                res+=timeSeries[i+1]-timeSeries[i]\\n                \\n        res+=duration\\n        return res\\n\\n**Thanks & Upvote !!** \\uD83E\\uDD1E\\nFeel free to ask if you have any doubt. \\uD83E\\uDD33",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "## IDEA:\\n\\uD83D\\uDC49*Since list is given in non-decreasing order, we dont have to bother about the sorting. \\n\\uD83D\\uDC49 Directly we can check that if we poisoned ash then for how long time it would be in sleep mode, which is **timeseries[i]+duration-1**. \\n\\uD83D\\uDC49 If this time is less then the next poisioning time then directly we will add the difference as a sleeping time. \\n\\uD83D\\uDC49 But If it gets exceede or equal to next poisioning time then directly we can add the difference of these two adjacent number and contiue the loop.\\n\\uD83D\\uDC49 At last we have to add the duration because after giving final poison it will remain in sleep mode for \"duration\"  time.*\\n\\'\\'\\'\\n\\n\\tclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        \\n        res = 0\\n        for i in range(len(timeSeries)-1):\\n            s = timeSeries[i]+duration-1\\n            if s<timeSeries[i+1]:\\n                res+=s-timeSeries[i]+1\\n            else:\\n                res+=timeSeries[i+1]-timeSeries[i]\\n                \\n        res+=duration\\n        return res\\n\\n**Thanks & Upvote !!** \\uD83E\\uDD1E\\nFeel free to ask if you have any doubt. \\uD83E\\uDD33",
                "codeTag": "Java"
            },
            {
                "id": 1281362,
                "title": "easy-to-understand-for-beginners-as-well-commented",
                "content": "```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n  let count=0;\\n    for(let i=0;i<timeSeries.length;i++){\\n\\t// if the time interval between 2 consecutive attacks is within the duration, then only within that period of time the person would be poisoined\\n        if(timeSeries[i+1] && timeSeries[i+1]-timeSeries[i]<duration){\\n            count+=timeSeries[i+1]-timeSeries[i]\\n        }else{\\n\\t\\t// if not person would be poisoined for the entire duration\\n            count+=duration;\\n        }\\n    }\\n    return count;\\n};\\n```\\nRuntime: 72 ms, faster than 98.78% of JavaScript online submissions for Teemo Attacking.\\nMemory Usage: 42.7 MB, less than 57.32% of JavaScript online submissions for Teemo Attacking.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n  let count=0;\\n    for(let i=0;i<timeSeries.length;i++){\\n\\t// if the time interval between 2 consecutive attacks is within the duration, then only within that period of time the person would be poisoined\\n        if(timeSeries[i+1] && timeSeries[i+1]-timeSeries[i]<duration){\\n            count+=timeSeries[i+1]-timeSeries[i]\\n        }else{\\n\\t\\t// if not person would be poisoined for the entire duration\\n            count+=duration;\\n        }\\n    }\\n    return count;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1170751,
                "title": "simple-java-solution-100-faster",
                "content": "```\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] ts, int duration) {\\n        if(ts.length < 1)\\n            return 0;\\n        int res = 0;\\n        for(int i=0;i<ts.length-1;i++){\\n            res += Math.min(duration,ts[i+1]-ts[i]);\\n        }\\n        return res+duration;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] ts, int duration) {\\n        if(ts.length < 1)\\n            return 0;\\n        int res = 0;\\n        for(int i=0;i<ts.length-1;i++){\\n            res += Math.min(duration,ts[i+1]-ts[i]);\\n        }\\n        return res+duration;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866056,
                "title": "faster-than-100-of-python3-solutions-screenshot-attached",
                "content": "Note : Iterate over the series while keeping track of max time of poison reached till now.\\n```Python\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if len(timeSeries) == 0:\\n            return 0\\n        \\n        total_duration = duration\\n        max_duration = timeSeries[0] + duration - 1\\n        \\n        for time in timeSeries[1:]:\\n            curr_duration = time + duration - 1\\n            \\n            if time <= max_duration:\\n                diff = curr_duration - max_duration\\n            else:\\n                diff = duration\\n                \\n            total_duration += diff\\n            max_duration = curr_duration\\n        \\n        return total_duration\\n```\\nAttaching a screenshot for Proof \\n![image](https://assets.leetcode.com/users/images/ae4f4ed1-9c1c-402c-8cdf-2bb505a221ef_1601156458.0300622.png)\\n",
                "solutionTags": [],
                "code": "```Python\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if len(timeSeries) == 0:\\n            return 0\\n        \\n        total_duration = duration\\n        max_duration = timeSeries[0] + duration - 1\\n        \\n        for time in timeSeries[1:]:\\n            curr_duration = time + duration - 1\\n            \\n            if time <= max_duration:\\n                diff = curr_duration - max_duration\\n            else:\\n                diff = duration\\n                \\n            total_duration += diff\\n            max_duration = curr_duration\\n        \\n        return total_duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865682,
                "title": "easy-java-o-n-tc-o-1-space-short-code",
                "content": "We take a temp variable called max, which represents the maximum day that we have considered. If the current attack time is < max, then we only need to add the i+duration - max to the answer as thats the time unaccounted for and we also update max. Else we just simply add duration to answer and update max. \\n\\n\\n```\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0;\\n        \\n        int max = 0;\\n        \\n        for(int i : timeSeries){\\n            if (i < max){\\n                ans += ((i + duration) - max);\\n                max = i + duration;\\n            }\\n            else{\\n                ans+= duration;\\n                max = i + duration;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0;\\n        \\n        int max = 0;\\n        \\n        for(int i : timeSeries){\\n            if (i < max){\\n                ans += ((i + duration) - max);\\n                max = i + duration;\\n            }\\n            else{\\n                ans+= duration;\\n                max = i + duration;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865319,
                "title": "simple-java-solution-o-n-faster-than-100",
                "content": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        \\n        int result = duration;\\n        \\n        for (int i = 1; i < timeSeries.length; i++) {\\n            result += Math.min(duration, timeSeries[i] - timeSeries[i - 1]);\\n        }\\n        \\n        return result;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries.length == 0) return 0;\\n        \\n        int result = duration;\\n        \\n        for (int i = 1; i < timeSeries.length; i++) {\\n            result += Math.min(duration, timeSeries[i] - timeSeries[i - 1]);\\n        }\\n        \\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 865084,
                "title": "teemo-attacking-simple-python3-solution-beats-100",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        ans = 0\\n        last = 0\\n        for val in timeSeries:\\n                ans += min(val+duration - last, duration)\\n                last = val+duration\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        ans = 0\\n        last = 0\\n        for val in timeSeries:\\n                ans += min(val+duration - last, duration)\\n                last = val+duration\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865077,
                "title": "python-c-easy-solution-100-faster-o-n",
                "content": "Intuition: We have to keep track of the time till the enemy is poisoned. And within that time if he is attacked again, then we need to add only the amount of time he is going to be poisoned extra. Confused? Take a look at this example.\\n\\nLets say the timeseries is [1,2,6] and poison time is 3 . And totalTime = 0 initially.\\n**at time 0** : Enemy is healthy [ 0,1,2,3,4,5,6,7,8,9 . . . ]\\n**at time 1**: Enemy is poisoned till time unit 3:  [ 0, **1, 2, 3,** 4 , 5, 6, 7, 8, 9 . . .]\\nhence add 3 to totalTime. Therefore totalTime = 3 at t=1. And store the time till he will be poisoned in a variable. Lets say j = 3. (means, till time 3 he will be poisoned). \\n\\n**at time 2**: Enemy is poisoned again, but he is posioned till time 3 already, so the extra time which he is going to suffer from poison is : duration - ( abs( j - currTime ) + 1)\\n                                                                  i,e = 3 - ( abs ( 3 - 2 ) + 1) =  3 - 2 = 1\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  Which means that, for a extra time of 1 unit he will be poisoned again. Hence Enemy state will be  [ 0, **1, 2, 3, 4** , 5, 6, 7, 8, 9 . . .].\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t  so totalTime += duration - ( abs( j - currTime ) + 1)\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t       totalTime+=1 and j +=1\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t hence  totalTime = 4 and j = 4\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t \\n**at time 6**: Enemy is already free from poison at this moment (bcz j = 4) . Hence, poisoning him now can be directly added to the totalTime with full duration. [ 0, **1, 2, 3, 4** , 5, **6, 7, 8,** 9 . . .].\\ntotalTime += duration hence totalTime = 4+3 = 7\\n\\n complexity: **O(n)**\\n\\t\\n\\t\\nPython\\n```\\ndef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        j, res = -1,0\\n        for c in timeSeries:\\n            if c <= j :\\n                tmp = duration - ( abs(j-c) + 1)\\n                res+= tmp\\n                j+= tmp\\n            else:\\n                res+= duration\\n                j =  c + duration - 1\\n        return res\\n```\\n\\nC++\\n```\\nint findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int j = -1;\\n        int res = 0;\\n        for(int c: timeSeries){\\n            if(c <= j){\\n                int tmp = duration - ( abs(j - c) + 1);\\n                res+= tmp;\\n                j+= tmp;\\n            }else{\\n                res+=duration;\\n                j = c + duration -1;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Python3",
                    "C"
                ],
                "code": "```\\ndef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        j, res = -1,0\\n        for c in timeSeries:\\n            if c <= j :\\n                tmp = duration - ( abs(j-c) + 1)\\n                res+= tmp\\n                j+= tmp\\n            else:\\n                res+= duration\\n                j =  c + duration - 1\\n        return res\\n```\n```\\nint findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int j = -1;\\n        int res = 0;\\n        for(int c: timeSeries){\\n            if(c <= j){\\n                int tmp = duration - ( abs(j - c) + 1);\\n                res+= tmp;\\n                j+= tmp;\\n            }else{\\n                res+=duration;\\n                j = c + duration -1;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 865035,
                "title": "teemo-attacking-solution-o-n-cpp-solution-with-concept-behind-it",
                "content": "The trick in this question is just to maintain two variables. One is to keep the total duration for which Ashe is poisoned and other is to keep track of the time upto which Ashe will be poisoned. Whenever you arrive at a time point you check if the time upto which Ashe is poisoned right now is less than or more than current time point. If less then update it to curr_timepoint + duration and increment the total duration by amount duration. Otherwise increment with suitable number(can be seen below) :).\\n\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size() == 0) return 0;\\n        int time_till_infected = timeSeries[0] + duration;\\n        int ans = duration;\\n        for(int i = 1; i < timeSeries.size(); i++){\\n            if(time_till_infected <= timeSeries[i]){\\n                ans += duration;\\n                time_till_infected = timeSeries[i] + duration;\\n            }\\n            else{\\n                ans += (duration - (time_till_infected - timeSeries[i]));\\n                time_till_infected = timeSeries[i] + duration;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size() == 0) return 0;\\n        int time_till_infected = timeSeries[0] + duration;\\n        int ans = duration;\\n        for(int i = 1; i < timeSeries.size(); i++){\\n            if(time_till_infected <= timeSeries[i]){\\n                ans += duration;\\n                time_till_infected = timeSeries[i] + duration;\\n            }\\n            else{\\n                ans += (duration - (time_till_infected - timeSeries[i]));\\n                time_till_infected = timeSeries[i] + duration;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 401703,
                "title": "easiest-cpp-code-easy-to-understand",
                "content": "```\\n int findPoisonedDuration(vector<int>& time, int dur) {\\n        if(time.size()<1) return 0;\\n        int diff=0;\\n        int sum=dur;\\n        for(int i=1;i<time.size();i++)\\n        {\\n            diff = time[i] - time[i-1];\\n            if(diff>=dur)\\n            {\\n                sum+=dur;    \\n            }\\n            else\\n            {\\n                sum+=diff;\\n            }\\n                \\n        }\\n        return sum;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n int findPoisonedDuration(vector<int>& time, int dur) {\\n        if(time.size()<1) return 0;\\n        int diff=0;\\n        int sum=dur;\\n        for(int i=1;i<time.size();i++)\\n        {\\n            diff = time[i] - time[i-1];\\n            if(diff>=dur)\\n            {\\n                sum+=dur;    \\n            }\\n            else\\n            {\\n                sum+=diff;\\n            }\\n                \\n        }\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 306546,
                "title": "1-line-python",
                "content": "```python\\nclass Solution:\\n    def findPoisonedDuration(self, t: List[int], d: int) -> int:\\n        return len(t) and sum(min(t[i] - t[i-1], d) for i in range(1, len(t))) + d\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def findPoisonedDuration(self, t: List[int], d: int) -> int:\\n        return len(t) and sum(min(t[i] - t[i-1], d) for i in range(1, len(t))) + d\\n```",
                "codeTag": "Java"
            },
            {
                "id": 305900,
                "title": "is-it-funny",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res = 0;\\n        for(int i=1; i<timeSeries.size(); ++i)\\n            res += min(timeSeries[i]-timeSeries[i-1], duration);\\n        return 0 == timeSeries.size() ? res : res+duration;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res = 0;\\n        for(int i=1; i<timeSeries.size(); ++i)\\n            res += min(timeSeries[i]-timeSeries[i-1], duration);\\n        return 0 == timeSeries.size() ? res : res+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 97550,
                "title": "c-version-using-lower-bound-o-lgn",
                "content": "Not an elegant one.\\nBut we can ignore some point during the poisoning time.\\nCan someone confirm whether this is an O(lgN) algorithm or not?\\n\\n```\\nint findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res = 0;\\n        for(auto it = timeSeries.begin(); it != timeSeries.end(); ) {\\n            auto e = lower_bound(it + 1, timeSeries.end(), *it + duration);\\n            if(e == timeSeries.end()) {\\n                res += duration + *(e - 1) - *it;\\n                break;\\n            }\\n            else if(*e == *it + duration) {\\n                it = e;\\n                res += duration;\\n            }\\n            else {\\n                if((e - 1) == it) {\\n                    it = e;\\n                    res += duration;\\n                }\\n                else {\\n                    res += *(e - 1) - *it;\\n                    it = e - 1;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res = 0;\\n        for(auto it = timeSeries.begin(); it != timeSeries.end(); ) {\\n            auto e = lower_bound(it + 1, timeSeries.end(), *it + duration);\\n            if(e == timeSeries.end()) {\\n                res += duration + *(e - 1) - *it;\\n                break;\\n            }\\n            else if(*e == *it + duration) {\\n                it = e;\\n                res += duration;\\n            }\\n            else {\\n                if((e - 1) == it) {\\n                    it = e;\\n                    res += duration;\\n                }\\n                else {\\n                    res += *(e - 1) - *it;\\n                    it = e - 1;\\n                }\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 97567,
                "title": "3-liner-very-short-c-o-n-time-o-1-space-only-count-increments-with-explanation",
                "content": "This is actually a very easy problem covered by a gaming story.\\n\\n**Key Observation:** The extra poison duration caused by an attack at time point `t[i]` is either the full `duration` or time increment `t[i]-t[i-1]`, whichever is smaller. \\n\\nSo the algorithm will become very straightforward.\\n```\\n    int findPoisonedDuration(vector<int>& t, int duration) {\\n      int res = t.empty()? 0 : duration;\\n      for (int i = 1; i < t.size(); ++i) res += min(t[i]-t[i-1], duration);\\n      return res;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "Array"
                ],
                "code": "```\\n    int findPoisonedDuration(vector<int>& t, int duration) {\\n      int res = t.empty()? 0 : duration;\\n      for (int i = 1; i < t.size(); ++i) res += min(t[i]-t[i-1], duration);\\n      return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3884545,
                "title": "495-teemo-attacking-javascript-solution-with-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\n /**\\n if timeSeries[i]\\u2212timeSeries[i\\u22121]>duration, it means the previous poison\\n effect ends, the poisoned time for the previous attack is duration;\\n if not, which means the poison effect not ends, still poisoned, \\n the posisoned time for the previous attack is:\\n timeSeries[i]\\u2212timeSeries[i\\u22121];\\n  \\n We need to go through the array from index =1, \\nbecause we need to check if the previous poison effect ends or not.\\n Tips: We don\\'t add the last poison effect duration, so we need to add it\\nafter the for loop.\\n\\n  */\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    let poison = 0;\\n    if(!duration||!timeSeries.length) return 0;\\n    for(let i=1;i<timeSeries.length;i++) {\\n        if(timeSeries[i]-timeSeries[i-1]>duration) {\\n            poison+=duration;\\n        }\\n        else {\\n            let exist=timeSeries[i]-timeSeries[i-1];\\n            poison+=exist;\\n        }        \\n    }\\n     poison+=duration;\\n    return poison;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} timeSeries\\n * @param {number} duration\\n * @return {number}\\n */\\n /**\\n if timeSeries[i]\\u2212timeSeries[i\\u22121]>duration, it means the previous poison\\n effect ends, the poisoned time for the previous attack is duration;\\n if not, which means the poison effect not ends, still poisoned, \\n the posisoned time for the previous attack is:\\n timeSeries[i]\\u2212timeSeries[i\\u22121];\\n  \\n We need to go through the array from index =1, \\nbecause we need to check if the previous poison effect ends or not.\\n Tips: We don\\'t add the last poison effect duration, so we need to add it\\nafter the for loop.\\n\\n  */\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    let poison = 0;\\n    if(!duration||!timeSeries.length) return 0;\\n    for(let i=1;i<timeSeries.length;i++) {\\n        if(timeSeries[i]-timeSeries[i-1]>duration) {\\n            poison+=duration;\\n        }\\n        else {\\n            let exist=timeSeries[i]-timeSeries[i-1];\\n            poison+=exist;\\n        }        \\n    }\\n     poison+=duration;\\n    return poison;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3774531,
                "title": "python-easy-solution",
                "content": "# Code\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        tot=0\\n        for i in range(len(timeSeries)-1):\\n            if timeSeries[i+1]-timeSeries[i]>duration:\\n                tot+=duration\\n            else:\\n                tot+=timeSeries[i+1]-timeSeries[i]\\n        return tot+duration\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        tot=0\\n        for i in range(len(timeSeries)-1):\\n            if timeSeries[i+1]-timeSeries[i]>duration:\\n                tot+=duration\\n            else:\\n                tot+=timeSeries[i+1]-timeSeries[i]\\n        return tot+duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3483435,
                "title": "very-easy-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time, int duration) {\\n        int previous = -1;\\n        int answer = 0;\\n\\n        for (int i : time){\\n        \\n            answer += duration;\\n            //checking if the poisoned times are overlapping\\n            if (previous >= i){\\n                //removing the overlapped time from the answer\\n                answer = answer -abs(previous - i) -1; \\n            }\\n            // keeping track of the previous time\\n            previous = i + duration -1;\\n        }\\n        return answer;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time, int duration) {\\n        int previous = -1;\\n        int answer = 0;\\n\\n        for (int i : time){\\n        \\n            answer += duration;\\n            //checking if the poisoned times are overlapping\\n            if (previous >= i){\\n                //removing the overlapped time from the answer\\n                answer = answer -abs(previous - i) -1; \\n            }\\n            // keeping track of the previous time\\n            previous = i + duration -1;\\n        }\\n        return answer;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3437928,
                "title": "easy-c-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans = 0;\\n        int n = timeSeries.size();\\n        for(int i=0;i<n;){\\n            int start = timeSeries[i];\\n            int end = start + duration - 1;\\n            int j = i+1;\\n            while(j < n && timeSeries[j] <= end){\\n                end = timeSeries[j] + duration - 1;\\n                j++;\\n            }\\n            i = j;\\n            ans += (end - start +1);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans = 0;\\n        int n = timeSeries.size();\\n        for(int i=0;i<n;){\\n            int start = timeSeries[i];\\n            int end = start + duration - 1;\\n            int j = i+1;\\n            while(j < n && timeSeries[j] <= end){\\n                end = timeSeries[j] + duration - 1;\\n                j++;\\n            }\\n            i = j;\\n            ans += (end - start +1);\\n        }\\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3405609,
                "title": "c-simple-o-n",
                "content": "```\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        int count = duration;\\n        for(int i = 1; i < timeSeries.Length; i++)\\n        {\\n            var diff = timeSeries[i] - timeSeries[i - 1];\\n            count += duration > diff ? diff : duration;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        int count = duration;\\n        for(int i = 1; i < timeSeries.Length; i++)\\n        {\\n            var diff = timeSeries[i] - timeSeries[i - 1];\\n            count += duration > diff ? diff : duration;\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3177550,
                "title": "java-solution-beginner-one-loop",
                "content": "# Code\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int res = duration;\\n\\n        int prev = timeSeries[0];\\n\\n        for(int i = 1; i<timeSeries.length;i++){\\n            if(timeSeries[i] <= timeSeries[i-1]+duration){\\n                res+=timeSeries[i]-timeSeries[i-1];\\n            } else {\\n                res+=duration;\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int res = duration;\\n\\n        int prev = timeSeries[0];\\n\\n        for(int i = 1; i<timeSeries.length;i++){\\n            if(timeSeries[i] <= timeSeries[i-1]+duration){\\n                res+=timeSeries[i]-timeSeries[i-1];\\n            } else {\\n                res+=duration;\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3175183,
                "title": "simple-kotlin-solution-for-beginners",
                "content": "```\\nclass Solution {\\n    fun findPoisonedDuration(timeSeries: IntArray, duration: Int): Int {\\n        val n = timeSeries.size\\n        var result = 0\\n        for (i in 0..n-2) {\\n            result += minOf(duration, timeSeries[i+1]-timeSeries[i])\\n        }\\n        return result+duration\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin"
                ],
                "code": "```\\nclass Solution {\\n    fun findPoisonedDuration(timeSeries: IntArray, duration: Int): Int {\\n        val n = timeSeries.size\\n        var result = 0\\n        for (i in 0..n-2) {\\n            result += minOf(duration, timeSeries[i+1]-timeSeries[i])\\n        }\\n        return result+duration\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3018241,
                "title": "c",
                "content": "# Intuition\\nrecord timeSeries[i] - timeSeries[i - 1] and final plus final duration\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nuse for loop\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution\\n        {\\n            public int FindPoisonedDuration(int[] timeSeries, int duration)\\n            {\\n                int count = 0;\\n                for(int i = 1; i < timeSeries.Length; i++)\\n                {\\n                    if (timeSeries[i] - timeSeries[i - 1] > duration)\\n                        count += duration;\\n                    else\\n                        count += timeSeries[i] - timeSeries[i - 1];\\n                }\\n                count += duration;\\n                return count;\\n            }\\n        }\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution\\n        {\\n            public int FindPoisonedDuration(int[] timeSeries, int duration)\\n            {\\n                int count = 0;\\n                for(int i = 1; i < timeSeries.Length; i++)\\n                {\\n                    if (timeSeries[i] - timeSeries[i - 1] > duration)\\n                        count += duration;\\n                    else\\n                        count += timeSeries[i] - timeSeries[i - 1];\\n                }\\n                count += duration;\\n                return count;\\n            }\\n        }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3016410,
                "title": "python-fast-solution-beats-99",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        time_under_poison = 0\\n        last_time = timeSeries[0]\\n        \\n        for time in timeSeries[1:]:\\n            if last_time + duration - 1 < time:\\n                time_under_poison += duration\\n\\n            else:\\n                time_under_poison += time-last_time\\n\\n            last_time = time\\n\\n        time_under_poison += duration\\n\\n        return time_under_poison\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        time_under_poison = 0\\n        last_time = timeSeries[0]\\n        \\n        for time in timeSeries[1:]:\\n            if last_time + duration - 1 < time:\\n                time_under_poison += duration\\n\\n            else:\\n                time_under_poison += time-last_time\\n\\n            last_time = time\\n\\n        time_under_poison += duration\\n\\n        return time_under_poison\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2771291,
                "title": "java-1-line-solution-and-7-line-solution-with-explanantion",
                "content": "if you like it kindly upvote \\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] nums, int d) {\\n        int ans=d;\\n        for(int i=1;i<nums.length;i++){  \\n          if(nums[i-1]+d-1<nums[i]){\\n              ans+=d;// if nothing is common in interval\\n          }else {\\n              ans=ans+nums[i]-nums[i-1];// if common in interval just subtract\\n          } \\n        }\\n        return ans;\\n    }\\n}\\n```\\nnow 1 line solution \\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] nums, int d) {\\n        int ans=d;\\n        for(int i=1;i<nums.length;i++){ ans+=Math.min(d,num[i]-num[i-1];}\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] nums, int d) {\\n        int ans=d;\\n        for(int i=1;i<nums.length;i++){  \\n          if(nums[i-1]+d-1<nums[i]){\\n              ans+=d;// if nothing is common in interval\\n          }else {\\n              ans=ans+nums[i]-nums[i-1];// if common in interval just subtract\\n          } \\n        }\\n        return ans;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] nums, int d) {\\n        int ans=d;\\n        for(int i=1;i<nums.length;i++){ ans+=Math.min(d,num[i]-num[i-1];}\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2749397,
                "title": "c-code-easy-solution",
                "content": "```\\nint findPoisonedDuration(int* timeSeries, int timeSeriesSize, int duration)\\n{\\n    int total = 0;\\n    for(int i = 0; i<timeSeriesSize-1; i++){\\n        if(timeSeries[i] + duration > timeSeries[i+1]) total += timeSeries[i+1] - timeSeries[i];\\n        else total += duration;\\n    }\\n    return total + duration;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nint findPoisonedDuration(int* timeSeries, int timeSeriesSize, int duration)\\n{\\n    int total = 0;\\n    for(int i = 0; i<timeSeriesSize-1; i++){\\n        if(timeSeries[i] + duration > timeSeries[i+1]) total += timeSeries[i+1] - timeSeries[i];\\n        else total += duration;\\n    }\\n    return total + duration;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2679878,
                "title": "c-o-n-1-liner-solution-using-constant-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int d) {\\n        int n = ts.size(),ans = 0;\\n        for(int i = 0;i<n-1;i++)(ts[i+1]<=ts[i]+d-1)? ans+=ts[i+1]-ts[i]: ans +=d;\\n        return ans + d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int d) {\\n        int n = ts.size(),ans = 0;\\n        for(int i = 0;i<n-1;i++)(ts[i+1]<=ts[i]+d-1)? ans+=ts[i+1]-ts[i]: ans +=d;\\n        return ans + d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2636915,
                "title": "simple-java-solution-5-lines-of-code",
                "content": "```class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if(timeSeries.length==0) return 0;\\n        int totalTime = 0;\\n        for(int i=0; i < timeSeries.length-1; i++){\\n            totalTime += Math.min(timeSeries[i+1]-timeSeries[i],duration);\\n        }\\n        return totalTime+duration;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if(timeSeries.length==0) return 0;\\n        int totalTime = 0;\\n        for(int i=0; i < timeSeries.length-1; i++){\\n            totalTime += Math.min(timeSeries[i+1]-timeSeries[i],duration);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2557882,
                "title": "fundamental-approach-c-traversal-trick",
                "content": "\\tclass Solution {\\n\\tpublic:\\n    int findPoisonedDuration(vector<int>& tS, int duration) {\\n        int out = 0;\\n        for(int i=0;i<tS.size()-1;i++) {\\n            if(tS[i] + duration > tS[i+1])\\n                out += tS[i+1] - tS[i];\\n            else\\n                out += duration;\\n        }\\n        return out + duration;\\n    }\\n\\t};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n\\tpublic:\\n    int findPoisonedDuration(vector<int>& tS, int duration) {\\n        int out = 0;\\n        for(int i=0;i<tS.size()-1;i++) {\\n            if(tS[i] + duration > tS[i+1])\\n                out += tS[i+1] - tS[i];\\n            else\\n                out += duration;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2316555,
                "title": "javascript-o-n-solution-with-explanation",
                "content": "Here I am using logic that if two consecutive number diffrence is greater than duration than time Ashe will be poisned wil be duration and if diffrence is less that time Ashe will be poisned is diffrence.\\n\\nI have started the total time from duration because for any attack total time will be at least equal to duration\\n\\n```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    let totalTime=duration\\n    \\n    for(let i=0;i+1<timeSeries.length;i++){\\n        let diff=timeSeries[i+1]-timeSeries[i]\\n        totalTime+= diff>duration ? duration : diff \\n    }\\n    return totalTime\\n    \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar findPoisonedDuration = function(timeSeries, duration) {\\n    let totalTime=duration\\n    \\n    for(let i=0;i+1<timeSeries.length;i++){\\n        let diff=timeSeries[i+1]-timeSeries[i]\\n        totalTime+= diff>duration ? duration : diff \\n    }\\n    return totalTime\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2241928,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0; i<timeSeries.size()-1; i++){\\n            if(timeSeries[i+1]<= timeSeries[i]+duration){\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            }\\n            else{\\n                ans+=duration;\\n            }\\n        }\\n        ans+=duration;\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0; i<timeSeries.size()-1; i++){\\n            if(timeSeries[i+1]<= timeSeries[i]+duration){\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            }\\n            else{\\n                ans+=duration;\\n            }\\n        }\\n        ans+=duration;\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2061261,
                "title": "python-algorithmic-approach",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        tot = 0\\n        for i in range(len(timeSeries)):\\n            ele = timeSeries[i] + duration -1\\n            if i == 0:\\n                tot += duration\\n            else:\\n                if p >= timeSeries[i]:\\n                    tot += ele - p\\n                else:\\n                    tot += duration\\n            p = ele\\n        \\n        return tot\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        tot = 0\\n        for i in range(len(timeSeries)):\\n            ele = timeSeries[i] + duration -1\\n            if i == 0:\\n                tot += duration\\n            else:\\n                if p >= timeSeries[i]:\\n                    tot += ele - p\\n                else:\\n                    tot += duration\\n            p = ele\\n        \\n        return tot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1938236,
                "title": "java-o-n-for-my-fellow-1v9ers",
                "content": "Teemo poison honestly needs a buff next patch.\\n\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int im1v9 = 0;\\n        \\n        for(int i = 0; i < timeSeries.length - 1; i++){\\n            int start = timeSeries[i];\\n            int end = timeSeries[i + 1];\\n            \\n            int inter = end - start;\\n            if(start + duration > end){\\n                im1v9 += inter;\\n            }else{\\n                im1v9 += duration;\\n            }\\n        }\\n        \\n        // add at the end for the last INTer\\n        return im1v9 + duration;\\n    }\\n    \\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int im1v9 = 0;\\n        \\n        for(int i = 0; i < timeSeries.length - 1; i++){\\n            int start = timeSeries[i];\\n            int end = timeSeries[i + 1];\\n            \\n            int inter = end - start;\\n            if(start + duration > end){\\n                im1v9 += inter;\\n            }else{\\n                im1v9 += duration;\\n            }\\n        }\\n        \\n        // add at the end for the last INTer\\n        return im1v9 + duration;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1891221,
                "title": "c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n = timeSeries.size();\\n        int start = timeSeries[0];\\n        int end = timeSeries[0] + duration - 1;\\n        int count = 0;\\n        for(int i=1; i<n; i++)\\n        {\\n            if(end >= timeSeries[i])\\n            {\\n                count += (timeSeries[i] - start);\\n                start = timeSeries[i];\\n                end = timeSeries[i] + duration - 1;\\n            }\\n            else{\\n                count += (end - start + 1);\\n                start = timeSeries[i];\\n                end = timeSeries[i] + duration - 1;\\n            }\\n        }\\n        count += (end - start + 1);\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n = timeSeries.size();\\n        int start = timeSeries[0];\\n        int end = timeSeries[0] + duration - 1;\\n        int count = 0;\\n        for(int i=1; i<n; i++)\\n        {\\n            if(end >= timeSeries[i])\\n            {\\n                count += (timeSeries[i] - start);\\n                start = timeSeries[i];\\n                end = timeSeries[i] + duration - 1;\\n            }\\n            else{\\n                count += (end - start + 1);\\n                start = timeSeries[i];\\n                end = timeSeries[i] + duration - 1;\\n            }\\n        }\\n        count += (end - start + 1);\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1883434,
                "title": "binary-search-c-code-with-comments",
                "content": "Instead of linearly scanning each element we can do a **binary search** for the next time duration where Ashe will definitely not be attacked. Thus **skipping redundant attacks** in between.\\n\\nUsing ```stop = timeSeries[i] + duration - 1;``` we can know the time upto which Ashe will be under attack.\\nUse binary search to find the time where Ashe comes out of this attack, check if the previous attack would have continued this, otherwise add to the total answer and continue after this time.\\n\\n\\n```\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        // special case\\n        if (duration==0)\\n            return 0;\\n        \\n        \\n        auto it = timeSeries.begin();\\n        \\n        while(it!=timeSeries.end())\\n        {\\n            // store the initial attack time\\n            int start = *it;\\n            \\n            // will be used later to check if attack has continued\\n            int p = start;\\n            \\n            //calculate when current attack will finish\\n            int stop = start + duration - 1;\\n            \\n            //binary search to find next time where Ashe will not be under poison\\n            it = upper_bound(it,timeSeries.end(),stop);\\n            it--;\\n            \\n            //check if the previous attack is different and would have continued the poisoned duration\\n            while((*it)!=p && stop >= (*it))\\n            {\\n                p = *it;\\n                \\n                //update to the new end time\\n                stop = p + duration - 1;\\n                it = upper_bound(it,timeSeries.end(),stop);\\n                \\n                if(it==timeSeries.end())\\n                {\\n                    //if condition becomes true then the poisoned duration lasts the whole timeSeries\\n                    //thus update the end time and exit\\n                    it--;\\n                    stop = *it + duration - 1;\\n                    break;\\n                }\\n                it--;               \\n            }\\n            \\n            ans += stop - start + 1;\\n            it++;                      \\n        }\\n        \\n        return ans;\\n    }\\n```\\n\\nUsing binary search will help in cases where the **duration is of large value**, thus skipping redudant attacks.\\nExample: \\n```[3,6,8,12,15,17,22] duration = 20```\\nHere the first attacks **outlasts all other attacks**, thus we immediately skip to the last attack(which is also a continuation of the previous attack).\\nSo we only had to perform two binary search to find the answer.\\n\\nHowever in the **worst case**, where each attack only lasts the current time duration or continues the next one we will have to check each input none the less.\\nExample:\\n``` [1,2,3,4,5,6,7,8,9,10] duration = 2```\\nIn this case each attack continues the next one, thus we will have to perform binary search for all inputs.\\n\\nSimilarly:\\n```[2,7,13,22,33,40] duration = 2```\\nIn this case none of the attacks overlap with one other(there are no redundant attacks). Thus again we have to perform binary search for each input.\\n\\nThus in the **worst case** the time complexity is **O(nlogn)**",
                "solutionTags": [
                    "C",
                    "Binary Search",
                    "Binary Tree"
                ],
                "code": "```stop = timeSeries[i] + duration - 1;```\n```\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        // special case\\n        if (duration==0)\\n            return 0;\\n        \\n        \\n        auto it = timeSeries.begin();\\n        \\n        while(it!=timeSeries.end())\\n        {\\n            // store the initial attack time\\n            int start = *it;\\n            \\n            // will be used later to check if attack has continued\\n            int p = start;\\n            \\n            //calculate when current attack will finish\\n            int stop = start + duration - 1;\\n            \\n            //binary search to find next time where Ashe will not be under poison\\n            it = upper_bound(it,timeSeries.end(),stop);\\n            it--;\\n            \\n            //check if the previous attack is different and would have continued the poisoned duration\\n            while((*it)!=p && stop >= (*it))\\n            {\\n                p = *it;\\n                \\n                //update to the new end time\\n                stop = p + duration - 1;\\n                it = upper_bound(it,timeSeries.end(),stop);\\n                \\n                if(it==timeSeries.end())\\n                {\\n                    //if condition becomes true then the poisoned duration lasts the whole timeSeries\\n                    //thus update the end time and exit\\n                    it--;\\n                    stop = *it + duration - 1;\\n                    break;\\n                }\\n                it--;               \\n            }\\n            \\n            ans += stop - start + 1;\\n            it++;                      \\n        }\\n        \\n        return ans;\\n    }\\n```\n```[3,6,8,12,15,17,22] duration = 20```\n``` [1,2,3,4,5,6,7,8,9,10] duration = 2```\n```[2,7,13,22,33,40] duration = 2```",
                "codeTag": "Unknown"
            },
            {
                "id": 1840130,
                "title": "faster-than-73-53-of-typescript-online-submissions-for-teemo-attacking",
                "content": "```\\n\\tlet result: number = 0;\\n    // previous elements\\n    for (var i=0; i< timeSeries.length - 1; i++) {\\n        if (timeSeries[i] + duration < timeSeries[i+1])\\n            result += duration; \\n        else\\n            result += timeSeries[i+1] - timeSeries[i];\\n    }    \\n    //last element\\n    result += duration;\\n    return result;",
                "solutionTags": [],
                "code": "```\\n\\tlet result: number = 0;\\n    // previous elements\\n    for (var i=0; i< timeSeries.length - 1; i++) {\\n        if (timeSeries[i] + duration < timeSeries[i+1])\\n            result += duration; \\n        else\\n            result += timeSeries[i+1] - timeSeries[i];\\n    }    \\n    //last element\\n    result += duration;\\n    return result;",
                "codeTag": "Unknown"
            },
            {
                "id": 1787280,
                "title": "java-1-liner-explained",
                "content": "**Idea:**\\n* An attack\\'s effect ends at `t = timeSeries[i] + duration - 1` seconds, so if the next attack is after t, then entire duration is counted\\n* Else `timeSeries[i + 1] - timeSeries[i]` is counted\\n* The final attack lasts for full duration\\n>**T/S:** O(n)/O(1)\\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tvar poisoned = 0;\\n\\tfor (var i = 0; i + 1 < timeSeries.length; i++)\\n\\t\\tif (timeSeries[i] + duration - 1 < timeSeries[i + 1])\\n\\t\\t\\tpoisoned += duration;\\n\\t\\telse\\n\\t\\t\\tpoisoned += timeSeries[i + 1] - timeSeries[i];\\n\\t\\t\\t\\n\\treturn poisoned + duration;\\n}\\n```\\n**Version 2:** The above can be simplified to:\\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tvar poisoned = duration;\\n\\t\\n\\tfor (var i = 0; i + 1 < timeSeries.length; i++)\\n\\t\\tpoisoned += Math.min(duration, timeSeries[i + 1] - timeSeries[i]);\\n\\t\\n\\treturn poisoned;\\n}\\n```\\n**Version 2:** Java 1 liner using streams\\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\treturn duration + IntStream.iterate(0, i -> i + 1 < timeSeries.length, i -> i + 1)\\n\\t\\t\\t\\t\\t\\t\\t   .map(i -> Math.min(duration, timeSeries[i + 1] - timeSeries[i]))\\n\\t\\t\\t\\t\\t\\t\\t   .sum();\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tvar poisoned = 0;\\n\\tfor (var i = 0; i + 1 < timeSeries.length; i++)\\n\\t\\tif (timeSeries[i] + duration - 1 < timeSeries[i + 1])\\n\\t\\t\\tpoisoned += duration;\\n\\t\\telse\\n\\t\\t\\tpoisoned += timeSeries[i + 1] - timeSeries[i];\\n\\t\\t\\t\\n\\treturn poisoned + duration;\\n}\\n```\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tvar poisoned = duration;\\n\\t\\n\\tfor (var i = 0; i + 1 < timeSeries.length; i++)\\n\\t\\tpoisoned += Math.min(duration, timeSeries[i + 1] - timeSeries[i]);\\n\\t\\n\\treturn poisoned;\\n}\\n```\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\treturn duration + IntStream.iterate(0, i -> i + 1 < timeSeries.length, i -> i + 1)\\n\\t\\t\\t\\t\\t\\t\\t   .map(i -> Math.min(duration, timeSeries[i + 1] - timeSeries[i]))\\n\\t\\t\\t\\t\\t\\t\\t   .sum();\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1766315,
                "title": "o-n-c-solution",
                "content": "Result will always have at least duration, cause last element of array add duration one time.\\n\\n\\n```\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        var result = duration;\\n        \\n        for (var i = 0; i < timeSeries.Length - 1; i++)\\n        {\\n            if(timeSeries[i] + duration > timeSeries[i+1])\\n                result += timeSeries[i+1] - timeSeries[i];\\n            else\\n                result += duration;\\n        }\\n        \\n        return result;\\n    }\\n}",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        var result = duration;\\n        \\n        for (var i = 0; i < timeSeries.Length - 1; i++)\\n        {\\n            if(timeSeries[i] + duration > timeSeries[i+1])\\n                result += timeSeries[i+1] - timeSeries[i];\\n            else\\n                result += duration;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1736582,
                "title": "java-very-easy-solution-with-o-n-solution",
                "content": "public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int cnt = 0;\\n        for (int i=0;i<timeSeries.length-1;i++)\\n        {\\n            if (timeSeries[i] + duration -1 < timeSeries[i+1])\\n            {\\n                cnt+=duration;\\n            }\\n            else {\\n                cnt+=timeSeries[i+1]-timeSeries[i];\\n            }\\n        }\\n\\t\\t//for last element of timeSeries\\n        cnt+= duration;\\n        return cnt;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int cnt = 0;\\n        for (int i=0;i<timeSeries.length-1;i++)\\n        {\\n            if (timeSeries[i] + duration -1 < timeSeries[i+1])\\n            {\\n                cnt+=duration;\\n            }\\n            else {\\n                cnt+=timeSeries[i+1]-timeSeries[i];\\n            }\\n        }\\n\\t\\t//for last element of timeSeries\\n        cnt+= duration;\\n        return cnt;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1721131,
                "title": "add-min-of-duration-and-time-difference",
                "content": "```\\nint findPoisonedDuration(vector<int>& t, int d) {\\n        int ans=d,e=t[0]+d-1;\\n        for(int i=1;i<t.size();i++){\\n            if(e<t[i]){\\n                ans+=(d);\\n            }else{\\n                ans+=(d -(e-t[i]+1));\\n            }\\n            e=t[i]+d-1;\\n            cout<<ans<<\\' \\';\\n        }\\n        cout<<endl;\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint findPoisonedDuration(vector<int>& t, int d) {\\n        int ans=d,e=t[0]+d-1;\\n        for(int i=1;i<t.size();i++){\\n            if(e<t[i]){\\n                ans+=(d);\\n            }else{\\n                ans+=(d -(e-t[i]+1));\\n            }\\n            e=t[i]+d-1;\\n            cout<<ans<<\\' \\';\\n        }\\n        cout<<endl;\\n        return ans;\\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1639258,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++){\\n            ans += min(duration,timeSeries[i+1]-timeSeries[i]);\\n        }\\n        ans += duration; //effect by last poison\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++){\\n            ans += min(duration,timeSeries[i+1]-timeSeries[i]);\\n        }\\n        ans += duration; //effect by last poison\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1627638,
                "title": "java-o-n-solution-explained",
                "content": "Please upvote if you find it useful :) \\n\\n```\\n\\n/* \\nIterate through timeSeries, and check if the current index endTime (duration + timeSeries[i]),\\nis less than the next timeSeries (timeSeries[i+1]). \\n\\nIf it is:\\nit means we can add the full duration for the current index (timeSeries[i]),\\n\\nif it\\'s not (meaning if it\\'s greater than or equal to the next timeSeries (timeSeries[i+1])):\\nthat means we have to add the difference in time between both timeSeries(timeSeries[i + 1] - timeSeries[i]).\\n\\nThe last index always has the total duration, so we just add that at the end;\\n*/\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) { \\n        int totalTime = 0;\\n\\t\\t\\n        for(int i = 0; i < timeSeries.length - 1; i++) {\\n            if(timeSeries[i] + duration < timeSeries[i+1]) {\\n                totalTime += duration;\\n            } else {\\n                totalTime += timeSeries[i + 1] - timeSeries[i];\\n            }        \\n        }\\n        \\n        totalTime += duration;\\n\\t\\t\\n        return totalTime\\n  \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n\\n/* \\nIterate through timeSeries, and check if the current index endTime (duration + timeSeries[i]),\\nis less than the next timeSeries (timeSeries[i+1]). \\n\\nIf it is:\\nit means we can add the full duration for the current index (timeSeries[i]),\\n\\nif it\\'s not (meaning if it\\'s greater than or equal to the next timeSeries (timeSeries[i+1])):\\nthat means we have to add the difference in time between both timeSeries(timeSeries[i + 1] - timeSeries[i]).\\n\\nThe last index always has the total duration, so we just add that at the end;\\n*/\\n\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) { \\n        int totalTime = 0;\\n\\t\\t\\n        for(int i = 0; i < timeSeries.length - 1; i++) {\\n            if(timeSeries[i] + duration < timeSeries[i+1]) {\\n                totalTime += duration;\\n            } else {\\n                totalTime += timeSeries[i + 1] - timeSeries[i];\\n            }        \\n        }\\n        \\n        totalTime += duration;\\n\\t\\t\\n        return totalTime\\n  \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1623129,
                "title": "c-easy-and-fast-o-n-tc-constant-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int time = 0;\\n        int n = timeSeries.size();\\n        time += duration;\\n        for(int i=1;i<n;i++){\\n            if(timeSeries[i]-timeSeries[i-1]>= duration) time += duration;\\n            else{\\n                time += timeSeries[i]-timeSeries[i-1];\\n            }\\n        }\\n        return time;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int time = 0;\\n        int n = timeSeries.size();\\n        time += duration;\\n        for(int i=1;i<n;i++){\\n            if(timeSeries[i]-timeSeries[i-1]>= duration) time += duration;\\n            else{\\n                time += timeSeries[i]-timeSeries[i-1];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1546309,
                "title": "java-solution-beats-100-o-n",
                "content": "Idea: \\n- Use all of the duration if the next attack does not reset the timer on the current attack.\\n- Otherwise, use up nextAttack - currentAttack amount of time\\n- Note: Make sure to add the rest of the duration after the very last attack\\n\\n\\n```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int answer = 0;\\n        for (int i = 0; i < timeSeries.length - 1; i++) {\\n            if (duration + timeSeries[i] <= timeSeries[i + 1]) {\\n                answer += duration;\\n            } else {\\n                answer += (timeSeries[i + 1] - timeSeries[i]);\\n            }\\n        }\\n        \\n        return answer + duration;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int answer = 0;\\n        for (int i = 0; i < timeSeries.length - 1; i++) {\\n            if (duration + timeSeries[i] <= timeSeries[i + 1]) {\\n                answer += duration;\\n            } else {\\n                answer += (timeSeries[i + 1] - timeSeries[i]);\\n            }\\n        }\\n        \\n        return answer + duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1530146,
                "title": "java-o-n-v-easy",
                "content": "\\'\\'\\'\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) \\n    {\\n        int res=0,prev=0;\\n        for(int i=1;i<timeSeries.length;i++)\\n        {\\n            prev=duration+timeSeries[i-1];\\n            \\n            if(prev>timeSeries[i])\\n                res+=(timeSeries[i]-timeSeries[i-1]);\\n            else\\n            {\\n                res+=duration;\\n            }\\n        }\\n        return res+duration;\\n    }\\n}\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) \\n    {\\n        int res=0,prev=0;\\n        for(int i=1;i<timeSeries.length;i++)\\n        {\\n            prev=duration+timeSeries[i-1];\\n            \\n            if(prev>timeSeries[i])\\n                res+=(timeSeries[i]-timeSeries[i-1]);\\n            else\\n            {\\n                res+=duration;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1521598,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& arr, int duration) \\n    {\\n        int size=arr.size();\\n        int answer=0;\\n        for(int i=0;i<size-1;i++)\\n        {\\n            if(arr[i+1]-arr[i]<duration)\\n            {\\n                answer=answer+arr[i+1]-arr[i];\\n            }\\n            else\\n            {\\n                answer=answer+duration;\\n            }\\n        }\\n        answer=answer+duration;\\n        return answer;\\n        \\n        \\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& arr, int duration) \\n    {\\n        int size=arr.size();\\n        int answer=0;\\n        for(int i=0;i<size-1;i++)\\n        {\\n            if(arr[i+1]-arr[i]<duration)\\n            {\\n                answer=answer+arr[i+1]-arr[i];\\n            }\\n            else\\n            {\\n                answer=answer+duration;\\n            }\\n        }\\n        answer=answer+duration;\\n        return answer;\\n        \\n        \\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1512162,
                "title": "c-easy-concise-solution-teemo-attacking",
                "content": "If difference between time in series is less than duration then add the difference else add the full duration.\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n = timeSeries.size() - 1;\\n        int total = 0;\\n        \\n        for(int i = 0; i<n; ++i){\\n            int timeDiff = timeSeries[i+1] - timeSeries[i];\\n            total += timeDiff < duration ? timeDiff : duration;\\n        }\\n        \\n        total += duration;\\n        return total;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int n = timeSeries.size() - 1;\\n        int total = 0;\\n        \\n        for(int i = 0; i<n; ++i){\\n            int timeDiff = timeSeries[i+1] - timeSeries[i];\\n            total += timeDiff < duration ? timeDiff : duration;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1512161,
                "title": "java-faster-than-100-well-explained-short-and-easy-solution",
                "content": "`````\\npublic  int findPoisonedDuration(int[] timeSeries, int duration) {\\n        // the result of total time infected\\n        int totalInfectedDuration=0;\\n        //iterate over the given timeSeries\\n        //have 2 pointers i,j where j=i+1\\n        for(int i=0,j=1;j<timeSeries.length;i++,j++){\\n            //if difference of timeSeries[j]-timeSeries[i] is less than or equal to duration\\n            // then just add the difference to totalInfectedDuration.\\n            //it means the timeSeries[j] has interrupted the poison duration of timeSeries[i]\\n           if(timeSeries[j]-timeSeries[i]<=duration)\\n               totalInfectedDuration+=timeSeries[j]-timeSeries[i];\\n           else// else if duration is less than difference then just add the duration to totalInfectedDuration\\n               totalInfectedDuration+=duration;\\n        }\\n        //before returning add the duration time to totalInfectedDuration\\n        //this is for the last encountered input in timeSeries.\\n        return  totalInfectedDuration+=duration;\\n    }",
                "solutionTags": [],
                "code": "`````\\npublic  int findPoisonedDuration(int[] timeSeries, int duration) {\\n        // the result of total time infected\\n        int totalInfectedDuration=0;\\n        //iterate over the given timeSeries\\n        //have 2 pointers i,j where j=i+1\\n        for(int i=0,j=1;j<timeSeries.length;i++,j++){\\n            //if difference of timeSeries[j]-timeSeries[i] is less than or equal to duration\\n            // then just add the difference to totalInfectedDuration.\\n            //it means the timeSeries[j] has interrupted the poison duration of timeSeries[i]\\n           if(timeSeries[j]-timeSeries[i]<=duration)\\n               totalInfectedDuration+=timeSeries[j]-timeSeries[i];\\n           else// else if duration is less than difference then just add the duration to totalInfectedDuration\\n               totalInfectedDuration+=duration;\\n        }\\n        //before returning add the duration time to totalInfectedDuration\\n        //this is for the last encountered input in timeSeries.\\n        return  totalInfectedDuration+=duration;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1473999,
                "title": "most-easy-solution-c-with-intusion-o-n",
                "content": "1.if  next poision start after finising the first it mean first posion will be for whole time duraion\\n2.   MEANS NOOVERLAP\\n3.   if overlap than we  subtact the time which is common   \\n   \\n   \\n      int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int end=0, ans=0;\\n        for(int t:timeSeries)\\n        {\\n            if(end<=t) ans+=duration;\\n            else ans+=t+duration-end;\\n            end=t+duration;\\n        }\\n        return ans;\\n        \\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "1.if  next poision start after finising the first it mean first posion will be for whole time duraion\\n2.   MEANS NOOVERLAP\\n3.   if overlap than we  subtact the time which is common   \\n   \\n   \\n      int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int end=0, ans=0;\\n        for(int t:timeSeries)\\n        {\\n            if(end<=t) ans+=duration;\\n            else ans+=t+duration-end;\\n            end=t+duration;\\n        }\\n        return ans;\\n        \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1446466,
                "title": "java-1-ms-faster-than-100-00",
                "content": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tif (duration == 0) {\\n\\t\\treturn 0;\\n\\t}\\n\\tint total = 0;\\n\\tfor (int i = 0; i < timeSeries.length - 1; i++) {\\n\\t\\ttotal += Math.min(timeSeries[i+1] - timeSeries[i], duration);\\n\\t}\\n\\treturn total + duration;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n\\tif (duration == 0) {\\n\\t\\treturn 0;\\n\\t}\\n\\tint total = 0;\\n\\tfor (int i = 0; i < timeSeries.length - 1; i++) {\\n\\t\\ttotal += Math.min(timeSeries[i+1] - timeSeries[i], duration);\\n\\t}\\n\\treturn total + duration;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1440448,
                "title": "96-faster-c-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int sum=0;\\n        \\n        for(int i=1;i<timeSeries.size();i++)\\n        {\\n            int t=timeSeries[i]-timeSeries[i-1];\\n            if(t>duration)\\n                sum+=duration;\\n            else sum+=t;\\n        }\\n        return sum+duration;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        int sum=0;\\n        \\n        for(int i=1;i<timeSeries.size();i++)\\n        {\\n            int t=timeSeries[i]-timeSeries[i-1];\\n            if(t>duration)\\n                sum+=duration;\\n            else sum+=t;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1423974,
                "title": "python3-easy-solution",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res, curr = 0, 0\\n        for i, t in enumerate(timeSeries):\\n            if i > 0 and curr >= t:\\n                res = res - (curr - t + 1)\\n            res += duration\\n            curr = t + duration - 1\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res, curr = 0, 0\\n        for i, t in enumerate(timeSeries):\\n            if i > 0 and curr >= t:\\n                res = res - (curr - t + 1)\\n            res += duration\\n            curr = t + duration - 1\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1284170,
                "title": "logical-c-solution",
                "content": "```cpp\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res=0;\\n        int time_till_poison=0;\\n        for(int i = 0; i < timeSeries.size()-1; i++)\\n        {\\n            time_till_poison = timeSeries[i] + duration - 1;\\n            if(time_till_poison < timeSeries[i+1])\\n                res += duration;\\n            else\\n                res += timeSeries[i+1] - timeSeries[i];\\n        }\\n        res += duration;\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int res=0;\\n        int time_till_poison=0;\\n        for(int i = 0; i < timeSeries.size()-1; i++)\\n        {\\n            time_till_poison = timeSeries[i] + duration - 1;\\n            if(time_till_poison < timeSeries[i+1])\\n                res += duration;\\n            else\\n                res += timeSeries[i+1] - timeSeries[i];\\n        }\\n        res += duration;\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1243786,
                "title": "declarative-rust-solution-faster-than-100",
                "content": "```\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series[1..]\\n            .iter()\\n            .enumerate()\\n            .map(|(i, x)| duration.min(x - time_series[i]))\\n            .sum::<i32>()\\n            + duration\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series[1..]\\n            .iter()\\n            .enumerate()\\n            .map(|(i, x)| duration.min(x - time_series[i]))\\n            .sum::<i32>()\\n            + duration\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1242543,
                "title": "java-simple-solution",
                "content": "```java\\n// AC: Runtime: 1 ms, faster than 100.00% of Java online submissions for Teemo Attacking.\\n// Memory Usage: 40.8 MB, less than 82.64% of Java online submissions for Teemo Attacking.\\n// .\\n// T:o(n), S:O(1)\\n//\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ret = 0, size = timeSeries.length, lastEnd = -1;\\n        for (int timeSery : timeSeries) {\\n            ret += duration;\\n            if (timeSery <= lastEnd) {\\n                ret -= (lastEnd - timeSery + 1);\\n            }\\n            lastEnd = timeSery + duration - 1;\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\n// AC: Runtime: 1 ms, faster than 100.00% of Java online submissions for Teemo Attacking.\\n// Memory Usage: 40.8 MB, less than 82.64% of Java online submissions for Teemo Attacking.\\n// .\\n// T:o(n), S:O(1)\\n//\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ret = 0, size = timeSeries.length, lastEnd = -1;\\n        for (int timeSery : timeSeries) {\\n            ret += duration;\\n            if (timeSery <= lastEnd) {\\n                ret -= (lastEnd - timeSery + 1);\\n            }\\n            lastEnd = timeSery + duration - 1;\\n        }\\n\\n        return ret;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1226329,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0;i<timeSeries.length-1;i++)\\n        {\\n            int curr = timeSeries[i];\\n            int next = timeSeries[i+1];\\n            if(curr+duration>=next)\\n                ans+=next-curr;\\n            else\\n                ans+=duration;\\n                \\n        }\\n        return ans+duration;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans=0;\\n        for(int i=0;i<timeSeries.length-1;i++)\\n        {\\n            int curr = timeSeries[i];\\n            int next = timeSeries[i+1];\\n            if(curr+duration>=next)\\n                ans+=next-curr;\\n            else\\n                ans+=duration;\\n                \\n        }\\n        return ans+duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1208543,
                "title": "c-solution",
                "content": "\\t\\tint n = timeSeries.size();\\n        if (n == 0) return 0;\\n        int ans=duration;\\n        \\n        for(int i=1;i<timeSeries.size();i++)\\n        {\\n            if(timeSeries[i]<=timeSeries[i-1]+duration-1)\\n                ans += - timeSeries[i-1] + timeSeries[i];\\n            else\\n                ans+=duration;\\n        }\\n        \\n        return ans;",
                "solutionTags": [
                    "C"
                ],
                "code": "\\t\\tint n = timeSeries.size();\\n        if (n == 0) return 0;\\n        int ans=duration;\\n        \\n        for(int i=1;i<timeSeries.size();i++)\\n        {\\n            if(timeSeries[i]<=timeSeries[i-1]+duration-1)\\n                ans += - timeSeries[i-1] + timeSeries[i];\\n            else\\n                ans+=duration;\\n        }\\n        \\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 1182729,
                "title": "my-faster-than-93-python-solution-very-simple",
                "content": "\\'\\'\\'\\n\\t\\n\\tclass Solution:\\n\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\tif not timeSeries:   # constraints said len would be >= 1 but that wasn\\'t true so I added this in\\n\\t\\t\\t\\treturn 0\\n\\n\\n\\t\\t\\ttime_poisoned = 0  # track time poisoned\\n\\t\\t\\tfor i in range(0, len(timeSeries) - 1):  # loop through times except last to avoid index out of range\\n\\t\\t\\t\\tdifference = timeSeries[i + 1] - timeSeries[i]  # larger - smaller gets difference in time\\n\\n\\t\\t\\t\\tif difference >= duration:  # if the times don\\'t overlap just add duration\\n\\t\\t\\t\\t\\ttime_poisoned += duration\\n\\t\\t\\t\\telse:  # if they overlap add the difference between the two times\\n\\t\\t\\t\\t\\ttime_poisoned += difference\\n\\n\\t\\t\\treturn time_poisoned + duration  # add the duration of the last attack wasn\\'t included because of -1 in for loop\\n\\t\\t\\t\\n\\t\\t\\t# if my comments made no sense feel free to ask any questions I will respond\\n\\'\\'\\'",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\'\\'\\'\\n\\t\\n\\tclass Solution:\\n\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\tif not timeSeries:   # constraints said len would be >= 1 but that wasn\\'t true so I added this in\\n\\t\\t\\t\\treturn 0\\n\\n\\n\\t\\t\\ttime_poisoned = 0  # track time poisoned\\n\\t\\t\\tfor i in range(0, len(timeSeries) - 1):  # loop through times except last to avoid index out of range\\n\\t\\t\\t\\tdifference = timeSeries[i + 1] - timeSeries[i]  # larger - smaller gets difference in time\\n\\n\\t\\t\\t\\tif difference >= duration:  # if the times don\\'t overlap just add duration\\n\\t\\t\\t\\t\\ttime_poisoned += duration\\n\\t\\t\\t\\telse:  # if they overlap add the difference between the two times\\n\\t\\t\\t\\t\\ttime_poisoned += difference\\n\\n\\t\\t\\treturn time_poisoned + duration  # add the duration of the last attack wasn\\'t included because of -1 in for loop\\n\\t\\t\\t\\n\\t\\t\\t# if my comments made no sense feel free to ask any questions I will respond\\n\\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 1124257,
                "title": "java-solution-simple-arraylist-manipulation",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int result = 0;\\n        if(timeSeries.length == 0)\\n            return 0;\\n        if(timeSeries.length==1)\\n            return duration;\\n        \\n        for(int i=0;i<timeSeries.length-1;i++)\\n        {\\n            if(timeSeries[i]+duration < timeSeries[i+1])\\n                result = result + duration;\\n            else\\n            {\\n                result = result + (timeSeries[i+1] - timeSeries[i]); //The unit of time that is not overlapping with the next timeSeries alone is added here.\\n            }\\n        }\\n        \\n        //Add the last duration unit as it would be applicable for the last element under everycondition.\\n        return result+duration;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        int result = 0;\\n        if(timeSeries.length == 0)\\n            return 0;\\n        if(timeSeries.length==1)\\n            return duration;\\n        \\n        for(int i=0;i<timeSeries.length-1;i++)\\n        {\\n            if(timeSeries[i]+duration < timeSeries[i+1])\\n                result = result + duration;\\n            else\\n            {\\n                result = result + (timeSeries[i+1] - timeSeries[i]); //The unit of time that is not overlapping with the next timeSeries alone is added here.\\n            }\\n        }\\n        \\n        //Add the last duration unit as it would be applicable for the last element under everycondition.\\n        return result+duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 868510,
                "title": "simplest-basic-and-linear-time-6-liner",
                "content": "We know that the given Timeseries is already sorted so we can have \\nonly 2 cases to calculate the total time duration for which the Ashe will be in \\npoisnous condition for starting n-1 timeSeries values.\\n\\n**Case 1: when the Teemo timing of attack is clashing with next\\ntime of attack**\\n\\n**Case 2: when the Temmo timing of attack is not clashing with \\nnext time of attack**\\n \\n\\nHence by this for case 1, we will just the calculate the total time by\\ncounting the time from current attack to next attack by difference\\nbetween the two and substracting 1 from it (as the starting time is\\nincluded in counted time)\\n\\nwhere as for Case 2, we will just add the duration in the time calculation \\n\\nand eventually for the last time in the timeSeries we will just add the\\nduration the total time calculated till now as it it the last time and no \\ntime will clash with the current last time.\\n\\nHere is the Code of above approach:\\n\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int duration) {\\n        if(ts.size()==0) return 0;\\n        int ans=0,i=0;\\n        for(i=0;i<ts.size()-1;i++)\\n            if( ((duration+ts[i])-1) >= timeSeries[i+1] ) ans+=ts[i+1]-ts[i];\\n            else  ans+=duration;\\n        return ans+duration;\\n    }\\n};\\n```\\n\\n\\nHope you Like it ;)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& ts, int duration) {\\n        if(ts.size()==0) return 0;\\n        int ans=0,i=0;\\n        for(i=0;i<ts.size()-1;i++)\\n            if( ((duration+ts[i])-1) >= timeSeries[i+1] ) ans+=ts[i+1]-ts[i];\\n            else  ans+=duration;\\n        return ans+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866848,
                "title": "java-short-simple",
                "content": "```\\n\\t\\tif(timeSeries.length == 0)\\n            return 0;\\n\\n        int ans = duration;\\n        \\n        for(int i=1;i<timeSeries.length;i++){\\n            ans += (timeSeries[i] + duration) - Math.max(timeSeries[i-1]+duration, timeSeries[i]);\\n        }\\n        \\n        return ans;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\t\\tif(timeSeries.length == 0)\\n            return 0;\\n\\n        int ans = duration;\\n        \\n        for(int i=1;i<timeSeries.length;i++){\\n            ans += (timeSeries[i] + duration) - Math.max(timeSeries[i-1]+duration, timeSeries[i]);\\n        }\\n        \\n        return ans;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 866145,
                "title": "java-teemo-attacking",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries.length==0) return 0;\\n        \\n        int result=0;\\n        \\n        for(int i=1; i<timeSeries.length; i++){\\n            \\n            if(timeSeries[i-1]+duration <= timeSeries[i]) result+=duration;\\n            else{\\n                result+= timeSeries[i] - timeSeries[i-1];\\n            }\\n        }\\n        \\n        result+=duration;\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if(timeSeries.length==0) return 0;\\n        \\n        int result=0;\\n        \\n        for(int i=1; i<timeSeries.length; i++){\\n            \\n            if(timeSeries[i-1]+duration <= timeSeries[i]) result+=duration;\\n            else{\\n                result+= timeSeries[i] - timeSeries[i-1];\\n            }\\n        }\\n        \\n        result+=duration;\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866107,
                "title": "python-linear-time-solution",
                "content": "```py\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries:\\n            return 0\\n\\n        total = 0\\n        \\n        for i in range(len(timeSeries) - 1):\\n            total += min(duration, timeSeries[i + 1] - timeSeries[i])\\n        \\n        return total + duration\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```py\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries:\\n            return 0\\n\\n        total = 0\\n        \\n        for i in range(len(timeSeries) - 1):\\n            total += min(duration, timeSeries[i + 1] - timeSeries[i])\\n        \\n        return total + duration\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866030,
                "title": "c-one-pass-o-n-solution-using-math-min",
                "content": "```cs\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if (timeSeries.Length == 0) {\\n            return 0;\\n        }\\n        if (timeSeries.Length == 1) {\\n            return duration;\\n        }\\n        \\n        int timePoisened = 0;\\n                \\n        for (int i = 0; i < timeSeries.Length - 1; i++) {            \\n            timePoisened += Math.Min(timeSeries[i+1] - timeSeries[i], duration);\\n        }\\n        \\n        return timePoisened + duration;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```cs\\npublic class Solution {\\n    public int FindPoisonedDuration(int[] timeSeries, int duration) {\\n        \\n        if (timeSeries.Length == 0) {\\n            return 0;\\n        }\\n        if (timeSeries.Length == 1) {\\n            return duration;\\n        }\\n        \\n        int timePoisened = 0;\\n                \\n        for (int i = 0; i < timeSeries.Length - 1; i++) {            \\n            timePoisened += Math.Min(timeSeries[i+1] - timeSeries[i], duration);\\n        }\\n        \\n        return timePoisened + duration;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 866026,
                "title": "cute-java-math-min-solution",
                "content": "```\\nclass Solution {\\n   public int findPoisonedDuration(int[] timeSeries, int duration) \\n    {\\n        if(timeSeries.length == 0){return 0;}\\n        if(timeSeries.length == 1){return duration;}\\n       \\n        int total = 0;\\n\\t\\t\\n        for(int i = 0; i < timeSeries.length-1; i++)\\n        {\\n            total+= Math.min(duration, timeSeries[i+1]-timeSeries[i]);\\n        }\\n        \\n        return total+=duration;\\n   }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n   public int findPoisonedDuration(int[] timeSeries, int duration) \\n    {\\n        if(timeSeries.length == 0){return 0;}\\n        if(timeSeries.length == 1){return duration;}\\n       \\n        int total = 0;\\n\\t\\t\\n        for(int i = 0; i < timeSeries.length-1; i++)\\n        {\\n            total+= Math.min(duration, timeSeries[i+1]-timeSeries[i]);\\n        }\\n        \\n        return total+=duration;\\n   }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865887,
                "title": "teemo-attacking-java",
                "content": "```\\nclass Solution \\n{\\n    // Generally I like to add a brief explination as to what I\\'m doing, but today I\\'m just playing\\n    // around.\\n    // \\n    // An explination of this solution will be left as an exercise for the reader.\\n    \\n    public int findPoisonedDuration(int[] t, int d) \\n    {\\n        return t.length == 0 ? 0 : IntStream.range( 0, t.length - 1 ).map( i -> Math.min( t[ i + 1 ] - t[ i ], d ) ).sum() + d;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    // Generally I like to add a brief explination as to what I\\'m doing, but today I\\'m just playing\\n    // around.\\n    // \\n    // An explination of this solution will be left as an exercise for the reader.\\n    \\n    public int findPoisonedDuration(int[] t, int d) \\n    {\\n        return t.length == 0 ? 0 : IntStream.range( 0, t.length - 1 ).map( i -> Math.min( t[ i + 1 ] - t[ i ], d ) ).sum() + d;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865720,
                "title": "no-merge-straightforward-java",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries == null || timeSeries.length == 0) return 0;\\n        \\n        int total = 0;\\n        \\n        for (int i = 0; i < timeSeries.length - 1; i++)\\n        {\\n            total += Math.min(timeSeries[i + 1] - timeSeries[i], duration);\\n        }\\n        \\n        // the last one;\\n        total += duration;\\n        \\n        return total;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        if (timeSeries == null || timeSeries.length == 0) return 0;\\n        \\n        int total = 0;\\n        \\n        for (int i = 0; i < timeSeries.length - 1; i++)\\n        {\\n            total += Math.min(timeSeries[i + 1] - timeSeries[i], duration);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 865500,
                "title": "javascript-python3-c-accumulate-non-overlapping-intervals-i-j",
                "content": "**Synopsis:**\\n\\nAccumulate the sum of non-overlapping intervals `[i..j]` inclusive as the `total` to be returned.\\n\\nLet `A` be the array of time series and `K` be the duration.  For each input start timeslot `i`, calculate the end timeslot `j = i + (K - 1)`, and thus the duration for each interval `[i..j]` inclusive is `j - i + 1`.  Use `hi` to track the next highest timeslot which we can set the next interval\\'s start timeslot `i` to avoid counting overlapping intervals more than once.\\n\\nAn astute observer will notice we don\\'t need to subtract one and then add one, since these operations \"cancel each other out\", thus we can simply omit the `-1` and `+1` to make the code more concise by allowing `j` to be non-inclusive: `[i..j)`, ie. consider each interval from `i` inclusive to `j` non-inclusive.  I wrote the verbose solutions via intervals `[i..j]` inclusive and the concise solutions via intervals `[i..j)` non-inclusive in reverse chronological order below, ie. I derived the concise solutions from the verbose solutions.  \\n\\n---\\n\\n**Concise Solutions:** intervals from `i` inclusive to `j` non-inclusive, ie.`[i..j)`\\n\\n*Javascript*\\n```\\nlet findPoisonedDuration = (A, K, hi = -1, total = 0) => {\\n    for (let x of A) {\\n        let i = Math.max(hi, x),  \\n            j = x + K;\\n        total += j - i;\\n        hi = Math.max(hi, j);\\n    }\\n    return total;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, A: List[int], K: int, hi = -1, total = 0) -> int:\\n        for x in A:\\n            i = max(hi, x)\\n            j = x + K\\n            total += j - i\\n            hi = max(hi, j)\\n        return total\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int findPoisonedDuration(VI& A, int K, int hi = -1, int total = 0) {\\n        for (auto x: A) {\\n            auto i = max(hi, x),\\n                 j = x + K;\\n            total += j - i;\\n            hi = max(hi, j);\\n        }\\n        return total;\\n    }\\n};\\n```\\n\\n---\\n\\n**Verbose Solutions:** intervals from `i` inclusive to `j` inclusive, ie.`[i..j]`\\n\\n*Javascript*\\n```\\nlet findPoisonedDuration = (A, K, hi = -1, total = 0) => {\\n    for (let x of A) {\\n        let i = Math.max(hi, x),  \\n            j = x + K - 1;            // -1 for i..j inclusive\\n        total += j - i + 1;           // +1 for i..j inclusive\\n        hi = Math.max(hi, j + 1);     // +1 to skip past redundant timeslot j\\n    }\\n    return total;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, A: List[int], K: int, hi = -1, total = 0) -> int:\\n        for x in A:\\n            i = max(hi, x)\\n            j = x + K - 1            # -1 for i..j inclusive\\n            total += j - i + 1       # +1 for i..j inclusive\\n            hi = max(hi, j + 1)      # +1 to skip past redundant timeslot j\\n        return total\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int findPoisonedDuration(VI& A, int K, int hi = -1, int total = 0) {\\n        for (auto x: A) {\\n            auto i = max(hi, x),\\n                 j = x + K - 1;     // -1 for i..j inclusive\\n            total += j - i + 1;     // +1 for i..j inclusive\\n            hi = max(hi, j + 1);    // +1 to skip past redundant timeslot j\\n        }\\n        return total;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nlet findPoisonedDuration = (A, K, hi = -1, total = 0) => {\\n    for (let x of A) {\\n        let i = Math.max(hi, x),  \\n            j = x + K;\\n        total += j - i;\\n        hi = Math.max(hi, j);\\n    }\\n    return total;\\n};\\n```\n```\\nclass Solution:\\n    def findPoisonedDuration(self, A: List[int], K: int, hi = -1, total = 0) -> int:\\n        for x in A:\\n            i = max(hi, x)\\n            j = x + K\\n            total += j - i\\n            hi = max(hi, j)\\n        return total\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int findPoisonedDuration(VI& A, int K, int hi = -1, int total = 0) {\\n        for (auto x: A) {\\n            auto i = max(hi, x),\\n                 j = x + K;\\n            total += j - i;\\n            hi = max(hi, j);\\n        }\\n        return total;\\n    }\\n};\\n```\n```\\nlet findPoisonedDuration = (A, K, hi = -1, total = 0) => {\\n    for (let x of A) {\\n        let i = Math.max(hi, x),  \\n            j = x + K - 1;            // -1 for i..j inclusive\\n        total += j - i + 1;           // +1 for i..j inclusive\\n        hi = Math.max(hi, j + 1);     // +1 to skip past redundant timeslot j\\n    }\\n    return total;\\n};\\n```\n```\\nclass Solution:\\n    def findPoisonedDuration(self, A: List[int], K: int, hi = -1, total = 0) -> int:\\n        for x in A:\\n            i = max(hi, x)\\n            j = x + K - 1            # -1 for i..j inclusive\\n            total += j - i + 1       # +1 for i..j inclusive\\n            hi = max(hi, j + 1)      # +1 to skip past redundant timeslot j\\n        return total\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    int findPoisonedDuration(VI& A, int K, int hi = -1, int total = 0) {\\n        for (auto x: A) {\\n            auto i = max(hi, x),\\n                 j = x + K - 1;     // -1 for i..j inclusive\\n            total += j - i + 1;     // +1 for i..j inclusive\\n            hi = max(hi, j + 1);    // +1 to skip past redundant timeslot j\\n        }\\n        return total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865445,
                "title": "c-linq-one-liner",
                "content": "```csharp\\npublic int FindPoisonedDuration(int[] timeSeries, int duration) =>\\n\\ttimeSeries.Zip(timeSeries.Prepend(-duration), (c, p) => Math.Min(duration, c - p)).Sum();\\n```",
                "solutionTags": [],
                "code": "```csharp\\npublic int FindPoisonedDuration(int[] timeSeries, int duration) =>\\n\\ttimeSeries.Zip(timeSeries.Prepend(-duration), (c, p) => Math.Min(duration, c - p)).Sum();\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 865416,
                "title": "php-100-faster-100-space-simple-solution-one-pass-o-n",
                "content": "Runtime: 80 ms, faster than 100.00% of PHP online submissions for Teemo Attacking.\\nMemory Usage: 16.6 MB, less than 100.00% of PHP online submissions for Teemo Attacking.\\n\\n\\tfunction findPoisonedDuration($timeSeries, $duration) {\\n\\t\\t$sum = 0;\\n\\t\\t$last = -INF;\\n\\t\\tforeach ($timeSeries as $t) {\\n\\t\\t\\t$sum += min($t-$last, $duration);\\n\\t\\t\\t$last = $t;\\n\\t\\t}\\n\\t\\treturn  $sum;\\n\\t}\\n\\n",
                "solutionTags": [
                    "PHP"
                ],
                "code": "Runtime: 80 ms, faster than 100.00% of PHP online submissions for Teemo Attacking.\\nMemory Usage: 16.6 MB, less than 100.00% of PHP online submissions for Teemo Attacking.\\n\\n\\tfunction findPoisonedDuration($timeSeries, $duration) {\\n\\t\\t$sum = 0;\\n\\t\\t$last = -INF;\\n\\t\\tforeach ($timeSeries as $t) {\\n\\t\\t\\t$sum += min($t-$last, $duration);\\n\\t\\t\\t$last = $t;\\n\\t\\t}\\n\\t\\treturn  $sum;\\n\\t}\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 865291,
                "title": "teemo-attacking-in-kotlin",
                "content": "```\\nclass Solution {\\n    \\n    fun findPoisonedDuration(timeSeries: IntArray, duration: Int): Int {\\n        val timelines = mutableListOf<Pair<Int, Int>>() // from, to\\n        for (attachedAt in timeSeries) {\\n            if (timelines.isEmpty()) {\\n                timelines.add(Pair(attachedAt, attachedAt + duration - 1))\\n            } else {\\n                val previous = timelines.last()\\n                if (previous.second < attachedAt) {\\n                    timelines.add(Pair(attachedAt, attachedAt + duration - 1))\\n                } else {\\n                    timelines[timelines.lastIndex] = previous.copy(second = attachedAt + duration - 1)\\n                }\\n            }\\n        }\\n\\n        var total = 0\\n        for ((start, end) in timelines) {\\n            total += end - start + 1\\n        }\\n        return total\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    \\n    fun findPoisonedDuration(timeSeries: IntArray, duration: Int): Int {\\n        val timelines = mutableListOf<Pair<Int, Int>>() // from, to\\n        for (attachedAt in timeSeries) {\\n            if (timelines.isEmpty()) {\\n                timelines.add(Pair(attachedAt, attachedAt + duration - 1))\\n            } else {\\n                val previous = timelines.last()\\n                if (previous.second < attachedAt) {\\n                    timelines.add(Pair(attachedAt, attachedAt + duration - 1))\\n                } else {\\n                    timelines[timelines.lastIndex] = previous.copy(second = attachedAt + duration - 1)\\n                }\\n            }\\n        }\\n\\n        var total = 0\\n        for ((start, end) in timelines) {\\n            total += end - start + 1\\n        }\\n        return total\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865273,
                "title": "using-maths-to-handle-merged-intervals",
                "content": "**During a merged Interval the poisioned time = min(next_attack time - prev_attack time, duration)**\\nNow traverse the timeseries & sum up the poisioned time\\n```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0;\\n        if(timeSeries.length == 0) return ans;\\n        for(int i = 1; i < timeSeries.length; i++)\\n            ans += Math.min(timeSeries[i] - timeSeries[i-1], duration);\\n        return ans+duration;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0;\\n        if(timeSeries.length == 0) return ans;\\n        for(int i = 1; i < timeSeries.length; i++)\\n            ans += Math.min(timeSeries[i] - timeSeries[i-1], duration);\\n        return ans+duration;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 865259,
                "title": "teemo-attacking-swift",
                "content": "Swift Solution:\\n\\n    func findPoisonedDuration(_ timeSeries: [Int], _ duration: Int) -> Int {\\n\\t\\tguard !timeSeries.isEmpty else { return 0 }\\n\\t\\tvar result = duration\\n\\t\\tfor i in 1..<timeSeries.count {\\n\\t\\t\\tresult += min((timeSeries[i] - timeSeries[i-1]), duration)\\n\\t\\t}\\n\\t\\treturn result\\n\\t}",
                "solutionTags": [
                    "Swift"
                ],
                "code": "Swift Solution:\\n\\n    func findPoisonedDuration(_ timeSeries: [Int], _ duration: Int) -> Int {\\n\\t\\tguard !timeSeries.isEmpty else { return 0 }\\n\\t\\tvar result = duration\\n\\t\\tfor i in 1..<timeSeries.count {\\n\\t\\t\\tresult += min((timeSeries[i] - timeSeries[i-1]), duration)\\n\\t\\t}\\n\\t\\treturn result\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 865197,
                "title": "c-very-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int range=-1;\\n        int ans=0;\\n        for(auto x:timeSeries)\\n        {\\n            if(x<=range)\\n            ans-=range-x + 1;\\n            \\n            range = x + duration - 1;\\n            ans += duration;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int range=-1;\\n        int ans=0;\\n        for(auto x:timeSeries)\\n        {\\n            if(x<=range)\\n            ans-=range-x + 1;\\n            \\n            range = x + duration - 1;\\n            ans += duration;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865097,
                "title": "rust-stream-solution",
                "content": "```\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series.into_iter()\\n            .scan(0, |hi, t| Some(duration + (t - std::mem::replace(hi, t + duration)).min(0)))\\n            .sum()\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn find_poisoned_duration(time_series: Vec<i32>, duration: i32) -> i32 {\\n        time_series.into_iter()\\n            .scan(0, |hi, t| Some(duration + (t - std::mem::replace(hi, t + duration)).min(0)))\\n            .sum()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 865088,
                "title": "c-very-simple-single-pass-with-brief-explanation",
                "content": "**Brief Explanation**\\nEither the next attack will be after the effect of previous attack fades or the next attack is even before the the effect of the previous attack fades.\\n\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time_series, int duration) {\\n        if (time_series.empty()) return 0;\\n        \\n        auto poisoned_duration = 0;\\n        for (auto i = 0; i < time_series.size() - 1; i++) {\\n            poisoned_duration += min(duration, time_series[i + 1] - time_series[i]);\\n        }\\n        return poisoned_duration + duration;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& time_series, int duration) {\\n        if (time_series.empty()) return 0;\\n        \\n        auto poisoned_duration = 0;\\n        for (auto i = 0; i < time_series.size() - 1; i++) {\\n            poisoned_duration += min(duration, time_series[i + 1] - time_series[i]);\\n        }\\n        return poisoned_duration + duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865076,
                "title": "python3-beats-100",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        old = 0\\n        ans = 0\\n        for i in timeSeries:\\n            if old > i:\\n                ans += i + duration - old    \\n            else:\\n                ans += duration\\n            old = i + duration\\n        return ans",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        old = 0\\n        ans = 0\\n        for i in timeSeries:\\n            if old > i:\\n                ans += i + duration - old    \\n            else:\\n                ans += duration\\n            old = i + duration\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 865065,
                "title": "python-single-loop-checking-each-time-gap",
                "content": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        ans=0\\n        if timeSeries!=[]:\\n            timeSeries.append(timeSeries[-1]+duration)\\n        for j in range(len(timeSeries)-1):\\n            ans+=min(duration,timeSeries[j+1]-timeSeries[j])\\n        return ans",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        ans=0\\n        if timeSeries!=[]:\\n            timeSeries.append(timeSeries[-1]+duration)\\n        for j in range(len(timeSeries)-1):\\n            ans+=min(duration,timeSeries[j+1]-timeSeries[j])\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 865049,
                "title": "c-simple-solution-o-n-with-video-explanation",
                "content": "https://youtu.be/Kdc4kNS3Jyc\\n\\nSingle pass through the array\\n1. Calculate effective duration of each attack using effective start time.\\n2. Removing duplication from each attack duration.\\n```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int poison = 0;\\n        int start = 0;\\n        for (int n: timeSeries) {\\n            start = max(n, start);\\n            poison += duration - (start - n);\\n            start = n + duration;\\n        }\\n        return poison;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        int poison = 0;\\n        int start = 0;\\n        for (int n: timeSeries) {\\n            start = max(n, start);\\n            poison += duration - (start - n);\\n            start = n + duration;\\n        }\\n        return poison;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 865018,
                "title": "java-easy-one-o-n-time",
                "content": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0, lastSec = 0;\\n        for(int time : timeSeries){\\n            ans += duration + (time < lastSec ? time - lastSec : 0);\\n            lastSec = time + duration;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int findPoisonedDuration(int[] timeSeries, int duration) {\\n        int ans = 0, lastSec = 0;\\n        for(int time : timeSeries){\\n            ans += duration + (time < lastSec ? time - lastSec : 0);\\n            lastSec = time + duration;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 864998,
                "title": "very-simple-python-solution-beats-100-time",
                "content": "O(n) Time, O(1) Space\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries:\\n            return 0\\n\\t\\t\\t\\n        prev=timeSeries[0] \\n        poison=duration \\n        \\n        for i in range(1,len(timeSeries)): \\n            \\n            if prev + duration >= timeSeries[i]: \\n                overlap=prev + duration -timeSeries[i] \\n                poison+=duration-overlap\\n            else:\\n                poison+=duration\\n                \\n            prev=timeSeries[i]\\n        return poison        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries:\\n            return 0\\n\\t\\t\\t\\n        prev=timeSeries[0] \\n        poison=duration \\n        \\n        for i in range(1,len(timeSeries)): \\n            \\n            if prev + duration >= timeSeries[i]: \\n                overlap=prev + duration -timeSeries[i] \\n                poison+=duration-overlap\\n            else:\\n                poison+=duration\\n                \\n            prev=timeSeries[i]\\n        return poison        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 864893,
                "title": "teemo-attacking-cpp-beats-98-39-in-runtime",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size()==0)    return 0;   // 0s poision time if teemo doesnt attack\\n        int ans = 0;\\n        for(int i=1; i<timeSeries.size(); i++){\\n            ans+=min(timeSeries[i]-timeSeries[i-1], duration);\\n        }\\n        return ans+duration;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size()==0)    return 0;   // 0s poision time if teemo doesnt attack\\n        int ans = 0;\\n        for(int i=1; i<timeSeries.size(); i++){\\n            ans+=min(timeSeries[i]-timeSeries[i-1], duration);\\n        }\\n        return ans+duration;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 863894,
                "title": "easy-cpp-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size()==0) return 0;\\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++)\\n        {   if((timeSeries[i+1]-timeSeries[i])>=duration) ans+=duration;\\n            else  ans+=timeSeries[i+1]-timeSeries[i];\\n        }\\n        ans+=duration;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        if(timeSeries.size()==0) return 0;\\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++)\\n        {   if((timeSeries[i+1]-timeSeries[i])>=duration) ans+=duration;\\n            else  ans+=timeSeries[i+1]-timeSeries[i];\\n        }\\n        ans+=duration;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 862694,
                "title": "python3-linear-scan",
                "content": "\\n```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries: return 0 # edge case (no attack)\\n        \\n        ans = 0\\n        for i in range(1, len(timeSeries)): \\n            ans += min(timeSeries[i] - timeSeries[i-1], duration)\\n        return ans + duration \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        if not timeSeries: return 0 # edge case (no attack)\\n        \\n        ans = 0\\n        for i in range(1, len(timeSeries)): \\n            ans += min(timeSeries[i] - timeSeries[i-1], duration)\\n        return ans + duration \\n```",
                "codeTag": "Java"
            },
            {
                "id": 764973,
                "title": "simple-mathematical-solution-using-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& arr, int k) {\\n        int count = 0;\\n        if(arr.size() == 0) return 0;\\n        if(arr.size() == 1) return k;\\n        for(int i = 1;i < arr.size();i++){\\n            if(arr[i] - arr[i-1] < k) count += (arr[i] - arr[i-1]);\\n            else count += k;\\n        }\\n        count += k;\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& arr, int k) {\\n        int count = 0;\\n        if(arr.size() == 0) return 0;\\n        if(arr.size() == 1) return k;\\n        for(int i = 1;i < arr.size();i++){\\n            if(arr[i] - arr[i-1] < k) count += (arr[i] - arr[i-1]);\\n            else count += k;\\n        }\\n        count += k;\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 621024,
                "title": "c-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        if(timeSeries.empty())\\n            return 0;\\n        \\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++)\\n        {\\n            if(timeSeries[i+1]-timeSeries[i]<duration)\\n            {\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            }\\n            \\n            else\\n                ans+=duration;\\n        }\\n        \\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int findPoisonedDuration(vector<int>& timeSeries, int duration) {\\n        \\n        if(timeSeries.empty())\\n            return 0;\\n        \\n        int ans=0;\\n        for(int i=0;i<timeSeries.size()-1;i++)\\n        {\\n            if(timeSeries[i+1]-timeSeries[i]<duration)\\n            {\\n                ans+=timeSeries[i+1]-timeSeries[i];\\n            }\\n            \\n            else\\n                ans+=duration;\\n        }\\n        \\n        ans+=duration;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 584751,
                "title": "python-intuitive-solution-one-pass-o-n-time-o-1-space",
                "content": "```python\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res = 0\\n        for i in range(len(timeSeries)):\\n            if not res:\\n                res+=duration\\n            else:\\n                if timeSeries[i-1] + duration < timeSeries[i]:\\n                    res+=duration\\n                else:\\n                    res+= timeSeries[i] - timeSeries[i-1]\\n        return res",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n        res = 0\\n        for i in range(len(timeSeries)):\\n            if not res:\\n                res+=duration\\n            else:\\n                if timeSeries[i-1] + duration < timeSeries[i]:\\n                    res+=duration\\n                else:\\n                    res+= timeSeries[i] - timeSeries[i-1]\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 494149,
                "title": "python-simple-solution-based-on-merge-intervals",
                "content": "```\\ndef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\ttotal = 0; end = -1\\n    for start in timeSeries:\\n\\t\\tif start > end: total += duration\\n        else: total += (start + duration - 1) - end\\n        end = start + duration - 1\\n\\treturn total\\n```",
                "solutionTags": [],
                "code": "```\\ndef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\ttotal = 0; end = -1\\n    for start in timeSeries:\\n\\t\\tif start > end: total += duration\\n        else: total += (start + duration - 1) - end\\n        end = start + duration - 1\\n\\treturn total\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 389456,
                "title": "python3-easy-understanding",
                "content": "\\tclass Solution:\\n\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\tif not timeSeries:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\tif len(timeSeries)==1:\\n\\t\\t\\t\\treturn duration\\n\\t\\t\\ttimeSeries=sorted(timeSeries)\\n\\t\\t\\tres=0\\n\\t\\t\\tfor i in range(1,len(timeSeries)):\\n\\t\\t\\t\\tif timeSeries[i]-timeSeries[i-1]<duration:\\n\\t\\t\\t\\t\\tres+=timeSeries[i]-timeSeries[i-1]\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tres+=duration\\n\\t\\t\\tres+=duration\\n\\t\\t\\treturn res",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef findPoisonedDuration(self, timeSeries: List[int], duration: int) -> int:\\n\\t\\t\\tif not timeSeries:\\n\\t\\t\\t\\treturn 0\\n\\t\\t\\tif len(timeSeries)==1:\\n\\t\\t\\t\\treturn duration\\n\\t\\t\\ttimeSeries=sorted(timeSeries)\\n\\t\\t\\tres=0\\n\\t\\t\\tfor i in range(1,len(timeSeries)):\\n\\t\\t\\t\\tif timeSeries[i]-timeSeries[i-1]<duration:\\n\\t\\t\\t\\t\\tres+=timeSeries[i]-timeSeries[i-1]\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tres+=duration\\n\\t\\t\\tres+=duration\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 316046,
                "title": "python-fuck-teemo-did-it-logic-way-not-the-min-way-76-faster-232-ms",
                "content": "```\\nclass Solution(object):\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        \"\"\"\\n        :type timeSeries: List[int]\\n        :type duration: int\\n        :rtype: int\\n        \"\"\"\\n        if not timeSeries: return 0 \\n        count = 0\\n        prev = None\\n        for i in range(len(timeSeries)):\\n            if prev == None:\\n                count+= duration\\n                prev = timeSeries[i]\\n            else:\\n                #how to add on when repeating\\n                #Want the current duration - the duration that has elapsed\\n                if (timeSeries[i] - prev) < duration:\\n                    count+= duration-(duration - (timeSeries[i] - prev))\\n                    prev = timeSeries[i]\\n                #when current duration is less than the time elapsed add more seconds\\n                elif duration < (timeSeries[i] - prev):\\n                    count+=duration\\n                    prev = timeSeries[i]\\n                #when current duration is equal to the time elapsed add more seconds.\\n                #can add this into the one above\\n                elif duration == (timeSeries[i] - prev):\\n                    count+=duration\\n                    prev = timeSeries[i]\\n        return count\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def findPoisonedDuration(self, timeSeries, duration):\\n        \"\"\"\\n        :type timeSeries: List[int]\\n        :type duration: int\\n        :rtype: int\\n        \"\"\"\\n        if not timeSeries: return 0 \\n        count = 0\\n        prev = None\\n        for i in range(len(timeSeries)):\\n            if prev == None:\\n                count+= duration\\n                prev = timeSeries[i]\\n            else:\\n                #how to add on when repeating\\n                #Want the current duration - the duration that has elapsed\\n                if (timeSeries[i] - prev) < duration:\\n                    count+= duration-(duration - (timeSeries[i] - prev))\\n                    prev = timeSeries[i]\\n                #when current duration is less than the time elapsed add more seconds\\n                elif duration < (timeSeries[i] - prev):\\n                    count+=duration\\n                    prev = timeSeries[i]\\n                #when current duration is equal to the time elapsed add more seconds.\\n                #can add this into the one above\\n                elif duration == (timeSeries[i] - prev):\\n                    count+=duration\\n                    prev = timeSeries[i]\\n        return count\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1574422,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1771754,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1676976,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1570417,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571750,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1574413,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571751,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 2050664,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571752,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 2073473,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1574422,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1771754,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1676976,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1570417,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571750,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1574413,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571751,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 2050664,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1571752,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 2073473,
                "content": [
                    {
                        "username": "dlam26",
                        "content": "this is greatest leetcode question #1 ever xD  \\n\\nI will wear Teemo hat I bought at the 2016 LCS in Los Angeles while doing this problem ^^\\n\\n\\n![image](https://assets.leetcode.com/users/images/410b7881-0864-4de2-b653-f6eff9989c0a_1601347782.0397868.png)\\n"
                    },
                    {
                        "username": "karthikdileep003",
                        "content": "\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28\\uD83E\\uDD28"
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "tf is wrong with you mate?"
                    },
                    {
                        "username": "kurtji9803",
                        "content": "I feel this is very hard, definitely not an easy for me. Probably I should quit coding"
                    },
                    {
                        "username": "avezqureshi14",
                        "content": "bro start doing from this question (this below question is the root of this) and then move forward solving problem from its similar problem section then u will find this question a cake walk https://leetcode.com/problems/merge-intervals/description/ "
                    },
                    {
                        "username": "danek1313",
                        "content": "Sometimes, you read a question and a solution just doesn\\'t pop into your head. That\\'s ok! It\\'s frustrating and demoralizing, especially when we consider that a potential job is on the line. But I promise that if you stick with these problems and keep trying more and more, you\\'ll arrive at a solution more often."
                    },
                    {
                        "username": "sahle123",
                        "content": "We all have weaknesses and we all start somewhere. What matters is that you keep on learning each day. It will take a while, but you will eventually reach a point where this all starts to get easier.\\n\\nI\\'ve been programming for more than a decade now and sometimes I find certain easy problems here on LeetCode to be quite difficult. You should never feel bad. :)"
                    },
                    {
                        "username": "bouzid_kobchi",
                        "content": "never give up bro , we start from zero and we walk a long distance , is not easy to waste all of this ."
                    },
                    {
                        "username": "htwang14",
                        "content": "Captain teemo on duty"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "lol"
                    },
                    {
                        "username": "IlyaAbyzov",
                        "content": "It says that \\n1 <= timeSeries.length <= 104\\nbut during submit there is a check against empty timeSeries"
                    },
                    {
                        "username": "Meeeepo",
                        "content": "Don't know why it is labelled as \"Medium\". Maybe it's a dotaer's joke."
                    },
                    {
                        "username": "return-zero",
                        "content": "I don\\'t play LoL. The problem description makes a key assumption about familiarity with a specific mechanic.\\n\\nWhich made understanding what is being asked more difficult than the solution to the problem. I coudn\\'t even follow the explanation because of one crucial fact not explained. \\n\\nI had to look this up on LoLs wiki page:\\n\"Poisoned targets suffer magic damage for 4 seconds, with subsequent attacks *refreshing* the poison\\'s duration.\"\\n\\nThe refreshing or resetting the status was so essential in getting what is being asked. \\n\\n"
                    },
                    {
                        "username": "dreamchase",
                        "content": "Should be similar difficulty as \"Best Time to Buy and Sell Stock II\".."
                    },
                    {
                        "username": "SSHshadow2222",
                        "content": "Captain Teemo on duty. \\uD83E\\uDEE1"
                    },
                    {
                        "username": "rimpoche",
                        "content": "I went over the question a few times and still could not understand the input and what needs to be done. Can somebody please decode the question in plain english. Thanks"
                    },
                    {
                        "username": "bhupeshmahakhuda025",
                        "content": "HINT:\\n\\nfind gap between each pair of timeSeries, poison is going to be either duration or gap between them(think when to choose what!!).\\n\\nFinally, we can add the duration for the last attack, as there\\'s no overlap with another attack after it.\\n\\nHappy Codding!"
                    }
                ]
            },
            {
                "id": 1771210,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 1572772,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 1569196,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 2077073,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 2076800,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 2064767,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 2051973,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 1988237,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 1966570,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            },
            {
                "id": 1806719,
                "content": [
                    {
                        "username": "bouzid_kobchi",
                        "content": "can any one explain to me what's going on ? "
                    },
                    {
                        "username": "chaitanya12789",
                        "content": "Sorry it was only a comment :)"
                    },
                    {
                        "username": "joshinachiket",
                        "content": "            "
                    },
                    {
                        "username": "jaspier",
                        "content": "That was an interesting one. I did it using a stack. Didn't realize that if the difference of attack times is lower than `duration`, you just compute this difference and sum with is previously stored, otherwise you just sum with the `duration` itself. A simple lack of understanding put me far on the tail of the runtime distribution...\n\nAlso, return only the duration if the timeSeries has only one element was something that I didn't pay attention at first, but it is explicitly stated when you look at the constraints."
                    },
                    {
                        "username": "raaven_4321",
                        "content": "bro that 10^4 sized test case is really annoying -_-"
                    },
                    {
                        "username": "gsahu07",
                        "content": "How come [Merge Intervals](https://leetcode.com/problems/merge-intervals/) is medium but this is easy?"
                    },
                    {
                        "username": "rebirthfox333",
                        "content": "Teemo think it\\'s easy : )))"
                    },
                    {
                        "username": "esmailhamdosh",
                        "content": "why python takes less memory than c++ in this problem\\n"
                    },
                    {
                        "username": "asadbutt_dev",
                        "content": "Hey i solved this question but ineed some help it\\'s not passing testcase 22 because the solution i made is in bf,\\ncan any one help me .\\n:  Js\\nvar findPoisonedDuration = function(t, d) {\\n    let count = 0;\\n    for(let i=0; i<t.length; i++){\\n        let num = t[i]+d-1;\\n        while(num>=t[i+1]){\\n            count++;\\n            num--;\\n        }\\n    }\\n    return (t.length*d)-count;\\n};"
                    },
                    {
                        "username": "prototye",
                        "content": "Is this question designed by Miyazaki from FromSoft?"
                    },
                    {
                        "username": "coder_army",
                        "content": "How to delete stack container which is created by using STL in c++ after using it ?"
                    }
                ]
            }
        ]
    },
    {
        "title": "Big Countries",
        "question_content": "<p>Table: <code>World</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| name        | varchar |\n| continent   | varchar |\n| area        | int     |\n| population  | int     |\n| gdp         | bigint  |\n+-------------+---------+\nname is the primary key (column with unique values) for this table.\nEach row of this table gives information about the name of a country, the continent to which it belongs, its area, the population, and its GDP value.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>A country is <strong>big</strong> if:</p>\n\n<ul>\n\t<li>it has an area of at least&nbsp;three million (i.e., <code>3000000 km<sup>2</sup></code>), or</li>\n\t<li>it has a population of at least&nbsp;twenty-five million (i.e., <code>25000000</code>).</li>\n</ul>\n\n<p>Write a solution to find the name, population, and area of the <strong>big countries</strong>.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nWorld table:\n+-------------+-----------+---------+------------+--------------+\n| name        | continent | area    | population | gdp          |\n+-------------+-----------+---------+------------+--------------+\n| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |\n| Albania     | Europe    | 28748   | 2831741    | 12960000000  |\n| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |\n| Andorra     | Europe    | 468     | 78115      | 3712000000   |\n| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |\n+-------------+-----------+---------+------------+--------------+\n<strong>Output:</strong> \n+-------------+------------+---------+\n| name        | population | area    |\n+-------------+------------+---------+\n| Afghanistan | 25500100   | 652230  |\n| Algeria     | 37100000   | 2381741 |\n+-------------+------------+---------+\n</pre>\n",
        "solutions": [
            {
                "id": 103561,
                "title": "union-and-or-and-the-explanation",
                "content": "Two obvious solutions:\\n```\\n#OR\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000\\n```\\nAnd Faster Union\\n```\\n#Union\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 \\n\\nUNION\\n\\nSELECT name, population, area\\nFROM World\\nWHERE population > 25000000\\n```\\n\\nWhy `Union` is faster than `OR`? \\n\\nStrictly speaking, Using ` UNION` is faster when it comes to cases like **scan two different column like this**. \\n\\n(Of course using `UNION ALL` is much faster than `UNION` since we don't need to sort the result. But it violates the requirements)\\n\\n\\nSuppose we are searching `population` and `area`, Given that MySQL usually uses one one index per table in a given query, so when it uses the 1st index rather than 2nd index, it would still have to do a table-scan to find rows that fit the 2nd index. \\n\\nWhen using `UNION`, each sub-query can use the index of its search, then combine the sub-query by `UNION`.\\n\\n\\nI quote from a [benchmark](http://www.sql-server-performance.com/2011/union-or-sql-server-queries/) about `UNION` and `OR`, feel free to check it out:\\n\\n```\\nScenario 3: Selecting all columns for different fields\\n            CPU      Reads        Duration       Row Counts\\nOR           47       1278           443           1228\\nUNION        31       1334           400           1228\\n\\nScenario 4: Selecting Clustered index columns for different fields\\n            CPU      Reads        Duration       Row Counts\\nOR           0         319           366           1228\\nUNION        0          50           193           1228\\n```",
                "solutionTags": [],
                "code": "```\\n#OR\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000\\n```\n```\\n#Union\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 \\n\\nUNION\\n\\nSELECT name, population, area\\nFROM World\\nWHERE population > 25000000\\n```\n```\\nScenario 3: Selecting all columns for different fields\\n            CPU      Reads        Duration       Row Counts\\nOR           47       1278           443           1228\\nUNION        31       1334           400           1228\\n\\nScenario 4: Selecting Clustered index columns for different fields\\n            CPU      Reads        Duration       Row Counts\\nOR           0         319           366           1228\\nUNION        0          50           193           1228\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3362481,
                "title": "one-line-of-code-using-union-and-or",
                "content": "\\n\\n# 1. Using OR\\n```\\nselect name,population,area from world where (area>=3000000 or population>=25000000)\\n```\\n# 2. Using UNION\\n```\\nselect area,population,name\\nfrom world\\nwhere area>=3000000\\nunion\\nselect area,population,name\\nfrom world\\nwhere population>=25000000\\n\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from world where (area>=3000000 or population>=25000000)\\n```\n```\\nselect area,population,name\\nfrom world\\nwhere area>=3000000\\nunion\\nselect area,population,name\\nfrom world\\nwhere population>=25000000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3848474,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    return world[\\n        (world[\\'area\\'] >= 3_000_000) | \\\\\\n        (world[\\'population\\'] >= 25_000_000)\\n    ][[\\'name\\', \\'population\\', \\'area\\']]\\n```\\n```SQL []\\nSELECT name,\\n       population,\\n       area\\n  FROM World\\n WHERE population >= 25000000\\n    OR area >= 3000000;\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    return world[\\n        (world[\\'area\\'] >= 3_000_000) | \\\\\\n        (world[\\'population\\'] >= 25_000_000)\\n    ][[\\'name\\', \\'population\\', \\'area\\']]\\n```\n```SQL []\\nSELECT name,\\n       population,\\n       area\\n  FROM World\\n WHERE population >= 25000000\\n    OR area >= 3000000;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2190946,
                "title": "simple-mysql-query-easy-to-understand",
                "content": "```\\nselect name, population, area from World where area>=3000000 or population>=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area from World where area>=3000000 or population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3852124,
                "title": "full-explanation-unlike-anyothers-pandas-solution",
                "content": "# Intuition\\nAs a begginer with pandas , I\\'ll try my best to explain it.\\n***So , What is pandas ?*** \\nIt\\'s a data visualization library in python and it\\'s extremley helpful for data science and data analysis .\\n\\n***What is our problem here ?***\\n1. We have 1 table called \"World\"\\n2. 5 rows\\n*We need to return the name , population and area of big countries*\\n\\n\\n***What makes a country Big ?***\\n- if it  has an area of at least three million (i.e., 3000000 km2)\\n- if it has a population of at least twenty-five million (i.e., 25000000).\\n# Lets get started :)\\n\\n# Approach\\n- We first import the pandas library to be able to use it as \\'pd \\'\\n- Define a function called \\'big_countries\\' in which it takes a dataframe called \\'world\\'and must return a dataframe .\\n- Moving on to our third line of code , we create a new dataframe called \\' big_countries_df \\' .\\n- The new dataframe filters our exisiting dataframe \\'world\\' to match our condition of areas and population as follows :\\n\\n```\\nworld[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n```\\n- We then create a results dataframe , which only contains the name , population and area returned .\\n- Finally we return the results dataframe \\n# A QUESTION YOU MIGHT BE ASKING : WHAT\\'S A DATAFRAME ?\\nIn pandas , a dataframe is a datastructure and it\\'s similar to a table in Relational database . If you\\'re comming from SQL Background , you can think of it as a 2-D tabular dara with rows and columns .\\n\\n\\n**Very Important : In pandas we take dataframe as an input and return one as an output , it\\'s very important to remmember this !**\\n\\n\\n\\n\\nNow that\\'s it , hope my explnation was clear enough : )\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n\\n\\n    result_df = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n    return result_df\\n```",
                "solutionTags": [
                    "Brainteaser",
                    "Pandas"
                ],
                "code": "```\\nworld[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n```\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n\\n\\n    result_df = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3848169,
                "title": "simple-two-liner-pandas-code-very-easy-to-understand",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Use boolean indexing to filter the rows where either the \"area\" is greater than or equal to 3 million or the \"population\" is greater than or equal to 25 million.\\n- Select only the columns \"name,\" \"population,\" and \"area\" from the filtered DataFrame.\\n- Return the resulting DataFrame containing the name, population, and area of the big countries.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    return big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n```",
                "solutionTags": [
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    return big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 103567,
                "title": "easy-ac",
                "content": "```\\nSELECT name,population,area \\nFROM World \\nWHERE population>25000000 OR area>3000000;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name,population,area \\nFROM World \\nWHERE population>25000000 OR area>3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1967670,
                "title": "sql-oracle-union-and-or",
                "content": "```\\nIs Union is faster than OR?\\n```\\n\\nUsing UNION is faster in some cases when it comes to cases like scan two different column like this.\\n\\n(Of course using UNION ALL is much faster than UNION since we don\\'t need to sort the result. But it violates the requirements)\\n\\nUnion not always faster than or!\\nMost good DBMSs use an internal query optimizer to combine the SELECT statements\\nbefore they are even processed. In theory, this means that from a performance\\nperspective, there should be no real difference between using multiple WHERE clause\\nconditions or a UNION. I say in theory, because, in practice, most query optimizers\\ndon\\u2019t always do as good a job as they should. Your best bet is to test both methods to\\nsee which will work best for you.\\n\\n```\\n/* Write your PL/SQL query statement below */\\n \\n        -- Approach 01: Using OR Operator\\n SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);\\n \\n \\n            -- Approach 02:  Using UNION Operator --faster than OR\\n SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) \\n \\n UNION\\n\\n SELECT name, population, area\\n FROM World\\n Where (population >=25000000);\\n```\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nIs Union is faster than OR?\\n```\n```\\n/* Write your PL/SQL query statement below */\\n \\n        -- Approach 01: Using OR Operator\\n SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);\\n \\n \\n            -- Approach 02:  Using UNION Operator --faster than OR\\n SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) \\n \\n UNION\\n\\n SELECT name, population, area\\n FROM World\\n Where (population >=25000000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2752052,
                "title": "easiest-mysql-solution-with-explanation",
                "content": "**1. Understanding the Question :**\\n\\nThe question wants us to fetch 3 columns ( name, population, area) from the world table. The condition is to return the rows where the area is atleast 3000000 (which means -  area>=3000000)  and the population is atleast 25000000 (i.e population>=25000000 ).\\n\\n**2. Simply structure the query using SELECT and WHERE keyword.**\\n\\n```\\nSELECT name,population,area FROM world WHERE area>=3000000 OR population>=25000000;\\n```\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT name,population,area FROM world WHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3439077,
                "title": "mysql-simple-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area >= 3000000 OR population >= 25000000;\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area >= 3000000 OR population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2600382,
                "title": "my-solution",
                "content": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1538743,
                "title": "sql-easy-solution",
                "content": "```\\nselect name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```\\n\\n**Like it ? please upvote !**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3845451,
                "title": "beats-91-03-easy-fast-clean-solution-with-detailed-explanation",
                "content": "\\n# Approach\\n1. **Data Creation**: The code starts by creating a pandas DataFrame `world` using the provided data dictionary. The DataFrame consists of columns \\'name\\', \\'continent\\', \\'area\\', \\'population\\', and \\'gdp\\', where each row represents information about a country.\\n\\n2. **Filtering**: The code then filters the DataFrame using boolean indexing. It creates a new DataFrame `big_countries_df`, which contains only the rows that satisfy the specified conditions:\\n   - Rows with an area greater than or equal to 3,000,000 square kilometers (3 million km\\xB2).\\n   - Rows with a population greater than or equal to 25,000,000 people (25 million).\\n\\n3. **Column Selection**: After filtering, the code selects only the \\'name\\', \\'population\\', and \\'area\\' columns from the `big_countries_df`. This creates the final result DataFrame `result_df` containing the name, population, and area of the big countries.\\n\\n4. **Output**: Finally, the code prints the `result_df`, which shows the names, populations, and areas of the countries that meet the criteria for being big.\\n\\nOverall, the code efficiently uses pandas DataFrame operations to filter and select the relevant data, resulting in a concise and readable solution to find the big countries based on the given conditions.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- **Time complexity**:\\n1. DataFrame Creation: The time complexity of creating the pandas DataFrame `world` from the input data dictionary is O(n), where n is the number of rows in the DataFrame. This is because each row\\'s data needs to be processed and inserted into the DataFrame.\\n\\n2. Filtering: The time complexity of the filtering step using boolean indexing is O(n), where n is the number of rows in the DataFrame. This is because it iterates through each row to check the conditions (area >= 3000000 or population >= 25000000) and keeps the rows that satisfy these conditions.\\n\\n3. Column Selection: The time complexity of selecting the \\'name\\', \\'population\\', and \\'area\\' columns from the filtered DataFrame is O(1), as it\\'s a constant-time operation to extract specific columns from the DataFrame.\\n\\n**Overall Time Complexity: O(n)**, where n is the number of rows in the DataFrame.\\n\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- **Space complexity**:\\n1. DataFrame: The space complexity of the `world` DataFrame is O(n), as it stores all the rows of the data.\\n\\n2. Filtering: The space complexity of the `big_countries_df` DataFrame, which contains the filtered rows, is also O(n) as it keeps all the rows that meet the filtering conditions.\\n\\n3. Result DataFrame: The space complexity of the `result_df` DataFrame, which contains the \\'name\\', \\'population\\', and \\'area\\' columns of the big countries, is O(m), where m is the number of big countries (the number of rows that meet the filtering conditions).\\n\\n**Overall Space Complexity: O(n)**, as the space complexity is primarily dominated by the DataFrame storing all the data and the filtered rows.\\n\\nNote: The space complexity does not consider the space taken by temporary variables or data structures used during the intermediate steps, as they usually have constant space requirements and do not grow with the input size.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # Filtering the big countries\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n\\n    # Selecting the desired columns\\n    result_df = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n    return result_df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # Filtering the big countries\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n\\n    # Selecting the desired columns\\n    result_df = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n\\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3122437,
                "title": "mysql-best-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World\\nWHERE area >= 3000000 or population >= 25000000;\\n```\\n> Please Upvote if it was Helpful.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World\\nWHERE area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3060401,
                "title": "mysql-straightforward-simple-sql-query",
                "content": "![image](https://assets.leetcode.com/users/images/c32aa70f-8ce4-40a5-b064-a8b97ced00c5_1673894432.987766.png)\\n\\n\\n\\tSELECT name, population, area FROM world WHERE (population >= 25000000 OR area >= 3000000 );",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "![image](https://assets.leetcode.com/users/images/c32aa70f-8ce4-40a5-b064-a8b97ced00c5_1673894432.987766.png)\\n\\n\\n\\tSELECT name, population, area FROM world WHERE (population >= 25000000 OR area >= 3000000 );",
                "codeTag": "Unknown"
            },
            {
                "id": 2739874,
                "title": "easy-mysql-solution",
                "content": "Remember, mySQL is case-insensitive. Typing the table names in lower case or all upper case makes on difference. Same goes for data contents within the table.\\n\\n```\\nSELECT name, population, area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2414988,
                "title": "my-sql-easy-and-faster-than-89",
                "content": "```\\nselect name,population,area\\nfrom World\\nwhere (World.area >=3000000) or (World.population >=25000000) ;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area\\nfrom World\\nwhere (World.area >=3000000) or (World.population >=25000000) ;",
                "codeTag": "Unknown"
            },
            {
                "id": 1955936,
                "title": "easy-to-understand-sql-union-or",
                "content": "```\\n#OR\\nselect \\nname, population, area \\nfrom world \\nwhere area>=3000000 \\nor population>=25000000;\\n\\n\\n#UNION\\nselect \\nname, population, area \\nfrom world\\nwhere area>=3000000\\n\\nunion\\n\\nselect \\nname, population, area \\nfrom world \\nwhere \\npopulation>=25000000;\\n```\\n\\n**UNION** is faster than **OR**\\n\\n\\nIf you have any **doubts**, feel **free to ask**...\\nIf you understand the **concept**. Don\\'t Forget to **upvote**\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n#OR\\nselect \\nname, population, area \\nfrom world \\nwhere area>=3000000 \\nor population>=25000000;\\n\\n\\n#UNION\\nselect \\nname, population, area \\nfrom world\\nwhere area>=3000000\\n\\nunion\\n\\nselect \\nname, population, area \\nfrom world \\nwhere \\npopulation>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 494765,
                "title": "very-fast-solution-using-with-clause-runtime-492-ms-faster-than-99-03",
                "content": "```\\nwith \\n    a AS\\n    (select name, population, area\\n        from world\\n        where area > 3000000),\\n    b AS\\n    (select name, population, area\\n        from world\\n        where population > 25000000)\\nselect * from a\\nunion\\nselect * from b\\n;\\n```\\n\\nSolution here will compute the aggregation first, give it a variable and allow us to reference it later in the query(could be multiple times too). The result from two querys are materialized(this boosts performence), oracle database optimizes the query by treating the query name as either an inline view or as a temporary table.\\n",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nwith \\n    a AS\\n    (select name, population, area\\n        from world\\n        where area > 3000000),\\n    b AS\\n    (select name, population, area\\n        from world\\n        where population > 25000000)\\nselect * from a\\nunion\\nselect * from b\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 248388,
                "title": "help-same-code-getting-run-time-error-when-using-microsoft-sql-server",
                "content": "Same code as below works in MySQL but returns run-time error using SQL Server. What have I missed? Anybody knows? Thanks!\\n\\n```\\nSELECT name, population, area\\nFROM World\\nWHERE area>3000000 OR population>25000000;\\n```\\n\\nError message:\\n```\\nRuntime Error Message:\\nsql: insert into World (name, continent, area, population, gdp) values (?, ?, ?, ?, ?), values: [(\\'Afghanistan\\', \\'Asia\\', 652230, 25500100, 20343000000), (\\'Albania\\', \\'Europe\\', 28748, 2831741, 12960000000), (\\'Algeria\\', \\'Africa\\', 2381741, 37100000, 188681000000), (\\'Andorra\\', \\'Europe\\', 468, 78115, 3712000000), (\\'Angola\\', \\'Africa\\', 1246700, 20609294, 100990000000)]\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area>3000000 OR population>25000000;\\n```\n```\\nRuntime Error Message:\\nsql: insert into World (name, continent, area, population, gdp) values (?, ?, ?, ?, ?), values: [(\\'Afghanistan\\', \\'Asia\\', 652230, 25500100, 20343000000), (\\'Albania\\', \\'Europe\\', 28748, 2831741, 12960000000), (\\'Algeria\\', \\'Africa\\', 2381741, 37100000, 188681000000), (\\'Andorra\\', \\'Europe\\', 468, 78115, 3712000000), (\\'Angola\\', \\'Africa\\', 1246700, 20609294, 100990000000)]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3846857,
                "title": "day-1-pandas-clean-code-python",
                "content": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # selecting the required columns\\n    df = world[[\\'name\\',\\'population\\',\\'area\\']]\\n    \\n\\t# operation to get result\\n    resdf = df[(df[\\'population\\']>=25000000) | (df[\\'area\\']>=3000000)]\\n    \\n    return resdf\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # selecting the required columns\\n    df = world[[\\'name\\',\\'population\\',\\'area\\']]\\n    \\n\\t# operation to get result\\n    resdf = df[(df[\\'population\\']>=25000000) | (df[\\'area\\']>=3000000)]\\n    \\n    return resdf\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3306252,
                "title": "595-solution-with-step-by-step-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSELECT name, population, area \\nFROM World \\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\nSELECT name, population, area \\nFROM World \\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3269588,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2965850,
                "title": "mysql-simple-one",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name,population,area from World\\nwhere area >=3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World\\nwhere area >=3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2113082,
                "title": "easy-peezy-sql-query-solution",
                "content": "1) Simple Method\\n```\\nselect name, population, area from World where area>=3000000 or population>=25000000\\n```\\n\\n2) Using Union\\n```\\nselect name, population, area \\nfrom World \\nwhere area >= 3000000\\n\\nunion\\n\\nselect name, population, area \\nfrom World \\nwhere population >= 25000000\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area from World where area>=3000000 or population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 802327,
                "title": "sql-easy-peasy",
                "content": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 or population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 or population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3873163,
                "title": "python-pandas-one-liner-solution-common-error-addressed",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nA mistake that might be hard to debug for beginners is that the \\'or\\' and \\'and\\' Python statements require truth-values, resulting in the following error:\\n```\\nValueError: The truth value of a Series is ambiguous.\\n Use a.empty, a.bool(), a.item(), a.any() or a.all().\\n```\\n\\nThis happens because for pandas, these are considered ambiguous\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nUse \"bitwise\" | (or) or & (and) operations. \\nThese are overriden for the dataframe structures and allow us to perform the SQL equivalent of and/or in a where clause.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n) - Checks through all rows to validate specified conditions.\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.population >= 25000000) | (world.area  >= 3000000)].filter(items=[\\'name\\', \\'population\\', \\'area\\'])\\n```",
                "solutionTags": [
                    "Python3",
                    "Database",
                    "Pandas"
                ],
                "code": "```\\nValueError: The truth value of a Series is ambiguous.\\n Use a.empty, a.bool(), a.item(), a.any() or a.all().\\n```\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.population >= 25000000) | (world.area  >= 3000000)].filter(items=[\\'name\\', \\'population\\', \\'area\\'])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3774371,
                "title": "easy-mysql-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name , population ,area from World where area >=3000000 OR population >=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name , population ,area from World where area >=3000000 OR population >=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3704388,
                "title": "sql-simple-straight-forward-approach",
                "content": "```\\n# Write your MySQL query statement below\\n\\nselect name, population, area from World\\nwhere area >= 3000000 or population >= 25000000;\\n```\\n\\n![image](https://assets.leetcode.com/users/images/39451a8b-4887-46f6-9b8f-b994e2e40253_1687453528.6643982.jpeg)\\n\\n**please upvote!! if you like.**\\ncomment below\\uD83D\\uDC47",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect name, population, area from World\\nwhere area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3694593,
                "title": "easily-understandable-solution",
                "content": "\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3579418,
                "title": "one-liner-solution-optimum-solution",
                "content": "## ***Please Upvote my solution, if you find it helpful ;)***\\n\\n# Intuition\\nThe problem asks us to find \"big\" countries based on certain conditions related to their area and population. We need to retrieve the name, population, and area of countries that have either an area greater than or equal to 3,000,000 or a population greater than or equal to 25,000,000. To do this, we will query the **\\'World\\'** table and apply the necessary filtering conditions.\\n\\n# Approach\\nHere is a step-by-step explanation of your approach:\\n\\n1. We start by selecting the name, population, and area columns from the World table. This allows us to retrieve the necessary information about the countries.\\n1. We use the WHERE clause to apply the filtering conditions. In this case, the conditions state that we want to include countries with an area greater than or equal to 3,000,000 or a population greater than or equal to 25,000,000.\\n1. Finally, we retrieve the name, population, and area of countries that satisfy the filtering conditions.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of your solution depends on the number of countries in the World table. We need to scan through each row in the table to retrieve the required information. Therefore, the time complexity can be considered $$O(N)$$, where N is the number of countries.\\n\\n- Space complexity:\\nThe space complexity of your solution depends on the number of \"big\" countries that satisfy the given conditions. Since we are selecting the name, population, and area columns, the space required to store the result set will depend on the number of countries that meet the criteria. Let\\'s assume this is M countries. Therefore, the space complexity can be considered $$O(M)$$.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area from World where area>= 3000000 or population>=25000000\\n```\\n***Please Upvote my solution, if you find it helpful ;)***\\n![6a87bc25-d70b-424f-9e60-7da6f345b82a_1673875931.8933976.jpeg](https://assets.leetcode.com/users/images/a8b1fa49-3b41-42a7-9a62-7693f9cca234_1685478652.2438877.jpeg)\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from World where area>= 3000000 or population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3529240,
                "title": "mysql-solution-for-big-countries-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given query selects the name, population, and area of countries from the \"World\" table where either the area is greater than or equal to 3,000,000 or the population is greater than or equal to 25,000,000.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. It selects the name, population, and area columns from the \"World\" table.\\n2. The query applies the filter condition area >= 3000000 or population >= 25000000 to select records where either the area is greater than or equal to 3,000,000 or the population is greater than or equal to 25,000,000.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query depends on the size of the \"World\" table and the efficiency of indexing on the area and population columns. The query involves scanning the entire table and applying the filter condition, which has a time complexity of O(N), where N is the number of rows in the table. The performance can be further improved if there are indexes on the area and population columns, as it allows for faster filtering.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this query is determined by the memory required to process the query and store the result set. The space complexity is proportional to the size of the result set, which depends on the number of countries where either the area is greater than or equal to 3,000,000 or the population is greater than or equal to 25,000,000. If the result set is large, it may require additional memory resources to store and return the data. However, if the result set is small compared to the total table size, the impact on space complexity is minimal.\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488786,
                "title": "easy-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3458825,
                "title": "beats-99-easy-sql-solution",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\nBeats 99%\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT name,population,area FROM WORLD WHERE population >= 25000000 or area >= 3000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT name,population,area FROM WORLD WHERE population >= 25000000 or area >= 3000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3272918,
                "title": "sql-server-clean-easy",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000 OR population >= 25000000\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000 OR population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3233040,
                "title": "easy-simple-mysql-solution",
                "content": "## Code\\n```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM World\\nWHERE area>= 3000000 or population>= 25000000 ; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM World\\nWHERE area>= 3000000 or population>= 25000000 ; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3198096,
                "title": "basic-sql-command-one-liners",
                "content": "\\n# Code\\n```\\nselect name,population,area\\nfrom World\\nwhere area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area\\nfrom World\\nwhere area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2781967,
                "title": "easy-mysql-beginner-solution",
                "content": "\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area\\nfrom world\\nwhere (area >= 3000000 or population >= 25000000);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area\\nfrom world\\nwhere (area >= 3000000 or population >= 25000000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2431335,
                "title": "mysql-1-liner-solution-beginner-level-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n**Runtime:** 253 ms, faster than 91.58% of MySQL online submissions for Big Countries.\\n```\\nSELECT name,area,population FROM World WHERE area>=3000000 OR population>=25000000\\n```\\n**Runtime:** 253 ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name,area,population FROM World WHERE area>=3000000 OR population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2240454,
                "title": "oracle-memory-100",
                "content": "```\\nSELECT name, population, area FROM world WHERE area >= 3000000\\nUNION \\nSELECT name, population, area FROM world WHERE population >= 25000000",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area FROM world WHERE area >= 3000000\\nUNION \\nSELECT name, population, area FROM world WHERE population >= 25000000",
                "codeTag": "Unknown"
            },
            {
                "id": 850356,
                "title": "mysql-straight-forward-solution",
                "content": "```\\nselect name, population, area \\nfrom World \\nwhere (area > 3000000 or population > 25000000);\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area \\nfrom World \\nwhere (area > 3000000 or population > 25000000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 103560,
                "title": "my-easy-solution-ac",
                "content": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4048809,
                "title": "filtering-and-applying-conditional-selection",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n* We need to select certain entities which meet our condition, then we should select the name, population, and area columns only. \\n* This will be done using conditional selection\\n* Then applying filtering function\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n* Apply conditionl selection by selecting elements which are  \\n    1. (world.population >= 25000000)\\n    2. (world.area  >= 3000000)\\n* After that, use the filter function, to select the needed columns only\\n    * .filter(items=[\\'name\\', \\'population\\', \\'area\\'])\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # world = world[(world.population >= 25000000) | (world.area >= 3000000)]\\n\\n    # # Drop all columns except \\'name\\',\\'population\\',\\'area\\'\\n    # columns_to_keep = [\\'name\\',\\'population\\',\\'area\\',]\\n\\n    # world = world[columns_to_keep]\\n    # return world\\n    return world[(world.population >= 25000000) | (world.area  >= 3000000)].filter(items=[\\'name\\', \\'population\\', \\'area\\'])\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    # world = world[(world.population >= 25000000) | (world.area >= 3000000)]\\n\\n    # # Drop all columns except \\'name\\',\\'population\\',\\'area\\'\\n    # columns_to_keep = [\\'name\\',\\'population\\',\\'area\\',]\\n\\n    # world = world[columns_to_keep]\\n    # return world\\n    return world[(world.population >= 25000000) | (world.area  >= 3000000)].filter(items=[\\'name\\', \\'population\\', \\'area\\'])\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3878080,
                "title": "sql-query-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe need to select the columns we need from the given table. Later we need to use the where condition to retrive the data we need.\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, area, population\\nfrom world\\nwhere area >= 3000000 or population >= 25000000\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, area, population\\nfrom world\\nwhere area >= 3000000 or population >= 25000000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3859812,
                "title": "simple-2-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*It is very simple just create a DataFrame \\n*Put the condition into the DataFrame\\n*Return the DataFrame\\n(You can also store the required DataFrame into another DataFrame)\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  df=world[(world[\\'area\\']>=3000000)| (world[\\'population\\']>=25000000)]\\n  return df[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n# if want to store values into another dataframe just use thiS approach---->\\n\\n\\ndf=world[(world[\\'area\\']>=3000000)| (world[\\'population\\']>=25000000)]\\nresult=df[[\\'name\\',\\'population\\',\\'area\\']]\\nreturn result\\n\\n\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  df=world[(world[\\'area\\']>=3000000)| (world[\\'population\\']>=25000000)]\\n  return df[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n# if want to store values into another dataframe just use thiS approach---->\\n\\n\\ndf=world[(world[\\'area\\']>=3000000)| (world[\\'population\\']>=25000000)]\\nresult=df[[\\'name\\',\\'population\\',\\'area\\']]\\nreturn result\\n\\n\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3851417,
                "title": "python-easy-solutions",
                "content": "# Intuition\\nThe problem requires finding and displaying information about countries that are considered \"big\" based on specific criteria. The two criteria for a country to be considered big are:\\n\\n* Area >= 3000000 (3 million square kilometers)\\n* Population >= 25000000 (25 million people)\\n\\nThe task is to filter out countries from the given data that meet either of these criteria and then present their names, populations, and areas.\\n\\n# Approach\\n(world[\\'area\\'] >= 3000000) and (world[\\'area\\'] >= 3000000)\\nThese are the two conditons we are using an return with specific columns.\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    result = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n    return result\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    big_countries_df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    result = big_countries_df[[\\'name\\', \\'population\\', \\'area\\']]\\n    return result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3848737,
                "title": "1-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world[\\'area\\'] >= 3_000_000) | ( world[\\'population\\'] >= 25_000_000)][[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world[\\'area\\'] >= 3_000_000) | ( world[\\'population\\'] >= 25_000_000)][[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3848254,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    world = world[(world.area >= 3000000) | (world.population >= 25000000)]\\n    return world[[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    world = world[(world.area >= 3000000) | (world.population >= 25000000)]\\n    return world[[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3789679,
                "title": "pandas-solution",
                "content": "Pandas solution: filter by countries with area >= 3000000 or population >= 25000000. Then get the three needed columns. \\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    return world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)][[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "solutionTags": [
                    "Python3",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    return world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)][[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3786793,
                "title": "one-line",
                "content": "\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3774766,
                "title": "big-countries-mysql-solution-code",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area from world where area >= 3000000 or population >=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from world where area >= 3000000 or population >=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3766790,
                "title": "96-beats-one-line-code",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name, population, area from World where area>=3000000 union select name, population, area from World where population>=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from World where area>=3000000 union select name, population, area from World where population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3634104,
                "title": "done-using-union",
                "content": "\\n```\\nselect name, population, area from World where area>=3000000 \\nunion \\nselect name, population, area from World where population>=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area from World where area>=3000000 \\nunion \\nselect name, population, area from World where population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3581009,
                "title": "pandas-2-liner-mysql-3-solutions-with-beginner-friendly-explanation-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- In the SELECT statement, we write the column name that we want to retrieve.\\n- In the FROM statement, we write the table name which includes the above-mentioned columns.\\n- In the where statement, we define the predicate or condition to obtain the required solution.\\nThe UNION operator can be used to combine two SQL statements.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAs we need to get the \\'name, population and area\\' of a country, we select the corresponding columns from the table \\'World\\'. A country is considered big if it satisfies any one of the two conditions hence we use an \\'OR\\' operator to combine the two conditions. We can also write the two conditions in separate SQL queries and combine them using a \\'UNION\\' operator as shown in the commented code.\\n\\n### Please upvote if you find my solution helpful.\\n\\n# Code\\n```\\n# Solution 1\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000 or population>=25000000;\\n\\n# Solution 2\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000\\nUNION\\nSELECT name, population, area\\nFROM World\\nWHERE population>=25000000;\\n```\\n\\n```\\n# Pandas Solution\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    return df[[\\'name\\', \\'population\\', \\'area\\']]\\n```\\n",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Solution 1\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000 or population>=25000000;\\n\\n# Solution 2\\nSELECT name, population, area\\nFROM World\\nWHERE area>=3000000\\nUNION\\nSELECT name, population, area\\nFROM World\\nWHERE population>=25000000;\\n```\n```\\n# Pandas Solution\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    df = world[(world[\\'area\\'] >= 3000000) | (world[\\'population\\'] >= 25000000)]\\n    return df[[\\'name\\', \\'population\\', \\'area\\']]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3548287,
                "title": "simple-query-using-or-operator",
                "content": "Select name, population, area from World where population >=25000000 OR area>=3000000;",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "Select name, population, area from World where population >=25000000 OR area>=3000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 3283054,
                "title": "super-easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3254368,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT name, population, area FROM World WHERE  population >=25000000 or area>=3000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT name, population, area FROM World WHERE  population >=25000000 or area>=3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3242511,
                "title": "easy-sql-query",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\n\\nSELECT name, population, area FROM World WHERE  population >=25000000 or area>=3000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT name, population, area FROM World WHERE  population >=25000000 or area>=3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3010491,
                "title": "easy-solution",
                "content": "```\\nSelect name, population, area from World\\nwhere area >= \"3000000\" OR population >= \"25000000\";\\n```",
                "solutionTags": [],
                "code": "```\\nSelect name, population, area from World\\nwhere area >= \"3000000\" OR population >= \"25000000\";\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2881479,
                "title": "simple-sql-solution-to-big-countries",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFor this question we are trying to determine which countries are big. A country is big if it has a population greater than 25 million or an area larger than 3 million.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWe need to look at only three pieces of information: country name, population and area. The rest of the input table is irrelevant. I thus began by selecting the relevant information: \\n```\\nSELECT name, population, area FROM World\\n```\\n\\nNow that we have the information that is needed we only want to return results that meet our conditions of bigness. To do this we add a where clause:\\n\\n```\\nWHERE area >= 3000000 || population >= 25000000\\n```\\nThis limits the output to only those countries that are bigger than 25 million population or 3 million area\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT \\n    name,\\n    population,\\n    area\\nFROM World\\nWHERE \\n    area >= 3000000 || \\n    population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area FROM World\\n```\n```\\nWHERE area >= 3000000 || population >= 25000000\\n```\n```\\n# Write your MySQL query statement below\\nSELECT \\n    name,\\n    population,\\n    area\\nFROM World\\nWHERE \\n    area >= 3000000 || \\n    population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2611670,
                "title": "595-big-countries-easy-explained",
                "content": "Here we use **SELECT** clause to display the output.\\nAnd we use **FROM** clause to specify from which table we want to select.\\nAfter that we gives our condition and then to sepearte then we use clause.\\nHere we use **OR** clause because we want this query to select any of the solution which will satisify either both or one condition.\\n```\\n# Write your MySQL query statement below\\nSELECT name, population, area \\nFROM `WORLD` \\nWHERE population>=25000000 OR area>=3000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area \\nFROM `WORLD` \\nWHERE population>=25000000 OR area>=3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552104,
                "title": "easiest-solution-mysql-query",
                "content": "First Solution :-\\n```\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000\\n\\nUNION\\n\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    population >= 25000000\\n;\\n```\\n\\nSecond Solution:-\\n\\n```\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000\\n;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000\\n\\nUNION\\n\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    population >= 25000000\\n;\\n```\n```\\nSELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2504901,
                "title": "easy-mysql-solution",
                "content": "select name, population,area from World where area >= 3000000 or population >= 25000000;",
                "solutionTags": [],
                "code": "select name, population,area from World where area >= 3000000 or population >= 25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2373836,
                "title": "simple-mysql-solution-faster-than-68-14-sub",
                "content": "In this problem, we are required to find the countries if atleast one of the two conditions given below are meet.\\n\\n**Condition 1: Country has an area of at least three million (i.e., 3000000 km2)**\\nor\\n**Condition 2: Country has an area of at least three million (i.e., 3000000 km2)**\\n\\nThus to solve this problem I have used the basic **WHERE** condition to get the results according to the conditions.\\n\\nSo first we will select the required columns from the table **World**.\\n```\\nSELECT name, population, area \\nFROM World\\n```\\n\\nNow we will use the **WHERE** condition.\\n```\\nWHERE area>=3000000 or population>=25000000;\\n```\\n\\nThus, our query is complete and will give the desired output.\\n\\nCode:\\n```\\nSELECT name, population, area \\nFROM World\\nWHERE area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area \\nFROM World\\n```\n```\\nWHERE area>=3000000 or population>=25000000;\\n```\n```\\nSELECT name, population, area \\nFROM World\\nWHERE area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2348622,
                "title": "simple-mysql-using-or-beats-85",
                "content": "* SELECT name,population,area FROM World WHERE population>=25000000 OR area>=3000000;",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "* SELECT name,population,area FROM World WHERE population>=25000000 OR area>=3000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2229367,
                "title": "simple-and-easy-solution",
                "content": "```\\nSELECT name, population, area \\nFROM World\\nWHERE area>=3000000 OR population>=25000000\\n```\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area \\nFROM World\\nWHERE area>=3000000 OR population>=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2181566,
                "title": "easy-solution-with-line-by-line-explanation",
                "content": "```\\nselect name ,population ,area    #selecting name,population and area \\nfrom world                       #selecting the table\\nwhere population>=25000000 or area>=3000000; #appling filter\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name ,population ,area    #selecting name,population and area \\nfrom world                       #selecting the table\\nwhere population>=25000000 or area>=3000000; #appling filter\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2096488,
                "title": "beginner-friendly-solutions",
                "content": "```\\n# Write your MySQL query statement below\\nSelect \\n    name, \\n    population, \\n    area \\nfrom \\n    world \\nwhere area >= 3000000 or population >= 25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect \\n    name, \\n    population, \\n    area \\nfrom \\n    world \\nwhere area >= 3000000 or population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2087274,
                "title": "simple-solution-for-beginners",
                "content": "\\n\\n```\\nSelect name,population,area from World w \\nwhere w.area >= 3000000 or w.population>=25000000;\\n\\n```",
                "solutionTags": [],
                "code": "```\\nSelect name,population,area from World w \\nwhere w.area >= 3000000 or w.population>=25000000;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1942041,
                "title": "mysql-easy-implementation-runtime-beats-87-mysql-submissions",
                "content": "```\\nselect name, population, area from World\\n    where area >= 3000000 OR population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area from World\\n    where area >= 3000000 OR population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1026528,
                "title": "clear-mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT\\n    name,\\n    population,\\n    area\\nFROM \\n    world\\nWHERE\\n    area > 3000000 OR\\n    population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    name,\\n    population,\\n    area\\nFROM \\n    world\\nWHERE\\n    area > 3000000 OR\\n    population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012168,
                "title": "using-where-and-order-by-clause",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your T-SQL query statement below */\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000 order by name\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect name, population, area from World \\nwhere area >= 3000000 or population >= 25000000 order by name\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3886848,
                "title": "pandas-beginner-friendly-solution",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n\\n```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    filtered_columns = world[[\\'name\\', \\'area\\', \\'population\\']]\\n    \\n    res_df = filtered_columns[(filtered_columns[\\'area\\'] >= 3000000) | (filtered_columns[\\'population\\'] >= 25000000)]\\n    \\n    return res_df\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n    filtered_columns = world[[\\'name\\', \\'area\\', \\'population\\']]\\n    \\n    res_df = filtered_columns[(filtered_columns[\\'area\\'] >= 3000000) | (filtered_columns[\\'population\\'] >= 25000000)]\\n    \\n    return res_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3836369,
                "title": "very-easy-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3820304,
                "title": "oracle-easy-solution-memory-beats-100",
                "content": "# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSelect name,population,area From World Where population>=25000000 Or area>=3000000\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSelect name,population,area From World Where population>=25000000 Or area>=3000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3632316,
                "title": "1-line-simple-sql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSelect name,population,area from World where   population >= 25000000 or area >= 3000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSelect name,population,area from World where   population >= 25000000 or area >= 3000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3594080,
                "title": "most-easy-solution-mysql-killer-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect name,population,area from world \\nwhere area >= 3000000 or population >=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3547952,
                "title": "easy-to-understand-sql-almost-100-beats",
                "content": "# Intuition\\nSimply **OR** clause is used to verify the condition.\\n\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3545170,
                "title": "easy-mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000  OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area FROM World WHERE area>=3000000  OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3402691,
                "title": "using-or",
                "content": "\\n\\n# Code\\n```\\nselect name,population,area from World \\nwhere area>=3000000 or\\npopulation >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from World \\nwhere area>=3000000 or\\npopulation >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3283611,
                "title": "mysql",
                "content": "Please upvote guys!\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT name,population,area\\nFROM World\\nWhere area>=3000000 OR Population >=25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area\\nFROM World\\nWhere area>=3000000 OR Population >=25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2907374,
                "title": "easy-explained-in-hindi",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nlc ne manga h ki unko name population and area chahiye **(select)**\\ntable m se jinka area 3M ya usse jyada ho ya fir unki population 25M se ya usse jyada ho koi ek hoga to chalega bas vahi h **where Condition ** \\n# Code\\n```\\n# Write your MySQL query statement below\\nselect \\n    name, population, area \\nfrom\\n    World \\nwhere \\n    area >= 3000000 or population >= 25000000\\norder by name asc\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect \\n    name, population, area \\nfrom\\n    World \\nwhere \\n    area >= 3000000 or population >= 25000000\\norder by name asc\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2608054,
                "title": "mysql-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT name , population , area FROM World where population >= 25000000 or area > 3000000\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name , population , area FROM World where population >= 25000000 or area > 3000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2606897,
                "title": "sql-oracle-simple-solution-faster-than-80-34",
                "content": "![image](https://assets.leetcode.com/users/images/c1e9bb75-338e-434c-9593-2bb9a7152fea_1663783602.4796035.png)\\n\\n\\n```\\nSELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2605439,
                "title": "mysql-one-line-solution",
                "content": "\"\"\"\\n\\nSELECT `name`, `population`, `area` FROM world WHERE world.area >= 3000000 OR world.population >= 25000000\\n\"\"\"",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\"\"\"\\n\\nSELECT `name`, `population`, `area` FROM world WHERE world.area >= 3000000 OR world.population >= 25000000\\n\"\"\"",
                "codeTag": "Unknown"
            },
            {
                "id": 2581694,
                "title": "sql-union",
                "content": "\\nSELECT name, population, area \\nFROM World \\nWHERE population>=25000000 \\n\\nUNION\\n\\nSELECT name, population, area \\nFROM World \\nWHERE area >= 3000000\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "\\nSELECT name, population, area \\nFROM World \\nWHERE population>=25000000 \\n\\nUNION\\n\\nSELECT name, population, area \\nFROM World \\nWHERE area >= 3000000\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2553997,
                "title": "easiest-sql-solution",
                "content": "**Do upvote if you like it!**\\n\\n```\\nselect name,population,area from World where area>=3000000 or population>=25000000 ;\\n```\\n\\n![image](https://assets.leetcode.com/users/images/80dd8e2a-33b9-4605-9acb-022a27114b5d_1662734008.167254.png)\\n\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from World where area>=3000000 or population>=25000000 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2544190,
                "title": "wtf-solution-of-mysql",
                "content": "```\\nSELECT name, \\n    area,   \\n    population\\nFROM World\\nWHERE area >= 3000000 OR population >=25000000\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, \\n    area,   \\n    population\\nFROM World\\nWHERE area >= 3000000 OR population >=25000000\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2535655,
                "title": "easiest-solution-mysql-query",
                "content": "```\\nselect  name , population , area from World where area >= 3000000  or population  >= 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nselect  name , population , area from World where area >= 3000000  or population  >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2534315,
                "title": "easiest-approch",
                "content": "SELECT name,population,area FROM World\\nWHERE area >= 3000000 OR population >=25000000; \\n\\nPlease UPvote if you like the solution",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT name,population,area FROM World\\nWHERE area >= 3000000 OR population >=25000000; \\n\\nPlease UPvote if you like the solution",
                "codeTag": "Unknown"
            },
            {
                "id": 2529334,
                "title": "simple-and-easy-mysql",
                "content": "\\nselect name,population,area from World where area>=3000000 or population>=25000000 ;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nselect name,population,area from World where area>=3000000 or population>=25000000 ;",
                "codeTag": "Unknown"
            },
            {
                "id": 2519092,
                "title": "very-very-easy-solution-mysql",
                "content": "```\\nselect name, population, area from world where area >= 3000000 or population >= 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area from world where area >= 3000000 or population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2511796,
                "title": "1-liner-very-very-easy-mysql",
                "content": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World where population>=25000000 or area>=3000000;\\n\\n\\n# if(you like)\\n#     please upvote;\\n\\n```\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World where population>=25000000 or area>=3000000;\\n\\n\\n# if(you like)\\n#     please upvote;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2497198,
                "title": "easy-mysql-solution-simple-to-understand",
                "content": "\\tselect name, population, area \\n\\tfrom world \\n\\twhere area > 3000000 or population >= 25000000;\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\tselect name, population, area \\n\\tfrom world \\n\\twhere area > 3000000 or population >= 25000000;\\nI hope that you\\'ve found the solution useful.\\nIn that case, please do upvote. Happy Coding :)",
                "codeTag": "Unknown"
            },
            {
                "id": 2497063,
                "title": "sql-two-solutions",
                "content": "## Solution 1: OR\\n\\n```sql\\nSELECT name, population, area\\nFROM world\\nWHERE area >= 3000000\\nOR population >= 25000000\\n```\\n\\n## Solution 2: Union\\n\\n```sql\\nSELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 \\n\\nUNION\\n\\nSELECT name, population, area\\nFROM World\\nWHERE population >= 25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT name, population, area\\nFROM world\\nWHERE area >= 3000000\\nOR population >= 25000000\\n```\n```sql\\nSELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 \\n\\nUNION\\n\\nSELECT name, population, area\\nFROM World\\nWHERE population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2414394,
                "title": "easy-faster-than-72-65-of-mysql-online-submissions",
                "content": "```\\nSELECT name,population,area FROM world\\nWHERE area>=3000000 OR\\npopulation>=25000000;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name,population,area FROM world\\nWHERE area>=3000000 OR\\npopulation>=25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2401519,
                "title": "sql-optimization-using-union-instead-of-or",
                "content": "An OR operator may force the query optimizer to perform inefficient tasks, which are specifically described in the execution plan, depending on the DB being used.\\n\\nUNION ALL can be used when it\\'s ensured that both union queries won\\'t return duplicate rows, because this will remove all processing in UNION that removes duplicates. In this case, it is possible for a country to exceed both population and area thresholds, so it\\'s not applicable.\\n\\n```\\n/*\\nFaster: UNION solution\\n*/\\n\\nselect name, population, area\\nfrom World\\nwhere area >= 3000000\\nunion\\nselect name, population, area\\nfrom World\\nwhere population >= 25000000;\\n\\n\\n/*\\nSlower: OR solution\\n*/\\n\\nselect name, population, area\\nfrom World\\nwhere area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n/*\\nFaster: UNION solution\\n*/\\n\\nselect name, population, area\\nfrom World\\nwhere area >= 3000000\\nunion\\nselect name, population, area\\nfrom World\\nwhere population >= 25000000;\\n\\n\\n/*\\nSlower: OR solution\\n*/\\n\\nselect name, population, area\\nfrom World\\nwhere area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2386139,
                "title": "solution-with-explanation",
                "content": "In SQL  `SELECT` we first need to give the names of COLUMNS which we need in output\\nAnd then `FROM` -- To indicate the table name, from where we are taking data\\nFinally `WHERE` -- To specify the condition over row values of mentioned columns\\n\\n```\\nSELECT name, population, area \\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area \\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2384134,
                "title": "simple-sql-query",
                "content": "\\nselect name,population,area \\nfrom World \\nwhere area>=3000000 or population>=25000000;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "\\nselect name,population,area \\nfrom World \\nwhere area>=3000000 or population>=25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2379542,
                "title": "my-sql-one-line-space-complexity-less-than-100-of-submissions",
                "content": "```\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2355045,
                "title": "padhlo-padhlo-interview-clear-ho-jayega",
                "content": "```\\n# Write your MySQL query statement below\\nselect a.name,a.population,a.area from \\n    \\n    World as a\\n    where a.population>=25000000 or a.area >=3000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect a.name,a.population,a.area from \\n    \\n    World as a\\n    where a.population>=25000000 or a.area >=3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2278200,
                "title": "big-countries",
                "content": "SELECT name, population, area from World\\nwhere (area>= 3000000 or population>=25000000)",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT name, population, area from World\\nwhere (area>= 3000000 or population>=25000000)",
                "codeTag": "Unknown"
            },
            {
                "id": 2278143,
                "title": "mysql-simple-query",
                "content": "SELECT name,population,area\\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "SELECT name,population,area\\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2240469,
                "title": "a-simple-solution-in-postgresql",
                "content": "```\\nSELECT name, population, area FROM World WHERE area >= 3000000\\nUNION\\nSELECT name, population, area FROM World WHERE population >= 25000000\\n```",
                "solutionTags": [
                    "Union Find"
                ],
                "code": "```\\nSELECT name, population, area FROM World WHERE area >= 3000000\\nUNION\\nSELECT name, population, area FROM World WHERE population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2197944,
                "title": "c-mon-you-know-to-google-code-for-today",
                "content": "\\n\\n![image](https://assets.leetcode.com/users/images/a5117e75-aaf0-4336-a57d-114b5a44b187_1656211164.5987132.png)\\n\\n\\n```\\nselect name,population,area from world\\nwhere area >= 3000000 or population >= 25000000 ;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from world\\nwhere area >= 3000000 or population >= 25000000 ;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2193297,
                "title": "sql-short-crisp-easy",
                "content": "```\\nSELECT name,population, area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT name,population, area FROM World WHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2126727,
                "title": "basic-simple-query",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area\\nFROM World\\nWHERE area>=3000000 OR population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name,population,area\\nFROM World\\nWHERE area>=3000000 OR population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2117448,
                "title": "easy-sql-query",
                "content": "**Please do upvote if you find this solution useful!**\\n```\\n# Write your MySQL query statement below\\nSelect name , population, area \\nfrom World \\nwhere population>=25000000 OR area>=3000000;",
                "solutionTags": [],
                "code": "**Please do upvote if you find this solution useful!**\\n```\\n# Write your MySQL query statement below\\nSelect name , population, area \\nfrom World \\nwhere population>=25000000 OR area>=3000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2097970,
                "title": "simple",
                "content": "```\\nselect name,population,area from  World\\nwhere area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from  World\\nwhere area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2092153,
                "title": "simple-and-short-mysql-solution",
                "content": "select name,population,area \\nfrom World \\nwhere(area>=3000000) || (population>=25000000);",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "select name,population,area \\nfrom World \\nwhere(area>=3000000) || (population>=25000000);",
                "codeTag": "Unknown"
            },
            {
                "id": 2080692,
                "title": "sql-very-simple-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM WORLD\\nWHERE area >= 3000000 OR population >= 25000000\\n```\\n\\nPlease ***upVote***, if you like the explanation and sols :)\\nCheckout ***blazeyp***, just in case you want to explore my sols and explanation and ofc if I had done the question too XD.\\n\\nHAPPY CODING ;) !!\\n\\nhttps://www.youtube.com/channel/UCczVNrgFTTo0fH3TK915eyQ\\nTrying to help the community with my channel for easy placement preps and insights of corporate world for freshers.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM WORLD\\nWHERE area >= 3000000 OR population >= 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2066260,
                "title": "big-countries-simple-query",
                "content": "SELECT name,population,area \\nFROM World WHERE area>= 3000000 OR population >=25000000;",
                "solutionTags": [],
                "code": "SELECT name,population,area \\nFROM World WHERE area>= 3000000 OR population >=25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 2062783,
                "title": "1-line-simple-sql-query",
                "content": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect name,population,area from World where area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2049011,
                "title": "oracle-easy-solution",
                "content": "/* Write your PL/SQL query statement below */\\n\\n```\\nSelect name, population, area from world where area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nSelect name, population, area from world where area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2040238,
                "title": "at-least",
                "content": "It sould be >= because at least means that you should consider the number itself, its included !\\n\\n```\\n\\nselect name, population, area from World\\n\\nWhere area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n\\nselect name, population, area from World\\n\\nWhere area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997744,
                "title": "simple-sql-query",
                "content": "```\\nSELECT name, population, area FROM world\\nWHERE area >= 3000000 OR population >= 25000000",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area FROM world\\nWHERE area >= 3000000 OR population >= 25000000",
                "codeTag": "Unknown"
            },
            {
                "id": 1988059,
                "title": "simplest-oracle-solution",
                "content": "```\\nSELECT NAME,POPULATION,AREA\\nFROM WORLD\\nWHERE (AREA>=3000000 OR POPULATION>=25000000)\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT NAME,POPULATION,AREA\\nFROM WORLD\\nWHERE (AREA>=3000000 OR POPULATION>=25000000)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1974705,
                "title": "595-big-countries-70-faster",
                "content": "**Faster than~ 70%**\\n![image](https://assets.leetcode.com/users/images/5b24d83f-0b7a-41d1-b96e-d40ecd2c1903_1650704222.0684793.png)\\n\\n```\\nSELECT name, population, area from World where area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area from World where area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1951503,
                "title": "mysql-solution",
                "content": "***-- first we select name,populationandarea column from the world table\\n-- then we use WHERE to apply for the given condition***\\n\\nSELECT name,population,area FROM world\\nWHERE area>=3000000 OR population>=25000000;",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "***-- first we select name,populationandarea column from the world table\\n-- then we use WHERE to apply for the given condition***\\n\\nSELECT name,population,area FROM world\\nWHERE area>=3000000 OR population>=25000000;",
                "codeTag": "Unknown"
            },
            {
                "id": 1944666,
                "title": "easy-solution",
                "content": "```\\nselect name, population, area from world where area>=3000000 or population>=25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area from world where area>=3000000 or population>=25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1937049,
                "title": "big-countries",
                "content": "```\\nselect name,population,area from World where area >= 3000000 or population >= 25000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area from World where area >= 3000000 or population >= 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1924716,
                "title": "a-simple-approach-256ms",
                "content": "Here in the question it is written to report the name, population and the area from the table: \"WORLD\" for printing the names of the country as the output. \\nThere is a given condition :\\n*A country is big if:\\n \\tit has an area of at least three million (i.e., 3000000 km2), or\\n \\tit has a population of at least twenty-five million (i.e., 25000000)*\\n\\t\\nIt means:-  area should be greater or equal to 3million OR population should be greater or equal to 25million.\\n\\nCode:\\n```\\nSELECT name,population,area \\nFROM World \\nWHERE population >= 25000000 OR area >= 3000000;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name,population,area \\nFROM World \\nWHERE population >= 25000000 OR area >= 3000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1924349,
                "title": "accepted-solution-for-mysql",
                "content": "**USE >= INSTEAD OF > OTHERWISE THERE MAY BE AN ERROR**\\n\\n```sql\\nSELECT name, population, area FROM World\\nWHERE population >= 25000000 OR area >= 3000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```sql\\nSELECT name, population, area FROM World\\nWHERE population >= 25000000 OR area >= 3000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1774113,
                "title": "using-or-condition",
                "content": "select name, population, area\\nfrom\\nWorld w\\nwhere area >= 3000000 or population  >= 25000000",
                "solutionTags": [],
                "code": "select name, population, area\\nfrom\\nWorld w\\nwhere area >= 3000000 or population  >= 25000000",
                "codeTag": "Unknown"
            },
            {
                "id": 1461729,
                "title": "easiest-mysql-solution",
                "content": "```\\nselect name,population,area\\nfrom world\\nwhere (area>3000000 or population>25000000);\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name,population,area\\nfrom world\\nwhere (area>3000000 or population>25000000);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1425093,
                "title": "mysql",
                "content": "Simple MySQL query.\\n\\n```\\nSELECT name, population, area \\nFROM World \\nWHERE area > 3000000 OR population > 25000000;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name, population, area \\nFROM World \\nWHERE area > 3000000 OR population > 25000000;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1416652,
                "title": "oracle-simple-solution",
                "content": "```\\nselect t.name, t.population, t.area from World t where t.area > 3000000 or t.population > 25000000\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect t.name, t.population, t.area from World t where t.area > 3000000 or t.population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1389532,
                "title": "as-simple-as-this",
                "content": "```\\nselect name, population, area from World where area > 3000000 or population > 25000000;\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect name, population, area from World where area > 3000000 or population > 25000000;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1376994,
                "title": "simple-mysql-query",
                "content": "```\\nselect name, population, area from world where area > 3000000 or population > 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area from world where area > 3000000 or population > 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1328729,
                "title": "mysql",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT\\n    name,\\n    population,\\n    area\\nFROM\\n    World\\nWHERE\\n    area > 3000000\\nOR\\n    population > 25000000\\n;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT\\n    name,\\n    population,\\n    area\\nFROM\\n    World\\nWHERE\\n    area > 3000000\\nOR\\n    population > 25000000\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1309729,
                "title": "100-faster-runtime-than-all-submissions-with-0-memory-usage-easy-solution",
                "content": "```\\nSELECT name,population,area from World where area>3000000 UNION SELECT name,population,area from World where population >25000000\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT name,population,area from World where area>3000000 UNION SELECT name,population,area from World where population >25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1259288,
                "title": "one-liner-solution-easy-straightforward",
                "content": "```\\nSelect name,population,area from World where area>3000000 OR population> 25000000; \\n```",
                "solutionTags": [],
                "code": "```\\nSelect name,population,area from World where area>3000000 OR population> 25000000; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1259014,
                "title": "mysql-straightforward-approach",
                "content": "```\\n# Write your MySQL query statement below\\nselect name, population, area from world where area > 3000000 or population > 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nselect name, population, area from world where area > 3000000 or population > 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1189661,
                "title": "simple-solution",
                "content": "```\\nSELECT name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 975398,
                "title": "sql-solution",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM World\\nWhere area > 3000000 or population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT name, population, area\\nFROM World\\nWhere area > 3000000 or population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 904787,
                "title": "simple-sql-100-less-memory-one-line-solution",
                "content": "```\\nselect name, population, area from World where area > 3000000 or population>25000000\\n```\\n\\nkindly upvote if it helped you :)",
                "solutionTags": [],
                "code": "```\\nselect name, population, area from World where area > 3000000 or population>25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 877506,
                "title": "simple-sql-solution",
                "content": "```\\nselect name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area \\nfrom World\\nwhere area > 3000000 or population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 868321,
                "title": "100-memory-efficient-and-93-5-faster-solution",
                "content": "```\\nSELECT name,population,area \\nFROM World\\nWHERE area>3000000||population>25000000\\n\\n\\n//--------------------------------------------Upvote if u liked the solution------------------------------------------------\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name,population,area \\nFROM World\\nWHERE area>3000000||population>25000000\\n\\n\\n//--------------------------------------------Upvote if u liked the solution------------------------------------------------\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 848395,
                "title": "sql-explanation",
                "content": "* **Either** condition can be satisfied for a country to be \"big\":\\n\\t1. The area is greater than 3m.\\n\\t2. The population is greater than 25m.\\n* We can use the `OR` keyword in SQL to pick any countries that meet either condition.\\n```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000\\nOR population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000\\nOR population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 823034,
                "title": "mysql-faster-than-99-09",
                "content": "Runtime: 248 ms, faster than 99.09% of MySQL online submissions for Big Countries.\\n```\\nSELECT name ,population,area\\nFROM World\\nWHERE area > 3000000\\nUNION\\nSELECT name ,population,area\\nFROM World\\nWHERE population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name ,population,area\\nFROM World\\nWHERE area > 3000000\\nUNION\\nSELECT name ,population,area\\nFROM World\\nWHERE population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 817123,
                "title": "faster-than-36-52",
                "content": "\\n```SQL\\nselect \\n   name, population, area \\nfrom \\n   World \\nwhere \\n   area > 3000000 \\n   or \\n   population > 25000000;`",
                "solutionTags": [],
                "code": "\\n```SQL\\nselect \\n   name, population, area \\nfrom \\n   World \\nwhere \\n   area > 3000000 \\n   or \\n   population > 25000000;`",
                "codeTag": "Unknown"
            },
            {
                "id": 799442,
                "title": "so-silly-sql",
                "content": "```\\nSELECT name, population, area FROM World\\nWHERE World.area > 3000000 or World.population > 25000000\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area FROM World\\nWHERE World.area > 3000000 or World.population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 759049,
                "title": "oracle-solution",
                "content": "```\\nselect w.name,w.population,w.area from world w\\nwhere w.area > 3*power(10,6)\\nor w.population > 25*power(10,6)\\n```",
                "solutionTags": [],
                "code": "```\\nselect w.name,w.population,w.area from world w\\nwhere w.area > 3*power(10,6)\\nor w.population > 25*power(10,6)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 741210,
                "title": "272-ms-faster-than-85-91-of-mysql-online-submissions-for-big-countries",
                "content": "select name, population, area\\nfrom \\n(select *, (population > 25000000) as p, (area > 3000000) as a\\nfrom world) as tmp\\nwhere p=1 or a=1;",
                "solutionTags": [],
                "code": "select name, population, area\\nfrom \\n(select *, (population > 25000000) as p, (area > 3000000) as a\\nfrom world) as tmp\\nwhere p=1 or a=1;",
                "codeTag": "Unknown"
            },
            {
                "id": 644073,
                "title": "ms-sql-solution",
                "content": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT name, population, area\\nFROM World\\nWHERE area > 3000000 OR population > 25000000\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 527583,
                "title": "mysql-96-220ms",
                "content": "```\\nselect name, population, area\\nfrom World\\nwhere area > 3000000 or population > 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area\\nfrom World\\nwhere area > 3000000 or population > 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 481613,
                "title": "straight-forward-query",
                "content": "```\\nselect name, population, area from World where area > 3000000 or population > 25000000;\\n```",
                "solutionTags": [],
                "code": "```\\nselect name, population, area from World where area > 3000000 or population > 25000000;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 338927,
                "title": "sql-easy-solution-self-explanatory",
                "content": "```\\nSELECT name, population, area FROM World WHERE (area>3000000 OR population>25000000)",
                "solutionTags": [],
                "code": "```\\nSELECT name, population, area FROM World WHERE (area>3000000 OR population>25000000)",
                "codeTag": "Unknown"
            },
            {
                "id": 285937,
                "title": "the-schema-for-the-problem-is-wrong-runtime-error",
                "content": "wow, really.  leet code\\'s quality bar for questions is really low.\\nthere\\'s an overflow of the int columns in the schema itself.\\n\\n```\\nRuntime Error\\nsql: insert into World (name, continent, area, population, gdp) values (?, ?, ?, ?, ?), values: [(\\'Afghanistan\\', \\'Asia\\', 652230, 25500100, 20343000000), (\\'Albania\\', \\'Europe\\', 28748, 2831741, 12960000000), (\\'Algeria\\', \\'Africa\\', 2381741, 37100000, 188681000000), (\\'Andorra\\', \\'Europe\\', 468, 78115, 3712000000), (\\'Angola\\', \\'Africa\\', 1246700, 20609294, 100990000000)]\\nTraceback (most recent call last):\\n  File \"driver.py\", line 68, in <module>\\n    cur.executemany(sql, M)\\nDataError: (\\'22003\\', u\\'[22003] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Arithmetic overflow error converting expression to data type int. (8115) (SQLExecDirectW)\\')\\n```",
                "solutionTags": [],
                "code": "```\\nRuntime Error\\nsql: insert into World (name, continent, area, population, gdp) values (?, ?, ?, ?, ?), values: [(\\'Afghanistan\\', \\'Asia\\', 652230, 25500100, 20343000000), (\\'Albania\\', \\'Europe\\', 28748, 2831741, 12960000000), (\\'Algeria\\', \\'Africa\\', 2381741, 37100000, 188681000000), (\\'Andorra\\', \\'Europe\\', 468, 78115, 3712000000), (\\'Angola\\', \\'Africa\\', 1246700, 20609294, 100990000000)]\\nTraceback (most recent call last):\\n  File \"driver.py\", line 68, in <module>\\n    cur.executemany(sql, M)\\nDataError: (\\'22003\\', u\\'[22003] [Microsoft][ODBC Driver 13 for SQL Server][SQL Server]Arithmetic overflow error converting expression to data type int. (8115) (SQLExecDirectW)\\')\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 284263,
                "title": "using-de-morgan-s-law-for-slight-improvement",
                "content": "By using De Morgan\\'s law of double negation we get a slight speed up since we avoid OR which is slow in SQL. #obfuscation.\\n\\n```\\nSELECT DISTINCT name, population, area \\n  FROM world \\n WHERE NOT ((area <= 3000000) AND (population <= 25000000))\\n```\\n\\nWierdly enough using DISTINCT gives a speed boost? Why?",
                "solutionTags": [],
                "code": "```\\nSELECT DISTINCT name, population, area \\n  FROM world \\n WHERE NOT ((area <= 3000000) AND (population <= 25000000))\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1565229,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1575231,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1882573,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1571781,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1888792,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1574893,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1946218,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1930622,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1827446,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1575698,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1565229,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1575231,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1882573,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1571781,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1888792,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1574893,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1946218,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1930622,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1827446,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1575698,
                "content": [
                    {
                        "username": "Viers",
                        "content": "A description says, that \\n\\n\"A country is big if it has an area of bigger than 3 million square km or a population of more than 25 million.\"\\n\\nyet an author's solution also think that the country is big if it has _exactly_ 3 million sq. km or 25 million population. There is no test for that case, but perhaps it will be better to update the author's solution to strict comparsion, or rewrite the description like\\n\\n\"A country is big if it has an area of 3 million square km or bigger, or a population of 25 million or more.\""
                    },
                    {
                        "username": "T2ABIZZY",
                        "content": "[@potatopie](/potatopie) mate this comment is from 2017"
                    },
                    {
                        "username": "potatopie",
                        "content": "it literally says at least lmfao"
                    },
                    {
                        "username": "Ajayyeet",
                        "content": "But i think requirement \"atleast\" matches with exactly what you are stating here, ( I believe, atleast supposed to mean equal or more) still there should \\'ve been a case for \\'=\\'."
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "shoryakumar_2k19ec182",
                        "content": "# Write your MySQL query statement below\\nselect name, population, area \\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc"
                    },
                    {
                        "username": "navneetsahu4248",
                        "content": "write population>=25000000"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "spoof99",
                        "content": "Why am I getting an invalid datatype error for this oracle query? I don\\'t see any issues and area, population are int types\\n\\n`SELECT name, population, area\\nFROM World\\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "srijamani0101",
                        "content": "it is atleast so it should be >= i.e, we need to be consider the equal also.select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\norder by name asc"
                    },
                    {
                        "username": "rajkumarmurmu132",
                        "content": "There is no problem in your code my friend\\nTry some other software to test your code\\nmaybe CMD"
                    },
                    {
                        "username": "Zhangguochao",
                        "content": "I try 2 method with \\nselect name, population, area from World where population > 25000000 or area > 3000000;\\nand\\nselect name, population, area from World where population > 25000000 union all select name, population, area from World where area > 3000000  ;\\n The solutions runtime is 3115ms and 3217 ms .\\nI see the create table sql don't have index ,so I want to know how to deal .\\nThank you see this.\\nI am Chinese, English is not very good, please be more."
                    },
                    {
                        "username": "at1026361244",
                        "content": "Hahahaha Be confident! "
                    },
                    {
                        "username": "ashwinparadkar",
                        "content": "PLease check your oracle execution once, the below SQL returns invalid identifier even though it works correctly in mysql\\nSELECT name,population,area\\nFROM world\\nWHERE area >= 3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "yash-bhootda",
                        "content": "ig world needs to World , select name , population , area from World where area>=3000000 or population>=25000000; this worked for me \n"
                    },
                    {
                        "username": "geminiwayne",
                        "content": "Runtime: 229 ms, faster than 74.37% of MySQL online submissions for Big Countries.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Big Countries.\\n\\nSELECT name,population,area from World where (area > 3000000) or (population>25000000)"
                    },
                    {
                        "username": "usha976",
                        "content": "why does it show accepted when I run the code, and when I submit it, I get a whole different table and the answer shows wrong?"
                    },
                    {
                        "username": "Shark_lamp",
                        "content": "Leetcode first checks code correctness with a few testcases, when you hit the \"submit\" button it tests a large volumes testcases to make sure your solution can handle all the edge cases. Until and unless your solution performs and handles all the edge cases or worst case scenarios as it should (according to the description) it won\\'t be submitted. That\\'s just how leetcode or any other coding platform works.\\n"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "Can you tell me \\nwhats is wrong in below query\\nselect name,area,population from World where area>= 3000000 and population >=25000000;"
                    },
                    {
                        "username": "harrysrangal",
                        "content": "You need to use `OR` instead of `And`"
                    },
                    {
                        "username": "vmdonz",
                        "content": "When I run my code, my output is aligned with the expected output. However when I submit, I get a totally different \"Expected\" output from the question?? Is there a question I\\'m missing here?\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 0          | 3000000 |"
                    },
                    {
                        "username": "kirankumar4you",
                        "content": "i  am also getting same error, i dont know wats wrong with this"
                    },
                    {
                        "username": "Palash5043",
                        "content": "i am also facing the same problem"
                    },
                    {
                        "username": "jolsby",
                        "content": "Seriously, there are \"easy\" problems that are 20x harder then this.\\n\\nWho the heck manages these rankings?"
                    }
                ]
            },
            {
                "id": 1567395,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1571780,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1568157,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1936981,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1918549,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1656751,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1571782,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 2005789,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 2004619,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1975179,
                "content": [
                    {
                        "username": "AmonTin",
                        "content": "\\u662F\\u6211\\u8FDB\\u9519\\u5730\\u65B9\\u4E86\\u4E48\\uFF0C\\u4E3A\\u5565\\u4F1A\\u6709\\u975E\\u7B97\\u6CD5\\u9898"
                    },
                    {
                        "username": "mui",
                        "content": "Area is also in square km and population is in person.\\n\\ni.e. An area of 652230 really means 652230 million square km and a population of 78115 really means 78115 people.\\n\\nThis may seem obvious but I guess it's better to state things clear: phrasing the question \"A country is big if it has an area of bigger than 3 million ~~square km~~ or a population of more than 25 million\" would make it clearer."
                    },
                    {
                        "username": "jasperjoe",
                        "content": "\\tSELECT name, population, area from world\\n\\twhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "anuragjain12",
                        "content": "World"
                    },
                    {
                        "username": "HarshdaK",
                        "content": "Why I am getting an error ORA-00902: invalid datatype.\\n\\nMy Query:\\nSELECT name, population, area from world\\nwhere area>3000000 or population>25000000"
                    },
                    {
                        "username": "abhinay_katta",
                        "content": " `SELECT name, population, area\\n FROM World\\n Where (area >= 3000000 ) OR (population >=25000000);`\\n\\nIts saying ORA-00902 : invalid datatype\\n\\nwhats the problem here?"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "ed3030",
                        "content": "I\\'m new here but something weird is happening. When I run the code I got the same Output as is Expected, but when I click Submit changes the output....is there a problem with this exercise?"
                    },
                    {
                        "username": "cqbaoyi",
                        "content": "Submit again. The OJ is unstable occasionally. (This statement is valid by 06/07/2017.)"
                    },
                    {
                        "username": "dineshveguru123",
                        "content": "You need to understand the condition and check the braces correctly."
                    },
                    {
                        "username": "Karthika_Subramanyam",
                        "content": "The code is same as you type in Jupyter Notebook, but also check the braces correctly to your solution which will help for who use colab and jupyter mostly."
                    },
                    {
                        "username": "dmjdeepak",
                        "content": "@leetcode, \\ncan you please guide me why its showing wrong answer in submitting query, although its not showing any error while ruining.   "
                    }
                ]
            },
            {
                "id": 1905085,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 1572909,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 1575476,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2074432,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2062133,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2060607,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2058938,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2058931,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2058439,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2054821,
                "content": [
                    {
                        "username": "vaidiksirsate",
                        "content": "Mistake in area it is 300000 instead of 3 million."
                    },
                    {
                        "username": "fly_mop",
                        "content": "see:\\nhttps://stackoverflow.com/questions/15361972/why-is-union-faster-than-an-or-statement\\n"
                    },
                    {
                        "username": "am282000",
                        "content": "`SELECT name,population,area from World where area>3000000 OR population >25000000`"
                    },
                    {
                        "username": "KarinaMS",
                        "content": "Can I do the tasks using pandas and SQL?"
                    },
                    {
                        "username": "sahoosatyaprakash88",
                        "content": "select name,population,area\\nfrom world\\nwhere area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "mutnejaanchal3008",
                        "content": "SELECT NAME , POPULATION, AREA FROM WORLD  WHERE AREA >=3000000   OR POPULATION >= 25000000; "
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT DISTINCT author_id AS id\\nFROM Views v\\nWHERE author_id = viewer_id\\nORDER BY id;"
                    },
                    {
                        "username": "Abajpai1105",
                        "content": "SELECT name, area, population\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000\\nORDER BY name ASC;"
                    },
                    {
                        "username": "bharathbolla0636",
                        "content": "when I run the code it shows , accepted \\nbut when i submit it ,,,it is showing error & fail"
                    },
                    {
                        "username": "sakshirvaidya143",
                        "content": "SELECT NAME,POPULATION,AREA FROM WORLD WHERE AREA>=3000000 OR POPULATION >=25000000;"
                    }
                ]
            },
            {
                "id": 2054061,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2043850,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2037901,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2036845,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2036826,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2036136,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2030284,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2029680,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2026358,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2024146,
                "content": [
                    {
                        "username": "dhbarnett",
                        "content": "For area we can only guess what the units are (probably same as requirement)"
                    },
                    {
                        "username": "Saniyabubere",
                        "content": "-- Selecting the name, population, and area from the \\'world\\' table\\nSELECT name, population, area\\n\\n-- Filtering the rows where either area is greater than or equal to 3,000,000 square kilometers\\n-- or population is greater than or equal to 25,000,000 people\\nFROM world\\n\\n-- The WHERE clause specifies the conditions for filtering\\nWHERE area >= 3,000,000 OR population >= 25,000,000;\\n"
                    },
                    {
                        "username": "BraveNutella",
                        "content": "ORACLE SQL\nSELECT name, population, area\nFROM (\n    SELECT name, population, area\n    FROM World\n    ORDER BY population DESC, area DESC\n)\nWHERE ROWNUM <= 2;"
                    },
                    {
                        "username": "OsamaEx",
                        "content": "It seems that nobody actually review these problems because it clearly say in the description that the area should be more than 3 million square kilometers, yet no such area exist in the database. If you take one digit out and make it 300,000, the answer will be accepted (which shouldn\\'t be) but then when you submit, it tells you that its wrong? how did 2.2k people vote for this one? it is incorrect."
                    },
                    {
                        "username": "alanyipforwork",
                        "content": "my anwser is :\\nselect name, population, area\\nfrom world\\nwhere area>3000000 or population>25000000\\norder by name asc\\n\\nbut why the output is :\\nOutput\\n| name        | population | area    |\\n| ----------- | ---------- | ------- |\\n| Afghanistan | 25500100   | 3000000 |\\n"
                    },
                    {
                        "username": "KarenRugerioA",
                        "content": "Some tips to use the DataFrames in this exercise that helped me:\n- To make conditionals you can use this structure = df[(conditional) | (conditional2)]\n- Do not forget to convert your Series, arrays, constants, dataclass or list-like objects (if created) into dataset to match the return function.\n- To select the columns you want to show (name, population, age) you can use double brackets to filter the columns by name (e.g., [['name column 1' , 'name column n' ]])\nResults:\n- Runtime 412ms\n- Memory 62.23mb"
                    },
                    {
                        "username": "MananGarg_coder",
                        "content": "The given description telling us that \"The country is big if it area is at least 3million sq km or a population of more than 25million\".\\nSo, in order to retrieve the data from the given database. We can make a check on the area and on the population. Since, there is a choice that if any or area and population condition meet, that country is big.\\nWe can make use of OR operator.\\n\\nSo, the solution is of just two lines.\\nThe first is line is retrieving the data from the given dataframe and storing it in the dataframe named dataframe_set and the second line is returning the required attribute to print as an output.\\n\\n    dataframe_set = world[(world[\\'area\\']>=3000000) | (world[\\'population\\']>=25000000)]\\n    return dataframe_set[[\\'name\\',\\'population\\',\\'area\\']]\\n\\n"
                    },
                    {
                        "username": "Joeyzaza93",
                        "content": "There\\'s a mismatch between the question and expected answer. It says \\'area of at least 3000000\\', yet the result only accepts less than or equal to 3000000. Also, the submission button."
                    },
                    {
                        "username": "nguyendinhthanhkma",
                        "content": "I think only write basic query: select name, population , area from World where population > 25000000\\n"
                    },
                    {
                        "username": "gseenu",
                        "content": "SELECT NAME,POPULATION,AREA\\nFROM World\\nwhere area between(600000 and 3000000);\\nerror is missing right parenthesis..Any body know this?"
                    }
                ]
            },
            {
                "id": 2016958,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 2015092,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 2011293,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 2010068,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 2006107,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 2000353,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 1999392,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 1995779,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 1995777,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 1994786,
                "content": [
                    {
                        "username": "suyash_5050",
                        "content": "Discussion || \\u091A\\u0930\\u094D\\u091A\\u093E || \\u092C\\u093E\\u0924\\u091A\\u0940\\u0924 || entretien || d\\u0259\\u02C8sk\\u0259SH(\\u0259)n || \\u8B70\\u8AD6 || \\u8BA8\\u8BBA  .......... plz dont post solutions \\uD83D\\uDE13 \\n"
                    },
                    {
                        "username": "vishalkumarrajput",
                        "content": "select name,population,area from World\\nwhere population>=25000000 or area>=3000000;"
                    },
                    {
                        "username": "Nadezhda_o",
                        "content": "very strange, but in the source data there are no large countries with area > 3,000,000, and the output table shows it. Or here it is necessary to take into account the units of change sq.km or sqm???????"
                    },
                    {
                        "username": "edithi",
                        "content": "I\\'ve used the .query() method to directly filter and select the desired columns in a single step. This can lead to improved performance and memory efficiency, especially for larger datasets."
                    },
                    {
                        "username": "santiagoal",
                        "content": "how does it work?"
                    },
                    {
                        "username": "VIGNESH124",
                        "content": "error exist in area and population table provide in example ,\\nmismatch of data is exist "
                    },
                    {
                        "username": "LOLLAPALOOOOZA",
                        "content": "Question about the runtime: I run two same queries, one of which has space like: \\nSELECT name, population, area \\nFROM world \\nWHERE area >= 3000000 or population >=25000000;\\n\\nThe other one is just a line like: \\nSELECT name, population, area FROM world WHERE area >= 3000000 or population >=25000000;\\n\\nWhy does the first one take longer to run? \\n"
                    },
                    {
                        "username": "rejent",
                        "content": "`SELECT name, population, area FROM World` \\n`WHERE area>=3000000 OR population>=25000000`\\n`ORDER BY name ASC;`"
                    },
                    {
                        "username": "twenfy",
                        "content": "1 day of 30 Days of Pandas: 595. Big Countries\\nDone "
                    },
                    {
                        "username": "twenfy",
                        "content": "30 Days of Pandas:\\n1.day: 595. Big Countries\\n\\nimport pandas as pd\\n\\ndef big_countries(world: pd.DataFrame) -> pd.DataFrame:\\n  return world[(world.area>=3000000) | (world.population>=25000000)].iloc[:, [0,3,2]]"
                    },
                    {
                        "username": "Roncartavio99",
                        "content": "select world.name,population,area from world where\\npopulation>=\\'25000000\\' and area <=\\'3000000\\'  , Me bota error en submit pero en Run sale bien."
                    }
                ]
            },
            {
                "id": 1978101,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1977094,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1972913,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1972911,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1965513,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1956656,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1952901,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1940294,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1925118,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1921373,
                "content": [
                    {
                        "username": "premkumarlingala9",
                        "content": "SELECT name, population, area\\nFROM World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "a_andreasian",
                        "content": "be careful: the tasks says `or` not `and` "
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "SuperSrimanth007",
                        "content": "what I have to do"
                    },
                    {
                        "username": "Ajaynl1489",
                        "content": "select Name, area, population\\nfrom world\\nwhere area > \\'3000000\\'\\nor population > \\'25000000\\';\\n\\nAfghanistan \\'area\\' seems to be less (652230  when compared to 3000000)?\\nisn\\'t it?\\n"
                    },
                    {
                        "username": "Nidhi96",
                        "content": "Select name, population, area from World\\nwhere area >= 3000000 OR population >= 25000000"
                    },
                    {
                        "username": "ahrahat",
                        "content": "Runtime Error | ORA-00902: invalid datatype\\n\\n `SELECT NAME, POPULATION, AREA\\nFROM WORLD\\nWHERE AREA >= 3000000\\n   OR POPULATION >= 25000000;`\\n\\nWhat is wrong here?"
                    },
                    {
                        "username": "user1313jr",
                        "content": "There\\'s nothing hard in this query .... simple but always showing invalid datatype....bro where\\'s the wrong in this 10 words of query?ughhhh"
                    },
                    {
                        "username": "Swap_12345",
                        "content": "SELECT name,population,area FROM world\\nWHERE area >= 3000000 OR population >= 25000000;\\n\\n what is wrong with above query \\nCan anyone tell me?"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "in oracle this quary didn\\'t work I think that it is from leetcode.com"
                    },
                    {
                        "username": "prathams29",
                        "content": "I copy pasted your query and ran it. It worked for me. Try again."
                    },
                    {
                        "username": "Linco011",
                        "content": "I found for my results I get the correct answer if I replace 3 million with 300 thousand for the example.\\nthe country with the biggest area is 2,381,741 on this list which is less than 3 million. \\n\\nThe question or the test case results need to be corrected"
                    }
                ]
            },
            {
                "id": 1915448,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1897893,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1887017,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1872023,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1863575,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1860979,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1860808,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1859868,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1855535,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1854085,
                "content": [
                    {
                        "username": "babiesalex48",
                        "content": " `your inline code...your inline code...`"
                    },
                    {
                        "username": "sonaligobbani",
                        "content": "select name,population,area\nfrom World\nwhere area >= 3000000\nor population >= 25000000"
                    },
                    {
                        "username": "sardorstudent0618",
                        "content": "this problem is\\'not right \\n\\n `SELECT  name,population,area \\nFROM World \\nWHERE area>=3000000 \\nOR population>=25000000;`"
                    },
                    {
                        "username": "narayandas",
                        "content": "SELECT name, population, area FROM World WHERE area>=3000000 or population>=25000000"
                    },
                    {
                        "username": "user5274h",
                        "content": "I am executing this SQL but getting ORA-00902: invalid datatype. Any pointers why this error is coming\\n\\nselect name, population, area from world\\nwhere (area>=3000000 or population>=25000000);"
                    },
                    {
                        "username": "Raveena05",
                        "content": "select name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "yun-ju",
                        "content": "We would like to gather the name, area, and population of Big country list.\\nand according to the description, the definition of the big country is \\narea of at least three million (i.e., 3000000 km2) or population of at least twenty-five million.\\n\\nThus, I would like to gather the raw of name, area, and population and set the condition based on the descriptions.\\nHere is my answer.\\nSELECT name, area, population from World\\nWHERE area >= 3000000 OR population >= 25000000;\\n"
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below is the query that I wrote,\\nselect wd.name,wd.population,wd.area from World as wd where wd.area >=3000000 or population >= 25000000"
                    },
                    {
                        "username": "gauravgurjar",
                        "content": "My code is failing on 4th testcases. it passed through 1-3 but 4th one is causing Wrong Answer. Anybody knows why?"
                    },
                    {
                        "username": "Lumina01",
                        "content": "Select name, population, area \\nFrom World \\nWhere population >= 25000000 and area >= 3000000;"
                    }
                ]
            },
            {
                "id": 1850140,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1846761,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1846044,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1845546,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1841371,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1835687,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1832316,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1807326,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1804188,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1799596,
                "content": [
                    {
                        "username": "awnishsingh",
                        "content": "select  name, population,area from World\\nwhere (area>=3000000 OR population>=25000000);"
                    },
                    {
                        "username": "Jun1046",
                        "content": "I cannot insert info. since the error say Out of range value for gdp column. Anyone know how to fix it?   "
                    },
                    {
                        "username": "lingesh5022",
                        "content": "Full Motion as describe it in a gaming context is the tracking of the players body as an input device. It should be noted that since Nintendo has yet to prove that the Motion Plus can in fact do one to one motion tracking."
                    },
                    {
                        "username": "yogesh_niraula",
                        "content": "the area of Afghanistan is 652k and the area of Algeria is 2.38 million as it is shown here so the error in submission comes from the wrong answer either in scripting or results. As of now, there is no way to get a correct script that gives the right answer."
                    },
                    {
                        "username": "surajon727",
                        "content": "SELECT name, population, area\\nfrom World\\nWHERE area>3000000 OR population>25000000;\\n\\nwhat\\'s the error in the above code ?"
                    },
                    {
                        "username": "attiqueminhas",
                        "content": "there is something wrong i wrote the correct querry but they are giving some errors\\nCREATE TABLE World_table (\\n    name varchar(100) not null,\\n    continent varchar(40) not null,\\n    area int not null,\\n    population int not null,\\n    gdp int not null,\\n    primary key(name)\\n);\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Afgahanistan\\',\\'Asia\\',652230,25500100,20343000000)\\n\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Albania\\',\\'Europe\\',28748,2831741,12960000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Algeria\\',\\'Africa\\',2381741,37100000,188681000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Andorra\\',\\'Europe\\',468,78115,3712000000)\\ninsert into World_table(name, continent, area, population,gdp) values (\\'Angola\\',\\'Africa\\',1246700,20609294,100990000000)\\n\\nselect name,area,population from world_table where area >= 3000000 and population >= 25000000"
                    },
                    {
                        "username": "pedromesq7",
                        "content": "I write this \\n\\nselect name, population, area\\nfrom world\\nwhere area > 3000000 or population > 25000000\\n\\nand it says it is wrong answer... why? thank you in advance!"
                    },
                    {
                        "username": "rrafayy",
                        "content": "same here"
                    },
                    {
                        "username": "vishalparmar8103",
                        "content": "# Write your MySQL query statement below\\nselect name, population , area from world\\nwhere area >=3000000 or population >=25000000;"
                    },
                    {
                        "username": "Chetana_Reddy3",
                        "content": "select name,population,area \\nfrom World\\nWhere area>=3000000 or population>=25000000; "
                    },
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population check (area>=3000000 and population>=25000000) limit (2);\\n"
                    }
                ]
            },
            {
                "id": 1799592,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1793278,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1792170,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1790995,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1787786,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1783965,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1783108,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1781592,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1781539,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1781064,
                "content": [
                    {
                        "username": "akanksha7252",
                        "content": "select name, population, area from world order by population desc limit(2);"
                    },
                    {
                        "username": "pavanipriyal28",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>25000000 or population=25000000\\n\\n"
                    },
                    {
                        "username": "dheerajbhor77",
                        "content": "select name,population,area from world where area > 3000000 OR population > 25000000;\\ni\\'ts also use.\\n"
                    },
                    {
                        "username": "rohit7080",
                        "content": "select name, population, area\\nfrom world\\nwhere area>=3000000 or population>=25000000\\n"
                    },
                    {
                        "username": "husnabanu413",
                        "content": "select name,population, area from World where population>=25000000\\nOr\\narea>=3000000\\n\\n--pretty easy was succeded in one go"
                    },
                    {
                        "username": "mayankpravash",
                        "content": "Write an SQL query to report the name, population, and area of the big countries.\\nReturn the result table in any order.\\n\\nselect name, population, area\\nfrom world\\nwhere area>= 3000000 and population>=25000000;\\n\\nWhy the console displays WRONG ANSWER although the output seems the same as desired output and I could not find the error here."
                    },
                    {
                        "username": "ajay203",
                        "content": " `select name,population,area from world where area>= 3000000 union select name,population,area from world where population >=25000000 ;` this took 150ms to execute while \\n` select name,population,area from world where area>= 3000000 or population >=25000000 ; ` this took 190ms.\\nThe union function is faster than that of OR function. "
                    },
                    {
                        "username": "APJS",
                        "content": "SELECT \\n    name,\\n    population, \\n    area\\nFROM world \\nWHERE area >= 3000000 \\n    OR population >= 25000000;"
                    },
                    {
                        "username": "oscaragudelo",
                        "content": "Still trying to figure all of this out hopefully I can teach myself SQL "
                    },
                    {
                        "username": "yuvrajghare",
                        "content": "SELECT\\n    name, population, area\\nFROM\\n    world\\nWHERE\\n    area >= 3000000 OR population >= 25000000"
                    }
                ]
            },
            {
                "id": 1780684,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1780474,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1774189,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1759014,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1737306,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1732585,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1731971,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1725654,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1722767,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1718674,
                "content": [
                    {
                        "username": "surajpatel786",
                        "content": "# Write your MySQL query statement below\\nselect name, population ,area from world where area >= \\'3000000\\' or population >= \\'25000000\\';"
                    },
                    {
                        "username": "Abhilash_13",
                        "content": "Select name, area, population from world where population>= 25000000"
                    },
                    {
                        "username": "pth_1641",
                        "content": "`select name, population, area \\nfrom World \\nwhere population >= 25000000 or area >= 3000000 `"
                    },
                    {
                        "username": "bachtouli",
                        "content": " `your inline code...your inline code...`\\nSelect name, population, area\\nFrom world\\nWhere (area>=3000000) or (population>= 25000000);"
                    },
                    {
                        "username": "Ashfaq31",
                        "content": "select name, population, area from World\\nwhere area > 3000000 or population >= 25000000"
                    },
                    {
                        "username": "deleted_user",
                        "content": "use the select ,from and where with the >=operator and the numbers"
                    },
                    {
                        "username": "pankajkumarr26",
                        "content": "how to submit our query?"
                    },
                    {
                        "username": "AdityaBhate",
                        "content": "\\n# DOGLAPAN \\u2764\\uFE0F\\nhttps://leetcode.com/problems/big-countries/solutions/2943033/doglapan/?orderBy=newest_to_oldest"
                    },
                    {
                        "username": "pchidr2",
                        "content": "Select name,population,area from World where population>25000000\\nI have got the same output as the expected one. But when I submit the output it says the wrong answer. Can someone please tell me where I went wrong?"
                    },
                    {
                        "username": "angelo_igitego",
                        "content": "Hi pchidr2, it seems like you are using a strict operator of `greater` (`>`). I believe you should use `greater or equal` (`>=`). Good luck!"
                    },
                    {
                        "username": "tohir___jon",
                        "content": "i have tried submit my answers several times but it says wrong answer but it was accepted 100% when i test then i tried (>=) then it worked .The wrong solution or wrong description\\uD83E\\uDD28"
                    }
                ]
            },
            {
                "id": 1718394,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1717187,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1714964,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1710847,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1710820,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1707474,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1695354,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1684764,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1684018,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            },
            {
                "id": 1675047,
                "content": [
                    {
                        "username": "abhishekmishra9051",
                        "content": "SELECT name, population, area FROM World\\nWHERE area>=3000000 OR population >= 25000000;"
                    },
                    {
                        "username": "sayeedatabassum",
                        "content": "Big countries, while i run it shows accepted but when i submit it shows wrong. why does it show like that?"
                    },
                    {
                        "username": "abhaysinghal2912",
                        "content": "actually i wrote correct command but showing error and not getting why;"
                    },
                    {
                        "username": "rvino12",
                        "content": "for  million value with datatype should i use\\n"
                    },
                    {
                        "username": "sandip_gangurde",
                        "content": "select name, population, area from World  where area>=3000000 or population>=25000000;"
                    },
                    {
                        "username": "hz885323",
                        "content": "hi guys, I\\'m the beginner in MySQL.\\nI\\'m wondering that why my coding didn\\'t work.\\nHere is my coding as below\\n\\nSELECT \\'name\\', \\'population\\', \\'area\\' \\nFROM \\'World\\' \\nWHERE \\'area\\' >= 300000 or \\'population\\' >=25000000;\\n\\nif someone reply me, I\\'ll be really appreciated. :)\\nthank you!"
                    },
                    {
                        "username": "carlosdgarcia",
                        "content": "Were you able to figure it out?"
                    },
                    {
                        "username": "user5303rN",
                        "content": "problem submit "
                    },
                    {
                        "username": "crashidpa",
                        "content": "select \\nname,\\npopulation,\\narea from world\\nwhere area >= 3000000 or population >=25000000"
                    },
                    {
                        "username": "sravanikondapalli5",
                        "content": "SELECT name, population, area from world\\nwhere area>3000000 or population>=25000000;"
                    },
                    {
                        "username": "Reshu_20",
                        "content": "SELECT name, population, area\\nFROM World where (area>3000000) OR (population >=25000000);\\n\\nThis worked for me!"
                    }
                ]
            }
        ]
    }
]