[
    {
        "title": "Maximum Average Pass Ratio",
        "question_content": "There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array classes, where classes[i] = [passi, totali]. You know beforehand that in the ith class, there are totali total students, but only passi number of students will pass the exam.\nYou are also given an integer extraStudents. There are another extraStudents brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the extraStudents students to a class in a way that maximizes the average pass ratio across all the classes.\nThe pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.\nReturn the maximum possible average pass ratio after assigning the extraStudents students. Answers within 10-5 of the actual answer will be accepted.\n&nbsp;\nExample 1:\n\nInput: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\nOutput: 0.78333\nExplanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n\nExample 2:\n\nInput: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\nOutput: 0.53485\n\n&nbsp;\nConstraints:\n\n\t1 <= classes.length <= 105\n\tclasses[i].length == 2\n\t1 <= passi <= totali <= 105\n\t1 <= extraStudents <= 105",
        "solutions": [
            {
                "id": 1108305,
                "title": "c-greedy-max-heap-o-m-log-n",
                "content": "How much of profit in score can we get if we add one extra student to a particular class? Send an extra student to the class with the most profit; repeat till you run out of students.\\n\\nLet\\'s track profits for all classes in a max heap. While we still have extra students, we pick a class that gives us the maximum profit, add a student, calculate new profit and put it back to the heap.\\n\\nTo avoid iterating through the max heap in the end, we can track the total score as we go.\\n\\n**C++**\\n```cpp\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n    auto profit = [&](double pass, double total) {\\n        return (pass + 1) / (total + 1) - pass / total;\\n    };\\n    double total = 0;\\n    priority_queue<pair<double, array<int, 2>>> pq;\\n    for (auto &c : classes) {\\n        total += (double) c[0] / c[1];\\n        pq.push({profit(c[0], c[1]), {c[0], c[1]}});\\n    }\\n    while (extraStudents--) {\\n        auto [added_profit, c] = pq.top(); pq.pop();\\n        total += added_profit;\\n        pq.push({profit(c[0] + 1, c[1] + 1), {c[0] + 1, c[1] + 1}});\\n    }\\n    return total / classes.size();\\n}\\n```\\n**Complexity Analysis**\\n- Time: O(m log n), where n and m are the number of classes and extra students.\\n\\t- Caveat: the complexity for the code above is O((n + m) log n). To achieve O(m log n), we need construct the heap in O(n), e.g. by using `make_heap`.\\n\\t- For the purpose of complexity analsyis, I assume that we build the initial heap in O(n).\\n- Memory: O(n) to hold the information about classes.\\n",
                "solutionTags": [],
                "code": "```cpp\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n    auto profit = [&](double pass, double total) {\\n        return (pass + 1) / (total + 1) - pass / total;\\n    };\\n    double total = 0;\\n    priority_queue<pair<double, array<int, 2>>> pq;\\n    for (auto &c : classes) {\\n        total += (double) c[0] / c[1];\\n        pq.push({profit(c[0], c[1]), {c[0], c[1]}});\\n    }\\n    while (extraStudents--) {\\n        auto [added_profit, c] = pq.top(); pq.pop();\\n        total += added_profit;\\n        pq.push({profit(c[0] + 1, c[1] + 1), {c[0] + 1, c[1] + 1}});\\n    }\\n    return total / classes.size();\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108263,
                "title": "python-java-max-heap-clean-concise",
                "content": "**Idea**\\n- How much profit we can get if we add one `extraStudents` to a particular class `(pass, total`)? This profit can be defined as: `(pass+1)/(total+1) - pass/total`.\\n- For each student from `extraStudents`, we try to add to a class which will increase its profit maximum.\\n- We can use `maxHeap` structure which can give us the class which has maximum profit after adding.\\n\\n**Complexity:**\\n- Time: \\n\\t- Python: `O(M*logN + N)`, where `M` is `extraStudents` and `N` is number of classes.\\n\\t- Java: `O(M*logN + N*logN)`\\n- Space: `O(N)`\\n\\n**Python**\\n```python\\nclass Solution(object):\\n    def maxAverageRatio(self, classes, extraStudents):\\n        def profit(a, b):\\n            return (a + 1) / (b + 1) - a / b\\n\\n        maxHeap = []\\n        for a, b in classes:\\n            a, b = a * 1.0, b * 1.0  # Convert int to double\\n            maxHeap.append((-profit(a, b), a, b))\\n        heapq.heapify(maxHeap)  # Heapify maxHeap cost O(N)\\n\\n        for _ in range(extraStudents):\\n            d, a, b = heapq.heappop(maxHeap)\\n            heapq.heappush(maxHeap, (-profit(a + 1, b + 1), a + 1, b + 1))\\n\\n        return sum(a / b for d, a, b in maxHeap) / len(classes)\\n```\\n\\n**Java**\\n```java\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> maxHeap = new PriorityQueue<>(Comparator.comparingDouble(o -> -o[0])); // Max heap compared by first value in decreasing order.\\n        for (int[] c : classes) {\\n            double a = c[0], b = c[1];\\n            maxHeap.offer(new double[]{profit(a, b), a, b});\\n        }\\n        while (extraStudents-- > 0) {\\n            double[] top = maxHeap.poll();\\n            double a = top[1], b = top[2];\\n            maxHeap.offer(new double[]{profit(a+1, b+1), a+1, b+1});\\n        }\\n        double ans = 0.0d;\\n        while (!maxHeap.isEmpty()) {\\n            double[] top = maxHeap.poll();\\n            double a = top[1], b = top[2];\\n            ans += a/b;\\n        }\\n        return ans / classes.length;\\n    }\\n    double profit(double a, double b) {\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```python\\nclass Solution(object):\\n    def maxAverageRatio(self, classes, extraStudents):\\n        def profit(a, b):\\n            return (a + 1) / (b + 1) - a / b\\n\\n        maxHeap = []\\n        for a, b in classes:\\n            a, b = a * 1.0, b * 1.0  # Convert int to double\\n            maxHeap.append((-profit(a, b), a, b))\\n        heapq.heapify(maxHeap)  # Heapify maxHeap cost O(N)\\n\\n        for _ in range(extraStudents):\\n            d, a, b = heapq.heappop(maxHeap)\\n            heapq.heappush(maxHeap, (-profit(a + 1, b + 1), a + 1, b + 1))\\n\\n        return sum(a / b for d, a, b in maxHeap) / len(classes)\\n```\n```java\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> maxHeap = new PriorityQueue<>(Comparator.comparingDouble(o -> -o[0])); // Max heap compared by first value in decreasing order.\\n        for (int[] c : classes) {\\n            double a = c[0], b = c[1];\\n            maxHeap.offer(new double[]{profit(a, b), a, b});\\n        }\\n        while (extraStudents-- > 0) {\\n            double[] top = maxHeap.poll();\\n            double a = top[1], b = top[2];\\n            maxHeap.offer(new double[]{profit(a+1, b+1), a+1, b+1});\\n        }\\n        double ans = 0.0d;\\n        while (!maxHeap.isEmpty()) {\\n            double[] top = maxHeap.poll();\\n            double a = top[1], b = top[2];\\n            ans += a/b;\\n        }\\n        return ans / classes.length;\\n    }\\n    double profit(double a, double b) {\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108372,
                "title": "c-explained-priority-queue-greedy-solution-find-the-delta",
                "content": "There are few incorrect approaches:\\n1. Choosing the smallest class size\\n2. Choosing the smallest pass size\\n3. Choosing the least pass ratio\\n\\nInstead, the correct approach is:\\n**Find the difference**, namely the delta. \\n\\nFor example, even though `1/2` and `10/20` has the same ratio. However, `1/2`\\'s delta is equal to `(1+1)/(2+1)-1/2`, which is much greater than `(10+1)/(20+1)-10/20`. \\n\\nTherefore, we always greedily select the one with the greatest delta.\\n\\nWe can acheive this using a max heap. In C++, we can use the **priority queue**.\\n\\n[C++]: \\n\\n```\\nstruct cmp{\\n    bool operator()(pair<int,int> a, pair<int,int> b){\\n        double ad = (a.first+1)/(double)(a.second+1) - (a.first)/(double)a.second;\\n        double bd = (b.first+1)/(double)(b.second+1) - (b.first)/(double)b.second;\\n        return ad < bd;\\n    }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double acc = 0;\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> que;\\n        for(vector<int> i: classes)\\n            que.push(make_pair(i[0],i[1]));\\n        while(extraStudents--){\\n            pair<int,int> cur = que.top(); que.pop();\\n            cur.first++, cur.second++;\\n            que.push(cur);\\n        }\\n        while(!que.empty()){\\n            pair<int,int> cur = que.top(); que.pop();\\n            acc += cur.first / (double) cur.second;\\n        }\\n        return acc / (double) classes.size();\\n    }\\n};\\n```\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nstruct cmp{\\n    bool operator()(pair<int,int> a, pair<int,int> b){\\n        double ad = (a.first+1)/(double)(a.second+1) - (a.first)/(double)a.second;\\n        double bd = (b.first+1)/(double)(b.second+1) - (b.first)/(double)b.second;\\n        return ad < bd;\\n    }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double acc = 0;\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> que;\\n        for(vector<int> i: classes)\\n            que.push(make_pair(i[0],i[1]));\\n        while(extraStudents--){\\n            pair<int,int> cur = que.top(); que.pop();\\n            cur.first++, cur.second++;\\n            que.push(cur);\\n        }\\n        while(!que.empty()){\\n            pair<int,int> cur = que.top(); que.pop();\\n            acc += cur.first / (double) cur.second;\\n        }\\n        return acc / (double) classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108389,
                "title": "python-greedy-solution-using-priority-queue",
                "content": "# **Explanation**\\nGreedily take the best current choice using priority queue.\\n<br>\\n\\n# **Prove**\\nFor each class, the delta is decreasing when we add extra students.\\nThe best local option is always the best.\\nIt\\'s a loss if we don\\'t take it.\\n<br>\\n\\n# **Complexity**\\nTime `O(n + klogn)`\\nSpace `O(n)`\\n<br>\\n\\n**Python3**\\n```py\\n    def maxAverageRatio(self, A, k):\\n        h = [(a / b - (a + 1) / (b + 1), a, b) for a, b in A]\\n        heapify(h)\\n        while k:\\n            v, a, b = heapq.heappop(h)\\n            a, b = a + 1, b + 1\\n            heapq.heappush(h, (-(a + 1) / (b + 1) + a / b, a, b))\\n            k -= 1\\n        return sum(a / b for v, a, b in h) / len(h)\\n```\\n",
                "solutionTags": [],
                "code": "```py\\n    def maxAverageRatio(self, A, k):\\n        h = [(a / b - (a + 1) / (b + 1), a, b) for a, b in A]\\n        heapify(h)\\n        while k:\\n            v, a, b = heapq.heappop(h)\\n            a, b = a + 1, b + 1\\n            heapq.heappush(h, (-(a + 1) / (b + 1) + a / b, a, b))\\n            k -= 1\\n        return sum(a / b for v, a, b in h) / len(h)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108259,
                "title": "java-priorityqueue",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> queue = new PriorityQueue<>(new Cmp());\\n        for(int[] c: classes) queue.offer(c);   // add all to priority queue\\n        for(;extraStudents > 0;extraStudents--) {    // add extra student to class that will max increase the average\\n            int[] c = queue.poll();\\n            c[0]++; c[1]++;\\n            queue.offer(c);\\n        }\\n        double result =0;\\n        while(!queue.isEmpty()) {       // Calculate sum of pass ratios\\n            int[] c = queue.poll();\\n            result += (double)c[0]/c[1];\\n        }\\n        return result/classes.length;    // return average\\n    }\\n}\\nclass Cmp implements Comparator<int[]> {  // to sort in descending order of diff when 1 is added to class\\n    public int compare(int[] x, int[] y) {\\n        double xDiff = (double)(x[0]+1)/(x[1]+1) - (double)x[0]/x[1], yDiff = (double)(y[0]+1)/(y[1]+1) - (double)y[0]/y[1];\\n        return xDiff > yDiff? -1 : 1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> queue = new PriorityQueue<>(new Cmp());\\n        for(int[] c: classes) queue.offer(c);   // add all to priority queue\\n        for(;extraStudents > 0;extraStudents--) {    // add extra student to class that will max increase the average\\n            int[] c = queue.poll();\\n            c[0]++; c[1]++;\\n            queue.offer(c);\\n        }\\n        double result =0;\\n        while(!queue.isEmpty()) {       // Calculate sum of pass ratios\\n            int[] c = queue.poll();\\n            result += (double)c[0]/c[1];\\n        }\\n        return result/classes.length;    // return average\\n    }\\n}\\nclass Cmp implements Comparator<int[]> {  // to sort in descending order of diff when 1 is added to class\\n    public int compare(int[] x, int[] y) {\\n        double xDiff = (double)(x[0]+1)/(x[1]+1) - (double)x[0]/x[1], yDiff = (double)(y[0]+1)/(y[1]+1) - (double)y[0]/y[1];\\n        return xDiff > yDiff? -1 : 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1280525,
                "title": "easy-c-solution-commented-fully-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n     \\n        //among all classes i choose the one which will have a larger growth in the pass ratio if i add one student to the class\\n        \\n        //add one student to the each class and store the growth (difference) in the pass ratio to a max heap\\n        using pi=pair<double,pair<int,int>>;\\n        priority_queue<pair<double,pair<int,int>>> pq;\\n        //double is used to store the difference\\n        //pair.first stores the pass students in the class\\n        //pair.second stores the total students in the class\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int pass=classes[i][0];\\n            int total=classes[i][1];\\n            \\n            //calculate the growth\\n           long  double growth=(double)(pass+1)/(total+1) - (double)(pass)/(total);\\n            pq.push({growth,{pass,total}});\\n        }\\n        \\n        //now i have not added any students to any class and the number of students still remains the same\\n        //i have just want to know which class would have more growth if i add one \\n        //so i pushed all the classes growth to max heap\\n        \\n        while(extraStudents)\\n        {\\n            pi top= pq.top();\\n            pq.pop();\\n            extraStudents--;\\n            //calculate the growth again if i add one student to the class at the top\\n            int pass=top.second.first;\\n            int total=top.second.second;\\n            pass++;\\n            total++;\\n            long double growth=(double)(pass+1)/(total+1) - (double)(pass)/(total);\\n            pq.push({growth,{pass,total}});\\n        }\\n        \\n        //now pop out the elements from pq and calculate the pass ratio\\n        double res=0;\\n        while(!pq.empty())\\n        {\\n            //calculate the pass/total;\\n            res+=(double)(pq.top().second.first)/(pq.top().second.second);\\n            pq.pop();\\n        }\\n        return (double)res/(classes.size());\\n        \\n    }\\n};\\n```\\n**Upvote if this helps you :)**",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n     \\n        //among all classes i choose the one which will have a larger growth in the pass ratio if i add one student to the class\\n        \\n        //add one student to the each class and store the growth (difference) in the pass ratio to a max heap\\n        using pi=pair<double,pair<int,int>>;\\n        priority_queue<pair<double,pair<int,int>>> pq;\\n        //double is used to store the difference\\n        //pair.first stores the pass students in the class\\n        //pair.second stores the total students in the class\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int pass=classes[i][0];\\n            int total=classes[i][1];\\n            \\n            //calculate the growth\\n           long  double growth=(double)(pass+1)/(total+1) - (double)(pass)/(total);\\n            pq.push({growth,{pass,total}});\\n        }\\n        \\n        //now i have not added any students to any class and the number of students still remains the same\\n        //i have just want to know which class would have more growth if i add one \\n        //so i pushed all the classes growth to max heap\\n        \\n        while(extraStudents)\\n        {\\n            pi top= pq.top();\\n            pq.pop();\\n            extraStudents--;\\n            //calculate the growth again if i add one student to the class at the top\\n            int pass=top.second.first;\\n            int total=top.second.second;\\n            pass++;\\n            total++;\\n            long double growth=(double)(pass+1)/(total+1) - (double)(pass)/(total);\\n            pq.push({growth,{pass,total}});\\n        }\\n        \\n        //now pop out the elements from pq and calculate the pass ratio\\n        double res=0;\\n        while(!pq.empty())\\n        {\\n            //calculate the pass/total;\\n            res+=(double)(pq.top().second.first)/(pq.top().second.second);\\n            pq.pop();\\n        }\\n        return (double)res/(classes.size());\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108491,
                "title": "python-100-efficient-solution-easy-to-understand-with-comments-and-explanation",
                "content": "**Key Idea:** We need to keep assigning the remaining extra students to the class which can experience the greatest impact. \\n\\nLet see an example below, if we have following clasess - [[2,4], [3,9], [4,5], [2,10]], then the impact of assignment students to each class can be defined as,\\n\\n```\\n# In simple terms it can be understood as follows,\\n\\ncurrentRatio = passCount/totalCount\\nexpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\nimpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\nOR\\n\\n# Formula to calculate impact of assigning a student to a class\\nimpacts[i] = (classes[i][0]+1) / (classes[i][1]+1) - classes[i][0]/classes[i][1]\\ni.e.\\nimpacts[0] -> (4+1)/(2+1)-4/2 \\nimpacts[1] -> (3+1)/(9+1)-3/9 \\n.\\n.\\netc.\\n```\\n\\nAnd, once we assign a student to a class, then we need the class with \"next\" greatest impact. We know that heap is perfect candidate for scenarios in which you need to pick the least/greatest of all the collections at any point of time.\\n\\nHence, we can leverage that to fetch the greatest impacts in all the cases. \\n\\n**Note:** in below code we have negated (observe `-` sign ), because by default python heaps are min heaps. Hence, it\\'s sort of a workaround to make our logic work :)\\n\\n```\\nclass Solution:\\n\\tdef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\t\\t\\n\\t\\tn = len(classes)\\n\\t\\t\\n\\t\\timpacts = [0]*n\\n\\t\\tminRatioIndex = 0\\n\\t\\t\\n\\t\\t# calculate and store impacts for each class in form of tuples -> (-impactValue, passCount, totalCount)\\n\\t\\tfor i in range(n):\\n\\t\\t\\tpassCount = classes[i][0]\\n\\t\\t\\ttotalCount = classes[i][1]\\n\\t\\t\\t\\n\\t\\t\\t# calculate the impact  for class i\\n\\t\\t\\tcurrentRatio = passCount/totalCount\\n\\t\\t\\texpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\n\\t\\t\\timpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\n\\t\\t\\timpacts[i] = (-impact, passCount, totalCount)  # note the - sign for impact\\n\\t\\t\\t\\n\\t\\theapq.heapify(impacts)\\n\\t\\t\\n\\t\\twhile(extraStudents > 0):\\n\\t\\t\\t# pick the next class with greatest impact \\n\\t\\t\\t_, passCount, totalCount = heapq.heappop(impacts)\\n\\t\\t\\t\\n\\t\\t\\t# assign a student to the class\\n\\t\\t\\tpassCount+=1\\n\\t\\t\\ttotalCount+=1\\n\\t\\t\\t\\n\\t\\t\\t# calculate the updated impact  for current class\\n\\t\\t\\tcurrentRatio = passCount/totalCount\\n\\t\\t\\texpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\n\\t\\t\\timpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\n\\t\\t\\t# insert updated impact back into the heap\\n\\t\\t\\theapq.heappush(impacts, (-impact, passCount, totalCount))\\n\\t\\t\\textraStudents -= 1\\n\\t\\t\\n\\t\\tresult = 0\\n\\t\\t\\t\\n\\t\\t# for all the updated classes calculate the total passRatio \\n\\t\\tfor _, passCount, totalCount in impacts:\\n\\t\\t\\tresult += passCount/totalCount\\n\\t\\t\\t\\n\\t\\t# return the average pass ratio\\n\\t\\treturn result/n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n# In simple terms it can be understood as follows,\\n\\ncurrentRatio = passCount/totalCount\\nexpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\nimpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\nOR\\n\\n# Formula to calculate impact of assigning a student to a class\\nimpacts[i] = (classes[i][0]+1) / (classes[i][1]+1) - classes[i][0]/classes[i][1]\\ni.e.\\nimpacts[0] -> (4+1)/(2+1)-4/2 \\nimpacts[1] -> (3+1)/(9+1)-3/9 \\n.\\n.\\netc.\\n```\n```\\nclass Solution:\\n\\tdef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\t\\t\\n\\t\\tn = len(classes)\\n\\t\\t\\n\\t\\timpacts = [0]*n\\n\\t\\tminRatioIndex = 0\\n\\t\\t\\n\\t\\t# calculate and store impacts for each class in form of tuples -> (-impactValue, passCount, totalCount)\\n\\t\\tfor i in range(n):\\n\\t\\t\\tpassCount = classes[i][0]\\n\\t\\t\\ttotalCount = classes[i][1]\\n\\t\\t\\t\\n\\t\\t\\t# calculate the impact  for class i\\n\\t\\t\\tcurrentRatio = passCount/totalCount\\n\\t\\t\\texpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\n\\t\\t\\timpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\n\\t\\t\\timpacts[i] = (-impact, passCount, totalCount)  # note the - sign for impact\\n\\t\\t\\t\\n\\t\\theapq.heapify(impacts)\\n\\t\\t\\n\\t\\twhile(extraStudents > 0):\\n\\t\\t\\t# pick the next class with greatest impact \\n\\t\\t\\t_, passCount, totalCount = heapq.heappop(impacts)\\n\\t\\t\\t\\n\\t\\t\\t# assign a student to the class\\n\\t\\t\\tpassCount+=1\\n\\t\\t\\ttotalCount+=1\\n\\t\\t\\t\\n\\t\\t\\t# calculate the updated impact  for current class\\n\\t\\t\\tcurrentRatio = passCount/totalCount\\n\\t\\t\\texpectedRatioAfterUpdate = (passCount+1)/(totalCount+1)\\n\\t\\t\\timpact = expectedRatioAfterUpdate - currentRatio\\n\\t\\t\\t\\n\\t\\t\\t# insert updated impact back into the heap\\n\\t\\t\\theapq.heappush(impacts, (-impact, passCount, totalCount))\\n\\t\\t\\textraStudents -= 1\\n\\t\\t\\n\\t\\tresult = 0\\n\\t\\t\\t\\n\\t\\t# for all the updated classes calculate the total passRatio \\n\\t\\tfor _, passCount, totalCount in impacts:\\n\\t\\t\\tresult += passCount/totalCount\\n\\t\\t\\t\\n\\t\\t# return the average pass ratio\\n\\t\\treturn result/n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108424,
                "title": "c-why-using-vector-int-in-priority-queue-got-tle",
                "content": "I used vector<int> in priority_queue then I got TLE. \\nBut if I replace the vector<int> with pair<int, int> in priority_queue, it passes all test cases.\\nJust wonder why it happens?\\n\\nHere\\'s my code:\\n```\\nclass Solution {\\npublic:\\n    static double cal(vector<int>& v) {\\n        return (double) (v[1] - v[0]) / (double) (v[1] * (v[1] + 1));\\n    }\\n    \\n    struct compare {\\n        bool operator() (vector<int>& a, vector<int>& b) {\\n            return cal(b) > cal(a);\\n        }\\n    };\\n    \\n    double maxAverageRatio(vector<vector<int>>& cs, int es) {\\n        priority_queue<vector<int>, vector<vector<int>>, compare> q;\\n        for (auto& c : cs) {\\n            q.emplace(c);\\n        }\\n        \\n        while (es > 0) {\\n            auto maxn = q.top();\\n            q.pop();\\n            maxn[0]++;\\n            maxn[1]++;\\n            q.push(maxn);\\n            es--;\\n        }\\n        double total = 0;\\n        while (!q.empty()) {\\n            auto& c = q.top();\\n            total += (double)(c[0]) / (double)(c[1]);\\n            q.pop();\\n        }\\n        return total / (double) cs.size();\\n    }\\n\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    static double cal(vector<int>& v) {\\n        return (double) (v[1] - v[0]) / (double) (v[1] * (v[1] + 1));\\n    }\\n    \\n    struct compare {\\n        bool operator() (vector<int>& a, vector<int>& b) {\\n            return cal(b) > cal(a);\\n        }\\n    };\\n    \\n    double maxAverageRatio(vector<vector<int>>& cs, int es) {\\n        priority_queue<vector<int>, vector<vector<int>>, compare> q;\\n        for (auto& c : cs) {\\n            q.emplace(c);\\n        }\\n        \\n        while (es > 0) {\\n            auto maxn = q.top();\\n            q.pop();\\n            maxn[0]++;\\n            maxn[1]++;\\n            q.push(maxn);\\n            es--;\\n        }\\n        double total = 0;\\n        while (!q.empty()) {\\n            auto& c = q.top();\\n            total += (double)(c[0]) / (double)(c[1]);\\n            q.pop();\\n        }\\n        return total / (double) cs.size();\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108337,
                "title": "c-using-priority-queue",
                "content": "initial ratio for one class=x/y\\nafter adding 1 child=(x+1)/(y+1)\\nchange in ratio by adding one child=(y-x)/(y*(y+1))\\nkeep removing and adding this ratio from priority queue for all the extra students\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<double,int>> pq;\\n        int n=c.size();\\n        for(int i=0;i<n;i++){\\n            double v=(c[i][1]-c[i][0])*1.0/(((c[i][1])*1.0)*(c[i][1]+1));\\n            if(v<1){\\n            pq.push({v,i});}\\n        }\\n        while(e!=0){\\n            auto p=pq.top();\\n            pq.pop();\\n            int id=p.second;\\n            c[id][0]++;\\n            c[id][1]++;\\n            double v=(c[id][1]-c[id][0])*1.0/(((c[id][1])*1.0)*(c[id][1]+1));\\n            if(v<1){\\n            pq.push({v,id});}\\n            e--;\\n            \\n        }\\n        double ans=0;\\n        for(int i=0;i<n;i++){\\n            ans+=((c[i][0]*1.0)/c[i][1]);\\n        }\\n        ans/=n;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<double,int>> pq;\\n        int n=c.size();\\n        for(int i=0;i<n;i++){\\n            double v=(c[i][1]-c[i][0])*1.0/(((c[i][1])*1.0)*(c[i][1]+1));\\n            if(v<1){\\n            pq.push({v,i});}\\n        }\\n        while(e!=0){\\n            auto p=pq.top();\\n            pq.pop();\\n            int id=p.second;\\n            c[id][0]++;\\n            c[id][1]++;\\n            double v=(c[id][1]-c[id][0])*1.0/(((c[id][1])*1.0)*(c[id][1]+1));\\n            if(v<1){\\n            pq.push({v,id});}\\n            e--;\\n            \\n        }\\n        double ans=0;\\n        for(int i=0;i<n;i++){\\n            ans+=((c[i][0]*1.0)/c[i][1]);\\n        }\\n        ans/=n;\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1123615,
                "title": "c-maxheap-no-lambda-nonsense-comparator-class-functor-explained-with-comments",
                "content": "I was more familiar with Comparator Classes / Functors and completely clueless about `auto []()`\\nSo here\\'s one without Lambda functions.\\n\\n**Explaination:**\\nIt is not sufficient to pick out the class with the least pass ratio, add a brilliant kid (extraStudent), and recalculate the average. Although that might seem the best way to solve this \"greedily\", there may be another class which would have a greater increase/spike in the pass ratio when adding a brilliant kid (this depends on the size of the class). \\n\\nI define `spike` as the difference between the current Pass Ratio and the expected increase of the pass ratio in the event an `extraStudent` is added.\\n\\nSo all you have to do is to add a brilliant kid to the class which would have the greatest spike in the pass ratio by \"sorting\" the Max heap of `studentClasses` with respect to the spike/impact. The class with the highest spike is the one we\\'d want to greedily add a student to.\\n\\n```\\n// Trust me this isn\\'t Java Lol\\nclass studentClass {\\npublic:\\n    int total,passed; // total strength of the class and number of students that passed\\n    double passRatio; \\n\\tdouble expectedIncreaseInPassRatio; // incase an extraStudent / brilliant kid is added\\n    studentClass(int passed, int total)\\n    {\\n        this->passed = passed;\\n        this->total = total;\\n        passRatio = (double)passed/total;\\n        expectedIncreaseInPassRatio = (double)(passed+1)/(total+1); // If an extra studen were to be added\\n    }\\n};\\n\\n// The following class helps the priorty queue in prioritizing its elements\\nclass PassRatioComparator {\\npublic:\\n\\t// This as good as passing a comparator into a built in sorting function\\n    bool operator()(studentClass a, studentClass b) // Overloading the fucntion `()` operator. This is called a Fucntion Object or a Functor.\\n    {\\n        double spikeA = a.expectedIncreaseInPassRatio -  a.passRatio;\\n        double spikeB = b.expectedIncreaseInPassRatio -  b.passRatio;\\n        return spikeA < spikeB; \\n\\t\\t// ^^ This makes sure that the class with Highest spike is infront of the Priority queue\\n    }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<studentClass, vector<studentClass>, PassRatioComparator> maxHeap;\\n        // ^^ Standard way of declaring a max heap with a comparator class \\n        \\n        for(auto c: classes)\\n        {\\n            studentClass x(c[0],c[1]); \\n            maxHeap.push(x);\\n        }\\n        \\n        while(extraStudents--)\\n        {\\n            studentClass x = maxHeap.top(); \\n\\t\\t\\t// ^^ This class has the highest spike/impact on adding an extra student\\n            maxHeap.pop();\\n            studentClass y(x.passed+1,x.total+1); \\n\\t\\t\\t// ^^ So create a new class with one extra student. \\n\\t\\t\\t\\n\\t\\t\\t// Now y has a better pass ratio such that:\\n\\t\\t\\t// y.passRatio == x.expectedIncreaseInPassRatio\\n            \\n            maxHeap.push(y);\\n        }\\n        \\n        int n = maxHeap.size();\\n        double sum=0;\\n        while(maxHeap.size()>0)\\n        {\\n            sum+=maxHeap.top().passRatio;\\n            maxHeap.pop();\\n        }\\n        return sum/n;\\n    }\\n};\\n```\\nThis is my first ever post on Leetcode Discussions.\\nUpvote for more!",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n// Trust me this isn\\'t Java Lol\\nclass studentClass {\\npublic:\\n    int total,passed; // total strength of the class and number of students that passed\\n    double passRatio; \\n\\tdouble expectedIncreaseInPassRatio; // incase an extraStudent / brilliant kid is added\\n    studentClass(int passed, int total)\\n    {\\n        this->passed = passed;\\n        this->total = total;\\n        passRatio = (double)passed/total;\\n        expectedIncreaseInPassRatio = (double)(passed+1)/(total+1); // If an extra studen were to be added\\n    }\\n};\\n\\n// The following class helps the priorty queue in prioritizing its elements\\nclass PassRatioComparator {\\npublic:\\n\\t// This as good as passing a comparator into a built in sorting function\\n    bool operator()(studentClass a, studentClass b) // Overloading the fucntion `()` operator. This is called a Fucntion Object or a Functor.\\n    {\\n        double spikeA = a.expectedIncreaseInPassRatio -  a.passRatio;\\n        double spikeB = b.expectedIncreaseInPassRatio -  b.passRatio;\\n        return spikeA < spikeB; \\n\\t\\t// ^^ This makes sure that the class with Highest spike is infront of the Priority queue\\n    }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<studentClass, vector<studentClass>, PassRatioComparator> maxHeap;\\n        // ^^ Standard way of declaring a max heap with a comparator class \\n        \\n        for(auto c: classes)\\n        {\\n            studentClass x(c[0],c[1]); \\n            maxHeap.push(x);\\n        }\\n        \\n        while(extraStudents--)\\n        {\\n            studentClass x = maxHeap.top(); \\n\\t\\t\\t// ^^ This class has the highest spike/impact on adding an extra student\\n            maxHeap.pop();\\n            studentClass y(x.passed+1,x.total+1); \\n\\t\\t\\t// ^^ So create a new class with one extra student. \\n\\t\\t\\t\\n\\t\\t\\t// Now y has a better pass ratio such that:\\n\\t\\t\\t// y.passRatio == x.expectedIncreaseInPassRatio\\n            \\n            maxHeap.push(y);\\n        }\\n        \\n        int n = maxHeap.size();\\n        double sum=0;\\n        while(maxHeap.size()>0)\\n        {\\n            sum+=maxHeap.top().passRatio;\\n            maxHeap.pop();\\n        }\\n        return sum/n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108321,
                "title": "clean-python-3-greedy-with-heap",
                "content": "Greedy add genius students into most benefit class.\\n\\nTime: `O(N + ElogN)`\\nSpace: `O(N)`\\n```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        total = sum(p / t for p, t in classes)\\n        heap = [(p / t - (p + 1) / (t + 1), p, t) for p, t in classes]\\n        heapq.heapify(heap)\\n        for _ in range(extraStudents):\\n            increase, p, t = heapq.heappop(heap)\\n            total -= increase\\n            p, t = p + 1, t + 1\\n            heapq.heappush(heap, ((p / t - (p + 1) / (t + 1), p, t)))\\n        return total / len(classes)\\n```",
                "solutionTags": [],
                "code": "```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        total = sum(p / t for p, t in classes)\\n        heap = [(p / t - (p + 1) / (t + 1), p, t) for p, t in classes]\\n        heapq.heapify(heap)\\n        for _ in range(extraStudents):\\n            increase, p, t = heapq.heappop(heap)\\n            total -= increase\\n            p, t = p + 1, t + 1\\n            heapq.heappush(heap, ((p / t - (p + 1) / (t + 1), p, t)))\\n        return total / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108255,
                "title": "python-greedy-heap",
                "content": "\\n\\n```html5\\n<b>Time Complexity: O((m+n)&middot;log(n))</b> where m = extraStudents and n = classes.length &becaus; we perform m operations on a length n heap\\n<b>Space Complexity: O(n)</b> &becaus; every class must be stored in the heap.\\n```\\n\\n**Approach:**\\n\\nGreedily select the most needy class to receive a brilliant student.\\nThe most needy class will be the class whose ratio increases the\\nmost by giving it a brilliant student.\\n\\n>i.e. 5/10 = 50% and 10/20 = 50% but the first class will \\n>benefit more because 6/11 = 54.5% and 11/21 = 52.4%\\n\\nStore all of the classes and their neediness in a heap so that the\\nmost needy class is at `h[0]`.\\n\\nThen pop the most needy class, give it a brilliant student and update the heap.\\nRepeat this step `m` times for `m` brilliant students and return the average class ratio.\\n\\n<hr>\\n\\n```python\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        # 1. Heapify classes according to how much they will benefit from getting a brilliant student\\n        h = []\\n        for p, t in classes:\\n            delta = ((p+1) / (t+1)) - (p / t)\\n            heapq.heappush(h, (-delta, p, t))\\n        \\n        # 2. Pop the most needy class and give it a brilliant student\\n        #    Then insert the class back into the heap.\\n        for _ in range(extraStudents):\\n            d, p, t = heapq.heappop(h)\\n            p += 1\\n            t += 1\\n            delta = ((p+1) / (t+1)) - (p / t)\\n            heapq.heappush(h, (-delta, p, t))\\n            \\n        total_ratio = sum(p/t for d, p, t in h)\\n        return total_ratio / len(h)\\n```",
                "solutionTags": [],
                "code": "```html5\\n<b>Time Complexity: O((m+n)&middot;log(n))</b> where m = extraStudents and n = classes.length &becaus; we perform m operations on a length n heap\\n<b>Space Complexity: O(n)</b> &becaus; every class must be stored in the heap.\\n```\n```python\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        # 1. Heapify classes according to how much they will benefit from getting a brilliant student\\n        h = []\\n        for p, t in classes:\\n            delta = ((p+1) / (t+1)) - (p / t)\\n            heapq.heappush(h, (-delta, p, t))\\n        \\n        # 2. Pop the most needy class and give it a brilliant student\\n        #    Then insert the class back into the heap.\\n        for _ in range(extraStudents):\\n            d, p, t = heapq.heappop(h)\\n            p += 1\\n            t += 1\\n            delta = ((p+1) / (t+1)) - (p / t)\\n            heapq.heappush(h, (-delta, p, t))\\n            \\n        total_ratio = sum(p/t for d, p, t in h)\\n        return total_ratio / len(h)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1712097,
                "title": "greedy-proof",
                "content": "Hi Guys, this is kinda my first post on leetcode, applogies for bad grammer and formatting. Also it\\'s been ages since I\\'ve written a mathematical proof, so it might not be very accurate but hopefully it should be intutive. Hope this can help one of you. \\n\\n### Greedy Algorithm\\nIteratively each brilient student is added to the class with the maximum delta pass ratio and pass ratio of this class is updated. \\n\\nFor a class `class_i` with `pass_i` students passing and `total_i` being the total number of students. The pass ratio is `pass_i/total_i` When a brilliant student is added, the pass ratio changes to `(pass_i+1)/(total_i+1)`. Therefore, the pass ratio increased by `(total_i-pass_i)/(pass_i*(pass_i+1))`  which we call as delta pass ratio.\\n\\n#### Lemma 1.  The delta pass ratio decreases as we keep on adding new brilliant student \\nIn the above equation of the pass ratio, the Numerator is constant as we keep adding brilliant students, but the Denominator keeps decreasing. Hence, the benefits of adding a new brilliant student keeps decreasing for the `class_i` .\\n\\n\\n#### Algorithm Proof - Proof by contradiction\\n- Say at step 1 `class_i` has the highest delta pass ratio.\\n- Now if we are picking `class_i` at step 1, then we are good.\\n- If we are not picking `class_i` at step\\n\\t- If we pick `class_i` eventually at `step_x`, then simply swap the steps `step_1` and `step_x`. \\n\\t- If `class_i` is never picked up, \\n\\t\\t- let `class_k` be the  class where last student `s_n` was added\\n\\t\\t- delta pass ratio of `class_k` at step `s_(n-1)` will be less than delta pass ratio for `class_i` \\n\\t\\t\\t- since `class_i` has the highest delta pass ratio at `step_0` itself and delta pass ratio decreases with more steps \\n\\t\\t- Hence this is a contradtion, as by changing `step_n` by choose `class_i` instead of `class_k`, the total ratio sum will increase. \\n\\n\\n### Python code for reference \\n\\n``` python\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        def delta(p, t):\\n            return -(t-p)/(t*(t+1))\\n        \\n        ans = 0\\n        heap = []\\n        for class_i in classes:\\n            heap.append((delta(*class_i), class_i))\\n            ans += class_i[0]/class_i[1]\\n        \\n        heapq.heapify(heap)\\n        for i in range(extraStudents):\\n            delta_i, class_i = heapq.heappop(heap)\\n            ans -= delta_i\\n            class_i[0]+=1\\n            class_i[1]+=1\\n            heapq.heappush(heap, (delta(*class_i), class_i))\\n        return ans/len(classes)\\n```\\n",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "``` python\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        def delta(p, t):\\n            return -(t-p)/(t*(t+1))\\n        \\n        ans = 0\\n        heap = []\\n        for class_i in classes:\\n            heap.append((delta(*class_i), class_i))\\n            ans += class_i[0]/class_i[1]\\n        \\n        heapq.heapify(heap)\\n        for i in range(extraStudents):\\n            delta_i, class_i = heapq.heappop(heap)\\n            ans -= delta_i\\n            class_i[0]+=1\\n            class_i[1]+=1\\n            heapq.heappush(heap, (delta(*class_i), class_i))\\n        return ans/len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1425088,
                "title": "max-heap-c-commented-code-greedy",
                "content": "```\\n\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extra) {\\n       priority_queue<pair<double,pair<int,int>>>pq;\\n        int n=classes.size();\\n        //calculating the difference between the previous ration and new ratio\\n        //here I will increament student and pass student of each class by one and will chaeck where difference is maximum\\n        //thats why I am using preiority queue so that my max profit will be on top;\\n        for(int i=0;i<n;i++)\\n        {\\n            int pass=classes[i][0];\\n            int stud=classes[i][1];\\n            double diff=(double)(pass+1)/(stud+1)-(double)(pass)/(stud);\\n            pq.push({diff,{pass,stud}});\\n        }\\n        //now keep adding one by one new students to the class untill extra will not become zero\\n        while(extra--)\\n        {\\n            auto x=pq.top();\\n            pq.pop();\\n            \\n            int pass=x.second.first;\\n            int stud=x.second.second;\\n            pass++;\\n            stud++;\\n            //chck your new difference and reassign to the priority queue after popping the previous one\\n            double newdiff=(double)(pass+1)/(stud+1)-(double)(pass)/(stud);\\n            pq.push({newdiff,{pass,stud}});\\n            \\n        }\\n        //till here you have successfully assinged the student in optimal class\\n        //just take the avarage and this is your ans;\\n        double ans=0.0;\\n         while(!pq.empty())\\n         {\\n             auto x=pq.top();\\n             pq.pop();\\n             ans+=(double)(x.second.first)/(x.second.second);\\n         }\\n        return ans/n;\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extra) {\\n       priority_queue<pair<double,pair<int,int>>>pq;\\n        int n=classes.size();\\n        //calculating the difference between the previous ration and new ratio\\n        //here I will increament student and pass student of each class by one and will chaeck where difference is maximum\\n        //thats why I am using preiority queue so that my max profit will be on top;\\n        for(int i=0;i<n;i++)\\n        {\\n            int pass=classes[i][0];\\n            int stud=classes[i][1];\\n            double diff=(double)(pass+1)/(stud+1)-(double)(pass)/(stud);\\n            pq.push({diff,{pass,stud}});\\n        }\\n        //now keep adding one by one new students to the class untill extra will not become zero\\n        while(extra--)\\n        {\\n            auto x=pq.top();\\n            pq.pop();\\n            \\n            int pass=x.second.first;\\n            int stud=x.second.second;\\n            pass++;\\n            stud++;\\n            //chck your new difference and reassign to the priority queue after popping the previous one\\n            double newdiff=(double)(pass+1)/(stud+1)-(double)(pass)/(stud);\\n            pq.push({newdiff,{pass,stud}});\\n            \\n        }\\n        //till here you have successfully assinged the student in optimal class\\n        //just take the avarage and this is your ans;\\n        double ans=0.0;\\n         while(!pq.empty())\\n         {\\n             auto x=pq.top();\\n             pq.pop();\\n             ans+=(double)(x.second.first)/(x.second.second);\\n         }\\n        return ans/n;\\n    }\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228490,
                "title": "c-not-very-simple",
                "content": "```\\nclass node\\n{\\n    public:\\n    int x, y;\\n    double z;\\n    \\n    node(int x, int y, double z)\\n    {\\n        this -> x = x;\\n        this -> y = y;\\n        this -> z = z;\\n    }\\n};\\n\\nclass cmp\\n{\\n    public:\\n      bool operator()(node a, node b)\\n      {\\n          return a.z < b.z;\\n      }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size();\\n        priority_queue<node, vector<node>, cmp> pq;\\n        for(auto x : classes)\\n        {\\n            double prev = x[0] / (double)x[1];\\n            double next = (x[0] + 1) / (double)(x[1] + 1);\\n            node nodes(x[0], x[1], next - prev);\\n            pq.push(nodes);\\n        }\\n        while(extraStudents--)\\n        {\\n            auto temp = pq.top();\\n            pq.pop();\\n            temp.x++;\\n            temp.y++;\\n            double prev = temp.x / (double)temp.y;\\n            double next = (temp.x + 1) / (double)(temp.y + 1);\\n            node nodes(temp.x, temp.y, next - prev);\\n            pq.push(nodes);\\n        }\\n        double ans = 0;\\n        while(pq.size() != 0)\\n        {\\n            auto temp = pq.top();\\n            pq.pop();\\n            ans += temp.x / (double)temp.y;\\n        }\\n        return ans / n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass node\\n{\\n    public:\\n    int x, y;\\n    double z;\\n    \\n    node(int x, int y, double z)\\n    {\\n        this -> x = x;\\n        this -> y = y;\\n        this -> z = z;\\n    }\\n};\\n\\nclass cmp\\n{\\n    public:\\n      bool operator()(node a, node b)\\n      {\\n          return a.z < b.z;\\n      }\\n};\\n\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size();\\n        priority_queue<node, vector<node>, cmp> pq;\\n        for(auto x : classes)\\n        {\\n            double prev = x[0] / (double)x[1];\\n            double next = (x[0] + 1) / (double)(x[1] + 1);\\n            node nodes(x[0], x[1], next - prev);\\n            pq.push(nodes);\\n        }\\n        while(extraStudents--)\\n        {\\n            auto temp = pq.top();\\n            pq.pop();\\n            temp.x++;\\n            temp.y++;\\n            double prev = temp.x / (double)temp.y;\\n            double next = (temp.x + 1) / (double)(temp.y + 1);\\n            node nodes(temp.x, temp.y, next - prev);\\n            pq.push(nodes);\\n        }\\n        double ans = 0;\\n        while(pq.size() != 0)\\n        {\\n            auto temp = pq.top();\\n            pq.pop();\\n            ans += temp.x / (double)temp.y;\\n        }\\n        return ans / n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108335,
                "title": "python3-greedy-algorithm",
                "content": "Greedy algorithm: for each step of adding a student, maximize the increment of average score\\n\\n```\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = [[-(p + 1) / (t + 1) + p / t, p / t, p, t] for p, t in classes]\\n        heapq.heapify(heap)\\n        while extraStudents:\\n            neg_inc, ratio, p, t = heapq.heappop(heap)\\n            p += 1\\n            t += 1\\n            heapq.heappush(heap, [-(p + 1) / (t + 1) + p / t, p / t, p, t])\\n            extraStudents -= 1\\n        return sum(ele[1] for ele in heap) / len(heap)\\n```",
                "solutionTags": [],
                "code": "```\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = [[-(p + 1) / (t + 1) + p / t, p / t, p, t] for p, t in classes]\\n        heapq.heapify(heap)\\n        while extraStudents:\\n            neg_inc, ratio, p, t = heapq.heappop(heap)\\n            p += 1\\n            t += 1\\n            heapq.heappush(heap, [-(p + 1) / (t + 1) + p / t, p / t, p, t])\\n            extraStudents -= 1\\n        return sum(ele[1] for ele in heap) / len(heap)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3688432,
                "title": "max-heap-c-easy-beats-90",
                "content": "# if it helps You, Please Upvote Me...\\uD83E\\uDDE1\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nWhat do you think about **extra students**, in which class do you add extra students.\\nAfter adding a student to all class keep **track of difference** but actually we will add that one student in class which has **maximum difference.**\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int es) {\\n\\n        int n  = c.size();\\n        double avg  = 0,ans = 0;\\n        priority_queue<pair<double,int>> pq;\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            double diff =(double)(c[i][0]+1)/(double)(c[i][1]+1)-(double)c[i][0]/(double)c[i][1];\\n            pq.push({diff,i});\\n        }\\n        while(es--)\\n        {\\n           int i = pq.top().second;\\n           pq.pop();\\n           c[i][0]+=1;\\n           c[i][1]+=1;\\n           double diff = (double)(c[i][0]+1)/(double)(c[i][1]+1)-(double)c[i][0]/(double)c[i][1];\\n           pq.push({diff,i});\\n        }\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            avg = (double)c[i][0]/(double)c[i][1];\\n            ans+=avg;\\n        }\\n        return ans/(double)n;\\n    }\\n};\\n```\\n![upvote.jpg](https://assets.leetcode.com/users/images/1d87f7c4-85a3-4ad6-ab75-6ad287c24fe9_1687858913.821104.jpeg)\\n",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int es) {\\n\\n        int n  = c.size();\\n        double avg  = 0,ans = 0;\\n        priority_queue<pair<double,int>> pq;\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            double diff =(double)(c[i][0]+1)/(double)(c[i][1]+1)-(double)c[i][0]/(double)c[i][1];\\n            pq.push({diff,i});\\n        }\\n        while(es--)\\n        {\\n           int i = pq.top().second;\\n           pq.pop();\\n           c[i][0]+=1;\\n           c[i][1]+=1;\\n           double diff = (double)(c[i][0]+1)/(double)(c[i][1]+1)-(double)c[i][0]/(double)c[i][1];\\n           pq.push({diff,i});\\n        }\\n\\n        for(int i = 0;i<n;i++)\\n        {\\n            avg = (double)c[i][0]/(double)c[i][1];\\n            ans+=avg;\\n        }\\n        return ans/(double)n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1357041,
                "title": "java-o-mlogn-heap-greedy-small-code",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double sum=0;\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Double.compare((double)(b[0]+1)/(b[1]+1)-(double)b[0]/b[1],(double)(a[0]+1)/(a[1]+1)-(double)a[0]/a[1]));\\n        for(int[] c: classes){\\n            pq.add(c);\\n            sum+=(double)c[0]/c[1];\\n        }\\n        \\n        while(extraStudents > 0){\\n            int[] c = pq.poll();\\n            pq.add(new int[]{c[0]+1,c[1]+1});\\n            double change = (double)(c[0]+1)/(c[1]+1)-(double)c[0]/c[1];\\n            sum += change;\\n            extraStudents--;\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double sum=0;\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Double.compare((double)(b[0]+1)/(b[1]+1)-(double)b[0]/b[1],(double)(a[0]+1)/(a[1]+1)-(double)a[0]/a[1]));\\n        for(int[] c: classes){\\n            pq.add(c);\\n            sum+=(double)c[0]/c[1];\\n        }\\n        \\n        while(extraStudents > 0){\\n            int[] c = pq.poll();\\n            pq.add(new int[]{c[0]+1,c[1]+1});\\n            double change = (double)(c[0]+1)/(c[1]+1)-(double)c[0]/c[1];\\n            sum += change;\\n            extraStudents--;\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1112509,
                "title": "javascript-and-typescript-solution",
                "content": "JavaScript AC (932 ms, 69.7 MB)\\n```js\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nvar maxAverageRatio = function(classes, extraStudents) {\\n  const q = new MaxPriorityQueue({\\n    priority: i => (classes[i][0] + 1) / (classes[i][1] + 1) - \\n      classes[i][0] / classes[i][1],\\n  });\\n  classes.forEach((_, i) => {\\n    q.enqueue(i);\\n  });\\n  \\n  let es = extraStudents;\\n  while (es) {\\n    const i = q.dequeue().element;\\n    \\n    classes[i][0] += 1;\\n    classes[i][1] += 1;\\n    q.enqueue(i);\\n    \\n    es -= 1;\\n  }\\n  \\n  let sum = 0;\\n  classes.forEach(([p, t]) => {\\n    sum += p / t;\\n  });\\n  \\n  return sum / classes.length;\\n};\\n```\\n\\nTypeScript AC (924 ms\\t71.6 MB)\\n```ts\\nfunction maxAverageRatio(classes: number[][], extraStudents: number): number {\\n  const q = new MaxPriorityQueue({\\n    priority: i => (classes[i][0] + 1) / (classes[i][1] + 1) - \\n      classes[i][0] / classes[i][1],\\n  });\\n  classes.forEach((_, i) => {\\n    q.enqueue(i);\\n  });\\n  \\n  let es = extraStudents;\\n  while (es) {\\n    const i = q.dequeue().element;\\n    \\n    classes[i][0] += 1;\\n    classes[i][1] += 1;\\n    q.enqueue(i);\\n    \\n    es -= 1;\\n  }\\n  \\n  let sum = 0;\\n  classes.forEach(([p, t]) => {\\n    sum += p / t;\\n  });\\n  \\n  return sum / classes.length;\\n};\\n```",
                "solutionTags": [],
                "code": "```js\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nvar maxAverageRatio = function(classes, extraStudents) {\\n  const q = new MaxPriorityQueue({\\n    priority: i => (classes[i][0] + 1) / (classes[i][1] + 1) - \\n      classes[i][0] / classes[i][1],\\n  });\\n  classes.forEach((_, i) => {\\n    q.enqueue(i);\\n  });\\n  \\n  let es = extraStudents;\\n  while (es) {\\n    const i = q.dequeue().element;\\n    \\n    classes[i][0] += 1;\\n    classes[i][1] += 1;\\n    q.enqueue(i);\\n    \\n    es -= 1;\\n  }\\n  \\n  let sum = 0;\\n  classes.forEach(([p, t]) => {\\n    sum += p / t;\\n  });\\n  \\n  return sum / classes.length;\\n};\\n```\n```ts\\nfunction maxAverageRatio(classes: number[][], extraStudents: number): number {\\n  const q = new MaxPriorityQueue({\\n    priority: i => (classes[i][0] + 1) / (classes[i][1] + 1) - \\n      classes[i][0] / classes[i][1],\\n  });\\n  classes.forEach((_, i) => {\\n    q.enqueue(i);\\n  });\\n  \\n  let es = extraStudents;\\n  while (es) {\\n    const i = q.dequeue().element;\\n    \\n    classes[i][0] += 1;\\n    classes[i][1] += 1;\\n    q.enqueue(i);\\n    \\n    es -= 1;\\n  }\\n  \\n  let sum = 0;\\n  classes.forEach(([p, t]) => {\\n    sum += p / t;\\n  });\\n  \\n  return sum / classes.length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110765,
                "title": "java-priorityqueue-o-mlogn-nlogn",
                "content": "\\n\\t// O(m*logn+n*logn)\\n\\t// PriorityQueue\\n\\tpublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\n\\t\\tPriorityQueue<double[]> heap = new PriorityQueue<double[]>(new Comparator<double[]>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic int compare(double[] o1, double[] o2) {\\n\\t\\t\\t\\treturn Double.compare(o2[0], o1[0]);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tfor (int[] clas : classes) {\\n\\t\\t\\tdouble delta = profit(clas[0], clas[1]);\\n\\t\\t\\theap.offer(new double[] { delta, clas[0], clas[1] });\\n\\t\\t}\\n\\n\\t\\twhile (extraStudents >= 1) {\\n\\t\\t\\tdouble[] temp = heap.poll();\\n\\t\\t\\tdouble pass = temp[1] + 1, total = temp[2] + 1;\\n\\t\\t\\tdouble delta = profit(pass, total);\\n\\t\\t\\theap.offer(new double[] { delta, pass, total });\\n\\t\\t\\textraStudents--;\\n\\t\\t}\\n\\n\\t\\tdouble average = 0d;\\n\\t\\twhile (!heap.isEmpty()) {\\n\\t\\t\\tdouble[] temp = heap.poll();\\n\\t\\t\\taverage += temp[1] / temp[2];\\n\\t\\t}\\n\\n\\t\\treturn average / classes.length;\\n\\t}\\n\\n\\t// O(1)\\n\\tpublic double profit(double a, double b) {\\n\\t\\treturn (a + 1) / (b + 1) - a / b;\\n\\t}\\n",
                "solutionTags": [],
                "code": "\\n\\t// O(m*logn+n*logn)\\n\\t// PriorityQueue\\n\\tpublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\n\\t\\tPriorityQueue<double[]> heap = new PriorityQueue<double[]>(new Comparator<double[]>() {\\n\\t\\t\\t@Override\\n\\t\\t\\tpublic int compare(double[] o1, double[] o2) {\\n\\t\\t\\t\\treturn Double.compare(o2[0], o1[0]);\\n\\t\\t\\t}\\n\\t\\t});\\n\\t\\tfor (int[] clas : classes) {\\n\\t\\t\\tdouble delta = profit(clas[0], clas[1]);\\n\\t\\t\\theap.offer(new double[] { delta, clas[0], clas[1] });\\n\\t\\t}\\n\\n\\t\\twhile (extraStudents >= 1) {\\n\\t\\t\\tdouble[] temp = heap.poll();\\n\\t\\t\\tdouble pass = temp[1] + 1, total = temp[2] + 1;\\n\\t\\t\\tdouble delta = profit(pass, total);\\n\\t\\t\\theap.offer(new double[] { delta, pass, total });\\n\\t\\t\\textraStudents--;\\n\\t\\t}\\n\\n\\t\\tdouble average = 0d;\\n\\t\\twhile (!heap.isEmpty()) {\\n\\t\\t\\tdouble[] temp = heap.poll();\\n\\t\\t\\taverage += temp[1] / temp[2];\\n\\t\\t}\\n\\n\\t\\treturn average / classes.length;\\n\\t}\\n\\n\\t// O(1)\\n\\tpublic double profit(double a, double b) {\\n\\t\\treturn (a + 1) / (b + 1) - a / b;\\n\\t}\\n",
                "codeTag": "Java"
            },
            {
                "id": 1108903,
                "title": "so-beat-100-is-meaningless-at-least-for-c",
                "content": "Basically, I submitted twice using C++ in contest, one got TLE, and one got AC, but they both passed after contest, and beat 100%. Shown as below:\\n\\nTLE one:\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<heapNode, vector<heapNode>, less<heapNode>> heap;\\n        for(auto item : classes) {\\n            heap.push(heapNode(item[0], item[1]));\\n        }\\n        for(int i = 0; i < extraStudents; ++i) {\\n            auto tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            heap.push(heapNode(tmp.pass + 1, tmp.all + 1));\\n        }\\n        // cout << \"-----\" << endl;\\n        double res = 0;\\n        while(heap.size()) {\\n            heapNode tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            res += tmp.pass / tmp.all;\\n        }\\n        res = res / (double(classes.size()));\\n        return res;\\n    }\\nprivate:\\n    struct heapNode {\\n        double pass, all;\\n        double foreseen;\\n        heapNode(double x, double y) : pass(x), all(y) {\\n            foreseen = (pass + 1) / (all + 1) - pass / all;\\n        }\\n        const bool operator < (const heapNode &p) const {\\n            return this->foreseen < p.foreseen;\\n        }\\n        void print() {\\n            cout << pass << \" \" << all << endl;\\n        }\\n    };\\n};\\n```\\n\\nAC one:\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<heapNode, vector<heapNode>, less<heapNode>> heap;\\n        for(auto item : classes) {\\n            heap.push(heapNode(item[0], item[1]));\\n        }\\n        for(int i = 0; i < extraStudents; ++i) {\\n            auto tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            heap.push(heapNode(tmp.pass + 1, tmp.all + 1));\\n        }\\n        // cout << \"-----\" << endl;\\n        double res = 0;\\n        while(heap.size()) {\\n            heapNode tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            res += tmp.pass / tmp.all;\\n        }\\n        res = res / (double(classes.size()));\\n        return res;\\n    }\\nprivate:\\n    struct heapNode {\\n        double pass, all;\\n        double foreseen;\\n        heapNode(double x, double y) : pass(x), all(y), foreseen((pass + 1) / (all + 1) - pass / all) {}\\n        const bool operator < (const heapNode &p) const {\\n            return this->foreseen < p.foreseen;\\n        }\\n    };\\n};\\n```\\n\\nAnd during the contest it took 1464ms to AC, I submitted a third time using the AC code and ACed in 1884ms. (Very likely the time threshold is 2000ms)\\n\\nAs you can see there is **no** optimization between the two solution. And just before I re-submitted the above two pieces of code, **both** of them got AC, and with 996 - 984ms and told me the solution beats 100% of C++ submission, what a nice satire, leetcode! The unchanged pre-TLE code is actually a p100 level solution! \\n\\nOK backing to reasoning I can assume that it probably because of the spike of submission during the contest period impacted the judger\\'s performance. And it is reasonable that as lc got hotter, more and more people join the contest, the service quality may deterioate. But this is the first time I experienced that this issue impact the submission status, and I don\\'t think this should happen because the wrong submission status is greatly misleading especially during the contest. Feel really bad on this.",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<heapNode, vector<heapNode>, less<heapNode>> heap;\\n        for(auto item : classes) {\\n            heap.push(heapNode(item[0], item[1]));\\n        }\\n        for(int i = 0; i < extraStudents; ++i) {\\n            auto tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            heap.push(heapNode(tmp.pass + 1, tmp.all + 1));\\n        }\\n        // cout << \"-----\" << endl;\\n        double res = 0;\\n        while(heap.size()) {\\n            heapNode tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            res += tmp.pass / tmp.all;\\n        }\\n        res = res / (double(classes.size()));\\n        return res;\\n    }\\nprivate:\\n    struct heapNode {\\n        double pass, all;\\n        double foreseen;\\n        heapNode(double x, double y) : pass(x), all(y) {\\n            foreseen = (pass + 1) / (all + 1) - pass / all;\\n        }\\n        const bool operator < (const heapNode &p) const {\\n            return this->foreseen < p.foreseen;\\n        }\\n        void print() {\\n            cout << pass << \" \" << all << endl;\\n        }\\n    };\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<heapNode, vector<heapNode>, less<heapNode>> heap;\\n        for(auto item : classes) {\\n            heap.push(heapNode(item[0], item[1]));\\n        }\\n        for(int i = 0; i < extraStudents; ++i) {\\n            auto tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            heap.push(heapNode(tmp.pass + 1, tmp.all + 1));\\n        }\\n        // cout << \"-----\" << endl;\\n        double res = 0;\\n        while(heap.size()) {\\n            heapNode tmp = heap.top();\\n            // tmp.print();\\n            heap.pop();\\n            res += tmp.pass / tmp.all;\\n        }\\n        res = res / (double(classes.size()));\\n        return res;\\n    }\\nprivate:\\n    struct heapNode {\\n        double pass, all;\\n        double foreseen;\\n        heapNode(double x, double y) : pass(x), all(y), foreseen((pass + 1) / (all + 1) - pass / all) {}\\n        const bool operator < (const heapNode &p) const {\\n            return this->foreseen < p.foreseen;\\n        }\\n    };\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1108418,
                "title": "python-simple-solution-explained-priority-queue",
                "content": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        # Organize the heap based on the \"ratio improvement factor\"\\n        # i.e. The (new ratio) - (old ratio), the one that will improve the largest should be the one added to\\n        # Add a negative since all heaps are minimum-oriented in python\\n        classes = [[-((p+1)/(t+1) - (p/t)), p, t] for p, t in classes]\\n        heapq.heapify(classes)\\n        \\n        # Go through the amount of students we need to add\\n        for _ in range(extraStudents):\\n            # Remove the next largest opportunity\\n            c = heapq.heappop(classes)\\n            \\n            # Change all of the values\\n            c[1] += 1\\n            c[2] += 1\\n            # Update ratio factor\\n            c[0] = -((c[1]+1)/(c[2]+1) - (c[1]/c[2]))\\n            # Push this back on to the heap\\n            heapq.heappush(classes, c)\\n            \\n        # Calculate the total pass ratio after doing this\\n        total_ratio = 0\\n        n = 0\\n        for c in sorted(classes):\\n            n += 1\\n            total_ratio += (c[1] / c[2])\\n            \\n        return total_ratio / n\\n```",
                "solutionTags": [
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        # Organize the heap based on the \"ratio improvement factor\"\\n        # i.e. The (new ratio) - (old ratio), the one that will improve the largest should be the one added to\\n        # Add a negative since all heaps are minimum-oriented in python\\n        classes = [[-((p+1)/(t+1) - (p/t)), p, t] for p, t in classes]\\n        heapq.heapify(classes)\\n        \\n        # Go through the amount of students we need to add\\n        for _ in range(extraStudents):\\n            # Remove the next largest opportunity\\n            c = heapq.heappop(classes)\\n            \\n            # Change all of the values\\n            c[1] += 1\\n            c[2] += 1\\n            # Update ratio factor\\n            c[0] = -((c[1]+1)/(c[2]+1) - (c[1]/c[2]))\\n            # Push this back on to the heap\\n            heapq.heappush(classes, c)\\n            \\n        # Calculate the total pass ratio after doing this\\n        total_ratio = 0\\n        n = 0\\n        for c in sorted(classes):\\n            n += 1\\n            total_ratio += (c[1] / c[2])\\n            \\n        return total_ratio / n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108344,
                "title": "c-use-set-to-track-the-most-effective-at-the-end",
                "content": "~~~\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int extraStudents) {\\n        set<pair<double, int>> s;\\n        int n = c.size();\\n        for (int i = 0; i < n; ++i) {\\n            double d = 1.0 * (c[i][0] + 1) / (c[i][1] + 1) - 1.0 * c[i][0] / c[i][1];\\n            s.insert({d, i});\\n        }\\n        \\n        while (extraStudents > 0) {\\n            auto it = s.rbegin();\\n            int i = it->second;\\n            s.erase(*it);\\n            c[i][0] = c[i][0] + 1; \\n            c[i][1] = c[i][1] + 1; \\n            double d = 1.0 * (c[i][0] + 1) / (c[i][1] + 1) - 1.0 * c[i][0] / c[i][1];\\n            s.insert({d, i});\\n            --extraStudents;\\n        }\\n        \\n        double res = 0.0;\\n        for (int i = 0; i < n; ++i) {\\n            res += 1.0 * c[i][0] / c[i][1];\\n        }\\n        return res/n;\\n    }\\n};\\n~~~\\n",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int extraStudents) {\\n        set<pair<double, int>> s;\\n        int n = c.size();\\n        for (int i = 0; i < n; ++i) {\\n            double d = 1.0 * (c[i][0] + 1) / (c[i][1] + 1) - 1.0 * c[i][0] / c[i][1];\\n            s.insert({d, i}",
                "codeTag": "Java"
            },
            {
                "id": 1108269,
                "title": "greedy-use-priority-queue-to-get-the-maximum-increasement-o-nlogn-binary-serach-doesn-t-work",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double, pair<int, int> > > pq;\\n        for(auto &cls : classes) {\\n            int t = cls[1], p = cls[0];\\n            double add = (p + 1) * 1.0 / (t + 1) - (p * 1.0 / t);\\n            pq.push({add, {p, t}});\\n        }\\n        while(extraStudents--) {\\n            auto p = pq.top(); pq.pop();\\n            int &t = p.second.second;\\n            int &pa = p.second.first;\\n            ++t; ++pa;\\n            p.first = (pa + 1) * 1.0 / (t + 1) - pa * 1.0 / t;\\n            pq.push(p);\\n        }\\n        double res = 0;\\n        while(pq.size()) {\\n            res += pq.top().second.first * 1.0 / pq.top().second.second; pq.pop();\\n        }\\n        return res / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double, pair<int, int> > > pq;\\n        for(auto &cls : classes) {\\n            int t = cls[1], p = cls[0];\\n            double add = (p + 1) * 1.0 / (t + 1) - (p * 1.0 / t);\\n            pq.push({add, {p, t}});\\n        }\\n        while(extraStudents--) {\\n            auto p = pq.top(); pq.pop();\\n            int &t = p.second.second;\\n            int &pa = p.second.first;\\n            ++t; ++pa;\\n            p.first = (pa + 1) * 1.0 / (t + 1) - pa * 1.0 / t;\\n            pq.push(p);\\n        }\\n        double res = 0;\\n        while(pq.size()) {\\n            res += pq.top().second.first * 1.0 / pq.top().second.second; pq.pop();\\n        }\\n        return res / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3911969,
                "title": "c-priority-queue-beats-95",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        priority_queue<pair<double,int>> pq;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int curr_n = classes[i][0];\\n            int curr_d = classes[i][1];\\n            double curr_f = (double)curr_n/(double)curr_d;\\n            int new_n = curr_n+1;\\n            int new_d = curr_d+1;\\n            double new_f = (double)new_n/(double)new_d;\\n\\n            pq.push({new_f-curr_f,i});\\n        }\\n\\n        while(k)\\n        {\\n            pair<double,int> p = pq.top();\\n            pq.pop();\\n            int index = p.second;\\n            classes[index][0]+=1;\\n            classes[index][1]+=1;\\n\\n            int new_n = classes[index][0]+1;\\n            int new_d = classes[index][1]+1;\\n            double new_f = (double)new_n/(double)new_d;\\n            double curr_f = (double)classes[index][0]/(double)classes[index][1];\\n\\n            pq.push({new_f-curr_f,index});\\n            k--;\\n        }\\n        double sum = 0;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            sum+=(double)classes[i][0]/(double)classes[i][1];\\n        }\\n        return sum/(double)classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        priority_queue<pair<double,int>> pq;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int curr_n = classes[i][0];\\n            int curr_d = classes[i][1];\\n            double curr_f = (double)curr_n/(double)curr_d;\\n            int new_n = curr_n+1;\\n            int new_d = curr_d+1;\\n            double new_f = (double)new_n/(double)new_d;\\n\\n            pq.push({new_f-curr_f,i});\\n        }\\n\\n        while(k)\\n        {\\n            pair<double,int> p = pq.top();\\n            pq.pop();\\n            int index = p.second;\\n            classes[index][0]+=1;\\n            classes[index][1]+=1;\\n\\n            int new_n = classes[index][0]+1;\\n            int new_d = classes[index][1]+1;\\n            double new_f = (double)new_n/(double)new_d;\\n            double curr_f = (double)classes[index][0]/(double)classes[index][1];\\n\\n            pq.push({new_f-curr_f,index});\\n            k--;\\n        }\\n        double sum = 0;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            sum+=(double)classes[i][0]/(double)classes[i][1];\\n        }\\n        return sum/(double)classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2254891,
                "title": "c-priority-queue-greedy",
                "content": "What the question ask? so we have to assign ExtraStudent in such class that we\"ll get maximum possible ratio . so How we\"ll do this . We have to send ExtraStudents to classes 1 by 1 according to their ratio(calculate the difference of all classes for 1 student) where we get more difference  we\"ll send the student to that particular class. and again check the difference for the next student .\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,pair<int,int>>>pq;\\n        for(int i=0;i<classes.size();i++){\\n             int var1 = classes[i][0] , var2 = classes[i][1];\\n            double diff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n              pq.push({diff,{var1,var2}});\\n        }\\n        \\n        while(extraStudents!=0){\\n            int var1 = pq.top().second.first , var2 = pq.top().second.second;\\n            var1++;\\n            var2++;\\n            double newdiff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n            pq.pop();\\n             pq.push({newdiff,{var1,var2}});\\n            extraStudents--;\\n            \\n        }\\n        double ans = 0;\\n        while(!pq.empty()){\\n            ans += (double)(pq.top().second.first) /(pq.top().second.second);\\n            pq.pop();\\n        }\\n         \\n        return ans/classes.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,pair<int,int>>>pq;\\n        for(int i=0;i<classes.size();i++){\\n             int var1 = classes[i][0] , var2 = classes[i][1];\\n            double diff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n              pq.push({diff,{var1,var2}});\\n        }\\n        \\n        while(extraStudents!=0){\\n            int var1 = pq.top().second.first , var2 = pq.top().second.second;\\n            var1++;\\n            var2++;\\n            double newdiff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n            pq.pop();\\n             pq.push({newdiff,{var1,var2}});\\n            extraStudents--;\\n            \\n        }\\n        double ans = 0;\\n        while(!pq.empty()){\\n            ans += (double)(pq.top().second.first) /(pq.top().second.second);\\n            pq.pop();\\n        }\\n         \\n        return ans/classes.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2009314,
                "title": "java-priority-queue-clean-code-solution",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq = new PriorityQueue<>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                double adiff = (a[0]+1)/(a[1]+1) - (a[0]/a[1]);                \\n                double bdiff = (b[0]+1)/(b[1]+1) - (b[0]/b[1]);\\n                if(adiff==bdiff) return 0;\\n                return adiff>bdiff? -1:1;\\n            }\\n        });\\n        \\n        for(int[] c:classes) pq.add(new double[]{c[0],c[1]});\\n        \\n        for(int i =0;i<extraStudents;i++){\\n            double[] curr = pq.poll();\\n            pq.add(new double[]{curr[0]+1,curr[1]+1});\\n        }\\n        \\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            double[] curr = pq.poll();\\n            sum+=curr[0]/curr[1];\\n        }\\n        \\n        return sum/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq = new PriorityQueue<>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                double adiff = (a[0]+1)/(a[1]+1) - (a[0]/a[1]);                \\n                double bdiff = (b[0]+1)/(b[1]+1) - (b[0]/b[1]);\\n                if(adiff==bdiff) return 0;\\n                return adiff>bdiff? -1:1;\\n            }\\n        });\\n        \\n        for(int[] c:classes) pq.add(new double[]{c[0],c[1]});\\n        \\n        for(int i =0;i<extraStudents;i++){\\n            double[] curr = pq.poll();\\n            pq.add(new double[]{curr[0]+1,curr[1]+1});\\n        }\\n        \\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            double[] curr = pq.poll();\\n            sum+=curr[0]/curr[1];\\n        }\\n        \\n        return sum/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1813724,
                "title": "c-solution-explanation-priority-queue-1792",
                "content": "**How priority_queue (max heap) came into picture-->**\\nWe have to return maximum average pass ratio which is equal to sum of all pass ratios / number of classes. Where number of classes is constant so we need to increase the sum of all pass ratios.\\nIn each class there is a pass ratio before adding extra students, as we need to increase the pass ratio of a class so we will maintain the increase in ratio if a student is added into a class.\\nSuppose a class is given as [p,t], it\\'s original pass ratio is p/t so initially we will add p/t to our total sum of ratios then if a student is added to this class the new ratio is (p+1)/(t+1) which means the increase in the ratio is : new ratio - old ratio which is [(p+1)/(t+1) - p/t].\\nSo to maintain the profit (increase in ratio) in desc\\nending order we use priority_queue here.\\nAs the extra students are limited we need to add each student to the class which gives us the more profit (increase). Soon after adding the student we will increment our sum of ratios and also now the new ratio for this class will also be changed that should be added back to the queue.\\n```\\nclass Solution {\\npublic:\\n    double nextProfit(double p,double t){\\n        return ((p+1)/(t+1) - p/t);\\n    }\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double sumOfRatios = 0,p,t,profit;\\n        priority_queue<pair<double,pair<double,double>>>pq;\\n        for(vector<int>& v : classes){\\n            p = v[0]; t = v[1];\\n            sumOfRatios += p/t;\\n            profit = nextProfit(p,t);\\n            pq.push({profit,{p,t}});\\n        }\\n        pair<double,pair<double,double>>temp;\\n        while(extraStudents--){\\n            temp = pq.top(); pq.pop();\\n            profit = temp.first; p = temp.second.first; t = temp.second.second;\\n            sumOfRatios += profit;\\n            p++; t++; profit = nextProfit(p,t);\\n            pq.push({profit,{p,t}});\\n        }\\n        return (sumOfRatios/(double)classes.size());\\n    }\\n};\\n```\\nFeel free to comment your queries if any\\n**Upvote** if found useful\\n**Thank you :)**",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double nextProfit(double p,double t){\\n        return ((p+1)/(t+1) - p/t);\\n    }\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double sumOfRatios = 0,p,t,profit;\\n        priority_queue<pair<double,pair<double,double>>>pq;\\n        for(vector<int>& v : classes){\\n            p = v[0]; t = v[1];\\n            sumOfRatios += p/t;\\n            profit = nextProfit(p,t);\\n            pq.push({profit,{p,t}});\\n        }\\n        pair<double,pair<double,double>>temp;\\n        while(extraStudents--){\\n            temp = pq.top(); pq.pop();\\n            profit = temp.first; p = temp.second.first; t = temp.second.second;\\n            sumOfRatios += profit;\\n            p++; t++; profit = nextProfit(p,t);\\n            pq.push({profit,{p,t}});\\n        }\\n        return (sumOfRatios/(double)classes.size());\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1478123,
                "title": "c-solution",
                "content": "```\\ndouble precise(double a)\\n{\\n   double  intpart;\\n   double fractpart = modf (a, &intpart);\\n   fractpart  = roundf(fractpart * 100000.0)/100000.0; // Round to 5 decimal places\\n   double b = intpart + fractpart;\\n    return b;\\n}\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int min_index= 0;\\n        double min_ratio= 0.00000, sum= 0.0;\\n        double cur_ratio= 0.0, new_ratio= 0.0;\\n        vector<double> ratio;\\n        int l= classes.size();\\n        multimap<double, int> mp;\\n        setprecision(5);\\n        for(int i= 0; i<l ;i++)\\n        {\\n            mp.insert({((double)classes[i][1]-(double)classes[i][0])/((double)classes[i][1]*((double)classes[i][1]+1)), i});\\n            ratio.push_back((double)classes[i][0]/(double)classes[i][1]);\\n        }\\n        for(int i= 0;i< extraStudents; i++)\\n        {\\n            int j= (--mp.end())->second;\\n            classes[j][0]+= 1;\\n            classes[j][1]+= 1;\\n            ratio[j]= (double)classes[j][0]/(double)classes[j][1];\\n            mp.erase(--mp.end());\\n            mp.insert({((double)classes[j][1]-(double)classes[j][0])/((double)classes[j][1]*((double)classes[j][1]+1)), j});\\n        }\\n        for(int i= 0;i< l;i++)\\n        {\\n            sum+= ratio[i];\\n            cout<<ratio[i]<<\\'\\\\n\\';\\n        }\\n        int k= (sum/l)*1e5;\\n        min_ratio= k/1e5;\\n        return min_ratio;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ndouble precise(double a)\\n{\\n   double  intpart;\\n   double fractpart = modf (a, &intpart);\\n   fractpart  = roundf(fractpart * 100000.0)/100000.0; // Round to 5 decimal places\\n   double b = intpart + fractpart;\\n    return b;\\n}\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int min_index= 0;\\n        double min_ratio= 0.00000, sum= 0.0;\\n        double cur_ratio= 0.0, new_ratio= 0.0;\\n        vector<double> ratio;\\n        int l= classes.size();\\n        multimap<double, int> mp;\\n        setprecision(5);\\n        for(int i= 0; i<l ;i++)\\n        {\\n            mp.insert({((double)classes[i][1]-(double)classes[i][0])/((double)classes[i][1]*((double)classes[i][1]+1)), i});\\n            ratio.push_back((double)classes[i][0]/(double)classes[i][1]);\\n        }\\n        for(int i= 0;i< extraStudents; i++)\\n        {\\n            int j= (--mp.end())->second;\\n            classes[j][0]+= 1;\\n            classes[j][1]+= 1;\\n            ratio[j]= (double)classes[j][0]/(double)classes[j][1];\\n            mp.erase(--mp.end());\\n            mp.insert({((double)classes[j][1]-(double)classes[j][0])/((double)classes[j][1]*((double)classes[j][1]+1)), j});\\n        }\\n        for(int i= 0;i< l;i++)\\n        {\\n            sum+= ratio[i];\\n            cout<<ratio[i]<<\\'\\\\n\\';\\n        }\\n        int k= (sum/l)*1e5;\\n        min_ratio= k/1e5;\\n        return min_ratio;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1383121,
                "title": "c-sortedset",
                "content": "```\\npublic class Solution {\\n    public double MaxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        var set = new SortedSet<(double delta, int index, double pass, double total)>();\\n        int index = 0;\\n        \\n        double avg = 0.0;\\n        foreach(var cl in classes)\\n        {\\n            double a = cl[0], b = cl[1];\\n            avg += a/b;              \\n            set.Add((GetDeltaGain(a, b), index++, a + 1, b + 1)); //gotcha\\n        }\\n        \\n        while(extraStudents-- > 0)\\n        {            \\n            var max = set.Max;\\n            set.Remove(set.Max);            \\n            avg += max.delta;\\n            set.Add((GetDeltaGain(max.pass, max.total), index++, max.pass + 1, max.total + 1));           \\n        }       \\n       \\n        return avg/classes.Length;\\n    }\\n    \\n    private double GetDeltaGain(double a, double b)\\n    {\\n        return (a + 1)/(b + 1) - a/b; //gotcha gotcha gotcha -- BRACKETS\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public double MaxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        var set = new SortedSet<(double delta, int index, double pass, double total)>();\\n        int index = 0;\\n        \\n        double avg = 0.0;\\n        foreach(var cl in classes)\\n        {\\n            double a = cl[0], b = cl[1];\\n            avg += a/b;              \\n            set.Add((GetDeltaGain(a, b), index++, a + 1, b + 1)); //gotcha\\n        }\\n        \\n        while(extraStudents-- > 0)\\n        {            \\n            var max = set.Max;\\n            set.Remove(set.Max);            \\n            avg += max.delta;\\n            set.Add((GetDeltaGain(max.pass, max.total), index++, max.pass + 1, max.total + 1));           \\n        }       \\n       \\n        return avg/classes.Length;\\n    }\\n    \\n    private double GetDeltaGain(double a, double b)\\n    {\\n        return (a + 1)/(b + 1) - a/b; //gotcha gotcha gotcha -- BRACKETS\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1315658,
                "title": "python-solution-with-heap-with-the-idea",
                "content": "The idea is add each student such that their addition increases the particular class average more.\\n\\nFor this, I maintained a heap in which i keep adding what will be the change in average with addition of one student to that particular class. i.e., `x/y - (x+1)/(y+1)` will be the negative value of change in average with addition of one student in it.\\n\\n```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        heap=[]\\n        for x,y in classes:\\n            heapq.heappush(heap, (x/y -(x+1)/(y+1) ,x,y))\\n            \\n        while extraStudents:\\n            extraStudents-=1\\n            perc,x,y =heapq.heappop(heap)\\n            x+=1\\n            y+=1\\n            heapq.heappush(heap, (x/y -(x+1)/(y+1) ,x,y))\\n\\n            #print(heap)\\n            \\n        return sum(y/z for x,y,z in heap)/len(heap)\\n```\\n",
                "solutionTags": [],
                "code": "```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        heap=[]\\n        for x,y in classes:\\n            heapq.heappush(heap, (x/y -(x+1)/(y+1) ,x,y))\\n            \\n        while extraStudents:\\n            extraStudents-=1\\n            perc,x,y =heapq.heappop(heap)\\n            x+=1\\n            y+=1\\n            heapq.heappush(heap, (x/y -(x+1)/(y+1) ,x,y))\\n\\n            #print(heap)\\n            \\n        return sum(y/z for x,y,z in heap)/len(heap)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1303447,
                "title": "python-solution-heap",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        h = []\\n        n=len(classes)\\n        \\n        \\n        for i in classes:\\n            currpassration = i[0]/i[1]\\n            ifaddthan = (i[0]+1)/ (i[1]+1)\\n            \\n            increase = ifaddthan - currpassration\\n            heappush(h,(-increase, currpassration,i[0],i[1]))\\n            \\n        heapify(h)\\n        \\n        while extraStudents:\\n\\n            a,curr,pas, tot = heappop(h)\\n            a=-a            \\n            curr +=a\\n            ifaddthan = (pas+2)/(tot+2)\\n            \\n            increase = ifaddthan - curr\\n            heappush(h, (-increase, curr, pas+1,tot+1))\\n            \\n            extraStudents-=1\\n        \\n        ps=0\\n        tot=0\\n        \\n        while h:\\n            a=h.pop()\\n            ps+=a[1]\\n        return ps/n\\n            \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        h = []\\n        n=len(classes)\\n        \\n        \\n        for i in classes:\\n            currpassration = i[0]/i[1]\\n            ifaddthan = (i[0]+1)/ (i[1]+1)\\n            \\n            increase = ifaddthan - currpassration\\n            heappush(h,(-increase, currpassration,i[0],i[1]))\\n            \\n        heapify(h)\\n        \\n        while extraStudents:\\n\\n            a,curr,pas, tot = heappop(h)\\n            a=-a            \\n            curr +=a\\n            ifaddthan = (pas+2)/(tot+2)\\n            \\n            increase = ifaddthan - curr\\n            heappush(h, (-increase, curr, pas+1,tot+1))\\n            \\n            extraStudents-=1\\n        \\n        ps=0\\n        tot=0\\n        \\n        while h:\\n            a=h.pop()\\n            ps+=a[1]\\n        return ps/n\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1280681,
                "title": "python-heap-solution",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], e: int) -> float:\\n        heap=[]\\n        for i,j in classes:\\n            diff=(i+1)/(j+1)-(i/j)\\n            heapq.heappush(heap,(-diff,i,j))\\n        while(e>0):\\n            diff,i,j=heapq.heappop(heap)\\n            i+=1\\n            j+=1\\n            diff=(i+1)/(j+1)-(i/j)\\n            heapq.heappush(heap,(-diff,i,j))\\n            e-=1\\n        ans=0\\n        for diff,i,j in heap:\\n            ans+=(i/j)\\n        return ans/len(classes)\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], e: int) -> float:\\n        heap=[]\\n        for i,j in classes:\\n            diff=(i+1)/(j+1)-(i/j)\\n            heapq.heappush(heap,(-diff,i,j))\\n        while(e>0):\\n            diff,i,j=heapq.heappop(heap)\\n            i+=1\\n            j+=1\\n            diff=(i+1)/(j+1)-(i/j)\\n            heapq.heappush(heap,(-diff,i,j))\\n            e-=1\\n        ans=0\\n        for diff,i,j in heap:\\n            ans+=(i/j)\\n        return ans/len(classes)\\n",
                "codeTag": "Java"
            },
            {
                "id": 1166299,
                "title": "javascript-max-heap-approach-o-n-logn-time",
                "content": "Time: `O((N + M) * logN)` where `N` is # of  `classes` and `M` is # of `extraStudents`\\nSpace: `O(N)`\\n```javascript\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const heap = new MaxPriorityQueue({priority: x => x[2]});\\n    \\n    for(let [pass, total] of classes) {\\n        const before = pass/total;\\n        const after = (pass+1)/(total+1)\\n        heap.enqueue([pass, total, after-before]);\\n    }\\n    \\n    while(extraStudents--) {\\n        let [pass, total] = heap.dequeue().element;\\n        pass++;\\n        total++;\\n        const before = pass/total;\\n        const after = (pass+1)/(total+1);\\n        heap.enqueue([pass, total, after-before]);\\n    }\\n    \\n    let sum = 0;\\n    \\n    while(!heap.isEmpty()) {\\n        const [pass, total] = heap.dequeue().element;\\n        sum += (pass/total);\\n    }\\n    return sum/classes.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```javascript\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const heap = new MaxPriorityQueue({priority: x => x[2]});\\n    \\n    for(let [pass, total] of classes) {\\n        const before = pass/total;\\n        const after = (pass+1)/(total+1)\\n        heap.enqueue([pass, total, after-before]);\\n    }\\n    \\n    while(extraStudents--) {\\n        let [pass, total] = heap.dequeue().element;\\n        pass++;\\n        total++;\\n        const before = pass/total;\\n        const after = (pass+1)/(total+1);\\n        heap.enqueue([pass, total, after-before]);\\n    }\\n    \\n    let sum = 0;\\n    \\n    while(!heap.isEmpty()) {\\n        const [pass, total] = heap.dequeue().element;\\n        sum += (pass/total);\\n    }\\n    return sum/classes.length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1144308,
                "title": "c-clean-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,int>> q;\\n        \\n        for(int i=0;i<classes.size();i++){\\n            double a=(float)(classes[i][0]+1)/(float)(classes[i][1]+1)-(float)classes[i][0]/(float)classes[i][1];\\n            q.push(make_pair(a,i));\\n        }\\n        for(int j=0;j<extraStudents;j++){\\n            int i=q.top().second;\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            double a=(float)(classes[i][0]+1)/(float)(classes[i][1]+1)-(float)classes[i][0]/(float)classes[i][1];\\n            q.pop();\\n            q.push(make_pair(a,i));\\n        }\\n        \\n        double ans=0;\\n        for (int i=0;i<classes.size();i++){\\n            ans+=(float)classes[i][0]/(float)classes[i][1];\\n        }\\n        return ans/classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,int>> q;\\n        \\n        for(int i=0;i<classes.size();i++){\\n            double a=(float)(classes[i][0]+1)/(float)(classes[i][1]+1)-(float)classes[i][0]/(float)classes[i][1];\\n            q.push(make_pair(a,i));\\n        }\\n        for(int j=0;j<extraStudents;j++){\\n            int i=q.top().second;\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            double a=(float)(classes[i][0]+1)/(float)(classes[i][1]+1)-(float)classes[i][0]/(float)classes[i][1];\\n            q.pop();\\n            q.push(make_pair(a,i));\\n        }\\n        \\n        double ans=0;\\n        for (int i=0;i<classes.size();i++){\\n            ans+=(float)classes[i][0]/(float)classes[i][1];\\n        }\\n        return ans/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1117899,
                "title": "java-simple-and-easy-solution-using-max-heap-and-faster-than-100-clean-code-with-comments",
                "content": "**PLEASE UPVOTE IF YOU LIKE THIS SOLUTION**\\n\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        //max heap\\n        //here we are using Max Heap, whaich has maximum element in root\\n        PriorityQueue<Class> maxHeap = new PriorityQueue<Class>(Comparator.comparingDouble(o -> -o.gainPassRatio));\\n        \\n        \\n        for(int[] eachClass : classes){\\n            int pass = eachClass[0];\\n            int total = eachClass[1];\\n            \\n            maxHeap.add(new Class(pass, total,  getGainPassRatio(pass, total)));\\n        }\\n        \\n        \\n        while(extraStudents --> 0){\\n            //we are using Gready Approach \\n            //get the class, which will have a maximum \\n            //gain in passing ratio, if we add a student\\n            Class c =  maxHeap.remove();\\n            \\n            //this class will have maximum gain in passing ratio\\n            //so add 1 extra student (who always pass)\\n            c.pass = c.pass + 1;\\n            c.total = c.total + 1;\\n            c.gainPassRatio = getGainPassRatio(c.pass + 1, c.total + 1);\\n            \\n            maxHeap.add(c);\\n        }\\n        \\n        double passRatioSum = 0.0d;\\n        while(!maxHeap.isEmpty()){\\n            Class c =  maxHeap.remove();\\n            passRatioSum += ((double)c.pass / c.total);\\n        }\\n        \\n        \\n        return passRatioSum / classes.length;\\n    }\\n    \\n    private double getGainPassRatio(int pass, int total){\\n        double passRatio =  (double)pass / total;\\n        \\n        //add 1 student, \\n        pass++;\\n        total++;\\n        \\n        double passRatioAfterAdding = (double)pass / total;\\n        \\n        //find gain in passing ratio, if we add 1 student\\n        return passRatioAfterAdding - passRatio; \\n    }\\n}\\n\\nclass Class {\\n    int pass;\\n    int total;\\n    double gainPassRatio;\\n    \\n    public Class(int pass, int total, double gainPassRatio){\\n        this.pass = pass;\\n        this.total = total;\\n        this.gainPassRatio = gainPassRatio;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        //max heap\\n        //here we are using Max Heap, whaich has maximum element in root\\n        PriorityQueue<Class> maxHeap = new PriorityQueue<Class>(Comparator.comparingDouble(o -> -o.gainPassRatio));\\n        \\n        \\n        for(int[] eachClass : classes){\\n            int pass = eachClass[0];\\n            int total = eachClass[1];\\n            \\n            maxHeap.add(new Class(pass, total,  getGainPassRatio(pass, total)));\\n        }\\n        \\n        \\n        while(extraStudents --> 0){\\n            //we are using Gready Approach \\n            //get the class, which will have a maximum \\n            //gain in passing ratio, if we add a student\\n            Class c =  maxHeap.remove();\\n            \\n            //this class will have maximum gain in passing ratio\\n            //so add 1 extra student (who always pass)\\n            c.pass = c.pass + 1;\\n            c.total = c.total + 1;\\n            c.gainPassRatio = getGainPassRatio(c.pass + 1, c.total + 1);\\n            \\n            maxHeap.add(c);\\n        }\\n        \\n        double passRatioSum = 0.0d;\\n        while(!maxHeap.isEmpty()){\\n            Class c =  maxHeap.remove();\\n            passRatioSum += ((double)c.pass / c.total);\\n        }\\n        \\n        \\n        return passRatioSum / classes.length;\\n    }\\n    \\n    private double getGainPassRatio(int pass, int total){\\n        double passRatio =  (double)pass / total;\\n        \\n        //add 1 student, \\n        pass++;\\n        total++;\\n        \\n        double passRatioAfterAdding = (double)pass / total;\\n        \\n        //find gain in passing ratio, if we add 1 student\\n        return passRatioAfterAdding - passRatio; \\n    }\\n}\\n\\nclass Class {\\n    int pass;\\n    int total;\\n    double gainPassRatio;\\n    \\n    public Class(int pass, int total, double gainPassRatio){\\n        this.pass = pass;\\n        this.total = total;\\n        this.gainPassRatio = gainPassRatio;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110658,
                "title": "simple-c-solution-priority-queue",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<long double,pair<long long int,long long int>>>pq;\\n        for(auto it:classes)\\n        {\\n            long long int z=(it[1]);\\n            z=z*(it[1]+1);\\n            long double pt=1.0*(it[1]-it[0])/z;\\n            pq.push({pt,{it[0],it[1]}});\\n        }\\n        for(int i=0;i<extraStudents;i++)\\n        {\\n            long long int t1=pq.top().second.first+1;\\n            long long int t2=pq.top().second.second+1;\\n            long long int z=t2;\\n            z=z*(t2+1);\\n            long double g=1.0*(t2-t1)/z;\\n            pq.pop();\\n            pq.push({g,{t1,t2}});\\n        }  \\n        long double avg=0;\\n        while(!pq.empty())\\n        {\\n            avg+=1.0*(pq.top().second.first)/(pq.top().second.second);\\n            pq.pop();\\n        }\\n        return 1.0*avg/classes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<long double,pair<long long int,long long int>>>pq;\\n        for(auto it:classes)\\n        {\\n            long long int z=(it[1]);\\n            z=z*(it[1]+1);\\n            long double pt=1.0*(it[1]-it[0])/z;\\n            pq.push({pt,{it[0],it[1]}});\\n        }\\n        for(int i=0;i<extraStudents;i++)\\n        {\\n            long long int t1=pq.top().second.first+1;\\n            long long int t2=pq.top().second.second+1;\\n            long long int z=t2;\\n            z=z*(t2+1);\\n            long double g=1.0*(t2-t1)/z;\\n            pq.pop();\\n            pq.push({g,{t1,t2}});\\n        }  \\n        long double avg=0;\\n        while(!pq.empty())\\n        {\\n            avg+=1.0*(pq.top().second.first)/(pq.top().second.second);\\n            pq.pop();\\n        }\\n        return 1.0*avg/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109577,
                "title": "java-priorityqueue-solution-beats-100",
                "content": "```\\npublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\tQueue<double[]> pq = new PriorityQueue<>((a,b) -> {\\n\\t\\tdouble ratioDiffA = (a[0] + 1) / (a[1] + 1) - a[0] / a[1];\\n\\t\\tdouble ratioDiffB = (b[0] + 1) / (b[1] + 1) - b[0] / b[1];\\n\\t\\treturn Double.compare(ratioDiffB, ratioDiffA);\\n\\t});\\n\\tfor (int[] c : classes) {\\n\\t\\tpq.add(new double[]{c[0], c[1]});\\n\\t}\\n\\twhile (extraStudents-- > 0) {\\n\\t\\tdouble[] c = pq.poll();\\n\\t\\tc[0]++;\\n\\t\\tc[1]++;\\n\\t\\tpq.add(c);\\n\\t}\\n\\tdouble ratioSum = 0;\\n\\tfor (double[] c : pq) {\\n\\t\\tratioSum += c[0] / c[1];\\n\\t}\\n\\treturn ratioSum / classes.length;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\tQueue<double[]> pq = new PriorityQueue<>((a,b) -> {\\n\\t\\tdouble ratioDiffA = (a[0] + 1) / (a[1] + 1) - a[0] / a[1];\\n\\t\\tdouble ratioDiffB = (b[0] + 1) / (b[1] + 1) - b[0] / b[1];\\n\\t\\treturn Double.compare(ratioDiffB, ratioDiffA);\\n\\t});\\n\\tfor (int[] c : classes) {\\n\\t\\tpq.add(new double[]{c[0], c[1]});\\n\\t}\\n\\twhile (extraStudents-- > 0) {\\n\\t\\tdouble[] c = pq.poll();\\n\\t\\tc[0]++;\\n\\t\\tc[1]++;\\n\\t\\tpq.add(c);\\n\\t}\\n\\tdouble ratioSum = 0;\\n\\tfor (double[] c : pq) {\\n\\t\\tratioSum += c[0] / c[1];\\n\\t}\\n\\treturn ratioSum / classes.length;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108740,
                "title": "c-simple-heap-solution-detailed-explanation",
                "content": "```\\n/*\\n    https://leetcode.com/problems/maximum-average-pass-ratio/\\n    \\n    At a glance the obvious choice seems like picking the class with least pass\\n    ratio each time and adding a genius student. But this only brings the lower \\n    ratio scores near the avg, doesn\\'t try to increase the max observed score or\\n    decide where to add a student in case two classes have the same pass ratio.\\n    So to answer the above ques, we use the delta change increment in avg ratio score.\\n    The class that can show the max change is picked and a student is added there.\\n    This way a class with max promise is always picked.\\n    \\n    TC: O(nlogn + klogn + nlogn) ~ O((n+k)logn), n: no. of classes\\n*/\\n\\nclass Solution {\\npublic:\\n    // Computes the change seen when a new student is added to current class strength\\n    double delta_increment(int &pass, int &total) {\\n        return (double) (pass + 1) / (total + 1) - (double)pass / total;    \\n    }\\n    \\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        // Max heap wrt to the delta increment each class pass ratio can achieve\\n        priority_queue< tuple<double, int, int>, vector< tuple<double, int, int> >> max_heap;\\n        \\n        for(auto class_score: classes) \\n            max_heap.emplace(make_tuple(delta_increment(class_score[0], class_score[1]),\\n                                         class_score[0], class_score[1]));\\n        \\n        // Add the genius students to those classes where the ratio increment is max\\n        while(extraStudents--) {\\n            auto max_delta_class = max_heap.top();\\n            max_heap.pop();\\n            auto [delta, pass, total] = max_delta_class;\\n            ++pass, ++total;\\n            max_heap.emplace(make_tuple(delta_increment(pass, total), pass, total));\\n        }\\n        \\n        // Find the total avg class pass ratio\\n        double avg_pass = 0;\\n        while(!max_heap.empty()) {\\n            auto max_delta_class = max_heap.top();\\n            max_heap.pop();\\n            avg_pass += (double)get<1>(max_delta_class) / get<2>(max_delta_class);\\n        }\\n        return avg_pass / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n/*\\n    https://leetcode.com/problems/maximum-average-pass-ratio/\\n    \\n    At a glance the obvious choice seems like picking the class with least pass\\n    ratio each time and adding a genius student. But this only brings the lower \\n    ratio scores near the avg, doesn\\'t try to increase the max observed score or\\n    decide where to add a student in case two classes have the same pass ratio.\\n    So to answer the above ques, we use the delta change increment in avg ratio score.\\n    The class that can show the max change is picked and a student is added there.\\n    This way a class with max promise is always picked.\\n    \\n    TC: O(nlogn + klogn + nlogn) ~ O((n+k)logn), n: no. of classes\\n*/\\n\\nclass Solution {\\npublic:\\n    // Computes the change seen when a new student is added to current class strength\\n    double delta_increment(int &pass, int &total) {\\n        return (double) (pass + 1) / (total + 1) - (double)pass / total;    \\n    }\\n    \\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        // Max heap wrt to the delta increment each class pass ratio can achieve\\n        priority_queue< tuple<double, int, int>, vector< tuple<double, int, int> >> max_heap;\\n        \\n        for(auto class_score: classes) \\n            max_heap.emplace(make_tuple(delta_increment(class_score[0], class_score[1]),\\n                                         class_score[0], class_score[1]));\\n        \\n        // Add the genius students to those classes where the ratio increment is max\\n        while(extraStudents--) {\\n            auto max_delta_class = max_heap.top();\\n            max_heap.pop();\\n            auto [delta, pass, total] = max_delta_class;\\n            ++pass, ++total;\\n            max_heap.emplace(make_tuple(delta_increment(pass, total), pass, total));\\n        }\\n        \\n        // Find the total avg class pass ratio\\n        double avg_pass = 0;\\n        while(!max_heap.empty()) {\\n            auto max_delta_class = max_heap.top();\\n            max_heap.pop();\\n            avg_pass += (double)get<1>(max_delta_class) / get<2>(max_delta_class);\\n        }\\n        return avg_pass / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108592,
                "title": "ruby-greedy-priority-queue",
                "content": "### Observation\\n\\nIf there is a class with pass equeals `p` and total students equals `t` then pass ration equals `p / t`.\\nAdding an extra student who passed exam increases ration by:\\n\\n```\\np + 1     p     (p + 1) * t - p * (t + 1)     t - p\\n-----  -  - =  -------------------------- = -----------\\nt + 1     t           t * (t + 1)           t * (t + 1) \\n```\\n\\n### Solution\\n\\nIgnore classed where all students pass the exam (pass ration `1` cannot be increased).\\nAll other store in a priority queue. Sort the queue by the increase ratio we can obtain by adding one extra student.\\n\\n```ruby\\ndef max_average_ratio(classes, extra_students)\\n  pq = classes.select { |p, t| p < t }.map { |p, t| [(t - p).to_f / (t * (t + 1)), p, t] }.sort\\n  while pq.any? && (extra_students -= 1) >= 0\\n    dr, p, t = pq.pop\\n    ndr = dr * t / (t + 2) # new ratio increase. Same as (t - p) / ((t + 1) * (t + 2))\\n\\n    idx = pq.bsearch_index { |dr, _, _| dr >= ndr } || pq.size\\n    pq.insert(idx, [ndr, p + 1, t + 1])\\n  end\\n  (pq.sum { |_, p, t| p.fdiv t } + classes.size - pq.size) / classes.size\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\np + 1     p     (p + 1) * t - p * (t + 1)     t - p\\n-----  -  - =  -------------------------- = -----------\\nt + 1     t           t * (t + 1)           t * (t + 1) \\n```\n```ruby\\ndef max_average_ratio(classes, extra_students)\\n  pq = classes.select { |p, t| p < t }.map { |p, t| [(t - p).to_f / (t * (t + 1)), p, t] }.sort\\n  while pq.any? && (extra_students -= 1) >= 0\\n    dr, p, t = pq.pop\\n    ndr = dr * t / (t + 2) # new ratio increase. Same as (t - p) / ((t + 1) * (t + 2))\\n\\n    idx = pq.bsearch_index { |dr, _, _| dr >= ndr } || pq.size\\n    pq.insert(idx, [ndr, p + 1, t + 1])\\n  end\\n  (pq.sum { |_, p, t| p.fdiv t } + classes.size - pq.size) / classes.size\\nend\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108541,
                "title": "c-using-priority-queue-simple-and-sort",
                "content": "```\\nclass Solution {\\npublic:\\n    double mx(double a,double b)\\n    {\\n        return (a+1)/(b+1)-a/b;\\n    }\\n    \\n    double maxAverageRatio(vector<vector<int>>& cls, int extra) {\\n        priority_queue<pair<double,pair<double,double>>> pq;\\n        \\n        for(auto v:cls)\\n            pq.push({mx(v[0],v[1]),{v[0],v[1]}});\\n        \\n        while(extra--)\\n        {\\n            pair<double,pair<double,double>> p=pq.top();\\n            \\n            p.first=mx(p.second.first+1,p.second.second+1);\\n            pq.pop();\\n            p.second.first+=1;\\n            p.second.second+=1;\\n            pq.push(p);\\n        }\\n        double ans=0;\\n        while(!pq.empty())\\n        {\\n           pair<double,pair<double,double>> p=pq.top();\\n            pq.pop();\\n            ans+=p.second.first/p.second.second;\\n        }\\n        \\n        return ans/cls.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double mx(double a,double b)\\n    {\\n        return (a+1)/(b+1)-a/b;\\n    }\\n    \\n    double maxAverageRatio(vector<vector<int>>& cls, int extra) {\\n        priority_queue<pair<double,pair<double,double>>> pq;\\n        \\n        for(auto v:cls)\\n            pq.push({mx(v[0],v[1]),{v[0],v[1]}});\\n        \\n        while(extra--)\\n        {\\n            pair<double,pair<double,double>> p=pq.top();\\n            \\n            p.first=mx(p.second.first+1,p.second.second+1);\\n            pq.pop();\\n            p.second.first+=1;\\n            p.second.second+=1;\\n            pq.push(p);\\n        }\\n        double ans=0;\\n        while(!pq.empty())\\n        {\\n           pair<double,pair<double,double>> p=pq.top();\\n            pq.pop();\\n            ans+=p.second.first/p.second.second;\\n        }\\n        \\n        return ans/cls.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108514,
                "title": "c-simple-and-easy-to-understand-solution",
                "content": "**Ques : How we are arranging in priority queue ? Based on what factor comparator will arrange ?**\\n--> Based upon the gain of average after incrementing the existing values of {pass,total}. Gain should be maximum.\\n\\n```\\nclass comparator{\\n    public : \\n        int operator()(pair<int,int> &v1,pair<int,int> &v2){\\n            double new_val1=(double)(v1.first+1)/(v1.second+1);\\n            double old_val1=(double)v1.first/v1.second;\\n            \\n            double new_val2=(double)(v2.first+1)/(v2.second+1);\\n            double old_val2=(double)v2.first/v2.second;\\n            \\n            double diff1=new_val1-old_val1;\\n            double diff2=new_val2-old_val2;\\n            \\n            return (diff1<=diff2);\\n            \\n        }\\n};\\nclass Solution {\\npublic:\\n    \\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>, vector<pair<int,int> >,comparator> pq;\\n        int count=0;\\n        for(int i=0;i<classes.size();i++){\\n            if(classes[i][0]!=classes[i][1])\\n                pq.push(make_pair(classes[i][0],classes[i][1]));\\n            else    //if class with 100% pass average\\n                count++;\\n        }\\n        while(extraStudents>0 && !pq.empty()){\\n            pair<int,int> v=pq.top();pq.pop();\\n            v.first++,v.second++;\\n            pq.push(v);\\n            extraStudents--;\\n        }\\n        \\n        double pass=0,total=0;\\n        double ans=0;\\n       while(!pq.empty()){\\n            pair<int,int> v=pq.top();pq.pop();\\n            pass=v.first,total=v.second;\\n            ans+=pass/total;\\n        }\\n        ans+=count;\\n        return ans/classes.size();\\n    }\\n};\\n```\\n\\nPS - Same code will give TLE on 2 cases if we use vector instead of pair.",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass comparator{\\n    public : \\n        int operator()(pair<int,int> &v1,pair<int,int> &v2){\\n            double new_val1=(double)(v1.first+1)/(v1.second+1);\\n            double old_val1=(double)v1.first/v1.second;\\n            \\n            double new_val2=(double)(v2.first+1)/(v2.second+1);\\n            double old_val2=(double)v2.first/v2.second;\\n            \\n            double diff1=new_val1-old_val1;\\n            double diff2=new_val2-old_val2;\\n            \\n            return (diff1<=diff2);\\n            \\n        }\\n};\\nclass Solution {\\npublic:\\n    \\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>, vector<pair<int,int> >,comparator> pq;\\n        int count=0;\\n        for(int i=0;i<classes.size();i++){\\n            if(classes[i][0]!=classes[i][1])\\n                pq.push(make_pair(classes[i][0],classes[i][1]));\\n            else    //if class with 100% pass average\\n                count++;\\n        }\\n        while(extraStudents>0 && !pq.empty()){\\n            pair<int,int> v=pq.top();pq.pop();\\n            v.first++,v.second++;\\n            pq.push(v);\\n            extraStudents--;\\n        }\\n        \\n        double pass=0,total=0;\\n        double ans=0;\\n       while(!pq.empty()){\\n            pair<int,int> v=pq.top();pq.pop();\\n            pass=v.first,total=v.second;\\n            ans+=pass/total;\\n        }\\n        ans+=count;\\n        return ans/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108489,
                "title": "priority-queue-greedy-c-easy-solution-comments",
                "content": "### Explaination:\\nOur goal is to maximize average. So, we should add student in the class which can give us highest difference of pass ratio. To pick up highest difference from given difference Priority Queue(Max Heap) is useful. \\n\\n### Algorithm:\\n1. Add one to pass and total for each class. Calculate new pass ratio and compute difference between old pass ratio and new pass ratio for each class and push difference and class index in Priority Queue. \\n2. For each new student we have to determine in which class we can include it. So take top element of Priority Queue(having max diff. b/w new pass ration and old pass ratio). Increase classes[ind][0] and classes[ind][1] by one. Compute difference as mentioned in step 1 for ind and again push difference and class index in Priority Queue.\\n3. After that for each class compute pass ratio and add them into one variable. Return sum of pass ratio / number of classes.\\n\\n### Code:\\n\\nclass Solution {\\npublic:\\n```\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        cout<<setprecision(5); //to set prcision upto 10^-5\\n        priority_queue<pair<double,int>> pq;\\n        int n=classes.size(); \\n        for(int i=0;i<n;i++){\\n            int num=classes[i][0];\\n            int den=classes[i][1];\\n            int n_num=num+1;\\n            int n_den=den+1;\\n            double dif=(double)(n_num*1.0/n_den)-(double)(num*1.0/den);\\n            // calculating difference between old pass ratio and after adding a student pass ratio\\n            pq.push(make_pair(dif,i));\\n\\t\\t\\t// pushing pass ratio and index into priority queue\\n        }\\n        while(extraStudents--){\\n            int tind=pq.top().second;\\n            int tdiff=pq.top().first;\\n            // tind dontes top index or index of class having highest difference after adding a student\\n            pq.pop();\\n\\t\\t\\t// poping out top pair\\n            classes[tind][0]++;\\n            classes[tind][1]++;\\n\\t\\t\\t// as we have decided to add a student into class with index tind we have to increase total number of students and number of students who can pass\\n            int num=classes[tind][0];\\n            int den=classes[tind][1];\\n            int n_num=num+1;\\n            int n_den=den+1;\\n            double dif=(double)(n_num*1.0/n_den)-(double)(num*1.0/den);\\n            // calculated difference after adding one student\\n            pq.push(make_pair(dif,tind));\\n            // pushing new difference to the priority queue\\n        }\\n        double sum=0;\\n        for(int i=0;i<n;i++){\\n            sum+=(double)(classes[i][0]*1.0/classes[i][1]);\\n                // adding pass ration to sum variable\\n            }\\n        \\n        return sum/n;\\n    }\\n};\\n```\\n\\n### Complexity Analysis:\\nSuppose there are n number of classes. So complexity of step1 is O(n).\\nSuppose there are m number of students. So complexity of step2 is O(mlog(n)) because getting max element is constant time operation and insertion in heap is log(n) time operation.\\nComplexity of step3 is O(n).\\n\\nAs 1<=n,m<=10^5\\n we can take m=n.\\n \\n So all over complexity O(n) + O(nlog(n)) + O(n) = O(nlogn).\\n \\n If you like this solution please upvote :)",
                "solutionTags": [
                    "C++",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        cout<<setprecision(5); //to set prcision upto 10^-5\\n        priority_queue<pair<double,int>> pq;\\n        int n=classes.size(); \\n        for(int i=0;i<n;i++){\\n            int num=classes[i][0];\\n            int den=classes[i][1];\\n            int n_num=num+1;\\n            int n_den=den+1;\\n            double dif=(double)(n_num*1.0/n_den)-(double)(num*1.0/den);\\n            // calculating difference between old pass ratio and after adding a student pass ratio\\n            pq.push(make_pair(dif,i));\\n\\t\\t\\t// pushing pass ratio and index into priority queue\\n        }\\n        while(extraStudents--){\\n            int tind=pq.top().second;\\n            int tdiff=pq.top().first;\\n            // tind dontes top index or index of class having highest difference after adding a student\\n            pq.pop();\\n\\t\\t\\t// poping out top pair\\n            classes[tind][0]++;\\n            classes[tind][1]++;\\n\\t\\t\\t// as we have decided to add a student into class with index tind we have to increase total number of students and number of students who can pass\\n            int num=classes[tind][0];\\n            int den=classes[tind][1];\\n            int n_num=num+1;\\n            int n_den=den+1;\\n            double dif=(double)(n_num*1.0/n_den)-(double)(num*1.0/den);\\n            // calculated difference after adding one student\\n            pq.push(make_pair(dif,tind));\\n            // pushing new difference to the priority queue\\n        }\\n        double sum=0;\\n        for(int i=0;i<n;i++){\\n            sum+=(double)(classes[i][0]*1.0/classes[i][1]);\\n                // adding pass ration to sum variable\\n            }\\n        \\n        return sum/n;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1108467,
                "title": "java-o-mlogc-solution-with-clear-explanation-and-comments",
                "content": "The challenge that I faced was to know where to add the extra student. We cannot simply add a student to a class with lowest pass ratio.\\n\\nWhy? For eg:  consider the ratios  2/3 (0.6666) and 3/5 (0.6) \\nif we add 1 student to  2/3 -> 3/4 (0.75)\\nor\\nif we add 1 student to 3/5 -> 4/6 (0.6666)\\n\\nFrom above we see that we cannot just simply add the student to lowest ratio (3/5).\\n\\nSo the idea is to compute the ratio increases (if we add one student) for each class and store in maxHeap.\\nThe top of the heap will always have the class which is the best candidate to add the new student.\\n\\n**Code:**\\n```\\nclass Solution {\\n\\n    // T = O(mlogc)  S=O(c)   c=no. of classes   m= extra students\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        double totalPassRatios = 0.0;\\n        // track the max new Pass Ratio (if a student is added to a class)\\n        // format: double[] {passRatio increase if a student is added,   pass count,   student count}\\n        PriorityQueue<double[]> maxHeap = new PriorityQueue<>((a,b) -> Double.compare(b[0], a[0]));\\n        \\n        for(int i=0; i< classes.length; i++) {\\n            // pass ratio\\n            double passRatio = (double) classes[i][0]/classes[i][1];\\n            // alternate pass ratio if a student is added\\n            double altPassRatio = (double) (classes[i][0]+1)/(classes[i][1]+1);\\n            \\n            maxHeap.add(new double[]{altPassRatio-passRatio, classes[i][0], classes[i][1]});\\n        }\\n        \\n        while(!maxHeap.isEmpty() && extraStudents > 0) {\\n            double[] top = maxHeap.poll();\\n            double passRatio = (double) (top[1]+1)/(top[2]+1);\\n            double altPassRatio = (double) (top[1]+2)/(top[2]+2);\\n            // update the maxHeap\\n            maxHeap.add(new double[]{altPassRatio-passRatio, top[1]+1, top[2]+1});\\n            \\n            extraStudents--; // decrement the extraStudents\\n        }\\n        \\n        // add all the ratios from Heap\\n        while(!maxHeap.isEmpty()) {            \\n            double[] top = maxHeap.poll();\\n            double passRatio = (double) (top[1])/(top[2]);\\n            totalPassRatios += passRatio;\\n        }\\n        \\n        return totalPassRatios / classes.length;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\n    // T = O(mlogc)  S=O(c)   c=no. of classes   m= extra students\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        double totalPassRatios = 0.0;\\n        // track the max new Pass Ratio (if a student is added to a class)\\n        // format: double[] {passRatio increase if a student is added,   pass count,   student count}\\n        PriorityQueue<double[]> maxHeap = new PriorityQueue<>((a,b) -> Double.compare(b[0], a[0]));\\n        \\n        for(int i=0; i< classes.length; i++) {\\n            // pass ratio\\n            double passRatio = (double) classes[i][0]/classes[i][1];\\n            // alternate pass ratio if a student is added\\n            double altPassRatio = (double) (classes[i][0]+1)/(classes[i][1]+1);\\n            \\n            maxHeap.add(new double[]{altPassRatio-passRatio, classes[i][0], classes[i][1]});\\n        }\\n        \\n        while(!maxHeap.isEmpty() && extraStudents > 0) {\\n            double[] top = maxHeap.poll();\\n            double passRatio = (double) (top[1]+1)/(top[2]+1);\\n            double altPassRatio = (double) (top[1]+2)/(top[2]+2);\\n            // update the maxHeap\\n            maxHeap.add(new double[]{altPassRatio-passRatio, top[1]+1, top[2]+1});\\n            \\n            extraStudents--; // decrement the extraStudents\\n        }\\n        \\n        // add all the ratios from Heap\\n        while(!maxHeap.isEmpty()) {            \\n            double[] top = maxHeap.poll();\\n            double passRatio = (double) (top[1])/(top[2]);\\n            totalPassRatios += passRatio;\\n        }\\n        \\n        return totalPassRatios / classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108410,
                "title": "js-greedy-heap-o-m-log-n-o-n",
                "content": "```javascript\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    // the heap will automatically find the class that will benefit\\n    // the most by adding a passing student\\n    const heap = new MaxHeap();\\n    \\n    // push all the classes into the heap so that\\n    // the heap can find the class that will benefit the most\\n    for (const x of classes) {\\n        heap.push(x);\\n    }\\n    \\n    // while there are extra students\\n    while (extraStudents) {\\n        \\n        // add the extra student to the class that will benefit the most\\n        heap.peak()[0] += 1;\\n        heap.peak()[1] += 1;\\n        \\n        // heapify down so that the heap remains valid\\n        heap.heapifyDown(0);\\n        \\n        extraStudents--;\\n    }\\n    \\n    \\n    // calculate the new average of all the classes\\n    let total = 0;\\n    for (const [x , y] of heap.store) {\\n        total += (x / y);\\n    }\\n    return total / heap.store.length;\\n};\\n\\n\\nclass MaxHeap {\\n    constructor() {\\n        this.store = [];\\n    }\\n    \\n    peak() {\\n        return this.store[0];\\n    }\\n    \\n    size() {\\n        return this.store.length;\\n    }\\n    \\n    pop() {\\n        if (this.store.length < 2) {\\n            return this.store.pop();\\n        }\\n        const result = this.store[0];\\n        this.store[0] = this.store.pop();\\n        this.heapifyDown(0);\\n        return result;\\n    }\\n    \\n    push(val) {\\n        this.store.push(val);\\n        this.heapifyUp(this.store.length - 1);\\n    }\\n    \\n    heapifyUp(child) {\\n        while (child) {\\n            const parent = Math.floor((child - 1) / 2);\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                child = parent;\\n            } else {\\n                return child;\\n            }\\n        }\\n    }\\n    \\n    heapifyDown(parent) {\\n        while (true) {\\n            let [child, child2] = [1,2].map((x) => parent * 2 + x).filter((x) => x < this.size());\\n            if (this.shouldSwap(child2, child)) {\\n                child = child2\\n            }\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                parent = child;\\n            } else {\\n                return parent;\\n            }\\n        }\\n    }\\n    \\n    shouldSwap(child, parent) {\\n        if (!child) return false;\\n        const c = (this.store[child][0] + 1) / (this.store[child][1] + 1) - (this.store[child][0]) / (this.store[child][1]);\\n        const p = (this.store[parent][0] + 1) / (this.store[parent][1] + 1) - (this.store[parent][0]) / (this.store[parent][1]);\\n        return c > p;\\n    }\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```javascript\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    // the heap will automatically find the class that will benefit\\n    // the most by adding a passing student\\n    const heap = new MaxHeap();\\n    \\n    // push all the classes into the heap so that\\n    // the heap can find the class that will benefit the most\\n    for (const x of classes) {\\n        heap.push(x);\\n    }\\n    \\n    // while there are extra students\\n    while (extraStudents) {\\n        \\n        // add the extra student to the class that will benefit the most\\n        heap.peak()[0] += 1;\\n        heap.peak()[1] += 1;\\n        \\n        // heapify down so that the heap remains valid\\n        heap.heapifyDown(0);\\n        \\n        extraStudents--;\\n    }\\n    \\n    \\n    // calculate the new average of all the classes\\n    let total = 0;\\n    for (const [x , y] of heap.store) {\\n        total += (x / y);\\n    }\\n    return total / heap.store.length;\\n};\\n\\n\\nclass MaxHeap {\\n    constructor() {\\n        this.store = [];\\n    }\\n    \\n    peak() {\\n        return this.store[0];\\n    }\\n    \\n    size() {\\n        return this.store.length;\\n    }\\n    \\n    pop() {\\n        if (this.store.length < 2) {\\n            return this.store.pop();\\n        }\\n        const result = this.store[0];\\n        this.store[0] = this.store.pop();\\n        this.heapifyDown(0);\\n        return result;\\n    }\\n    \\n    push(val) {\\n        this.store.push(val);\\n        this.heapifyUp(this.store.length - 1);\\n    }\\n    \\n    heapifyUp(child) {\\n        while (child) {\\n            const parent = Math.floor((child - 1) / 2);\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                child = parent;\\n            } else {\\n                return child;\\n            }\\n        }\\n    }\\n    \\n    heapifyDown(parent) {\\n        while (true) {\\n            let [child, child2] = [1,2].map((x) => parent * 2 + x).filter((x) => x < this.size());\\n            if (this.shouldSwap(child2, child)) {\\n                child = child2\\n            }\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                parent = child;\\n            } else {\\n                return parent;\\n            }\\n        }\\n    }\\n    \\n    shouldSwap(child, parent) {\\n        if (!child) return false;\\n        const c = (this.store[child][0] + 1) / (this.store[child][1] + 1) - (this.store[child][0]) / (this.store[child][1]);\\n        const p = (this.store[parent][0] + 1) / (this.store[parent][1] + 1) - (this.store[parent][0]) / (this.store[parent][1]);\\n        return c > p;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108331,
                "title": "python-greedy",
                "content": "In this question we want to modify ratios `r1, r2, ..., rn` such that `(r1 + r2 + ... + rn) / n` is maximized. As `n` is common, equivalently maximize `(r1 + r2 + ... + rn)`.\\n\\nSuppose that we only have 1 extra student. We should choose the ratio `ri = xi/yi` such that the difference `(xi+1)/(yi+1) - xi/yi` is maximum. Suppose that this is true for `k` extra students. If we have a `k+1`-st student, then we should once again find the ratio such that the above target difference is maximized. It then follows from the Principle of Induction that this stepwise approach is optimal for all values of `extraStudents`.\\n\\nThis is now nothing but a greedy solution. We can easily code using a max heap.\\n\\n```python\\nclass Solution:\\n    def maxAverageRatio(self, classes, extraStudents):\\n        hp = []\\n        for x, y in classes:\\n            target_difference = (x+1)/(y+1) - x/y\\n            heapq.heappush(hp, (-target_difference, x, y))\\n        \\n        for _ in range(extraStudents):\\n            _, x, y = heapq.heappop(hp)\\n            target_difference = (x+2)/(y+2) - (x+1)/(y+1)\\n            heapq.heappush(hp, (-target_difference, x+1, y+1))\\n        \\n        ans = 0\\n        while hp:\\n            _, x, y = heapq.heappop(hp)\\n            ans += x / y / len(classes)\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def maxAverageRatio(self, classes, extraStudents):\\n        hp = []\\n        for x, y in classes:\\n            target_difference = (x+1)/(y+1) - x/y\\n            heapq.heappush(hp, (-target_difference, x, y))\\n        \\n        for _ in range(extraStudents):\\n            _, x, y = heapq.heappop(hp)\\n            target_difference = (x+2)/(y+2) - (x+1)/(y+1)\\n            heapq.heappush(hp, (-target_difference, x+1, y+1))\\n        \\n        ans = 0\\n        while hp:\\n            _, x, y = heapq.heappop(hp)\\n            ans += x / y / len(classes)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108318,
                "title": "java-greedy-solution-using-priority-queue-with-trick-for-early-termination",
                "content": "Use a max heap: the comparator compares the passing ratio with adding one more student.\\nFor a class, if number of passing sutdents is equal to total number of students, it\\'s passing ratio is already 1 and adding more passing students doesn\\'t help further.\\nThus, only add those with potential to increase the passing ratio to the priority queue. \\n If priority queue is empty, we can terminate early, because we know adding more passing students won\\'t help further.   \\n\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        int n = classes.length;\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Double.compare(ratioIncr(b),ratioIncr(a)));   // max pq\\n        double currRating = 0.0;\\n        for (int[] rating : classes) {\\n            currRating += (double)rating[0] / rating[1];\\n            if (rating[0] != rating[1]) {  // only add those with potential to increase the passing ratio\\n                pq.offer(rating);\\n            }\\n        }\\n        currRating /= n;\\n        if (pq.isEmpty())  // early termination\\n            return currRating;\\n        while (extraStudents-- > 0) {\\n            int[] item = pq.poll();\\n            currRating += ratioIncr(item)/n;\\n            item[0]++; item[1]++;\\n            pq.offer(item);\\n        }\\n        return currRating;\\n    }\\n\\n    private double ratioIncr(int[] item) {\\n        double ratio1 = (double)item[0] / item[1];\\n        double ratio2 = (double)(item[0]+1) / (item[1]+1);\\n        return ratio2 - ratio1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        int n = classes.length;\\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Double.compare(ratioIncr(b),ratioIncr(a)));   // max pq\\n        double currRating = 0.0;\\n        for (int[] rating : classes) {\\n            currRating += (double)rating[0] / rating[1];\\n            if (rating[0] != rating[1]) {  // only add those with potential to increase the passing ratio\\n                pq.offer(rating);\\n            }\\n        }\\n        currRating /= n;\\n        if (pq.isEmpty())  // early termination\\n            return currRating;\\n        while (extraStudents-- > 0) {\\n            int[] item = pq.poll();\\n            currRating += ratioIncr(item)/n;\\n            item[0]++; item[1]++;\\n            pq.offer(item);\\n        }\\n        return currRating;\\n    }\\n\\n    private double ratioIncr(int[] item) {\\n        double ratio1 = (double)item[0] / item[1];\\n        double ratio2 = (double)(item[0]+1) / (item[1]+1);\\n        return ratio2 - ratio1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108294,
                "title": "python3-simple-fastest",
                "content": "Logic: We need to pick the class whose pass ratio will increase the most when we add 1 extraStudent. We need to repeat this for every extraStudent\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        h = []\\n        ones = 0\\n        for a,b in classes:\\n            if a==b:\\n                ones += 1\\n                continue\\n            heapq.heappush(h, [-(((a+1)/(b+1)) - (a/b)), b, a])\\n        \\n        # Base case average pass ratio is 1.0\\n        if not h: return 1.0\\n        \\n        for _ in range(extraStudents):\\n            _, y,x = heappop(h)\\n            heapq.heappush(h, [-(((x+2)/(y+2)) - ((x+1)/(y+1))), y+1, x+1])\\n            \\n        return (sum(x/y for _, y, x in h)+ones) / len(classes)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        h = []\\n        ones = 0\\n        for a,b in classes:\\n            if a==b:\\n                ones += 1\\n                continue\\n            heapq.heappush(h, [-(((a+1)/(b+1)) - (a/b)), b, a])\\n        \\n        # Base case average pass ratio is 1.0\\n        if not h: return 1.0\\n        \\n        for _ in range(extraStudents):\\n            _, y,x = heappop(h)\\n            heapq.heappush(h, [-(((x+2)/(y+2)) - ((x+1)/(y+1))), y+1, x+1])\\n            \\n        return (sum(x/y for _, y, x in h)+ones) / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108279,
                "title": "python3-heap-solution-with-explanation",
                "content": "- \\u2018Assign each of the extraStudents students to a class to maximize the average pass ratio across all the classes\\u2019 \\n-> For each extraStudents find pair [pass, total] where **increase = (pass + 1) / (total + 1) - pass / total** maximum.\\n\\n- The idea is using a max heap to maintain pair [pass, total] with max increase.\\n\\n```\\nExample: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\\nWith first student:\\n\\t* \\tincrease = [0.16666, 0.06666, 0] -> Choose class (1, 2)\\n\\t\\tmax_heap = [(-0.16666, 1, 2), (-0.06666, 3, 5), (-0.0, 2, 2)] \\n\\tIf you wonder why store (-increase) instead of increase, the reason is Python only support min_heap and -min_heap is a max_heap.\\n\\n\\t* \\tAt # 1: Pop (-0.16666, 1, 2) and add increase to total_increase\\n\\n\\t* \\tAt # 2: After assign 1 extraStudents to class (1, 2), class will be (2, 3). \\n\\tPush it again to max_heap: (-0.08333, 2, 3) and continue with second student.\\n```\\t\\t\\n\\n\\n\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        N = len(classes)\\n        ini_pass = 0\\n        total_increase = 0\\n        \\n        max_heap = []\\n        for p, c in classes:\\n\\t\\t\\t# Calculate total pass ratio at first\\n            ini_pass += p / c\\n\\t\\t\\t\\n\\t\\t\\t# Store increase pass ratio to max_heap\\n            increase = (p + 1) / (c + 1) - p / c\\n            heappush(max_heap, (-increase, p, c))\\n        \\n        while extraStudents:\\n\\t\\t\\t# Pop the pair with max increase\\n            increase, p, c = heappop(max_heap)\\t\\t\\t# 1\\n            total_increase -= increase\\n\\t\\t\\t\\n\\t\\t\\t# Push the pair to max_heap again\\n            p, c = p + 1, c + 1\\n            increase = (p + 1) / (c + 1) - p / c\\n            heappush(max_heap, (-increase, p, c))\\t\\t# 2\\n                        \\n            extraStudents -= 1\\n        \\n        return (ini_pass + total_increase) / N\\n```",
                "solutionTags": [],
                "code": "```\\nExample: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\\nWith first student:\\n\\t* \\tincrease = [0.16666, 0.06666, 0] -> Choose class (1, 2)\\n\\t\\tmax_heap = [(-0.16666, 1, 2), (-0.06666, 3, 5), (-0.0, 2, 2)] \\n\\tIf you wonder why store (-increase) instead of increase, the reason is Python only support min_heap and -min_heap is a max_heap.\\n\\n\\t* \\tAt # 1: Pop (-0.16666, 1, 2) and add increase to total_increase\\n\\n\\t* \\tAt # 2: After assign 1 extraStudents to class (1, 2), class will be (2, 3). \\n\\tPush it again to max_heap: (-0.08333, 2, 3) and continue with second student.\\n```\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        N = len(classes)\\n        ini_pass = 0\\n        total_increase = 0\\n        \\n        max_heap = []\\n        for p, c in classes:\\n\\t\\t\\t# Calculate total pass ratio at first\\n            ini_pass += p / c\\n\\t\\t\\t\\n\\t\\t\\t# Store increase pass ratio to max_heap\\n            increase = (p + 1) / (c + 1) - p / c\\n            heappush(max_heap, (-increase, p, c))\\n        \\n        while extraStudents:\\n\\t\\t\\t# Pop the pair with max increase\\n            increase, p, c = heappop(max_heap)\\t\\t\\t# 1\\n            total_increase -= increase\\n\\t\\t\\t\\n\\t\\t\\t# Push the pair to max_heap again\\n            p, c = p + 1, c + 1\\n            increase = (p + 1) / (c + 1) - p / c\\n            heappush(max_heap, (-increase, p, c))\\t\\t# 2\\n                        \\n            extraStudents -= 1\\n        \\n        return (ini_pass + total_increase) / N\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3921312,
                "title": "91-faster-c-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) \\n    {\\n        priority_queue<pair<double,int>>max_heap;\\n\\n        int n = classes.size();\\n\\n        for(int i=0 ; i<n ; i++)\\n        {\\n            int pass = classes[i][0];\\n            int total = classes[i][1];\\n\\n            double passRatio = double(pass)/total;\\n\\n            int newpass = pass + 1;\\n            int newtotal = total + 1;\\n\\n            double newPassRatio = double(newpass)/newtotal;\\n\\n            max_heap.push({newPassRatio-passRatio,i});\\n        }\\n\\n        while(extraStudents)\\n        {\\n            pair<double,int>top = max_heap.top();\\n            max_heap.pop();\\n\\n            int i = top.second;\\n            classes[i][0] = classes[i][0] + 1;\\n            classes[i][1] = classes[i][1] + 1;\\n\\n            double passRatio = double(classes[i][0])/classes[i][1];\\n\\n            int newpass = classes[i][0] + 1;\\n            int newtotal = classes[i][1] + 1;\\n\\n            double newPassRatio = double(newpass)/newtotal;\\n\\n            max_heap.push({newPassRatio-passRatio,i});\\n\\n            extraStudents--;\\n        }\\n\\n        double sum = 0;\\n\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            sum+=(double)classes[i][0]/(double)classes[i][1];\\n        }\\n        return sum/(double)classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) \\n    {\\n        priority_queue<pair<double,int>>max_heap;\\n\\n        int n = classes.size();\\n\\n        for(int i=0 ; i<n ; i++)\\n        {\\n            int pass = classes[i][0];\\n            int total = classes[i][1];\\n\\n            double passRatio = double(pass)/total;\\n\\n            int newpass = pass + 1;\\n            int newtotal = total + 1;\\n\\n            double newPassRatio = double(newpass)/newtotal;\\n\\n            max_heap.push({newPassRatio-passRatio,i});\\n        }\\n\\n        while(extraStudents)\\n        {\\n            pair<double,int>top = max_heap.top();\\n            max_heap.pop();\\n\\n            int i = top.second;\\n            classes[i][0] = classes[i][0] + 1;\\n            classes[i][1] = classes[i][1] + 1;\\n\\n            double passRatio = double(classes[i][0])/classes[i][1];\\n\\n            int newpass = classes[i][0] + 1;\\n            int newtotal = classes[i][1] + 1;\\n\\n            double newPassRatio = double(newpass)/newtotal;\\n\\n            max_heap.push({newPassRatio-passRatio,i});\\n\\n            extraStudents--;\\n        }\\n\\n        double sum = 0;\\n\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            sum+=(double)classes[i][0]/(double)classes[i][1];\\n        }\\n        return sum/(double)classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457335,
                "title": "using-priority-queue-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n      struct cmp{\\n         bool operator()(pair<int,int> a, pair<int,int> b){\\n         double ad = (a.first+1)/(double)(a.second+1) - (a.first)/(double)a.second;\\n         double bd = (b.first+1)/(double)(b.second+1) - (b.first)/(double)b.second;\\n         return ad < bd;\\n        }\\n      };\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, cmp >pq;\\n        for(auto i:classes){\\n            int a=i[0];\\n            int b=i[1];\\n            pq.push({a,b});\\n        }\\n        int n=classes.size();\\n        double pp=0;\\n        while(extraStudents>0){\\n            int a=pq.top().first+1;\\n            int b=pq.top().second+1;\\n            pq.pop();\\n            pq.push({a,b});\\n            extraStudents--;\\n        }\\n        \\n        while(!pq.empty()){\\n           pp+=(pq.top().first/(double)pq.top().second);\\n           pq.pop();\\n        }\\n        return pp/(double)classes.size();\\n    }\\n};\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n      struct cmp{\\n         bool operator()(pair<int,int> a, pair<int,int> b){\\n         double ad = (a.first+1)/(double)(a.second+1) - (a.first)/(double)a.second;\\n         double bd = (b.first+1)/(double)(b.second+1) - (b.first)/(double)b.second;\\n         return ad < bd;\\n        }\\n      };\\n        priority_queue<pair<int,int>, vector<pair<int,int>>, cmp >pq;\\n        for(auto i:classes){\\n            int a=i[0];\\n            int b=i[1];\\n            pq.push({a,b});\\n        }\\n        int n=classes.size();\\n        double pp=0;\\n        while(extraStudents>0){\\n            int a=pq.top().first+1;\\n            int b=pq.top().second+1;\\n            pq.pop();\\n            pq.push({a,b});\\n            extraStudents--;\\n        }\\n        \\n        while(!pq.empty()){\\n           pp+=(pq.top().first/(double)pq.top().second);\\n           pq.pop();\\n        }\\n        return pp/(double)classes.size();\\n    }\\n};\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3159506,
                "title": "java-priority-queue-100-faster",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<ClassRecord> pq = new PriorityQueue<>(new Compare());\\n        for(int[] cl : classes){\\n            pq.add(new ClassRecord(cl));\\n        }\\n        ClassRecord cl;\\n        while(extraStudents-- > 0){\\n            pq.add(pq.remove().addOneStudent());\\n        }\\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            cl = pq.remove();\\n            sum += (double)cl.pass / cl.total;\\n        }\\n        return sum / classes.length;\\n    }\\n}\\nclass ClassRecord{\\n    int pass;\\n    int total;\\n    double inc;\\n    public ClassRecord(int[] array){\\n        pass = array[0];\\n        total = array[1];\\n        inc = getIncrement();\\n    }\\n    public ClassRecord addOneStudent(){\\n        pass++;\\n        total++;\\n        inc = getIncrement();\\n        return this;\\n    }\\n    private double getIncrement(){\\n        return (pass + 1.0) / (total + 1) - (double)pass / total;\\n    }\\n}\\nclass Compare implements Comparator<ClassRecord>{\\n    public int compare(ClassRecord a, ClassRecord b){\\n        if(a.inc < b.inc){\\n            return 1;\\n        }else if(a.inc > b.inc){\\n            return -1;\\n        }else{\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<ClassRecord> pq = new PriorityQueue<>(new Compare());\\n        for(int[] cl : classes){\\n            pq.add(new ClassRecord(cl));\\n        }\\n        ClassRecord cl;\\n        while(extraStudents-- > 0){\\n            pq.add(pq.remove().addOneStudent());\\n        }\\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            cl = pq.remove();\\n            sum += (double)cl.pass / cl.total;\\n        }\\n        return sum / classes.length;\\n    }\\n}\\nclass ClassRecord{\\n    int pass;\\n    int total;\\n    double inc;\\n    public ClassRecord(int[] array){\\n        pass = array[0];\\n        total = array[1];\\n        inc = getIncrement();\\n    }\\n    public ClassRecord addOneStudent(){\\n        pass++;\\n        total++;\\n        inc = getIncrement();\\n        return this;\\n    }\\n    private double getIncrement(){\\n        return (pass + 1.0) / (total + 1) - (double)pass / total;\\n    }\\n}\\nclass Compare implements Comparator<ClassRecord>{\\n    public int compare(ClassRecord a, ClassRecord b){\\n        if(a.inc < b.inc){\\n            return 1;\\n        }else if(a.inc > b.inc){\\n            return -1;\\n        }else{\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3159176,
                "title": "java-easy-solution-using-heap-priority-queue",
                "content": "\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Class> pq = new PriorityQueue<>(new Compare());\\n        for(int[] cl : classes){\\n            pq.add(new Class(cl));\\n        }\\n        while(extraStudents > 0){\\n            Class c = pq.remove();\\n            c.addExtraStudent();\\n            extraStudents--;\\n            pq.add(c);\\n        }\\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            Class c = pq.remove();\\n            sum += c.pass / c.total;\\n        }\\n        return sum / classes.length;\\n    }\\n}\\nclass Class{\\n    double pass;\\n    double total;\\n    double inc;\\n    public Class(int[] cl){\\n        pass = cl[0];\\n        total = cl[1];\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n    public void addExtraStudent(){\\n        pass += 1;\\n        total += 1;\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n}\\nclass Compare implements Comparator<Class>{\\n    public int compare(Class c1, Class c2){\\n        if(c1.inc < c2.inc){\\n            return 1;\\n        }else if(c1.inc > c2.inc){\\n            return -1;\\n        }else{\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Class> pq = new PriorityQueue<>(new Compare());\\n        for(int[] cl : classes){\\n            pq.add(new Class(cl));\\n        }\\n        while(extraStudents > 0){\\n            Class c = pq.remove();\\n            c.addExtraStudent();\\n            extraStudents--;\\n            pq.add(c);\\n        }\\n        double sum = 0;\\n        while(!pq.isEmpty()){\\n            Class c = pq.remove();\\n            sum += c.pass / c.total;\\n        }\\n        return sum / classes.length;\\n    }\\n}\\nclass Class{\\n    double pass;\\n    double total;\\n    double inc;\\n    public Class(int[] cl){\\n        pass = cl[0];\\n        total = cl[1];\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n    public void addExtraStudent(){\\n        pass += 1;\\n        total += 1;\\n        inc = (pass + 1) / (total + 1) - pass / total;\\n    }\\n}\\nclass Compare implements Comparator<Class>{\\n    public int compare(Class c1, Class c2){\\n        if(c1.inc < c2.inc){\\n            return 1;\\n        }else if(c1.inc > c2.inc){\\n            return -1;\\n        }else{\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2992108,
                "title": "python3-pythonic-heap-loop",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe should always put a good students into a class where the passing guarantees the best improvement.\\n\\nAs this improvement changes with putting a student into a class, we can utilize a priority with the improvement as a main key.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn order to make it pythonic and reasonably fast, we use the heapq library, list comprehensions and a for loop over the student instead of a while loop, as this also has a small speed improvement because the interpreter does not need to check a condition every time.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(N + KlogN), where N is the amount of classes and K is the amount of good students we have.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(N) in the heap\\n# Code\\n```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\n        # we could always take the student with the lowest denominator using a heap\\n        classes = [(num/denom - (num+1)/(denom+1), num, denom) for num, denom in classes]\\n\\n        # make the heap of classes according to smallest denominator and biggest numerator\\n        heapq.heapify(classes)\\n\\n        # check the trivial case that increasing helps nothing\\n        if classes[0][0] == 0:\\n            return 1\\n\\n        # assign the students\\n        for _ in range(extraStudents):\\n            \\n            # get the class with the smallest denominator and the biggest numerator\\n            _, num, denom = heappop(classes)\\n\\n            # increase the amount of students and push it back into the heap\\n            heappush(classes, ((num+1)/(denom+1) - (num+2)/(denom+2), num+1, denom+1))\\n        return sum(num/denom for _, num, denom in classes)/len(classes)\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\n        # we could always take the student with the lowest denominator using a heap\\n        classes = [(num/denom - (num+1)/(denom+1), num, denom) for num, denom in classes]\\n\\n        # make the heap of classes according to smallest denominator and biggest numerator\\n        heapq.heapify(classes)\\n\\n        # check the trivial case that increasing helps nothing\\n        if classes[0][0] == 0:\\n            return 1\\n\\n        # assign the students\\n        for _ in range(extraStudents):\\n            \\n            # get the class with the smallest denominator and the biggest numerator\\n            _, num, denom = heappop(classes)\\n\\n            # increase the amount of students and push it back into the heap\\n            heappush(classes, ((num+1)/(denom+1) - (num+2)/(denom+2), num+1, denom+1))\\n        return sum(num/denom for _, num, denom in classes)/len(classes)\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2815726,
                "title": "c-easy-fast",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n  double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n    auto profit = [&](double pass, double total) {\\n        return (pass + 1) / (total + 1) - pass / total;\\n    };\\n    double total = 0;\\n    priority_queue<pair<double, array<int, 2>>> pq;\\n    for (auto &c : classes) {\\n        total += (double) c[0] / c[1];\\n        pq.push({profit(c[0], c[1]), {c[0], c[1]}});\\n    }\\n    while (extraStudents--) {\\n        auto [added_profit, c] = pq.top(); pq.pop();\\n        total += added_profit;\\n        pq.push({profit(c[0] + 1, c[1] + 1), {c[0] + 1, c[1] + 1}});\\n    }\\n    return total / classes.size();\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n  double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n    auto profit = [&](double pass, double total) {\\n        return (pass + 1) / (total + 1) - pass / total;\\n    };\\n    double total = 0;\\n    priority_queue<pair<double, array<int, 2>>> pq;\\n    for (auto &c : classes) {\\n        total += (double) c[0] / c[1];\\n        pq.push({profit(c[0], c[1]), {c[0], c[1]}});\\n    }\\n    while (extraStudents--) {\\n        auto [added_profit, c] = pq.top(); pq.pop();\\n        total += added_profit;\\n        pq.push({profit(c[0] + 1, c[1] + 1), {c[0] + 1, c[1] + 1}});\\n    }\\n    return total / classes.size();\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2468518,
                "title": "python3-heap-clean-code-commented",
                "content": "As denominator (number of classes) is fixed, we have to maximize numerator.\\nWe can achieve the objective by repeatedly assigning a brilliant student to a class with maximum increase of ratio.\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = [];\\n        for p, t in classes:\\n            heapq.heappush(heap, [p/t- (p+1)/(t+1), p, t]);\\n            \\n        while extraStudents:\\n            _, p, t = heapq.heappop(heap);\\n            heapq.heappush(heap, [(p+1)/(t+1) - (p+2)/(t+2), p+1, t+1]);\\n            extraStudents += -1;\\n        #print(heap)\\n        return sum(p/t for _, p, t in heap)/len(heap);",
                "solutionTags": [],
                "code": "As denominator (number of classes) is fixed, we have to maximize numerator.\\nWe can achieve the objective by repeatedly assigning a brilliant student to a class with maximum increase of ratio.\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = [];\\n        for p, t in classes:\\n            heapq.heappush(heap, [p/t- (p+1)/(t+1), p, t]);\\n            \\n        while extraStudents:\\n            _, p, t = heapq.heappop(heap);\\n            heapq.heappush(heap, [(p+1)/(t+1) - (p+2)/(t+2), p+1, t+1]);\\n            extraStudents += -1;\\n        #print(heap)\\n        return sum(p/t for _, p, t in heap)/len(heap);",
                "codeTag": "Java"
            },
            {
                "id": 2435767,
                "title": "c-amazon-oa-beats-95-no-comparator-in-priority-queue-hindi-explaination-bro-language",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents)\\n    {\\n        int n = classes.size();\\n        priority_queue<pair<double,int>> pq;\\n        \\n        for(int i=0 ; i<n; i++)\\n        {\\n            double d = (classes[i][0]+1)*1.0/(classes[i][1]+1) - (classes[i][0])*1.0/(classes[i][1]);\\n            pq.push({d,i});\\n        }\\n        double ans = 0;\\n        while(extraStudents>0)\\n        {\\n            auto p = pq.top();\\n            pq.pop();\\n            int id = p.second;\\n            classes[id][0]++;\\n            classes[id][1]++;\\n            \\n            double d = (classes[id][0]+1)*1.0/(classes[id][1]+1) - (classes[id][0])*1.0/(classes[id][1]);\\n            pq.push({d,id});\\n            extraStudents--;\\n        }\\n        for(int i=0 ; i<n ; i++)\\n            ans += classes[i][0]*1.0/classes[i][1];\\n        \\n        ans /= n;\\n        return ans;\\n    }\\n};\\n```\\n**AMAZON OA QUESTION ALSO - FIVE STAR SELLERS**\\n\\nDekho isko ab hmlog least ratio ya least no of studs ya least no. of passed my students dalke nii krskte hai\\n  \\n  EK cheez notice kro ki kvi v koi number divide hora h jaise 1/2 hua to aaya 0.5\\n        isme 1 students add krdenge to hoga 2/3 = 0.667\\n        isme 1 students add krdenge to hoga 3/4 = 0.75\\n        isme ar ek students aajayega to hoga 4/5 = 0.8\\n        Aisehi add krte jayenge to ratio ka gap kam hote jaara hai mtlb pehle 0.5 se 0.667 gap kitna jyda tha \\n        iske baad 0.667 se 0.75 gap kam hua ar aisehi kam hote jaara hai\\n\\t\\t\\nYhi cheez notice krne wala baat h hmlog delta nikalenge mtlb gap nikalenge har ki ek student add krne pe\\n        kya change aara h ratio me ar wo delta ko ek priority queue me daaldenge : Max Heap me\\n        Jiska gap sbse jyda hua usme hmlog student ko dalenge.\\n       \\n```\\nJAISE EG:\\n1/2 ar 10/20 dekhne me same lagra h par chalo ye dono me students ek ek daalke dekhte h kya hota h\\n1/2 me daalenge to gap aayega =  (1+1)/(2+1) -  (1/2)\\n                                   |              |\\n Ek student dalne k baad ratio kya bngya    original ratio h ye minus isiliye kyuki change nikalna h\\n            \\n Solve krne pe aayega : 0.1667\\n            \\n  Ab 10/20 me add krenge to : (10+1)/(20+1) - (10/20) \\n                Solve krenge to aayega : 0.023\\n```\\n            \\n   Dekhre ho difference kitna jyda h to isiliye hmlog ab student 1/2 wala me dalenge kyuki wo jyda\\n            increase krdega ratio\\n \\n Yhi tha program ka LOGIC MAIN ab to bs code bacha h wo easy hi h bs ek priority queue log ar delta nikalke\\n daalte jao tbtak jbtak extraStudents 0 se bada h\\n \\n Ye krne k baad hmlg ka class wala array badal gya hoga students dalne k baad ab bs hmlog ko basic average nikalke\\n return krdena h simple ekdum",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents)\\n    {\\n        int n = classes.size();\\n        priority_queue<pair<double,int>> pq;\\n        \\n        for(int i=0 ; i<n; i++)\\n        {\\n            double d = (classes[i][0]+1)*1.0/(classes[i][1]+1) - (classes[i][0])*1.0/(classes[i][1]);\\n            pq.push({d,i});\\n        }\\n        double ans = 0;\\n        while(extraStudents>0)\\n        {\\n            auto p = pq.top();\\n            pq.pop();\\n            int id = p.second;\\n            classes[id][0]++;\\n            classes[id][1]++;\\n            \\n            double d = (classes[id][0]+1)*1.0/(classes[id][1]+1) - (classes[id][0])*1.0/(classes[id][1]);\\n            pq.push({d,id});\\n            extraStudents--;\\n        }\\n        for(int i=0 ; i<n ; i++)\\n            ans += classes[i][0]*1.0/classes[i][1];\\n        \\n        ans /= n;\\n        return ans;\\n    }\\n};\\n```\n```\\nJAISE EG:\\n1/2 ar 10/20 dekhne me same lagra h par chalo ye dono me students ek ek daalke dekhte h kya hota h\\n1/2 me daalenge to gap aayega =  (1+1)/(2+1) -  (1/2)\\n                                   |              |\\n Ek student dalne k baad ratio kya bngya    original ratio h ye minus isiliye kyuki change nikalna h\\n            \\n Solve krne pe aayega : 0.1667\\n            \\n  Ab 10/20 me add krenge to : (10+1)/(20+1) - (10/20) \\n                Solve krenge to aayega : 0.023\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2279028,
                "title": "python-heapify-solution",
                "content": "```\\n def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        Queue = []\\n        for i in range(len(classes)):\\n            ratio = classes[i][0]/classes[i][1]\\n            newratio = (classes[i][0]+1)/(classes[i][1]+1)\\n            Queue.append((ratio - newratio, classes[i]))\\n        \\n        heapify(Queue)\\n        while extraStudents > 0:\\n            best = heappop(Queue)            \\n            ratio = (best[1][0]+1)/(best[1][1]+1)\\n            newratio = (best[1][0]+2) / (best[1][1]+2)\\n            best[1][0] += 1\\n            best[1][1] += 1\\n            heappush(Queue, (ratio - newratio, best[1]))\\n            extraStudents-=1\\n        \\n        out = 0\\n        for i in range(len(Queue)):\\n            out+= Queue[i][1][0]/Queue[i][1][1]\\n        \\n        return out/len(Queue)",
                "solutionTags": [],
                "code": "```\\n def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        Queue = []\\n        for i in range(len(classes)):\\n            ratio = classes[i][0]/classes[i][1]\\n            newratio = (classes[i][0]+1)/(classes[i][1]+1)\\n            Queue.append((ratio - newratio, classes[i]))\\n        \\n        heapify(Queue)\\n        while extraStudents > 0:\\n            best = heappop(Queue)            \\n            ratio = (best[1][0]+1)/(best[1][1]+1)\\n            newratio = (best[1][0]+2) / (best[1][1]+2)\\n            best[1][0] += 1\\n            best[1][1] += 1\\n            heappush(Queue, (ratio - newratio, best[1]))\\n            extraStudents-=1\\n        \\n        out = 0\\n        for i in range(len(Queue)):\\n            out+= Queue[i][1][0]/Queue[i][1][1]\\n        \\n        return out/len(Queue)",
                "codeTag": "Java"
            },
            {
                "id": 1998238,
                "title": "simple-python-solution-using-heap",
                "content": "Please upvote if you find it useful :)\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        H=[]\\n        for i in range(len(classes)):\\n            p,t=classes[i]\\n            heapq.heappush(H,(((p/t)-((p+1)/(t+1))),p,t))\\n        \\n        while extraStudents>0:\\n            x,y,z=heapq.heappop(H)\\n            y+=1\\n            z+=1\\n            heapq.heappush(H,(((y/z)-((y+1)/(z+1))),y,z))\\n            extraStudents-=1\\n        sm=0\\n        for x,y,z in H:\\n            sm+=(y/z)\\n        return sm/len(classes)\\n\\t\\t\\n\\t\\t\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "Please upvote if you find it useful :)\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        H=[]\\n        for i in range(len(classes)):\\n            p,t=classes[i]\\n            heapq.heappush(H,(((p/t)-((p+1)/(t+1))),p,t))\\n        \\n        while extraStudents>0:\\n            x,y,z=heapq.heappop(H)\\n            y+=1\\n            z+=1\\n            heapq.heappush(H,(((y/z)-((y+1)/(z+1))),y,z))\\n            extraStudents-=1\\n        sm=0\\n        for x,y,z in H:\\n            sm+=(y/z)\\n        return sm/len(classes)\\n\\t\\t\\n\\t\\t\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 1929474,
                "title": "a-few-solutions",
                "content": "Use a max heap to continually cherry pick the maximum ratio gain for each of the `K` extra students.\\n\\nIf we have `a` passing students of `b` total students in a class, then the ratio gain is `(a + 1) / (b + 1) - a / b`.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun maxAverageRatio(A: Array<IntArray>, K: Int): Double {\\n        var f = { a: Double, b: Double -> (a + 1) / (b + 1) - a / b }\\n        var q = PriorityQueue(Comparator{ a: DoubleArray, b: DoubleArray -> b[0].compareTo(a[0]) })\\n        for ((a, b) in A.map{ (a, b) -> Pair(a.toDouble(), b.toDouble()) })\\n            q.add(doubleArrayOf(f(a, b), a, b))\\n        for (k in 0 until K) {\\n            var (_, a_, b_) = q.poll()\\n            var (a, b) = Pair(a_ + 1, b_ + 1)\\n            q.add(doubleArrayOf(f(a, b), a, b))\\n        }\\n        var t = 0.0\\n        while (0 < q.size) {\\n            var (_, a, b) = q.poll()\\n            t += a / b\\n        }\\n        return t / A.size\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet key = x => Array.isArray(x) ? x[0] : x;\\nlet heappush = (A, x, f = Math.max) => {\\n    let P = i => Math.floor((i - 1) / 2);  // parent\\n    A.push(x);\\n    let N = A.length,\\n        i = N - 1;\\n    while (0 < i && key(A[i]) == f(key(A[i]), key(A[P(i)]))) {\\n        [A[i], A[P(i)]] = [A[P(i)], A[i]];\\n        i = P(i);\\n    }\\n};\\nlet heappop = (A, f = Math.max) => {\\n    let L = i => 2 * i + 1,  // children\\n        R = i => 2 * i + 2;\\n    let N = A.length,\\n        i = 0;\\n    let top = A[0];\\n    [A[0], A[N - 1]] = [A[N - 1], A[0]], A.pop(), --N;\\n    let ok;\\n    do {\\n        ok = true;\\n        let left = f == Math.min ? Infinity : -Infinity,\\n            right = left;\\n        if (L(i) < N && key(A[i]) != f(key(A[i]), key(A[L(i)]))) ok = false, left  = key(A[L(i)]);\\n        if (R(i) < N && key(A[i]) != f(key(A[i]), key(A[R(i)]))) ok = false, right = key(A[R(i)]);\\n        if (!ok) {\\n            let j = left == f(left, right) ? L(i) : R(i);\\n            [A[i], A[j]] = [A[j], A[i]];\\n            i = j;\\n        }\\n    } while (!ok);\\n    return top;\\n};\\nlet maxAverageRatio = (A, K, q = [], f = (a, b) => (a + 1) / (b + 1) - a / b) => {\\n    for (let [a, b] of A)\\n        heappush(q, [f(a, b), a, b]);\\n    while (K--) {\\n        let [_, a, b] = heappop(q);\\n        heappush(q, [f(++a, ++b), a, b])\\n    }\\n    return _.sum(q.map(([_, a, b]) => a / b)) / A.length;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def maxAverageRatio(self, A: List[List[int]], K: int) -> float:\\n        f = lambda a, b: (a + 1) / (b + 1) - a / b\\n        q = []\\n        for a, b in A:\\n            heappush(q, [-f(a, b), a, b])\\n        for _ in range(K):\\n            _, a, b = heappop(q)\\n            a += 1\\n            b += 1\\n            heappush(q, [-f(a, b), a, b])\\n        return sum(a / b for _, a, b in q) / len(q)\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    using Triple = tuple<double, int, int>;\\n    using Triples = vector<Triple>;\\n    struct Cmp {\\n        size_t operator()(const Triple& a, const Triple& b) const {\\n            auto [u, v, w] = a;\\n            auto [x, y, z] = b;\\n            return u < x;\\n        }\\n    };\\n    using Queue = priority_queue<Triple, Triples, Cmp>;\\n    double maxAverageRatio(VVI& A, int K, Queue q = {}, double t = {}) {\\n        auto f = [](auto a, auto b) { return double(a + 1) / double(b + 1) - double(a) / double(b); };\\n        for (auto& pair: A) {\\n            auto [a, b] = make_pair(pair[0], pair[1]);\\n            q.push({ f(a, b), a, b });\\n        }\\n        while (K--) {\\n            auto [_, a, b] = q.top(); q.pop();\\n            q.push({ f(++a, ++b), a, b });\\n        }\\n        while (q.size()) {\\n            auto [_, a, b] = q.top(); q.pop();\\n            t += double(a) / double(b);\\n        }\\n        return t / A.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun maxAverageRatio(A: Array<IntArray>, K: Int): Double {\\n        var f = { a: Double, b: Double -> (a + 1) / (b + 1) - a / b }\\n        var q = PriorityQueue(Comparator{ a: DoubleArray, b: DoubleArray -> b[0].compareTo(a[0]) })\\n        for ((a, b) in A.map{ (a, b) -> Pair(a.toDouble(), b.toDouble()) })\\n            q.add(doubleArrayOf(f(a, b), a, b))\\n        for (k in 0 until K) {\\n            var (_, a_, b_) = q.poll()\\n            var (a, b) = Pair(a_ + 1, b_ + 1)\\n            q.add(doubleArrayOf(f(a, b), a, b))\\n        }\\n        var t = 0.0\\n        while (0 < q.size) {\\n            var (_, a, b) = q.poll()\\n            t += a / b\\n        }\\n        return t / A.size\\n    }\\n}\\n```\n```\\nlet key = x => Array.isArray(x) ? x[0] : x;\\nlet heappush = (A, x, f = Math.max) => {\\n    let P = i => Math.floor((i - 1) / 2);  // parent\\n    A.push(x);\\n    let N = A.length,\\n        i = N - 1;\\n    while (0 < i && key(A[i]) == f(key(A[i]), key(A[P(i)]))) {\\n        [A[i], A[P(i)]] = [A[P(i)], A[i]];\\n        i = P(i);\\n    }\\n};\\nlet heappop = (A, f = Math.max) => {\\n    let L = i => 2 * i + 1,  // children\\n        R = i => 2 * i + 2;\\n    let N = A.length,\\n        i = 0;\\n    let top = A[0];\\n    [A[0], A[N - 1]] = [A[N - 1], A[0]], A.pop(), --N;\\n    let ok;\\n    do {\\n        ok = true;\\n        let left = f == Math.min ? Infinity : -Infinity,\\n            right = left;\\n        if (L(i) < N && key(A[i]) != f(key(A[i]), key(A[L(i)]))) ok = false, left  = key(A[L(i)]);\\n        if (R(i) < N && key(A[i]) != f(key(A[i]), key(A[R(i)]))) ok = false, right = key(A[R(i)]);\\n        if (!ok) {\\n            let j = left == f(left, right) ? L(i) : R(i);\\n            [A[i], A[j]] = [A[j], A[i]];\\n            i = j;\\n        }\\n    } while (!ok);\\n    return top;\\n};\\nlet maxAverageRatio = (A, K, q = [], f = (a, b) => (a + 1) / (b + 1) - a / b) => {\\n    for (let [a, b] of A)\\n        heappush(q, [f(a, b), a, b]);\\n    while (K--) {\\n        let [_, a, b] = heappop(q);\\n        heappush(q, [f(++a, ++b), a, b])\\n    }\\n    return _.sum(q.map(([_, a, b]) => a / b)) / A.length;\\n};\\n```\n```\\nclass Solution:\\n    def maxAverageRatio(self, A: List[List[int]], K: int) -> float:\\n        f = lambda a, b: (a + 1) / (b + 1) - a / b\\n        q = []\\n        for a, b in A:\\n            heappush(q, [-f(a, b), a, b])\\n        for _ in range(K):\\n            _, a, b = heappop(q)\\n            a += 1\\n            b += 1\\n            heappush(q, [-f(a, b), a, b])\\n        return sum(a / b for _, a, b in q) / len(q)\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using VVI = vector<VI>;\\n    using Triple = tuple<double, int, int>;\\n    using Triples = vector<Triple>;\\n    struct Cmp {\\n        size_t operator()(const Triple& a, const Triple& b) const {\\n            auto [u, v, w] = a;\\n            auto [x, y, z] = b;\\n            return u < x;\\n        }\\n    };\\n    using Queue = priority_queue<Triple, Triples, Cmp>;\\n    double maxAverageRatio(VVI& A, int K, Queue q = {}, double t = {}) {\\n        auto f = [](auto a, auto b) { return double(a + 1) / double(b + 1) - double(a) / double(b); };\\n        for (auto& pair: A) {\\n            auto [a, b] = make_pair(pair[0], pair[1]);\\n            q.push({ f(a, b), a, b });\\n        }\\n        while (K--) {\\n            auto [_, a, b] = q.top(); q.pop();\\n            q.push({ f(++a, ++b), a, b });\\n        }\\n        while (q.size()) {\\n            auto [_, a, b] = q.top(); q.pop();\\n            t += double(a) / double(b);\\n        }\\n        return t / A.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1925226,
                "title": "c-priority-queue-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extrastudents)\\n    {\\n        using pi=pair<double,pair<int,int>>;\\n        priority_queue<pair<double,pair<int,int>>> q;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int pass=classes[i][0];\\n            int total=classes[i][1];\\n            double growth=(double)(pass+1)/(total+1)-(double)(pass)/(total);\\n            q.push({growth,{pass,total}});\\n        }\\n        while(extrastudents--)\\n        {\\n            pair<double,pair<int,int>> p=q.top();\\n            q.pop();\\n            int pass=p.second.first;\\n            int total=p.second.second;\\n            pass++;\\n            total++;\\n            double growth=(double)(pass+1)/(total+1)-(double)(pass)/(total);\\n            q.push({growth,{pass,total}});\\n        }\\n        double res=0;\\n        while(!q.empty())\\n        {\\n            res+=(double)(q.top().second.first)/(q.top().second.second);\\n            q.pop();\\n        }\\n        return res/classes.size();\\n        \\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "class Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extrastudents)\\n    {\\n        using pi=pair<double,pair<int,int>>;\\n        priority_queue<pair<double,pair<int,int>>> q;\\n        for(int i=0;i<classes.size();i++)\\n        {\\n            int pass=classes[i][0];\\n            int total=classes[i][1];\\n            double growth=(double)(pass+1)/(total+1)-(double)(pass)/(total);\\n            q.push({growth,{pass,total}",
                "codeTag": "Java"
            },
            {
                "id": 1848523,
                "title": "java-simple-solution-using-priorityqueue-sorting",
                "content": "**Check which class contributes the most if we add an extra student to that class.**\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){\\n            public int compare(int[] a, int[] b){\\n                double a1 = (double)a[0]/(double)a[1];\\n                double a2 = (double)(a[0]+1)/(double)(a[1]+1);\\n                \\n                double d1 = a2 - a1;\\n                \\n                double b1 = (double)b[0]/(double)b[1];\\n                double b2 = (double)(b[0]+1)/(double)(b[1]+1);\\n                \\n                double d2 = b2 - b1;\\n                \\n                return -Double.compare(d1, d2);\\n            }\\n        });\\n        \\n        for(int[] it: classes)\\n            pq.offer(it);\\n        \\n        while(extraStudents-- != 0){   \\n            int[] arr = pq.poll();\\n            \\n            arr[0] += 1;\\n            arr[1] += 1;\\n            \\n            pq.offer(arr);\\n        }\\n    \\n        double sum = 0;\\n        \\n        while(!pq.isEmpty())\\n            sum += (double)pq.peek()[0]/(double)pq.poll()[1];\\n        \\n        return (double)sum/(double)classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){\\n            public int compare(int[] a, int[] b){\\n                double a1 = (double)a[0]/(double)a[1];\\n                double a2 = (double)(a[0]+1)/(double)(a[1]+1);\\n                \\n                double d1 = a2 - a1;\\n                \\n                double b1 = (double)b[0]/(double)b[1];\\n                double b2 = (double)(b[0]+1)/(double)(b[1]+1);\\n                \\n                double d2 = b2 - b1;\\n                \\n                return -Double.compare(d1, d2);\\n            }\\n        });\\n        \\n        for(int[] it: classes)\\n            pq.offer(it);\\n        \\n        while(extraStudents-- != 0){   \\n            int[] arr = pq.poll();\\n            \\n            arr[0] += 1;\\n            arr[1] += 1;\\n            \\n            pq.offer(arr);\\n        }\\n    \\n        double sum = 0;\\n        \\n        while(!pq.isEmpty())\\n            sum += (double)pq.peek()[0]/(double)pq.poll()[1];\\n        \\n        return (double)sum/(double)classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1639512,
                "title": "go-heap",
                "content": "```\\nfunc maxAverageRatio(classes [][]int, extraStudents int) float64 {\\n    h := &maxheap{}\\n    for _, c := range classes {\\n        heap.Push(h, [2]int{c[0], c[1]})\\n    }\\n    \\n    for extraStudents > 0 {\\n        c := heap.Pop(h).([2]int)\\n        extraStudents--\\n        c[0]++\\n        c[1]++\\n        heap.Push(h, c)\\n    }\\n    var res float64\\n    for _, v := range *h {\\n        res += float64(v[0]) / float64(v[1])\\n    }\\n    return res / float64(len(classes))\\n}\\n\\ntype maxheap [][2]int\\n\\nfunc (h maxheap) Len() int {\\n    return len(h)\\n}\\n\\nfunc (h maxheap) Less(i int, j int) bool {\\n    return float64(h[i][0] + 1) / float64(h[i][1] + 1) - float64(h[i][0]) / float64(h[i][1]) >\\n    float64(h[j][0] + 1) / float64(h[j][1] + 1) - float64(h[j][0]) / float64(h[j][1])\\n}\\n\\nfunc (h maxheap) Swap(i int, j int) {\\n    h[i], h[j] = h[j], h[i]\\n}\\n\\nfunc (h *maxheap) Push(a interface{}) {\\n    *h = append(*h, a.([2]int))\\n}\\n\\nfunc (h *maxheap) Pop() interface{} {\\n    l := len(*h)\\n    res := (*h)[l - 1]\\n    *h = (*h)[:l - 1]\\n    return res\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc maxAverageRatio(classes [][]int, extraStudents int) float64 {\\n    h := &maxheap{}\\n    for _, c := range classes {\\n        heap.Push(h, [2]int{c[0], c[1]})\\n    }\\n    \\n    for extraStudents > 0 {\\n        c := heap.Pop(h).([2]int)\\n        extraStudents--\\n        c[0]++\\n        c[1]++\\n        heap.Push(h, c)\\n    }\\n    var res float64\\n    for _, v := range *h {\\n        res += float64(v[0]) / float64(v[1])\\n    }\\n    return res / float64(len(classes))\\n}\\n\\ntype maxheap [][2]int\\n\\nfunc (h maxheap) Len() int {\\n    return len(h)\\n}\\n\\nfunc (h maxheap) Less(i int, j int) bool {\\n    return float64(h[i][0] + 1) / float64(h[i][1] + 1) - float64(h[i][0]) / float64(h[i][1]) >\\n    float64(h[j][0] + 1) / float64(h[j][1] + 1) - float64(h[j][0]) / float64(h[j][1])\\n}\\n\\nfunc (h maxheap) Swap(i int, j int) {\\n    h[i], h[j] = h[j], h[i]\\n}\\n\\nfunc (h *maxheap) Push(a interface{}) {\\n    *h = append(*h, a.([2]int))\\n}\\n\\nfunc (h *maxheap) Pop() interface{} {\\n    l := len(*h)\\n    res := (*h)[l - 1]\\n    *h = (*h)[:l - 1]\\n    return res\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1598177,
                "title": "c-solution-with-max-heap-priority-queue-of-tuple",
                "content": "```cpp\\nclass Solution {\\n public:\\n  double maxAverageRatio(vector<vector<int>> &classes, int extraStudents) {\\n    priority_queue<tuple<double, int, int>> pq;  // max heap: { (pass + 1)/(total + 1) - pass/total, pass, total }\\n    for (auto &pass_total : classes) {\\n      auto pass = pass_total[0], total = pass_total[1];\\n      auto improvement = (double)(pass + 1) / (total + 1) - (double)pass / total;\\n      pq.push({improvement, pass, total});\\n    }\\n    for (int i = 0; i < extraStudents; ++i) {\\n      auto [_, pass, total] = pq.top();\\n      pq.pop();\\n      ++pass, ++total;\\n      auto newImprovment = (double)(pass + 1) / (total + 1) - (double)pass / total;\\n      pq.push({newImprovment, pass, total});\\n    }\\n    double ans = 0.0;\\n    while (!pq.empty()) {\\n      auto [_, pass, total] = pq.top();\\n      pq.pop();\\n      ans += (double)pass / total;\\n    }\\n    return ans / (double)classes.size();\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\nclass Solution {\\n public:\\n  double maxAverageRatio(vector<vector<int>> &classes, int extraStudents) {\\n    priority_queue<tuple<double, int, int>> pq;  // max heap: { (pass + 1)/(total + 1) - pass/total, pass, total }\\n    for (auto &pass_total : classes) {\\n      auto pass = pass_total[0], total = pass_total[1];\\n      auto improvement = (double)(pass + 1) / (total + 1) - (double)pass / total;\\n      pq.push({improvement, pass, total});\\n    }\\n    for (int i = 0; i < extraStudents; ++i) {\\n      auto [_, pass, total] = pq.top();\\n      pq.pop();\\n      ++pass, ++total;\\n      auto newImprovment = (double)(pass + 1) / (total + 1) - (double)pass / total;\\n      pq.push({newImprovment, pass, total});\\n    }\\n    double ans = 0.0;\\n    while (!pq.empty()) {\\n      auto [_, pass, total] = pq.top();\\n      pq.pop();\\n      ans += (double)pass / total;\\n    }\\n    return ans / (double)classes.size();\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1583950,
                "title": "python-3-heap-100-time",
                "content": "![image](https://assets.leetcode.com/users/images/9a98c753-0f84-4529-8ea3-e1bdb873997e_1637208740.2855933.png)\\n\\n\\nFor each class, construct a structure ( (pass/total) - (pass+1)/(total+1), pass, total ). Create a heap to hold all structures. Pop the most negative, which shall give the maximum increase in pass ratio after adding one extra student, update the class\\' pass and total, construct a new structure and push to heap. Repeat till all extra students assigned.\\n\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        hp = []\\n        for p, t in classes:\\n            hp.append((p/t - (p+1)/(t+1), p, t))\\n        heapify(hp)\\n        for i in range(extraStudents):\\n            _, p, t = heappop(hp)\\n            p += 1; t += 1\\n            heappush(hp, (p/t - (p+1)/(t+1), p, t))\\n        ans = 0\\n        for _, p, t in hp:\\n            ans += p/t\\n        return ans / len(hp)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        hp = []\\n        for p, t in classes:\\n            hp.append((p/t - (p+1)/(t+1), p, t))\\n        heapify(hp)\\n        for i in range(extraStudents):\\n            _, p, t = heappop(hp)\\n            p += 1; t += 1\\n            heappush(hp, (p/t - (p+1)/(t+1), p, t))\\n        ans = 0\\n        for _, p, t in hp:\\n            ans += p/t\\n        return ans / len(hp)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1447197,
                "title": "simple-python-o-mlogn-greedy-max-heap-solution",
                "content": "We always assign the smart student to the class whose pass ratio can benefit the most from it. We keep track of the boost in pass ratio in each class using a max heap. \\n```Python\\nfrom heapq import heappush, heappop\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = []\\n        for n_pass, n_total in classes:\\n            improvement = (n_pass+1)/(n_total+1)-(n_pass/n_total)\\n            heappush(pq, (-improvement, n_pass, n_total))\\n            \\n        for _ in range(extraStudents):\\n            _, n_pass, n_total = heappop(pq)\\n            n_pass += 1\\n            n_total += 1\\n            improvement = (n_pass+1)/(n_total+1)-(n_pass/n_total)\\n            heappush(pq, (-improvement, n_pass, n_total))\\n            \\n        return sum([p/n for _, p, n in pq])/len(pq)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```Python\\nfrom heapq import heappush, heappop\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = []\\n        for n_pass, n_total in classes:\\n            improvement = (n_pass+1)/(n_total+1)-(n_pass/n_total)\\n            heappush(pq, (-improvement, n_pass, n_total))\\n            \\n        for _ in range(extraStudents):\\n            _, n_pass, n_total = heappop(pq)\\n            n_pass += 1\\n            n_total += 1\\n            improvement = (n_pass+1)/(n_total+1)-(n_pass/n_total)\\n            heappush(pq, (-improvement, n_pass, n_total))\\n            \\n        return sum([p/n for _, p, n in pq])/len(pq)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1342450,
                "title": "heap-for-ratio-change-98-speed",
                "content": "Runtime: 2472 ms, faster than 98.25% of Python3 online submissions for Maximum Average Pass Ratio.\\nMemory Usage: 64.2 MB, less than 38.65% of Python3 online submissions for Maximum Average Pass Ratio.\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap_classes = []\\n        for p, t in classes:\\n            heappush(heap_classes, (-((p + 1) / (t + 1) - p / t), p, t))\\n        for _ in range(extraStudents):\\n            diff, p, t = heappop(heap_classes)\\n            p += 1\\n            t += 1\\n            heappush(heap_classes, (-((p + 1) / (t + 1) - p / t), p, t))\\n        return sum(p / t for d, p, t in heap_classes) / len(classes)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap_classes = []\\n        for p, t in classes:\\n            heappush(heap_classes, (-((p + 1) / (t + 1) - p / t), p, t))\\n        for _ in range(extraStudents):\\n            diff, p, t = heappop(heap_classes)\\n            p += 1\\n            t += 1\\n            heappush(heap_classes, (-((p + 1) / (t + 1) - p / t), p, t))\\n        return sum(p / t for d, p, t in heap_classes) / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1228489,
                "title": "priority-q-88-nice-question",
                "content": "```\\n#define ff double\\nclass obj{\\n  public:\\n    pair<ff,ff>a;\\n    ff incratio;\\n};\\nclass cmp{\\n    public:\\n    bool operator()(obj a,obj b){\\n        return a.incratio<b.incratio;\\n    }  \\n};\\nclass Solution {\\npublic: \\n    double maxAverageRatio(vector<vector<int>>& cl, int es) {\\n      priority_queue<obj,vector<obj>,cmp> pq;\\n        for(int i=0;i<cl.size();i++)\\n        {\\n     \\n          ff currentratio=(ff)cl[i][0]/(ff)cl[i][1];\\n          ff afteraddingratio=(ff)(cl[i][0]+1)/(ff)(cl[i][1]+1);\\n          obj newobj;\\n          newobj.a.first=cl[i][0];\\n          newobj.a.second=cl[i][1];\\n          newobj.incratio=afteraddingratio-currentratio;\\n          pq.push(newobj);\\n        }\\n        while(es--){\\n            auto x=pq.top();\\n            pq.pop();\\n        \\n            x.a.first++;\\n            x.a.second++;\\n                ff prevratio=x.a.first/x.a.second;\\n              ff afterratio=(x.a.first+1)/(x.a.second+1);\\n            x.incratio=afterratio-prevratio;\\n            pq.push(x);\\n        }\\n        ff ans=0;\\n        int deno=pq.size();\\n        while(pq.size()>0){\\n            auto x=pq.top();\\n            \\n            ans+=(ff)x.a.first/(ff)x.a.second;\\n            pq.pop();\\n        }\\n        ans=ans/deno;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n#define ff double\\nclass obj{\\n  public:\\n    pair<ff,ff>a;\\n    ff incratio;\\n};\\nclass cmp{\\n    public:\\n    bool operator()(obj a,obj b){\\n        return a.incratio<b.incratio;\\n    }  \\n};\\nclass Solution {\\npublic: \\n    double maxAverageRatio(vector<vector<int>>& cl, int es) {\\n      priority_queue<obj,vector<obj>,cmp> pq;\\n        for(int i=0;i<cl.size();i++)\\n        {\\n     \\n          ff currentratio=(ff)cl[i][0]/(ff)cl[i][1];\\n          ff afteraddingratio=(ff)(cl[i][0]+1)/(ff)(cl[i][1]+1);\\n          obj newobj;\\n          newobj.a.first=cl[i][0];\\n          newobj.a.second=cl[i][1];\\n          newobj.incratio=afteraddingratio-currentratio;\\n          pq.push(newobj);\\n        }\\n        while(es--){\\n            auto x=pq.top();\\n            pq.pop();\\n        \\n            x.a.first++;\\n            x.a.second++;\\n                ff prevratio=x.a.first/x.a.second;\\n              ff afterratio=(x.a.first+1)/(x.a.second+1);\\n            x.incratio=afterratio-prevratio;\\n            pq.push(x);\\n        }\\n        ff ans=0;\\n        int deno=pq.size();\\n        while(pq.size()>0){\\n            auto x=pq.top();\\n            \\n            ans+=(ff)x.a.first/(ff)x.a.second;\\n            pq.pop();\\n        }\\n        ans=ans/deno;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1190444,
                "title": "java-max-heap-with-custom-data-structure-easy-to-understand-w-comments",
                "content": "``` \\nclass Room{\\n    int pass;\\n    int total;\\n    \\n    Room(int p, int t){\\n        this.pass = p;\\n        this.total = t;\\n    }\\n    \\n    // return the change in the difference \\n    public double fetchRatio(){\\n        return ((double)(pass + 1) / (total + 1)) - ((double)pass / total);\\n    }\\n    \\n    // divide pass by total\\n    public double fetchQuotient(){\\n        return (double)pass / total;\\n    }\\n}\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        // max heap, the root is the Room with the largest change\\n        PriorityQueue<Room> maxHeap = new PriorityQueue<>(classes.length, (a,b) -> Double.compare(b.fetchRatio(),a.fetchRatio()));\\n        \\n        // for each class, add create a room and add to the maxHeap\\n        for(int[] arr : classes){\\n            Room room = new Room(arr[0], arr[1]);\\n            maxHeap.offer(room);\\n        }\\n        \\n        // for each extra student, get the one that would have the highest change\\n        // and increment its pass and total by 1\\n        for(int i = 0; i < extraStudents; i++){\\n            Room room = maxHeap.poll();\\n            room.pass++;\\n            room.total++;\\n            maxHeap.offer(room);\\n        }\\n        \\n\\n        double total = 0;\\n        \\n        // go through each room in heap and fetch the quotient\\n        while(maxHeap.peek() != null){\\n            Room room = maxHeap.poll();\\n            total += room.fetchQuotient();\\n        }\\n        return total / classes.length;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "``` \\nclass Room{\\n    int pass;\\n    int total;\\n    \\n    Room(int p, int t){\\n        this.pass = p;\\n        this.total = t;\\n    }\\n    \\n    // return the change in the difference \\n    public double fetchRatio(){\\n        return ((double)(pass + 1) / (total + 1)) - ((double)pass / total);\\n    }\\n    \\n    // divide pass by total\\n    public double fetchQuotient(){\\n        return (double)pass / total;\\n    }\\n}\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        // max heap, the root is the Room with the largest change\\n        PriorityQueue<Room> maxHeap = new PriorityQueue<>(classes.length, (a,b) -> Double.compare(b.fetchRatio(),a.fetchRatio()));\\n        \\n        // for each class, add create a room and add to the maxHeap\\n        for(int[] arr : classes){\\n            Room room = new Room(arr[0], arr[1]);\\n            maxHeap.offer(room);\\n        }\\n        \\n        // for each extra student, get the one that would have the highest change\\n        // and increment its pass and total by 1\\n        for(int i = 0; i < extraStudents; i++){\\n            Room room = maxHeap.poll();\\n            room.pass++;\\n            room.total++;\\n            maxHeap.offer(room);\\n        }\\n        \\n\\n        double total = 0;\\n        \\n        // go through each room in heap and fetch the quotient\\n        while(maxHeap.peek() != null){\\n            Room room = maxHeap.poll();\\n            total += room.fetchQuotient();\\n        }\\n        return total / classes.length;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1123335,
                "title": "python3-math-greedy-with-heap",
                "content": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \"\"\"Walk through examples to find patterns\\n\\n        Always add students to class that will raise the average the most. This\\n        can be computed via finding the difference between current state and one\\n        more student:\\n\\n        avg_delta_by_one_extra == 2/11 - 1/10\\n                               => (p+1)/(t+1) - p/t\\n                               => (t-p) / (t^2 + t)    (p = pass, t = total)\\n\\n        Implement using a min heap, and storing tuple (-delta, (pass, total))\\n        where delta reflects the change in average due to adding one extra\\n        student.\\n\\n        Go through classes list and create delta tuples list; heapify this\\n        list. Then greedily add extra students until supply depleted. Finally,\\n        compute resuting average directly from list.\\n\\n        O(C + SlogC) time, O(C) space\\n        \"\"\"\\n        h = []\\n        for p,t in classes:\\n            delta = (t-p) / (t**2 + t)\\n            h.append( (-delta, (p, t)) )\\n        heapq.heapify(h)\\n\\n        while extraStudents:\\n            delta, (p, t) = heapq.heappop(h)\\n            p, t = p+1, t+1\\n            delta = (t-p) / (t**2 + t)\\n            heapq.heappush(h, (-delta, (p, t)))\\n            extraStudents -= 1\\n\\n        res = 0\\n        for delta,(p,t) in h:\\n            res += p / t\\n        return res / len(h)\\n```",
                "solutionTags": [],
                "code": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \"\"\"Walk through examples to find patterns\\n\\n        Always add students to class that will raise the average the most. This\\n        can be computed via finding the difference between current state and one\\n        more student:\\n\\n        avg_delta_by_one_extra == 2/11 - 1/10\\n                               => (p+1)/(t+1) - p/t\\n                               => (t-p) / (t^2 + t)    (p = pass, t = total)\\n\\n        Implement using a min heap, and storing tuple (-delta, (pass, total))\\n        where delta reflects the change in average due to adding one extra\\n        student.\\n\\n        Go through classes list and create delta tuples list; heapify this\\n        list. Then greedily add extra students until supply depleted. Finally,\\n        compute resuting average directly from list.\\n\\n        O(C + SlogC) time, O(C) space\\n        \"\"\"\\n        h = []\\n        for p,t in classes:\\n            delta = (t-p) / (t**2 + t)\\n            h.append( (-delta, (p, t)) )\\n        heapq.heapify(h)\\n\\n        while extraStudents:\\n            delta, (p, t) = heapq.heappop(h)\\n            p, t = p+1, t+1\\n            delta = (t-p) / (t**2 + t)\\n            heapq.heappush(h, (-delta, (p, t)))\\n            extraStudents -= 1\\n\\n        res = 0\\n        for delta,(p,t) in h:\\n            res += p / t\\n        return res / len(h)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1119407,
                "title": "priority-queue-java-easy-understand-solution",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq=new PriorityQueue<double[]>((a,b)->a[2]-b[2]>0?-1:1);\\n        double sum = 0;\\n        for(int i = 0; i < classes.length; i++) {\\n            if(classes[i][0] != classes[i][1]) {\\n                double passes = classes[i][0];\\n                double total = classes[i][1];\\n                pq.offer(new double[]{passes, total, getPotentialIncrease(passes, total)});\\n            } else {\\n                sum++;\\n            }\\n        }\\n        if(sum == classes.length) {\\n            return 1;\\n        }\\n\\n        while(!pq.isEmpty() && extraStudents-- > 0) {\\n\\t\\t    // poll the max potential increase element everytime\\n            double[] potential = pq.poll();\\n\\t\\t\\t// apply 1 extra student count to this \\n            potential[0] += 1;\\n            potential[1] += 1;\\n\\t\\t\\t// re-calculate the potential ratio increase for this element and put to pq again.\\n            pq.offer(new double[]{potential[0], potential[1], getPotentialIncrease(potential[0], potential[1])});\\n        }\\n\\t\\t// poll all elements in qp and caclulate the sum of retios with max increases\\n        while(!pq.isEmpty()) {\\n            double[] current = pq.poll();\\n            sum+= current[0]/current[1];\\n        }\\n        return sum/classes.length;\\n    }\\n    \\n    private double getPotentialIncrease(double passes, double total) {\\n        return (passes + 1) / (total + 1)  - (passes / total);\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq=new PriorityQueue<double[]>((a,b)->a[2]-b[2]>0?-1:1);\\n        double sum = 0;\\n        for(int i = 0; i < classes.length; i++) {\\n            if(classes[i][0] != classes[i][1]) {\\n                double passes = classes[i][0];\\n                double total = classes[i][1];\\n                pq.offer(new double[]{passes, total, getPotentialIncrease(passes, total)});\\n            } else {\\n                sum++;\\n            }\\n        }\\n        if(sum == classes.length) {\\n            return 1;\\n        }\\n\\n        while(!pq.isEmpty() && extraStudents-- > 0) {\\n\\t\\t    // poll the max potential increase element everytime\\n            double[] potential = pq.poll();\\n\\t\\t\\t// apply 1 extra student count to this \\n            potential[0] += 1;\\n            potential[1] += 1;\\n\\t\\t\\t// re-calculate the potential ratio increase for this element and put to pq again.\\n            pq.offer(new double[]{potential[0], potential[1], getPotentialIncrease(potential[0], potential[1])});\\n        }\\n\\t\\t// poll all elements in qp and caclulate the sum of retios with max increases\\n        while(!pq.isEmpty()) {\\n            double[] current = pq.poll();\\n            sum+= current[0]/current[1];\\n        }\\n        return sum/classes.length;\\n    }\\n    \\n    private double getPotentialIncrease(double passes, double total) {\\n        return (passes + 1) / (total + 1)  - (passes / total);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1116393,
                "title": "java-math-solution",
                "content": "each extraStudents go to the class which make `v` max.\\n\\n`v =  (p+1) / (t + 1) - p / t`\\uFF1B\\n\\nso we can get the max average pass ratio.\\n\\n---\\n\\nbefore:  passed = `ai`, total = `bi`;\\n\\nwhen we add a extraStudent, \\n\\npassed = `ai + 1`, total = `bi + 1`;\\n\\n`dx = (ai + 1) / (bi + 1)  -  ai /bi `\\n\\nif  we want to get the max answer, we need to make  `dx` is the largest.\\n\\nbecause `sum = sum(ai/bi) + dx`.\\n\\nif we made `dx` is the largest, so the sum is the largest.\\n\\nso no matter how many extraStudent we have,  just make each extraStudent to made the  `dx` is the largest.\\n\\n---\\n\\n```\\n    // O(N*logN) time\\n    // O(N) space\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> doubles = new PriorityQueue<>((o1, o2) -> {\\n            double t1 = (o1[0] + 1) / (o1[1] + 1) - o1[0] / o1[1];\\n            double t2 = (o2[0] + 1) / (o2[1] + 1) - o2[0] / o2[1];\\n            if (t1 == t2) return 0;\\n            return t1 - t2 > 0 ? -1 : 1;\\n        });\\n        for (int[] c : classes) {\\n            double[] t = new double[3];\\n            t[0] = c[0];\\n            t[1] = c[1];\\n            t[2] = c[0] * 1.0D / c[1];\\n            doubles.add(t);\\n        }\\n        while (extraStudents > 0) {\\n            extraStudents--;\\n            double[] t = doubles.poll();\\n            t[0] += 1;\\n            t[1] += 1;\\n            t[2] = t[0] * 1.0D / t[1];\\n            doubles.add(t);\\n        }\\n        double t = 0;\\n        while (!doubles.isEmpty()) t += doubles.poll()[2];\\n\\n        return t / classes.length;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n    // O(N*logN) time\\n    // O(N) space\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> doubles = new PriorityQueue<>((o1, o2) -> {\\n            double t1 = (o1[0] + 1) / (o1[1] + 1) - o1[0] / o1[1];\\n            double t2 = (o2[0] + 1) / (o2[1] + 1) - o2[0] / o2[1];\\n            if (t1 == t2) return 0;\\n            return t1 - t2 > 0 ? -1 : 1;\\n        });\\n        for (int[] c : classes) {\\n            double[] t = new double[3];\\n            t[0] = c[0];\\n            t[1] = c[1];\\n            t[2] = c[0] * 1.0D / c[1];\\n            doubles.add(t);\\n        }\\n        while (extraStudents > 0) {\\n            extraStudents--;\\n            double[] t = doubles.poll();\\n            t[0] += 1;\\n            t[1] += 1;\\n            t[2] = t[0] * 1.0D / t[1];\\n            doubles.add(t);\\n        }\\n        double t = 0;\\n        while (!doubles.isEmpty()) t += doubles.poll()[2];\\n\\n        return t / classes.length;\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110807,
                "title": "java-detailed-explanation-and-step-by-step-implementation",
                "content": "You can view the solution here. This is my newly created blog. If you find the content useful kindly upvote :)\\nYou can find complete explanation of the code in the link below :\\nhttps://cpexplanations.blogspot.com/2021/03/1792-maximum-average-pass-ratio-leetcode.html\\n\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        Comparator<int[]> comp = new Comparator<>() {\\n            @Override\\n            public int compare(int[] a, int[] b) {\\n                double aBefore = (double) a[0] / (double) a[1];\\n                double bBefore = (double) b[0] / (double) b[1];\\n                double aAfter  = (double) (a[0] + 1) / (double) (a[1] + 1);\\n                double bAfter  = (double) (b[0] + 1) / (double) (b[1] + 1);\\n                \\n                double dxOfA = aAfter - aBefore;\\n                double dxOfB = bAfter - bBefore;\\n                \\n                return Double.compare(dxOfB, dxOfA);\\n            }\\n        };\\n        \\n        PriorityQueue<int[]> queue = new PriorityQueue<>(comp);\\n        \\n        for(int[] arr : classes) {\\n            queue.add(arr);\\n        }\\n        \\n        while(extraStudents-- > 0) {\\n            int[] cur = queue.remove();\\n            cur[0]++; cur[1]++;\\n            queue.add(cur);\\n        }\\n        \\n        double sumOfRatios = 0;\\n        while(!queue.isEmpty()) {\\n            int[] cur = queue.remove();\\n            sumOfRatios += (double) cur[0] / (double) cur[1];\\n        }\\n        \\n        return sumOfRatios / (double) classes.length;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        Comparator<int[]> comp = new Comparator<>() {\\n            @Override\\n            public int compare(int[] a, int[] b) {\\n                double aBefore = (double) a[0] / (double) a[1];\\n                double bBefore = (double) b[0] / (double) b[1];\\n                double aAfter  = (double) (a[0] + 1) / (double) (a[1] + 1);\\n                double bAfter  = (double) (b[0] + 1) / (double) (b[1] + 1);\\n                \\n                double dxOfA = aAfter - aBefore;\\n                double dxOfB = bAfter - bBefore;\\n                \\n                return Double.compare(dxOfB, dxOfA);\\n            }\\n        };\\n        \\n        PriorityQueue<int[]> queue = new PriorityQueue<>(comp);\\n        \\n        for(int[] arr : classes) {\\n            queue.add(arr);\\n        }\\n        \\n        while(extraStudents-- > 0) {\\n            int[] cur = queue.remove();\\n            cur[0]++; cur[1]++;\\n            queue.add(cur);\\n        }\\n        \\n        double sumOfRatios = 0;\\n        while(!queue.isEmpty()) {\\n            int[] cur = queue.remove();\\n            sumOfRatios += (double) cur[0] / (double) cur[1];\\n        }\\n        \\n        return sumOfRatios / (double) classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110307,
                "title": "swift-cfbinaryheap",
                "content": "```\\nimport CoreFoundation\\nclass Solution {\\n    func maxAverageRatio(_ classes: [[Int]], _ extraStudents: Int) -> Double {\\n        let minHeap = CFBinaryHeap.minHeap()\\n        var pointer: UnsafeMutablePointer<[Int]> = .allocate(capacity: 1)\\n        for v in classes\\n        {\\n            pointer = .allocate(capacity: 1)\\n            pointer.initialize(to: v)\\n            CFBinaryHeapAddValue(minHeap, pointer)\\n        }\\n        \\n        for _ in 0..<extraStudents\\n        {\\n            let v = CFBinaryHeapGetMinimum(minHeap).load(as: [Int].self)\\n            CFBinaryHeapRemoveMinimumValue(minHeap)\\n            pointer = .allocate(capacity: 1)\\n            pointer.initialize(to: [v[0]+1, v[1]+1])\\n            CFBinaryHeapAddValue(minHeap, pointer)\\n        }\\n        \\n        var res: Double = 0\\n        for _ in 0..<classes.count\\n        {\\n            let v = CFBinaryHeapGetMinimum(minHeap).load(as: [Int].self)\\n            CFBinaryHeapRemoveMinimumValue(minHeap)\\n            res += Double(v[0])/Double(v[1])\\n        }\\n        pointer.deallocate()\\n        return res/Double(classes.count)\\n    }\\n}\\n\\nprivate extension CFBinaryHeap\\n{\\n    static func minHeap() -> CFBinaryHeap\\n    {\\n        var callbacks = CFBinaryHeapCallBacks()\\n        callbacks.compare = { a, b, _ in\\n            let (x, y) = (a!.load(as: [Int].self), b!.load(as: [Int].self))\\n            let l = Double(x[0]+1)/Double(x[1]+1)-Double(x[0])/Double(x[1])\\n            let r = Double(y[0]+1)/Double(y[1]+1)-Double(y[0])/Double(y[1])\\n            return l == r ? 0 : l > r ? -1 : 1\\n        }\\n        return CFBinaryHeapCreate(nil, 0, &callbacks, nil)\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimport CoreFoundation\\nclass Solution {\\n    func maxAverageRatio(_ classes: [[Int]], _ extraStudents: Int) -> Double {\\n        let minHeap = CFBinaryHeap.minHeap()\\n        var pointer: UnsafeMutablePointer<[Int]> = .allocate(capacity: 1)\\n        for v in classes\\n        {\\n            pointer = .allocate(capacity: 1)\\n            pointer.initialize(to: v)\\n            CFBinaryHeapAddValue(minHeap, pointer)\\n        }\\n        \\n        for _ in 0..<extraStudents\\n        {\\n            let v = CFBinaryHeapGetMinimum(minHeap).load(as: [Int].self)\\n            CFBinaryHeapRemoveMinimumValue(minHeap)\\n            pointer = .allocate(capacity: 1)\\n            pointer.initialize(to: [v[0]+1, v[1]+1])\\n            CFBinaryHeapAddValue(minHeap, pointer)\\n        }\\n        \\n        var res: Double = 0\\n        for _ in 0..<classes.count\\n        {\\n            let v = CFBinaryHeapGetMinimum(minHeap).load(as: [Int].self)\\n            CFBinaryHeapRemoveMinimumValue(minHeap)\\n            res += Double(v[0])/Double(v[1])\\n        }\\n        pointer.deallocate()\\n        return res/Double(classes.count)\\n    }\\n}\\n\\nprivate extension CFBinaryHeap\\n{\\n    static func minHeap() -> CFBinaryHeap\\n    {\\n        var callbacks = CFBinaryHeapCallBacks()\\n        callbacks.compare = { a, b, _ in\\n            let (x, y) = (a!.load(as: [Int].self), b!.load(as: [Int].self))\\n            let l = Double(x[0]+1)/Double(x[1]+1)-Double(x[0])/Double(x[1])\\n            let r = Double(y[0]+1)/Double(y[1]+1)-Double(y[0])/Double(y[1])\\n            return l == r ? 0 : l > r ? -1 : 1\\n        }\\n        return CFBinaryHeapCreate(nil, 0, &callbacks, nil)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109982,
                "title": "java-max-heap-solution",
                "content": "Based on the hint from Leetcode, write the below code:\\n\\n```````\\nclass Solution {\\n    /*Keep a max heap of the current class sizes and order them by the change in pass ratio. For each extra student, take the top of the heap, update the class size, and put it back in the heap.*/\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<int[]>( \\n            (a, b) -> {\\n                double ch1 = (a[0]+1)*1.0/(a[1]+1) - (a[0])*1.0/(a[1]);\\n                double ch2 = (b[0]+1)*1.0/(b[1]+1) - (b[0])*1.0/(b[1]);\\n                return Double.compare(ch2, ch1); \\n            } \\n        );\\n        \\n        for (int[] c : classes) {\\n            pq.offer(c);\\n        }\\n        while (extraStudents > 0) {\\n            int[] cur = pq.poll();\\n            pq.offer(new int[] {cur[0]+1, cur[1]+1});\\n            extraStudents--;\\n        }\\n        double sum = 0.0;\\n        while (!pq.isEmpty()) {\\n            int[] cur = pq.poll();\\n            sum += (cur[0])*1.0/(cur[1]);\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n``````````",
                "solutionTags": [],
                "code": "``````\n``````",
                "codeTag": "Unknown"
            },
            {
                "id": 1109874,
                "title": "maximize-the-usage-of-extrastudents",
                "content": "## Basic Idea:maximize each extraStudents\\n\\nConsider `c`with `old_pass, old_total`, then the pass ratio is  `old_pass/old_total`.\\nIf we assign an `extraStudent` to `c`, the pass ratio would become `(old_pass+1)/(old_total+1)`.\\n\\nHow to choose which `class` to assign each `extraStudent` ?\\nChoose the course such that adding one extraStudent will increase the pass ratio to maximum.\\ni.e. max(`(old_pass+1)/(old_total+1)-old_pass/old_total`) for all class\\n\\n## Use a Heap to track the course that has maximal value\\n\\n```\\nclass Solution:\\ndef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        heapq.heapify(heap)\\n        while classes:\\n            c = classes.pop()\\n            passing,total = c[0],c[1]\\n\\t\\t\\t# cuz python implement heap as minHeap, so we store the negative value\\n            potential = passing/total - (passing+1)/(total+1)\\n            heapq.heappush(heap,(potential,c))\\n        while extraStudents >0:\\n\\t\\t\\t# diff has the maximum value, so we add one extraStudent to this class\\n            diff, c = heapq.heappop(heap)\\n\\t\\t\\t# increment pass&total before recalculate cuz we are tracking the **next** value !!\\n            c[0]+=1\\n            c[1]+=1\\n            passing,total = c[0],c[1]\\n\\t\\t\\t# recalculate the potential value and push it back to heap\\n            potential = passing/total - (passing+1)/(total+1)\\n            heapq.heappush(heap,(potential,c))\\n            extraStudents -= 1\\n        n = len(heap)\\n        ratio = 0\\n        while heap:\\n            diff,c = heapq.heappop(heap)\\n            ratio += c[0]/c[1]\\n        return ratio/n\\n```",
                "solutionTags": [
                    "Python",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\ndef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        heapq.heapify(heap)\\n        while classes:\\n            c = classes.pop()\\n            passing,total = c[0],c[1]\\n\\t\\t\\t# cuz python implement heap as minHeap, so we store the negative value\\n            potential = passing/total - (passing+1)/(total+1)\\n            heapq.heappush(heap,(potential,c))\\n        while extraStudents >0:\\n\\t\\t\\t# diff has the maximum value, so we add one extraStudent to this class\\n            diff, c = heapq.heappop(heap)\\n\\t\\t\\t# increment pass&total before recalculate cuz we are tracking the **next** value !!\\n            c[0]+=1\\n            c[1]+=1\\n            passing,total = c[0],c[1]\\n\\t\\t\\t# recalculate the potential value and push it back to heap\\n            potential = passing/total - (passing+1)/(total+1)\\n            heapq.heappush(heap,(potential,c))\\n            extraStudents -= 1\\n        n = len(heap)\\n        ratio = 0\\n        while heap:\\n            diff,c = heapq.heappop(heap)\\n            ratio += c[0]/c[1]\\n        return ratio/n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109807,
                "title": "python-clear-greedy-heap-solution-with-video-explanation",
                "content": "Video with clear visualization and explanation:\\nhttps://youtu.be/TIn0wbbJDVs\\n\\n\\n\\nIntuition: Greedy+Heap\\n \\n\\n**Code**\\n```\\nfrom heapq import *\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        \\n        for p, t in classes:\\n            delta = ((p+1)/(t+1))-(p/t)\\n            heappush(heap, (-delta, p, t))\\n        \\n        for _ in range(extraStudents):\\n            delta, p, t = heappop(heap)\\n            p += 1\\n            t += 1\\n            delta_new = ((p+1)/(t+1))-(p/t)\\n            heappush(heap, (-delta_new, p, t))\\n            \\n        res = sum(p/t for delta, p, t in heap)/len(heap)\\n        return res\\n```\\n\\n\\n\\nTime: O(n+klogn) / Space: O(n)\\n\\n\\nFeel free to subscribe to my channel. More LeetCoding videos coming up!",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom heapq import *\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        \\n        for p, t in classes:\\n            delta = ((p+1)/(t+1))-(p/t)\\n            heappush(heap, (-delta, p, t))\\n        \\n        for _ in range(extraStudents):\\n            delta, p, t = heappop(heap)\\n            p += 1\\n            t += 1\\n            delta_new = ((p+1)/(t+1))-(p/t)\\n            heappush(heap, (-delta_new, p, t))\\n            \\n        res = sum(p/t for delta, p, t in heap)/len(heap)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109789,
                "title": "my-javascript-solution-using-maxpriorityqueue-684-ms",
                "content": "```\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const priorityQueue = new MaxPriorityQueue();\\n    let index;\\n    \\n    const getPriority = c => {\\n        return Math.floor(((c[0] + 1) / (c[1] + 1) - c[0] / c[1]) * 1e10);\\n    };\\n    \\n    for (let i = 0; i < classes.length; ++i) {\\n        if (classes[i][0] === classes[i][1]) continue;\\n        priorityQueue.enqueue(i, getPriority(classes[i]));\\n    }\\n    \\n    if (priorityQueue.size() > 0) {\\n        for (let i = 0; i < extraStudents; ++i) {\\n            index = priorityQueue.dequeue().element;\\n            ++classes[index][0];\\n            ++classes[index][1];\\n            priorityQueue.enqueue(index, getPriority(classes[index]));\\n        }\\n    }\\n    \\n    let result = 0;\\n    for (let i = 0; i < classes.length; ++i) {\\n        result += classes[i][0] / classes[i][1];\\n    }\\n    \\n    return result / classes.length;\\n};\\n```\\nFew words about ```1e10```, this is \"magic\" number for currrent input, initially I failed on 82/84 with ```1e5``` on this:\\n```\\n[[280,872],[108,128],[3,665],[93,972],[347,464],[443,584],[809,999],[366,398]]\\n77862\\n```\\nWhy I am not using another constructor that does not require \"integer\":\\n```\\nconst priorityQueue = new MaxPriorityQueue({ priority: (bid) => bid.priority });\\n```\\nbecause it works faster and even if you convert float to integer it will work faster too, but slower comparing to my solution (at least in my cases for now).",
                "solutionTags": [],
                "code": "```\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const priorityQueue = new MaxPriorityQueue();\\n    let index;\\n    \\n    const getPriority = c => {\\n        return Math.floor(((c[0] + 1) / (c[1] + 1) - c[0] / c[1]) * 1e10);\\n    };\\n    \\n    for (let i = 0; i < classes.length; ++i) {\\n        if (classes[i][0] === classes[i][1]) continue;\\n        priorityQueue.enqueue(i, getPriority(classes[i]));\\n    }\\n    \\n    if (priorityQueue.size() > 0) {\\n        for (let i = 0; i < extraStudents; ++i) {\\n            index = priorityQueue.dequeue().element;\\n            ++classes[index][0];\\n            ++classes[index][1];\\n            priorityQueue.enqueue(index, getPriority(classes[index]));\\n        }\\n    }\\n    \\n    let result = 0;\\n    for (let i = 0; i < classes.length; ++i) {\\n        result += classes[i][0] / classes[i][1];\\n    }\\n    \\n    return result / classes.length;\\n};\\n```\n```1e10```\n```1e5```\n```\\n[[280,872],[108,128],[3,665],[93,972],[347,464],[443,584],[809,999],[366,398]]\\n77862\\n```\n```\\nconst priorityQueue = new MaxPriorityQueue({ priority: (bid) => bid.priority });\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108635,
                "title": "simple-greedy-solution-using-max-heap-for-beginners-o-m-logn-c",
                "content": "The **intuition** behind solving this problem is that, suppose we had to assign only one extra student to a class, then, we\\'ll be assigning that student to such a class which will yield maximum profit.\\nFor p (students that can pass exam) & tot (total students), profit after assigning the single student is given by:\\n\\tprofit = (p+1)/(tot+1) - p/tot\\n\\t\\nThus, for  k extra students, we can greedily assign each of the k students to a class which will give max profit.\\n\\nMax Heap can be used, so that we can extract  the required max profit in O(1) ;\\n\\n***\\n\\tdouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue <pair <double  ,pair<int,int>>> pq;  //max heap which stores profit\\n\\t\\tint p,tot;\\n        double profit,sum=0;\\n        \\n        for(auto x:classes) {\\n            p=x[0];\\n            tot=x[1];\\n            profit =  (double)(p+1)/(tot+1) - (double)p/tot;\\n            pq.push( {profit, {p,tot}});\\n        }\\n\\n        while(extraStudents--) {\\n            auto tmp = pq.top();\\n            auto tmp2 = tmp.second;\\n            p = tmp2.first;\\n            tot = tmp2.second;\\n\\t\\t\\tpq.pop();\\n\\t\\t\\t\\n\\t\\t\\t// add one extra student to class and push it back into heap with expected profit\\n            p+=1;\\n            tot+=1;\\n\\t\\t\\tprofit =  (double)(p+1)/(tot+1) - (double)p/tot;\\n            pq.push( {profit, {p,tot}});\\n        }\\n        \\n\\t\\t// adding the pass ratio of all the classes with newly assigned students\\n        while(!pq.empty()) {\\n            auto tmp = pq.top();\\n            auto tmp2 = tmp.second;\\n            p = tmp2.first;\\n            tot = tmp2.second;\\n\\t\\t\\tpq.pop();\\n\\t\\t\\t\\n            sum += (double)p/tot;\\n        }\\n        \\n\\t\\t// average of all pass ratio\\n        return (double)sum/(classes.size());\\n        \\n    }\\n***\\n\\nPlease note that, we haven\\'t actually assigned one student while pushing in heap. Here. everytime we push the profit into heap, we are actually pushing the expected profit after adding one student along with current p & tot.\\nAnd when we pop the class with max profit, then we finally add one student to that class.\\n\\n**Complexity Analysis:**\\nTime : \\nO( m logn + n logn) => O(m logn)  ... b\\'coz m & n are of same order\\n *where m is extraStudents & n is no of classes*\\n \\n Space :\\n O(n)  ... *only used for storing classes*.",
                "solutionTags": [],
                "code": "The **intuition** behind solving this problem is that, suppose we had to assign only one extra student to a class, then, we\\'ll be assigning that student to such a class which will yield maximum profit.\\nFor p (students that can pass exam) & tot (total students), profit after assigning the single student is given by:\\n\\tprofit = (p+1)/(tot+1) - p/tot\\n\\t\\nThus, for  k extra students, we can greedily assign each of the k students to a class which will give max profit.\\n\\nMax Heap can be used, so that we can extract  the required max profit in O(1) ;\\n\\n***\\n\\tdouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue <pair <double  ,pair<int,int>>> pq;  //max heap which stores profit\\n\\t\\tint p,tot;\\n        double profit,sum=0;\\n        \\n        for(auto x:classes) {\\n            p=x[0];\\n            tot=x[1];\\n            profit =  (double)(p+1)/(tot+1) - (double)p/tot;\\n            pq.push( {profit, {p,tot}});\\n        }\\n\\n        while(extraStudents--) {\\n            auto tmp = pq.top();\\n            auto tmp2 = tmp.second;\\n            p = tmp2.first;\\n            tot = tmp2.second;\\n\\t\\t\\tpq.pop();\\n\\t\\t\\t\\n\\t\\t\\t// add one extra student to class and push it back into heap with expected profit\\n            p+=1;\\n            tot+=1;\\n\\t\\t\\tprofit =  (double)(p+1)/(tot+1) - (double)p/tot;\\n            pq.push( {profit, {p,tot}});\\n        }\\n        \\n\\t\\t// adding the pass ratio of all the classes with newly assigned students\\n        while(!pq.empty()) {\\n            auto tmp = pq.top();\\n            auto tmp2 = tmp.second;\\n            p = tmp2.first;\\n            tot = tmp2.second;\\n\\t\\t\\tpq.pop();\\n\\t\\t\\t\\n            sum += (double)p/tot;\\n        }\\n        \\n\\t\\t// average of all pass ratio\\n        return (double)sum/(classes.size());\\n        \\n    }\\n***\\n\\nPlease note that, we haven\\'t actually assigned one student while pushing in heap. Here. everytime we push the profit into heap, we are actually pushing the expected profit after adding one student along with current p & tot.\\nAnd when we pop the class with max profit, then we finally add one student to that class.\\n\\n**Complexity Analysis:**\\nTime : \\nO( m logn + n logn) => O(m logn)  ... b\\'coz m & n are of same order\\n *where m is extraStudents & n is no of classes*\\n \\n Space :\\n O(n)  ... *only used for storing classes*.",
                "codeTag": "Java"
            },
            {
                "id": 1108560,
                "title": "c-priority-queue",
                "content": "The minute the contest is over, I realized the solution was so simple. Wasted the whole time working on a totally wrong path. Sad.\\n**Key points:**\\n* Calculate ratio gain for inserting a student to each class. Use that ratio gain as key in a priority queue. Bundle class id in the queue with ratio gain.\\n* Each time, insert a student into the highest ratio gain class. Recalculate that class\\'s ratio gain after and maintain the queue. Repeat until all good students are inserted.\\n* Do the ratio average calculation at the end.\\n```\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n      std::priority_queue<std::pair<double, int>> q;\\n      for (int i=0; i<classes.size(); ++i)\\n        q.push({(classes[i][0]+1.0)/(classes[i][1]+1.0) - double(classes[i][0])/double(classes[i][1]), i});\\n      for (int i=0; i<extraStudents; ++i) {\\n        auto p = q.top();\\n        q.pop();\\n        ++classes[p.second][0];\\n        ++classes[p.second][1];\\n        q.push({(classes[p.second][0]+1.0)/(classes[p.second][1]+1.0) - double(classes[p.second][0])/double(classes[p.second][1]), p.second});\\n      }\\n      double ratios = 0;\\n      for (int i=0; i<classes.size(); ++i)\\n        ratios += double(classes[i][0])/double(classes[i][1]);\\n      return ratios/classes.size();\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n      std::priority_queue<std::pair<double, int>> q;\\n      for (int i=0; i<classes.size(); ++i)\\n        q.push({(classes[i][0]+1.0)/(classes[i][1]+1.0) - double(classes[i][0])/double(classes[i][1]), i});\\n      for (int i=0; i<extraStudents; ++i) {\\n        auto p = q.top();\\n        q.pop();\\n        ++classes[p.second][0];\\n        ++classes[p.second][1];\\n        q.push({(classes[p.second][0]+1.0)/(classes[p.second][1]+1.0) - double(classes[p.second][0])/double(classes[p.second][1]), p.second});\\n      }\\n      double ratios = 0;\\n      for (int i=0; i<classes.size(); ++i)\\n        ratios += double(classes[i][0])/double(classes[i][1]);\\n      return ratios/classes.size();\\n    }\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108513,
                "title": "priorityqueue-java-o-nlogn-greedy",
                "content": "### Here I am discussing my approach to this problem.\\n**Approach (Greedy):** Out of all the classes, choose that which will affect the score most. It means that, we have to choose maximum of all:\\n```\\n(classes[i][0] + 1) / (class[i][1] + 1) - classes[i][0] / classes[i][1] // for all i\\n```\\n\\nIt first seems like can be done easily in **O(n**<sup>**2**</sup>**)**, but we can reduce it to **O(nlogn)** using **PriorityQueue (max heap)**.\\n\\n***My Source Code:***\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> Double.compare(y.effect, x.effect));\\n        \\n        for(int i = 0; i < classes.length; ++i) {\\n            if(classes[i][0] == classes[i][1])\\n                continue;\\n            \\n            double effect = -(double)(classes[i][0]) / (double) (classes[i][1]) + (double)(classes[i][0] + 1) / (double) (classes[i][1] + 1);\\n            \\n            pq.add(new Pair(effect, i));\\n        }\\n        \\n        while(pq.size() > 0 && extraStudents-- > 0) {\\n            Pair p = pq.remove();\\n            int i = p.idx;\\n            ++classes[i][0];\\n            ++classes[i][1];\\n            \\n            double effect = -(double)(classes[i][0]) / (double) (classes[i][1]) + (double)(classes[i][0] + 1) / (double) (classes[i][1] + 1);\\n            \\n            pq.add(new Pair(effect, i));\\n        }\\n        \\n        double ans = 0;\\n        \\n        for(int[] a : classes) {\\n            double val = (double) (a[0]) / (double) (a[1]);\\n            ans += val;\\n        }\\n        \\n        return ans / (double) (classes.length);\\n    }\\n    \\n    class Pair {\\n        double effect;\\n        int idx;\\n        \\n        Pair(double effect, int idx) {\\n            this.effect = effect;\\n            this.idx = idx;\\n        }\\n    }\\n}\\n```\\n\\n```\\nTime Complexity: O(elogn) // where e = no. of extra students\\nSpace Complexity: O(n)\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n(classes[i][0] + 1) / (class[i][1] + 1) - classes[i][0] / classes[i][1] // for all i\\n```\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Pair> pq = new PriorityQueue<>((x, y) -> Double.compare(y.effect, x.effect));\\n        \\n        for(int i = 0; i < classes.length; ++i) {\\n            if(classes[i][0] == classes[i][1])\\n                continue;\\n            \\n            double effect = -(double)(classes[i][0]) / (double) (classes[i][1]) + (double)(classes[i][0] + 1) / (double) (classes[i][1] + 1);\\n            \\n            pq.add(new Pair(effect, i));\\n        }\\n        \\n        while(pq.size() > 0 && extraStudents-- > 0) {\\n            Pair p = pq.remove();\\n            int i = p.idx;\\n            ++classes[i][0];\\n            ++classes[i][1];\\n            \\n            double effect = -(double)(classes[i][0]) / (double) (classes[i][1]) + (double)(classes[i][0] + 1) / (double) (classes[i][1] + 1);\\n            \\n            pq.add(new Pair(effect, i));\\n        }\\n        \\n        double ans = 0;\\n        \\n        for(int[] a : classes) {\\n            double val = (double) (a[0]) / (double) (a[1]);\\n            ans += val;\\n        }\\n        \\n        return ans / (double) (classes.length);\\n    }\\n    \\n    class Pair {\\n        double effect;\\n        int idx;\\n        \\n        Pair(double effect, int idx) {\\n            this.effect = effect;\\n            this.idx = idx;\\n        }\\n    }\\n}\\n```\n```\\nTime Complexity: O(elogn) // where e = no. of extra students\\nSpace Complexity: O(n)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108510,
                "title": "c-greedy-max-heap",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\nLet `dist(c)` be the increase of pass ratio if we add the student into class `c`.\\n\\nWe should greedily pick the class with the greatest `dist(c)`.\\n\\n```cpp\\n// OJ: https://leetcode.com/problems/maximum-average-pass-ratio/\\n// Author: github.com/lzl124631x\\n// Time: O((E + C)logC)\\n// Space: O(C)\\nclass Solution {\\n    double dist(pair<int, int> &p) {\\n        return (double)(p.first + 1) / (p.second + 1) - (double)p.first / p.second;\\n    }\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& C, int E) {\\n        int ones = 0;\\n        auto cmp = [&](auto &a, auto &b) { return dist(a) < dist(b); };\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);\\n        for (auto &c : C) {\\n            if (c[0] == c[1]) ++ones;\\n            else pq.emplace(c[0], c[1]);\\n        }\\n        for (int i = 0; i < E && pq.size(); ++i) {\\n            auto [a, b] = pq.top();\\n            pq.pop();\\n            pq.emplace(a + 1, b + 1);\\n        }\\n        double total = 0;\\n        while (pq.size()) {\\n            auto [a, b] = pq.top();\\n            pq.pop();\\n            total += (double)a / b;\\n        }\\n        return (total + ones) / C.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/problems/maximum-average-pass-ratio/\\n// Author: github.com/lzl124631x\\n// Time: O((E + C)logC)\\n// Space: O(C)\\nclass Solution {\\n    double dist(pair<int, int> &p) {\\n        return (double)(p.first + 1) / (p.second + 1) - (double)p.first / p.second;\\n    }\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& C, int E) {\\n        int ones = 0;\\n        auto cmp = [&](auto &a, auto &b) { return dist(a) < dist(b); };\\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);\\n        for (auto &c : C) {\\n            if (c[0] == c[1]) ++ones;\\n            else pq.emplace(c[0], c[1]);\\n        }\\n        for (int i = 0; i < E && pq.size(); ++i) {\\n            auto [a, b] = pq.top();\\n            pq.pop();\\n            pq.emplace(a + 1, b + 1);\\n        }\\n        double total = 0;\\n        while (pq.size()) {\\n            auto [a, b] = pq.top();\\n            pq.pop();\\n            total += (double)a / b;\\n        }\\n        return (total + ones) / C.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108485,
                "title": "c-greedy-solution-with-max-heap",
                "content": "Idea:\\n1. Calculate the original sum of pass rates for all classes without any extraStudents\\n2. Assign the extraStudents to the class that increases the average the most\\n->eg.if pass_i=1, total_i=2, then the increasement will be (2/3)-(1/2)\\n3. Use the increasement(eg.(2/3)-(1/2) to sort the heap\\n->for each iteration, just increase the result by the gain, and increase pass_i and total_i by 1 (eg.i is the class index that leads to most average gain)\\n```\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) \\n{\\n\\tdouble result=0;\\n\\tpriority_queue<pair<double,pair<double,double>>> q;\\n\\tint n=classes.size();\\n\\tfor(int i=0;i<n;i++)\\n\\t{\\n\\t\\tresult+=classes[i][0]*1.0/classes[i][1];\\n\\t\\tdouble x=classes[i][0],y=classes[i][1];\\n\\t\\tq.push({(x+1)/(y+1)-x/y,{x,y}});\\n\\t}\\n\\twhile(extraStudents--)\\n\\t{\\n\\t\\tpair<double,pair<double,double>> p=q.top();\\n\\t\\tq.pop();\\n\\t\\tresult+=p.first;\\n\\t\\tdouble x=p.second.first+1,y=p.second.second+1;\\n\\t\\tq.push({(x+1)/(y+1)-x/y,{x,y}});\\n\\t}\\n\\treturn result/(double)n;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) \\n{\\n\\tdouble result=0;\\n\\tpriority_queue<pair<double,pair<double,double>>> q;\\n\\tint n=classes.size();\\n\\tfor(int i=0;i<n;i++)\\n\\t{\\n\\t\\tresult+=classes[i][0]*1.0/classes[i][1];\\n\\t\\tdouble x=classes[i][0],y=classes[i][1];\\n\\t\\tq.push({(x+1)/(y+1)-x/y,{x,y}});\\n\\t}\\n\\twhile(extraStudents--)\\n\\t{\\n\\t\\tpair<double,pair<double,double>> p=q.top();\\n\\t\\tq.pop();\\n\\t\\tresult+=p.first;\\n\\t\\tdouble x=p.second.first+1,y=p.second.second+1;\\n\\t\\tq.push({(x+1)/(y+1)-x/y,{x,y}});\\n\\t}\\n\\treturn result/(double)n;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108457,
                "title": "c-priority-queue-clean-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double sum = 0.0;\\n        \\n        priority_queue<tuple<double, int, int>> q;   // heap will compare the elements of tuple sequentially \\n        \\n        for (const auto& class_ : classes) {\\n            int a = class_[0], b = class_[1];\\n            \\n            sum += (double)(a) / b; \\n            \\n            q.push({calculateDelta(a, b), a + 1, b + 1}); \\n        }\\n    \\n        \\n        while (extraStudents) {\\n            auto [delta, a, b] = q.top(); q.pop();\\n            \\n            sum += delta;\\n            \\n            q.push({calculateDelta(a, b), a + 1, b + 1});\\n            \\n            extraStudents--;\\n        }\\n        \\n        return sum / classes.size();\\n    }\\n    \\n    double calculateDelta(int a, int b) {\\n        return (double)(a + 1) / (b + 1) - (double)(a) / b;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double sum = 0.0;\\n        \\n        priority_queue<tuple<double, int, int>> q;   // heap will compare the elements of tuple sequentially \\n        \\n        for (const auto& class_ : classes) {\\n            int a = class_[0], b = class_[1];\\n            \\n            sum += (double)(a) / b; \\n            \\n            q.push({calculateDelta(a, b), a + 1, b + 1}); \\n        }\\n    \\n        \\n        while (extraStudents) {\\n            auto [delta, a, b] = q.top(); q.pop();\\n            \\n            sum += delta;\\n            \\n            q.push({calculateDelta(a, b), a + 1, b + 1});\\n            \\n            extraStudents--;\\n        }\\n        \\n        return sum / classes.size();\\n    }\\n    \\n    double calculateDelta(int a, int b) {\\n        return (double)(a + 1) / (b + 1) - (double)(a) / b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108448,
                "title": "c-priority-queue-solution",
                "content": "```c++\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        // {derivative, {denominator, Numerator}}\\n        priority_queue<pair<double, pair<int, int>>> pq; \\n        double res = 0;\\n        for(auto clazz : classes) {\\n            double m = clazz[0], n = clazz[1];\\n            pq.push({(n-m)/(n*n+n),{m,n}});\\n            res += (m/n);\\n        }\\n        \\n        for(;extraStudents > 0; extraStudents--) {\\n            auto foo = pq.top();\\n            pq.pop();\\n            res += foo.first;\\n            double m = foo.second.first+1, n = foo.second.second+1;\\n            pq.push({(n-m)/(n*n+n),{m,n}});\\n        }\\n        return res / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        // {derivative, {denominator, Numerator}}\\n        priority_queue<pair<double, pair<int, int>>> pq; \\n        double res = 0;\\n        for(auto clazz : classes) {\\n            double m = clazz[0], n = clazz[1];\\n            pq.push({(n-m)/(n*n+n),{m,n}});\\n            res += (m/n);\\n        }\\n        \\n        for(;extraStudents > 0; extraStudents--) {\\n            auto foo = pq.top();\\n            pq.pop();\\n            res += foo.first;\\n            double m = foo.second.first+1, n = foo.second.second+1;\\n            pq.push({(n-m)/(n*n+n),{m,n}});\\n        }\\n        return res / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108437,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size();\\n        priority_queue<pair<double, int>> pq;\\n        for (int i=0; i<n; i++) {\\n            double curr = classes[i][0] / double(classes[i][1]) * 100;\\n            double updated = (classes[i][0]+1) / double(classes[i][1]+1) * 100;\\n            //cout << updated-curr << endl;\\n            pq.push(make_pair(updated-curr, i));\\n        }\\n        while (extraStudents--) {\\n            auto tot = pq.top();\\n            pq.pop();\\n            int i = tot.second;\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            double curr = classes[i][0] / double(classes[i][1]) * 100;\\n            double updated = (classes[i][0]+1) / double(classes[i][1]+1) * 100;\\n            pq.push(make_pair(updated-curr, i));\\n        }\\n        double ans = 0;\\n        while (!pq.empty()) {\\n            auto tot = pq.top();\\n            pq.pop();\\n            int i = tot.second;\\n            double curr = classes[i][0] / double(classes[i][1]);\\n            ans += curr;\\n        }\\n        ans /= n;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size();\\n        priority_queue<pair<double, int>> pq;\\n        for (int i=0; i<n; i++) {\\n            double curr = classes[i][0] / double(classes[i][1]) * 100;\\n            double updated = (classes[i][0]+1) / double(classes[i][1]+1) * 100;\\n            //cout << updated-curr << endl;\\n            pq.push(make_pair(updated-curr, i));\\n        }\\n        while (extraStudents--) {\\n            auto tot = pq.top();\\n            pq.pop();\\n            int i = tot.second;\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            double curr = classes[i][0] / double(classes[i][1]) * 100;\\n            double updated = (classes[i][0]+1) / double(classes[i][1]+1) * 100;\\n            pq.push(make_pair(updated-curr, i));\\n        }\\n        double ans = 0;\\n        while (!pq.empty()) {\\n            auto tot = pq.top();\\n            pq.pop();\\n            int i = tot.second;\\n            double curr = classes[i][0] / double(classes[i][1]);\\n            ans += curr;\\n        }\\n        ans /= n;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1108316,
                "title": "python3-greedy-priority-queue",
                "content": "\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = [(p/t - (p+1)/(t+1), p, t) for p, t in classes] # max-heap \\n        heapify(pq)\\n        \\n        for _ in range(extraStudents):  \\n            _, p, t = heappop(pq)\\n            heappush(pq, ((p+1)/(t+1) - (p+2)/(t+2), p+1, t+1))\\n        \\n        return sum(p/t for _, p, t in pq)/len(pq)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = [(p/t - (p+1)/(t+1), p, t) for p, t in classes] # max-heap \\n        heapify(pq)\\n        \\n        for _ in range(extraStudents):  \\n            _, p, t = heappop(pq)\\n            heappush(pq, ((p+1)/(t+1) - (p+2)/(t+2), p+1, t+1))\\n        \\n        return sum(p/t for _, p, t in pq)/len(pq)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108314,
                "title": "python3-max-heap-greedy-solution",
                "content": "The goal is that for every student, we want to place him or her in the class that will have the maximal impact on the overall average. To do that, we simply just compare all the difference in ratios if we were to place one student in each class for the incoming student.\\n```\\nclass Solution:\\n    def maxAverageRatio(self, c: List[List[int]], e: int) -> float:\\n        pq = []\\n        for p, t in c:\\n            heappush(pq, (-((p + 1) / (t + 1) - (p / t)), p, t))\\n        while e:\\n            r, p, t = heappop(pq)\\n            p += 1\\n            t += 1\\n            heappush(pq, (-((p + 1) / (t + 1) - (p / t)), p, t))\\n            e -= 1\\n        res = 0\\n        while pq:\\n            r, p, t = heappop(pq)\\n            res += p / t\\n        return res / len(c)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, c: List[List[int]], e: int) -> float:\\n        pq = []\\n        for p, t in c:\\n            heappush(pq, (-((p + 1) / (t + 1) - (p / t)), p, t))\\n        while e:\\n            r, p, t = heappop(pq)\\n            p += 1\\n            t += 1\\n            heappush(pq, (-((p + 1) / (t + 1) - (p / t)), p, t))\\n            e -= 1\\n        res = 0\\n        while pq:\\n            r, p, t = heappop(pq)\\n            res += p / t\\n        return res / len(c)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108277,
                "title": "simple-intuitive-java-with-comments-explanation-priority-queue",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        int n = classes.length;\\n        \\n        // Create priority queue to store the data, see comparator class\\n        PriorityQueue<Classroom> cpq = new PriorityQueue<Classroom>(n, new CustomComparator()); \\n        int i;\\n        double ans = 0.0;\\n        \\n        for(i = 0; i < n; i++) {\\n            cpq.add(new Classroom(classes[i][0], classes[i][1]));\\n        }\\n        \\n        for(i = 0; i < extraStudents; i++) {\\n            \\n            // In our comparator, we have already calculated which is the best class to put that extra student\\n            // So this if function is just updating the priority queue with the latest calculated pass ratio\\n            Classroom c = cpq.poll();\\n            cpq.add(new Classroom(c.pass + 1, c.total + 1));\\n        }\\n        \\n        for(i = 0; i < n; i++) {\\n            Classroom c = cpq.poll();\\n            ans += c.pr;\\n        }\\n        \\n        return ans / n;\\n        \\n    }\\n}\\n\\nclass Classroom {\\n    double pass;\\n    double total;\\n    double pr;\\n    public Classroom(double p, double t) {\\n        pass = p;\\n        total = t;\\n        pr = p / t;\\n    }\\n}\\n\\nclass CustomComparator implements Comparator<Classroom> {\\n\\n    @Override\\n    public int compare(Classroom c1, Classroom c2) {\\n        \\n        // We want to maximize our pass ratio, so putting the extra student in whichever class\\n        // gives us better profit in pass ratio wins.\\n        double pr1 = ((c1.pass + 1) / (c1.total + 1)) - c1.pr;\\n        double pr2 = ((c2.pass + 1) / (c2.total + 1)) - c2.pr;\\n        if (pr1 > pr2) {\\n            return -1;\\n        }\\n        else if (pr1 < pr2) {\\n            return 1;\\n        }\\n        else {\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        int n = classes.length;\\n        \\n        // Create priority queue to store the data, see comparator class\\n        PriorityQueue<Classroom> cpq = new PriorityQueue<Classroom>(n, new CustomComparator()); \\n        int i;\\n        double ans = 0.0;\\n        \\n        for(i = 0; i < n; i++) {\\n            cpq.add(new Classroom(classes[i][0], classes[i][1]));\\n        }\\n        \\n        for(i = 0; i < extraStudents; i++) {\\n            \\n            // In our comparator, we have already calculated which is the best class to put that extra student\\n            // So this if function is just updating the priority queue with the latest calculated pass ratio\\n            Classroom c = cpq.poll();\\n            cpq.add(new Classroom(c.pass + 1, c.total + 1));\\n        }\\n        \\n        for(i = 0; i < n; i++) {\\n            Classroom c = cpq.poll();\\n            ans += c.pr;\\n        }\\n        \\n        return ans / n;\\n        \\n    }\\n}\\n\\nclass Classroom {\\n    double pass;\\n    double total;\\n    double pr;\\n    public Classroom(double p, double t) {\\n        pass = p;\\n        total = t;\\n        pr = p / t;\\n    }\\n}\\n\\nclass CustomComparator implements Comparator<Classroom> {\\n\\n    @Override\\n    public int compare(Classroom c1, Classroom c2) {\\n        \\n        // We want to maximize our pass ratio, so putting the extra student in whichever class\\n        // gives us better profit in pass ratio wins.\\n        double pr1 = ((c1.pass + 1) / (c1.total + 1)) - c1.pr;\\n        double pr2 = ((c2.pass + 1) / (c2.total + 1)) - c2.pr;\\n        if (pr1 > pr2) {\\n            return -1;\\n        }\\n        else if (pr1 < pr2) {\\n            return 1;\\n        }\\n        else {\\n            return 0;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108272,
                "title": "python3-priority-queue-solution-with-thought-process",
                "content": "From the description, we can tell that after adding 1 to both numbers to `[pass, total]`, \\nwe want to make sure that the value of `(pass+1)/(total+1) - pass/total` is the maximum across all classes.\\n\\nTherefore, we want to sort by this value `(total-pass)/(total*(total+1))` and after each update, we also want to get the new largest value. And it\\'s pretty strightfoward to think about using Priority Queue here.\\n\\nTime: O((k+n)logn)   Space: O(n), where n is the length of `classes` and k is the value of `extraStudents`\\n\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = []\\n                  \\n        for i, stat in enumerate(classes):\\n            score = (stat[1]-stat[0])/(stat[1]*(stat[1]+1))\\n            heapq.heappush(pq, (-score, i))\\n            \\n        while extraStudents:\\n            _, idx = heapq.heappop(pq)\\n            \\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            newScore = (classes[idx][1]-classes[idx][0])/(classes[idx][1]*(classes[idx][1]+1))\\n            heapq.heappush(pq, (-newScore, idx))\\n            \\n            extraStudents -= 1\\n            \\n        return sum(stat[0]/stat[1] for stat in classes)/len(classes)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq = []\\n                  \\n        for i, stat in enumerate(classes):\\n            score = (stat[1]-stat[0])/(stat[1]*(stat[1]+1))\\n            heapq.heappush(pq, (-score, i))\\n            \\n        while extraStudents:\\n            _, idx = heapq.heappop(pq)\\n            \\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            newScore = (classes[idx][1]-classes[idx][0])/(classes[idx][1]*(classes[idx][1]+1))\\n            heapq.heappush(pq, (-newScore, idx))\\n            \\n            extraStudents -= 1\\n            \\n        return sum(stat[0]/stat[1] for stat in classes)/len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4047534,
                "title": "python-check-increase-in-pass-ratio",
                "content": "The main thing to understand is how we are going to assign a student to any class.\\n\\nSee, we want to \"MAXIMIZE\" the average pass ratio. So, it makes sense that when we assign a student to any class, we are doing it such that the change in the pass ratio is maximum for that particular class after we assign a student to it. \\n\\nTo understand it better, take an example.\\n\\n\\tclasses = [[1,2],[3,5],[2,2]], extraStudents = 2\\n\\t\\n\\tLet\\'s say we want to assign a student to any class.\\n\\t\\n\\tWe have three options to choose from.\\n\\t\\n\\tFor class 0, its old pass ratio is 1/2 => 0.5\\n    If we assign one student to it, is new pass ratio will be 2/3 => 0.66666\\n        \\n    For class 1, its old pass ratio is 3/5 => 0.6\\n    If we assign one student to it, is new pass ratio will be 4/6 => 0.66666\\n        \\n    For class 2, its old pass ratio is 2/2 => 1\\n    If we assign one student to it, is new pass ratio will be 3/3 => 1\\n\\t\\n\\tSo, what can we observe?\\n\\t\\n\\tWe can see that assigning students to class 2 is of no use because its pass ratio will always remain \"1\"\\n\\tSo, for class 2, the increase in pass ratio will be 0.\\n\\t\\n\\tAs for class 0 and class 1, \\n\\t\\n\\twe see that assigning a student to class 0 will increase the pass ratio\\n\\tfrom 0.5 to 0.66666 => An increase of 0.16666\\n\\t\\n\\tAnd, assigning a student to class 1 will increase the pass ratio\\n\\tfrom 0.6 to 0.66666 => An increase of 0.06666\\n\\t\\n\\tSo, we can conclude that we if have to assign a student to any class such that \\n\\tthe average pass ratio is maximized, we have to assign that student to class 0\\n\\tsince for that class, the increase in pass ratio is the maximum among all the classes.\\n\\t\\nAnd that\\'s the main idea behind choosing a class for a student.\\n\\nWe want to keep track of what is the increase in the pass ratio if we assign a student to any class.\\nAnd whatever class has the highest increase will be the one which we will choose and add the student to it.\\n\\nAnd since we want this data to be ordered all the time as we add students to classes, we will use a maxHeap here which will order the classes by their increase in the pass ratio upon addition of a student.\\n\\t\\n```\\ndef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\n\\t\\t# Number of classes\\n        n = len(classes)\\n        \\n        # MaxHeap\\n        maxHeap = []\\n        \\n        for i in range(n):\\n            # What would be the increase in pass ratio if a student is assigned to this class?\\n            # It would be newPassRatio - oldPassRatio\\n            oldPassRatio = classes[i][0] / classes[i][1]\\n            newPassRatio = (classes[i][0] + 1) / (classes[i][1] + 1)\\n            \\n            increaseInPassRatio = newPassRatio - oldPassRatio\\n            \\n            # We want to order classes by their increaseInPassRatio\\n            # That\\'s why increaseInPassRatio is the first item\\n            # It is in negative so that we can utilize the minHeap in python as a maxHeap\\n            heappush(maxHeap, [-increaseInPassRatio, classes[i]])\\n            \\n        # Now, we can start assigning classes\\n        while extraStudents > 0:\\n            \\n            # Take the classes with highest increaseInPassRatio if we assign a student to it\\n            top = heappop(maxHeap)\\n            \\n            # Assign the student to this class\\n            extraStudents -= 1\\n            \\n            top[1][0] += 1\\n            top[1][1] += 1\\n            \\n            # Now, before we push it back to the maxHeap\\n            # We want to calculate the new \"increaseInPassRatio\" value since we added one student to it\\n            oldPassRatio = top[1][0] / top[1][1]\\n            newPassRatio = (top[1][0] + 1) / (top[1][1] + 1)\\n            \\n            increaseInPassRatio = newPassRatio - oldPassRatio\\n            \\n            top[0] = -increaseInPassRatio\\n            \\n            # Now, we can push back this data in the maxHeap\\n            heappush(maxHeap, top)\\n        \\n        # Now, we will calculate the total of pass ratios of all the classes\\n        totalPassRatio = 0\\n        while maxHeap:\\n            top = heappop(maxHeap)\\n            \\n            totalPassRatio += top[1][0] / top[1][1]\\n        \\n        # And finally, return the Average Pass Ratio\\n        return totalPassRatio / n\\n```",
                "solutionTags": [
                    "Python",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\ndef maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n\\n\\t\\t# Number of classes\\n        n = len(classes)\\n        \\n        # MaxHeap\\n        maxHeap = []\\n        \\n        for i in range(n):\\n            # What would be the increase in pass ratio if a student is assigned to this class?\\n            # It would be newPassRatio - oldPassRatio\\n            oldPassRatio = classes[i][0] / classes[i][1]\\n            newPassRatio = (classes[i][0] + 1) / (classes[i][1] + 1)\\n            \\n            increaseInPassRatio = newPassRatio - oldPassRatio\\n            \\n            # We want to order classes by their increaseInPassRatio\\n            # That\\'s why increaseInPassRatio is the first item\\n            # It is in negative so that we can utilize the minHeap in python as a maxHeap\\n            heappush(maxHeap, [-increaseInPassRatio, classes[i]])\\n            \\n        # Now, we can start assigning classes\\n        while extraStudents > 0:\\n            \\n            # Take the classes with highest increaseInPassRatio if we assign a student to it\\n            top = heappop(maxHeap)\\n            \\n            # Assign the student to this class\\n            extraStudents -= 1\\n            \\n            top[1][0] += 1\\n            top[1][1] += 1\\n            \\n            # Now, before we push it back to the maxHeap\\n            # We want to calculate the new \"increaseInPassRatio\" value since we added one student to it\\n            oldPassRatio = top[1][0] / top[1][1]\\n            newPassRatio = (top[1][0] + 1) / (top[1][1] + 1)\\n            \\n            increaseInPassRatio = newPassRatio - oldPassRatio\\n            \\n            top[0] = -increaseInPassRatio\\n            \\n            # Now, we can push back this data in the maxHeap\\n            heappush(maxHeap, top)\\n        \\n        # Now, we will calculate the total of pass ratios of all the classes\\n        totalPassRatio = 0\\n        while maxHeap:\\n            top = heappop(maxHeap)\\n            \\n            totalPassRatio += top[1][0] / top[1][1]\\n        \\n        # And finally, return the Average Pass Ratio\\n        return totalPassRatio / n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3989625,
                "title": "racket-solution",
                "content": "\\n\\n# Code\\n```\\n\\n(define (ratio-delta class)\\n  (- (/ (add1 (first class))\\n        (add1 (second class)))\\n     (/ (first class)\\n        (second class))))\\n\\n(define/contract (max-average-ratio classes extraStudents)\\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\\n  (let ((heap (make-heap (lambda (a b)\\n                           (> (car a)\\n                              (car b)))))\\n        (classes (map (lambda (class)\\n                        (let ((class (map real->double-flonum class)))\\n                          (cons (ratio-delta class)\\n                                class)))\\n                      classes)))\\n    (heap-add-all! heap classes)\\n    (for ((i (range 0 extraStudents)))\\n      (let* ((m (heap-min heap))\\n             (new (list (add1 (second m))\\n                        (add1 (third m))) )\\n             (new (cons (ratio-delta new)\\n                        new)))\\n        (heap-remove-min! heap)\\n        (heap-add! heap new)))\\n    (/ (apply + (map (lambda (a) (/ (second a)\\n                                    (third a)))\\n                     (vector->list (heap->vector heap))))\\n       (length classes))))\\n\\n```",
                "solutionTags": [
                    "Racket"
                ],
                "code": "```\\n\\n(define (ratio-delta class)\\n  (- (/ (add1 (first class))\\n        (add1 (second class)))\\n     (/ (first class)\\n        (second class))))\\n\\n(define/contract (max-average-ratio classes extraStudents)\\n  (-> (listof (listof exact-integer?)) exact-integer? flonum?)\\n  (let ((heap (make-heap (lambda (a b)\\n                           (> (car a)\\n                              (car b)))))\\n        (classes (map (lambda (class)\\n                        (let ((class (map real->double-flonum class)))\\n                          (cons (ratio-delta class)\\n                                class)))\\n                      classes)))\\n    (heap-add-all! heap classes)\\n    (for ((i (range 0 extraStudents)))\\n      (let* ((m (heap-min heap))\\n             (new (list (add1 (second m))\\n                        (add1 (third m))) )\\n             (new (cons (ratio-delta new)\\n                        new)))\\n        (heap-remove-min! heap)\\n        (heap-add! heap new)))\\n    (/ (apply + (map (lambda (a) (/ (second a)\\n                                    (third a)))\\n                     (vector->list (heap->vector heap))))\\n       (length classes))))\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972152,
                "title": "c-priority-queue",
                "content": "# Intuition\\nSimply greedy picking a class that gives the best profit and update the numbers. \\nThe profit of a class (p, q) is the difference p/q - (p+1)/(q+1).  \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public double MaxAverageRatio(int[][] classes, int extraStudents) \\n    {\\n        var n = classes.Length;\\n        var pq = new PriorityQueue<(double, double), double>();\\n        foreach(var candidate in classes)\\n        {\\n            pq.Enqueue( (candidate[0], candidate[1]) , GetProfit(candidate[0], candidate[1]));\\n        }    \\n\\n        //  p + 1\\n        while(extraStudents-- > 0)\\n        {\\n            var (first, second) = pq.Dequeue();\\n            ++first;\\n            ++second;\\n            pq.Enqueue( (first, second), GetProfit( first, second) );\\n        }\\n\\n        var result = 0D;\\n        while(pq.Count > 0)\\n        {\\n            var (first, second) = pq.Dequeue();\\n\\n            result += first/second;\\n\\n            Console.WriteLine($\"{first} {second} {first/second}\" );\\n        }\\n        \\n        return result/n;\\n    }\\n\\n    public double GetProfit(double x, double y)\\n    {\\n        return x/y - (x+1)/(y+1);\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public double MaxAverageRatio(int[][] classes, int extraStudents) \\n    {\\n        var n = classes.Length;\\n        var pq = new PriorityQueue<(double, double), double>();\\n        foreach(var candidate in classes)\\n        {\\n            pq.Enqueue( (candidate[0], candidate[1]) , GetProfit(candidate[0], candidate[1]));\\n        }    \\n\\n        //  p + 1\\n        while(extraStudents-- > 0)\\n        {\\n            var (first, second) = pq.Dequeue();\\n            ++first;\\n            ++second;\\n            pq.Enqueue( (first, second), GetProfit( first, second) );\\n        }\\n\\n        var result = 0D;\\n        while(pq.Count > 0)\\n        {\\n            var (first, second) = pq.Dequeue();\\n\\n            result += first/second;\\n\\n            Console.WriteLine($\"{first} {second} {first/second}\" );\\n        }\\n        \\n        return result/n;\\n    }\\n\\n    public double GetProfit(double x, double y)\\n    {\\n        return x/y - (x+1)/(y+1);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3919258,
                "title": "maximum-average-pass-ratio",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nclass MaxHeap {\\n    constructor() {\\n        this.heap = [];\\n    }\\n\\n    push(value) {\\n        this.heap.push(value);\\n        this.heapifyUp(this.heap.length - 1);\\n    }\\n\\n    pop() {\\n        if (this.heap.length === 0) {\\n            return null;\\n        }\\n        if (this.heap.length === 1) {\\n            return this.heap.pop();\\n        }\\n\\n        const top = this.heap[0];\\n        this.heap[0] = this.heap.pop();\\n        this.heapifyDown(0);\\n\\n        return top;\\n    }\\n\\n    heapifyUp(index) {\\n        while (index > 0) {\\n            const parent = Math.floor((index - 1) / 2);\\n            if (this.heap[parent][0] < this.heap[index][0]) {\\n                [this.heap[parent], this.heap[index]] = [this.heap[index], this.heap[parent]];\\n                index = parent;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    heapifyDown(index) {\\n        const n = this.heap.length;\\n        while (true) {\\n            let largest = index;\\n            const left = 2 * index + 1;\\n            const right = 2 * index + 2;\\n\\n            if (left < n && this.heap[left][0] > this.heap[largest][0]) {\\n                largest = left;\\n            }\\n            if (right < n && this.heap[right][0] > this.heap[largest][0]) {\\n                largest = right;\\n            }\\n\\n            if (largest !== index) {\\n                [this.heap[index], this.heap[largest]] = [this.heap[largest], this.heap[index]];\\n                index = largest;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    size() {\\n        return this.heap.length;\\n    }\\n}\\n\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const n = classes.length;\\n\\n    // Helper function to calculate pass ratio increase\\n    const passRatioIncrease = (pass, total) => (pass + 1) / (total + 1) - pass / total;\\n\\n    // Initialize max heap to keep track of classes with maximum improvement\\n    const maxHeap = new MaxHeap();\\n\\n    for (let j = 0; j < n; j++) {\\n        const [pass, total] = classes[j];\\n        if (pass !== total) {\\n            const increase = passRatioIncrease(pass, total);\\n            maxHeap.push([increase, j]);\\n        }\\n    }\\n\\n    let totalPassRatio = 0;\\n\\n    for (let j = 0; j < n; j++) {\\n        totalPassRatio += classes[j][0] / classes[j][1];\\n    }\\n\\n    for (let i = 0; i < extraStudents; i++) {\\n        if (maxHeap.size() === 0) {\\n            break; // No more classes to consider\\n        }\\n\\n        const [increase, maxIndex] = maxHeap.pop();\\n        const [pass, total] = classes[maxIndex];\\n        const newPass = pass + 1;\\n        const newTotal = total + 1;\\n        const newIncrease = passRatioIncrease(newPass, newTotal);\\n        const newAvg = (totalPassRatio - (pass / total)) + (newPass / newTotal);\\n\\n        if (newAvg <= totalPassRatio) {\\n            break; // No further improvement possible\\n        }\\n\\n        totalPassRatio = newAvg;\\n        classes[maxIndex][0]++;\\n        classes[maxIndex][1]++;\\n        maxHeap.push([newIncrease, maxIndex]);\\n    }\\n\\n    return totalPassRatio / n;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nclass MaxHeap {\\n    constructor() {\\n        this.heap = [];\\n    }\\n\\n    push(value) {\\n        this.heap.push(value);\\n        this.heapifyUp(this.heap.length - 1);\\n    }\\n\\n    pop() {\\n        if (this.heap.length === 0) {\\n            return null;\\n        }\\n        if (this.heap.length === 1) {\\n            return this.heap.pop();\\n        }\\n\\n        const top = this.heap[0];\\n        this.heap[0] = this.heap.pop();\\n        this.heapifyDown(0);\\n\\n        return top;\\n    }\\n\\n    heapifyUp(index) {\\n        while (index > 0) {\\n            const parent = Math.floor((index - 1) / 2);\\n            if (this.heap[parent][0] < this.heap[index][0]) {\\n                [this.heap[parent], this.heap[index]] = [this.heap[index], this.heap[parent]];\\n                index = parent;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    heapifyDown(index) {\\n        const n = this.heap.length;\\n        while (true) {\\n            let largest = index;\\n            const left = 2 * index + 1;\\n            const right = 2 * index + 2;\\n\\n            if (left < n && this.heap[left][0] > this.heap[largest][0]) {\\n                largest = left;\\n            }\\n            if (right < n && this.heap[right][0] > this.heap[largest][0]) {\\n                largest = right;\\n            }\\n\\n            if (largest !== index) {\\n                [this.heap[index], this.heap[largest]] = [this.heap[largest], this.heap[index]];\\n                index = largest;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    size() {\\n        return this.heap.length;\\n    }\\n}\\n\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    const n = classes.length;\\n\\n    // Helper function to calculate pass ratio increase\\n    const passRatioIncrease = (pass, total) => (pass + 1) / (total + 1) - pass / total;\\n\\n    // Initialize max heap to keep track of classes with maximum improvement\\n    const maxHeap = new MaxHeap();\\n\\n    for (let j = 0; j < n; j++) {\\n        const [pass, total] = classes[j];\\n        if (pass !== total) {\\n            const increase = passRatioIncrease(pass, total);\\n            maxHeap.push([increase, j]);\\n        }\\n    }\\n\\n    let totalPassRatio = 0;\\n\\n    for (let j = 0; j < n; j++) {\\n        totalPassRatio += classes[j][0] / classes[j][1];\\n    }\\n\\n    for (let i = 0; i < extraStudents; i++) {\\n        if (maxHeap.size() === 0) {\\n            break; // No more classes to consider\\n        }\\n\\n        const [increase, maxIndex] = maxHeap.pop();\\n        const [pass, total] = classes[maxIndex];\\n        const newPass = pass + 1;\\n        const newTotal = total + 1;\\n        const newIncrease = passRatioIncrease(newPass, newTotal);\\n        const newAvg = (totalPassRatio - (pass / total)) + (newPass / newTotal);\\n\\n        if (newAvg <= totalPassRatio) {\\n            break; // No further improvement possible\\n        }\\n\\n        totalPassRatio = newAvg;\\n        classes[maxIndex][0]++;\\n        classes[maxIndex][1]++;\\n        maxHeap.push([newIncrease, maxIndex]);\\n    }\\n\\n    return totalPassRatio / n;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917978,
                "title": "heap-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Check what is the fraction that is adding up most at every stage and add each extra student in that class\\n\\n# Approach\\n- With heap\\n\\n# Complexity\\n- Time complexity:\\n- O(NlogN)\\n\\n- Space complexity:\\n- O(N)\\n\\n# Code\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        for i in range(len(classes)):\\n            ratio_curr = classes[i][0]/(1.0*classes[i][1])\\n            ratio = (classes[i][0]+1)/(1.0*(classes[i][1]+1))\\n            heapq.heappush(heap,(ratio_curr - ratio,i))\\n        while extraStudents != 0:\\n            ele = heapq.heappop(heap)\\n            index = ele[1]\\n            classes[index][0]+=1\\n            classes[index][1]+=1\\n            ratio_curr = classes[index][0]/(1.0*classes[index][1])\\n            ratio = (classes[index][0]+1)/(1.0*(classes[index][1]+1))\\n            heapq.heappush(heap,(ratio_curr-ratio,index))\\n            extraStudents-=1\\n        total = 0\\n        for i in range(len(classes)):\\n            total+=(classes[i][0]/classes[i][1])\\n        return total/len(classes)\\n        # return 2\\n    \\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap = []\\n        for i in range(len(classes)):\\n            ratio_curr = classes[i][0]/(1.0*classes[i][1])\\n            ratio = (classes[i][0]+1)/(1.0*(classes[i][1]+1))\\n            heapq.heappush(heap,(ratio_curr - ratio,i))\\n        while extraStudents != 0:\\n            ele = heapq.heappop(heap)\\n            index = ele[1]\\n            classes[index][0]+=1\\n            classes[index][1]+=1\\n            ratio_curr = classes[index][0]/(1.0*classes[index][1])\\n            ratio = (classes[index][0]+1)/(1.0*(classes[index][1]+1))\\n            heapq.heappush(heap,(ratio_curr-ratio,index))\\n            extraStudents-=1\\n        total = 0\\n        for i in range(len(classes)):\\n            total+=(classes[i][0]/classes[i][1])\\n        return total/len(classes)\\n        # return 2\\n    \\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3815914,
                "title": "greedily-pick-class-which-maximizes-increase",
                "content": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        n = len(classes)\\n        diff = lambda a, b: (a + 1) / (b + 1) - a / b\\n        heap = []\\n        for a, b in classes:\\n            heapq.heappush(heap, (-diff(a, b), a, b))\\n        for _ in range(extraStudents):\\n            currdiff, a, b = heapq.heappop(heap)\\n            heapq.heappush(heap, (-diff(a + 1, b + 1), a + 1, b + 1))\\n        res = 0\\n        for diff, a, b in heap:\\n            res += a / b\\n        res /= n\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nimport heapq\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        n = len(classes)\\n        diff = lambda a, b: (a + 1) / (b + 1) - a / b\\n        heap = []\\n        for a, b in classes:\\n            heapq.heappush(heap, (-diff(a, b), a, b))\\n        for _ in range(extraStudents):\\n            currdiff, a, b = heapq.heappop(heap)\\n            heapq.heappush(heap, (-diff(a + 1, b + 1), a + 1, b + 1))\\n        res = 0\\n        for diff, a, b in heap:\\n            res += a / b\\n        res /= n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3799368,
                "title": "c-priority-queue-max-heap-easy-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<double,pair<double,double>>> pq;\\n        for(auto &i:c)\\n        {\\n            double rat1 = ((double)i[0])/i[1];\\n            double rat2 = ((double)(i[0]+1))/(i[1]+1);\\n            pq.push({rat2-rat1,{(double)i[0],(double)i[1]}});\\n        }\\n        while(e>0)\\n        {\\n            double pass = pq.top().second.first;\\n            double tot = pq.top().second.second;\\n            pq.pop();\\n            pass+=1;\\n            tot+=1;\\n            double rat1 = pass/tot;\\n            double rat2 = (pass+1)/(tot+1);\\n            pq.push({rat2-rat1,{pass,tot}});\\n            e--;\\n        }\\n        double ans = 0;\\n        double siz = c.size();\\n        while(!pq.empty())\\n        {\\n            ans+=pq.top().second.first/pq.top().second.second;\\n            pq.pop();\\n        }\\n        ans/=siz;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<double,pair<double,double>>> pq;\\n        for(auto &i:c)\\n        {\\n            double rat1 = ((double)i[0])/i[1];\\n            double rat2 = ((double)(i[0]+1))/(i[1]+1);\\n            pq.push({rat2-rat1,{(double)i[0],(double)i[1]}});\\n        }\\n        while(e>0)\\n        {\\n            double pass = pq.top().second.first;\\n            double tot = pq.top().second.second;\\n            pq.pop();\\n            pass+=1;\\n            tot+=1;\\n            double rat1 = pass/tot;\\n            double rat2 = (pass+1)/(tot+1);\\n            pq.push({rat2-rat1,{pass,tot}});\\n            e--;\\n        }\\n        double ans = 0;\\n        double siz = c.size();\\n        while(!pq.empty())\\n        {\\n            ans+=pq.top().second.first/pq.top().second.second;\\n            pq.pop();\\n        }\\n        ans/=siz;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3752771,
                "title": "maximum-average-pass-ratio-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int i;\\n        double diff, avg, ans=0;\\n        priority_queue<pair<double, int>> pq;\\n\\n        for(i=0 ; i<classes.size() ; i++)\\n        {\\n            diff = (double)(classes[i][0]+1)/(classes[i][1]+1) - (double)(classes[i][0])/classes[i][1];\\n            pq.push(make_pair(diff, i));\\n        }\\n        while(extraStudents--)\\n        {\\n            i = pq.top().second;\\n            pq.pop();\\n            classes[i][0] += 1;\\n            classes[i][1] += 1;\\n\\n            diff = (double)(classes[i][0]+1)/(classes[i][1]+1) - (double)(classes[i][0])/classes[i][1];\\n            pq.push(make_pair(diff, i));\\n        }\\n\\n        for(i=0 ; i<classes.size() ; i++)\\n        {\\n            avg = (double)(classes[i][0])/classes[i][1];\\n            ans += avg;\\n        }\\n        return ans/classes.size();\\n    }\\n};\\n```\\n![upvote new.jpg](https://assets.leetcode.com/users/images/b4c7facb-0a28-4cfc-8aba-ed3417b91ff8_1689135037.8552275.jpeg)\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int i;\\n        double diff, avg, ans=0;\\n        priority_queue<pair<double, int>> pq;\\n\\n        for(i=0 ; i<classes.size() ; i++)\\n        {\\n            diff = (double)(classes[i][0]+1)/(classes[i][1]+1) - (double)(classes[i][0])/classes[i][1];\\n            pq.push(make_pair(diff, i));\\n        }\\n        while(extraStudents--)\\n        {\\n            i = pq.top().second;\\n            pq.pop();\\n            classes[i][0] += 1;\\n            classes[i][1] += 1;\\n\\n            diff = (double)(classes[i][0]+1)/(classes[i][1]+1) - (double)(classes[i][0])/classes[i][1];\\n            pq.push(make_pair(diff, i));\\n        }\\n\\n        for(i=0 ; i<classes.size() ; i++)\\n        {\\n            avg = (double)(classes[i][0])/classes[i][1];\\n            ans += avg;\\n        }\\n        return ans/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3715462,
                "title": "java-priorityqueue",
                "content": "# Code\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {\\n            public int compare(int[] a, int[] b) {\\n                double b_groth = (double)(b[0]+1)/(double)(b[1]+1) - (double)b[0]/(double)b[1];\\n                double a_groth = (double)(a[0]+1)/(double)(a[1]+1) - (double)a[0]/(double)a[1];\\n                if(b_groth >= a_groth) {\\n                    return 1;\\n                } else {\\n                    return -1;\\n                }\\n            }\\n        });\\n\\n        for(int[] c : classes) {\\n            pq.add(c);\\n        }\\n\\n        for(int i=0; i<extraStudents; i++) {\\n            int[] cur = pq.poll();\\n            cur[0]+=1;\\n            cur[1]+=1;\\n            pq.add(cur);\\n        }\\n\\n        double ans = 0;\\n        while(pq.size()>0) {\\n            int[] cur = pq.poll();\\n            ans += (double)cur[0]/(double)cur[1];\\n        }\\n\\n        ans /= classes.length;\\n\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {\\n            public int compare(int[] a, int[] b) {\\n                double b_groth = (double)(b[0]+1)/(double)(b[1]+1) - (double)b[0]/(double)b[1];\\n                double a_groth = (double)(a[0]+1)/(double)(a[1]+1) - (double)a[0]/(double)a[1];\\n                if(b_groth >= a_groth) {\\n                    return 1;\\n                } else {\\n                    return -1;\\n                }\\n            }\\n        });\\n\\n        for(int[] c : classes) {\\n            pq.add(c);\\n        }\\n\\n        for(int i=0; i<extraStudents; i++) {\\n            int[] cur = pq.poll();\\n            cur[0]+=1;\\n            cur[1]+=1;\\n            pq.add(cur);\\n        }\\n\\n        double ans = 0;\\n        while(pq.size()>0) {\\n            int[] cur = pq.poll();\\n            ans += (double)cur[0]/(double)cur[1];\\n        }\\n\\n        ans /= classes.length;\\n\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3564800,
                "title": "python",
                "content": "Things become a lot easier after looking at hints\\n# Code\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], s: int) -> float:\\n        n = len(classes)\\n        h = []\\n        heapq.heapify(h)\\n\\n        for i in range(n):\\n            change = ((classes[i][0]+1)/(classes[i][1]+1)) - (classes[i][0]/classes[i][1])\\n            heapq.heappush(h, (-change, i))\\n        \\n        while s> 0:\\n            a, idx = heapq.heappop(h)\\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            s -= 1\\n            change = ((classes[idx][0]+1)/(classes[idx][1]+1)) - (classes[idx][0]/classes[idx][1])\\n            heapq.heappush(h, (-change, idx))\\n        \\n        res = 0\\n        for i in range(n):\\n            res += classes[i][0]/classes[i][1]\\n        \\n        return res/n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], s: int) -> float:\\n        n = len(classes)\\n        h = []\\n        heapq.heapify(h)\\n\\n        for i in range(n):\\n            change = ((classes[i][0]+1)/(classes[i][1]+1)) - (classes[i][0]/classes[i][1])\\n            heapq.heappush(h, (-change, i))\\n        \\n        while s> 0:\\n            a, idx = heapq.heappop(h)\\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            s -= 1\\n            change = ((classes[idx][0]+1)/(classes[idx][1]+1)) - (classes[idx][0]/classes[idx][1])\\n            heapq.heappush(h, (-change, idx))\\n        \\n        res = 0\\n        for i in range(n):\\n            res += classes[i][0]/classes[i][1]\\n        \\n        return res/n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443122,
                "title": "python-max-heap-solution-with-explanation",
                "content": "```python\\n\\'\\'\\'\\nWe can focus on how much difference there is in the pass ratio of a class before and after using a extraStudent.\\nSo we can use a max heap to record the class which has max difference, and use a extraStudent on it.\\ntc is O(extraStudents * log(len(classes))), sc is O(len(classes))\\n\\'\\'\\'\\nfrom heapq import heapreplace, heapify \\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        maxHeap = [[p/t - (1+p)/(1+t), idx] for idx, (p, t) in enumerate(classes) if p != t]\\n        if len(maxHeap) == 0: return 1.\\n        heapify(maxHeap)\\n        topOfHeap = lambda: maxHeap[0][1]\\n        while extraStudents > 0:\\n            idx = topOfHeap()\\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            heapreplace(maxHeap, [classes[idx][0]/classes[idx][1] - (classes[idx][0]+1)/(classes[idx][1]+1), idx])\\n            extraStudents -= 1\\n        return sum(p/t for p, t in classes) / len(classes)\\n```",
                "solutionTags": [
                    "Python",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```python\\n\\'\\'\\'\\nWe can focus on how much difference there is in the pass ratio of a class before and after using a extraStudent.\\nSo we can use a max heap to record the class which has max difference, and use a extraStudent on it.\\ntc is O(extraStudents * log(len(classes))), sc is O(len(classes))\\n\\'\\'\\'\\nfrom heapq import heapreplace, heapify \\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        maxHeap = [[p/t - (1+p)/(1+t), idx] for idx, (p, t) in enumerate(classes) if p != t]\\n        if len(maxHeap) == 0: return 1.\\n        heapify(maxHeap)\\n        topOfHeap = lambda: maxHeap[0][1]\\n        while extraStudents > 0:\\n            idx = topOfHeap()\\n            classes[idx][0] += 1\\n            classes[idx][1] += 1\\n            heapreplace(maxHeap, [classes[idx][0]/classes[idx][1] - (classes[idx][0]+1)/(classes[idx][1]+1), idx])\\n            extraStudents -= 1\\n        return sum(p/t for p, t in classes) / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3426878,
                "title": "c-using-priority-queue-easy-understanding",
                "content": "# Intuition\\n- Initial ratio for one class=x/y\\n- After adding 1 child=(x+1)/(y+1)\\n- Change in ratio by adding one child=(y-x)/(y*(y+1))\\n- Keep removing and adding this ratio from priority queue for all the extra students\\n\\n# Approach\\nAssign ExtraStudent in such class that we\"ll get maximum possible ratio . so How we\"ll do this . We have to send ExtraStudents to classes 1 by 1 according to their ratio(calculate the difference of all classes for 1 student) where we get more difference we\"ll send the student to that particular class. and again check the difference for the next student .\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,pair<int,int>>>pq;\\n        for(int i=0;i<classes.size();i++){\\n             int var1 = classes[i][0] , var2 = classes[i][1];\\n            double diff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n              pq.push({diff,{var1,var2}});\\n        }\\n        \\n        while(extraStudents!=0){\\n            int var1 = pq.top().second.first , var2 = pq.top().second.second;\\n            var1++;\\n            var2++;\\n            double newdiff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n            pq.pop();\\n             pq.push({newdiff,{var1,var2}});\\n            extraStudents--;\\n            \\n        }\\n        double ans = 0;\\n        while(!pq.empty()){\\n            ans += (double)(pq.top().second.first) /(pq.top().second.second);\\n            pq.pop();\\n        }\\n         \\n        return ans/classes.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double,pair<int,int>>>pq;\\n        for(int i=0;i<classes.size();i++){\\n             int var1 = classes[i][0] , var2 = classes[i][1];\\n            double diff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n              pq.push({diff,{var1,var2}});\\n        }\\n        \\n        while(extraStudents!=0){\\n            int var1 = pq.top().second.first , var2 = pq.top().second.second;\\n            var1++;\\n            var2++;\\n            double newdiff = (double)(var1+1)/(var2+1) - (double)(var1)/(var2);\\n            pq.pop();\\n             pq.push({newdiff,{var1,var2}});\\n            extraStudents--;\\n            \\n        }\\n        double ans = 0;\\n        while(!pq.empty()){\\n            ans += (double)(pq.top().second.first) /(pq.top().second.second);\\n            pq.pop();\\n        }\\n         \\n        return ans/classes.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3410519,
                "title": "java-n-logn-priorityqueue",
                "content": "# Code\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq = new PriorityQueue<>((double[] v1, double[] v2) -> Double.compare(v2[2], v1[2]));\\n        for (int[] c : classes) {\\n            pq.add(new double[]{c[0],c[1], ((double)(c[0]+1)/(c[1]+1) - (double)c[0]/c[1])});\\n        }\\n        \\n        for (int i = 0; i < extraStudents; i++) {\\n            double[] next = pq.poll();\\n            next[0]++;\\n            next[1]++;\\n            next[2] = ((double)(next[0]+1)/(next[1]+1) - (double)next[0]/next[1]);\\n            pq.add(next);\\n        }\\n\\n        double res = 0;\\n        while ( ! pq.isEmpty()) {\\n            res += (double)pq.peek()[0]/pq.poll()[1];\\n        }\\n\\n        return res/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]> pq = new PriorityQueue<>((double[] v1, double[] v2) -> Double.compare(v2[2], v1[2]));\\n        for (int[] c : classes) {\\n            pq.add(new double[]{c[0],c[1], ((double)(c[0]+1)/(c[1]+1) - (double)c[0]/c[1])});\\n        }\\n        \\n        for (int i = 0; i < extraStudents; i++) {\\n            double[] next = pq.poll();\\n            next[0]++;\\n            next[1]++;\\n            next[2] = ((double)(next[0]+1)/(next[1]+1) - (double)next[0]/next[1]);\\n            pq.add(next);\\n        }\\n\\n        double res = 0;\\n        while ( ! pq.isEmpty()) {\\n            res += (double)pq.peek()[0]/pq.poll()[1];\\n        }\\n\\n        return res/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3376809,
                "title": "simple-c-solution-using-priority-queue",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& nums, int k) {\\n        double sum = 0;\\n        double n = nums.size();\\n\\n        priority_queue<pair<double,pair<double,double>>> q;\\n\\n        vector<vector<double>> arr(n);\\n        for(int i=0 ; i<n ; i++){\\n            vector<double> temp(2);\\n            temp[0] = nums[i][0];\\n            temp[1] = nums[i][1];\\n            arr[i] = temp;\\n        }\\n\\n        \\n\\n        for(int i=0 ; i<n ; i++){\\n            q.push({((arr[i][0]+1)/(arr[i][1]+1))- (arr[i][0]/arr[i][1]), \\n            {arr[i][0] , arr[i][1]}});\\n        }\\n\\n        while(k--){\\n           double x = q.top().second.first;\\n           double y = q.top().second.second;\\n           q.pop();\\n           x = x+1;\\n           y = y+1;\\n           q.push({((x+1)/(y+1))-(x/y) , {x , y}});\\n        }\\n\\n\\n        while(!q.empty()){\\n            double x = q.top().second.first;\\n            double y = q.top().second.second;\\n            sum += x/y;\\n            q.pop();\\n        }\\n\\n       \\n        return sum/n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& nums, int k) {\\n        double sum = 0;\\n        double n = nums.size();\\n\\n        priority_queue<pair<double,pair<double,double>>> q;\\n\\n        vector<vector<double>> arr(n);\\n        for(int i=0 ; i<n ; i++){\\n            vector<double> temp(2);\\n            temp[0] = nums[i][0];\\n            temp[1] = nums[i][1];\\n            arr[i] = temp;\\n        }\\n\\n        \\n\\n        for(int i=0 ; i<n ; i++){\\n            q.push({((arr[i][0]+1)/(arr[i][1]+1))- (arr[i][0]/arr[i][1]), \\n            {arr[i][0] , arr[i][1]}});\\n        }\\n\\n        while(k--){\\n           double x = q.top().second.first;\\n           double y = q.top().second.second;\\n           q.pop();\\n           x = x+1;\\n           y = y+1;\\n           q.push({((x+1)/(y+1))-(x/y) , {x , y}});\\n        }\\n\\n\\n        while(!q.empty()){\\n            double x = q.top().second.first;\\n            double y = q.top().second.second;\\n            sum += x/y;\\n            q.pop();\\n        }\\n\\n       \\n        return sum/n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3213446,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn max_average_ratio(classes: Vec<Vec<i32>>, extra_students: i32) -> f64 {\\n        fn profit(pass: i32, total: i32) -> f64 {\\n            (pass + 1) as f64 / (total + 1) as f64 - pass as f64 / total as f64\\n        }\\n\\n        let mut total = 0.0;\\n        let mut pq = std::collections::BinaryHeap::new();\\n        for c in classes.iter() {\\n            total += c[0] as f64 / c[1] as f64;\\n            let v = profit(c[0], c[1]);\\n            pq.push((OrderedF64(v), c.clone()));\\n        }\\n        for _ in 0..extra_students {\\n            let (added_profit, c) = pq.pop().unwrap();\\n            total += added_profit.0;\\n            let v = profit(c[0] + 1, c[1] + 1);\\n            pq.push((OrderedF64(v), vec![c[0] + 1, c[1] + 1]));\\n        }\\n        total / classes.len() as f64\\n    }\\n}\\n\\n#[derive(Debug, Clone)]\\nstruct OrderedF64(f64);\\n\\nimpl PartialEq for OrderedF64 {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.0 == other.0\\n    }\\n}\\n\\nimpl PartialOrd for OrderedF64 {\\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\\n        self.0.partial_cmp(&other.0)\\n    }\\n}\\n\\nimpl Eq for OrderedF64 {}\\n\\nimpl Ord for OrderedF64 {\\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\\n        self.partial_cmp(other).unwrap_or(std::cmp::Ordering::Equal)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn max_average_ratio(classes: Vec<Vec<i32>>, extra_students: i32) -> f64 {\\n        fn profit(pass: i32, total: i32) -> f64 {\\n            (pass + 1) as f64 / (total + 1) as f64 - pass as f64 / total as f64\\n        }\\n\\n        let mut total = 0.0;\\n        let mut pq = std::collections::BinaryHeap::new();\\n        for c in classes.iter() {\\n            total += c[0] as f64 / c[1] as f64;\\n            let v = profit(c[0], c[1]);\\n            pq.push((OrderedF64(v), c.clone()));\\n        }\\n        for _ in 0..extra_students {\\n            let (added_profit, c) = pq.pop().unwrap();\\n            total += added_profit.0;\\n            let v = profit(c[0] + 1, c[1] + 1);\\n            pq.push((OrderedF64(v), vec![c[0] + 1, c[1] + 1]));\\n        }\\n        total / classes.len() as f64\\n    }\\n}\\n\\n#[derive(Debug, Clone)]\\nstruct OrderedF64(f64);\\n\\nimpl PartialEq for OrderedF64 {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.0 == other.0\\n    }\\n}\\n\\nimpl PartialOrd for OrderedF64 {\\n    fn partial_cmp(&self, other: &Self) -> Option<std::cmp::Ordering> {\\n        self.0.partial_cmp(&other.0)\\n    }\\n}\\n\\nimpl Eq for OrderedF64 {}\\n\\nimpl Ord for OrderedF64 {\\n    fn cmp(&self, other: &Self) -> std::cmp::Ordering {\\n        self.partial_cmp(other).unwrap_or(std::cmp::Ordering::Equal)\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3194702,
                "title": "greedy-algorithm-with-java-8",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIt\\'s a greedy algorithm.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nIn each step pick the one calss that adding the extra student creates the bigger difference. I used a PriorityQueue to select the largest difference at each step. \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n*log(n))$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n       \\n        PriorityQueue<int[]> q = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] o1, int[] o2) {\\n                return Double.compare(\\n                    (o2[0] + 1 )/ ((double) o2[1] + 1) - ((o2[0] )/ ((double) o2[1])),\\n                    (o1[0] + 1 )/ ((double) o1[1] + 1) - ((o1[0] )/ ((double) o1[1])));\\n            }\\n        });\\n\\n        for (int[] aClass : classes) {\\n            q.add(aClass);\\n        }\\n        for (int i =0;i<extraStudents;i++) {\\n            int[] min = q.poll();\\n            min[0]++;\\n            min[1]++;\\n            q.add(min);\\n\\n        }\\n        return q.stream().mapToDouble(ints -> ints[0]/(double)ints[1]).average().getAsDouble();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n       \\n        PriorityQueue<int[]> q = new PriorityQueue<>(new Comparator<int[]>() {\\n            @Override\\n            public int compare(int[] o1, int[] o2) {\\n                return Double.compare(\\n                    (o2[0] + 1 )/ ((double) o2[1] + 1) - ((o2[0] )/ ((double) o2[1])),\\n                    (o1[0] + 1 )/ ((double) o1[1] + 1) - ((o1[0] )/ ((double) o1[1])));\\n            }\\n        });\\n\\n        for (int[] aClass : classes) {\\n            q.add(aClass);\\n        }\\n        for (int i =0;i<extraStudents;i++) {\\n            int[] min = q.poll();\\n            min[0]++;\\n            min[1]++;\\n            q.add(min);\\n\\n        }\\n        return q.stream().mapToDouble(ints -> ints[0]/(double)ints[1]).average().getAsDouble();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3189293,
                "title": "1981-ms",
                "content": "```ruby\\ndef max_average_ratio a, e\\n    t, s, m = CRBTreeMap.new, (1 << 30), ((1 << 17) - 1)\\n    a.each_with_index do\\n        x, y = *_1.map!(&:to_f)\\n        t[k = \\n          ((((x + 1.0) / (y + 1.0) - x / y) * s).to_i << 17) |\\n          _2] = k\\n    end\\n    e.times do\\n        i = t.delete_max & m\\n        x, y = *a[i].map! { _1 + 1.0 }\\n        t[k = \\n          ((((x + 1.0) / (y + 1.0) - x / y) * s).to_i << 17) |\\n          i] = k\\n    end\\n    a.sum { _1.first / _1.last } / a.size\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```ruby\\ndef max_average_ratio a, e\\n    t, s, m = CRBTreeMap.new, (1 << 30), ((1 << 17) - 1)\\n    a.each_with_index do\\n        x, y = *_1.map!(&:to_f)\\n        t[k = \\n          ((((x + 1.0) / (y + 1.0) - x / y) * s).to_i << 17) |\\n          _2] = k\\n    end\\n    e.times do\\n        i = t.delete_max & m\\n        x, y = *a[i].map! { _1 + 1.0 }\\n        t[k = \\n          ((((x + 1.0) / (y + 1.0) - x / y) * s).to_i << 17) |\\n          i] = k\\n    end\\n    a.sum { _1.first / _1.last } / a.size\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3145414,
                "title": "c",
                "content": "```\\nusing AD3 = array<double, 3> ; // diff, passi, totali\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size() ;\\n        priority_queue<AD3, vector<AD3>, less<>> pq ;\\n        for(auto c : classes){\\n            double p = c[0] ;\\n            double t = c[1] ;\\n            pq.push({(p+1)/(t+1) - p/t, p, t}) ;\\n        }\\n        for(int i = 0 ; i < extraStudents; i++){\\n            auto[dr, p, t] = pq.top() ;\\n            pq.pop() ;\\n            p += 1 ;\\n            t += 1 ;\\n            pq.push({(p+1)/(t+1) - p/t, p, t}) ;\\n        }\\n        \\n        double sum  = 0 ;\\n        while(!pq.empty())\\n        {\\n            auto[dr, p, t] = pq.top() ;\\n            pq.pop() ;\\n            sum += p/t ;\\n        }\\n        \\n        return sum / n ;\\n    }\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nusing AD3 = array<double, 3> ; // diff, passi, totali\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        int n = classes.size() ;\\n        priority_queue<AD3, vector<AD3>, less<>> pq ;\\n        for(auto c : classes){\\n            double p = c[0] ;\\n            double t = c[1] ;\\n            pq.push({(p+1)/(t+1) - p/t, p, t}) ;\\n        }\\n        for(int i = 0 ; i < extraStudents; i++){\\n            auto[dr, p, t] = pq.top() ;\\n            pq.pop() ;\\n            p += 1 ;\\n            t += 1 ;\\n            pq.push({(p+1)/(t+1) - p/t, p, t}) ;\\n        }\\n        \\n        double sum  = 0 ;\\n        while(!pq.empty())\\n        {\\n            auto[dr, p, t] = pq.top() ;\\n            pq.pop() ;\\n            sum += p/t ;\\n        }\\n        \\n        return sum / n ;\\n    }\\n    \\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3129633,
                "title": "c-priority-queue-readable",
                "content": "```\\npublic class Solution {\\n    \\n    public class Course {\\n        public double studentsThatPassed; \\n        public double totalStudents; \\n        public double passRatio; \\n        \\n        public Course(int pass, int total) {\\n            studentsThatPassed = pass; \\n            totalStudents = total;\\n            CalculatePassRatio(); \\n        }\\n        \\n        public void CalculatePassRatio() {\\n            passRatio = studentsThatPassed/totalStudents;\\n        }\\n        \\n        public Double CheckUpdatedRatio() {\\n            return (studentsThatPassed+1)/(totalStudents+1); \\n        }\\n    }\\n    \\n    public class CustomComparer : IComparer<Course> {\\n        public int Compare(Course first, Course second) {\\n            var diffFirst = first.CheckUpdatedRatio() - first.passRatio; \\n            var diffSecond = second.CheckUpdatedRatio() - second.passRatio;\\n            if (diffFirst > diffSecond) {\\n                return -1; \\n            } else if (diffFirst < diffSecond) {\\n                return 1; \\n            } else {\\n                // just return the one with the lowest overall ratio if tie\\n                return first.passRatio.CompareTo(second.passRatio); \\n            }\\n        }\\n    }\\n    \\n    public double MaxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        // O(nlogn) for custom comparer, sort all courses\\n        var pq = new PriorityQueue<Course, Course>(new CustomComparer()); \\n        \\n        // O(nlogn)\\n        for (var i = 0; i < classes.Length; i++) {\\n            var course = new Course(classes[i][0], classes[i][1]); \\n            pq.Enqueue(course, course); \\n        }\\n        \\n        // O(elogn) where is is number of extra students \\n        while (extraStudents > 0) {\\n            var classWithWorstRatio = pq.Dequeue();\\n            classWithWorstRatio.studentsThatPassed++; \\n            classWithWorstRatio.totalStudents++; \\n            classWithWorstRatio.CalculatePassRatio(); \\n            extraStudents--; \\n            pq.Enqueue(classWithWorstRatio, classWithWorstRatio); \\n        }\\n        \\n        var totalPassRatioSum = 0.0;\\n        var totalCourses = 0; \\n        \\n        // O(nlogn)\\n        while (pq.Count > 0) {\\n            totalCourses += 1; \\n            totalPassRatioSum += pq.Dequeue().passRatio;\\n        }\\n        \\n        // Time Complexity ~ O(nlogn) or O(elogn)\\n        // Space Complexity is O(n) where c is number of classes, the PQ\\n        return totalPassRatioSum / totalCourses; \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    \\n    public class Course {\\n        public double studentsThatPassed; \\n        public double totalStudents; \\n        public double passRatio; \\n        \\n        public Course(int pass, int total) {\\n            studentsThatPassed = pass; \\n            totalStudents = total;\\n            CalculatePassRatio(); \\n        }\\n        \\n        public void CalculatePassRatio() {\\n            passRatio = studentsThatPassed/totalStudents;\\n        }\\n        \\n        public Double CheckUpdatedRatio() {\\n            return (studentsThatPassed+1)/(totalStudents+1); \\n        }\\n    }\\n    \\n    public class CustomComparer : IComparer<Course> {\\n        public int Compare(Course first, Course second) {\\n            var diffFirst = first.CheckUpdatedRatio() - first.passRatio; \\n            var diffSecond = second.CheckUpdatedRatio() - second.passRatio;\\n            if (diffFirst > diffSecond) {\\n                return -1; \\n            } else if (diffFirst < diffSecond) {\\n                return 1; \\n            } else {\\n                // just return the one with the lowest overall ratio if tie\\n                return first.passRatio.CompareTo(second.passRatio); \\n            }\\n        }\\n    }\\n    \\n    public double MaxAverageRatio(int[][] classes, int extraStudents) {\\n        \\n        // O(nlogn) for custom comparer, sort all courses\\n        var pq = new PriorityQueue<Course, Course>(new CustomComparer()); \\n        \\n        // O(nlogn)\\n        for (var i = 0; i < classes.Length; i++) {\\n            var course = new Course(classes[i][0], classes[i][1]); \\n            pq.Enqueue(course, course); \\n        }\\n        \\n        // O(elogn) where is is number of extra students \\n        while (extraStudents > 0) {\\n            var classWithWorstRatio = pq.Dequeue();\\n            classWithWorstRatio.studentsThatPassed++; \\n            classWithWorstRatio.totalStudents++; \\n            classWithWorstRatio.CalculatePassRatio(); \\n            extraStudents--; \\n            pq.Enqueue(classWithWorstRatio, classWithWorstRatio); \\n        }\\n        \\n        var totalPassRatioSum = 0.0;\\n        var totalCourses = 0; \\n        \\n        // O(nlogn)\\n        while (pq.Count > 0) {\\n            totalCourses += 1; \\n            totalPassRatioSum += pq.Dequeue().passRatio;\\n        }\\n        \\n        // Time Complexity ~ O(nlogn) or O(elogn)\\n        // Space Complexity is O(n) where c is number of classes, the PQ\\n        return totalPassRatioSum / totalCourses; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3111152,
                "title": "priority-queue-using-the-logic-provided-in-discussion-section",
                "content": "\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        priority_queue<pair<double,int>> pq;\\n        for(int i=0;i<classes.size();i++){\\n            double res = (double(classes[i][0]+1)/double(classes[i][1]+1) - double(classes[i][0])/double(classes[i][1]));\\n            cout<<res<<endl;\\n            pq.push({res,i});\\n        }\\n        while(k--){\\n            auto tp = pq.top();\\n            int i = tp.second;\\n            pq.pop();\\n            \\n            double res = (double(classes[i][0]+2)/double(classes[i][1]+2) - double(classes[i][0]+1)/double(classes[i][1]+1));\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            pq.push({res,i});\\n        }\\n        double ans;\\n        for(int i=0;i<classes.size();i++){\\n            ans += double(classes[i][0])/double(classes[i][1]);\\n        }\\n        return ans/double(classes.size());\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        priority_queue<pair<double,int>> pq;\\n        for(int i=0;i<classes.size();i++){\\n            double res = (double(classes[i][0]+1)/double(classes[i][1]+1) - double(classes[i][0])/double(classes[i][1]));\\n            cout<<res<<endl;\\n            pq.push({res,i});\\n        }\\n        while(k--){\\n            auto tp = pq.top();\\n            int i = tp.second;\\n            pq.pop();\\n            \\n            double res = (double(classes[i][0]+2)/double(classes[i][1]+2) - double(classes[i][0]+1)/double(classes[i][1]+1));\\n            classes[i][0]++;\\n            classes[i][1]++;\\n            pq.push({res,i});\\n        }\\n        double ans;\\n        for(int i=0;i<classes.size();i++){\\n            ans += double(classes[i][0])/double(classes[i][1]);\\n        }\\n        return ans/double(classes.size());\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3107466,
                "title": "python-min-heap-solution",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        arr = []\\n        res = 0\\n        for x,y in classes:\\n            heapq.heappush(arr,[((x+1)/(y+1) - x/y) * -1,x,y])\\n            res += (x/y)\\n            \\n        while extraStudents > 0:\\n            t,x,y = heapq.heappop(arr)\\n            t *= -1\\n            res += t\\n            heapq.heappush(arr,[((x+2)/(y+2) - (x+1)/(y+1)) * -1,x+1,y+1])\\n            extraStudents -= 1\\n        \\n        return res/len(classes)\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        arr = []\\n        res = 0\\n        for x,y in classes:\\n            heapq.heappush(arr,[((x+1)/(y+1) - x/y) * -1,x,y])\\n            res += (x/y)\\n            \\n        while extraStudents > 0:\\n            t,x,y = heapq.heappop(arr)\\n            t *= -1\\n            res += t\\n            heapq.heappush(arr,[((x+2)/(y+2) - (x+1)/(y+1)) * -1,x+1,y+1])\\n            extraStudents -= 1\\n        \\n        return res/len(classes)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3093933,
                "title": "max-heap-easy-c-solution",
                "content": "# Intuition\\nWe always are thinking of getting the number with the most increase in value when one is added in both denominator and numerator\\n\\n# Approach\\nUsing Max Heap\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nclass cmp\\n{\\n    public:\\n    bool operator()(pair<int,int> a , pair<int,int> b)\\n    {\\n        return ( (double)(a.first+1.0) / (double)(a.second +1.0))  - ( (double)a.first / (double)a.second )  < ( (double)(b.first+1.0) / (double)(b.second +1.0))  - ( (double)b.first / (double)b.second ) ;\\n    }\\n};\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>> , cmp> pq;\\n        for(auto i   : classes)\\n        {\\n            pq.push({i[0],i[1]});\\n        }\\n        while(!pq.empty() && extraStudents--)\\n        {\\n            pair<int,int> a = pq.top();\\n            pq.pop();\\n            a.first += 1;\\n            a.second += 1;\\n\\n            pq.push({a.first , a.second});\\n        }\\n\\n        double ans =   0.0;\\n        while(!pq.empty())\\n        {\\n            pair<int,int> a  = pq.top();\\n            pq.pop();\\n            ans +=  (double)a.first / (double)a.second;\\n        }\\n        ans = ans / classes.size();\\n        return ans ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nclass cmp\\n{\\n    public:\\n    bool operator()(pair<int,int> a , pair<int,int> b)\\n    {\\n        return ( (double)(a.first+1.0) / (double)(a.second +1.0))  - ( (double)a.first / (double)a.second )  < ( (double)(b.first+1.0) / (double)(b.second +1.0))  - ( (double)b.first / (double)b.second ) ;\\n    }\\n};\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>, vector<pair<int,int>> , cmp> pq;\\n        for(auto i   : classes)\\n        {\\n            pq.push({i[0],i[1]});\\n        }\\n        while(!pq.empty() && extraStudents--)\\n        {\\n            pair<int,int> a = pq.top();\\n            pq.pop();\\n            a.first += 1;\\n            a.second += 1;\\n\\n            pq.push({a.first , a.second});\\n        }\\n\\n        double ans =   0.0;\\n        while(!pq.empty())\\n        {\\n            pair<int,int> a  = pq.top();\\n            pq.pop();\\n            ans +=  (double)a.first / (double)a.second;\\n        }\\n        ans = ans / classes.size();\\n        return ans ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2950342,
                "title": "python-maxheap-for-delta-increase-o-klogn",
                "content": "# Code\\n```\\nfrom heapq import heapify, heappush, heappop\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], k: int) -> float:\\n        n = len(classes)\\n        h = [(-(p+1)/(t+1)+p/t, p, t) for p, t in classes]\\n        heapify(h)\\n        while k > 0:\\n            _, p, t = heappop(h)\\n            p += 1\\n            t += 1\\n            heappush(h, (-(p + 1)/(t+1) + p/t, p, t))\\n            k -= 1\\n        return sum([p/t for _, p, t in h])/n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom heapq import heapify, heappush, heappop\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], k: int) -> float:\\n        n = len(classes)\\n        h = [(-(p+1)/(t+1)+p/t, p, t) for p, t in classes]\\n        heapify(h)\\n        while k > 0:\\n            _, p, t = heappop(h)\\n            p += 1\\n            t += 1\\n            heappush(h, (-(p + 1)/(t+1) + p/t, p, t))\\n            k -= 1\\n        return sum([p/t for _, p, t in h])/n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2779723,
                "title": "python-max-heap",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nthe idea is to use max heap to store the difference of minus values, if the diff is higher, it means need to add extra value to it\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nmax heap\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        max_heap = []\\n        for student, total in classes:\\n            heappush(max_heap, (student / total - (student + 1) / (total + 1), student, total))\\n        for i in range(extraStudents):\\n            r, s, t = heappop(max_heap)\\n            heappush(max_heap, ((s + 1) / (t + 1) - (s + 2) / (t + 2), s + 1, t + 1))\\n        return sum(i[1] / i[2] for i in max_heap) / len(max_heap)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        max_heap = []\\n        for student, total in classes:\\n            heappush(max_heap, (student / total - (student + 1) / (total + 1), student, total))\\n        for i in range(extraStudents):\\n            r, s, t = heappop(max_heap)\\n            heappush(max_heap, ((s + 1) / (t + 1) - (s + 2) / (t + 2), s + 1, t + 1))\\n        return sum(i[1] / i[2] for i in max_heap) / len(max_heap)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2746135,
                "title": "java-greedy",
                "content": "\\tclass Solution {\\n    public class pair{\\n        double ratio; int num, den;\\n        \\n        pair(double r, int n, int d){\\n            this.ratio=r;\\n            this.num=n;\\n            this.den=d;\\n        }\\n    }\\n    public double maxAverageRatio(int[][] classes, int es) {\\n        PriorityQueue<pair>pq=new PriorityQueue<>(\\n            (a, b)->{\\n                //between two pairs, in which will there be more progress in ratio?\\n                double newratioa=(a.num+1)*1.0/(a.den+1);\\n                double newratiob=(b.num+1)*1.0/(b.den+1);\\n                double diffa=newratioa-a.ratio;\\n                double diffb=newratiob-b.ratio;\\n                \\n                if(diffa>diffb) return -1;\\n                else return 1;\\n        });\\n        \\n        for(int i[]: classes)\\n        {\\n            double ratio=i[0]*1.0/(i[1]);\\n            pair curr=new pair(ratio, i[0], i[1]);\\n            pq.add(curr);\\n        }\\n        \\n        while(es>0)\\n        {\\n            es--;\\n            pair kid=pq.remove();\\n            //System.out.println(kid.num+\" \"+kid.den);\\n            int num=kid.num+1; int den=kid.den+1;\\n            double ratio=num*1.0/den;\\n            \\n            pq.add(new pair(ratio, num, den));\\n            //System.out.println(ratio+\" \"+num+\" \"+den);\\n        }\\n        \\n        double res=0;int n=pq.size();\\n        \\n        while(pq.size()>0)\\n        {\\n            res+=pq.remove().ratio;\\n        }\\n        return res/n;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public class pair{\\n        double ratio; int num, den;\\n        \\n        pair(double r, int n, int d){\\n            this.ratio=r;\\n            this.num=n;\\n            this.den=d;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2736233,
                "title": "python-simple-solution-explained-with-comments",
                "content": "The immediate intuition we get after looking at this problem is to keep adding an extra student in class which has least pass ratio.\\nHowever, as we keep adding extra students to the same class, the rate of increase keeps inflating. To handle this, instead of adding student to class with least pass ratio, we add the student to the class which has highest change in ratio after adding the student. \\n\\nWe do this using a max heap to store the change in ratio and retrieve the class with highest change.\\n\\n```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        ratios = []\\n        heapq.heapify(ratios) # taking a priority queue\\n        final_av_sum = 0 # store final sum of averages\\n        for clas in classes:\\n            temp = clas[0] / clas[1] # current ratio\\n            rat_change = ( (clas[0]+1) / (clas[1]+1) ) - temp # calculate change in ratio if we add extra student\\n            heapq.heappush(ratios, [ (rat_change*-1), temp,clas[0],clas[1]]) # push into max heap\\n            final_av_sum += temp # update sum of averages\\n\\n        \\n        while extraStudents > 0:\\n            \\n            least = heapq.heappop(ratios) # retrieves highest increase in ratio from max heap\\n            \\n            final_av_sum -= least[1]\\n            least[1] += (least[0]*-1) # current ratio\\n            least[2] += 1 # adding extra student to passed students\\n            least[3] += 1 # adding extra student to total class size\\n            least[0] =  ( (least[2]+1) / (least[3]+1) - least[1] ) * -1 # update next increase in ratio if we add one more\\n            final_av_sum += least[1] # update sum of averages\\n            \\n            heapq.heappush(ratios,least)\\n            extraStudents -= 1\\n        return final_av_sum/len(classes) # return final average of pass ratio\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nimport heapq\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        \\n        ratios = []\\n        heapq.heapify(ratios) # taking a priority queue\\n        final_av_sum = 0 # store final sum of averages\\n        for clas in classes:\\n            temp = clas[0] / clas[1] # current ratio\\n            rat_change = ( (clas[0]+1) / (clas[1]+1) ) - temp # calculate change in ratio if we add extra student\\n            heapq.heappush(ratios, [ (rat_change*-1), temp,clas[0],clas[1]]) # push into max heap\\n            final_av_sum += temp # update sum of averages\\n\\n        \\n        while extraStudents > 0:\\n            \\n            least = heapq.heappop(ratios) # retrieves highest increase in ratio from max heap\\n            \\n            final_av_sum -= least[1]\\n            least[1] += (least[0]*-1) # current ratio\\n            least[2] += 1 # adding extra student to passed students\\n            least[3] += 1 # adding extra student to total class size\\n            least[0] =  ( (least[2]+1) / (least[3]+1) - least[1] ) * -1 # update next increase in ratio if we add one more\\n            final_av_sum += least[1] # update sum of averages\\n            \\n            heapq.heappush(ratios,least)\\n            extraStudents -= 1\\n        return final_av_sum/len(classes) # return final average of pass ratio\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2725961,
                "title": "python-greedy-solution-using-max-heap-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        profit = lambda passedStudents, totalStudents: (passedStudents + 1) / (totalStudents + 1) - passedStudents / totalStudents\\n        total, maxHeap = sum(c[0] / c[1] for c in classes), []\\n        for passedStudents, totalStudents in classes:\\n            heappush(maxHeap, [-profit(passedStudents, totalStudents), passedStudents, totalStudents])\\n        while extraStudents:\\n            addedProfit, passedStudents, totalStudents = heappop(maxHeap)\\n            total += (-addedProfit)\\n            heappush(maxHeap, [-profit(passedStudents + 1, totalStudents + 1), passedStudents + 1, totalStudents + 1])\\n            extraStudents -= 1\\n        return total / len(classes)\\n```",
                "solutionTags": [
                    "Python",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        profit = lambda passedStudents, totalStudents: (passedStudents + 1) / (totalStudents + 1) - passedStudents / totalStudents\\n        total, maxHeap = sum(c[0] / c[1] for c in classes), []\\n        for passedStudents, totalStudents in classes:\\n            heappush(maxHeap, [-profit(passedStudents, totalStudents), passedStudents, totalStudents])\\n        while extraStudents:\\n            addedProfit, passedStudents, totalStudents = heappop(maxHeap)\\n            total += (-addedProfit)\\n            heappush(maxHeap, [-profit(passedStudents + 1, totalStudents + 1), passedStudents + 1, totalStudents + 1])\\n            extraStudents -= 1\\n        return total / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2712566,
                "title": "python-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef maxAverageRatio(self, classes: List[List[int]], extra: int) -> float:\\n\\t\\t\\tarr = sorted([[(x+1)/(y+1) - x/y, x, y] for x,y in classes])\\n\\t\\t\\twhile extra:\\n\\t\\t\\t\\ttemp = arr.pop()\\n\\t\\t\\t\\ttemp[1] += 1\\n\\t\\t\\t\\ttemp[2] += 1\\n\\t\\t\\t\\tcur = temp[1]/temp[2]\\n\\t\\t\\t\\ttemp[0] = (temp[1]+1)/(temp[2]+1) - cur\\n\\t\\t\\t\\tbisect.insort(arr,temp)\\n\\t\\t\\t\\textra-=1\\n\\t\\t\\treturn sum([x[1]/x[2] for x in arr])/len(arr)",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef maxAverageRatio(self, classes: List[List[int]], extra: int) -> float:\\n\\t\\t\\tarr = sorted([[(x+1)/(y+1) - x/y, x, y] for x,y in classes])\\n\\t\\t\\twhile extra:\\n\\t\\t\\t\\ttemp = arr.pop()\\n\\t\\t\\t\\ttemp[1] += 1\\n\\t\\t\\t\\ttemp[2] += 1\\n\\t\\t\\t\\tcur = temp[1]/temp[2]\\n\\t\\t\\t\\ttemp[0] = (temp[1]+1)/(temp[2]+1) - cur\\n\\t\\t\\t\\tbisect.insort(arr,temp)\\n\\t\\t\\t\\textra-=1\\n\\t\\t\\treturn sum([x[1]/x[2] for x in arr])/len(arr)",
                "codeTag": "Java"
            },
            {
                "id": 2684185,
                "title": "faster-easy-to-understand-c-code",
                "content": "* ***Using Max Heap***\\n\\n* ***Time Complexity :- O(Extra_Students * logN)***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& arr, int extraStudents) {\\n        \\n        int n = arr.size();\\n        \\n        // declare a max heap which will store the change in pass ratio after adding student\\n        \\n        priority_queue<pair<double, int>> pq;\\n        \\n        // fill the pq\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            double change = ((double) (arr[i][0] + 1) / (arr[i][1] + 1) - (arr[i][0] / (double) arr[i][1]));\\n            \\n            pq.push({change, i});\\n        }\\n        \\n        // add the student to the class which will give the maximum change in the pass ratio\\n        \\n        while(extraStudents--)\\n        {\\n            auto top = pq.top();\\n            \\n            pq.pop();\\n            \\n            int i = top.second;\\n            \\n            // update the no. of pass students and total no. of students\\n            \\n            arr[i][0]++;\\n            \\n            arr[i][1]++;\\n            \\n            double change = ((double) (arr[i][0] + 1) / (arr[i][1] + 1) - ((arr[i][0]) / (double) (arr[i][1])));\\n            \\n            pq.push({change, i});\\n        }\\n        \\n        // find the total sum of pass ratio\\n        \\n        double sum = 0;\\n        \\n        while(pq.empty() == false)\\n        {\\n            int i = pq.top().second;\\n            \\n            sum += (double) arr[i][0] / arr[i][1];\\n            \\n            pq.pop();\\n        }\\n        \\n        // calculate the average and return it\\n        \\n        return sum / n;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& arr, int extraStudents) {\\n        \\n        int n = arr.size();\\n        \\n        // declare a max heap which will store the change in pass ratio after adding student\\n        \\n        priority_queue<pair<double, int>> pq;\\n        \\n        // fill the pq\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            double change = ((double) (arr[i][0] + 1) / (arr[i][1] + 1) - (arr[i][0] / (double) arr[i][1]));\\n            \\n            pq.push({change, i});\\n        }\\n        \\n        // add the student to the class which will give the maximum change in the pass ratio\\n        \\n        while(extraStudents--)\\n        {\\n            auto top = pq.top();\\n            \\n            pq.pop();\\n            \\n            int i = top.second;\\n            \\n            // update the no. of pass students and total no. of students\\n            \\n            arr[i][0]++;\\n            \\n            arr[i][1]++;\\n            \\n            double change = ((double) (arr[i][0] + 1) / (arr[i][1] + 1) - ((arr[i][0]) / (double) (arr[i][1])));\\n            \\n            pq.push({change, i});\\n        }\\n        \\n        // find the total sum of pass ratio\\n        \\n        double sum = 0;\\n        \\n        while(pq.empty() == false)\\n        {\\n            int i = pq.top().second;\\n            \\n            sum += (double) arr[i][0] / arr[i][1];\\n            \\n            pq.pop();\\n        }\\n        \\n        // calculate the average and return it\\n        \\n        return sum / n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2657497,
                "title": "c-clean-code",
                "content": "The idea is to increase the lowest avarage class each time.\\n```\\nstruct klass {\\n    int pass;\\n    int total;\\n    double ratio;\\n    klass() {}\\n    klass(int pass, int total) {\\n        this->pass = pass;\\n        this->total = total;\\n        update_ratio();\\n    }\\n    void update_ratio() { ratio = pass * 1.0 / total; }\\n    void increase(int by = 1) {\\n        pass += by;\\n        total += by;\\n        update_ratio();\\n    }\\n    double delta() {\\n        return (pass + 1) * 1.0 / (total + 1) - (pass)*1.0 / (total);\\n    }\\n    bool operator()(klass &a, klass &b) { return a.delta() < b.delta(); }\\n};\\n\\nclass Solution {\\n   public:\\n    double maxAverageRatio(vector<vector<int>> &classes, int extraStudents) {\\n        priority_queue<klass, vector<klass>, klass> pq;\\n        int total = classes.size();\\n        double sum = 0;\\n        klass k;\\n        for (auto i : classes) {\\n            k = klass(i[0], i[1]);\\n            pq.push(k);\\n        }\\n        while (extraStudents--) {\\n            k = pq.top();\\n            pq.pop();\\n            k.increase();\\n            pq.push(k);\\n        }\\n        while (pq.size()) {\\n            sum += pq.top().ratio;\\n            pq.pop();\\n        }\\n        return sum / total;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nstruct klass {\\n    int pass;\\n    int total;\\n    double ratio;\\n    klass() {}\\n    klass(int pass, int total) {\\n        this->pass = pass;\\n        this->total = total;\\n        update_ratio();\\n    }\\n    void update_ratio() { ratio = pass * 1.0 / total; }\\n    void increase(int by = 1) {\\n        pass += by;\\n        total += by;\\n        update_ratio();\\n    }\\n    double delta() {\\n        return (pass + 1) * 1.0 / (total + 1) - (pass)*1.0 / (total);\\n    }\\n    bool operator()(klass &a, klass &b) { return a.delta() < b.delta(); }\\n};\\n\\nclass Solution {\\n   public:\\n    double maxAverageRatio(vector<vector<int>> &classes, int extraStudents) {\\n        priority_queue<klass, vector<klass>, klass> pq;\\n        int total = classes.size();\\n        double sum = 0;\\n        klass k;\\n        for (auto i : classes) {\\n            k = klass(i[0], i[1]);\\n            pq.push(k);\\n        }\\n        while (extraStudents--) {\\n            k = pq.top();\\n            pq.pop();\\n            k.increase();\\n            pq.push(k);\\n        }\\n        while (pq.size()) {\\n            sum += pq.top().ratio;\\n            pq.pop();\\n        }\\n        return sum / total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2623015,
                "title": "java-priorityqueue-solution-typecasting",
                "content": "```\\nclass pair{\\n    double pass, total;\\n    pair(double pass, double total){\\n        this.pass = pass;\\n        this.total = total;\\n    }\\n}\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double sum = 0;\\n        PriorityQueue<pair> pq = new PriorityQueue<>((a,b) -> {\\n            double av1 = (a.pass+1)/(a.total+1) - (a.pass/a.total);\\n            double av2 = (b.pass+1)/(b.total+1) - (b.pass/b.total);\\n            if(av1 == av2){\\n                return 0;\\n            }\\n            return (av1 > av2)?-1:1;\\n        });\\n        for(int temp[] : classes){\\n            pair p = new pair(temp[0], temp[1]);\\n            pq.offer(p);\\n        }\\n        for(int i = 0;i<extraStudents;i++){\\n            double temp1 = pq.peek().pass;\\n            double temp2 = pq.poll().total;\\n            temp1 += 1;\\n            temp2 += 1;\\n            pq.offer(new pair(temp1, temp2));\\n        }\\n        while(!pq.isEmpty()){\\n            sum += pq.peek().pass/pq.poll().total;\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass pair{\\n    double pass, total;\\n    pair(double pass, double total){\\n        this.pass = pass;\\n        this.total = total;\\n    }\\n}\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double sum = 0;\\n        PriorityQueue<pair> pq = new PriorityQueue<>((a,b) -> {\\n            double av1 = (a.pass+1)/(a.total+1) - (a.pass/a.total);\\n            double av2 = (b.pass+1)/(b.total+1) - (b.pass/b.total);\\n            if(av1 == av2){\\n                return 0;\\n            }\\n            return (av1 > av2)?-1:1;\\n        });\\n        for(int temp[] : classes){\\n            pair p = new pair(temp[0], temp[1]);\\n            pq.offer(p);\\n        }\\n        for(int i = 0;i<extraStudents;i++){\\n            double temp1 = pq.peek().pass;\\n            double temp2 = pq.poll().total;\\n            temp1 += 1;\\n            temp2 += 1;\\n            pq.offer(new pair(temp1, temp2));\\n        }\\n        while(!pq.isEmpty()){\\n            sum += pq.peek().pass/pq.poll().total;\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2581413,
                "title": "python-bisect-solution",
                "content": "```\\ndef maxAverageRatio(self, classes: List[List[int]], extra: int) -> float:\\n        arr = sorted([[(x+1)/(y+1) - x/y, x, y] for x,y in classes])\\n        while extra:\\n            temp = arr.pop()\\n            temp[1] += 1\\n            temp[2] += 1\\n            cur = temp[1]/temp[2]\\n            temp[0] = (temp[1]+1)/(temp[2]+1) - cur\\n            bisect.insort(arr,temp)\\n            extra-=1\\n        return sum([x[1]/x[2] for x in arr])/len(arr)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef maxAverageRatio(self, classes: List[List[int]], extra: int) -> float:\\n        arr = sorted([[(x+1)/(y+1) - x/y, x, y] for x,y in classes])\\n        while extra:\\n            temp = arr.pop()\\n            temp[1] += 1\\n            temp[2] += 1\\n            cur = temp[1]/temp[2]\\n            temp[0] = (temp[1]+1)/(temp[2]+1) - cur\\n            bisect.insort(arr,temp)\\n            extra-=1\\n        return sum([x[1]/x[2] for x in arr])/len(arr)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2546316,
                "title": "python3-solution-using-max-heap",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap_classes = [[-1 * ( (x[0] + 1) / (x[1] + 1) - x[0] / x[1]), x[0], x[1], x[0] / x[1]] for x in classes]\\n        heapq.heapify(heap_classes)\\n        for i in range(extraStudents):\\n            class_ = heapq.heappop(heap_classes)\\n            class_[1] += 1\\n            class_[2] += 1\\n            class_[3] = class_[1] / class_[2]\\n            class_[0] = -1 * ( (class_[1] + 1) / (class_[2] + 1) - class_[1] / class_[2])\\n            heapq.heappush(heap_classes, class_)\\n        return sum([x[3] for x in heap_classes])/len(classes)\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        heap_classes = [[-1 * ( (x[0] + 1) / (x[1] + 1) - x[0] / x[1]), x[0], x[1], x[0] / x[1]] for x in classes]\\n        heapq.heapify(heap_classes)\\n        for i in range(extraStudents):\\n            class_ = heapq.heappop(heap_classes)\\n            class_[1] += 1\\n            class_[2] += 1\\n            class_[3] = class_[1] / class_[2]\\n            class_[0] = -1 * ( (class_[1] + 1) / (class_[2] + 1) - class_[1] / class_[2])\\n            heapq.heappush(heap_classes, class_)\\n        return sum([x[3] for x in heap_classes])/len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2490481,
                "title": "java-greedy",
                "content": "\\t\\n\\tclass Solution {\\n\\t\\tpublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\t\\t\\tPriorityQueue<double[]> pq = new PriorityQueue<>(new Comparator<double[]>(){\\n\\t\\t\\t\\tpublic int compare(double[] a, double[] b){\\n\\t\\t\\t\\t\\tdouble adiff = (a[0]+1)/(a[1]+1) - (a[0]/a[1]);                \\n\\t\\t\\t\\t\\tdouble bdiff = (b[0]+1)/(b[1]+1) - (b[0]/b[1]);\\n\\t\\t\\t\\t\\tif(adiff==bdiff) return 0;\\n\\t\\t\\t\\t\\treturn adiff>bdiff? -1:1;\\n\\t\\t\\t\\t}\\n\\t\\t\\t});\\n\\n\\t\\t\\tfor(int[] c:classes) pq.add(new double[]{c[0],c[1]});\\n\\n\\t\\t\\tfor(int i =0;i<extraStudents;i++){\\n\\t\\t\\t\\tdouble[] curr = pq.poll();\\n\\t\\t\\t\\tpq.add(new double[]{curr[0]+1,curr[1]+1});\\n\\t\\t\\t}\\n\\n\\t\\t\\tdouble sum = 0;\\n\\t\\t\\twhile(!pq.isEmpty()){\\n\\t\\t\\t\\tdouble[] curr = pq.poll();\\n\\t\\t\\t\\tsum+=curr[0]/curr[1];\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn sum/classes.length;\\n\\t\\t}\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\t\\tpublic double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\t\\t\\tPriorityQueue<double[]> pq = new PriorityQueue<>(new Comparator<double[]>(){\\n\\t\\t\\t\\tpublic int compare(double[] a, double[] b){\\n\\t\\t\\t\\t\\tdouble adiff = (a[0]+1)/(a[1]+1) - (a[0]/a[1]);                \\n\\t\\t\\t\\t\\tdouble bdiff = (b[0]+1)/(b[1]+1) - (b[0]/b[1]);\\n\\t\\t\\t\\t\\tif(adiff==bdiff) return 0;\\n\\t\\t\\t\\t\\treturn adiff>bdiff? -1:1;\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2458779,
                "title": "javascript-solution-faster-than-97-6-of-other-submissions",
                "content": "This is not my answer. I found it in this Github repository: https://github.com/AnasImloul/Leetcode-solutions/.\\nIt has solutions to almost every problem on Leetcode, and I recommend checking it out.\\n```\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    // the heap will automatically find the class that will benefit\\n    // the most by adding a passing student\\n    const heap = new MaxHeap();\\n    \\n    // push all the classes into the heap so that\\n    // the heap can find the class that will benefit the most\\n    for (const x of classes) {\\n        heap.push(x);\\n    }\\n    \\n    // while there are extra students\\n    while (extraStudents) {\\n        \\n        // add the extra student to the class that will benefit the most\\n        heap.peak()[0] += 1;\\n        heap.peak()[1] += 1;\\n        \\n        // heapify down so that the heap remains valid\\n        heap.heapifyDown(0);\\n        \\n        extraStudents--;\\n    }\\n    \\n    \\n    // calculate the new average of all the classes\\n    let total = 0;\\n    for (const [x , y] of heap.store) {\\n        total += (x / y);\\n    }\\n    return total / heap.store.length;\\n};\\n\\n\\nclass MaxHeap {\\n    constructor() {\\n        this.store = [];\\n    }\\n    \\n    peak() {\\n        return this.store[0];\\n    }\\n    \\n    size() {\\n        return this.store.length;\\n    }\\n    \\n    pop() {\\n        if (this.store.length < 2) {\\n            return this.store.pop();\\n        }\\n        const result = this.store[0];\\n        this.store[0] = this.store.pop();\\n        this.heapifyDown(0);\\n        return result;\\n    }\\n    \\n    push(val) {\\n        this.store.push(val);\\n        this.heapifyUp(this.store.length - 1);\\n    }\\n    \\n    heapifyUp(child) {\\n        while (child) {\\n            const parent = Math.floor((child - 1) / 2);\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                child = parent;\\n            } else {\\n                return child;\\n            }\\n        }\\n    }\\n    \\n    heapifyDown(parent) {\\n        while (true) {\\n            let [child, child2] = [1,2].map((x) => parent * 2 + x).filter((x) => x < this.size());\\n            if (this.shouldSwap(child2, child)) {\\n                child = child2\\n            }\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                parent = child;\\n            } else {\\n                return parent;\\n            }\\n        }\\n    }\\n    \\n    shouldSwap(child, parent) {\\n        if (!child) return false;\\n        const c = (this.store[child][0] + 1) / (this.store[child][1] + 1) - (this.store[child][0]) / (this.store[child][1]);\\n        const p = (this.store[parent][0] + 1) / (this.store[parent][1] + 1) - (this.store[parent][0]) / (this.store[parent][1]);\\n        return c > p;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxAverageRatio = function(classes, extraStudents) {\\n    // the heap will automatically find the class that will benefit\\n    // the most by adding a passing student\\n    const heap = new MaxHeap();\\n    \\n    // push all the classes into the heap so that\\n    // the heap can find the class that will benefit the most\\n    for (const x of classes) {\\n        heap.push(x);\\n    }\\n    \\n    // while there are extra students\\n    while (extraStudents) {\\n        \\n        // add the extra student to the class that will benefit the most\\n        heap.peak()[0] += 1;\\n        heap.peak()[1] += 1;\\n        \\n        // heapify down so that the heap remains valid\\n        heap.heapifyDown(0);\\n        \\n        extraStudents--;\\n    }\\n    \\n    \\n    // calculate the new average of all the classes\\n    let total = 0;\\n    for (const [x , y] of heap.store) {\\n        total += (x / y);\\n    }\\n    return total / heap.store.length;\\n};\\n\\n\\nclass MaxHeap {\\n    constructor() {\\n        this.store = [];\\n    }\\n    \\n    peak() {\\n        return this.store[0];\\n    }\\n    \\n    size() {\\n        return this.store.length;\\n    }\\n    \\n    pop() {\\n        if (this.store.length < 2) {\\n            return this.store.pop();\\n        }\\n        const result = this.store[0];\\n        this.store[0] = this.store.pop();\\n        this.heapifyDown(0);\\n        return result;\\n    }\\n    \\n    push(val) {\\n        this.store.push(val);\\n        this.heapifyUp(this.store.length - 1);\\n    }\\n    \\n    heapifyUp(child) {\\n        while (child) {\\n            const parent = Math.floor((child - 1) / 2);\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                child = parent;\\n            } else {\\n                return child;\\n            }\\n        }\\n    }\\n    \\n    heapifyDown(parent) {\\n        while (true) {\\n            let [child, child2] = [1,2].map((x) => parent * 2 + x).filter((x) => x < this.size());\\n            if (this.shouldSwap(child2, child)) {\\n                child = child2\\n            }\\n            if (this.shouldSwap(child, parent)) {\\n                [this.store[child], this.store[parent]] = [this.store[parent], this.store[child]]\\n                parent = child;\\n            } else {\\n                return parent;\\n            }\\n        }\\n    }\\n    \\n    shouldSwap(child, parent) {\\n        if (!child) return false;\\n        const c = (this.store[child][0] + 1) / (this.store[child][1] + 1) - (this.store[child][0]) / (this.store[child][1]);\\n        const p = (this.store[parent][0] + 1) / (this.store[parent][1] + 1) - (this.store[parent][0]) / (this.store[parent][1]);\\n        return c > p;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2348109,
                "title": "priorityqueue-java-solution-900ms",
                "content": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double res=0;\\n        \\n        Queue<Class> queue=new PriorityQueue<>((a,b)->b.diff.compareTo(a.diff));\\n       \\n        queue.addAll(IntStream\\n                    .range(0,classes.length) \\n                    .parallel()\\n                    .mapToObj(e->new Class(classes[e][0],classes[e][1]))\\n                    .collect(Collectors.toList()));\\n        \\n       \\n        while(extraStudents>0)\\n        {          \\n            //update the first which had the big new ratio\\n            Class c=queue.poll(); \\n            c.updateClass(1); \\n            queue.add(c); \\n            extraStudents--;\\n        }\\n        while(!queue.isEmpty())\\n        {\\n            Class c=queue.poll(); \\n            res+=c.ratio;\\n        }\\n            \\n        return res/Double.valueOf(classes.length);\\n    }\\n    class Class{\\n        public int students;\\n        public int pass;\\n        public Double ratio;\\n        public Double newRatio;\\n        public Double diff=0.0;\\n        public Class(int pass, int students)\\n        {\\n            this.students=students;\\n            this.pass=pass;\\n            this.ratio=Double.valueOf(this.pass)/Double.valueOf(this.students);\\n             this.calcNewRatio(1);\\n        }\\n       \\n        public void updateClass(int extStudent)\\n        {\\n            this.students+=extStudent;\\n            this.pass+=extStudent;\\n            this.ratio=Double.valueOf(this.pass)/Double.valueOf(this.students);\\n            this.calcNewRatio(extStudent);\\n        }\\n        \\n        public void calcNewRatio(int extStudent)\\n        {\\n            this.newRatio=Double.valueOf(this.pass+extStudent)/Double.valueOf(this.students+extStudent);\\n            this.diff=this.newRatio-this.ratio;\\n        }\\n    }\\n}\\n\\n \\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        double res=0;\\n        \\n        Queue<Class> queue=new PriorityQueue<>((a,b)->b.diff.compareTo(a.diff));\\n       \\n        queue.addAll(IntStream\\n                    .range(0,classes.length) \\n                    .parallel()\\n                    .mapToObj(e->new Class(classes[e][0],classes[e][1]))\\n                    .collect(Collectors.toList()));\\n        \\n       \\n        while(extraStudents>0)\\n        {          \\n            //update the first which had the big new ratio\\n            Class c=queue.poll(); \\n            c.updateClass(1); \\n            queue.add(c); \\n            extraStudents--;\\n        }\\n        while(!queue.isEmpty())\\n        {\\n            Class c=queue.poll(); \\n            res+=c.ratio;\\n        }\\n            \\n        return res/Double.valueOf(classes.length);\\n    }\\n    class Class{\\n        public int students;\\n        public int pass;\\n        public Double ratio;\\n        public Double newRatio;\\n        public Double diff=0.0;\\n        public Class(int pass, int students)\\n        {\\n            this.students=students;\\n            this.pass=pass;\\n            this.ratio=Double.valueOf(this.pass)/Double.valueOf(this.students);\\n             this.calcNewRatio(1);\\n        }\\n       \\n        public void updateClass(int extStudent)\\n        {\\n            this.students+=extStudent;\\n            this.pass+=extStudent;\\n            this.ratio=Double.valueOf(this.pass)/Double.valueOf(this.students);\\n            this.calcNewRatio(extStudent);\\n        }\\n        \\n        public void calcNewRatio(int extStudent)\\n        {\\n            this.newRatio=Double.valueOf(this.pass+extStudent)/Double.valueOf(this.students+extStudent);\\n            this.diff=this.newRatio-this.ratio;\\n        }\\n    }\\n}\\n\\n \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2313473,
                "title": "intuitive-do-as-hints-say",
                "content": "```\\nclass Solution {\\n    \\n    struct Class {\\n        int pass;\\n        int total;\\n        double ratio() const { return double(pass) / double(total); }\\n        double order() const { return double(pass + 1) / double(total + 1) - ratio(); }\\n    };\\n    \\n    struct pass_compare {\\n        bool operator()(const Class& lhs, const Class& rhs) {\\n            return lhs.order() < rhs.order();\\n        }\\n    };\\n    \\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<Class, vector<Class>, pass_compare> ratio(pass_compare{});\\n        int full = 0;\\n        for (auto& c : classes) {\\n            int p = c[0];\\n            int t = c[1];\\n            ratio.push(Class{p, t});\\n        }\\n        \\n        while (extraStudents--) {\\n            auto temp = ratio.top();\\n            ratio.pop();\\n            ratio.push(Class{temp.pass + 1, temp.total + 1});\\n        }\\n        \\n        double res = 0;\\n        while (!ratio.empty()) {\\n            res += ratio.top().ratio();\\n            ratio.pop();\\n        }\\n        return (res + full) / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\n    \\n    struct Class {\\n        int pass;\\n        int total;\\n        double ratio() const { return double(pass) / double(total); }\\n        double order() const { return double(pass + 1) / double(total + 1) - ratio(); }\\n    };\\n    \\n    struct pass_compare {\\n        bool operator()(const Class& lhs, const Class& rhs) {\\n            return lhs.order() < rhs.order();\\n        }\\n    };\\n    \\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<Class, vector<Class>, pass_compare> ratio(pass_compare{});\\n        int full = 0;\\n        for (auto& c : classes) {\\n            int p = c[0];\\n            int t = c[1];\\n            ratio.push(Class{p, t});\\n        }\\n        \\n        while (extraStudents--) {\\n            auto temp = ratio.top();\\n            ratio.pop();\\n            ratio.push(Class{temp.pass + 1, temp.total + 1});\\n        }\\n        \\n        double res = 0;\\n        while (!ratio.empty()) {\\n            res += ratio.top().ratio();\\n            ratio.pop();\\n        }\\n        return (res + full) / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2301285,
                "title": "c-priority-queue-easy-to-understand-solution",
                "content": "```\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n\\tpriority_queue<pair<double,int>> pq;\\n\\tdouble rate;\\n\\tfor(int i = 0; i < classes.size(); i++) {\\n\\t\\trate = ((double) classes[i][0]+1)/((double)classes[i][1]+1) - ((double)classes[i][0]/(double)classes[i][1]);\\n\\t\\tpq.push({rate,i});\\n\\t}\\n\\n\\tint cl;\\n\\tfor(int i = 0; i < extraStudents; i++) {\\n\\t\\tcl = pq.top().second, pq.pop();\\n\\t\\tclasses[cl][0]++, classes[cl][1]++;\\n\\t\\trate = ((double)classes[cl][0]+1)/((double)classes[cl][1]+1) - (double)classes[cl][0]/classes[cl][1];\\n\\t\\tpq.push({rate,cl});\\n\\t}\\n\\n\\trate = 0;\\n\\tfor(auto i : classes) {\\n\\t\\trate += (double)i[0]/i[1];\\n\\t}\\n\\trate/=classes.size();\\n\\treturn rate;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\ndouble maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n\\tpriority_queue<pair<double,int>> pq;\\n\\tdouble rate;\\n\\tfor(int i = 0; i < classes.size(); i++) {\\n\\t\\trate = ((double) classes[i][0]+1)/((double)classes[i][1]+1) - ((double)classes[i][0]/(double)classes[i][1]);\\n\\t\\tpq.push({rate,i});\\n\\t}\\n\\n\\tint cl;\\n\\tfor(int i = 0; i < extraStudents; i++) {\\n\\t\\tcl = pq.top().second, pq.pop();\\n\\t\\tclasses[cl][0]++, classes[cl][1]++;\\n\\t\\trate = ((double)classes[cl][0]+1)/((double)classes[cl][1]+1) - (double)classes[cl][0]/classes[cl][1];\\n\\t\\tpq.push({rate,cl});\\n\\t}\\n\\n\\trate = 0;\\n\\tfor(auto i : classes) {\\n\\t\\trate += (double)i[0]/i[1];\\n\\t}\\n\\trate/=classes.size();\\n\\treturn rate;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2282089,
                "title": "java-max-heap-easy-to-understand",
                "content": "```\\nclass Solution {\\n    class P implements Comparable<P>{\\n        double a;\\n        double b;\\n        P(){}\\n        P(double a, double b){\\n            this.a=a;\\n            this.b=b;\\n        }\\n        public int compareTo(P p){\\n            //compare only increased ratio\\n            double t1 = ((this.a+1)/(this.b+1)) - (this.a/this.b);\\n            double t2 = ((p.a+1)/(p.b+1)) -(p.a/p.b);\\n            if(t1<t2) return 1;\\n            else if(t1>t2) return -1;\\n            else\\n                return 0;\\n        }\\n    }\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        Queue<P> q = new PriorityQueue<P>();\\n        for(int i=0;i<classes.length; i++){\\n            q.add(new P(classes[i][0], classes[i][1]));\\n          \\n        }\\n        while(extraStudents-- > 0){\\n            P p = q.remove();\\n            p.a+=1;\\n            p.b+=1;\\n            q.add(p);\\n        }\\n        double sum =0.0;\\n        for( P p : q){\\n            sum+=(p.a/p.b);\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    class P implements Comparable<P>{\\n        double a;\\n        double b;\\n        P(){}\\n        P(double a, double b){\\n            this.a=a;\\n            this.b=b;\\n        }\\n        public int compareTo(P p){\\n            //compare only increased ratio\\n            double t1 = ((this.a+1)/(this.b+1)) - (this.a/this.b);\\n            double t2 = ((p.a+1)/(p.b+1)) -(p.a/p.b);\\n            if(t1<t2) return 1;\\n            else if(t1>t2) return -1;\\n            else\\n                return 0;\\n        }\\n    }\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        Queue<P> q = new PriorityQueue<P>();\\n        for(int i=0;i<classes.length; i++){\\n            q.add(new P(classes[i][0], classes[i][1]));\\n          \\n        }\\n        while(extraStudents-- > 0){\\n            P p = q.remove();\\n            p.a+=1;\\n            p.b+=1;\\n            q.add(p);\\n        }\\n        double sum =0.0;\\n        for( P p : q){\\n            sum+=(p.a/p.b);\\n        }\\n        return sum/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2273689,
                "title": "python-max-heap-solution",
                "content": "```\\ndef maxAverageRatio(self, c: List[List[int]], extra:int) -> float:\\n\\tc = [(c1/c2-(c1+1)/(c2+1), c1, c2) for c1, c2 in c]\\n\\theapify(c)\\n\\tfor _ in range(extra):\\n\\t\\t_, c1, c2 = heappop(c)\\n\\t\\theappush(c, ((c1+1)/(c2+1)-(c1+2)/(c2+2), c1+1, c2+1))\\n\\n\\treturn sum(c1/c2 for _, c1, c2 in c)/len(c)\\n```",
                "solutionTags": [],
                "code": "```\\ndef maxAverageRatio(self, c: List[List[int]], extra:int) -> float:\\n\\tc = [(c1/c2-(c1+1)/(c2+1), c1, c2) for c1, c2 in c]\\n\\theapify(c)\\n\\tfor _ in range(extra):\\n\\t\\t_, c1, c2 = heappop(c)\\n\\t\\theappush(c, ((c1+1)/(c2+1)-(c1+2)/(c2+2), c1+1, c2+1))\\n\\n\\treturn sum(c1/c2 for _, c1, c2 in c)/len(c)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2209852,
                "title": "heap-queue-solution",
                "content": "```\\nfrom heapq import *\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        computeGain = lambda p, t: (1 - (p / t)) / (t + 1)\\n        R = [(-computeGain(p, t), p, t) for p, t in classes]\\n        heapify(R)\\n\\n        for x in range(extraStudents):\\n            _, p, t = heappop(R)\\n            p += 1\\n            t += 1\\n            heappush(R, (-computeGain(p, t), p, t))\\n\\n        return sum(map(lambda x: x[1] / x[2], R)) / len(classes)\\n```",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nfrom heapq import *\\n\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        computeGain = lambda p, t: (1 - (p / t)) / (t + 1)\\n        R = [(-computeGain(p, t), p, t) for p, t in classes]\\n        heapify(R)\\n\\n        for x in range(extraStudents):\\n            _, p, t = heappop(R)\\n            p += 1\\n            t += 1\\n            heappush(R, (-computeGain(p, t), p, t))\\n\\n        return sum(map(lambda x: x[1] / x[2], R)) / len(classes)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2163451,
                "title": "c-using-priority-queue-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<float,pair<int,int>>>pq;\\n        for(auto v : classes){\\n            float p = ((float)(v[0]+1))/((float)(v[1]+1)) - ((float)v[0])/((float)v[1]);\\n            pair<int,int> a;\\n            a.first = v[0];\\n            a.second = v[1];\\n            pair <float,pair<int,int>> b;\\n            b.first = p;\\n            b.second = a;\\n            pq.push(b);\\n        }\\n        for(int i=0;i<extraStudents;i++){\\n            pair <float, pair<int,int>> a = pq.top();\\n            a.second.first++;\\n            a.second.second++;\\n            int a1 = a.second.first, a2 = a.second.second;\\n            a.first = ((float)(a1+1))/((float)(a2+1)) - ((float)a1)/((float)a2);\\n            pq.pop();\\n            pq.push(a);\\n        }\\n        double ans = 0.0,sum=0.0;\\n        while(!pq.empty()){\\n            sum+=(double)pq.top().second.first/(double)pq.top().second.second;\\n            pq.pop();\\n        }\\n        ans = sum/(double)classes.size();\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<float,pair<int,int>>>pq;\\n        for(auto v : classes){\\n            float p = ((float)(v[0]+1))/((float)(v[1]+1)) - ((float)v[0])/((float)v[1]);\\n            pair<int,int> a;\\n            a.first = v[0];\\n            a.second = v[1];\\n            pair <float,pair<int,int>> b;\\n            b.first = p;\\n            b.second = a;\\n            pq.push(b);\\n        }\\n        for(int i=0;i<extraStudents;i++){\\n            pair <float, pair<int,int>> a = pq.top();\\n            a.second.first++;\\n            a.second.second++;\\n            int a1 = a.second.first, a2 = a.second.second;\\n            a.first = ((float)(a1+1))/((float)(a2+1)) - ((float)a1)/((float)a2);\\n            pq.pop();\\n            pq.push(a);\\n        }\\n        double ans = 0.0,sum=0.0;\\n        while(!pq.empty()){\\n            sum+=(double)pq.top().second.first/(double)pq.top().second.second;\\n            pq.pop();\\n        }\\n        ans = sum/(double)classes.size();\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2092512,
                "title": "priority-queue-clean-understandable",
                "content": "public double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\t\\t \\n\\t\\t PriorityQueue<ClassRoom>  queue= new PriorityQueue<>();\\n\\t\\t for(int i =0; i< classes.length;i++) {\\n\\t\\t\\t queue.add(new ClassRoom(Double.valueOf(classes[i][0]), Double.valueOf(classes[i][1])));\\n\\t\\t }\\n\\t\\t\\n\\t\\tfor(int i =0;i<extraStudents;i++){\\n\\t\\t\\tClassRoom curr = queue.poll();\\n\\t\\t\\tqueue.add(new ClassRoom(curr.pass+1,curr.total+1));\\n        }\\n\\t\\t\\n\\t\\t double rationTotal=0;\\n\\t\\t \\n\\t\\t while(!queue.isEmpty()) {\\n\\t\\t\\t ClassRoom m =queue.poll();\\n\\t\\t\\t rationTotal+=m.ratio;\\n\\t\\t }\\n\\t\\t \\n\\t\\t return rationTotal/ classes.length;\\n\\t    }\\n\\t\\t\\n\\t\\tclass ClassRoom implements Comparable<ClassRoom>{\\n\\t\\t Double pass;\\n\\t\\t Double total;\\n\\t\\t Double ratio;\\n\\t\\t Double eratio;\\n\\t\\t Double diff;\\n\\t\\t \\n\\t\\t \\n\\t\\tpublic ClassRoom(Double pass, Double total) {\\n\\t\\t\\t\\n\\t\\t\\tthis.pass=pass;\\n\\t\\t\\tthis.total=total;\\n\\t\\t\\tthis.ratio=pass/total;\\n\\t\\t\\tthis.eratio=( pass+1) / (total+1);\\n\\t\\t\\tthis.diff= eratio-ratio;\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tpublic int compareTo(ClassRoom c) {\\n\\t\\t\\treturn Double.compare(c.eratio-c.ratio, this.eratio-this.ratio) ;\\n\\t\\t}\\n\\n\\t\\t@Override\\n\\t\\tpublic String toString() {\\n\\t\\t\\treturn \"ClassRoom [pass=\" + pass + \", total=\" + total + \", ratio=\" + ratio + \", eratio=\" + eratio\\n\\t\\t\\t\\t\\t+ \", diff=\" + diff + \"]\";\\n\\t\\t}\\n\\t\\t \\n\\t\\t \\n\\t }\\n\\t\\t",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "public double maxAverageRatio(int[][] classes, int extraStudents) {\\n\\t\\t \\n\\t\\t PriorityQueue<ClassRoom>  queue= new PriorityQueue<>();\\n\\t\\t for(int i =0; i< classes.length;i++) {\\n\\t\\t\\t queue.add(new ClassRoom(Double.valueOf(classes[i][0]), Double.valueOf(classes[i][1])));\\n\\t\\t }\\n\\t\\t\\n\\t\\tfor(int i =0;i<extraStudents;i++){\\n\\t\\t\\tClassRoom curr = queue.poll();\\n\\t\\t\\tqueue.add(new ClassRoom(curr.pass+1,curr.total+1));\\n        }\\n\\t\\t\\n\\t\\t double rationTotal=0;\\n\\t\\t \\n\\t\\t while(!queue.isEmpty()) {\\n\\t\\t\\t ClassRoom m =queue.poll();\\n\\t\\t\\t rationTotal+=m.ratio;\\n\\t\\t }\\n\\t\\t \\n\\t\\t return rationTotal/ classes.length;\\n\\t    }\\n\\t\\t\\n\\t\\tclass ClassRoom implements Comparable<ClassRoom>{\\n\\t\\t Double pass;\\n\\t\\t Double total;\\n\\t\\t Double ratio;\\n\\t\\t Double eratio;\\n\\t\\t Double diff;\\n\\t\\t \\n\\t\\t \\n\\t\\tpublic ClassRoom(Double pass, Double total) {\\n\\t\\t\\t\\n\\t\\t\\tthis.pass=pass;\\n\\t\\t\\tthis.total=total;\\n\\t\\t\\tthis.ratio=pass/total;\\n\\t\\t\\tthis.eratio=( pass+1) / (total+1);\\n\\t\\t\\tthis.diff= eratio-ratio;\\n\\t\\t\\t\\n\\t\\t\\t\\n\\t\\t}\\n\\t\\t\\n\\t\\tpublic int compareTo(ClassRoom c) {\\n\\t\\t\\treturn Double.compare(c.eratio-c.ratio, this.eratio-this.ratio) ;\\n\\t\\t}\\n\\n\\t\\t@Override\\n\\t\\tpublic String toString() {\\n\\t\\t\\treturn \"ClassRoom [pass=\" + pass + \", total=\" + total + \", ratio=\" + ratio + \", eratio=\" + eratio\\n\\t\\t\\t\\t\\t+ \", diff=\" + diff + \"]\";\\n\\t\\t}\\n\\t\\t \\n\\t\\t \\n\\t }\\n\\t\\t",
                "codeTag": "Java"
            },
            {
                "id": 2087732,
                "title": "c-heap-simple-solution-with-explanation",
                "content": "We choose the maximum addition profit in heap by maintaining a max heap and iteratively process until no more `extraStudents` we have. Note that we can earily stop if current # of pass == # of students.\\n\\n`m`: size of `classes`, `n`: `extraStudents`\\n\\n* time: `O((m+n) * logm)`\\n* space: `O(m)`\\n\\n```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        auto addProfit = [](const array<int,2> &cl) {\\n            return (double)(cl[0]+1)/(cl[1]+1)-(double)cl[0]/cl[1];\\n        };\\n        auto comp = [&addProfit](const array<int,2> &cla, const array<int,2> &clb) {\\n            return addProfit(cla) < addProfit(clb);\\n        };\\n        priority_queue<array<int,2>, vector<array<int,2>>, decltype(comp)> que(comp);\\n        for (auto &cl: classes) {\\n            que.push({cl[0],cl[1]});\\n        }\\n        while (extraStudents--) {\\n            auto now = que.top();\\n            que.pop();\\n            if (now[0] == now[1]) {\\n                break;\\n            }\\n            que.push({now[0]+1,now[1]+1});\\n        }\\n        double res = 0;\\n        while (que.size()) {\\n            auto now = que.top();\\n            que.pop();\\n            res += (double)now[0]/now[1];\\n        }\\n        return res/classes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        auto addProfit = [](const array<int,2> &cl) {\\n            return (double)(cl[0]+1)/(cl[1]+1)-(double)cl[0]/cl[1];\\n        };\\n        auto comp = [&addProfit](const array<int,2> &cla, const array<int,2> &clb) {\\n            return addProfit(cla) < addProfit(clb);\\n        };\\n        priority_queue<array<int,2>, vector<array<int,2>>, decltype(comp)> que(comp);\\n        for (auto &cl: classes) {\\n            que.push({cl[0],cl[1]});\\n        }\\n        while (extraStudents--) {\\n            auto now = que.top();\\n            que.pop();\\n            if (now[0] == now[1]) {\\n                break;\\n            }\\n            que.push({now[0]+1,now[1]+1});\\n        }\\n        double res = 0;\\n        while (que.size()) {\\n            auto now = que.top();\\n            que.pop();\\n            res += (double)now[0]/now[1];\\n        }\\n        return res/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2032384,
                "title": "think-about-the-profit-if-1-extra-student-is-assigned-to-each-class",
                "content": "```cpp\\nclass Solution {\\n    // how much the average will increase if a class of (m, n) students becomes (m + 1, n + 1) students.\\n    double inc(double m, double n)\\n    {\\n        return (n - m) / (n * (n + 1));\\n    }\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double, int>> pq;\\n        \\n        // sort by the possible increasment of average if the i class has been assigned with 1 extra student.\\n        for (int i = 0; i < classes.size(); ++i)\\n            pq.push({inc(classes[i][0], classes[i][1]), i});\\n        \\n        // start from the class with biggest increasment, assign 1 extra student at a time.\\n        // and re-calculate the possible increasment if assign another extra student. \\n        while (extraStudents --)\\n        {\\n            int i = pq.top().second;\\n            ++ classes[i][0];\\n            ++ classes[i][1];\\n            pq.pop();\\n            pq.push({inc(classes[i][0], classes[i][1]), i});\\n        }\\n        \\n        // the final result\\n        double sum = 0;\\n        \\n        while (pq.size())\\n        {\\n            int i = pq.top().second;\\n            sum += (double)classes[i][0] / classes[i][1];\\n            pq.pop();\\n        }\\n        \\n        return sum / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```cpp\\nclass Solution {\\n    // how much the average will increase if a class of (m, n) students becomes (m + 1, n + 1) students.\\n    double inc(double m, double n)\\n    {\\n        return (n - m) / (n * (n + 1));\\n    }\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<double, int>> pq;\\n        \\n        // sort by the possible increasment of average if the i class has been assigned with 1 extra student.\\n        for (int i = 0; i < classes.size(); ++i)\\n            pq.push({inc(classes[i][0], classes[i][1]), i});\\n        \\n        // start from the class with biggest increasment, assign 1 extra student at a time.\\n        // and re-calculate the possible increasment if assign another extra student. \\n        while (extraStudents --)\\n        {\\n            int i = pq.top().second;\\n            ++ classes[i][0];\\n            ++ classes[i][1];\\n            pq.pop();\\n            pq.push({inc(classes[i][0], classes[i][1]), i});\\n        }\\n        \\n        // the final result\\n        double sum = 0;\\n        \\n        while (pq.size())\\n        {\\n            int i = pq.top().second;\\n            sum += (double)classes[i][0] / classes[i][1];\\n            pq.pop();\\n        }\\n        \\n        return sum / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2013107,
                "title": "java-greedy-heap",
                "content": "Idea: Assign the brilliant students to classes where the potential increase in the passing average is highest.\\nData structure: maxHeap\\n\\n```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Course> pq=new PriorityQueue<Course>(new Comparator<Course>(){\\n            @Override\\n            public int compare(Course a, Course b){\\n                if(a.potIncrease>b.potIncrease){\\n                    return -1;\\n                }\\n                return 1;\\n            }\\n        });\\n        \\n        for(int[] cls: classes){\\n            int num=cls[0];\\n            int deno=cls[1];\\n            double currRat=(double)(num)/(double)deno;\\n            double next=(double)(num+1)/(double)(deno+1);\\n            pq.add(new Course(num, deno, next-currRat));\\n        }\\n        \\n        while(extraStudents>0){\\n            Course curr=pq.poll();\\n            curr.num+=1;\\n            curr.deno+=1;\\n            double currRat=(double)(curr.num)/(double)curr.deno;\\n            double next=(double)(curr.num+1)/(double)(curr.deno+1);\\n            curr.potIncrease=next-currRat;\\n            pq.add(curr);\\n            extraStudents--;\\n        }\\n        \\n        double ans=0;\\n        while(pq.size()>0){\\n            Course curr=pq.poll();\\n            ans+=(double)(curr.num)/(double)curr.deno;\\n        }\\n        return ans/(double)classes.length;        \\n    }\\n    \\n    \\n    class Course{\\n        int num, deno;\\n        double potIncrease;\\n        Course(int num, int deno, double potIncrease){\\n            this.num=num;\\n            this.deno=deno;\\n            this.potIncrease=potIncrease;\\n        }\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Greedy",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<Course> pq=new PriorityQueue<Course>(new Comparator<Course>(){\\n            @Override\\n            public int compare(Course a, Course b){\\n                if(a.potIncrease>b.potIncrease){\\n                    return -1;\\n                }\\n                return 1;\\n            }\\n        });\\n        \\n        for(int[] cls: classes){\\n            int num=cls[0];\\n            int deno=cls[1];\\n            double currRat=(double)(num)/(double)deno;\\n            double next=(double)(num+1)/(double)(deno+1);\\n            pq.add(new Course(num, deno, next-currRat));\\n        }\\n        \\n        while(extraStudents>0){\\n            Course curr=pq.poll();\\n            curr.num+=1;\\n            curr.deno+=1;\\n            double currRat=(double)(curr.num)/(double)curr.deno;\\n            double next=(double)(curr.num+1)/(double)(curr.deno+1);\\n            curr.potIncrease=next-currRat;\\n            pq.add(curr);\\n            extraStudents--;\\n        }\\n        \\n        double ans=0;\\n        while(pq.size()>0){\\n            Course curr=pq.poll();\\n            ans+=(double)(curr.num)/(double)curr.deno;\\n        }\\n        return ans/(double)classes.length;        \\n    }\\n    \\n    \\n    class Course{\\n        int num, deno;\\n        double potIncrease;\\n        Course(int num, int deno, double potIncrease){\\n            this.num=num;\\n            this.deno=deno;\\n            this.potIncrease=potIncrease;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2012110,
                "title": "scala",
                "content": "```\\nimport scala.collection.mutable\\n\\nobject Solution {\\n  private implicit val ClassOrdering: Ordering[Array[Int]] = Ordering.by {\\n    case Array(pass, total) => (total - pass).toDouble / total / (total + 1)\\n  }\\n\\n  def maxAverageRatio(classes: Array[Array[Int]], extraStudents: Int): Double = {\\n    val queue = classes.to(mutable.PriorityQueue)\\n\\n    for (_ <- 1 to extraStudents) queue.dequeue match {\\n      case Array(pass, total) => queue.enqueue(Array(pass + 1, total + 1))\\n    }\\n\\n    queue.iterator.collect { case Array(pass, total) => pass.toDouble / total }.sum / classes.length\\n  }\\n}\\n```",
                "solutionTags": [
                    "Scala"
                ],
                "code": "```\\nimport scala.collection.mutable\\n\\nobject Solution {\\n  private implicit val ClassOrdering: Ordering[Array[Int]] = Ordering.by {\\n    case Array(pass, total) => (total - pass).toDouble / total / (total + 1)\\n  }\\n\\n  def maxAverageRatio(classes: Array[Array[Int]], extraStudents: Int): Double = {\\n    val queue = classes.to(mutable.PriorityQueue)\\n\\n    for (_ <- 1 to extraStudents) queue.dequeue match {\\n      case Array(pass, total) => queue.enqueue(Array(pass + 1, total + 1))\\n    }\\n\\n    queue.iterator.collect { case Array(pass, total) => pass.toDouble / total }.sum / classes.length\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1995428,
                "title": "c-priority-queue",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        \\n        \\n        priority_queue< pair<double,int> >pq;\\n        double current, next, avg=0;\\n        \\n        for(int i=0;i<classes.size();i++)\\n        {\\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            next = (double)(classes[i][0]+1)/(double)(classes[i][1]+1);\\n            \\n            avg+=current;\\n            pq.push(make_pair(next-current,i));\\n           \\n        }\\n        \\n        while(extraStudents)\\n        {\\n            auto p=pq.top();\\n            \\n            int i=p.second;\\n            \\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            avg-=current;\\n            \\n            classes[i][0]++;\\n            classes[i][1]++;\\n            \\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            \\n            avg+=current;\\n            \\n            next = (double)(classes[i][0]+1)/(double)(classes[i][1]+1);\\n            \\n            pq.pop();\\n            pq.push(make_pair(next-current,i));\\n            \\n            extraStudents--;\\n        }\\n        \\n        return avg/(double)classes.size();\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        \\n        \\n        priority_queue< pair<double,int> >pq;\\n        double current, next, avg=0;\\n        \\n        for(int i=0;i<classes.size();i++)\\n        {\\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            next = (double)(classes[i][0]+1)/(double)(classes[i][1]+1);\\n            \\n            avg+=current;\\n            pq.push(make_pair(next-current,i));\\n           \\n        }\\n        \\n        while(extraStudents)\\n        {\\n            auto p=pq.top();\\n            \\n            int i=p.second;\\n            \\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            avg-=current;\\n            \\n            classes[i][0]++;\\n            classes[i][1]++;\\n            \\n            current = (double)classes[i][0]/(double)classes[i][1];\\n            \\n            avg+=current;\\n            \\n            next = (double)(classes[i][0]+1)/(double)(classes[i][1]+1);\\n            \\n            pq.pop();\\n            pq.push(make_pair(next-current,i));\\n            \\n            extraStudents--;\\n        }\\n        \\n        return avg/(double)classes.size();\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1973410,
                "title": "c-easy-to-understand-for-beginners-recursion-maxheap",
                "content": "# RECURSIVE CODE\\n\\n```\\nclass Solution {\\npublic:\\n    double helper(vector<vector<int>> &classes, int curr, int K){\\n        if(K==0){  // if k=0 achieved, rest all from curr till n are just gonna add their averages\\n            double average=0.0;\\n            for(int i=curr;i<classes.size();i++){\\n                average=average+(((double)classes[i][0])/((double)classes[i][1]));\\n            }\\n            return average;\\n        }\\n        \\n        if(curr==classes.size()){  // if k is not zero and curr reached end, return min\\n            return (double)INT_MIN;\\n        }\\n        \\n        double res=(double)INT_MIN;\\n        \\n        for(int i=0;i<=K;i++){ \\n\\t\\t/* trying all possible k, giving 0 brillant student to the current class\\n\\t\\t\\tto giving all brilliant student to this class */\\n            double tempAvg=(((double)classes[curr][0]+i)/((double)classes[curr][1]+i))+helper(classes,curr+1,K-i);\\n            res=max(res,tempAvg);\\n        }\\n        \\n        return res;\\n    }\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        return helper(classes,0,extraStudents)/classes.size();\\n    }\\n};\\n```\\n\\n# PRIORITY QUEUE GREEDY\\n\\nBasic idea, is to check which class gives the max change in average if allocated a brillant student..\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    struct cmp{\\n        bool operator()(pair<int,int> &p1, pair<int,int> &p2){\\n            double diff1=((double)(p1.first+1.0)/(double)(p1.second+1.0))-((double)(p1.first)/(double)(p1.second));\\n            double diff2=((double)(p2.first+1.0)/(double)(p2.second+1.0))-((double)(p2.first)/(double)(p2.second));\\n            return diff1<diff2; // the top of heap will contain a class where the difference is max\\n        }\\n    };\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,cmp> pq;\\n        for(auto klass: classes){\\n            pq.push({klass[0],klass[1]});\\n        }\\n        while(extraStudents--){\\n            auto tp=pq.top();\\n            pq.pop();\\n            tp.first++;\\n            tp.second++;\\n            pq.push(tp);\\n        }\\n        double res=0.0;\\n        while(!pq.empty()){\\n            auto tp=pq.top();\\n            pq.pop();\\n            res+=(((double)tp.first)/((double)tp.second));\\n        }\\n        return res/classes.size();\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "Greedy",
                    "Recursion",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    double helper(vector<vector<int>> &classes, int curr, int K){\\n        if(K==0){  // if k=0 achieved, rest all from curr till n are just gonna add their averages\\n            double average=0.0;\\n            for(int i=curr;i<classes.size();i++){\\n                average=average+(((double)classes[i][0])/((double)classes[i][1]));\\n            }\\n            return average;\\n        }\\n        \\n        if(curr==classes.size()){  // if k is not zero and curr reached end, return min\\n            return (double)INT_MIN;\\n        }\\n        \\n        double res=(double)INT_MIN;\\n        \\n        for(int i=0;i<=K;i++){ \\n\\t\\t/* trying all possible k, giving 0 brillant student to the current class\\n\\t\\t\\tto giving all brilliant student to this class */\\n            double tempAvg=(((double)classes[curr][0]+i)/((double)classes[curr][1]+i))+helper(classes,curr+1,K-i);\\n            res=max(res,tempAvg);\\n        }\\n        \\n        return res;\\n    }\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        return helper(classes,0,extraStudents)/classes.size();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    \\n    struct cmp{\\n        bool operator()(pair<int,int> &p1, pair<int,int> &p2){\\n            double diff1=((double)(p1.first+1.0)/(double)(p1.second+1.0))-((double)(p1.first)/(double)(p1.second));\\n            double diff2=((double)(p2.first+1.0)/(double)(p2.second+1.0))-((double)(p2.first)/(double)(p2.second));\\n            return diff1<diff2; // the top of heap will contain a class where the difference is max\\n        }\\n    };\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,cmp> pq;\\n        for(auto klass: classes){\\n            pq.push({klass[0],klass[1]});\\n        }\\n        while(extraStudents--){\\n            auto tp=pq.top();\\n            pq.pop();\\n            tp.first++;\\n            tp.second++;\\n            pq.push(tp);\\n        }\\n        double res=0.0;\\n        while(!pq.empty()){\\n            auto tp=pq.top();\\n            pq.pop();\\n            res+=(((double)tp.first)/((double)tp.second));\\n        }\\n        return res/classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1967539,
                "title": "java-priority-queue-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public double profit(double a,double b)\\n    {\\n        return ((a+1)/(b+1))-(a/b);\\n    }\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]>pq=new PriorityQueue<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a1,double[] a2)\\n            {\\n                return Double.compare(a2[0],a1[0]);\\n            }\\n        });\\n        for(int[] clas:classes)\\n        {\\n            double delta=profit(clas[0],clas[1]);\\n            pq.offer(new double[]{delta,clas[0],clas[1]});\\n        }\\n        while(extraStudents>=1)\\n        {\\n            double[] temp=pq.poll();\\n            double pass=temp[1]+1;\\n            double total=temp[2]+1;\\n            double delta=profit(pass,total);\\n            pq.offer(new double[]{delta,pass,total});\\n            extraStudents--;\\n        }\\n        double avg=0.0;\\n        while(!pq.isEmpty())\\n        {\\n            double[] temp=pq.poll();\\n            avg+=temp[1]/temp[2];\\n        }\\n        return avg/classes.length;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    public double profit(double a,double b)\\n    {\\n        return ((a+1)/(b+1))-(a/b);\\n    }\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        PriorityQueue<double[]>pq=new PriorityQueue<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a1,double[] a2)\\n            {\\n                return Double.compare(a2[0],a1[0]);\\n            }\\n        });\\n        for(int[] clas:classes)\\n        {\\n            double delta=profit(clas[0],clas[1]);\\n            pq.offer(new double[]{delta,clas[0],clas[1]});\\n        }\\n        while(extraStudents>=1)\\n        {\\n            double[] temp=pq.poll();\\n            double pass=temp[1]+1;\\n            double total=temp[2]+1;\\n            double delta=profit(pass,total);\\n            pq.offer(new double[]{delta,pass,total});\\n            extraStudents--;\\n        }\\n        double avg=0.0;\\n        while(!pq.isEmpty())\\n        {\\n            double[] temp=pq.poll();\\n            avg+=temp[1]/temp[2];\\n        }\\n        return avg/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1957602,
                "title": "java-priorityqueue-max-heap-detailed-explanation",
                "content": "```\\nclass Solution {\\n    \\n     /*\\n       1. Since the goal is to maximize the average pass ratio, we need to prioritize the classes that has biggest change in pass ratio when a student is added\\n       2. Change in pass ratio can be determined by  (current pass students + 1)/(current students + 1) - ((current pass students)/(current students))\\n       3. Build a priority queue with change in pass ratio and class id sorted by max pass ratio (i.e max heap)\\n       4. Allocate the extra students one at a time to each class that has biggest change in pass ratio when a student is added\\n       5. Finally calculate the average pass ratio across all the classes\\n     */\\n    \\n    static class DeltaPassRatio {\\n        double delta;\\n        int classroomid;\\n        public DeltaPassRatio(double delta, int classroomid) {\\n            this.delta = delta;\\n            this.classroomid = classroomid;\\n        }    \\n    }\\n    \\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        if(classes == null || classes.length == 0 || extraStudents < 0)\\n            return 0.0;\\n        \\n        //Build a max heap that stores [change in pass ratio, classroomid]\\n        PriorityQueue<DeltaPassRatio> maxHeap = new PriorityQueue<DeltaPassRatio>(classes.length, (DeltaPassRatio e1, DeltaPassRatio e2) -> Double.compare(e2.delta, e1.delta));\\n        for(int i = 0; i < classes.length; i++) \\n            maxHeap.add(new DeltaPassRatio(((double)(classes[i][0] + 1))/((double)(classes[i][1] + 1)) - ((double)classes[i][0])/((double)classes[i][1]), i));\\n        \\n        \\n        DeltaPassRatio current;\\n        int[] classRoom;\\n        while(extraStudents > 0) {\\n            current = maxHeap.remove();\\n            \\n            // Get the class room id and Increase pass students and total Students\\n            classRoom = classes[current.classroomid];\\n            classRoom[0] = classRoom[0] + 1;\\n            classRoom[1] = classRoom[1] + 1; \\n            \\n            //Update new score and add back to heap\\n            current.delta = ((double)(classRoom[0] + 1))/((double)(classRoom[1] + 1)) - ((double)classRoom[0])/((double)classRoom[1]);\\n            maxHeap.add(current); \\n            extraStudents--;\\n        }\\n        \\n        double totalPassRatio = 0.0;\\n        \\n        // Sum up the pass ratio of each class\\n       for (int[] classInfo : classes)\\n          totalPassRatio += ((double) classInfo[0] / classInfo[1]);\\n        \\n        \\n        return totalPassRatio/classes.length;\\n    }\\n}\\n```\\n\\nTC is O(k * nlogn) where k is extrastudents and SC is O(n) and n is number of classes",
                "solutionTags": [
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\n    \\n     /*\\n       1. Since the goal is to maximize the average pass ratio, we need to prioritize the classes that has biggest change in pass ratio when a student is added\\n       2. Change in pass ratio can be determined by  (current pass students + 1)/(current students + 1) - ((current pass students)/(current students))\\n       3. Build a priority queue with change in pass ratio and class id sorted by max pass ratio (i.e max heap)\\n       4. Allocate the extra students one at a time to each class that has biggest change in pass ratio when a student is added\\n       5. Finally calculate the average pass ratio across all the classes\\n     */\\n    \\n    static class DeltaPassRatio {\\n        double delta;\\n        int classroomid;\\n        public DeltaPassRatio(double delta, int classroomid) {\\n            this.delta = delta;\\n            this.classroomid = classroomid;\\n        }    \\n    }\\n    \\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        if(classes == null || classes.length == 0 || extraStudents < 0)\\n            return 0.0;\\n        \\n        //Build a max heap that stores [change in pass ratio, classroomid]\\n        PriorityQueue<DeltaPassRatio> maxHeap = new PriorityQueue<DeltaPassRatio>(classes.length, (DeltaPassRatio e1, DeltaPassRatio e2) -> Double.compare(e2.delta, e1.delta));\\n        for(int i = 0; i < classes.length; i++) \\n            maxHeap.add(new DeltaPassRatio(((double)(classes[i][0] + 1))/((double)(classes[i][1] + 1)) - ((double)classes[i][0])/((double)classes[i][1]), i));\\n        \\n        \\n        DeltaPassRatio current;\\n        int[] classRoom;\\n        while(extraStudents > 0) {\\n            current = maxHeap.remove();\\n            \\n            // Get the class room id and Increase pass students and total Students\\n            classRoom = classes[current.classroomid];\\n            classRoom[0] = classRoom[0] + 1;\\n            classRoom[1] = classRoom[1] + 1; \\n            \\n            //Update new score and add back to heap\\n            current.delta = ((double)(classRoom[0] + 1))/((double)(classRoom[1] + 1)) - ((double)classRoom[0])/((double)classRoom[1]);\\n            maxHeap.add(current); \\n            extraStudents--;\\n        }\\n        \\n        double totalPassRatio = 0.0;\\n        \\n        // Sum up the pass ratio of each class\\n       for (int[] classInfo : classes)\\n          totalPassRatio += ((double) classInfo[0] / classInfo[1]);\\n        \\n        \\n        return totalPassRatio/classes.length;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1947161,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        int n = classes.size();\\n        priority_queue<pair<double , pair<int ,int> >> pq;\\n        double sum = 0;\\n        \\n        for(auto & x : classes){\\n            double avg = (double)x[0]/(double)x[1];\\n            sum += avg;\\n            \\n            double next = (double)(x[0]+1)/(double)(x[1]+1);\\n            \\n            double diff = next - avg;\\n            \\n            pq.push({diff , {x[0] , x[1]}});\\n        }\\n        \\n        while(k > 0){\\n            auto x = pq.top();\\n            pq.pop();\\n            auto p = x.second;\\n            sum -= (double)p.first/p.second;\\n            p.first = p.first +1;\\n            p.second = p.second + 1;\\n            \\n            double avg = (double)p.first/(double)p.second;\\n            sum += avg;\\n            double next = (double)(p.first + 1)/(double)(p.second + 1);\\n            \\n            double diff = next - avg;\\n            \\n            pq.push({diff , p});\\n            k--;\\n        }\\n        \\n        return (double)sum/n;\\n    }\\n};\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int k) {\\n        int n = classes.size();\\n        priority_queue<pair<double , pair<int ,int> >> pq;\\n        double sum = 0;\\n        \\n        for(auto & x : classes){\\n            double avg = (double)x[0]/(double)x[1];\\n            sum += avg;\\n            \\n            double next = (double)(x[0]+1)/(double)(x[1]+1);\\n            \\n            double diff = next - avg;\\n            \\n            pq.push({diff , {x[0] , x[1]}});\\n        }\\n        \\n        while(k > 0){\\n            auto x = pq.top();\\n            pq.pop();\\n            auto p = x.second;\\n            sum -= (double)p.first/p.second;\\n            p.first = p.first +1;\\n            p.second = p.second + 1;\\n            \\n            double avg = (double)p.first/(double)p.second;\\n            sum += avg;\\n            double next = (double)(p.first + 1)/(double)(p.second + 1);\\n            \\n            double diff = next - avg;\\n            \\n            pq.push({diff , p});\\n            k--;\\n        }\\n        \\n        return (double)sum/n;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1921320,
                "title": "python-heap-solution",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:        \\n        heap = []\\n        for claz in classes:\\n            next_percentage = ((claz[0]+1)/(claz[1]+1)) - (claz[0]/claz[1]) \\n            heapq.heappush(heap, (-next_percentage, claz[0], claz[1]))\\n        \\n        while extraStudents > 0:\\n            extraStudents -= 1\\n            percentage, passing, total  = heapq.heappop(heap)\\n            passing += 1\\n            total += 1\\n            heapq.heappush(heap, (-((passing+1)/(total+1) - (passing/total)), passing, total))\\n        \\n        ans = 0\\n        for percentage, passing, total in heap:\\n            ans += (passing/total)\\n            \\n        return ans/len(classes)\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:        \\n        heap = []\\n        for claz in classes:\\n            next_percentage = ((claz[0]+1)/(claz[1]+1)) - (claz[0]/claz[1]) \\n            heapq.heappush(heap, (-next_percentage, claz[0], claz[1]))\\n        \\n        while extraStudents > 0:\\n            extraStudents -= 1\\n            percentage, passing, total  = heapq.heappop(heap)\\n            passing += 1\\n            total += 1\\n            heapq.heappush(heap, (-((passing+1)/(total+1) - (passing/total)), passing, total))\\n        \\n        ans = 0\\n        for percentage, passing, total in heap:\\n            ans += (passing/total)\\n            \\n        return ans/len(classes)\\n",
                "codeTag": "Java"
            },
            {
                "id": 1878005,
                "title": "c-heaps",
                "content": "```\\n struct myComp {\\n    constexpr bool operator()(\\n        pair<int, int> const& a,\\n        pair<int, int> const& b)\\n        const noexcept\\n    {\\n        double p = (double)(double((a.first + 1)/(double(a.second +1))));\\n        double q = (double)(double((a.first)/(double(a.second))));\\n        double r = (double)(double((b.first + 1)/(double(b.second +1))));\\n        double s = (double)(double((b.first)/(double(b.second))));\\n        double x = (double)(p-q);\\n        double y  = (double)(r-s);\\n        return x<y;\\n    }\\n};\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,myComp>pq;\\n        for(auto e:c){\\n            pq.push({e[0],e[1]});\\n        }\\n        while(e>0){\\n            auto x = pq.top();\\n            pq.pop();\\n            x.first+=1;\\n            x.second+=1;\\n            pq.push(x);\\n            e--;\\n        }\\n        double ans = 0;\\n        while(pq.empty() == false){\\n            ans += (double)(double(pq.top().first)) / (double(pq.top().second));\\n            pq.pop();\\n        }\\n        ans = (double)(ans/c.size());\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n struct myComp {\\n    constexpr bool operator()(\\n        pair<int, int> const& a,\\n        pair<int, int> const& b)\\n        const noexcept\\n    {\\n        double p = (double)(double((a.first + 1)/(double(a.second +1))));\\n        double q = (double)(double((a.first)/(double(a.second))));\\n        double r = (double)(double((b.first + 1)/(double(b.second +1))));\\n        double s = (double)(double((b.first)/(double(b.second))));\\n        double x = (double)(p-q);\\n        double y  = (double)(r-s);\\n        return x<y;\\n    }\\n};\\n    double maxAverageRatio(vector<vector<int>>& c, int e) {\\n        priority_queue<pair<int,int>,vector<pair<int,int>>,myComp>pq;\\n        for(auto e:c){\\n            pq.push({e[0],e[1]});\\n        }\\n        while(e>0){\\n            auto x = pq.top();\\n            pq.pop();\\n            x.first+=1;\\n            x.second+=1;\\n            pq.push(x);\\n            e--;\\n        }\\n        double ans = 0;\\n        while(pq.empty() == false){\\n            ans += (double)(double(pq.top().first)) / (double(pq.top().second));\\n            pq.pop();\\n        }\\n        ans = (double)(ans/c.size());\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1871761,
                "title": "c-max-heap",
                "content": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double ratio = 0;\\n        using Ratio = pair<unsigned int, unsigned int>;\\n        auto cmp = [&](const Ratio& a, const Ratio& b) {\\n            return (a.first + 1.0) / (a.second + 1.0) - (double)a.first / a.second < (b.first + 1.0) / (b.second + 1.0) - (double)b.first / b.second;\\n        };\\n        \\n        priority_queue<Ratio, vector<Ratio>, decltype(cmp)> pq(cmp);\\n        \\n        for (int i = 0; i <classes.size(); ++i) {\\n            if (classes[i][0] == classes[i][1]) {\\n                ratio += 1;\\n            } else {\\n                pq.push({classes[i][0], classes[i][1]});\\n            }\\n        }\\n        \\n        if (pq.empty()) {\\n            return 1;\\n        }\\n        \\n        while (extraStudents--) {\\n            Ratio p = pq.top();\\n            pq.pop();\\n            pq.push({p.first + 1, p.second + 1});\\n        }\\n        \\n        while (!pq.empty()) {\\n            ratio += pq.top().first / (double)pq.top().second;\\n            pq.pop();\\n        }\\n        \\n        return ratio / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double ratio = 0;\\n        using Ratio = pair<unsigned int, unsigned int>;\\n        auto cmp = [&](const Ratio& a, const Ratio& b) {\\n            return (a.first + 1.0) / (a.second + 1.0) - (double)a.first / a.second < (b.first + 1.0) / (b.second + 1.0) - (double)b.first / b.second;\\n        };\\n        \\n        priority_queue<Ratio, vector<Ratio>, decltype(cmp)> pq(cmp);\\n        \\n        for (int i = 0; i <classes.size(); ++i) {\\n            if (classes[i][0] == classes[i][1]) {\\n                ratio += 1;\\n            } else {\\n                pq.push({classes[i][0], classes[i][1]});\\n            }\\n        }\\n        \\n        if (pq.empty()) {\\n            return 1;\\n        }\\n        \\n        while (extraStudents--) {\\n            Ratio p = pq.top();\\n            pq.pop();\\n            pq.push({p.first + 1, p.second + 1});\\n        }\\n        \\n        while (!pq.empty()) {\\n            ratio += pq.top().first / (double)pq.top().second;\\n            pq.pop();\\n        }\\n        \\n        return ratio / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1861175,
                "title": "c-max-heap-with-custom-compare",
                "content": "```\\nclass Solution {\\nprivate:\\n    typedef pair<int, int> Class; // {pass : total student}\\n    \\n    struct CmpClass {\\n    public:\\n        bool operator() (Class &c1, Class &c2) {\\n            return (double)(c1.first + 1) / (double)(c1.second + 1) - (double)c1.first / (double)c1.second <\\n                   (double)(c2.first + 1) / (double)(c2.second + 1) - (double)c2.first / (double)c2.second;\\n        }\\n    };\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double totalAvgSum = 0;\\n        priority_queue<Class, vector<Class>, CmpClass> priQ;\\n        \\n        for (vector<int> &eachC : classes) {\\n            if (eachC[0] == eachC[1]) {\\n               totalAvgSum += (double)1;\\n                continue;\\n            }\\n            priQ.emplace(eachC[0], eachC[1]);\\n        }\\n        \\n        while (!priQ.empty() && extraStudents-- > 0) {\\n            int nextPass = priQ.top().first + 1;\\n            int nextTotal = priQ.top().second + 1;\\n            priQ.pop();\\n            priQ.emplace(nextPass, nextTotal);\\n        }\\n        \\n        while (!priQ.empty()) {\\n            totalAvgSum += (double)priQ.top().first / (double)priQ.top().second;\\n            priQ.pop();\\n        }\\n        \\n        return totalAvgSum / classes.size();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    typedef pair<int, int> Class; // {pass : total student}\\n    \\n    struct CmpClass {\\n    public:\\n        bool operator() (Class &c1, Class &c2) {\\n            return (double)(c1.first + 1) / (double)(c1.second + 1) - (double)c1.first / (double)c1.second <\\n                   (double)(c2.first + 1) / (double)(c2.second + 1) - (double)c2.first / (double)c2.second;\\n        }\\n    };\\npublic:\\n    double maxAverageRatio(vector<vector<int>>& classes, int extraStudents) {\\n        double totalAvgSum = 0;\\n        priority_queue<Class, vector<Class>, CmpClass> priQ;\\n        \\n        for (vector<int> &eachC : classes) {\\n            if (eachC[0] == eachC[1]) {\\n               totalAvgSum += (double)1;\\n                continue;\\n            }\\n            priQ.emplace(eachC[0], eachC[1]);\\n        }\\n        \\n        while (!priQ.empty() && extraStudents-- > 0) {\\n            int nextPass = priQ.top().first + 1;\\n            int nextTotal = priQ.top().second + 1;\\n            priQ.pop();\\n            priQ.emplace(nextPass, nextTotal);\\n        }\\n        \\n        while (!priQ.empty()) {\\n            totalAvgSum += (double)priQ.top().first / (double)priQ.top().second;\\n            priQ.pop();\\n        }\\n        \\n        return totalAvgSum / classes.size();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1833603,
                "title": "python3-greedy-max-heap-o-mlogn",
                "content": "* the greedy choice is to choose the classes in order of the biggest ratio that would be added if the class is chosen\\n* the added ratio is: (x+1)/(y+1)-x/y\\n* since we want to pick the biggest at all times for our max heap we use the value -((x+1)/(y+1)-x/y) = x/y-(x+1)/(y+1) \\n```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        cur=sum(x/y for x,y in classes)/len(classes)\\n        h=[(x/y-(x+1)/(y+1),x,y) for x,y in classes]\\n        heapq.heapify(h)\\n        for _ in range(extraStudents):\\n            diff,x,y=heapq.heappop(h)\\n            cur+=-diff/len(classes)\\n            val=(x+1)/(y+1)-(x+2)/(y+2)\\n            heapq.heappush(h,(val,x+1,y+1))\\n        return cur\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        cur=sum(x/y for x,y in classes)/len(classes)\\n        h=[(x/y-(x+1)/(y+1),x,y) for x,y in classes]\\n        heapq.heapify(h)\\n        for _ in range(extraStudents):\\n            diff,x,y=heapq.heappop(h)\\n            cur+=-diff/len(classes)\\n            val=(x+1)/(y+1)-(x+2)/(y+2)\\n            heapq.heappush(h,(val,x+1,y+1))\\n        return cur\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1832359,
                "title": "typescript-idiomatic-greedy-priorityqueue-solution",
                "content": "```typescript\\nfunction maxAverageRatio(classes: number[][], extraStudents: number): number {\\n  const pq = new MaxPriorityQueue({\\n    priority ([p, t]) {\\n      const gain = (p+1) / (t+1) - p/t;\\n      return Math.round(gain * 10**7);\\n    }\\n  });\\n  \\n  for (let [p, t] of classes) {\\n    pq.enqueue([p, t]);\\n  }\\n  \\n  while(extraStudents--) {\\n    let {element: [p, t]} = pq.dequeue();\\n    pq.enqueue([p+1, t+1]);\\n    \\n  }\\n  const updatedClasses = pq.toArray();\\n  const sumRatio = updatedClasses.reduce((acc, {element: [p, t]}) => acc + p/t, 0);\\n  return sumRatio / updatedClasses.length;\\n};\\n```",
                "solutionTags": [
                    "TypeScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```typescript\\nfunction maxAverageRatio(classes: number[][], extraStudents: number): number {\\n  const pq = new MaxPriorityQueue({\\n    priority ([p, t]) {\\n      const gain = (p+1) / (t+1) - p/t;\\n      return Math.round(gain * 10**7);\\n    }\\n  });\\n  \\n  for (let [p, t] of classes) {\\n    pq.enqueue([p, t]);\\n  }\\n  \\n  while(extraStudents--) {\\n    let {element: [p, t]} = pq.dequeue();\\n    pq.enqueue([p+1, t+1]);\\n    \\n  }\\n  const updatedClasses = pq.toArray();\\n  const sumRatio = updatedClasses.reduce((acc, {element: [p, t]}) => acc + p/t, 0);\\n  return sumRatio / updatedClasses.length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1820948,
                "title": "javascript-solution-using-heap",
                "content": "```\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nvar maxAverageRatio = function(classes, extraStudents) {\\n//Creating heap class in javascript\\n    class Heap{\\n        constructor(type){\\n            this.type = type;\\n            this.data = [];\\n            this.data[0] = undefined;\\n        }\\n        print(){\\n            for(let i=1;i<this.data.length;i++){\\n                console.log(this.data[i])\\n            }\\n        }\\n        getSize(){\\n            return this.data.length-1;\\n        }\\n        insert(value){\\n            this.data.push(value);\\n            if(this.data.length==2){\\n                return ;\\n            }\\n            let lastIndex = this.data.length-1;\\n            while(this.data[Math.floor(lastIndex/2)]!==undefined && this.compare(this.data[lastIndex],this.data[Math.floor(lastIndex/2)])>0){\\n                let temp = this.data[Math.floor(lastIndex/2)];\\n                this.data[Math.floor(lastIndex/2)] = this.data[lastIndex];\\n                this.data[lastIndex] = temp;\\n                lastIndex = Math.floor(lastIndex/2);\\n            }\\n        }\\n        //This returns a positive number if a is greater than b. Here meaing of being greater depends on the type of heap. For max heap it will return positive number if a>b and for min heap it will return positive number if a<b . \\n        compare(a,b){\\n            let aDiff,bDiff;\\n            aDiff = ((a[0]+1)/(a[1]+1))-(a[0]/a[1]);\\n            bDiff = ((b[0]+1)/(b[1]+1))-(b[0]/b[1]);\\n            if(this.type===\"min\"){\\n                return bDiff-aDiff;\\n            }else{\\n                return aDiff -bDiff;\\n            }\\n        }\\n        removeTop(){\\n            let max = this.data[1];\\n            if(this.getSize()>1){\\n                this.data[1] = this.data.pop();\\n                this.heapify(1);\\n            }else{//If the size is 0 then just remove the element, no shifting and hipify will be applicable\\n                this.data.pop();\\n            }\\n            return max;\\n        }\\n        getTop(){\\n            let max = null;\\n            if(this.getSize()>=1){\\n                max = this.data[1];\\n            }\\n            return max;\\n        }\\n        heapify(pos){\\n            if(pos*2>this.data.length-1){\\n                //That means element at index \\'pos\\' is not having any child\\n                return;\\n            }\\n            if(\\n                (this.data[pos*2]!==undefined && this.compare(this.data[pos*2],this.data[pos])>0)\\n              || (this.data[pos*2+1]!==undefined && this.compare(this.data[pos*2+1],this.data[pos])>0)\\n              ){\\n                if(this.data[pos*2+1]===undefined || this.compare(this.data[pos*2+1],this.data[pos*2])<=0){\\n                    let temp = this.data[pos*2];\\n                    this.data[pos*2] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2);\\n                }else{\\n                    let temp = this.data[pos*2+1];\\n                    this.data[pos*2+1] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2+1);\\n                }\\n            }\\n        }\\n    }\\n    let ratioSum=0,minHeap=new Heap(\\'max\\');\\n    for(let i=0;i<classes.length;i++){\\n        ratioSum += classes[i][0]/classes[i][1];\\n        minHeap.insert(classes[i]);\\n    }\\n    while(extraStudents>0){\\n        let min =   minHeap.removeTop();\\n        ratioSum -= min[0]/min[1];\\n        min[0]++;\\n        min[1]++;\\n        ratioSum += min[0]/min[1];\\n        minHeap.insert(min);\\n        extraStudents--;\\n    }\\n    return ratioSum/classes.length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\n/**\\n * @param {number[][]} classes\\n * @param {number} extraStudents\\n * @return {number}\\n */\\nvar maxAverageRatio = function(classes, extraStudents) {\\n//Creating heap class in javascript\\n    class Heap{\\n        constructor(type){\\n            this.type = type;\\n            this.data = [];\\n            this.data[0] = undefined;\\n        }\\n        print(){\\n            for(let i=1;i<this.data.length;i++){\\n                console.log(this.data[i])\\n            }\\n        }\\n        getSize(){\\n            return this.data.length-1;\\n        }\\n        insert(value){\\n            this.data.push(value);\\n            if(this.data.length==2){\\n                return ;\\n            }\\n            let lastIndex = this.data.length-1;\\n            while(this.data[Math.floor(lastIndex/2)]!==undefined && this.compare(this.data[lastIndex],this.data[Math.floor(lastIndex/2)])>0){\\n                let temp = this.data[Math.floor(lastIndex/2)];\\n                this.data[Math.floor(lastIndex/2)] = this.data[lastIndex];\\n                this.data[lastIndex] = temp;\\n                lastIndex = Math.floor(lastIndex/2);\\n            }\\n        }\\n        //This returns a positive number if a is greater than b. Here meaing of being greater depends on the type of heap. For max heap it will return positive number if a>b and for min heap it will return positive number if a<b . \\n        compare(a,b){\\n            let aDiff,bDiff;\\n            aDiff = ((a[0]+1)/(a[1]+1))-(a[0]/a[1]);\\n            bDiff = ((b[0]+1)/(b[1]+1))-(b[0]/b[1]);\\n            if(this.type===\"min\"){\\n                return bDiff-aDiff;\\n            }else{\\n                return aDiff -bDiff;\\n            }\\n        }\\n        removeTop(){\\n            let max = this.data[1];\\n            if(this.getSize()>1){\\n                this.data[1] = this.data.pop();\\n                this.heapify(1);\\n            }else{//If the size is 0 then just remove the element, no shifting and hipify will be applicable\\n                this.data.pop();\\n            }\\n            return max;\\n        }\\n        getTop(){\\n            let max = null;\\n            if(this.getSize()>=1){\\n                max = this.data[1];\\n            }\\n            return max;\\n        }\\n        heapify(pos){\\n            if(pos*2>this.data.length-1){\\n                //That means element at index \\'pos\\' is not having any child\\n                return;\\n            }\\n            if(\\n                (this.data[pos*2]!==undefined && this.compare(this.data[pos*2],this.data[pos])>0)\\n              || (this.data[pos*2+1]!==undefined && this.compare(this.data[pos*2+1],this.data[pos])>0)\\n              ){\\n                if(this.data[pos*2+1]===undefined || this.compare(this.data[pos*2+1],this.data[pos*2])<=0){\\n                    let temp = this.data[pos*2];\\n                    this.data[pos*2] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2);\\n                }else{\\n                    let temp = this.data[pos*2+1];\\n                    this.data[pos*2+1] = this.data[pos];\\n                    this.data[pos] = temp;\\n                    this.heapify(pos*2+1);\\n                }\\n            }\\n        }\\n    }\\n    let ratioSum=0,minHeap=new Heap(\\'max\\');\\n    for(let i=0;i<classes.length;i++){\\n        ratioSum += classes[i][0]/classes[i][1];\\n        minHeap.insert(classes[i]);\\n    }\\n    while(extraStudents>0){\\n        let min =   minHeap.removeTop();\\n        ratioSum -= min[0]/min[1];\\n        min[0]++;\\n        min[1]++;\\n        ratioSum += min[0]/min[1];\\n        minHeap.insert(min);\\n        extraStudents--;\\n    }\\n    return ratioSum/classes.length;\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1788093,
                "title": "python-priority-queue",
                "content": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq=[]\\n        for pss,tot in classes:\\n            newratio=(pss+1)/(tot+1)\\n            currratio=pss/tot\\n            pq.append((-(newratio-currratio),pss,tot))\\n        heapq.heapify(pq)\\n        ans=0\\n        while extraStudents>0:\\n            _,pss,tot=heapq.heappop(pq)\\n            pss+=1\\n            tot+=1\\n            extraStudents-=1\\n            currratio=pss/tot\\n            newratio=(pss+1)/(tot+1)\\n            heapq.heappush(pq,(-(newratio-currratio),pss,tot))\\n        for _,p,q in pq:\\n            ans+=p/q\\n        return ans/len(pq)\\n```",
                "solutionTags": [
                    "Python3",
                    "Heap (Priority Queue)"
                ],
                "code": "```\\nclass Solution:\\n    def maxAverageRatio(self, classes: List[List[int]], extraStudents: int) -> float:\\n        pq=[]\\n        for pss,tot in classes:\\n            newratio=(pss+1)/(tot+1)\\n            currratio=pss/tot\\n            pq.append((-(newratio-currratio),pss,tot))\\n        heapq.heapify(pq)\\n        ans=0\\n        while extraStudents>0:\\n            _,pss,tot=heapq.heappop(pq)\\n            pss+=1\\n            tot+=1\\n            extraStudents-=1\\n            currratio=pss/tot\\n            newratio=(pss+1)/(tot+1)\\n            heapq.heappush(pq,(-(newratio-currratio),pss,tot))\\n        for _,p,q in pq:\\n            ans+=p/q\\n        return ans/len(pq)\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1575030,
                "content": [
                    {
                        "username": "Schlepp",
                        "content": "There\\'s no reason that an optimal m log n solution TLE\\'s because we use vectors instead of pairs.  This question is way too stingy on runtime."
                    },
                    {
                        "username": "makeller1",
                        "content": "Especially since you can create the heap in O(n) using vectors as opposed to pushing one pair at a time."
                    },
                    {
                        "username": "aj__24",
                        "content": "The main idea will be to increment that class which will give max profit.\\neg: 2/4, 1/2\\n\\nyou may think we need to increment the one with max diff(b-a if it was a/b) but actually it\\'s not that simple.\\nistead one way to check which gives max increment is calculating (a/b - (a+1)/(b+1)) and the one which has max  (a/b - (a+1)/(b+1)) is need tobe incremented. \\nSo main idea will be to take one passed student(out of k) and assign it to any of the classes and after assigning it, we need to update that class. \\nWe repeat the process till k == 0;\\n\\nSo we\\'ll create a max heap that will store (a/b - (a+1)/(b+1)) for every a, b in classes, and for every k we will find the max value from heap and will update that classes value to a+1/b+1 and insert it to that heap.\\n\\nI\\'ve given a breif explanation, now you can easily code it by yourseleves"
                    },
                    {
                        "username": "Lokeshpandey333",
                        "content": "if anyone can assist me in debugging this code.\ni have used heap concept\n\n\n\n\n\n\nclass Solution {\npublic:\ntypedef vector<float>pi;\n    double maxAverageRatio(vector<vector<pi>>& classes, int extraStudents) {\n        priority_queue<pi,vector<pi>,greater<pi>>minh;\n\n            for (auto it : classes) {\n                double avg = (it[0][0] / it[0][1]); // Access the elements correctly\n                minh.push({avg, it[0][0], it[0][1]}); // Push the values into the priority queue\n        }\n        while(extraStudents!=0){\n            auto it=minh.top();\n            minh.pop();\n            it[1]=it[1]+1;\n            it[2]=it[2]+1;\n            it[0]=it[1]/it[2];\n            minh.push(it);\n\n            extraStudents--;\n        }\n        double ans=0;\n        while(!minh.empty()){\n            auto it=minh.top();\n            minh.pop();\n            ans=ans+it[0];\n        }\n        return ans;\n    }\n}; "
                    },
                    {
                        "username": "jasbir",
                        "content": "Can anyone please help why this is not getting accepted with TreeSet?\\n\\nIt is being accepted when using priorityQueue using same logic. Its very frustrating. Please suggest why it is so?\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        TreeSet<double[]> set = new TreeSet<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                 if(a[0] - b[0] > 0) return -1;\\n                 else if(a[0]-b[0] < 0)  return 1;\\n                 return 0;\\n             }\\n         });\\n         for(int[] c : classes){\\n             double a = c[0], b = c[1];\\n             set.add(new double[]{profit(a,b),a,b});\\n         }\\n        \\n         while(extraStudents-- > 0){\\n             double[] arr = set.pollFirst();\\n             double a = arr[1];\\n             double b = arr[2];\\n             set.add(new double[]{profit(a+1,b+1),a+1,b+1});\\n         }\\n         double ans = 0.0d;\\n         while(!set.isEmpty()){\\n             double[] arr = set.pollFirst();\\n             double a=arr[1],b=arr[2];\\n             ans += a/b;\\n         }\\n        \\n         return (double)(ans/classes.length);\\n   \\n\\n    }\\n    public double profit(double a, double b){\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}"
                    },
                    {
                        "username": "saswatajiko",
                        "content": "How come an optimal solution TLE's cause it's in python? I am using a wrapper class with total_ordering and heapq to ensure the __lt__ and __eq__ function checks the increase in pass percentage being greater than (not less than, as heapq implements min heap) and equal to."
                    },
                    {
                        "username": "aditya_42",
                        "content": "I just submitted an heap solution and it passed on first go, there must be some error with your program, that isn\\'t a smart way to implement a maxHeap in python"
                    }
                ]
            },
            {
                "id": 1575515,
                "content": [
                    {
                        "username": "Schlepp",
                        "content": "There\\'s no reason that an optimal m log n solution TLE\\'s because we use vectors instead of pairs.  This question is way too stingy on runtime."
                    },
                    {
                        "username": "makeller1",
                        "content": "Especially since you can create the heap in O(n) using vectors as opposed to pushing one pair at a time."
                    },
                    {
                        "username": "aj__24",
                        "content": "The main idea will be to increment that class which will give max profit.\\neg: 2/4, 1/2\\n\\nyou may think we need to increment the one with max diff(b-a if it was a/b) but actually it\\'s not that simple.\\nistead one way to check which gives max increment is calculating (a/b - (a+1)/(b+1)) and the one which has max  (a/b - (a+1)/(b+1)) is need tobe incremented. \\nSo main idea will be to take one passed student(out of k) and assign it to any of the classes and after assigning it, we need to update that class. \\nWe repeat the process till k == 0;\\n\\nSo we\\'ll create a max heap that will store (a/b - (a+1)/(b+1)) for every a, b in classes, and for every k we will find the max value from heap and will update that classes value to a+1/b+1 and insert it to that heap.\\n\\nI\\'ve given a breif explanation, now you can easily code it by yourseleves"
                    },
                    {
                        "username": "Lokeshpandey333",
                        "content": "if anyone can assist me in debugging this code.\ni have used heap concept\n\n\n\n\n\n\nclass Solution {\npublic:\ntypedef vector<float>pi;\n    double maxAverageRatio(vector<vector<pi>>& classes, int extraStudents) {\n        priority_queue<pi,vector<pi>,greater<pi>>minh;\n\n            for (auto it : classes) {\n                double avg = (it[0][0] / it[0][1]); // Access the elements correctly\n                minh.push({avg, it[0][0], it[0][1]}); // Push the values into the priority queue\n        }\n        while(extraStudents!=0){\n            auto it=minh.top();\n            minh.pop();\n            it[1]=it[1]+1;\n            it[2]=it[2]+1;\n            it[0]=it[1]/it[2];\n            minh.push(it);\n\n            extraStudents--;\n        }\n        double ans=0;\n        while(!minh.empty()){\n            auto it=minh.top();\n            minh.pop();\n            ans=ans+it[0];\n        }\n        return ans;\n    }\n}; "
                    },
                    {
                        "username": "jasbir",
                        "content": "Can anyone please help why this is not getting accepted with TreeSet?\\n\\nIt is being accepted when using priorityQueue using same logic. Its very frustrating. Please suggest why it is so?\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        TreeSet<double[]> set = new TreeSet<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                 if(a[0] - b[0] > 0) return -1;\\n                 else if(a[0]-b[0] < 0)  return 1;\\n                 return 0;\\n             }\\n         });\\n         for(int[] c : classes){\\n             double a = c[0], b = c[1];\\n             set.add(new double[]{profit(a,b),a,b});\\n         }\\n        \\n         while(extraStudents-- > 0){\\n             double[] arr = set.pollFirst();\\n             double a = arr[1];\\n             double b = arr[2];\\n             set.add(new double[]{profit(a+1,b+1),a+1,b+1});\\n         }\\n         double ans = 0.0d;\\n         while(!set.isEmpty()){\\n             double[] arr = set.pollFirst();\\n             double a=arr[1],b=arr[2];\\n             ans += a/b;\\n         }\\n        \\n         return (double)(ans/classes.length);\\n   \\n\\n    }\\n    public double profit(double a, double b){\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}"
                    },
                    {
                        "username": "saswatajiko",
                        "content": "How come an optimal solution TLE's cause it's in python? I am using a wrapper class with total_ordering and heapq to ensure the __lt__ and __eq__ function checks the increase in pass percentage being greater than (not less than, as heapq implements min heap) and equal to."
                    },
                    {
                        "username": "aditya_42",
                        "content": "I just submitted an heap solution and it passed on first go, there must be some error with your program, that isn\\'t a smart way to implement a maxHeap in python"
                    }
                ]
            },
            {
                "id": 2034497,
                "content": [
                    {
                        "username": "Schlepp",
                        "content": "There\\'s no reason that an optimal m log n solution TLE\\'s because we use vectors instead of pairs.  This question is way too stingy on runtime."
                    },
                    {
                        "username": "makeller1",
                        "content": "Especially since you can create the heap in O(n) using vectors as opposed to pushing one pair at a time."
                    },
                    {
                        "username": "aj__24",
                        "content": "The main idea will be to increment that class which will give max profit.\\neg: 2/4, 1/2\\n\\nyou may think we need to increment the one with max diff(b-a if it was a/b) but actually it\\'s not that simple.\\nistead one way to check which gives max increment is calculating (a/b - (a+1)/(b+1)) and the one which has max  (a/b - (a+1)/(b+1)) is need tobe incremented. \\nSo main idea will be to take one passed student(out of k) and assign it to any of the classes and after assigning it, we need to update that class. \\nWe repeat the process till k == 0;\\n\\nSo we\\'ll create a max heap that will store (a/b - (a+1)/(b+1)) for every a, b in classes, and for every k we will find the max value from heap and will update that classes value to a+1/b+1 and insert it to that heap.\\n\\nI\\'ve given a breif explanation, now you can easily code it by yourseleves"
                    },
                    {
                        "username": "Lokeshpandey333",
                        "content": "if anyone can assist me in debugging this code.\ni have used heap concept\n\n\n\n\n\n\nclass Solution {\npublic:\ntypedef vector<float>pi;\n    double maxAverageRatio(vector<vector<pi>>& classes, int extraStudents) {\n        priority_queue<pi,vector<pi>,greater<pi>>minh;\n\n            for (auto it : classes) {\n                double avg = (it[0][0] / it[0][1]); // Access the elements correctly\n                minh.push({avg, it[0][0], it[0][1]}); // Push the values into the priority queue\n        }\n        while(extraStudents!=0){\n            auto it=minh.top();\n            minh.pop();\n            it[1]=it[1]+1;\n            it[2]=it[2]+1;\n            it[0]=it[1]/it[2];\n            minh.push(it);\n\n            extraStudents--;\n        }\n        double ans=0;\n        while(!minh.empty()){\n            auto it=minh.top();\n            minh.pop();\n            ans=ans+it[0];\n        }\n        return ans;\n    }\n}; "
                    },
                    {
                        "username": "jasbir",
                        "content": "Can anyone please help why this is not getting accepted with TreeSet?\\n\\nIt is being accepted when using priorityQueue using same logic. Its very frustrating. Please suggest why it is so?\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        TreeSet<double[]> set = new TreeSet<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                 if(a[0] - b[0] > 0) return -1;\\n                 else if(a[0]-b[0] < 0)  return 1;\\n                 return 0;\\n             }\\n         });\\n         for(int[] c : classes){\\n             double a = c[0], b = c[1];\\n             set.add(new double[]{profit(a,b),a,b});\\n         }\\n        \\n         while(extraStudents-- > 0){\\n             double[] arr = set.pollFirst();\\n             double a = arr[1];\\n             double b = arr[2];\\n             set.add(new double[]{profit(a+1,b+1),a+1,b+1});\\n         }\\n         double ans = 0.0d;\\n         while(!set.isEmpty()){\\n             double[] arr = set.pollFirst();\\n             double a=arr[1],b=arr[2];\\n             ans += a/b;\\n         }\\n        \\n         return (double)(ans/classes.length);\\n   \\n\\n    }\\n    public double profit(double a, double b){\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}"
                    },
                    {
                        "username": "saswatajiko",
                        "content": "How come an optimal solution TLE's cause it's in python? I am using a wrapper class with total_ordering and heapq to ensure the __lt__ and __eq__ function checks the increase in pass percentage being greater than (not less than, as heapq implements min heap) and equal to."
                    },
                    {
                        "username": "aditya_42",
                        "content": "I just submitted an heap solution and it passed on first go, there must be some error with your program, that isn\\'t a smart way to implement a maxHeap in python"
                    }
                ]
            },
            {
                "id": 1802546,
                "content": [
                    {
                        "username": "Schlepp",
                        "content": "There\\'s no reason that an optimal m log n solution TLE\\'s because we use vectors instead of pairs.  This question is way too stingy on runtime."
                    },
                    {
                        "username": "makeller1",
                        "content": "Especially since you can create the heap in O(n) using vectors as opposed to pushing one pair at a time."
                    },
                    {
                        "username": "aj__24",
                        "content": "The main idea will be to increment that class which will give max profit.\\neg: 2/4, 1/2\\n\\nyou may think we need to increment the one with max diff(b-a if it was a/b) but actually it\\'s not that simple.\\nistead one way to check which gives max increment is calculating (a/b - (a+1)/(b+1)) and the one which has max  (a/b - (a+1)/(b+1)) is need tobe incremented. \\nSo main idea will be to take one passed student(out of k) and assign it to any of the classes and after assigning it, we need to update that class. \\nWe repeat the process till k == 0;\\n\\nSo we\\'ll create a max heap that will store (a/b - (a+1)/(b+1)) for every a, b in classes, and for every k we will find the max value from heap and will update that classes value to a+1/b+1 and insert it to that heap.\\n\\nI\\'ve given a breif explanation, now you can easily code it by yourseleves"
                    },
                    {
                        "username": "Lokeshpandey333",
                        "content": "if anyone can assist me in debugging this code.\ni have used heap concept\n\n\n\n\n\n\nclass Solution {\npublic:\ntypedef vector<float>pi;\n    double maxAverageRatio(vector<vector<pi>>& classes, int extraStudents) {\n        priority_queue<pi,vector<pi>,greater<pi>>minh;\n\n            for (auto it : classes) {\n                double avg = (it[0][0] / it[0][1]); // Access the elements correctly\n                minh.push({avg, it[0][0], it[0][1]}); // Push the values into the priority queue\n        }\n        while(extraStudents!=0){\n            auto it=minh.top();\n            minh.pop();\n            it[1]=it[1]+1;\n            it[2]=it[2]+1;\n            it[0]=it[1]/it[2];\n            minh.push(it);\n\n            extraStudents--;\n        }\n        double ans=0;\n        while(!minh.empty()){\n            auto it=minh.top();\n            minh.pop();\n            ans=ans+it[0];\n        }\n        return ans;\n    }\n}; "
                    },
                    {
                        "username": "jasbir",
                        "content": "Can anyone please help why this is not getting accepted with TreeSet?\\n\\nIt is being accepted when using priorityQueue using same logic. Its very frustrating. Please suggest why it is so?\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        TreeSet<double[]> set = new TreeSet<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                 if(a[0] - b[0] > 0) return -1;\\n                 else if(a[0]-b[0] < 0)  return 1;\\n                 return 0;\\n             }\\n         });\\n         for(int[] c : classes){\\n             double a = c[0], b = c[1];\\n             set.add(new double[]{profit(a,b),a,b});\\n         }\\n        \\n         while(extraStudents-- > 0){\\n             double[] arr = set.pollFirst();\\n             double a = arr[1];\\n             double b = arr[2];\\n             set.add(new double[]{profit(a+1,b+1),a+1,b+1});\\n         }\\n         double ans = 0.0d;\\n         while(!set.isEmpty()){\\n             double[] arr = set.pollFirst();\\n             double a=arr[1],b=arr[2];\\n             ans += a/b;\\n         }\\n        \\n         return (double)(ans/classes.length);\\n   \\n\\n    }\\n    public double profit(double a, double b){\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}"
                    },
                    {
                        "username": "saswatajiko",
                        "content": "How come an optimal solution TLE's cause it's in python? I am using a wrapper class with total_ordering and heapq to ensure the __lt__ and __eq__ function checks the increase in pass percentage being greater than (not less than, as heapq implements min heap) and equal to."
                    },
                    {
                        "username": "aditya_42",
                        "content": "I just submitted an heap solution and it passed on first go, there must be some error with your program, that isn\\'t a smart way to implement a maxHeap in python"
                    }
                ]
            },
            {
                "id": 1795771,
                "content": [
                    {
                        "username": "Schlepp",
                        "content": "There\\'s no reason that an optimal m log n solution TLE\\'s because we use vectors instead of pairs.  This question is way too stingy on runtime."
                    },
                    {
                        "username": "makeller1",
                        "content": "Especially since you can create the heap in O(n) using vectors as opposed to pushing one pair at a time."
                    },
                    {
                        "username": "aj__24",
                        "content": "The main idea will be to increment that class which will give max profit.\\neg: 2/4, 1/2\\n\\nyou may think we need to increment the one with max diff(b-a if it was a/b) but actually it\\'s not that simple.\\nistead one way to check which gives max increment is calculating (a/b - (a+1)/(b+1)) and the one which has max  (a/b - (a+1)/(b+1)) is need tobe incremented. \\nSo main idea will be to take one passed student(out of k) and assign it to any of the classes and after assigning it, we need to update that class. \\nWe repeat the process till k == 0;\\n\\nSo we\\'ll create a max heap that will store (a/b - (a+1)/(b+1)) for every a, b in classes, and for every k we will find the max value from heap and will update that classes value to a+1/b+1 and insert it to that heap.\\n\\nI\\'ve given a breif explanation, now you can easily code it by yourseleves"
                    },
                    {
                        "username": "Lokeshpandey333",
                        "content": "if anyone can assist me in debugging this code.\ni have used heap concept\n\n\n\n\n\n\nclass Solution {\npublic:\ntypedef vector<float>pi;\n    double maxAverageRatio(vector<vector<pi>>& classes, int extraStudents) {\n        priority_queue<pi,vector<pi>,greater<pi>>minh;\n\n            for (auto it : classes) {\n                double avg = (it[0][0] / it[0][1]); // Access the elements correctly\n                minh.push({avg, it[0][0], it[0][1]}); // Push the values into the priority queue\n        }\n        while(extraStudents!=0){\n            auto it=minh.top();\n            minh.pop();\n            it[1]=it[1]+1;\n            it[2]=it[2]+1;\n            it[0]=it[1]/it[2];\n            minh.push(it);\n\n            extraStudents--;\n        }\n        double ans=0;\n        while(!minh.empty()){\n            auto it=minh.top();\n            minh.pop();\n            ans=ans+it[0];\n        }\n        return ans;\n    }\n}; "
                    },
                    {
                        "username": "jasbir",
                        "content": "Can anyone please help why this is not getting accepted with TreeSet?\\n\\nIt is being accepted when using priorityQueue using same logic. Its very frustrating. Please suggest why it is so?\\n\\nclass Solution {\\n    public double maxAverageRatio(int[][] classes, int extraStudents) {\\n        TreeSet<double[]> set = new TreeSet<double[]>(new Comparator<double[]>(){\\n            public int compare(double[] a, double[] b){\\n                 if(a[0] - b[0] > 0) return -1;\\n                 else if(a[0]-b[0] < 0)  return 1;\\n                 return 0;\\n             }\\n         });\\n         for(int[] c : classes){\\n             double a = c[0], b = c[1];\\n             set.add(new double[]{profit(a,b),a,b});\\n         }\\n        \\n         while(extraStudents-- > 0){\\n             double[] arr = set.pollFirst();\\n             double a = arr[1];\\n             double b = arr[2];\\n             set.add(new double[]{profit(a+1,b+1),a+1,b+1});\\n         }\\n         double ans = 0.0d;\\n         while(!set.isEmpty()){\\n             double[] arr = set.pollFirst();\\n             double a=arr[1],b=arr[2];\\n             ans += a/b;\\n         }\\n        \\n         return (double)(ans/classes.length);\\n   \\n\\n    }\\n    public double profit(double a, double b){\\n        return (a + 1) / (b + 1) - a / b;\\n    }\\n}"
                    },
                    {
                        "username": "saswatajiko",
                        "content": "How come an optimal solution TLE's cause it's in python? I am using a wrapper class with total_ordering and heapq to ensure the __lt__ and __eq__ function checks the increase in pass percentage being greater than (not less than, as heapq implements min heap) and equal to."
                    },
                    {
                        "username": "aditya_42",
                        "content": "I just submitted an heap solution and it passed on first go, there must be some error with your program, that isn\\'t a smart way to implement a maxHeap in python"
                    }
                ]
            }
        ]
    },
    {
        "title": "Maximum Score of a Good Subarray",
        "question_content": "<p>You are given an array of integers <code>nums</code> <strong>(0-indexed)</strong> and an integer <code>k</code>.</p>\n\n<p>The <strong>score</strong> of a subarray <code>(i, j)</code> is defined as <code>min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)</code>. A <strong>good</strong> subarray is a subarray where <code>i &lt;= k &lt;= j</code>.</p>\n\n<p>Return <em>the maximum possible <strong>score</strong> of a <strong>good</strong> subarray.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,4,3,7,4,5], k = 3\n<strong>Output:</strong> 15\n<strong>Explanation:</strong> The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [5,5,4,5,4,1,1,1], k = 0\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 2 * 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= k &lt; nums.length</code></li>\n</ul>\n",
        "solutions": [
            {
                "id": 1108333,
                "title": "java-c-python-two-pointers",
                "content": "# **Explanation**\\nWe start with `i = j = k`, the `score = A[k]`.\\nWhen increment the size of window,\\nwe want to reduce the `min(A[i]..A[j])` slowly.\\n\\nTo do this, we can check the values on both sides of the window.\\nIf `A[i - 1] < A[j + 1]`, we do `j = j + 1`\\nIf `A[i - 1] >= A[j + 1]`, we do `i = i - 1`\\n\\nDuring this process,\\nthere is sense that we reduce `min(A[i]..A[j])` step by step.\\n<br>\\n\\n# **Complexity**\\nTime `O(n)`\\nSpace `O(1)`\\n<br>\\n\\n**Java**\\n```java\\n    public int maximumScore(int[] A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.length;\\n        while (i > 0 || j < n - 1) {\\n            if (i == 0)\\n                ++j;\\n            else if (j == n - 1)\\n                --i;\\n            else if (A[i - 1] < A[j + 1])\\n                ++j;\\n            else\\n                --i;\\n            mini = Math.min(mini, Math.min(A[i], A[j]));\\n            res = Math.max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n```\\n\\n**C++**\\n```cpp\\n    int maximumScore(vector<int>& A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.size();\\n        while (i > 0 or j < n - 1) {\\n            if ((i > 0 ? A[i - 1] : 0) < (j < n - 1 ? A[j + 1] : 0))\\n                mini = min(mini, A[++j]);\\n            else\\n                mini = min(mini, A[--i]);\\n            res = max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n```\\n\\n**Python**\\n```py\\n    def maximumScore(self, A, k):\\n        res = mini = A[k]\\n        i, j, n = k, k, len(A)\\n        while i > 0 or j < n - 1:\\n            if (A[i - 1] if i else 0) < (A[j + 1] if j < n - 1 else 0):\\n                j += 1\\n            else:\\n                i -= 1\\n            mini = min(mini, A[i], A[j])\\n            res = max(res, mini * (j - i + 1))\\n        return res\\n```\\n",
                "solutionTags": [],
                "code": "```java\\n    public int maximumScore(int[] A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.length;\\n        while (i > 0 || j < n - 1) {\\n            if (i == 0)\\n                ++j;\\n            else if (j == n - 1)\\n                --i;\\n            else if (A[i - 1] < A[j + 1])\\n                ++j;\\n            else\\n                --i;\\n            mini = Math.min(mini, Math.min(A[i], A[j]));\\n            res = Math.max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n```\n```cpp\\n    int maximumScore(vector<int>& A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.size();\\n        while (i > 0 or j < n - 1) {\\n            if ((i > 0 ? A[i - 1] : 0) < (j < n - 1 ? A[j + 1] : 0))\\n                mini = min(mini, A[++j]);\\n            else\\n                mini = min(mini, A[--i]);\\n            res = max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n```\n```py\\n    def maximumScore(self, A, k):\\n        res = mini = A[k]\\n        i, j, n = k, k, len(A)\\n        while i > 0 or j < n - 1:\\n            if (A[i - 1] if i else 0) < (A[j + 1] if j < n - 1 else 0):\\n                j += 1\\n            else:\\n                i -= 1\\n            mini = min(mini, A[i], A[j])\\n            res = max(res, mini * (j - i + 1))\\n        return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108440,
                "title": "84-largest-rectangle-in-histogram-with-one-additional-check",
                "content": "The task is very similar to LC 84 problem with one additional check - rectangle must include k-th element of histogram. \\nTime / space complexity are both O(n).\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        stack.push(-1);\\n        int n = nums.length;\\n        int max = nums[k];\\n\\n        for(int i = 0; i < n; i++) {\\n           \\n            while(stack.peek() != -1 && nums[stack.peek()] >= nums[i]) {\\n                int currentHeight = nums[stack.pop()];\\n                int currentWidth = i - stack.peek() - 1;\\n                \\n                if(stack.peek() < k && i > k){\\n                    \\n                    max = Math.max(max, currentHeight * currentWidth);\\n                    \\n                }\\n            }\\n            stack.push(i);\\n        }\\n        while(stack.peek() != -1) {\\n            int currentHeight = nums[stack.pop()];\\n            int currentWidth = n - stack.peek() - 1;\\n            if(stack.peek() < k){\\n                \\n                max = Math.max(max, currentHeight * currentWidth);\\n                \\n            }\\n        }\\n        return max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        stack.push(-1);\\n        int n = nums.length;\\n        int max = nums[k];\\n\\n        for(int i = 0; i < n; i++) {\\n           \\n            while(stack.peek() != -1 && nums[stack.peek()] >= nums[i]) {\\n                int currentHeight = nums[stack.pop()];\\n                int currentWidth = i - stack.peek() - 1;\\n                \\n                if(stack.peek() < k && i > k){\\n                    \\n                    max = Math.max(max, currentHeight * currentWidth);\\n                    \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1108260,
                "title": "c-greedy-o-n",
                "content": "We start from `k` and track the current maximum score. We have two choices - expand left or right. To maximize the score, we expand towards the higher number.\\n\\n```cpp\\nint maximumScore(vector<int>& nums, int k) {\\n    int mn = nums[k], i = k, j = k, res = nums[k];\\n    do {\\n        if (i > 0 && j < nums.size() - 1) {\\n          if (nums[i - 1] >= nums[j + 1])\\n                --i;\\n            else\\n                ++j;\\n        }\\n        else if (i == 0 && j < nums.size() - 1)\\n            ++j;\\n        else if (j == nums.size() - 1 && i > 0)\\n            --i;\\n        mn = min({mn, nums[i], nums[j]});\\n        res = max(res, mn * (j - i + 1));            \\n    }\\n    while (i > 0 || j < nums.size() - 1); \\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint maximumScore(vector<int>& nums, int k) {\\n    int mn = nums[k], i = k, j = k, res = nums[k];\\n    do {\\n        if (i > 0 && j < nums.size() - 1) {\\n          if (nums[i - 1] >= nums[j + 1])\\n                --i;\\n            else\\n                ++j;\\n        }\\n        else if (i == 0 && j < nums.size() - 1)\\n            ++j;\\n        else if (j == nums.size() - 1 && i > 0)\\n            --i;\\n        mn = min({mn, nums[i], nums[j]});\\n        res = max(res, mn * (j - i + 1));            \\n    }\\n    while (i > 0 || j < nums.size() - 1); \\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1108351,
                "title": "python-binary-search-o-n-log-n-explained",
                "content": "Let us define by `left` running minimum to the left of our number `k` and by `right` running minimum to the right of index `k`. For example for `nums = [1,4,3,7,4,5]` and `k = 3` we have:\\n\\n`left = [1,3,3,7]`,   `right = [7, 4, 4]`. Here we start to build these minimum from the **k**th element.\\n\\nNotice, that we can have only `2` options:\\n1. Smallest element from `nums[i], ... nums[j]` will be after element with index `k`.\\n2. Smallest element from `nums[i], ... nums[j]` will be before element with index `k`.\\n\\nLet us deal with case 1. Let us now iterate through elemens `elem` in the the right part and for each of them find the smallest element in the left part, such that it is more or equal to `elem`. We can do it, using binary search. Why we need the first element? Because the smaller index `i` we have, the bigger will be score: `min` term will be equal to `elem` and we wan to make width as big as possible. \\n\\nIn exaclty the same way we deal with case 2.\\n\\n**Complexity**: time complexity is `O(n log n)`, because all we do it perform binary search `O(n)` times. Space complexity is `O(n)`.\\n\\n```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        def test(nums, k):\\n            left  = list(accumulate(nums[:k+1][::-1], min))[::-1]\\n            right = list(accumulate(nums[k:], min))\\n            ans = 0\\n            for j in range(0, len(right)):\\n                i = bisect_left(left, right[j])\\n                if i >= 0: ans = max(ans, (k + j - i + 1) * right[j] )\\n\\n            return ans\\n\\n        return max(test(nums, k), test(nums[::-1], len(nums) - k - 1))\\n```\\n\\nIf you have any question, feel free to ask. If you like the explanations, please **Upvote!**",
                "solutionTags": [
                    "Binary Search"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        def test(nums, k):\\n            left  = list(accumulate(nums[:k+1][::-1], min))[::-1]\\n            right = list(accumulate(nums[k:], min))\\n            ans = 0\\n            for j in range(0, len(right)):\\n                i = bisect_left(left, right[j])\\n                if i >= 0: ans = max(ans, (k + j - i + 1) * right[j] )\\n\\n            return ans\\n\\n        return max(test(nums, k), test(nums[::-1], len(nums) - k - 1))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108363,
                "title": "java-python-3-two-o-n-codes-w-brief-explanation-and-analysis",
                "content": "**Q & A:**\\nQ1: How does method 1 guarantee that k will be bounded by low & high? for the Java code (1st implementation) of method1, low could be already greater than k and you are still updating the score value. for the Python 3 code (2nd implementation) of method1, both low and high could pass the k index.\\nA1: In both java and Python 3 codes of method 1, there is no way that low and high bounds (`lo` & `hi`) pass index `k`. They can at most reach index `k`.\\n1. If they reach index `k` at the same time (e.g., test case: `nums = [1], k = 0`), then the `while` loop will terminate;\\n2. If `lo` reaches index `k` first, `runningMinFromIndexK[lo]` is now the max value - `runningMinFromIndexK[k]`. Then in the following iterations, `runningMinFromIndexK[lo] < runningMinFromIndexK[hi]` will always be `false` and the code can only execute `--hi` part till `lo == hi`. Accordingly, the `while` loop will termianate; Vice versa for the case of `hi` reaching index `k` first.\\n\\nIn fact, in the following if conditional\\n```\\n            if (hi == k || runningMinFromIndexK[lo] < runningMinFromIndexK[hi]) {\\n```\\n`hi == k` is redundant and has been removed.\\n\\n**End of Q & A**\\n\\n----\\n\\n**Method 1:**\\nSimilar problem: [42. Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water/)\\n\\n----\\n\\n1. Scan starting from index `k`, to left and right, respectively, to compute running minimum values and save it in  `runningMinFromIndexK`;\\n Define left running minimum to the left of `nums[k]` and right running minimum to the right of `nums[k]` by `running_left` and `running_right`, respectively. For example for `nums = [1,4,3,7,4,5]` and `k = 2` we have:\\n ```\\n running_left = [1,3,3,7], running_right = [7, 4, 4].\\n ```\\n Remove a duplicate `7` and combine the above, we have:\\n ```\\nrunningMinFromIndexK = [1,3,3,7,4,4]\\n```\\n2. Using the approach for [42. Trapping Rain Water](https://leetcode.com/problems/trapping-rain-water/): Starting from both ends as the first good subarray, move the end corresponds to smaller value of the `runningMinFromIndexK`, and update the score accordingly.\\n```java\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length, score = nums[k], lo = 0, hi = n - 1;\\n        int[] runningMinFromIndexK = new int[n];\\n        runningMinFromIndexK[k] = nums[k];\\n        for (int i = k + 1; i < n; ++i) { // running minimum to the right part.\\n            runningMinFromIndexK[i] = Math.min(runningMinFromIndexK[i - 1], nums[i]);\\n        }\\n        for (int i = k - 1; i >= 0; --i) { // running minimum to the left part.\\n            runningMinFromIndexK[i] = Math.min(runningMinFromIndexK[i + 1], nums[i]);\\n        } \\n        while (lo < hi) { // This part similar to the approach for 84. Largest Rectange Histogram.\\n            score = Math.max(score, (hi - lo + 1) * Math.min(runningMinFromIndexK[lo], runningMinFromIndexK[hi]));\\n            if (runningMinFromIndexK[lo] < runningMinFromIndexK[hi]) {\\n                ++lo;\\n            }else {\\n                --hi;\\n            }\\n        }\\n        return score;\\n    }\\n```\\n```python\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        running_left = list(accumulate(nums[: k + 1][:: -1], min))[:: -1]\\n        running_right = list(accumulate(nums[k :], min))\\n        running_min_from_index_k = running_left[: -1] + running_right\\n        n = len(nums)\\n        lo, hi, score = 0, n - 1, nums[k]\\n        while lo < hi:\\n            if running_min_from_index_k[lo] < running_min_from_index_k[hi]:\\n                score = max(score, running_min_from_index_k[lo] * (hi - lo + 1))\\n                lo += 1\\n            else:\\n                score = max(score, running_min_from_index_k[hi] * (hi - lo + 1))\\n                hi -= 1\\n        return score\\n```\\n**Analysis:**\\n\\nTime & space: `O(n)`, where n = nums.length.\\n\\n----\\n\\n**Method 2: Greedy Algorithm**\\nStarting from index `k`, find the max scores of good subarray of size `1, 2, 3, ..., nums.length`, respectively; return the maximum out of them.\\n```java\\n    public int maximumScore(int[] nums, int k) {\\n        int score = nums[k], min = nums[k], lo = k, hi = k, n = nums.length;\\n        while (lo > 0 || hi < n - 1) {\\n            if ((lo > 0 ? nums[lo - 1] : 0) < (hi < n - 1 ? nums[hi + 1] : 0)) {\\n                ++hi;\\n            }else {\\n                --lo;\\n            }\\n            min = Math.min(min, Math.min(nums[lo], nums[hi]));\\n            score = Math.max(score, (hi - lo + 1) * min);\\n        }\\n        return score;\\n    }\\n```\\n```python\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        score = mi = nums[k]\\n        lo = hi = k\\n        n = len(nums)\\n        while lo > 0 or hi < n - 1:\\n            if (nums[lo - 1] if lo > 0 else 0) < (nums[hi + 1] if hi < n - 1 else 0):\\n                hi += 1\\n            else:\\n                lo -= 1\\n            mi = min(mi, min(nums[lo], nums[hi]))\\n            score = max(score, mi * (hi - lo + 1))\\n        return score\\n```\\n**Analysis:**\\n\\nTime: `O(n)`, space: `O(1)`, where n = nums.length.",
                "solutionTags": [],
                "code": "```\\n            if (hi == k || runningMinFromIndexK[lo] < runningMinFromIndexK[hi]) {\\n```\n```\\n running_left = [1,3,3,7], running_right = [7, 4, 4].\\n ```\n```\\nrunningMinFromIndexK = [1,3,3,7,4,4]\\n```\n```java\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length, score = nums[k], lo = 0, hi = n - 1;\\n        int[] runningMinFromIndexK = new int[n];\\n        runningMinFromIndexK[k] = nums[k];\\n        for (int i = k + 1; i < n; ++i) { // running minimum to the right part.\\n            runningMinFromIndexK[i] = Math.min(runningMinFromIndexK[i - 1], nums[i]);\\n        }\\n        for (int i = k - 1; i >= 0; --i) { // running minimum to the left part.\\n            runningMinFromIndexK[i] = Math.min(runningMinFromIndexK[i + 1], nums[i]);\\n        } \\n        while (lo < hi) { // This part similar to the approach for 84. Largest Rectange Histogram.\\n            score = Math.max(score, (hi - lo + 1) * Math.min(runningMinFromIndexK[lo], runningMinFromIndexK[hi]));\\n            if (runningMinFromIndexK[lo] < runningMinFromIndexK[hi]) {\\n                ++lo;\\n            }else {\\n                --hi;\\n            }\\n        }\\n        return score;\\n    }\\n```\n```python\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        running_left = list(accumulate(nums[: k + 1][:: -1], min))[:: -1]\\n        running_right = list(accumulate(nums[k :], min))\\n        running_min_from_index_k = running_left[: -1] + running_right\\n        n = len(nums)\\n        lo, hi, score = 0, n - 1, nums[k]\\n        while lo < hi:\\n            if running_min_from_index_k[lo] < running_min_from_index_k[hi]:\\n                score = max(score, running_min_from_index_k[lo] * (hi - lo + 1))\\n                lo += 1\\n            else:\\n                score = max(score, running_min_from_index_k[hi] * (hi - lo + 1))\\n                hi -= 1\\n        return score\\n```\n```java\\n    public int maximumScore(int[] nums, int k) {\\n        int score = nums[k], min = nums[k], lo = k, hi = k, n = nums.length;\\n        while (lo > 0 || hi < n - 1) {\\n            if ((lo > 0 ? nums[lo - 1] : 0) < (hi < n - 1 ? nums[hi + 1] : 0)) {\\n                ++hi;\\n            }else {\\n                --lo;\\n            }\\n            min = Math.min(min, Math.min(nums[lo], nums[hi]));\\n            score = Math.max(score, (hi - lo + 1) * min);\\n        }\\n        return score;\\n    }\\n```\n```python\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        score = mi = nums[k]\\n        lo = hi = k\\n        n = len(nums)\\n        while lo > 0 or hi < n - 1:\\n            if (nums[lo - 1] if lo > 0 else 0) < (nums[hi + 1] if hi < n - 1 else 0):\\n                hi += 1\\n            else:\\n                lo -= 1\\n            mi = min(mi, min(nums[lo], nums[hi]))\\n            score = max(score, mi * (hi - lo + 1))\\n        return score\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108358,
                "title": "python-two-pointer-o-1-space-similar-to-lc42-trapping-rain-water",
                "content": "\\nSimilar to LC 42. Trapping Rain Water\\n\\n    class Solution:\\n        def maximumScore(self, nums: List[int], k: int) -> int:\\n            left, right = [], []\\n            \\n            # going to the left from the current position\\n            minn = nums[k]\\n            for i in range(k, -1, -1):\\n                minn = min(minn, nums[i])\\n                left.append(minn)\\n    \\n            # going to the right from the current position\\n            minn = nums[k]\\n            for i in range(k, len(nums)):\\n                minn = min(minn, nums[i])\\n                right.append(minn)\\n                \\n            # two pointer to find the minimum\\n            res = 0\\n            i = 0\\n            j = len(nums) - 1\\n            \\n            while left and right:\\n                res = max(res, (j - i + 1) * min(right[-1], left[-1]))\\n                if left[-1] < right[-1]:\\n                    left.pop()\\n                    i += 1\\n                else:\\n                    right.pop()\\n                    j -= 1\\n                \\n            return res\\n          \\nWe can also make the solution to use O(1) extra space by modifying the original value of the array to the minimum counting from k to the left and the right, respectively.\\n\\n    class Solution:\\n        def maximumScore(self, nums: List[int], k: int) -> int:\\n                minn = nums[k]\\n                for i in range(k, -1, -1):\\n                    minn = min(minn, nums[i])\\n                    nums[i] = minn\\n                \\n                minn = nums[k]\\n                for i in range(k, len(nums)):\\n                    minn = min(minn, nums[i])\\n                    nums[i] = minn\\n                    \\n                # two pointer to find the minimum\\n                i = 0\\n                j = len(nums) - 1\\n                res = 0\\n                \\n                while i <= k <= j:\\n                    res = max(res, (j - i + 1) * min(nums[i], nums[j]))\\n                    if nums[i] < nums[j]:\\n                        i += 1\\n                    else:\\n                        j -= 1\\n                    \\n                return res\\n\\t\\nIf you combine the two processes of tracking the minimum and two pointer together, it will become Lee215\\'s solution. It will be genuine O(1) space without changing the original array.\\n\\t\\nIt is also similar to LC 84. Largest Rectangle in Histogram.\\nBelow is a fancier solution using stack by simply modifying the code used in LC84.\\nIt is less intuitive than the first method.\\n        \\n    class Solution:\\n        def maximumScore(self, heights: List[int], k: int) -> int:\\n            stack = []\\n            maxArea = 0\\n            heights.append(0)\\n            \\n            # stack saves the height in decreasing order\\n            for i in range(len(heights)):\\n                while stack and heights[stack[-1]] > heights[i]:\\n                    h = heights[stack.pop()]\\n                    j = stack[-1] + 1 if stack else 0\\n                    w = i - j\\n                    # when it spans over k\\n                    if j <= k and k <= i-1:\\n                        maxArea = max(maxArea, h * w)\\n                stack.append(i)\\n    \\n            i, j = k, k\\n            while i >= 0 and heights[i] >= heights[k]:\\n                i -= 1\\n            while j <= len(heights) and heights[j] >= heights[k]:\\n                j += 1\\n            maxArea = max(maxArea, heights[k] * (j - i - 1))\\n            \\n            return maxArea",
                "solutionTags": [],
                "code": "\\nSimilar to LC 42. Trapping Rain Water\\n\\n    class Solution:\\n        def maximumScore(self, nums: List[int], k: int) -> int:\\n            left, right = [], []\\n            \\n            # going to the left from the current position\\n            minn = nums[k]\\n            for i in range(k, -1, -1):\\n                minn = min(minn, nums[i])\\n                left.append(minn)\\n    \\n            # going to the right from the current position\\n            minn = nums[k]\\n            for i in range(k, len(nums)):\\n                minn = min(minn, nums[i])\\n                right.append(minn)\\n                \\n            # two pointer to find the minimum\\n            res = 0\\n            i = 0\\n            j = len(nums) - 1\\n            \\n            while left and right:\\n                res = max(res, (j - i + 1) * min(right[-1], left[-1]))\\n                if left[-1] < right[-1]:\\n                    left.pop()\\n                    i += 1\\n                else:\\n                    right.pop()\\n                    j -= 1\\n                \\n            return res\\n          \\nWe can also make the solution to use O(1) extra space by modifying the original value of the array to the minimum counting from k to the left and the right, respectively.\\n\\n    class Solution:\\n        def maximumScore(self, nums: List[int], k: int) -> int:\\n                minn = nums[k]\\n                for i in range(k, -1, -1):\\n                    minn = min(minn, nums[i])\\n                    nums[i] = minn\\n                \\n                minn = nums[k]\\n                for i in range(k, len(nums)):\\n                    minn = min(minn, nums[i])\\n                    nums[i] = minn\\n                    \\n                # two pointer to find the minimum\\n                i = 0\\n                j = len(nums) - 1\\n                res = 0\\n                \\n                while i <= k <= j:\\n                    res = max(res, (j - i + 1) * min(nums[i], nums[j]))\\n                    if nums[i] < nums[j]:\\n                        i += 1\\n                    else:\\n                        j -= 1\\n                    \\n                return res\\n\\t\\nIf you combine the two processes of tracking the minimum and two pointer together, it will become Lee215\\'s solution. It will be genuine O(1) space without changing the original array.\\n\\t\\nIt is also similar to LC 84. Largest Rectangle in Histogram.\\nBelow is a fancier solution using stack by simply modifying the code used in LC84.\\nIt is less intuitive than the first method.\\n        \\n    class Solution:\\n        def maximumScore(self, heights: List[int], k: int) -> int:\\n            stack = []\\n            maxArea = 0\\n            heights.append(0)\\n            \\n            # stack saves the height in decreasing order\\n            for i in range(len(heights)):\\n                while stack and heights[stack[-1]] > heights[i]:\\n                    h = heights[stack.pop()]\\n                    j = stack[-1] + 1 if stack else 0\\n                    w = i - j\\n                    # when it spans over k\\n                    if j <= k and k <= i-1:\\n                        maxArea = max(maxArea, h * w)\\n                stack.append(i)\\n    \\n            i, j = k, k\\n            while i >= 0 and heights[i] >= heights[k]:\\n                i -= 1\\n            while j <= len(heights) and heights[j] >= heights[k]:\\n                j += 1\\n            maxArea = max(maxArea, heights[k] * (j - i - 1))\\n            \\n            return maxArea",
                "codeTag": "Java"
            },
            {
                "id": 1330937,
                "title": "c-largest-histogram-area-monotonic-stack",
                "content": "Similar to largest histogram area with a condition\\n\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0); \\n        stack<int> st ;\\n        int n = nums.size(), res = 0; \\n        for(int i=0; i<n ; i++){\\n            while(!st.empty() && nums[st.top()] >= nums[i]){\\n                int height = nums[st.top()];\\n                st.pop(); \\n                int left = st.empty() ? -1: st.top(); \\n                if(k < i && k > left) res = max(height* (i-left-1), res);\\n            }\\n            st.push(i); \\n        }\\n        return res; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0); \\n        stack<int> st ;\\n        int n = nums.size(), res = 0; \\n        for(int i=0; i<n ; i++){\\n            while(!st.empty() && nums[st.top()] >= nums[i]){\\n                int height = nums[st.top()];\\n                st.pop(); \\n                int left = st.empty() ? -1: st.top(); \\n                if(k < i && k > left) res = max(height* (i-left-1), res);\\n            }\\n            st.push(i); \\n        }\\n        return res; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108439,
                "title": "two-pointer-o-n-simple-and-clear-code-beats-100-in-both-space-and-time",
                "content": "Approach I used is greedy simply.\\nEvery step I took the most optimal step.\\n\\n```\\nint maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size(),ans=nums[k],x;\\n\\t\\t\\t\\tint mi=nums[k];          //Start with the given k\\n\\t\\t\\tfor(int i=k,j=k;i>=0 || j<n ;){    // Move in the array with the help of two pointer in both direction\\n\\t\\t\\n            while(j<n && nums[j]>=mi){   //we move in right direction until our minimum, that is mi will not change\\n                ++j;\\n            }\\n            while(i>=0 && nums[i]>=mi){ //we move in left until our minimum, that is mi will not change\\n                --i;\\n            }\\n    \\n\\t\\t\\t\\tans=max(ans,mi*(j-i-1));// update answer everytime\\n            if(i>=0 && j<n){\\n\\t\\t\\t// Here, We have two potential minimum, which is nums[i] and nums[j] in any direction\\n\\t\\t\\t// So we move to that minimum which will be greater between the two minimum then again \\n\\t\\t\\t//apply the above two step, that is find the longest array in with the given minimum\\n\\t\\t\\t//This we can understand with some testcases\\n                mi=(nums[i]>nums[j]?nums[i]:nums[j]); \\n\\t\\t\\t}else if(j<n){ // if i<0 we can move only in right direction\\n                mi=nums[j];\\n            }else if(i>=0){ // if j>=n we can move only in left direction\\n                mi=nums[i];\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size(),ans=nums[k],x;\\n\\t\\t\\t\\tint mi=nums[k];          //Start with the given k\\n\\t\\t\\tfor(int i=k,j=k;i>=0 || j<n ;){    // Move in the array with the help of two pointer in both direction\\n\\t\\t\\n            while(j<n && nums[j]>=mi){   //we move in right direction until our minimum, that is mi will not change\\n                ++j;\\n            }\\n            while(i>=0 && nums[i]>=mi){ //we move in left until our minimum, that is mi will not change\\n                --i;\\n            }\\n    \\n\\t\\t\\t\\tans=max(ans,mi*(j-i-1));// update answer everytime\\n            if(i>=0 && j<n){\\n\\t\\t\\t// Here, We have two potential minimum, which is nums[i] and nums[j] in any direction\\n\\t\\t\\t// So we move to that minimum which will be greater between the two minimum then again \\n\\t\\t\\t//apply the above two step, that is find the longest array in with the given minimum\\n\\t\\t\\t//This we can understand with some testcases\\n                mi=(nums[i]>nums[j]?nums[i]:nums[j]); \\n\\t\\t\\t}else if(j<n){ // if i<0 we can move only in right direction\\n                mi=nums[j];\\n            }else if(i>=0){ // if j>=n we can move only in left direction\\n                mi=nums[i];\\n            }\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1517266,
                "title": "3-similar-questions-same-concept-nsl-nsr",
                "content": "**1.** https://leetcode.com/problems/maximum-score-of-a-good-subarray/\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int ans=0;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && nums[st.top()]>=nums[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && nums[tt.top()]>=nums[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?n:tt.top();\\n            tt.push(i);\\n        }\\n        vector<long long>pref(n,0);\\n        pref[0]=nums[0];\\n        \\n        for(int i=1;i<n;i++){\\n            pref[i]=pref[i-1]+nums[i];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            int mn = nums[i];\\n            int l=nsl[i]+1, r=nsr[i]-1;\\n            int len, prod;\\n            if(l<=k && r>=k){\\n                len = r-l+1;\\n                prod = mn*len;\\n                ans = max(ans,prod);\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**2.** https://leetcode.com/problems/maximum-subarray-min-product/\\n```\\nclass Solution {\\npublic:\\n    int maxSumMinProduct(vector<int>& nums) {\\n        int n=nums.size();\\n        long long ans=0;\\n        int m=1000000007;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && nums[st.top()]>=nums[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && nums[tt.top()]>=nums[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?n:tt.top();\\n            tt.push(i);\\n        }\\n        vector<long long>pref(n,0);\\n        pref[0]=nums[0];\\n        \\n        for(int i=1;i<n;i++){\\n            pref[i]=pref[i-1]+nums[i];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            int mn = nums[i];\\n            int l=nsl[i]+1, r=nsr[i]-1;\\n            long long sum = pref[r] - ( l==0 ? 0 : pref[l-1]);\\n            long long prod = mn*sum;\\n            ans = max(ans,prod);\\n        }\\n        return ans%m;\\n    }\\n};\\n```\\n\\n**3.** https://leetcode.com/problems/sum-of-subarray-minimums/\\n```\\nclass Solution {\\npublic:\\n    int sumSubarrayMins(vector<int>& arr) {\\n        int n=arr.size();\\n        long long ans=0;\\n        int m=1000000007;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && arr[st.top()]>=arr[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && arr[tt.top()]>arr[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?-1:tt.top();\\n            tt.push(i);\\n        }\\n        for(int i=0;i<n;i++){\\n            long long l= (nsl[i]==-1 ? i+1:i-nsl[i]);\\n            long long r= (nsr[i]==-1 ? n-i:-i+nsr[i]);\\n            ans+=(arr[i]*l*r);\\n            ans=ans%m;\\n        \\n        }\\n        return ans%m;\\n    }\\n};\\n```\\n\\n**Comment down if there are any other similar questions.**",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int ans=0;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && nums[st.top()]>=nums[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && nums[tt.top()]>=nums[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?n:tt.top();\\n            tt.push(i);\\n        }\\n        vector<long long>pref(n,0);\\n        pref[0]=nums[0];\\n        \\n        for(int i=1;i<n;i++){\\n            pref[i]=pref[i-1]+nums[i];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            int mn = nums[i];\\n            int l=nsl[i]+1, r=nsr[i]-1;\\n            int len, prod;\\n            if(l<=k && r>=k){\\n                len = r-l+1;\\n                prod = mn*len;\\n                ans = max(ans,prod);\\n            }\\n            \\n        }\\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int maxSumMinProduct(vector<int>& nums) {\\n        int n=nums.size();\\n        long long ans=0;\\n        int m=1000000007;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && nums[st.top()]>=nums[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && nums[tt.top()]>=nums[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?n:tt.top();\\n            tt.push(i);\\n        }\\n        vector<long long>pref(n,0);\\n        pref[0]=nums[0];\\n        \\n        for(int i=1;i<n;i++){\\n            pref[i]=pref[i-1]+nums[i];\\n        }\\n        \\n        for(int i=0;i<n;i++){\\n            int mn = nums[i];\\n            int l=nsl[i]+1, r=nsr[i]-1;\\n            long long sum = pref[r] - ( l==0 ? 0 : pref[l-1]);\\n            long long prod = mn*sum;\\n            ans = max(ans,prod);\\n        }\\n        return ans%m;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int sumSubarrayMins(vector<int>& arr) {\\n        int n=arr.size();\\n        long long ans=0;\\n        int m=1000000007;\\n        vector<long long>nsr(n),nsl(n);\\n        //NSL\\n        stack<int>st;\\n        for(int i=0;i<n;i++){\\n            while(!st.empty() && arr[st.top()]>=arr[i])\\n                st.pop();\\n            nsl[i]=st.empty()?-1:st.top();\\n            st.push(i);\\n        }\\n        //NSR\\n        stack<int>tt;\\n        for(int i=n-1;i>=0;i--){\\n            while(!tt.empty() && arr[tt.top()]>arr[i])\\n                tt.pop();\\n            nsr[i]=tt.empty()?-1:tt.top();\\n            tt.push(i);\\n        }\\n        for(int i=0;i<n;i++){\\n            long long l= (nsl[i]==-1 ? i+1:i-nsl[i]);\\n            long long r= (nsr[i]==-1 ? n-i:-i+nsr[i]);\\n            ans+=(arr[i]*l*r);\\n            ans=ans%m;\\n        \\n        }\\n        return ans%m;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109404,
                "title": "o-n-using-monostack",
                "content": "find the left smaller and right smaller elements for each element\\nthis can be done using a mono increasing stack.\\nSimilar question: 907\\tSum of Subarray Minimums    \\t\\t33.3%\\tMedium\\n```\\n    int maximumScore(vector<int>& nums, int k) {\\n        //stack: each element as a min and find the width\\n        int n=nums.size();\\n        int ans=0;\\n        vector<int> l(n,-1),r(n,n);\\n        stack<int> st; //find prev smaller and next smaller: mono increasing stack\\n        for(int i=0;i<n;i++){\\n            while(st.size() && nums[i]<nums[st.top()]){\\n                int tp=st.top(); //i\\'s next greater\\n                st.pop();\\n                \\n                r[tp]=i;\\n            }\\n            if(st.size()) l[i]=st.top();\\n            st.push(i);\\n        }\\n        for(int i=0;i<n;i++){\\n            if(l[i]<k && r[i]>k)\\n                ans=max(ans,nums[i]*(r[i]-l[i]-1));\\n        }\\n        return ans;\\n    }\\n```\\t",
                "solutionTags": [],
                "code": "```\\n    int maximumScore(vector<int>& nums, int k) {\\n        //stack: each element as a min and find the width\\n        int n=nums.size();\\n        int ans=0;\\n        vector<int> l(n,-1),r(n,n);\\n        stack<int> st; //find prev smaller and next smaller: mono increasing stack\\n        for(int i=0;i<n;i++){\\n            while(st.size() && nums[i]<nums[st.top()]){\\n                int tp=st.top(); //i\\'s next greater\\n                st.pop();\\n                \\n                r[tp]=i;\\n            }\\n            if(st.size()) l[i]=st.top();\\n            st.push(i);\\n        }\\n        for(int i=0;i<n;i++){\\n            if(l[i]<k && r[i]>k)\\n                ans=max(ans,nums[i]*(r[i]-l[i]-1));\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1109684,
                "title": "python-3-stack-based-solution-o-n-with-explanation",
                "content": "* Without ```k``` constrain, this problem is quite easy: we just need to find out for each number ```nums[idx]```, **what is the index of the nearest smaller number on its left and right**. Then, the length of array with minimum value as **this number** depends on this left index and right index, since all the numbers within this range is **no less than** ```nums[idx]```\\n\\nFor example, ```nums = [1,4,3,7,4,5]```, apparently, ```nums[1] = 4``` has ```1``` number which is no less than it adjacent to its left **(Including itself !!!)**, ```nums[2] = 3``` has ```2``` number adjacent to its left, ```nums[3] = 7``` has ```1```. So on so forth, we could build two arrays ```l``` and ```r```. \\n```n = [1, 4, 5, 7, 4, 5]```\\n```l =  [1, 1, 2, 1, 2, 1]```\\n```r =  [6, 5, 4, 1, 2, 1]```\\n\\nThen the maximum value is ```nums[idx] * (right[idx] - left[idx] - 1)```, minus 1 because we calculate nums[idx] twice in both ```l and r```. For ```nums[1] = 4```, the range length is ```l[1] + r[1] - 1 = 5```, apparently from nums[1] to nums[5] inclusive.\\n\\n* However we have constrain ```k``` in this question, we just need to add another determine statement: \\n**if ```idx <= k```: we have to make sure the ending index of the array is no less than k; \\nif ```idx > k```: we have to make sure the starting index of the array is no larger than k.** \\nOtherwise we don\\'t need to compute the value for this invalid index.\\n\\n\\n\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        n, l, r = len(nums), [1], [1]\\n        # left index array\\n        st = [[nums[0], 0]]\\n        for idx in range(1, n):\\n            while st and st[-1][0] >= nums[idx]:\\n                st.pop()\\n            if st:\\n                l.append(idx - st[-1][1])\\n            else:\\n                l.append(idx + 1)\\n            st.append([nums[idx], idx])\\n\\t\\t#right index array\\n        st = [[nums[-1], n - 1]]\\n        for idx in range(n - 2, -1, -1):\\n            while st and st[-1][0] >= nums[idx]:\\n                st.pop()\\n            if st:\\n                r.append(st[-1][1] - idx)\\n            else:\\n                r.append(n - idx)\\n            st.append([nums[idx], idx])\\n        r.reverse()\\n        \\n\\t\\t#add judge to make sure i <= k <= j\\n        ans = -1\\n        for idx in range(n):\\n            if idx <= k:\\n                if idx + r[idx] > k:\\n                    ans = max(ans, nums[idx] * (l[idx] + r[idx] - 1 ))\\n            else:\\n                if idx - l[idx] < k:\\n                    ans = max(ans, nums[idx] * (l[idx] + r[idx] - 1 ))\\n        return  ans\\n```",
                "solutionTags": [],
                "code": "```k```\n```nums[idx]```\n```nums[idx]```\n```nums = [1,4,3,7,4,5]```\n```nums[1] = 4```\n```1```\n```nums[2] = 3```\n```2```\n```nums[3] = 7```\n```1```\n```l```\n```r```\n```n = [1, 4, 5, 7, 4, 5]```\n```l =  [1, 1, 2, 1, 2, 1]```\n```r =  [6, 5, 4, 1, 2, 1]```\n```nums[idx] * (right[idx] - left[idx] - 1)```\n```l and r```\n```nums[1] = 4```\n```l[1] + r[1] - 1 = 5```\n```k```\n```idx <= k```\n```idx > k```\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        n, l, r = len(nums), [1], [1]\\n        # left index array\\n        st = [[nums[0], 0]]\\n        for idx in range(1, n):\\n            while st and st[-1][0] >= nums[idx]:\\n                st.pop()\\n            if st:\\n                l.append(idx - st[-1][1])\\n            else:\\n                l.append(idx + 1)\\n            st.append([nums[idx], idx])\\n\\t\\t#right index array\\n        st = [[nums[-1], n - 1]]\\n        for idx in range(n - 2, -1, -1):\\n            while st and st[-1][0] >= nums[idx]:\\n                st.pop()\\n            if st:\\n                r.append(st[-1][1] - idx)\\n            else:\\n                r.append(n - idx)\\n            st.append([nums[idx], idx])\\n        r.reverse()\\n        \\n\\t\\t#add judge to make sure i <= k <= j\\n        ans = -1\\n        for idx in range(n):\\n            if idx <= k:\\n                if idx + r[idx] > k:\\n                    ans = max(ans, nums[idx] * (l[idx] + r[idx] - 1 ))\\n            else:\\n                if idx - l[idx] < k:\\n                    ans = max(ans, nums[idx] * (l[idx] + r[idx] - 1 ))\\n        return  ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108326,
                "title": "python3-greedy-2-pointer",
                "content": "\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        ans = mn = nums[k]\\n        lo = hi = k\\n        while 0 <= lo-1 or hi+1 < len(nums): \\n            if lo == 0 or hi+1 < len(nums) and nums[lo-1] < nums[hi+1]: \\n                hi += 1\\n                mn = min(mn, nums[hi])\\n            else: \\n                lo -= 1\\n                mn = min(mn, nums[lo])\\n            ans = max(ans, mn * (hi-lo+1))\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        ans = mn = nums[k]\\n        lo = hi = k\\n        while 0 <= lo-1 or hi+1 < len(nums): \\n            if lo == 0 or hi+1 < len(nums) and nums[lo-1] < nums[hi+1]: \\n                hi += 1\\n                mn = min(mn, nums[hi])\\n            else: \\n                lo -= 1\\n                mn = min(mn, nums[lo])\\n            ans = max(ans, mn * (hi-lo+1))\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108431,
                "title": "c-binary-search-and-precomputation",
                "content": "```\\nclass Solution {\\npublic:\\n    int findupper(int val1 , vector<int>&minval1)\\n    {https://leetcode.com/explore/\\n        int l = 0;\\n        int h = minval1.size()-1;\\n        int ans = -1;\\n        while(l<=h)\\n        {\\n            int m = (l+h)/2;\\n            if(minval1[m] >= val1)\\n            {\\n                ans = m;\\n                l = m+1;\\n            }\\n            else\\n            {\\n                h = m-1;\\n            }\\n        }\\n        return ans;\\n    }\\n    int maximumScore(vector<int>& nums, int k) {\\n        vector<int>minval1;\\n        vector<int>minval2;\\n        int val1 = INT_MAX;\\n        for(int i = k;i>=0;i--)\\n        {\\n           val1 = min(val1,nums[i]);\\n            minval1.push_back(val1);\\n        }\\n        val1 = INT_MAX;\\n           for(int i = k;i<nums.size();i++)\\n        {\\n            val1 = min(val1,nums[i]);\\n            minval2.push_back(val1);\\n        }\\n        int ans = nums[k];\\n        int n = nums.size();\\n        val1 = INT_MAX;\\n        for(int i = k;i<n;i++)\\n        {\\n            val1 = min(val1,nums[i]);\\n            int idx = findupper(val1,minval1);\\n            idx = k-idx;\\n            if(idx != -1)\\n            {\\n                ans = max(ans , val1*(i-idx+1));\\n            }\\n        }\\n        val1 = INT_MAX;\\n        for(int i = k;i>=0;i--)\\n        {\\n            val1 = min(val1,nums[i]);\\n            int idx = findupper(val1,minval2);\\n            idx += k;\\n            if(idx != -1)\\n            {\\n                ans = max(ans , val1*(idx-i+1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**Explaination**\\nFirst I stored the minimum value from k to 0 and then from k to n-1;\\nfor particular subarray length i found from another subarray what is best length i can take such that minimum value is not get affected.\\nTry to think a little bit and it will become easy.\\n\\n**For example**\\n\\na1 a2 a3........ ak ak+1 ......................... an-1;\\ni start from ak then ak+1 i found the length from  ak,ak-1,....a1 such that minimun value is not get affected so that i can know minimum value in subarray and find the answer.\\ni tried for all indices of array and find the optimal answer.",
                "solutionTags": [
                    "C",
                    "Binary Tree"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int findupper(int val1 , vector<int>&minval1)\\n    {https://leetcode.com/explore/\\n        int l = 0;\\n        int h = minval1.size()-1;\\n        int ans = -1;\\n        while(l<=h)\\n        {\\n            int m = (l+h)/2;\\n            if(minval1[m] >= val1)\\n            {\\n                ans = m;\\n                l = m+1;\\n            }\\n            else\\n            {\\n                h = m-1;\\n            }\\n        }\\n        return ans;\\n    }\\n    int maximumScore(vector<int>& nums, int k) {\\n        vector<int>minval1;\\n        vector<int>minval2;\\n        int val1 = INT_MAX;\\n        for(int i = k;i>=0;i--)\\n        {\\n           val1 = min(val1,nums[i]);\\n            minval1.push_back(val1);\\n        }\\n        val1 = INT_MAX;\\n           for(int i = k;i<nums.size();i++)\\n        {\\n            val1 = min(val1,nums[i]);\\n            minval2.push_back(val1);\\n        }\\n        int ans = nums[k];\\n        int n = nums.size();\\n        val1 = INT_MAX;\\n        for(int i = k;i<n;i++)\\n        {\\n            val1 = min(val1,nums[i]);\\n            int idx = findupper(val1,minval1);\\n            idx = k-idx;\\n            if(idx != -1)\\n            {\\n                ans = max(ans , val1*(i-idx+1));\\n            }\\n        }\\n        val1 = INT_MAX;\\n        for(int i = k;i>=0;i--)\\n        {\\n            val1 = min(val1,nums[i]);\\n            int idx = findupper(val1,minval2);\\n            idx += k;\\n            if(idx != -1)\\n            {\\n                ans = max(ans , val1*(idx-i+1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108268,
                "title": "python3-simple-fastest",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        i, j = k, k\\n        ans = nums[k]\\n        heap = [nums[k]]\\n        \\n        while i > 0 or j < len(nums)-1:\\n            # Case 1: We can either pick element from left side(i.e, decrease i) or from the right side(increase j)\\n            if i > 0 and j < len(nums) - 1:\\n                # Case 1.1: left element is greater than right element\\n                if nums[i-1] > nums[j+1]:\\n                    i -= 1\\n                    heappush(heap, nums[i])\\n                else:\\n                    j += 1\\n                    heappush(heap, nums[j])\\n            # Case 2: We can only pick element from left side\\n            elif i > 0:\\n                i -= 1\\n                heappush(heap, nums[i])\\n            # Case 3: We can only pick element from right side\\n            else:\\n                j += 1\\n                heappush(heap, nums[j])\\n\\n            ans = max(ans, heap[0]*(j-i+1))\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        i, j = k, k\\n        ans = nums[k]\\n        heap = [nums[k]]\\n        \\n        while i > 0 or j < len(nums)-1:\\n            # Case 1: We can either pick element from left side(i.e, decrease i) or from the right side(increase j)\\n            if i > 0 and j < len(nums) - 1:\\n                # Case 1.1: left element is greater than right element\\n                if nums[i-1] > nums[j+1]:\\n                    i -= 1\\n                    heappush(heap, nums[i])\\n                else:\\n                    j += 1\\n                    heappush(heap, nums[j])\\n            # Case 2: We can only pick element from left side\\n            elif i > 0:\\n                i -= 1\\n                heappush(heap, nums[i])\\n            # Case 3: We can only pick element from right side\\n            else:\\n                j += 1\\n                heappush(heap, nums[j])\\n\\n            ans = max(ans, heap[0]*(j-i+1))\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2507927,
                "title": "most-efficient-solution-in-python",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        N = len(nums)\\n        score = minVal = nums[k]\\n        l, r = k, k\\n        while l >= 0 or r < N:\\n            while l >= 0 and nums[l] >= minVal: l -= 1\\n            while r < N and nums[r] >= minVal: r += 1\\n            w = r - l - 1\\n            temp = minVal*w\\n            score = max(temp, score)\\n            minVal = max(nums[l] if l >= 0 else 0, nums[r] if r < N else 0)\\n                \\n        return score\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        N = len(nums)\\n        score = minVal = nums[k]\\n        l, r = k, k\\n        while l >= 0 or r < N:\\n            while l >= 0 and nums[l] >= minVal: l -= 1\\n            while r < N and nums[r] >= minVal: r += 1\\n            w = r - l - 1\\n            temp = minVal*w\\n            score = max(temp, score)\\n            minVal = max(nums[l] if l >= 0 else 0, nums[r] if r < N else 0)\\n                \\n        return score\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108534,
                "title": "java-two-pointers-easy-to-understand-greedy",
                "content": "### ***Here I am discussing my approach to this problem.***\\n**Approach (Greedy** | **Two Pointers):** \\n1. We are initially at index k.\\n2. At any point of time, we can either move to the left of current index or to the right of current index.\\n3. We maintain two points, ```i` (for left pointer)``` and ```j (for right pointer)``` and a value ```ans``` which will store the current maximum till now.\\n4. We then compare the result we get after moving to left by 1 step and moving to right by 1 step. \\n5. We then compare these two values and move the corresponding pointer accordingly.\\n6. We stop when ``` i >= 0 || j < n``` gets false.\\n\\n**My Source Code:**\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length;\\n        int i = k - 1, j = k + 1;\\n        int min = nums[k];\\n        int ans = min;\\n        \\n        while(i >= 0 || j < n) {\\n            int v1 = 0, v2 = 0;\\n            int min1 = min, min2 = min;\\n            \\n            if(i >= 0) {\\n                min1 = Math.min(min, nums[i]);\\n                v1 = min1 * (j - i);\\n            }\\n            \\n            if(j < n) {\\n                min2 = Math.min(min, nums[j]);\\n                v2 = min2 * (j - i);\\n            }\\n            \\n            if(v1 > v2) {\\n                --i;\\n                ans = Math.max(v1, ans);\\n                min = Math.min(min1, min);\\n            }\\n            else {\\n                ++j;\\n                ans = Math.max(ans, v2);\\n                min = Math.min(min, min2);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```\\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(1)\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```i` (for left pointer)```\n```j (for right pointer)```\n```ans```\n``` i >= 0 || j < n```\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length;\\n        int i = k - 1, j = k + 1;\\n        int min = nums[k];\\n        int ans = min;\\n        \\n        while(i >= 0 || j < n) {\\n            int v1 = 0, v2 = 0;\\n            int min1 = min, min2 = min;\\n            \\n            if(i >= 0) {\\n                min1 = Math.min(min, nums[i]);\\n                v1 = min1 * (j - i);\\n            }\\n            \\n            if(j < n) {\\n                min2 = Math.min(min, nums[j]);\\n                v2 = min2 * (j - i);\\n            }\\n            \\n            if(v1 > v2) {\\n                --i;\\n                ans = Math.max(v1, ans);\\n                min = Math.min(min1, min);\\n            }\\n            else {\\n                ++j;\\n                ans = Math.max(ans, v2);\\n                min = Math.min(min, min2);\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```\n```\\nTime Complexity: O(n)\\nSpace Complexity: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108271,
                "title": "c-o-n-time-greedy",
                "content": "See my latest update in repo [LeetCode](https://github.com/lzl124631x/LeetCode)\\n\\n## Solution 1.\\n\\nUse a window `[i + 1, j - 1]` starting from `[k, k]` and extend it to the length of `A`.\\n\\nThe length of the window will mono-increase with the same amount = 1 in either direction, so we just always pick the direction which has a greater min value.\\n\\nIf `lmin == rmin`, extending either direction is fine. Assume we keep extending leftwards until `lmin != rmin`, and in this case `lmin` must be `< rmin`, so our algorithm will start to extend rightwards.\\n\\n```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-232/problems/maximum-score-of-a-good-subarray/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int i = k - 1, j = k + 1, N = A.size(), ans = A[k], mn = A[k];  // `i` and `j` point to the next left and right element to extend, respectively. `mn` is the min value within window `[i + 1, j - 1]`.\\n        for (int len = 2; len <= N; ++len) {\\n            int lmin = min(mn, i >= 0 ? A[i] : 0); // if extending leftwards, the new min value is lmin\\n            int rmin = min(mn, j < N ? A[j] : 0); // if extending rightwards, the new min value is rmin\\n            if (lmin >= rmin) --i; // extending leftwards is as good as or better than extending rightwards.\\n            else ++j;\\n            mn = max(lmin, rmin);\\n            ans = max(ans, mn * len);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```cpp\\n// OJ: https://leetcode.com/contest/weekly-contest-232/problems/maximum-score-of-a-good-subarray/\\n// Author: github.com/lzl124631x\\n// Time: O(N)\\n// Space: O(1)\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int i = k - 1, j = k + 1, N = A.size(), ans = A[k], mn = A[k];  // `i` and `j` point to the next left and right element to extend, respectively. `mn` is the min value within window `[i + 1, j - 1]`.\\n        for (int len = 2; len <= N; ++len) {\\n            int lmin = min(mn, i >= 0 ? A[i] : 0); // if extending leftwards, the new min value is lmin\\n            int rmin = min(mn, j < N ? A[j] : 0); // if extending rightwards, the new min value is rmin\\n            if (lmin >= rmin) --i; // extending leftwards is as good as or better than extending rightwards.\\n            else ++j;\\n            mn = max(lmin, rmin);\\n            ans = max(ans, mn * len);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3606778,
                "title": "two-pointer-c",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.size();\\n        while (i > 0 or j < n - 1) {\\n            if(i==0){\\n                j++;\\n            }else if(j==n-1){\\n                i--;\\n            }else if(A[i-1]<A[j+1]){\\n                j++;\\n            }else{\\n                i--;\\n            }\\n            mini = min(mini,min(A[i],A[j]));\\n            res = max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int res = A[k], mini = A[k], i = k, j = k, n = A.size();\\n        while (i > 0 or j < n - 1) {\\n            if(i==0){\\n                j++;\\n            }else if(j==n-1){\\n                i--;\\n            }else if(A[i-1]<A[j+1]){\\n                j++;\\n            }else{\\n                i--;\\n            }\\n            mini = min(mini,min(A[i],A[j]));\\n            res = max(res, mini * (j - i + 1));\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3108131,
                "title": "python-3-10-lines-two-ptrs-t-m-93-92",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n\\n        left = right = k  ;  ans = mn = nums[k]\\n        n = len(nums)\\n\\n        while left > 0 or right < n - 1:\\n            while left  >     0 and nums[left  - 1] >= mn: left  -= 1\\n            while right < n - 1 and nums[right + 1] >= mn: right += 1\\n\\n            ans = max(ans, (right - left + 1) * mn)\\n\\n            beg = nums[left  - 1] if left  >     0 else -1\\n            end = nums[right + 1] if right < n - 1 else -1\\n\\n            mn = max(beg, end)\\n\\n        return ans\\n```\\n[https://leetcode.com/problems/maximum-score-of-a-good-subarray/submissions/886679912/](http://)\\n\\n\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(1).",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n\\n        left = right = k  ;  ans = mn = nums[k]\\n        n = len(nums)\\n\\n        while left > 0 or right < n - 1:\\n            while left  >     0 and nums[left  - 1] >= mn: left  -= 1\\n            while right < n - 1 and nums[right + 1] >= mn: right += 1\\n\\n            ans = max(ans, (right - left + 1) * mn)\\n\\n            beg = nums[left  - 1] if left  >     0 else -1\\n            end = nums[right + 1] if right < n - 1 else -1\\n\\n            mn = max(beg, end)\\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2598522,
                "title": "c-2-pointer-easy-with-comments-constant-space",
                "content": "IF YOU LIKE IT , THEN UPVOTE!\\n\\n///\\n\\nclass Solution {\\npublic:\\n\\n    int maximumScore(vector<int>& nums, int k) {\\n        int leftSide,rightSide;\\n        leftSide = k;\\n        rightSide = k;\\n        int mini = nums[k]; // Make the potential ans as minimum value and compare other values with it\\n        int ans = nums[k];  // The potential answer\\n        \\n        while(leftSide > 0 || rightSide < nums.size() - 1)  // Here we\\'ll check for left side or right or both \\n        {\\n            if(leftSide > 0 && rightSide < nums.size() -1)  // To check for left and right both sides ,i.e [3,7] and [7,4] both sides of k\\n            {\\n                if(nums[leftSide - 1] > nums[rightSide + 1]) // if left is bigger we\\'ll select smaller value from left\\n                {\\n                    leftSide--;\\n                    mini = min(mini,nums[leftSide]);\\n                }\\n                else  // if right is bigger we\\'ll select smaller value from right\\n                {\\n                    rightSide++;\\n                    mini = min(mini,nums[rightSide]);\\n                }\\n            }\\n            else if(leftSide >0)  // to check all the value on left\\n            {\\n                leftSide--;  //shift to only left\\n                mini = min(mini,nums[leftSide]);\\n            }\\n            else  // To check all the values on right\\n            { \\n                rightSide++; // shift to only right\\n                mini = min(mini,nums[rightSide]);\\n            }\\n            \\n            ans = max(ans,mini*(rightSide-leftSide + 1));  // calculate the answer for each size and store the maximum answer\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int maximumScore(vector<int>& nums, int k) {\\n        int leftSide,rightSide;\\n        leftSide = k;\\n        rightSide = k;\\n        int mini = nums[k]; // Make the potential ans as minimum value and compare other values with it\\n        int ans = nums[k];  // The potential answer\\n        \\n        while(leftSide > 0 || rightSide < nums.size() - 1)  // Here we\\'ll check for left side or right or both \\n        {\\n            if(leftSide > 0 && rightSide < nums.size() -1)  // To check for left and right both sides ,i.e [3,7] and [7,4] both sides of k\\n            {\\n                if(nums[leftSide - 1] > nums[rightSide + 1]) // if left is bigger we\\'ll select smaller value from left\\n                {\\n                    leftSide--;\\n                    mini = min(mini,nums[leftSide]);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1434847,
                "title": "c-two-pointer-approach-with-time-o-n",
                "content": "```\\n/*\\ntake i=k and j=k\\nif(nums[i-1]<nums[j+1]) then do i-- because you will get more score this side because min will be more \\nelse if(nums[i-1]<= nums[j+1]) then do j++ because you will be getting good score this side\\n\\ncreate a min variable and each time evaluate min when you are updating i or j and update ans accordingly \\n\\nedge case\\n1) suppose k=0 in this case you can\\'t decrement i so you have to just increase j\\n2) k=n-1  in this case you can\\'t increase j so you will decrease i only\\n*/\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n    \\n        int n=nums.size();\\n        if(n==1)\\n            return nums[0];\\n        int i=k;\\n        int j=k;\\n        int mn=nums[k];\\n        int ans=0;\\n        while(i>0 || j<n-1){\\n            if(i==0){\\n                j++;\\n            }else if(j==n-1){\\n                i--;\\n            }else if(nums[i-1] < nums[j+1]){\\n               j++;\\n            }else{\\n               i--;\\n            }\\n            mn=min(mn, min(nums[i],nums[j]));\\n             ans=max(ans,mn*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n/*\\ntake i=k and j=k\\nif(nums[i-1]<nums[j+1]) then do i-- because you will get more score this side because min will be more \\nelse if(nums[i-1]<= nums[j+1]) then do j++ because you will be getting good score this side\\n\\ncreate a min variable and each time evaluate min when you are updating i or j and update ans accordingly \\n\\nedge case\\n1) suppose k=0 in this case you can\\'t decrement i so you have to just increase j\\n2) k=n-1  in this case you can\\'t increase j so you will decrease i only\\n*/\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n    \\n        int n=nums.size();\\n        if(n==1)\\n            return nums[0];\\n        int i=k;\\n        int j=k;\\n        int mn=nums[k];\\n        int ans=0;\\n        while(i>0 || j<n-1){\\n            if(i==0){\\n                j++;\\n            }else if(j==n-1){\\n                i--;\\n            }else if(nums[i-1] < nums[j+1]){\\n               j++;\\n            }else{\\n               i--;\\n            }\\n            mn=min(mn, min(nums[i],nums[j]));\\n             ans=max(ans,mn*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2534977,
                "title": "priority-queue-solution-cpp",
                "content": "```\\n#define pr pair<int,int>\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        priority_queue<pr,vector<pr>,greater<pr>>q;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            q.push({nums[i],i});\\n        }\\n        \\n        int ans=INT_MIN;\\n        int i=0,j=nums.size()-1;\\n        \\n        while(i<=k && j>=k){\\n            auto ele=q.top();\\n            int mini= ele.first;\\n            int ind = ele.second;\\n            q.pop();\\n            \\n            ans=max(ans,mini*(j-i+1));\\n            \\n            if(ind>=k && ind<=j){\\n                j=ind-1;\\n            }\\n            \\n            else if(ind<=k && ind>=i){\\n                i=ind+1;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "Heap (Priority Queue)"
                ],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        priority_queue<pr,vector<pr>,greater<pr>>q;\\n        \\n        for(int i=0;i<nums.size();i++){\\n            q.push({nums[i],i}",
                "codeTag": "Java"
            },
            {
                "id": 1832155,
                "title": "simple-solution-next-greater-element",
                "content": "**Idea?**\\n* Compute **next smaller element for every to the left as well as right** of it.\\n* For every element, consider the range **[left[i]+1,right[i]+1]**, where left[i] = index of smaller element to the left of current element, and right[i] = index of greater element to the right of current element.\\n* **Discard those ranges which doesn\\'t contain k**.\\n* Maximize answer for every range that contains k.\\n```\\nclass Solution {\\npublic:\\n    // Time Complexity:- O(N)\\n    // Space Complexity:- O(N)\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> left(n,-1),right(n,n);\\n        \\n        stack<int> s;\\n        for(int i=0;i<n;i++){\\n            while(!s.empty() and nums[s.top()]>nums[i]){\\n                right[s.top()] = i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }        \\n        while(!s.empty()){\\n            s.pop();\\n        }        \\n        for(int i=n-1;i>=0;i--){\\n            while(!s.empty() and nums[s.top()]>nums[i]){\\n                left[s.top()] = i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }        \\n        int ans = INT_MIN;\\n        for(int i=0;i<n;i++){\\n            if(left[i]>=k or right[i]<=k){\\n                continue;\\n            }\\n            ans = max(ans,(right[i]-left[i]-1)*nums[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // Time Complexity:- O(N)\\n    // Space Complexity:- O(N)\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> left(n,-1),right(n,n);\\n        \\n        stack<int> s;\\n        for(int i=0;i<n;i++){\\n            while(!s.empty() and nums[s.top()]>nums[i]){\\n                right[s.top()] = i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }        \\n        while(!s.empty()){\\n            s.pop();\\n        }        \\n        for(int i=n-1;i>=0;i--){\\n            while(!s.empty() and nums[s.top()]>nums[i]){\\n                left[s.top()] = i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }        \\n        int ans = INT_MIN;\\n        for(int i=0;i<n;i++){\\n            if(left[i]>=k or right[i]<=k){\\n                continue;\\n            }\\n            ans = max(ans,(right[i]-left[i]-1)*nums[i]);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1729570,
                "title": "a-slight-different-approach-using-segment-trees-intuition-explained",
                "content": "***Although this is not the most optimal method to solve this problem, but one should know multiple ways to solve a problem(iff multiple methods exist)***\\n**Intuition :**\\nsuppose we have a segment like : \\n``` \\n3 5 6 1 8 9 10\\n```\\nthen  the value for this sub array will be `1 * (length) = 7 ` \\nnow if we want a better answer...our best bet is to exclude the minimum element so that the minimum increases\\nso the two new possible segments will be : \\n```\\n[3 5 6 ] , [8 9 10] \\n```\\nso we can recurisvely solve for smaller and smaller segments and choose the largest value we encounter\\n\\nNow coming back to the question, \\nwe start by considering the whole array and on each step recursively process smaller and smaller subarrays(using pointers)\\nBut!\\nwe have a limitation, the kth element has to be a part of every segment we consider\\nso...\\n* if the smallest element of the segment is the kth element of the array then we can\\'t exclude it and we just return `length_of_segment * nums[k ]`\\n* if the smallest element of the segment is on the left of the kth element of the array we return `max(length_of_segment * smallest_element , resurse(smallest_element_index + 1 , end)`\\n* if the smallest element of the segment is on the right of the kth element of the array we return `max(length_of_segment * smallest_element , resurse(start , smallest_element_index - 1)`\\n\\n**Queries for minimum element in a sub-segment can be processed using Segment Trees in roughly O(NlogN)**\\n\\n**Code:**\\n```\\nclass Node { \\npublic: \\n    int start , end , min ; //here min is storing index of minimum element in the segment NOT the actual minimum value\\n    Node *left , *right ; \\n    Node(int _start , int _end) {\\n        this->start = _start ; \\n        this->end = _end ; \\n        this->left = this->right = NULL ; \\n    };\\n};\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size() ; \\n        Node *root = build(nums , 0 , n - 1) ;\\n        return best(nums , 0 , n - 1 , root , k) ; \\n    }\\nprivate: \\n    Node* build(vector<int> &nums , int start , int end) {//building the segment tree recursively\\n        if (start > end)    return NULL ; \\n        Node *root = new Node(start , end) ; \\n        if (start == end) {\\n            root->min = start ; \\n            return root ; \\n        }\\n        int mid = (start + end) / 2 ;\\n        root->left = build(nums , start , mid) ; \\n        root->right = build(nums , mid + 1 , end) ; \\n        root->min = nums[root->left->min] < nums[root->right->min] ? root->left->min : root->right->min ;\\n        return root ; \\n    }\\n    int query(vector<int> &nums , int start , int end , Node *root) {\\n        if (!root || end < root->start || start > root->end)    return -1 ; //out of bounds \\n        if (start <= root->start && end >= root->end) { \\n            return root->min ;\\n        }\\n        int left_min = query(nums , start , end , root->left) ; \\n        int right_min = query(nums , start , end , root->right) ; \\n        if(left_min == -1)   return right_min ;\\n        if(right_min == -1)  return left_min ;\\n        return (nums[left_min] < nums[right_min] ? left_min : right_min) ;\\n    }\\n    int best(vector<int> &nums , int start , int end , Node *root , int k) {\\n        int min_index = query(nums , start , end , root) ;\\n        if(min_index == k) {\\n            return nums[k] * (end - start + 1) ;\\n        } else if (min_index < k) {\\n            return max(nums[min_index] * (end - start + 1) , best(nums , min_index + 1 , end , root , k)) ;\\n        } else {\\n            return max(nums[min_index] * (end - start + 1) , best(nums , start , min_index - 1 , root , k)) ;\\n        }\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Divide and Conquer",
                    "Tree",
                    "Recursion"
                ],
                "code": "``` \\n3 5 6 1 8 9 10\\n```\n```\\n[3 5 6 ] , [8 9 10] \\n```\n```\\nclass Node { \\npublic: \\n    int start , end , min ; //here min is storing index of minimum element in the segment NOT the actual minimum value\\n    Node *left , *right ; \\n    Node(int _start , int _end) {\\n        this->start = _start ; \\n        this->end = _end ; \\n        this->left = this->right = NULL ; \\n    };\\n};\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size() ; \\n        Node *root = build(nums , 0 , n - 1) ;\\n        return best(nums , 0 , n - 1 , root , k) ; \\n    }\\nprivate: \\n    Node* build(vector<int> &nums , int start , int end) {//building the segment tree recursively\\n        if (start > end)    return NULL ; \\n        Node *root = new Node(start , end) ; \\n        if (start == end) {\\n            root->min = start ; \\n            return root ; \\n        }\\n        int mid = (start + end) / 2 ;\\n        root->left = build(nums , start , mid) ; \\n        root->right = build(nums , mid + 1 , end) ; \\n        root->min = nums[root->left->min] < nums[root->right->min] ? root->left->min : root->right->min ;\\n        return root ; \\n    }\\n    int query(vector<int> &nums , int start , int end , Node *root) {\\n        if (!root || end < root->start || start > root->end)    return -1 ; //out of bounds \\n        if (start <= root->start && end >= root->end) { \\n            return root->min ;\\n        }\\n        int left_min = query(nums , start , end , root->left) ; \\n        int right_min = query(nums , start , end , root->right) ; \\n        if(left_min == -1)   return right_min ;\\n        if(right_min == -1)  return left_min ;\\n        return (nums[left_min] < nums[right_min] ? left_min : right_min) ;\\n    }\\n    int best(vector<int> &nums , int start , int end , Node *root , int k) {\\n        int min_index = query(nums , start , end , root) ;\\n        if(min_index == k) {\\n            return nums[k] * (end - start + 1) ;\\n        } else if (min_index < k) {\\n            return max(nums[min_index] * (end - start + 1) , best(nums , min_index + 1 , end , root , k)) ;\\n        } else {\\n            return max(nums[min_index] * (end - start + 1) , best(nums , start , min_index - 1 , root , k)) ;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1382495,
                "title": "c-tc-o-n-sc-o-1-2-pointers",
                "content": "# *Feel free to post your doubts in comment section*\\n```\\nint maximumScore(vector<int>& nums, int k) {\\n\\tint n=nums.size();\\n\\tint i=k,j=k;\\n\\tint ans = nums[k];\\n\\tint minValue = nums[k];\\n\\twhile( i>0 && j<n-1 ){\\n\\t\\tif( nums[j+1] > nums[i-1] ){\\n\\t\\t\\tj++;\\n\\t\\t\\tminValue = min ( minValue, nums[j]);\\n\\t\\t}else{\\n\\t\\t\\ti--;\\n\\t\\t\\tminValue = min ( minValue, nums[i]);\\n\\t\\t}\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\twhile( i!=0 ){\\n\\t\\ti--;\\n\\t\\tminValue = min ( minValue, nums[i] );\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\twhile( j!=n-1 ){\\n\\t\\tj++;\\n\\t\\tminValue = min ( minValue, nums[j] );\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\treturn ans;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n\\tint n=nums.size();\\n\\tint i=k,j=k;\\n\\tint ans = nums[k];\\n\\tint minValue = nums[k];\\n\\twhile( i>0 && j<n-1 ){\\n\\t\\tif( nums[j+1] > nums[i-1] ){\\n\\t\\t\\tj++;\\n\\t\\t\\tminValue = min ( minValue, nums[j]);\\n\\t\\t}else{\\n\\t\\t\\ti--;\\n\\t\\t\\tminValue = min ( minValue, nums[i]);\\n\\t\\t}\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\twhile( i!=0 ){\\n\\t\\ti--;\\n\\t\\tminValue = min ( minValue, nums[i] );\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\twhile( j!=n-1 ){\\n\\t\\tj++;\\n\\t\\tminValue = min ( minValue, nums[j] );\\n\\t\\tans = max( ans, ( minValue*(j-i+1) ) );\\n\\t}\\n\\treturn ans;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1277130,
                "title": "java-o-n-two-pointers",
                "content": "1. Start `l`,  `r ` at `k` and set `min = nums[k]`.\\n2. Extend `l` and `r` as far as possible until `nums[l - 1] < min` and `nums[r + 1] < min`. The reason for this is that any subarrays of `nums[i, j]` should be dominated by current `min` and we are guaranteed the length is maximum which lead to best score so far.\\n3. We need to pick a new minimum value at this stage. Pick `max(nums[l - 1], nums[r + 1])` as the new `min` to ensure not losing any candidates.\\n4. Repeat above steps until `l`,` r` hit bounds.\\n\\n```\\npublic int maximumScore(int[] nums, int k) {\\n\\tint n = nums.length;\\n\\tint l = k;\\n\\tint r = k;\\n\\tint min = nums[k];\\n\\tint maxScore = nums[k];\\n\\n\\twhile(true) {\\n\\t\\twhile(r + 1 < n && nums[r + 1] >= min) {\\n\\t\\t\\tr++;\\n\\t\\t}\\n\\t\\twhile(l - 1 >= 0 && nums[l - 1] >= min) {\\n\\t\\t\\tl--;\\n\\t\\t}\\n\\n\\t\\tmaxScore = Math.max(maxScore, min * (r - l + 1));\\n\\n\\t\\tif(l == 0 && r == n - 1) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif(l == 0) {\\n\\t\\t\\tmin = nums[r + 1];\\n\\t\\t} else if(r == n - 1) {\\n\\t\\t\\tmin = nums[l - 1];\\n\\t\\t} else {\\n\\t\\t\\tmin = Math.max(nums[r + 1], nums[l - 1]);\\n\\t\\t}\\n\\t}\\n\\n\\treturn maxScore;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int maximumScore(int[] nums, int k) {\\n\\tint n = nums.length;\\n\\tint l = k;\\n\\tint r = k;\\n\\tint min = nums[k];\\n\\tint maxScore = nums[k];\\n\\n\\twhile(true) {\\n\\t\\twhile(r + 1 < n && nums[r + 1] >= min) {\\n\\t\\t\\tr++;\\n\\t\\t}\\n\\t\\twhile(l - 1 >= 0 && nums[l - 1] >= min) {\\n\\t\\t\\tl--;\\n\\t\\t}\\n\\n\\t\\tmaxScore = Math.max(maxScore, min * (r - l + 1));\\n\\n\\t\\tif(l == 0 && r == n - 1) {\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t\\tif(l == 0) {\\n\\t\\t\\tmin = nums[r + 1];\\n\\t\\t} else if(r == n - 1) {\\n\\t\\t\\tmin = nums[l - 1];\\n\\t\\t} else {\\n\\t\\t\\tmin = Math.max(nums[r + 1], nums[l - 1]);\\n\\t\\t}\\n\\t}\\n\\n\\treturn maxScore;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1122791,
                "title": "super-easy-100-beats-c-stack-video-code-explanation",
                "content": "https://youtu.be/P0SA8NCKY3whttps://youtu.be/P0SA8NCKY3w\\n```\\nclass Solution {\\npublic:\\n    vector<int>NSR(vector<int>&nums)\\n    {\\n        stack<int>s;\\n        vector<int>res;\\n        for(int i=nums.size()-1;i>=0;i--)\\n        {\\n            while(!s.empty() && nums[s.top()]>=nums[i])\\n            {\\n                s.pop();\\n            }\\n            if(s.empty())\\n            {\\n                res.push_back(nums.size());\\n            }\\n            else\\n            {\\n                res.push_back(s.top());\\n            }\\n            s.push(i);\\n        }\\n        return res;\\n    }\\n    \\n    vector<int>NSL(vector<int>&nums)\\n    {\\n        stack<int>s;\\n        vector<int>res;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            while(!s.empty() && nums[s.top()]>=nums[i])\\n            {\\n                s.pop();\\n            }\\n            if(s.empty())\\n            {\\n                res.push_back(-1);\\n            }\\n            else\\n            {\\n                res.push_back(s.top());\\n            }\\n            s.push(i);\\n        }\\n        return res;\\n    }\\n    void print(vector<int>arr)\\n    {\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            cout<<arr[i]<<\" \";\\n        }\\n        cout<<endl;\\n    }\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int>nsl=NSL(nums);\\n        //print(nsl);\\n        vector<int>nsr=NSR(nums);\\n        reverse(nsr.begin(),nsr.end());\\n        //print(nsr);\\n        int score=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int l=nsl[i];\\n            int r=nsr[i];\\n            if(l+1<=k && r-1>=k)\\n            {\\n                score=max(score,nums[i]*(r-l-1));\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Stack",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int>NSR(vector<int>&nums)\\n    {\\n        stack<int>s;\\n        vector<int>res;\\n        for(int i=nums.size()-1;i>=0;i--)\\n        {\\n            while(!s.empty() && nums[s.top()]>=nums[i])\\n            {\\n                s.pop();\\n            }\\n            if(s.empty())\\n            {\\n                res.push_back(nums.size());\\n            }\\n            else\\n            {\\n                res.push_back(s.top());\\n            }\\n            s.push(i);\\n        }\\n        return res;\\n    }\\n    \\n    vector<int>NSL(vector<int>&nums)\\n    {\\n        stack<int>s;\\n        vector<int>res;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            while(!s.empty() && nums[s.top()]>=nums[i])\\n            {\\n                s.pop();\\n            }\\n            if(s.empty())\\n            {\\n                res.push_back(-1);\\n            }\\n            else\\n            {\\n                res.push_back(s.top());\\n            }\\n            s.push(i);\\n        }\\n        return res;\\n    }\\n    void print(vector<int>arr)\\n    {\\n        for(int i=0;i<arr.size();i++)\\n        {\\n            cout<<arr[i]<<\" \";\\n        }\\n        cout<<endl;\\n    }\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int>nsl=NSL(nums);\\n        //print(nsl);\\n        vector<int>nsr=NSR(nums);\\n        reverse(nsr.begin(),nsr.end());\\n        //print(nsr);\\n        int score=0;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            int l=nsl[i];\\n            int r=nsr[i];\\n            if(l+1<=k && r-1>=k)\\n            {\\n                score=max(score,nums[i]*(r-l-1));\\n            }\\n        }\\n        return score;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1108894,
                "title": "java-same-as-largest-histogram-with-one-extra-condition",
                "content": "Same as largest histogram problem, for every range we are checking in largest histrogram we just check if that range contains kth element or not and upadte the result.\\nThe only diff btw the two codes is in this problem we are checking if k lies int the subarray range before updating the result\\n```\\nclass Solution {\\n    public int maximumScore(int[] hist, int k) {\\n        Stack<Integer> st=new Stack<>();\\n        int res=0;\\n        for(int i=0;i<hist.length;i++){\\n            if(st.isEmpty()||hist[i]>=hist[st.peek()])\\n                st.push(i);\\n            else{\\n                int q=st.pop();\\n                int l=st.isEmpty()?0:st.peek()+1,r=i-1;  \\n                //current subarray range : [l,r]\\n\\t\\t\\t\\t//this if condition is only modification done to largest histogram problem\\n                if(l<=k&&k<=r)\\n                    res=Math.max(res,hist[q]*(st.isEmpty()?i:i-1-st.peek()));\\n                i--;\\n            }\\n        }\\n        while(!st.isEmpty()) {\\n            int ind=st.pop();\\n            int l=st.isEmpty()?0:st.peek()+1,r=hist.length-1;\\n            if(l<=k&&k<=r)\\n                res=Math.max(res,hist[ind]*(st.isEmpty()?hist.length:hist.length-1-st.peek()));\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] hist, int k) {\\n        Stack<Integer> st=new Stack<>();\\n        int res=0;\\n        for(int i=0;i<hist.length;i++){\\n            if(st.isEmpty()||hist[i]>=hist[st.peek()])\\n                st.push(i);\\n            else{\\n                int q=st.pop();\\n                int l=st.isEmpty()?0:st.peek()+1,r=i-1;  \\n                //current subarray range : [l,r]\\n\\t\\t\\t\\t//this if condition is only modification done to largest histogram problem\\n                if(l<=k&&k<=r)\\n                    res=Math.max(res,hist[q]*(st.isEmpty()?i:i-1-st.peek()));\\n                i--;\\n            }\\n        }\\n        while(!st.isEmpty()) {\\n            int ind=st.pop();\\n            int l=st.isEmpty()?0:st.peek()+1,r=hist.length-1;\\n            if(l<=k&&k<=r)\\n                res=Math.max(res,hist[ind]*(st.isEmpty()?hist.length:hist.length-1-st.peek()));\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108468,
                "title": "greedy-o-n-beats-100-time-and-memory-detailed-explanation",
                "content": "* Simple two pointer greedy approach --> We start with both pointers i and j at k as k is max value of i and min value of j.\\n* From here, i can only go left and j can only go right. We simply expand the gap between i and j iteratively and keep checking answer at each step  until i and j are out of bounds.\\n* The greedy choice is made when we\\'re deciding what direction to expand in at each step. As we\\'ve to take min at each step, we expand in the direction who\\'s next element is bigger, so that the min is maximised, so that in-turn our answer is maximised.\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i,j,mi,ans;\\n        i = j = k;\\n        mi = ans = nums[i];\\n        while(j<nums.size()-1||i>0){\\n            if((i>0?nums[i-1]:0)<(j<nums.size()-1?nums[j+1]:0)){\\n                mi = min(nums[++j],mi);\\n            }\\n            else{\\n                mi = min(nums[--i],mi);\\n            }\\n            ans = max(ans,mi*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i,j,mi,ans;\\n        i = j = k;\\n        mi = ans = nums[i];\\n        while(j<nums.size()-1||i>0){\\n            if((i>0?nums[i-1]:0)<(j<nums.size()-1?nums[j+1]:0)){\\n                mi = min(nums[++j],mi);\\n            }\\n            else{\\n                mi = min(nums[--i],mi);\\n            }\\n            ans = max(ans,mi*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108299,
                "title": "go-js-2-pointers-o-n-o-1",
                "content": "```go\\n/*\\n\\n\\tGO\\n\\n */\\nfunc maximumScore(nums []int, k int) int {\\n    numsLen := len(nums)\\n    \\n    // iterate to the left to update the minimum value at each index\\n    minVal := nums[k]\\n    for i := k - 1; i >= 0; i-- {\\n        minVal = min(minVal, nums[i])\\n        nums[i] = minVal\\n    }\\n    \\n    // iterate to the right to update the minimum value at each index\\n    minVal = nums[k]\\n    for i := k + 1; i < numsLen; i++ {\\n        minVal = min(minVal, nums[i])\\n        nums[i] = minVal\\n    }\\n    \\n    // start with 2 pointers at opposite ends of nums\\n    bestScore, left, right := 0, 0, numsLen - 1\\n    for left <= right {\\n        bestScore = max(bestScore, min(nums[left], nums[right]) * (right - left + 1))\\n        \\n        // first to check if either pointer is at k\\n        // if it is at k then we must move the other pointer inwards\\n        if left == k {\\n            right--\\n        } else if right == k {\\n            left++\\n            \\n        // if neither index is at k move the pointer\\n        // that is smaller inwards\\n        } else if nums[left] < nums[right] {\\n            left++\\n        } else {\\n            right--\\n        }\\n    }\\n    return bestScore\\n}\\n\\nfunc min(x, y int) int {\\n    if x < y {\\n        return x\\n    }\\n    return y\\n}\\n\\nfunc max(x, y int) int {\\n    if x > y {\\n        return x\\n    }\\n    return y\\n}\\n```\\n```javascript\\n/*\\n\\n\\tJAVASCRIPT\\n\\n */\\nvar maximumScore = function(nums, k) {\\n    // iterate to the left to update the minimum value at each index\\n    let min = nums[k];\\n    for (let i = k - 1; i >= 0; i--) {\\n        min = Math.min(min, nums[i]);\\n        nums[i] = min;\\n    }\\n\\n    // iterate to the right to update the minimum value at each index\\n    min = nums[k];\\n    for (let i = k + 1; i < nums.length; i++) {\\n        min = Math.min(min, nums[i]);\\n        nums[i] = min;\\n    }\\n    \\n    // start with 2 pointers at opposite ends of nums\\n    let left = 0;\\n    let right = nums.length - 1;\\n    let bestScore = 0;\\n\\n    while (left <= right) {\\n        bestScore = Math.max(bestScore, Math.min(nums[left], nums[right]) * (right - left + 1));\\n        \\n        // first to check if either pointer is at k\\n        // if it is at k then we must move the other pointer inwards\\n        if (left === k) {\\n            right--;\\n        } else if (right === k) {\\n            left++\\n            \\n        // if neither index is at k move the pointer\\n        // that is smaller inwards\\n        } else if (nums[left] < nums[right]) {\\n            left++;\\n        } else {\\n            right--;\\n        }\\n    }\\n    return bestScore;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Go"
                ],
                "code": "```go\\n/*\\n\\n\\tGO\\n\\n */\\nfunc maximumScore(nums []int, k int) int {\\n    numsLen := len(nums)\\n    \\n    // iterate to the left to update the minimum value at each index\\n    minVal := nums[k]\\n    for i := k - 1; i >= 0; i-- {\\n        minVal = min(minVal, nums[i])\\n        nums[i] = minVal\\n    }\\n    \\n    // iterate to the right to update the minimum value at each index\\n    minVal = nums[k]\\n    for i := k + 1; i < numsLen; i++ {\\n        minVal = min(minVal, nums[i])\\n        nums[i] = minVal\\n    }\\n    \\n    // start with 2 pointers at opposite ends of nums\\n    bestScore, left, right := 0, 0, numsLen - 1\\n    for left <= right {\\n        bestScore = max(bestScore, min(nums[left], nums[right]) * (right - left + 1))\\n        \\n        // first to check if either pointer is at k\\n        // if it is at k then we must move the other pointer inwards\\n        if left == k {\\n            right--\\n        } else if right == k {\\n            left++\\n            \\n        // if neither index is at k move the pointer\\n        // that is smaller inwards\\n        } else if nums[left] < nums[right] {\\n            left++\\n        } else {\\n            right--\\n        }\\n    }\\n    return bestScore\\n}\\n\\nfunc min(x, y int) int {\\n    if x < y {\\n        return x\\n    }\\n    return y\\n}\\n\\nfunc max(x, y int) int {\\n    if x > y {\\n        return x\\n    }\\n    return y\\n}\\n```\n```javascript\\n/*\\n\\n\\tJAVASCRIPT\\n\\n */\\nvar maximumScore = function(nums, k) {\\n    // iterate to the left to update the minimum value at each index\\n    let min = nums[k];\\n    for (let i = k - 1; i >= 0; i--) {\\n        min = Math.min(min, nums[i]);\\n        nums[i] = min;\\n    }\\n\\n    // iterate to the right to update the minimum value at each index\\n    min = nums[k];\\n    for (let i = k + 1; i < nums.length; i++) {\\n        min = Math.min(min, nums[i]);\\n        nums[i] = min;\\n    }\\n    \\n    // start with 2 pointers at opposite ends of nums\\n    let left = 0;\\n    let right = nums.length - 1;\\n    let bestScore = 0;\\n\\n    while (left <= right) {\\n        bestScore = Math.max(bestScore, Math.min(nums[left], nums[right]) * (right - left + 1));\\n        \\n        // first to check if either pointer is at k\\n        // if it is at k then we must move the other pointer inwards\\n        if (left === k) {\\n            right--;\\n        } else if (right === k) {\\n            left++\\n            \\n        // if neither index is at k move the pointer\\n        // that is smaller inwards\\n        } else if (nums[left] < nums[right]) {\\n            left++;\\n        } else {\\n            right--;\\n        }\\n    }\\n    return bestScore;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1108274,
                "title": "python-greedy-two-pointer-with-simple-proof-for-greedy",
                "content": "Two Pointer: Most of the two pointers are either chasing or approaching. This one is special. It is like expanding.\\nSimple Proof by Contradiction for Greedy: In case, the two pointers goes to lower-value but with a final max score. We can include the higher value, which makes a even higher max score which caused the contradiction\\n\\n```\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nums.insert(0, -1)\\n        nums.append(-1)\\n        k += 1  # simplify the two pointer while loop\\n\\n        left = k\\n        right = k  # initiate two pointers\\n\\n        mi = nums[k]\\n        cnt = 1\\n        score = mi * cnt  # statistic variables\\n\\n        max_score = score\\n        while nums[left - 1] > 0 or nums[right + 1] > 0:\\n            left_val = nums[left - 1]\\n            right_val = nums[right + 1]  # next move?\\n            if right_val > left_val:  # better chance to have higher min value\\n                right += 1\\n                mi = min(mi, right_val)\\n                cnt += 1\\n                score = mi * cnt\\n            else:  # greedy: better chance to have higher min -> higher score\\n                left -= 1\\n                mi = min(mi, left_val)\\n                cnt += 1\\n                score = mi * cnt\\n            max_score = max(max_score, score)\\n        return max_score\\n```\\n",
                "solutionTags": [],
                "code": "```\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nums.insert(0, -1)\\n        nums.append(-1)\\n        k += 1  # simplify the two pointer while loop\\n\\n        left = k\\n        right = k  # initiate two pointers\\n\\n        mi = nums[k]\\n        cnt = 1\\n        score = mi * cnt  # statistic variables\\n\\n        max_score = score\\n        while nums[left - 1] > 0 or nums[right + 1] > 0:\\n            left_val = nums[left - 1]\\n            right_val = nums[right + 1]  # next move?\\n            if right_val > left_val:  # better chance to have higher min value\\n                right += 1\\n                mi = min(mi, right_val)\\n                cnt += 1\\n                score = mi * cnt\\n            else:  # greedy: better chance to have higher min -> higher score\\n                left -= 1\\n                mi = min(mi, left_val)\\n                cnt += 1\\n                score = mi * cnt\\n            max_score = max(max_score, score)\\n        return max_score\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3250361,
                "title": "java-largest-ractangle-in-histogram-nsr-nsl",
                "content": "# Intuition\\n###### Prerequisite : Largest Area in Histogram || Next Smaller on left || Next Smaller on right \\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int [] nsr = findNSR(nums);\\n        int [] nsl = findNSL(nums);\\n        \\n        int score =0;\\n        for(int i=0;i<nums.length;i++){\\n           int l = nsl[i];\\n           int r = nsr[i];\\n           if(l+1 <= k && r-1>= k){\\n               score = Math.max(score,nums[i] *(r-l-1));\\n           }\\n        }\\n        return score;\\n    }\\n\\n//find next smaller element on right \\n    public int[] findNSR(int [] arr){\\n        int [] nsr = new int[arr.length];\\n        Stack<Integer> s = new Stack<>();\\n        for(int i=arr.length-1;i>=0;i--){\\n            while(!s.isEmpty() && arr[i] <= arr[s.peek()] ){\\n                s.pop();\\n            }\\n            if(s.isEmpty()){\\n                nsr[i] =arr.length;\\n            }\\n            else{\\n                nsr[i] = s.peek();\\n            }\\n            s.push(i);\\n        }\\n        return nsr;\\n\\n    }\\n        //find next smaller element on left \\n\\n    public int[] findNSL(int [] arr){\\n        int [] nsl = new int[arr.length];\\n        Stack<Integer> s = new Stack<>();\\n        for(int i=0;i<arr.length;i++){\\n            while(!s.isEmpty() && arr[i] <= arr[s.peek()]){\\n                s.pop();\\n            }\\n            if(s.isEmpty()){\\n                nsl[i] =-1;\\n            }\\n            else{\\n                nsl[i] = s.peek();\\n            }\\n            s.push(i);\\n        }\\n        return nsl;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int [] nsr = findNSR(nums);\\n        int [] nsl = findNSL(nums);\\n        \\n        int score =0;\\n        for(int i=0;i<nums.length;i++){\\n           int l = nsl[i];\\n           int r = nsr[i];\\n           if(l+1 <= k && r-1>= k){\\n               score = Math.max(score,nums[i] *(r-l-1));\\n           }\\n        }\\n        return score;\\n    }\\n\\n//find next smaller element on right \\n    public int[] findNSR(int [] arr){\\n        int [] nsr = new int[arr.length];\\n        Stack<Integer> s = new Stack<>();\\n        for(int i=arr.length-1;i>=0;i--){\\n            while(!s.isEmpty() && arr[i] <= arr[s.peek()] ){\\n                s.pop();\\n            }\\n            if(s.isEmpty()){\\n                nsr[i] =arr.length;\\n            }\\n            else{\\n                nsr[i] = s.peek();\\n            }\\n            s.push(i);\\n        }\\n        return nsr;\\n\\n    }\\n        //find next smaller element on left \\n\\n    public int[] findNSL(int [] arr){\\n        int [] nsl = new int[arr.length];\\n        Stack<Integer> s = new Stack<>();\\n        for(int i=0;i<arr.length;i++){\\n            while(!s.isEmpty() && arr[i] <= arr[s.peek()]){\\n                s.pop();\\n            }\\n            if(s.isEmpty()){\\n                nsl[i] =-1;\\n            }\\n            else{\\n                nsl[i] = s.peek();\\n            }\\n            s.push(i);\\n        }\\n        return nsl;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2850972,
                "title": "easy-to-understand-80-faster-c-solution-greedy-apptoach",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int ans = nums[k], i = k, j = k, mn = nums[k];\\n        while(i>0 || j<nums.size()-1){\\n            if(i>0&&j<nums.size()-1){\\n                if(nums[i-1]>=nums[j+1])i--;\\n                else j++;\\n            }else if(i==0&&j<nums.size()-1){\\n                j++;\\n            }else if(j == nums.size()-1 && i>0){\\n                i--;\\n            }\\n            mn = min(mn,min(nums[i],nums[j]));\\n            ans = max(ans,(j-i+1)*mn);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int ans = nums[k], i = k, j = k, mn = nums[k];\\n        while(i>0 || j<nums.size()-1){\\n            if(i>0&&j<nums.size()-1){\\n                if(nums[i-1]>=nums[j+1])i--;\\n                else j++;\\n            }else if(i==0&&j<nums.size()-1){\\n                j++;\\n            }else if(j == nums.size()-1 && i>0){\\n                i--;\\n            }\\n            mn = min(mn,min(nums[i],nums[j]));\\n            ans = max(ans,(j-i+1)*mn);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2684686,
                "title": "stack-easy-to-understand-c-code",
                "content": "* ***Using Stack***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(N)***\\n\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n\\n        int n = nums.size();\\n        \\n        // left[i] will store the index of next smaller element on left side\\n\\n        vector<int> left(n, -1);\\n        \\n        // right[i] will store the index of next smaller element on right side\\n\\n        vector<int> right(n, n);\\n        \\n        // stack will store the element in decreasing order\\n\\n        stack<int> st;\\n        \\n        // fill the left array\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            while(st.empty() == false && nums[st.top()] >= nums[i])\\n            {\\n                st.pop();\\n            }\\n\\n            if(st.empty() == false)\\n            {\\n                left[i] = st.top();\\n            }\\n\\n            st.push(i);\\n        }\\n        \\n        // empty the stack\\n\\n        while(!st.empty())\\n        {\\n            st.pop();\\n        }\\n        \\n        // fill the right array\\n\\n        for(int i = n - 1; i >= 0; i--)\\n        {\\n            while(!st.empty() && nums[st.top()] >= nums[i])\\n            {\\n                st.pop();\\n            }\\n\\n            if(st.empty() == false)\\n            {\\n                right[i] = st.top();\\n            }\\n\\n            st.push(i);\\n        }\\n        \\n        // find the maximum\\n\\n        int maxi = INT_MIN;\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(left[i] < k && right[i] > k)\\n            {\\n                int width = right[i] - left[i] - 1;\\n\\n                maxi = max(maxi, nums[i] * width);\\n            }\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```\\n\\n* ***Using Two Pointer***\\n\\n* ***Time Complexity :- O(N)***\\n\\n* ***Space Complexity :- O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        \\n        int n = nums.size();\\n        \\n        // start i and j from k\\n        \\n        int i = k;\\n        \\n        int j = k;\\n        \\n        int maxi = INT_MIN;\\n        \\n        // mini will keep track of minimum between [i, j]\\n        \\n        int mini = nums[k];\\n        \\n        while(i > 0 || j < n - 1)\\n        {\\n            // update mini\\n            \\n            mini = min({mini, nums[i], nums[j]});\\n            \\n            int width = (j - i + 1);\\n            \\n            // update maxi\\n            \\n            maxi = max(maxi, mini * width);\\n            \\n            // move pointers\\n            \\n            if(i > 0 && j < n - 1)\\n            {\\n                if(nums[i - 1] >= nums[j + 1])\\n                {\\n                    i--;\\n                }\\n                else\\n                {\\n                    j++;\\n                }\\n            }\\n            else if(i == 0 && j < n - 1)\\n            {\\n                j++;\\n            }\\n            else if(i > 0 && j == n - 1)\\n            {\\n                i--;\\n            }\\n        }\\n        \\n        mini = min({mini, nums[i], nums[j]});\\n            \\n        int width = (j - i + 1);\\n            \\n        maxi = max(maxi, mini * width);\\n        \\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Stack",
                    "Greedy",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n\\n        int n = nums.size();\\n        \\n        // left[i] will store the index of next smaller element on left side\\n\\n        vector<int> left(n, -1);\\n        \\n        // right[i] will store the index of next smaller element on right side\\n\\n        vector<int> right(n, n);\\n        \\n        // stack will store the element in decreasing order\\n\\n        stack<int> st;\\n        \\n        // fill the left array\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            while(st.empty() == false && nums[st.top()] >= nums[i])\\n            {\\n                st.pop();\\n            }\\n\\n            if(st.empty() == false)\\n            {\\n                left[i] = st.top();\\n            }\\n\\n            st.push(i);\\n        }\\n        \\n        // empty the stack\\n\\n        while(!st.empty())\\n        {\\n            st.pop();\\n        }\\n        \\n        // fill the right array\\n\\n        for(int i = n - 1; i >= 0; i--)\\n        {\\n            while(!st.empty() && nums[st.top()] >= nums[i])\\n            {\\n                st.pop();\\n            }\\n\\n            if(st.empty() == false)\\n            {\\n                right[i] = st.top();\\n            }\\n\\n            st.push(i);\\n        }\\n        \\n        // find the maximum\\n\\n        int maxi = INT_MIN;\\n\\n        for(int i = 0; i < n; i++)\\n        {\\n            if(left[i] < k && right[i] > k)\\n            {\\n                int width = right[i] - left[i] - 1;\\n\\n                maxi = max(maxi, nums[i] * width);\\n            }\\n        }\\n\\n        return maxi;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        \\n        int n = nums.size();\\n        \\n        // start i and j from k\\n        \\n        int i = k;\\n        \\n        int j = k;\\n        \\n        int maxi = INT_MIN;\\n        \\n        // mini will keep track of minimum between [i, j]\\n        \\n        int mini = nums[k];\\n        \\n        while(i > 0 || j < n - 1)\\n        {\\n            // update mini\\n            \\n            mini = min({mini, nums[i], nums[j]});\\n            \\n            int width = (j - i + 1);\\n            \\n            // update maxi\\n            \\n            maxi = max(maxi, mini * width);\\n            \\n            // move pointers\\n            \\n            if(i > 0 && j < n - 1)\\n            {\\n                if(nums[i - 1] >= nums[j + 1])\\n                {\\n                    i--;\\n                }\\n                else\\n                {\\n                    j++;\\n                }\\n            }\\n            else if(i == 0 && j < n - 1)\\n            {\\n                j++;\\n            }\\n            else if(i > 0 && j == n - 1)\\n            {\\n                i--;\\n            }\\n        }\\n        \\n        mini = min({mini, nums[i], nums[j]});\\n            \\n        int width = (j - i + 1);\\n            \\n        maxi = max(maxi, mini * width);\\n        \\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2332407,
                "title": "c-largest-rectangle-in-histogram-with-one-additional-check",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> solve(vector<int> v){\\n        int n = v.size();\\n        vector<int> ans(n);\\n        ans[n - 1] = n;\\n        stack<int> st;\\n        st.push(n - 1);\\n        for(int i = n - 2; i >= 0; i--){\\n            while(!st.empty() && v[st.top()] >= v[i]) st.pop();\\n            if(st.empty()) ans[i] = n;\\n            else ans[i] = st.top();\\n            st.push(i);\\n        }\\n        return ans;\\n    }\\n    \\n    vector<int> solve2(vector<int> v){\\n        int n = v.size();\\n        vector<int> ans(n);\\n        ans[0] = -1;\\n        stack<int> st;\\n        st.push(0);\\n        for(int i = 1; i < n; i++){\\n            while(!st.empty() && v[st.top()] >= v[i]) st.pop();\\n            if(st.empty()) ans[i] = -1;\\n            else ans[i] = st.top();\\n            st.push(i);\\n        }\\n        return ans;\\n    }\\n    \\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), ans = 0;\\n        vector<int> NSE = solve(nums);\\n        vector<int> PSE = solve2(nums);\\n        for(int i = 0; i < n; i++){\\n            int l = PSE[i], r = NSE[i];\\n            if(k > l && k < r){\\n                ans = max(ans, nums[i] * (r - l - 1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> solve(vector<int> v){\\n        int n = v.size();\\n        vector<int> ans(n);\\n        ans[n - 1] = n;\\n        stack<int> st;\\n        st.push(n - 1);\\n        for(int i = n - 2; i >= 0; i--){\\n            while(!st.empty() && v[st.top()] >= v[i]) st.pop();\\n            if(st.empty()) ans[i] = n;\\n            else ans[i] = st.top();\\n            st.push(i);\\n        }\\n        return ans;\\n    }\\n    \\n    vector<int> solve2(vector<int> v){\\n        int n = v.size();\\n        vector<int> ans(n);\\n        ans[0] = -1;\\n        stack<int> st;\\n        st.push(0);\\n        for(int i = 1; i < n; i++){\\n            while(!st.empty() && v[st.top()] >= v[i]) st.pop();\\n            if(st.empty()) ans[i] = -1;\\n            else ans[i] = st.top();\\n            st.push(i);\\n        }\\n        return ans;\\n    }\\n    \\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), ans = 0;\\n        vector<int> NSE = solve(nums);\\n        vector<int> PSE = solve2(nums);\\n        for(int i = 0; i < n; i++){\\n            int l = PSE[i], r = NSE[i];\\n            if(k > l && k < r){\\n                ans = max(ans, nums[i] * (r - l - 1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2022519,
                "title": "python-same-as-largest-rectangle-in-histogram-simple-solution",
                "content": "```\\nclass Solution:\\n    def nextSmallerElement(self, nums):\\n        nextSmaller = [None] * len(nums)\\n        stack = [[-sys.maxsize, -1]]\\n        for i in range(len(nums)-1, -1, -1):\\n            while nums[i] <= stack[-1][0]:\\n                stack.pop()\\n            nextSmaller[i] = stack[-1][1]\\n            stack.append([nums[i], i])\\n        return nextSmaller\\n            \\n    \\n    def previousSmallerElement(self, nums):\\n        previousSmaller = [None] * len(nums)\\n        stack = [[-sys.maxsize, -1]]\\n        for i in range(len(nums)):\\n            while nums[i] <= stack[-1][0]:\\n                stack.pop()\\n            previousSmaller[i] = stack[-1][1]\\n            stack.append([nums[i], i])\\n        return previousSmaller\\n    \\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nextSmaller = self.nextSmallerElement(nums)\\n        previousSmaller = self.previousSmallerElement(nums)\\n\\n        score = 0\\n        for idx, num in enumerate(nums):\\n\\t\\t\\t# previousSmaller[idx] (let\\'s say i) and nextSmaller[idx] (let\\'s say j) ensures that the element present at idx is the minimum in range (i -> j)\\n            i = previousSmaller[idx]\\n            i += 1\\n            j = nextSmaller[idx]\\n            if j == -1:\\n                j = len(nums)\\n            j -= 1\\n            if i <= k <= j:\\n                score = max(score, num * (j-i+1))\\n        \\n        return score\\n            \\n```\\n\\n***If you liked the above solution then please upvote!***",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def nextSmallerElement(self, nums):\\n        nextSmaller = [None] * len(nums)\\n        stack = [[-sys.maxsize, -1]]\\n        for i in range(len(nums)-1, -1, -1):\\n            while nums[i] <= stack[-1][0]:\\n                stack.pop()\\n            nextSmaller[i] = stack[-1][1]\\n            stack.append([nums[i], i])\\n        return nextSmaller\\n            \\n    \\n    def previousSmallerElement(self, nums):\\n        previousSmaller = [None] * len(nums)\\n        stack = [[-sys.maxsize, -1]]\\n        for i in range(len(nums)):\\n            while nums[i] <= stack[-1][0]:\\n                stack.pop()\\n            previousSmaller[i] = stack[-1][1]\\n            stack.append([nums[i], i])\\n        return previousSmaller\\n    \\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nextSmaller = self.nextSmallerElement(nums)\\n        previousSmaller = self.previousSmallerElement(nums)\\n\\n        score = 0\\n        for idx, num in enumerate(nums):\\n\\t\\t\\t# previousSmaller[idx] (let\\'s say i) and nextSmaller[idx] (let\\'s say j) ensures that the element present at idx is the minimum in range (i -> j)\\n            i = previousSmaller[idx]\\n            i += 1\\n            j = nextSmaller[idx]\\n            if j == -1:\\n                j = len(nums)\\n            j -= 1\\n            if i <= k <= j:\\n                score = max(score, num * (j-i+1))\\n        \\n        return score\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1708826,
                "title": "two-pointer-in-c-o-n-aproach",
                "content": "```cpp\\n/*\\nWe will start from given k and assign two pointers(i,j) to k\\n\\nif(nums[i-1]<nums[j+1] then we will do j++ as we will be \\ngetting ans on this side because we are already having minimum of \\nrange i to j and we want to increase the range to maximize the result\\n\\notherwise i-- because we will be getting answere in this side because \\nwe can find more min in left side\\n\\nat every iteration we keep an eye on ans and min element like\\nmini = min(mini,min(nums[i],nums[j])\\nans= max(ans,mini*(j-+1))\\n\\nDont forget edge case when k==0 or k==n-1\\nif k=0 then we can only increase j\\nand if k==n-1 then we can only decrease i\\n\\nso we are good to code\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        if (n==1) return nums[0];\\n        int mini=nums[k];\\n        int i=k;\\n        int j=k;\\n        int ans=0;\\n\\t\\t\\n        while(i>0 || j<n-1){\\n            if(i==0)  j++;\\n            else if(j==n-1)   i--;\\n            else if(nums[i-1]<nums[j+1])   j++;\\n            else    i--;\\n \\n            mini=min(mini,min(nums[i],nums[j])); \\n            ans=max(ans,mini*(j-i+1));\\n     \\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers"
                ],
                "code": "```cpp\\n/*\\nWe will start from given k and assign two pointers(i,j) to k\\n\\nif(nums[i-1]<nums[j+1] then we will do j++ as we will be \\ngetting ans on this side because we are already having minimum of \\nrange i to j and we want to increase the range to maximize the result\\n\\notherwise i-- because we will be getting answere in this side because \\nwe can find more min in left side\\n\\nat every iteration we keep an eye on ans and min element like\\nmini = min(mini,min(nums[i],nums[j])\\nans= max(ans,mini*(j-+1))\\n\\nDont forget edge case when k==0 or k==n-1\\nif k=0 then we can only increase j\\nand if k==n-1 then we can only decrease i\\n\\nso we are good to code\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        if (n==1) return nums[0];\\n        int mini=nums[k];\\n        int i=k;\\n        int j=k;\\n        int ans=0;\\n\\t\\t\\n        while(i>0 || j<n-1){\\n            if(i==0)  j++;\\n            else if(j==n-1)   i--;\\n            else if(nums[i-1]<nums[j+1])   j++;\\n            else    i--;\\n \\n            mini=min(mini,min(nums[i],nums[j])); \\n            ans=max(ans,mini*(j-i+1));\\n     \\n        }\\n        return ans;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1704316,
                "title": "straight-forward-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int res=nums[k], i=k, j=k, n=nums.size(), mn=nums[k];\\n        while(i>0 && j<n-1){\\n                if(nums[i-1]>nums[j+1])\\n                    mn=min(mn,nums[--i]);\\n                else\\n                    mn=min(mn,nums[++j]);\\n            res=max(res,mn*(j-i+1));\\n        }\\n        while(i>0)\\n        {\\n            mn=min(mn,nums[--i]);\\n            res=max(res,mn*(j-i+1));\\n        }\\n        while(j<n-1)\\n        {\\n            mn=min(mn,nums[++j]);\\n            res=max(res,mn*(j-i+1));\\n        }\\n        return res;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int res=nums[k], i=k, j=k, n=nums.size(), mn=nums[k];\\n        while(i>0 && j<n-1){\\n                if(nums[i-1]>nums[j+1])\\n                    mn=min(mn,nums[--i]);\\n                else\\n                    mn=min(mn,nums[++j]);\\n            res=max(res,mn*(j-i+1));\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1591990,
                "title": "c-two-pointer-with-greedy-expansion",
                "content": "```\\n/*\\nSolution:\\n1. 2 Pointer Approach with Greedy expansion.\\n2. Start left and right at k and expand it towards both extremes until the input array nums is exhausted.\\n3. As we go over array, try to mainatin the minVal and maxRes for each iteration\\n\\nTC -> O(N)\\nSC -> O(1)\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int left = k, right = k;\\n        int minVal = nums[k];\\n        int res = nums[k];\\n        int nSize = nums.size();\\n        \\n        while (left > 0 || right < nSize - 1) {\\n            int leftVal = (left > 0 ? nums[left - 1] : 0);\\n            int rightVal = (right < nSize - 1 ? nums[right + 1] : 0);\\n            \\n            // Go right\\n            if (leftVal < rightVal) {\\n                right++;\\n                minVal = min(minVal, nums[right]);\\n            }\\n            // Go Left\\n            else {\\n                left--;\\n                minVal = min(minVal, nums[left]);\\n            }\\n            \\n            res = max(res, minVal * (right - left + 1));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\n/*\\nSolution:\\n1. 2 Pointer Approach with Greedy expansion.\\n2. Start left and right at k and expand it towards both extremes until the input array nums is exhausted.\\n3. As we go over array, try to mainatin the minVal and maxRes for each iteration\\n\\nTC -> O(N)\\nSC -> O(1)\\n\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int left = k, right = k;\\n        int minVal = nums[k];\\n        int res = nums[k];\\n        int nSize = nums.size();\\n        \\n        while (left > 0 || right < nSize - 1) {\\n            int leftVal = (left > 0 ? nums[left - 1] : 0);\\n            int rightVal = (right < nSize - 1 ? nums[right + 1] : 0);\\n            \\n            // Go right\\n            if (leftVal < rightVal) {\\n                right++;\\n                minVal = min(minVal, nums[right]);\\n            }\\n            // Go Left\\n            else {\\n                left--;\\n                minVal = min(minVal, nums[left]);\\n            }\\n            \\n            res = max(res, minVal * (right - left + 1));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1326849,
                "title": "c-two-pointers-concise",
                "content": "*Always think of brute force solution first, then start working on how to optimise.*\\n\\n**Idea:**\\nIn this problem we have a pivot at index `k`, that gives the idea of treating both the splits of array differently. \\nUsing this intuition you can come up with using two-pointer approach.\\n\\n**Solution:**\\nTo find the maximum score of subarray having largest minimum element around index `k`, element at index `k` will always be included in the solution, so initialize the `left` and `right` pointer at `k`. \\n(Initially our possible array is of length 1, including nums[k], whick is our initial minimum value)\\nNow include the minimum of next left and next right pointer (that is, minimum of `l_val` and`r_val`) in our solution at the same time increment/decrement the corresponding pointer after recalculating the minimum value of our current array.\\nWe need to keep in mind that our loop will not give correct answer if good subarray is of length `n` because we have set the condition statement so that it will exit the loop once both the pointers have exceded the possible index value, to get through this we need to consider this once loop ends as we have already calculated the minimum value for entire array now.\\n\\n**Code:**\\n```\\nint maximumScore(vector<int>& nums, int k) {\\n\\tint n=nums.size(),mx_score=0;\\n\\tint left=k,right=k,mn_value=nums[k];\\n\\twhile(left>=0 || right<n){\\n\\t\\tmx_score=max(mx_score,mn*(right-left-1));\\n\\t\\tint l_val=(left==-1?INT_MIN:nums[left]);\\n\\t\\tint r_val=(j==n?INT_MIN:nums[right]);\\n\\t\\tif(l_val>=r_val)\\n\\t\\t\\tmn_value=min(mn_value,nums[left--]);\\n\\t\\telse mn_value=min(mn_value,nums[right++]);\\n\\t}\\n\\tmx_score=max(mx_score,mn_value*n);\\n\\treturn mx;\\n}\\n```\\n**Complexity:**\\nTime complexity=O(n), single iteration over entire length.\\nSpace complexity=O(1)\\n",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n\\tint n=nums.size(),mx_score=0;\\n\\tint left=k,right=k,mn_value=nums[k];\\n\\twhile(left>=0 || right<n){\\n\\t\\tmx_score=max(mx_score,mn*(right-left-1));\\n\\t\\tint l_val=(left==-1?INT_MIN:nums[left]);\\n\\t\\tint r_val=(j==n?INT_MIN:nums[right]);\\n\\t\\tif(l_val>=r_val)\\n\\t\\t\\tmn_value=min(mn_value,nums[left--]);\\n\\t\\telse mn_value=min(mn_value,nums[right++]);\\n\\t}\\n\\tmx_score=max(mx_score,mn_value*n);\\n\\treturn mx;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1272841,
                "title": "c-greedy-solution-o-n-explained",
                "content": "The idea is to keep track of min element for any subarray from i to j. For that we need to fill an array with minimum element.\\nFirst start form index k-1th and go till 0th index and fill minimum element so far in array - \\n```\\nnums = [1,4,3,7,4,5], k = 3\\n       ^\\narr =  [1,3,3,7,-,-]\\n```\\nDo the same for (k+1)th index to last index - \\n```\\nnums = [1,4,3,7,4,5], k = 3\\n       ^\\narr =  [1,3,3,7,4,4]\\n```\\nNow - \\n1. Set left pointer at 0th index and right at last index\\n2. Calculate result\\n3. Stop left or right pointer when it reaches at kth index, and move another pointer anyway\\n4. Move index which has lower min value as we need to maximize the min value to get maximum score.\\n5. Repeat form 2\\n\\n```\\nleft = 0, right = 5\\n[1,3,3,7,4,4]  => result = 6\\n ^         ^\\n[1,3,3,7,4,4] => result = 15\\n   ^       ^\\n[1,3,3,7,4,4] => result = 12\\n     ^     ^\\n[1,3,3,7,4,4] => result = 12\\n       ^   ^\\n[1,3,3,7,4,4] => result = 8\\n       ^ ^\\n```\\nCode:\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int len = nums.size();\\n        vector<int> arr(len, 0 );\\n        \\n        int i = k-1, j = k+1;\\n        int currMin = nums[k];\\n        \\n        arr[k] = nums[k];\\n        while( i >= 0 ) {\\n            currMin = min(currMin, nums[i]);\\n            arr[i--] = currMin;\\n        }\\n        \\n        currMin = nums[k];\\n        while( j < len ) {\\n            currMin = min(currMin, nums[j]);\\n            arr[j++] = currMin;\\n        }\\n        \\n        int result = arr[k];\\n        i = 0, j = len-1;\\n        while( i <= k && j >= k ) {\\n            result = max(result, min(arr[i], arr[j]) * (j-i+1) );\\n            if( j == k || arr[i] <= arr[j] )\\n                i++;\\n            else if( i == k || arr[i] > arr[j] )\\n                j--;\\n        }  \\n        \\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nnums = [1,4,3,7,4,5], k = 3\\n       ^\\narr =  [1,3,3,7,-,-]\\n```\n```\\nnums = [1,4,3,7,4,5], k = 3\\n       ^\\narr =  [1,3,3,7,4,4]\\n```\n```\\nleft = 0, right = 5\\n[1,3,3,7,4,4]  => result = 6\\n ^         ^\\n[1,3,3,7,4,4] => result = 15\\n   ^       ^\\n[1,3,3,7,4,4] => result = 12\\n     ^     ^\\n[1,3,3,7,4,4] => result = 12\\n       ^   ^\\n[1,3,3,7,4,4] => result = 8\\n       ^ ^\\n```\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int len = nums.size();\\n        vector<int> arr(len, 0 );\\n        \\n        int i = k-1, j = k+1;\\n        int currMin = nums[k];\\n        \\n        arr[k] = nums[k];\\n        while( i >= 0 ) {\\n            currMin = min(currMin, nums[i]);\\n            arr[i--] = currMin;\\n        }\\n        \\n        currMin = nums[k];\\n        while( j < len ) {\\n            currMin = min(currMin, nums[j]);\\n            arr[j++] = currMin;\\n        }\\n        \\n        int result = arr[k];\\n        i = 0, j = len-1;\\n        while( i <= k && j >= k ) {\\n            result = max(result, min(arr[i], arr[j]) * (j-i+1) );\\n            if( j == k || arr[i] <= arr[j] )\\n                i++;\\n            else if( i == k || arr[i] > arr[j] )\\n                j--;\\n        }  \\n        \\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1263229,
                "title": "very-simple-c-two-pointers",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), mx = 0;\\n        for(int i = k, j = k, x = nums[k]; x; x--){\\n            while(i >= 0 && nums[i] >= x) i--;\\n            while(j < n && nums[j] >= x) j++;\\n            mx = max(mx, x * ((j - 1) - (i + 1) + 1)); \\n        }\\n        return mx;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), mx = 0;\\n        for(int i = k, j = k, x = nums[k]; x; x--){\\n            while(i >= 0 && nums[i] >= x) i--;\\n            while(j < n && nums[j] >= x) j++;\\n            mx = max(mx, x * ((j - 1) - (i + 1) + 1)); \\n        }\\n        return mx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1229721,
                "title": "most-consise-code-python-solving-like-largest-rectangle-using-stack",
                "content": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        \\'\\'\\'\\n        approach:  monotone stack largest rectangle with one addition check\\n        \\'\\'\\'\\n        heights = nums\\n        heights = heights + [float(\\'-inf\\')]\\n        stack = [-1]; ans = 0; n = len(heights)\\n        for i in range(n):\\n            while(heights[stack[-1]] > heights[i] ):\\n                idx = stack.pop()\\n                if stack[-1] < k and i>k:\\n                    ans = max(ans, heights[idx]*(i-stack[-1]-1))\\n            stack.append(i)\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        \\'\\'\\'\\n        approach:  monotone stack largest rectangle with one addition check\\n        \\'\\'\\'\\n        heights = nums\\n        heights = heights + [float(\\'-inf\\')]\\n        stack = [-1]; ans = 0; n = len(heights)\\n        for i in range(n):\\n            while(heights[stack[-1]] > heights[i] ):\\n                idx = stack.pop()\\n                if stack[-1] < k and i>k:\\n                    ans = max(ans, heights[idx]*(i-stack[-1]-1))\\n            stack.append(i)\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1189377,
                "title": "javascript-7-lines-of-code-using-sliding-window-o-n-time-o-n-space",
                "content": "The big idea is we start from the kth index and slide left and right to each end.\\nTo determine which side to slide to, we pick the side with the bigger value as it will always result in a larger result.\\nFinally, we need to maintain the minimum value of the current array by comparing the latest included value with the known minimum value.\\n\\nBelow is the code:\\n```\\nvar maximumScore = function(nums, k) {\\n    const n = nums.length\\n    let max = nums[k], min = nums[k], i = k, j = k\\n    while (i >= 0 && j < n) {\\n        max = Math.max(min * (j - i + 1), max)\\n        min = (j === n - 1 || nums[i - 1] > nums[j + 1]) ? Math.min(nums[--i], min) : Math.min(nums[++j], min)\\n    }\\n    return max\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maximumScore = function(nums, k) {\\n    const n = nums.length\\n    let max = nums[k], min = nums[k], i = k, j = k\\n    while (i >= 0 && j < n) {\\n        max = Math.max(min * (j - i + 1), max)\\n        min = (j === n - 1 || nums[i - 1] > nums[j + 1]) ? Math.min(nums[--i], min) : Math.min(nums[++j], min)\\n    }\\n    return max\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1110862,
                "title": "easy-stack-solution",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        N = len(nums)\\n        \\n        def next_small_left():\\n            \\n            i = 0\\n            left=[-1]*N\\n            stack=[]\\n            for i in range(N):\\n                while stack and nums[stack[-1]] >= nums[i]:\\n                    stack.pop()\\n                if stack:\\n                    left[i] = stack[-1]\\n                stack.append(i)\\n            \\n            return left\\n            \\n        \\n        def next_small_right():\\n            right=[N]*N\\n            stack=[]\\n            for i in range(N-1,-1,-1):\\n                while stack and nums[stack[-1]] >= nums[i]:\\n                    stack.pop()\\n                if stack:\\n                    right[i] = stack[-1]\\n                stack.append(i)\\n            \\n            return right\\n        \\n        left = next_small_left()\\n        right = next_small_right()\\n        # print(left,right)\\n        N = len(left)\\n        ans=-1\\n        for i in range(N):\\n            if left[i]+1 <= k <= right[i]-1:\\n                ans = max(ans,(right[i]-left[i]-1)*nums[i])\\n                # print(i,ans)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Stack"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        N = len(nums)\\n        \\n        def next_small_left():\\n            \\n            i = 0\\n            left=[-1]*N\\n            stack=[]\\n            for i in range(N):\\n                while stack and nums[stack[-1]] >= nums[i]:\\n                    stack.pop()\\n                if stack:\\n                    left[i] = stack[-1]\\n                stack.append(i)\\n            \\n            return left\\n            \\n        \\n        def next_small_right():\\n            right=[N]*N\\n            stack=[]\\n            for i in range(N-1,-1,-1):\\n                while stack and nums[stack[-1]] >= nums[i]:\\n                    stack.pop()\\n                if stack:\\n                    right[i] = stack[-1]\\n                stack.append(i)\\n            \\n            return right\\n        \\n        left = next_small_left()\\n        right = next_small_right()\\n        # print(left,right)\\n        N = len(left)\\n        ans=-1\\n        for i in range(N):\\n            if left[i]+1 <= k <= right[i]-1:\\n                ans = max(ans,(right[i]-left[i]-1)*nums[i])\\n                # print(i,ans)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110717,
                "title": "java-stack-t-c-o-n-s-c-o-n",
                "content": "\\n\\tpublic int maximumScore(int[] nums, int k) {\\n\\t\\treturn largestRectangleArea(nums, k);\\n\\t}\\n\\n\\tpublic int largestRectangleArea(int[] heights, int k) {\\n\\n\\t\\tint max = 0, i = 0, height = heights.length;\\n\\t\\tStack<Integer> s = new Stack<>();\\n\\n\\t\\twhile (i < height) {\\n\\n\\t\\t\\tif (s.isEmpty() || heights[s.peek()] <= heights[i]) {\\n\\t\\t\\t\\ts.push(i);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tint pb = heights[s.pop()];\\n\\n\\t\\t\\t\\tint r = i - 1;\\n\\t\\t\\t\\tint l = 0;\\n\\n\\t\\t\\t\\tif (!s.isEmpty())\\n\\t\\t\\t\\t\\tl = s.peek() + 1;\\n\\n\\t\\t\\t\\tint area = (r - l + 1) * pb;\\n\\n\\t\\t\\t\\tif (area > max && k >= l && k <= r)\\n\\t\\t\\t\\t\\tmax = area;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\twhile (!s.isEmpty()) {\\n\\n\\t\\t\\tint pb = heights[s.pop()];\\n\\n\\t\\t\\tint r = heights.length - 1;\\n\\t\\t\\tint l = 0;\\n\\n\\t\\t\\tif (!s.isEmpty())\\n\\t\\t\\t\\tl = s.peek() + 1;\\n\\n\\t\\t\\tint area = (r - l + 1) * pb;\\n\\n\\t\\t\\tif (area > max && k >= l && k <= r)\\n\\t\\t\\t\\tmax = area;\\n\\t\\t}\\n\\n\\t\\treturn max;\\n\\t}",
                "solutionTags": [],
                "code": "\\n\\tpublic int maximumScore(int[] nums, int k) {\\n\\t\\treturn largestRectangleArea(nums, k);\\n\\t}\\n\\n\\tpublic int largestRectangleArea(int[] heights, int k) {\\n\\n\\t\\tint max = 0, i = 0, height = heights.length;\\n\\t\\tStack<Integer> s = new Stack<>();\\n\\n\\t\\twhile (i < height) {\\n\\n\\t\\t\\tif (s.isEmpty() || heights[s.peek()] <= heights[i]) {\\n\\t\\t\\t\\ts.push(i);\\n\\t\\t\\t\\ti++;\\n\\t\\t\\t} else {\\n\\n\\t\\t\\t\\tint pb = heights[s.pop()];\\n\\n\\t\\t\\t\\tint r = i - 1;\\n\\t\\t\\t\\tint l = 0;\\n\\n\\t\\t\\t\\tif (!s.isEmpty())\\n\\t\\t\\t\\t\\tl = s.peek() + 1;\\n\\n\\t\\t\\t\\tint area = (r - l + 1) * pb;\\n\\n\\t\\t\\t\\tif (area > max && k >= l && k <= r)\\n\\t\\t\\t\\t\\tmax = area;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\twhile (!s.isEmpty()) {\\n\\n\\t\\t\\tint pb = heights[s.pop()];\\n\\n\\t\\t\\tint r = heights.length - 1;\\n\\t\\t\\tint l = 0;\\n\\n\\t\\t\\tif (!s.isEmpty())\\n\\t\\t\\t\\tl = s.peek() + 1;\\n\\n\\t\\t\\tint area = (r - l + 1) * pb;\\n\\n\\t\\t\\tif (area > max && k >= l && k <= r)\\n\\t\\t\\t\\tmax = area;\\n\\t\\t}\\n\\n\\t\\treturn max;\\n\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 1110104,
                "title": "c-beats-100-transform-to-problem-84-largest-rectangle-in-histogram",
                "content": "History always repeats itself, so does Leetcode.\\n\\nThis problem is basically a tansformm of Problem 84 Largest Rectangle in Histogram, where `min(nums[i], nums[i+1], ..., nums[j])` could be considered the height of the rectangle, and `(j - i + 1)` is the width of the rectangle. \\n\\nThe solution of Problem 84 calculates every possible rectangle candidate, so we only need add an additional check: if the rectange actually contains the k histogram. If it is, then it becomes a candidate of our solution.  \\n\\nThe time complexity is O(N).\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        // transform it to problem 84 Histogram\\n        // monotonic increasing stack\\n        stack<int> st;\\n        // add padding at the begin and end \\n        nums.insert(nums.begin(), 0);\\n        nums.push_back(0);\\n        st.push(0);\\n        int ret = 0;\\n        for(int i = 1; i < nums.size(); i++) {\\n            while(!st.empty() && nums[st.top()] > nums[i]) {\\n                // kick the top element as it violates the monotonic increasing rule\\n                int height = nums[st.top()];\\n                st.pop();\\n                int start = st.top() + 1;\\n                int end = i - 1;\\n                int area = height * (end - start + 1);\\n                // since we pad one element in front of the array\\n                // the k index becomes k + 1 in the new array\\n                // check if the rectange contains the k + 1 element\\n                if(start <= k + 1 && end >= k + 1) {\\n                    ret = max(ret, area);\\n                }\\n            }\\n            st.push(i);\\n        }\\n        \\n        return ret;\\n    }\\n};\\n```\\n\\n\\n\\n\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        // transform it to problem 84 Histogram\\n        // monotonic increasing stack\\n        stack<int> st;\\n        // add padding at the begin and end \\n        nums.insert(nums.begin(), 0);\\n        nums.push_back(0);\\n        st.push(0);\\n        int ret = 0;\\n        for(int i = 1; i < nums.size(); i++) {\\n            while(!st.empty() && nums[st.top()] > nums[i]) {\\n                // kick the top element as it violates the monotonic increasing rule\\n                int height = nums[st.top()];\\n                st.pop();\\n                int start = st.top() + 1;\\n                int end = i - 1;\\n                int area = height * (end - start + 1);\\n                // since we pad one element in front of the array\\n                // the k index becomes k + 1 in the new array\\n                // check if the rectange contains the k + 1 element\\n                if(start <= k + 1 && end >= k + 1) {\\n                    ret = max(ret, area);\\n                }\\n            }\\n            st.push(i);\\n        }\\n        \\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108792,
                "title": "python3-stack",
                "content": "**Description**\\n\\nfor each i, the maximum score of good subarrays with minimum nums[i] is (A[i] - B[i] - 1) * nums[i], where\\n\\nA[i] = smallest j > i s.t. nums[j] < nums[i] (next smaller element)\\nB[i] = biggest j < i s.t. nums[j] < nums[i] (previous smaller element)\\n\\nA,B can be computed using stack\\n\\n**Code**\\n\\n```\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        A = [n for i in range(n)]\\n        B = [-1 for i in range(n)]\\n        stk = []        \\n        for i in range(len(nums)):\\n            while stk and nums[stk[-1]] > nums[i]:\\n                j = stk.pop()\\n                A[j] = i\\n            stk.append(i)\\n        \\n        stk = []\\n        for i in range(len(nums)-1,-1,-1):\\n            while stk and nums[stk[-1]] > nums[i]:\\n                j = stk.pop()\\n                B[j] = i\\n            stk.append(i)\\n        \\n        ans = 0\\n        for i in range(n):\\n            l,r = B[i]+1,A[i]-1\\n            if l <=k<=r:\\n                ans = max(ans, (A[i]-B[i]-1)*nums[i])\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        A = [n for i in range(n)]\\n        B = [-1 for i in range(n)]\\n        stk = []        \\n        for i in range(len(nums)):\\n            while stk and nums[stk[-1]] > nums[i]:\\n                j = stk.pop()\\n                A[j] = i\\n            stk.append(i)\\n        \\n        stk = []\\n        for i in range(len(nums)-1,-1,-1):\\n            while stk and nums[stk[-1]] > nums[i]:\\n                j = stk.pop()\\n                B[j] = i\\n            stk.append(i)\\n        \\n        ans = 0\\n        for i in range(n):\\n            l,r = B[i]+1,A[i]-1\\n            if l <=k<=r:\\n                ans = max(ans, (A[i]-B[i]-1)*nums[i])\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1108336,
                "title": "python-two-pointer",
                "content": "We create two arrays `left` and `right` which hold the indices starting from `k` going left and right where at each index we see a smaller value. Now use two pointers `i` and `j` on `left` and `right`, we should always choose the index that yields a larger `min` value. So increment `i` if `left[i+1][0] >= right [j+1][0]`, or increment j otherwise. Answer is the max value encountered once both arrays are exhausted.\\n\\n\\n```python\\nclass Solution:\\n    def maximumScore(self, A, k):\\n        left = []\\n        cur = A[k]\\n        for i in range(k, -1, -1):\\n            if A[i] >= cur:\\n                continue\\n            left.append((cur, i+1))\\n            cur = A[i]\\n        left.append((cur, i))\\n        \\n        right = []\\n        cur = A[k]\\n        for i in range(k, len(A)):\\n            if A[i] >= cur:\\n                continue\\n            right.append((cur, i-1))\\n            cur = A[i]\\n        right.append((cur, i))\\n        \\n        ans = -math.inf\\n        i = j = 0\\n        while i < len(left)-1 and j < len(right)-1:\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            if left[i+1][0] >= right[j+1][0]:\\n                i += 1\\n            else:\\n                j += 1\\n        while i < len(left):\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            i += 1\\n        i -= 1\\n        while j < len(right):\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            j += 1    \\n\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```python\\nclass Solution:\\n    def maximumScore(self, A, k):\\n        left = []\\n        cur = A[k]\\n        for i in range(k, -1, -1):\\n            if A[i] >= cur:\\n                continue\\n            left.append((cur, i+1))\\n            cur = A[i]\\n        left.append((cur, i))\\n        \\n        right = []\\n        cur = A[k]\\n        for i in range(k, len(A)):\\n            if A[i] >= cur:\\n                continue\\n            right.append((cur, i-1))\\n            cur = A[i]\\n        right.append((cur, i))\\n        \\n        ans = -math.inf\\n        i = j = 0\\n        while i < len(left)-1 and j < len(right)-1:\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            if left[i+1][0] >= right[j+1][0]:\\n                i += 1\\n            else:\\n                j += 1\\n        while i < len(left):\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            i += 1\\n        i -= 1\\n        while j < len(right):\\n            x = min(left[i][0], right[j][0])\\n            y = right[j][1] - left[i][1] + 1\\n            ans = max(ans, x*y)\\n            j += 1    \\n\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108315,
                "title": "c-o-n-solution-with-comments-easy-to-understand",
                "content": "```\\nint maximumScore(vector<int>& nums, int k) {\\n        int ans=nums[k],minEle=nums[k];\\n        int i=k-1,j=k+1;\\n\\t\\t// \\n        //Move left and right from index k and take that element which is greater among the two (nums[i],nums[j])\\n        // if nums[i] >= nums [j] , do i-- else j++\\n        // At every point, keep track of minimum element \\n        // Stop when  i<0 and j==nums.size()\\n        while(i>=0 || j<nums.size()){\\n            if(i>=0 && j<nums.size()){\\n                // Take maximum element  \\n                if(nums[i]>=nums[j]){\\n                    minEle=min(minEle,nums[i]);\\n                    ans=max(ans,minEle*(j-i));\\n                    i--;\\n                }\\n                else{\\n                    minEle=min(minEle,nums[j]);\\n                    ans=max(ans,minEle*(j-i));\\n                    j++;\\n                }\\n            }\\n            else if(i>=0){ // Here we have only one choice \\n                minEle=min(minEle,nums[i]);\\n                ans=max(ans,minEle*(j-i));\\n                i--;\\n            }\\n            else{       // Here we have only one choice \\n                minEle=min(minEle,nums[j]);\\n                ans=max(ans,minEle*(j-i));\\n                j++;\\n            }\\n        }\\n        return ans;\\n    }\\n\\t// Hit Upvote if you like :)\\n```",
                "solutionTags": [],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n        int ans=nums[k],minEle=nums[k];\\n        int i=k-1,j=k+1;\\n\\t\\t// \\n        //Move left and right from index k and take that element which is greater among the two (nums[i],nums[j])\\n        // if nums[i] >= nums [j] , do i-- else j++\\n        // At every point, keep track of minimum element \\n        // Stop when  i<0 and j==nums.size()\\n        while(i>=0 || j<nums.size()){\\n            if(i>=0 && j<nums.size()){\\n                // Take maximum element  \\n                if(nums[i]>=nums[j]){\\n                    minEle=min(minEle,nums[i]);\\n                    ans=max(ans,minEle*(j-i));\\n                    i--;\\n                }\\n                else{\\n                    minEle=min(minEle,nums[j]);\\n                    ans=max(ans,minEle*(j-i));\\n                    j++;\\n                }\\n            }\\n            else if(i>=0){ // Here we have only one choice \\n                minEle=min(minEle,nums[i]);\\n                ans=max(ans,minEle*(j-i));\\n                i--;\\n            }\\n            else{       // Here we have only one choice \\n                minEle=min(minEle,nums[j]);\\n                ans=max(ans,minEle*(j-i));\\n                j++;\\n            }\\n        }\\n        return ans;\\n    }\\n\\t// Hit Upvote if you like :)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1108257,
                "title": "greedy-simulate-from-the-minimum-number-to-maximum-number-o-nlogn",
                "content": "\\nWe can easy to get a boundary when we start from the minimum number.\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        map<int, int> m;\\n        int n = nums.size();\\n        vector<pair<int, int> > arr(nums.size());\\n        for(int i = 0; i < nums.size(); ++i) arr[i] = {nums[i], i};\\n        sort(arr.begin(), arr.end());\\n        int ans = arr[0].first * n;\\n        m[arr[0].second] = 1;\\n        m[-1] = 1;\\n        m[n] = 1;\\n        for(int i = 1; i < arr.size(); ++i) {\\n            int num = arr[i].first;\\n            int idx = arr[i].second;\\n            auto it = m.upper_bound(idx);\\n            auto it2 = it; --it2;\\n            int j  = it->first;\\n            int ii = it2->first;\\n            if(j > k && ii < k) {\\n                ans = max(ans, num * (j - ii - 1));\\n            }\\n            m[idx] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        map<int, int> m;\\n        int n = nums.size();\\n        vector<pair<int, int> > arr(nums.size());\\n        for(int i = 0; i < nums.size(); ++i) arr[i] = {nums[i], i};\\n        sort(arr.begin(), arr.end());\\n        int ans = arr[0].first * n;\\n        m[arr[0].second] = 1;\\n        m[-1] = 1;\\n        m[n] = 1;\\n        for(int i = 1; i < arr.size(); ++i) {\\n            int num = arr[i].first;\\n            int idx = arr[i].second;\\n            auto it = m.upper_bound(idx);\\n            auto it2 = it; --it2;\\n            int j  = it->first;\\n            int ii = it2->first;\\n            if(j > k && ii < k) {\\n                ans = max(ans, num * (j - ii - 1));\\n            }\\n            m[idx] = 1;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3695338,
                "title": "simple-binary-search-segment-tree-t-c-o-nlogn-explained-in-detail",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe want to maximise our score.So,the first thought should be how to eliminate min values and how to find minimum value in some range.here,some intution of segment tree comes to find min value in some range.\\nLet\\'s get back to appraoch.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst put the l and r pointer at the ends of array.Now,lets take some example  arr=[1,4,5,4,1,8,4],and suppose k=2, here initially the minimum value of the range is 1,but to increase our score we will eliminate 1 from both side.Removing only one 1 will not be benficial so remove all values equal to minimum of that range.For this we have to find the last occurence of min value before k and first occurence of minimum value after k,so that after every iteration we can update our l=last occur+1 and r=first occur -1,here you have to take care that the range always lies around k,not outside k.For storing the indexes,first i used vector<vector<int>> but it gave tle so use map<vector<int>> instead.And for taking care of minimum value in range,i used segment tree. And use binary search to find tha first and last occur of any element by bs on vector<int> store in map intially.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nHere,buildTree function takes O(nlogn) time complexity,answerQuery function takes logn time for each query.Find first and last occur of any element will take logn time.So,overall time complexity is O(nlogn)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n O(4*N + N +n)~O(N),here N is 100001.\\n# Code\\n```\\nconst int N = 100001;\\nclass Solution {\\n\\nint arr[N], st[4 * N];\\n#define pb push_back\\n\\n    void buildTree(int si, int ss, int se) {\\n        if (ss == se) {\\n            st[si] = arr[ss]; return;\\n        }\\n        int mid = (ss + se) / 2;\\n        buildTree(2 * si, ss, mid);\\n        buildTree((2 * si) + 1, mid + 1, se);\\n        st[si] = min(st[2 * si] , st[(2 * si) + 1]);\\n    }\\n\\n    int answerQuery(int si, int ss, int se, int qs, int qe) {\\n\\n        if (qs > se || qe < ss) return INT_MAX;\\n\\n        if (qs <= ss && qe >= se) {\\n            return st[si];\\n        }\\n        int mid = (ss + se) / 2;\\n        int l = answerQuery(2 * si, ss, mid, qs, qe);\\n        int r = answerQuery((2 * si) + 1, mid + 1, se, qs, qe);\\n\\n        return min(l, r);\\n    }\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> v(n + 1);\\n        map<int, vector<int>> indexs;\\n\\n        for (int i = 1; i <= n; i++) {\\n            int x = nums[i - 1];\\n            arr[i] = x;\\n            v[i] = x;\\n            indexs[x].pb(i);\\n        }\\n        // int k;cin>>k;\\n        k++;\\n        buildTree(1, 1, n);\\n        int maxi = 0, l = 1, r = n;\\n\\n        auto pred = [&](int mid, vector<int>&dummy) {\\n            return (dummy[mid] <= k);\\n        };\\n        //int op = 100;\\n        while (true) {\\n            //cout << l << \" \" << r << endl;\\n            if (l > k || r < k) break;\\n            int mini = answerQuery(1, 1, n, l, r), len = r - l + 1;\\n            maxi = max(maxi, mini * len);\\n            if (r == l) break;\\n            int remove = mini;\\n            vector<int> dummy = indexs[remove];\\n\\n            int left = -1, right = dummy.size();\\n            while (right - left > 1) {\\n                int mid = (left + right + 1) / 2;\\n                (pred(mid, dummy)) ? (left = mid) : (right = mid);\\n            }\\n            int smaller;\\n            if (left == -1) { \\n                smaller = l;\\n            } else {     \\n                smaller = dummy[left] + 1;\\n            }\\n            int larger;\\n            if (right == dummy.size()) {\\n                larger = r;\\n            } else {\\n                larger = dummy[right] - 1;\\n            }\\n            // deb(smaller);deb(larger);\\n            l = max(smaller, l), r = min(larger, r);\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Segment Tree"
                ],
                "code": "```\\nconst int N = 100001;\\nclass Solution {\\n\\nint arr[N], st[4 * N];\\n#define pb push_back\\n\\n    void buildTree(int si, int ss, int se) {\\n        if (ss == se) {\\n            st[si] = arr[ss]; return;\\n        }\\n        int mid = (ss + se) / 2;\\n        buildTree(2 * si, ss, mid);\\n        buildTree((2 * si) + 1, mid + 1, se);\\n        st[si] = min(st[2 * si] , st[(2 * si) + 1]);\\n    }\\n\\n    int answerQuery(int si, int ss, int se, int qs, int qe) {\\n\\n        if (qs > se || qe < ss) return INT_MAX;\\n\\n        if (qs <= ss && qe >= se) {\\n            return st[si];\\n        }\\n        int mid = (ss + se) / 2;\\n        int l = answerQuery(2 * si, ss, mid, qs, qe);\\n        int r = answerQuery((2 * si) + 1, mid + 1, se, qs, qe);\\n\\n        return min(l, r);\\n    }\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> v(n + 1);\\n        map<int, vector<int>> indexs;\\n\\n        for (int i = 1; i <= n; i++) {\\n            int x = nums[i - 1];\\n            arr[i] = x;\\n            v[i] = x;\\n            indexs[x].pb(i);\\n        }\\n        // int k;cin>>k;\\n        k++;\\n        buildTree(1, 1, n);\\n        int maxi = 0, l = 1, r = n;\\n\\n        auto pred = [&](int mid, vector<int>&dummy) {\\n            return (dummy[mid] <= k);\\n        };\\n        //int op = 100;\\n        while (true) {\\n            //cout << l << \" \" << r << endl;\\n            if (l > k || r < k) break;\\n            int mini = answerQuery(1, 1, n, l, r), len = r - l + 1;\\n            maxi = max(maxi, mini * len);\\n            if (r == l) break;\\n            int remove = mini;\\n            vector<int> dummy = indexs[remove];\\n\\n            int left = -1, right = dummy.size();\\n            while (right - left > 1) {\\n                int mid = (left + right + 1) / 2;\\n                (pred(mid, dummy)) ? (left = mid) : (right = mid);\\n            }\\n            int smaller;\\n            if (left == -1) { \\n                smaller = l;\\n            } else {     \\n                smaller = dummy[left] + 1;\\n            }\\n            int larger;\\n            if (right == dummy.size()) {\\n                larger = r;\\n            } else {\\n                larger = dummy[right] - 1;\\n            }\\n            // deb(smaller);deb(larger);\\n            l = max(smaller, l), r = min(larger, r);\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3350023,
                "title": "step-by-step-faster-94-greedy",
                "content": "**First approach** \\nGets TLE, Does exactly what is told\\n\\n```c++\\n int maximumScore(vector<int>& nums, int k, int res = INT_MIN) {\\n        for (int i = 0; i < nums.size(); i++) {\\n            int min_in_range = INT_MAX;\\n            for (int j = i; j < nums.size(); j++) {\\n                min_in_range = min(min_in_range, nums[j]);\\n                if (i <= k && j >= k) \\n                    res = max(res, min_in_range * (j - i + 1));\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\n**Optimized approach** \\nFaster 94%\\n\\nTo optimize\\n- As index `k` must be included,lets start from that index\\n- Greedily select greater items from `left` and `right` and calculate `max(min_in_range, len)`\\n\\n```c++\\nint maximumScore(vector<int>& nums, int k) {\\n        int mini = nums[k], l = k - 1, r = k + 1, cnt = 1, len = nums.size(), res = mini;\\n        \\n        while (l >= 0 && r < len) {\\n            auto left = nums[l], right = nums[r], cnt++;\\n            mini = min(mini, right > left ? nums[r++]: nums[l--]);\\n            cnt++;\\n            res = max(res, mini * cnt);\\n        }\\n        \\n        while (l >= 0)\\n            mini = min(mini, nums[l--]), cnt++, res = max(res, mini * cnt);\\n        \\n        while (r < len)\\n            mini = min(mini, nums[r++]), cnt++, res = max(res, mini * cnt);\\n        \\n        return res;\\n}\\n```\\n\\n**For more solutions, check out this \\uD83C\\uDFC6  [GITHUB REPOSITORY](https://github.com/MuhtasimTanmoy/playground) with over 1500+ solutions.**",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\n int maximumScore(vector<int>& nums, int k, int res = INT_MIN) {\\n        for (int i = 0; i < nums.size(); i++) {\\n            int min_in_range = INT_MAX;\\n            for (int j = i; j < nums.size(); j++) {\\n                min_in_range = min(min_in_range, nums[j]);\\n                if (i <= k && j >= k) \\n                    res = max(res, min_in_range * (j - i + 1));\\n            }\\n        }\\n        return res;\\n    }\\n```\n```c++\\nint maximumScore(vector<int>& nums, int k) {\\n        int mini = nums[k], l = k - 1, r = k + 1, cnt = 1, len = nums.size(), res = mini;\\n        \\n        while (l >= 0 && r < len) {\\n            auto left = nums[l], right = nums[r], cnt++;\\n            mini = min(mini, right > left ? nums[r++]: nums[l--]);\\n            cnt++;\\n            res = max(res, mini * cnt);\\n        }\\n        \\n        while (l >= 0)\\n            mini = min(mini, nums[l--]), cnt++, res = max(res, mini * cnt);\\n        \\n        while (r < len)\\n            mini = min(mini, nums[r++]), cnt++, res = max(res, mini * cnt);\\n        \\n        return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3077437,
                "title": "2-solution-stack-approach-and-two-pointer-concise-c",
                "content": "# Maximum area in histogram\\n\\n```\\nclass Solution{\\npublic:\\n    int maximumScore(vector<int> &nums, int k)\\n    {\\n\\n        // Add a 0 to the end of the \\'nums\\' vector\\n        nums.push_back(0);\\n        // Initialize a variable \\'n\\' to store the size of the \\'nums\\' vector\\n        int n = nums.size();\\n        // Initialize a variable \\'i\\' to keep track of the current index in \\'nums\\'\\n        int i = 0;\\n        // Initialize a variable \\'maxx\\' to store the maximum score\\n        int maxx = 0;\\n        // Create a stack \\'st\\' to store the indices of the integers in \\'nums\\'\\n        stack<int> st;\\n        // While loop to iterate through all elements in \\'nums\\'\\n        while (i < n)\\n        {\\n            // If the stack \\'st\\' is empty or the current element in \\'nums\\' is greater than or equal to the last element in \\'st\\'\\n            if (st.empty() || nums[i] >= nums[st.top()])\\n            {\\n                // Push the current index \\'i\\' into the stack \\'st\\'\\n                st.push(i++);\\n            }\\n            // Else if the current element in \\'nums\\' is less than the last element in \\'st\\'\\n            else\\n            {\\n                // Pop the last element in \\'st\\' and store it in the variable \\'x\\'\\n                int x = st.top();\\n                st.pop();\\n                // Check if the subarray with the minimum element at index \\'k\\' is within the current boundaries of the subarray\\n                // and update \\'maxx\\' with the maximum value between the previous value of \\'maxx\\' and the product of the popped element \\'x\\'\\n                // and the length of the subarray\\n                if ((st.empty() ? 0 : st.top() + 1) <= k && k <= i - 1)\\n                {\\n                    maxx = max(maxx, nums[x] * (st.empty() ? i : i - st.top() - 1));\\n                }\\n            }\\n        }\\n        // Return the maximum score\\n        return maxx;\\n    }\\n};\\n```\\n\\n\\n\\n#  Two pointers\\n```\\nclass Solution{\\npublic:\\n    int maximumScore(vector<int> &nums, int k)\\n    {\\n        // Initialize a variable \\'mn\\' to store the minimum element in the subarray\\n        int mn = nums[k];\\n        // Initialize two variables \\'i\\' and \\'j\\' to store the left and right boundaries of the subarray\\n        int i = k, j = k;\\n        // Initialize a variable \\'res\\' to store the maximum score\\n        int res = nums[k];\\n        // Do-while loop to iterate through all possible subarrays with the minimum element at index \\'k\\'\\n        do\\n        {\\n            // Check if the left boundary \\'i\\' is greater than 0 and the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n            if (i > 0 && j < nums.size() - 1)\\n            {\\n                // If the element at \\'i-1\\' is greater than or equal to the element at \\'j+1\\', move the left boundary \\'i\\' to the left\\n                if (nums[i - 1] >= nums[j + 1])\\n                {\\n                    --i;\\n                }\\n                // Else move the right boundary \\'j\\' to the right\\n                else\\n                {\\n                    ++j;\\n                }\\n            }\\n            // Else if the left boundary \\'i\\' is at the first index of \\'nums\\' and the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n            else if (i == 0 && j < nums.size() - 1)\\n            {\\n                // Move the right boundary \\'j\\' to the right\\n                ++j;\\n            }\\n            // Else if the right boundary \\'j\\' is at the last index of \\'nums\\' and the left boundary \\'i\\' is greater than 0\\n            else if (j == nums.size() - 1 && i > 0)\\n            {\\n                // Move the left boundary \\'i\\' to the left\\n                --i;\\n            }\\n            // Update the variable \\'mn\\' with the minimum value between the current elements at \\'i\\' and \\'j\\' and the previous value of \\'mn\\'\\n            mn = min({mn, nums[i], nums[j]});\\n            // Update the variable \\'res\\' with the maximum value between the previous value of \\'res\\' and the product of \\'mn\\' and the length of the subarray\\n            res = max(res, mn * (j - i + 1));\\n        }\\n        // Continue the do-while loop until the left boundary \\'i\\' is greater than 0 or the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n        while (i > 0 || j < nums.size() - 1);\\n        // Return the maximum score\\n        return res;\\n    }\\n};\\n```\\n\\nDO UPVOTE!",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Stack",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution{\\npublic:\\n    int maximumScore(vector<int> &nums, int k)\\n    {\\n\\n        // Add a 0 to the end of the \\'nums\\' vector\\n        nums.push_back(0);\\n        // Initialize a variable \\'n\\' to store the size of the \\'nums\\' vector\\n        int n = nums.size();\\n        // Initialize a variable \\'i\\' to keep track of the current index in \\'nums\\'\\n        int i = 0;\\n        // Initialize a variable \\'maxx\\' to store the maximum score\\n        int maxx = 0;\\n        // Create a stack \\'st\\' to store the indices of the integers in \\'nums\\'\\n        stack<int> st;\\n        // While loop to iterate through all elements in \\'nums\\'\\n        while (i < n)\\n        {\\n            // If the stack \\'st\\' is empty or the current element in \\'nums\\' is greater than or equal to the last element in \\'st\\'\\n            if (st.empty() || nums[i] >= nums[st.top()])\\n            {\\n                // Push the current index \\'i\\' into the stack \\'st\\'\\n                st.push(i++);\\n            }\\n            // Else if the current element in \\'nums\\' is less than the last element in \\'st\\'\\n            else\\n            {\\n                // Pop the last element in \\'st\\' and store it in the variable \\'x\\'\\n                int x = st.top();\\n                st.pop();\\n                // Check if the subarray with the minimum element at index \\'k\\' is within the current boundaries of the subarray\\n                // and update \\'maxx\\' with the maximum value between the previous value of \\'maxx\\' and the product of the popped element \\'x\\'\\n                // and the length of the subarray\\n                if ((st.empty() ? 0 : st.top() + 1) <= k && k <= i - 1)\\n                {\\n                    maxx = max(maxx, nums[x] * (st.empty() ? i : i - st.top() - 1));\\n                }\\n            }\\n        }\\n        // Return the maximum score\\n        return maxx;\\n    }\\n};\\n```\n```\\nclass Solution{\\npublic:\\n    int maximumScore(vector<int> &nums, int k)\\n    {\\n        // Initialize a variable \\'mn\\' to store the minimum element in the subarray\\n        int mn = nums[k];\\n        // Initialize two variables \\'i\\' and \\'j\\' to store the left and right boundaries of the subarray\\n        int i = k, j = k;\\n        // Initialize a variable \\'res\\' to store the maximum score\\n        int res = nums[k];\\n        // Do-while loop to iterate through all possible subarrays with the minimum element at index \\'k\\'\\n        do\\n        {\\n            // Check if the left boundary \\'i\\' is greater than 0 and the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n            if (i > 0 && j < nums.size() - 1)\\n            {\\n                // If the element at \\'i-1\\' is greater than or equal to the element at \\'j+1\\', move the left boundary \\'i\\' to the left\\n                if (nums[i - 1] >= nums[j + 1])\\n                {\\n                    --i;\\n                }\\n                // Else move the right boundary \\'j\\' to the right\\n                else\\n                {\\n                    ++j;\\n                }\\n            }\\n            // Else if the left boundary \\'i\\' is at the first index of \\'nums\\' and the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n            else if (i == 0 && j < nums.size() - 1)\\n            {\\n                // Move the right boundary \\'j\\' to the right\\n                ++j;\\n            }\\n            // Else if the right boundary \\'j\\' is at the last index of \\'nums\\' and the left boundary \\'i\\' is greater than 0\\n            else if (j == nums.size() - 1 && i > 0)\\n            {\\n                // Move the left boundary \\'i\\' to the left\\n                --i;\\n            }\\n            // Update the variable \\'mn\\' with the minimum value between the current elements at \\'i\\' and \\'j\\' and the previous value of \\'mn\\'\\n            mn = min({mn, nums[i], nums[j]});\\n            // Update the variable \\'res\\' with the maximum value between the previous value of \\'res\\' and the product of \\'mn\\' and the length of the subarray\\n            res = max(res, mn * (j - i + 1));\\n        }\\n        // Continue the do-while loop until the left boundary \\'i\\' is greater than 0 or the right boundary \\'j\\' is less than the last index of \\'nums\\'\\n        while (i > 0 || j < nums.size() - 1);\\n        // Return the maximum score\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2660450,
                "title": "stack-solution-largest-rectangle-in-histogram-python",
                "content": "\\tclass Solution:\\n\\t\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n\\t\\t\\tdef nsr(arr):\\n\\t\\t\\t\\tans=[]\\n\\t\\t\\t\\tstack=[]\\n\\t\\t\\t\\tfor i in range(len(arr)-1,-1,-1):\\n\\t\\t\\t\\t\\twhile stack and arr[stack[-1]]>=arr[i]:\\n\\t\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tans.append(len(arr))\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tans.append(stack[-1])\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\t\\treturn ans[::-1]\\n\\t\\t\\tdef nsl(arr):\\n\\t\\t\\t\\tans=[]\\n\\t\\t\\t\\tstack=[]\\n\\t\\t\\t\\tfor i in range(len(arr)):\\n\\t\\t\\t\\t\\twhile stack and arr[stack[-1]]>=arr[i]:\\n\\t\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tans.append(-1)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tans.append(stack[-1])\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\t\\treturn ans\\n\\t\\t\\tnslArr= nsl(nums)\\n\\t\\t\\tnsrArr= nsr(nums)\\n\\t\\t\\tscore =0\\n\\t\\t\\t#here we are finding the nearest smaller to the left and to the right \\n\\t\\t\\t#because we want to maximize and for a number we find its minimum from both side and take +1 index from left and -1 index from the right\\n\\t\\t\\t#and for the range r-l-1 -\\n\\t\\t\\t#for the length it is r-l+1 but we are removing the l and r because these are the minimum so r-l+1-2 -> r-l-1\\n\\t\\t\\tfor i in range(len(nums)):\\n\\t\\t\\t\\tl = nslArr[i]\\n\\t\\t\\t\\tr = nsrArr[i]\\n\\t\\t\\t\\tif l+1<=k and r-1>=k:\\n\\t\\t\\t\\t\\tscore=max(score,nums[i]*(r-l-1))\\n\\t\\t\\treturn score",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Stack"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n\\t\\t\\tdef nsr(arr):\\n\\t\\t\\t\\tans=[]\\n\\t\\t\\t\\tstack=[]\\n\\t\\t\\t\\tfor i in range(len(arr)-1,-1,-1):\\n\\t\\t\\t\\t\\twhile stack and arr[stack[-1]]>=arr[i]:\\n\\t\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tans.append(len(arr))\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tans.append(stack[-1])\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\t\\treturn ans[::-1]\\n\\t\\t\\tdef nsl(arr):\\n\\t\\t\\t\\tans=[]\\n\\t\\t\\t\\tstack=[]\\n\\t\\t\\t\\tfor i in range(len(arr)):\\n\\t\\t\\t\\t\\twhile stack and arr[stack[-1]]>=arr[i]:\\n\\t\\t\\t\\t\\t\\tstack.pop()\\n\\t\\t\\t\\t\\tif not stack:\\n\\t\\t\\t\\t\\t\\tans.append(-1)\\n\\t\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\t\\tans.append(stack[-1])\\n\\t\\t\\t\\t\\tstack.append(i)\\n\\t\\t\\t\\treturn ans\\n\\t\\t\\tnslArr= nsl(nums)\\n\\t\\t\\tnsrArr= nsr(nums)\\n\\t\\t\\tscore =0\\n\\t\\t\\t#here we are finding the nearest smaller to the left and to the right \\n\\t\\t\\t#because we want to maximize and for a number we find its minimum from both side and take +1 index from left and -1 index from the right\\n\\t\\t\\t#and for the range r-l-1 -\\n\\t\\t\\t#for the length it is r-l+1 but we are removing the l and r because these are the minimum so r-l+1-2 -> r-l-1\\n\\t\\t\\tfor i in range(len(nums)):\\n\\t\\t\\t\\tl = nslArr[i]\\n\\t\\t\\t\\tr = nsrArr[i]\\n\\t\\t\\t\\tif l+1<=k and r-1>=k:\\n\\t\\t\\t\\t\\tscore=max(score,nums[i]*(r-l-1))\\n\\t\\t\\treturn score",
                "codeTag": "Java"
            },
            {
                "id": 2501239,
                "title": "c-two-pointer-one-pass-o-n",
                "content": "```\\nint maximumScore(vector<int>& v, int k) {\\n        int i=k,j=k,n=v.size(),mn=v[k],res=0;\\n        while(i>=0 && j<n){\\n            mn=min({mn,v[j],v[i]});\\n            res=max(res,(j-i+1)*mn);\\n            if(j<(n-1) && i>0 )\\n            {\\n                if(v[j+1]<v[i-1])i--;\\n                else j++;\\n            }\\n            else{\\n                if(j==(n-1))i--;\\n                else j++;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint maximumScore(vector<int>& v, int k) {\\n        int i=k,j=k,n=v.size(),mn=v[k],res=0;\\n        while(i>=0 && j<n){\\n            mn=min({mn,v[j],v[i]});\\n            res=max(res,(j-i+1)*mn);\\n            if(j<(n-1) && i>0 )\\n            {\\n                if(v[j+1]<v[i-1])i--;\\n                else j++;\\n            }\\n            else{\\n                if(j==(n-1))i--;\\n                else j++;\\n            }\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2159323,
                "title": "two-pointer-greedy-linear-time",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        length = len(nums)\\n        maximumPossibleScore = nums[k]\\n        minimum = nums[k]\\n        left = k\\n        right = k\\n        \\n        while left > 0 or right < length - 1:\\n            if left > 0 and right < length - 1:\\n                if nums[left - 1] > nums[right + 1]:\\n                    left -= 1\\n                    minimum = min(minimum, nums[left])\\n                else:\\n                    right += 1\\n                    minimum = min(minimum, nums[right])\\n            \\n            elif left > 0:\\n                left -= 1\\n                minimum = min(minimum, nums[left])\\n            \\n            else:\\n                right += 1\\n                minimum = min(minimum, nums[right])\\n            \\n            score = minimum*(right-left+1)\\n            maximumPossibleScore = max(maximumPossibleScore, score)\\n        \\n        return maximumPossibleScore\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        length = len(nums)\\n        maximumPossibleScore = nums[k]\\n        minimum = nums[k]\\n        left = k\\n        right = k\\n        \\n        while left > 0 or right < length - 1:\\n            if left > 0 and right < length - 1:\\n                if nums[left - 1] > nums[right + 1]:\\n                    left -= 1\\n                    minimum = min(minimum, nums[left])\\n                else:\\n                    right += 1\\n                    minimum = min(minimum, nums[right])\\n            \\n            elif left > 0:\\n                left -= 1\\n                minimum = min(minimum, nums[left])\\n            \\n            else:\\n                right += 1\\n                minimum = min(minimum, nums[right])\\n            \\n            score = minimum*(right-left+1)\\n            maximumPossibleScore = max(maximumPossibleScore, score)\\n        \\n        return maximumPossibleScore\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2093306,
                "title": "this-problem-is-similar-to-largest-histogram-problem",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n=len(nums)\\n        stack=[]\\n        right,left=[n]*n,[-1]*n\\n        for i in range(0,n):\\n            while stack and nums[stack[-1]]>nums[i]:\\n                right[stack[-1]]=i\\n                stack.pop()\\n            stack.append(i)\\n        nums,stack=nums[::-1],[]\\n        for i in range(0,n):\\n            while stack and nums[stack[-1]]>nums[i]:\\n                left[n-stack[-1]-1]=n-i-1\\n                stack.pop()\\n            stack.append(i)\\n        maxx,nums=float(\\'-inf\\'),nums[::-1]\\n        for i in range(0,n):\\n            if left[i]<k and k<right[i]:\\n                maxx=max((right[i]-left[i]-1)*nums[i],maxx)\\n        return maxx\\n```",
                "solutionTags": [
                    "Python",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n=len(nums)\\n        stack=[]\\n        right,left=[n]*n,[-1]*n\\n        for i in range(0,n):\\n            while stack and nums[stack[-1]]>nums[i]:\\n                right[stack[-1]]=i\\n                stack.pop()\\n            stack.append(i)\\n        nums,stack=nums[::-1],[]\\n        for i in range(0,n):\\n            while stack and nums[stack[-1]]>nums[i]:\\n                left[n-stack[-1]-1]=n-i-1\\n                stack.pop()\\n            stack.append(i)\\n        maxx,nums=float(\\'-inf\\'),nums[::-1]\\n        for i in range(0,n):\\n            if left[i]<k and k<right[i]:\\n                maxx=max((right[i]-left[i]-1)*nums[i],maxx)\\n        return maxx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1877626,
                "title": "easy-to-understand",
                "content": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n = v.size();\\n        k++;\\n        vector<int> a(n+5,0);\\n        vector<int> b(n+5,0);\\n        \\n        stack<pair<int,int>>  st;\\n        for(int i=0;i<n;i++)\\n        {\\n            b[i+1]=n+1;\\n            while(!st.empty() && st.top().first>v[i])\\n            {\\n               b[st.top().second]=i+1;\\n                st.pop();\\n            }\\n            st.push({v[i],i+1});\\n        }\\n        for(int i=n-1;i>=0;i--)\\n        {\\n\\n            while(!st.empty() && st.top().first>v[i])\\n            {\\n               a[st.top().second]=i+1;\\n                st.pop();\\n            }\\n            st.push({v[i],i+1});\\n        }\\n      //  for(int i=1;i<=n;i++) cout<<a[i]<<\" \"<<b[i]<<endl;\\n        int ans=0;\\n        for(int i=1;i<=n;i++)\\n        {\\n            int x=v[i-1];\\n            int l=a[i]+1;\\n            int r=b[i]-1;\\n            if(l<=k && r>=k)\\n            {\\n                x*=(r-l+1);\\n                ans=max(ans,x);\\n            }\\n        }\\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n = v.size();\\n        k++;\\n        vector<int> a(n+5,0);\\n        vector<int> b(n+5,0);\\n        \\n        stack<pair<int,int>>  st;\\n        for(int i=0;i<n;i++)\\n        {\\n            b[i+1]=n+1;\\n            while(!st.empty() && st.top().first>v[i])\\n            {\\n               b[st.top().second]=i+1;\\n                st.pop();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1859472,
                "title": "monotonic-stack-o-n-solution-clean-c",
                "content": "The idea is simple, instead of find every good subarraies, we calculate the score of using each number as a minimum.\\nIn a monotinic stack, a number is minimum between its predecessor and sucessor. So we can come up with the algorithm:\\n1 Create a monotonic increasing stack, if there is smaller new commer, remove the ones on the top of the stack greater than it.\\n2 For the one which will be removed (pop) from the top of the stack, it can be the minimum of a subarray betweent current number and next stack top (exclusive)\\n3 Since we only conside the maximum score, with the given number as the minimum, we choose the longest interval to get the score only.\\n4 Since the good array must contains nums[k], we do a boundary check before update the score to the final result.\\n\\nEach number push and pop once, so the time and space complexity is O(N).\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint maximumScore(vector<int>& nums, int k) {\\n\\t\\t\\tstack<int> stk;\\n\\t\\t\\t// append a zero to pop all of the original numbers\\n\\t\\t\\tnums.push_back(0);\\n\\t\\t\\tint ans = 0;\\n\\t\\t\\tfor(int i = 0; i < nums.size(); i++){\\n\\t\\t\\t\\twhile(!stk.empty() && nums[i] < nums[stk.top()]){\\n\\t\\t\\t\\t\\t// nums[stk.top()] as min value\\n\\t\\t\\t\\t\\tint min_id = stk.top();\\n\\t\\t\\t\\t\\tstk.pop();\\n\\t\\t\\t\\t\\tint min_val = nums[min_id];\\n\\t\\t\\t\\t\\tint right = i - 1;\\n\\t\\t\\t\\t\\tint left = stk.empty() ? 0 : (stk.top() + 1);\\n\\t\\t\\t\\t\\tint score = min_val * (right - left + 1);\\n\\t\\t\\t\\t\\tif(left <= k && k <= right){\\n\\t\\t\\t\\t\\t\\tans = max(ans, score);\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tstk.push(i);\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "Stack"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint maximumScore(vector<int>& nums, int k) {\\n\\t\\t\\tstack<int> stk;\\n\\t\\t\\t// append a zero to pop all of the original numbers\\n\\t\\t\\tnums.push_back(0);\\n\\t\\t\\tint ans = 0;\\n\\t\\t\\tfor(int i = 0; i < nums.size(); i++){\\n\\t\\t\\t\\twhile(!stk.empty() && nums[i] < nums[stk.top()]){\\n\\t\\t\\t\\t\\t// nums[stk.top()] as min value\\n\\t\\t\\t\\t\\tint min_id = stk.top();\\n\\t\\t\\t\\t\\tstk.pop();\\n\\t\\t\\t\\t\\tint min_val = nums[min_id];\\n\\t\\t\\t\\t\\tint right = i - 1;\\n\\t\\t\\t\\t\\tint left = stk.empty() ? 0 : (stk.top() + 1);\\n\\t\\t\\t\\t\\tint score = min_val * (right - left + 1);\\n\\t\\t\\t\\t\\tif(left <= k && k <= right){\\n\\t\\t\\t\\t\\t\\tans = max(ans, score);\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1761711,
                "title": "c-solution-using-prefix-suffix-minumums",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int mn[n], res=0;\\n        mn[k]=nums[k];\\n        for(int i=k-1; i>=0; i--) mn[i]=min(nums[i], mn[i+1]);\\n        for(int i=k+1; i<n; i++) mn[i]=min(nums[i], mn[i-1]);\\n        for(int i=k, j=k; i>=0; i--) {\\n            for(; j<n-1 && nums[j+1]>=mn[i]; j++) {}\\n            res=max(res, mn[i]*(j-i+1));\\n        }\\n        for(int i=k, j=k; i<n; i++) {\\n            for(; j>0 && nums[j-1]>=mn[i]; j--) {}\\n            res=max(res, mn[i]*(i-j+1));\\n        }\\n        return res;\\n    }\\n};```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int mn[n], res=0;\\n        mn[k]=nums[k];\\n        for(int i=k-1; i>=0; i--) mn[i]=min(nums[i], mn[i+1]);\\n        for(int i=k+1; i<n; i++) mn[i]=min(nums[i], mn[i-1]);\\n        for(int i=k, j=k; i>=0; i--) {\\n            for(; j<n-1 && nums[j+1]>=mn[i]; j++) {}\\n            res=max(res, mn[i]*(j-i+1));\\n        }\\n        for(int i=k, j=k; i<n; i++) {\\n            for(; j>0 && nums[j-1]>=mn[i]; j--) {}\\n            res=max(res, mn[i]*(i-j+1));\\n        }\\n        return res;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1644531,
                "title": "clean-python",
                "content": "There are two cases when min is in the left side and right side. Consider the first case when it is in the left side and say left side extended to index `i`, then since right side\\'s minimums are decreasing it can be extended to some `j` after which extending will violate minimum on left side condition. Extending `i` from `k to 0` will keep extending `j` in increasing order, thus we can keep the old `j` and try to extend as much as possible for given `i`. This case is linear in time, second case is similar.\\n\\n```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        n = len(nums)\\n        mins = [nums[k]] * n\\n\\n        for i in range(k - 1, -1, -1):\\n            mins[i] = min(mins[i + 1], nums[i])\\n        for j in range(k + 1, n):\\n            mins[j] = min(mins[j - 1], nums[j])\\n\\n        mx = 0\\n        j = k\\n        for i in range(k, -1, -1):\\n            while j + 1 < n and mins[j + 1] >= mins[i]:\\n                j += 1\\n            mx = max(mx, mins[i] * (j - i + 1))\\n\\n        i = k\\n        for j in range(k, n):\\n            while i - 1 >= 0 and mins[i - 1] >= mins[j]:\\n                i -= 1\\n            mx = max(mx, mins[j] * (j - i + 1))\\n\\n        return mx\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        n = len(nums)\\n        mins = [nums[k]] * n\\n\\n        for i in range(k - 1, -1, -1):\\n            mins[i] = min(mins[i + 1], nums[i])\\n        for j in range(k + 1, n):\\n            mins[j] = min(mins[j - 1], nums[j])\\n\\n        mx = 0\\n        j = k\\n        for i in range(k, -1, -1):\\n            while j + 1 < n and mins[j + 1] >= mins[i]:\\n                j += 1\\n            mx = max(mx, mins[i] * (j - i + 1))\\n\\n        i = k\\n        for j in range(k, n):\\n            while i - 1 >= 0 and mins[i - 1] >= mins[j]:\\n                i -= 1\\n            mx = max(mx, mins[j] * (j - i + 1))\\n\\n        return mx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1627359,
                "title": "c-solution-using-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& a, int k) {\\n        int n=a.size();\\n        stack<pair<int,int>>s;\\n        int l[n+2];\\n        int r[n+2];\\n        for(int i=0;i<n;i++){\\n            int cnt=1;\\n            while(!s.empty() && s.top().first>a[i]){\\n                cnt+=s.top().second;\\n                s.pop();\\n            }\\n            l[i]=cnt;\\n            s.push({a[i],cnt});\\n        }\\n        while(!s.empty())s.pop();\\n        for(int i=n-1;i>=0;i--){\\n            int cnt=1;\\n            while(!s.empty() && s.top().first>=a[i]){\\n                cnt+=s.top().second;\\n                s.pop();\\n            }\\n            r[i]=cnt;\\n            s.push({a[i],cnt});\\n        }\\n        long long mx=0LL;\\n        for(int i=0;i<n;i++){\\n            int id1=i-l[i]+1;\\n            int id2=i+r[i]-1;\\n            if(id1<=k && k<=id2)mx=max(mx,1LL*a[i]*(id2-id1+1));\\n        }\\n        return mx;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& a, int k) {\\n        int n=a.size();\\n        stack<pair<int,int>>s;\\n        int l[n+2];\\n        int r[n+2];\\n        for(int i=0;i<n;i++){\\n            int cnt=1;\\n            while(!s.empty() && s.top().first>a[i]){\\n                cnt+=s.top().second;\\n                s.pop();\\n            }\\n            l[i]=cnt;\\n            s.push({a[i],cnt});\\n        }\\n        while(!s.empty())s.pop();\\n        for(int i=n-1;i>=0;i--){\\n            int cnt=1;\\n            while(!s.empty() && s.top().first>=a[i]){\\n                cnt+=s.top().second;\\n                s.pop();\\n            }\\n            r[i]=cnt;\\n            s.push({a[i],cnt});\\n        }\\n        long long mx=0LL;\\n        for(int i=0;i<n;i++){\\n            int id1=i-l[i]+1;\\n            int id2=i+r[i]-1;\\n            if(id1<=k && k<=id2)mx=max(mx,1LL*a[i]*(id2-id1+1));\\n        }\\n        return mx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1595670,
                "title": "python-t-o-n-and-s-o-1-with-88-89-and-99-59",
                "content": "* THINK OF MONOTONIC STACK FROM THE LOCATION K TO BOTH THE SIDES OF ARRAY (u may do it in-place)\\n* Then the extreme locations will have the smallest value...\\n* e.g. 3, 3, 2, 2, 5, 6, 7, 9, 2, 1 will be\\n* --.--2, 2, 2, 2, 5, 5, 5, 5, 2, 1 where K = 4\\n* Now use TWOPOINTER from both the sides upto K\\n* :)\\n\\n\\n```\\nclass Solution:\\n    def maximumScore(self, n: List[int], kk: int) -> int:\\n        \\n        vmin = n[kk]\\n        for i in range(kk,-1,-1):\\n            if n[i]<vmin:\\n                vmin = n[i]\\n            else:\\n                n[i] = vmin\\n\\n        vmin = n[kk]\\n        for i in range(kk,len(n)):\\n            if n[i]<vmin:\\n                vmin = n[i]\\n            else:\\n                n[i] = vmin\\n\\n        good = 0\\n        li = 0\\n        ri = len(n)-1\\n        while li<=kk and ri>= kk:\\n            vmin = min(n[li],n[ri])\\n            if vmin*(ri-li+1)>good:\\n                good = min(n[li],n[ri])*(ri-li+1)\\n            \\n            if li == ri:\\n                break\\n                \\n            while li<kk and n[li]==vmin:\\n                li += 1\\n                \\n            while ri>kk and n[ri]==vmin:\\n                ri -= 1\\n            \\n        \\n        return good\\n        \\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, n: List[int], kk: int) -> int:\\n        \\n        vmin = n[kk]\\n        for i in range(kk,-1,-1):\\n            if n[i]<vmin:\\n                vmin = n[i]\\n            else:\\n                n[i] = vmin\\n\\n        vmin = n[kk]\\n        for i in range(kk,len(n)):\\n            if n[i]<vmin:\\n                vmin = n[i]\\n            else:\\n                n[i] = vmin\\n\\n        good = 0\\n        li = 0\\n        ri = len(n)-1\\n        while li<=kk and ri>= kk:\\n            vmin = min(n[li],n[ri])\\n            if vmin*(ri-li+1)>good:\\n                good = min(n[li],n[ri])*(ri-li+1)\\n            \\n            if li == ri:\\n                break\\n                \\n            while li<kk and n[li]==vmin:\\n                li += 1\\n                \\n            while ri>kk and n[ri]==vmin:\\n                ri -= 1\\n            \\n        \\n        return good\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1531240,
                "title": "c-two-pointer-greedy-with-proper-explanation",
                "content": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        \\n        /* Approach : Two Pointer + Greedy \\n        \\n         The result is expanded to both sides of index K , as i<=k<=j \\n         \\n         So we first keep our two pointers at index K , i.e i=k && j=k\\n         \\n         Now greedily we have to traverse to the both sides such that our result be maximum.\\n         \\nNow the question is What is the method of two pointer traversal and more importantly Why???\\n         \\n         So Let\\'s try to visualize an array like : [1,4,3,7,4,5] and given K=3\\n         \\n         i=3 , j=3\\n         \\n         So the inhand result=nums[k]=7 it is the minimum result that we can form from this array nums. As if we see that after traversing whi\\\\ole side according to the conditions , the result is still minimum than nums[k] , we are not going to add those in our result.\\n         \\n         \\n         Now as i>0 we can explore left side of these index i.e [1,4,3] && alongwith j<n-1(6-1)\\n         i.e j<5 So we can also explore the right side of these index i.e [4,5]\\n         \\n         \\n         Now first check whether nums[i-1] < nums[j+1]  OR\\n                                 nums[i-1] > nums[j+1]\\n                                 \\n         For the first Case we explore the right side of our current index and for the Second Case we explore the left side of our current index.\\n         \\n         And thus we keep on exploring both sides and compare which is minimum between our current index k and (i-1 || j+1) . \\n         \\n         \\n                      */\\n        \\n        \\n        int n=nums.size();\\n        int i=k,j=k;\\n        int ans=nums[k];\\n        int minval=nums[k];\\n        \\n        \\n        while( i>0 || j<n-1 ){\\n            \\n            if((i>0 ? nums[i-1] : 0) < (j<n-1 ? nums[j+1] : 0)){\\n                minval=min(minval,nums[j+1]);\\n                j++;\\n            }\\n            \\n            else{\\n                minval=min(minval,nums[i-1]);\\n                i--;\\n            }\\n            \\n            ans=max(ans,minval*(j-i+1));\\n            \\n        }\\n                       \\n        return ans;\\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        \\n        /* Approach : Two Pointer + Greedy \\n        \\n         The result is expanded to both sides of index K , as i<=k<=j \\n         \\n         So we first keep our two pointers at index K , i.e i=k && j=k\\n         \\n         Now greedily we have to traverse to the both sides such that our result be maximum.\\n         \\nNow the question is What is the method of two pointer traversal and more importantly Why???\\n         \\n         So Let\\'s try to visualize an array like : [1,4,3,7,4,5] and given K=3\\n         \\n         i=3 , j=3\\n         \\n         So the inhand result=nums[k]=7 it is the minimum result that we can form from this array nums. As if we see that after traversing whi\\\\ole side according to the conditions , the result is still minimum than nums[k] , we are not going to add those in our result.\\n         \\n         \\n         Now as i>0 we can explore left side of these index i.e [1,4,3] && alongwith j<n-1(6-1)\\n         i.e j<5 So we can also explore the right side of these index i.e [4,5]\\n         \\n         \\n         Now first check whether nums[i-1] < nums[j+1]  OR\\n                                 nums[i-1] > nums[j+1]\\n                                 \\n         For the first Case we explore the right side of our current index and for the Second Case we explore the left side of our current index.\\n         \\n         And thus we keep on exploring both sides and compare which is minimum between our current index k and (i-1 || j+1) . \\n         \\n         \\n                      */\\n        \\n        \\n        int n=nums.size();\\n        int i=k,j=k;\\n        int ans=nums[k];\\n        int minval=nums[k];\\n        \\n        \\n        while( i>0 || j<n-1 ){\\n            \\n            if((i>0 ? nums[i-1] : 0) < (j<n-1 ? nums[j+1] : 0)){\\n                minval=min(minval,nums[j+1]);\\n                j++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1474453,
                "title": "c-solution-in-o-n-time-complexity-using-nsl-and-nsr-concept",
                "content": "For every index find the nearest smaller value index in left and same for the right side  and then check that K is lie between these indexes and then find the max of all nums[i]*(rightIndex-leftIndex+1).\\n```\\nint maximumScore(vector<int>& nums, int k) {\\n        stack<pair<int,int>> s;\\n        int ans=0;\\n        vector<int> left(nums.size(),-1),right(nums.size(),nums.size());\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(s.empty())\\n            {\\n                s.push({nums[i],i});\\n            }\\n            else \\n            {\\n                while(!s.empty() and s.top().first>=nums[i])\\n                {\\n                    s.pop();\\n                }\\n                if(!s.empty())\\n                {\\n                    left[i]=s.top().second;\\n                }\\n                s.push({nums[i],i});\\n            }\\n        }\\n/////////////////////////////////////////////////////\\n        while(!s.empty())\\n        {\\n            s.pop();\\n        }\\n//////////////////////////////////////////////////////\\n        for(int i=nums.size()-1; i>=0; i--)\\n        {\\n            if(s.empty())\\n            {\\n                s.push({nums[i],i});\\n            }\\n            else \\n            {\\n                while(!s.empty() and s.top().first>=nums[i])\\n                {\\n                    s.pop();\\n                }\\n                if(!s.empty())\\n                {\\n                   right[i]=s.top().second;\\n                }\\n                s.push({nums[i],i});\\n            }\\n        }\\n//////////////////////////////////////////////////////////\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            int l=left[i]+1;\\n            int r=right[i]-1;\\n            if(l<=k and k<=r)\\n            {\\n                int p=nums[i]*(r-l+1);\\n                ans=max(ans,p);\\n            }\\n        }\\n        return ans;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n        stack<pair<int,int>> s;\\n        int ans=0;\\n        vector<int> left(nums.size(),-1),right(nums.size(),nums.size());\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            if(s.empty())\\n            {\\n                s.push({nums[i],i});\\n            }\\n            else \\n            {\\n                while(!s.empty() and s.top().first>=nums[i])\\n                {\\n                    s.pop();\\n                }\\n                if(!s.empty())\\n                {\\n                    left[i]=s.top().second;\\n                }\\n                s.push({nums[i],i});\\n            }\\n        }\\n/////////////////////////////////////////////////////\\n        while(!s.empty())\\n        {\\n            s.pop();\\n        }\\n//////////////////////////////////////////////////////\\n        for(int i=nums.size()-1; i>=0; i--)\\n        {\\n            if(s.empty())\\n            {\\n                s.push({nums[i],i});\\n            }\\n            else \\n            {\\n                while(!s.empty() and s.top().first>=nums[i])\\n                {\\n                    s.pop();\\n                }\\n                if(!s.empty())\\n                {\\n                   right[i]=s.top().second;\\n                }\\n                s.push({nums[i],i});\\n            }\\n        }\\n//////////////////////////////////////////////////////////\\n        for(int i=0; i<nums.size(); i++)\\n        {\\n            int l=left[i]+1;\\n            int r=right[i]-1;\\n            if(l<=k and k<=r)\\n            {\\n                int p=nums[i]*(r-l+1);\\n                ans=max(ans,p);\\n            }\\n        }\\n        return ans;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1466017,
                "title": "c-greedy-faster-than-99",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int lowest = nums[k], ans = nums[k];\\n        int l = k, r = k;\\n        int n = nums.size();\\n        while(l >= 0 || r <= n - 1) {\\n            while(l > 0) {\\n                if(nums[l - 1] < lowest) break;\\n                --l;\\n            }\\n            while(r < n - 1) {\\n                if(nums[r + 1] < lowest) break;\\n                ++r;\\n            }\\n            ans = max(ans, (r - l + 1) * lowest);\\n            if(l == 0 && r != n - 1) {\\n                lowest = nums[r + 1];\\n            } else if(l == 0 && r == n - 1) {\\n                break;\\n            } else if(l != 0 && r == n - 1) {\\n                lowest = nums[l - 1];\\n            } else {\\n                lowest = max(nums[l - 1], nums[r + 1]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int lowest = nums[k], ans = nums[k];\\n        int l = k, r = k;\\n        int n = nums.size();\\n        while(l >= 0 || r <= n - 1) {\\n            while(l > 0) {\\n                if(nums[l - 1] < lowest) break;\\n                --l;\\n            }\\n            while(r < n - 1) {\\n                if(nums[r + 1] < lowest) break;\\n                ++r;\\n            }\\n            ans = max(ans, (r - l + 1) * lowest);\\n            if(l == 0 && r != n - 1) {\\n                lowest = nums[r + 1];\\n            } else if(l == 0 && r == n - 1) {\\n                break;\\n            } else if(l != 0 && r == n - 1) {\\n                lowest = nums[l - 1];\\n            } else {\\n                lowest = max(nums[l - 1], nums[r + 1]);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1417274,
                "title": "python-c-two-pointers",
                "content": "Python -->\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n=len(nums)\\n        i,j=k,k\\n        ans=nums[k]\\n        Min=nums[k]\\n        while i>0 and j+1<n:\\n            if nums[j+1]>nums[i-1]:\\n                Min=min(Min,nums[j+1])\\n                j+=1\\n            else:\\n                Min=min(Min,nums[i-1])\\n                i-=1\\n            ans=max(ans,Min*(j-i+1))\\n        while i>0:\\n            Min=min(Min,nums[i-1])\\n            i-=1\\n            ans=max(ans,Min*(j-i+1))\\n        while j+1<n:\\n            Min=min(Min,nums[j+1])\\n            j+=1\\n            ans=max(ans,Min*(j-i+1))\\n        return ans\\n```\\n\\nC++ -->\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int i=k,j=k;\\n        int Min=nums[k];\\n        int ans=nums[k];\\n        while (i>0 && j+1<n){\\n            if (nums[j+1]>nums[i-1]){\\n                Min=min(Min,nums[j+1]);\\n                j+=1;\\n            }\\n            else{\\n                Min=min(Min,nums[i-1]);\\n                i-=1;\\n            }\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        while (i>0){\\n            Min=min(Min,nums[i-1]);\\n            i-=1;\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        while (j+1<n){\\n            Min=min(Min,nums[j+1]);\\n            j+=1;\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Python",
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n=len(nums)\\n        i,j=k,k\\n        ans=nums[k]\\n        Min=nums[k]\\n        while i>0 and j+1<n:\\n            if nums[j+1]>nums[i-1]:\\n                Min=min(Min,nums[j+1])\\n                j+=1\\n            else:\\n                Min=min(Min,nums[i-1])\\n                i-=1\\n            ans=max(ans,Min*(j-i+1))\\n        while i>0:\\n            Min=min(Min,nums[i-1])\\n            i-=1\\n            ans=max(ans,Min*(j-i+1))\\n        while j+1<n:\\n            Min=min(Min,nums[j+1])\\n            j+=1\\n            ans=max(ans,Min*(j-i+1))\\n        return ans\\n```\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        int i=k,j=k;\\n        int Min=nums[k];\\n        int ans=nums[k];\\n        while (i>0 && j+1<n){\\n            if (nums[j+1]>nums[i-1]){\\n                Min=min(Min,nums[j+1]);\\n                j+=1;\\n            }\\n            else{\\n                Min=min(Min,nums[i-1]);\\n                i-=1;\\n            }\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        while (i>0){\\n            Min=min(Min,nums[i-1]);\\n            i-=1;\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        while (j+1<n){\\n            Min=min(Min,nums[j+1]);\\n            j+=1;\\n            ans=max(ans,Min*(j-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1395749,
                "title": "java-monotonic-increasing-subsequence-with-stack-o-n",
                "content": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) \\n    {\\n        Stack<Integer> stack = new Stack<Integer>();\\n        \\n        for(int i = 0; i <= k; i++)\\n        {\\n            while(!stack.isEmpty() && nums[stack.peek()] > nums[i])\\n                stack.pop();\\n            \\n            stack.push(i);\\n        }\\n        \\n        int result = 0;\\n        \\n        for(int i = k + 1; i < nums.length; i++)\\n        {\\n            if(nums[stack.peek()] > nums[i])\\n            {\\n                while(!stack.isEmpty() && nums[stack.peek()] > nums[i])\\n                {\\n                    int position = stack.pop();\\n                    int n = stack.isEmpty() ? i : i - stack.peek() - 1;\\n                    result = Math.max(nums[position] * n, result);\\n                }\\n\\n                stack.push(i);\\n            }\\n        }\\n        \\n        while(!stack.isEmpty())\\n        {\\n            int position = stack.pop();\\n            \\n            int n = stack.isEmpty() ? nums.length : nums.length - stack.peek() - 1;\\n            \\n            result = Math.max(nums[position] * n, result);\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) \\n    {\\n        Stack<Integer> stack = new Stack<Integer>();\\n        \\n        for(int i = 0; i <= k; i++)\\n        {\\n            while(!stack.isEmpty() && nums[stack.peek()] > nums[i])\\n                stack.pop();\\n            \\n            stack.push(i);\\n        }\\n        \\n        int result = 0;\\n        \\n        for(int i = k + 1; i < nums.length; i++)\\n        {\\n            if(nums[stack.peek()] > nums[i])\\n            {\\n                while(!stack.isEmpty() && nums[stack.peek()] > nums[i])\\n                {\\n                    int position = stack.pop();\\n                    int n = stack.isEmpty() ? i : i - stack.peek() - 1;\\n                    result = Math.max(nums[position] * n, result);\\n                }\\n\\n                stack.push(i);\\n            }\\n        }\\n        \\n        while(!stack.isEmpty())\\n        {\\n            int position = stack.pop();\\n            \\n            int n = stack.isEmpty() ? nums.length : nums.length - stack.peek() - 1;\\n            \\n            result = Math.max(nums[position] * n, result);\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1380426,
                "title": "sparse-table-two-pointers-c",
                "content": "class Solution {\\npublic:\\n    \\n    int sparse[200018][18];\\n    int log_[200018];\\n    \\n    void build_log(){\\n        log_[1]=0;\\n        for (int i = 2; i < 200018; i++) {\\n            log_[i]=log_[i>>1]+1;\\n        }\\n    }\\n     \\n    void build(vector<int>nums,int n){\\n        for (int i = 0; i < n; i++) {\\n            sparse[i][0]=nums[i];\\n        }\\n        for (int j = 1; j < 18; j++) {\\n            for (int i = 0; i+(1<<j)-1< n; i++) {\\n                sparse[i][j]=min(sparse[i][j-1],sparse[i+(1<<(j-1))][j-1]);\\n            }\\n        }\\n    }\\n    \\n    int query(int x,int y){\\n        int have=log_[y-x+1];\\n        return min(sparse[x][have],sparse[y-(1<<have)+1][have]);\\n        \\n    }\\n \\n    int maximumScore(vector<int>& nums,int k) {\\n        build_log();\\n        int n=nums.size();\\n        build(nums,n);\\n        int left=0,right =n - 1;\\n        int score = 0;\\n        while (left <= k && k<= right){\\n            score = max(score, query(left,right) * (right - left + 1));\\n            if (query(left,k) <= query(k,right)){\\n                left += 1;\\n            }else{\\n                right-=1;\\n            }\\n        }\\n\\t    return score ;\\n        \\n        \\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    \\n    int sparse[200018][18];\\n    int log_[200018];\\n    \\n    void build_log(){\\n        log_[1]=0;\\n        for (int i = 2; i < 200018; i++) {\\n            log_[i]=log_[i>>1]+1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1363459,
                "title": "python-two-pointers-and-how-to-behave-when-being-asked-during-interviews",
                "content": "### Two Pointers\\nBecause good arrays must include *k*, we can start from *k* towards fronts and backs of *nums* to calcualte the *mins*.  It\\'s always good for us to start first step with the condition given.\\n\\nThen we use two pointers *left* and *right* represent the valid subarray, with `0` and `n - 1` positions. With *mins*, we can know the minimum of subarray and then calculate the score. Then next step is to move the pointer for next valid subarray, which side should we move?  The smaller side, the score won\\'t be increased otherwise because the smaller side dominates the minimum value and the length of subarray decreases. \\nRecall the trap water questions. So we need move smaller sides to get possible bigger value that is used to calculate the score that is possible to be maximum score.\\n\\n```python\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n\\tn = len(nums)\\n    mins = list(nums)\\n    for i in range(k - 1, -1, -1):\\n\\t\\tmins[i] = min(mins[i], mins[i + 1])\\n\\tfor i in range(k + 1, n):\\n\\t\\tmins[i] = min(mins[i], mins[i - 1])\\n        \\n\\tleft, right = 0, n - 1\\n    score = 0\\n    while left <= k <= right:\\n\\t\\tscore = max(score, min(mins[left], mins[right]) * (right - left + 1))\\n        if mins[left] <= mins[right]:\\n\\t\\t\\tleft += 1\\n\\t\\telse:\\n\\t\\t\\tright -= 1 \\n\\treturn score \\n```\\n\\n*Time Complexity*= **O(N)**\\n*Space Complexity*= **O(N)**",
                "solutionTags": [],
                "code": "```python\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n\\tn = len(nums)\\n    mins = list(nums)\\n    for i in range(k - 1, -1, -1):\\n\\t\\tmins[i] = min(mins[i], mins[i + 1])\\n\\tfor i in range(k + 1, n):\\n\\t\\tmins[i] = min(mins[i], mins[i - 1])\\n        \\n\\tleft, right = 0, n - 1\\n    score = 0\\n    while left <= k <= right:\\n\\t\\tscore = max(score, min(mins[left], mins[right]) * (right - left + 1))\\n        if mins[left] <= mins[right]:\\n\\t\\t\\tleft += 1\\n\\t\\telse:\\n\\t\\t\\tright -= 1 \\n\\treturn score \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1342457,
                "title": "easy-c-two-pointer",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n         int l=0,r=nums.size()-1,ans=0,min_ele,n=nums.size();\\n        vector<int> dp(n);\\n        dp[k]=nums[k];\\n        int i=k+1;\\n        while(i<n)\\n        {\\n            dp[i]=min(nums[i],dp[i-1]);\\n            i++;\\n        }\\n        i=k-1;\\n        while(i>=0)\\n        {\\n            dp[i]=min(nums[i],dp[i+1]);\\n            i--;\\n        }\\n        while(l<=k&&r>=k)\\n        {\\n            min_ele=min(dp[l],dp[r]);\\n            ans=max(ans,min_ele*(r-l+1));\\n            if(dp[l]<=dp[r])\\n               l++;\\n            else\\n             r--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n         int l=0,r=nums.size()-1,ans=0,min_ele,n=nums.size();\\n        vector<int> dp(n);\\n        dp[k]=nums[k];\\n        int i=k+1;\\n        while(i<n)\\n        {\\n            dp[i]=min(nums[i],dp[i-1]);\\n            i++;\\n        }\\n        i=k-1;\\n        while(i>=0)\\n        {\\n            dp[i]=min(nums[i],dp[i+1]);\\n            i--;\\n        }\\n        while(l<=k&&r>=k)\\n        {\\n            min_ele=min(dp[l],dp[r]);\\n            ans=max(ans,min_ele*(r-l+1));\\n            if(dp[l]<=dp[r])\\n               l++;\\n            else\\n             r--;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1310972,
                "title": "1-minute-read-stack-based-solution-java-o-n",
                "content": "The algorithm is quite similar to [84. Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/), we find the next smaller element to the right and to the left of the current element. and for each element we find the best value of the score satisfying `i <= k <= j`.\\n\\nBelow is the Java Code for the above approach.\\n\\n```java\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> st = new Stack<>();\\n        int n = nums.length;\\n        int left[] = new int[n];\\n        int right[] = new int[n];\\n        Arrays.fill(right, n);\\n        for(int i = 0; i < n; i++) {\\n            while(!st.isEmpty() && nums[st.peek()] > nums[i]) {\\n                int temp = st.pop();\\n                right[temp] = i;\\n            }\\n            st.push(i);\\n        }\\n        \\n        st.empty();\\n        Arrays.fill(left, -1);\\n        for(int i = n - 1; i >= 0; i--) {\\n            while(!st.isEmpty() && nums[st.peek()] > nums[i]) {\\n                left[st.pop()] = i;\\n            }\\n            st.push(i);\\n        }\\n        \\n        int score = 0;\\n        for(int i = 0; i < n; i++) {\\n            if(left[i] + 1 <= k && right[i] - 1 >= k) {\\n                score = Math.max(score, (right[i] - left[i] - 1) * nums[i]);\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Stack"
                ],
                "code": "```java\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> st = new Stack<>();\\n        int n = nums.length;\\n        int left[] = new int[n];\\n        int right[] = new int[n];\\n        Arrays.fill(right, n);\\n        for(int i = 0; i < n; i++) {\\n            while(!st.isEmpty() && nums[st.peek()] > nums[i]) {\\n                int temp = st.pop();\\n                right[temp] = i;\\n            }\\n            st.push(i);\\n        }\\n        \\n        st.empty();\\n        Arrays.fill(left, -1);\\n        for(int i = n - 1; i >= 0; i--) {\\n            while(!st.isEmpty() && nums[st.peek()] > nums[i]) {\\n                left[st.pop()] = i;\\n            }\\n            st.push(i);\\n        }\\n        \\n        int score = 0;\\n        for(int i = 0; i < n; i++) {\\n            if(left[i] + 1 <= k && right[i] - 1 >= k) {\\n                score = Math.max(score, (right[i] - left[i] - 1) * nums[i]);\\n            }\\n        }\\n        return score;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1242415,
                "title": "o-n-by-sliding-window-easy-to-understand-c-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n     \\n        int n = nums.size();\\n        int res = INT_MIN;\\n    \\n        int i = k, j = k;\\n        int mina = INT_MAX;\\n        while(i >= 0 && j <= n-1){\\n            \\n            mina = min(mina, nums[j]);\\n            mina = min(mina, nums[i]);\\n            \\n            res = max(mina*(j-i+1), res);\\n            if(i == 0 && j == n-1){\\n                res = max(mina*(j-i+1), res);\\n            }\\n            if(i == 0){\\n                j += 1;\\n                continue;\\n            }\\n            if(j == n-1){\\n                i -= 1;\\n            }\\n            else{\\n                if(nums[j+1] > nums[i-1]){\\n                    j += 1;\\n                }else{\\n                    i -= 1;\\n                }\\n            }\\n        }\\n    \\n        return res;\\n    }\\n};\\n```\\nif You You Like Upvode This ...\\n-Thank you",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n     \\n        int n = nums.size();\\n        int res = INT_MIN;\\n    \\n        int i = k, j = k;\\n        int mina = INT_MAX;\\n        while(i >= 0 && j <= n-1){\\n            \\n            mina = min(mina, nums[j]);\\n            mina = min(mina, nums[i]);\\n            \\n            res = max(mina*(j-i+1), res);\\n            if(i == 0 && j == n-1){\\n                res = max(mina*(j-i+1), res);\\n            }\\n            if(i == 0){\\n                j += 1;\\n                continue;\\n            }\\n            if(j == n-1){\\n                i -= 1;\\n            }\\n            else{\\n                if(nums[j+1] > nums[i-1]){\\n                    j += 1;\\n                }else{\\n                    i -= 1;\\n                }\\n            }\\n        }\\n    \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1235614,
                "title": "stack-o-n-easy-cpp",
                "content": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i,j,l=0,a,b;\\n        i=0,j=0;\\n        unordered_map<int,int>mp1,mp2;\\n        stack<int>s;\\n        l=nums.size();\\n        for(i=0;i<l;i++)\\n        {\\n            while(!s.empty()&&nums[s.top()]>nums[i])\\n            {\\n                mp1[s.top()]=i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }\\n        while(!s.empty())\\n            s.pop();\\n         for(i=l-1;i>=0;i--)\\n        {\\n            while(!s.empty()&&nums[s.top()]>nums[i])\\n            {\\n                mp2[s.top()]=i;\\n                s.pop();\\n            }\\n            s.push(i);\\n        }\\n        j=0;\\n        for(i=0;i<l;i++)\\n        {\\n            a=-1,b=l;\\n            if(mp1.find(i)!=mp1.end())\\n                b=mp1[i];\\n            if(mp2.find(i)!=mp2.end())\\n                a=mp2[i];\\n            if(a<k&&b>k)\\n            {\\n               j=max(j,(nums[i]*(b-a-1))); \\n            }\\n        }\\n        return j;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i,j,l=0,a,b;\\n        i=0,j=0;\\n        unordered_map<int,int>mp1,mp2;\\n        stack<int>s;\\n        l=nums.size();\\n        for(i=0;i<l;i++)\\n        {\\n            while(!s.empty()&&nums[s.top()]>nums[i])\\n            {\\n                mp1[s.top()]=i;\\n                s.pop();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1202257,
                "title": "c-monostack",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0);\\n        int n = nums.size(), ans = 0;\\n        stack<int> s;\\n        for(int i = 0; i < n; ++i){\\n            while (s.size() and nums[s.top()] > nums[i])\\n            {\\n                int j = s.top();\\n                s.pop();\\n                int left = (s.size() ? s.top() + 1 : 0);\\n                if (k >= left and k <= i - 1){\\n                    int prod = nums[j] * (i - left);\\n                    ans = max(ans, prod);\\n                }\\n            }\\n            s.push(i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0);\\n        int n = nums.size(), ans = 0;\\n        stack<int> s;\\n        for(int i = 0; i < n; ++i){\\n            while (s.size() and nums[s.top()] > nums[i])\\n            {\\n                int j = s.top();\\n                s.pop();\\n                int left = (s.size() ? s.top() + 1 : 0);\\n                if (k >= left and k <= i - 1){\\n                    int prod = nums[j] * (i - left);\\n                    ans = max(ans, prod);\\n                }\\n            }\\n            s.push(i);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1141231,
                "title": "python-simple-soln",
                "content": "```\\n\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n        minSoFar = nums[k]\\n        i = k\\n        j = k\\n        score = minSoFar\\n        while i-1 >= 0 or j+1 < len(nums):\\n            if (i-1 < 0) or ((j+1 < len(nums)) and (nums[j+1] >= nums[i-1])):\\n                j += 1\\n                minSoFar = min(nums[j], minSoFar)\\n                score = max(score, minSoFar*(j-max(i, 0)+1))\\n            elif (j+1 >= len(nums)) or ((i-1 >= 0) and nums[i-1] >= nums[j+1]):\\n                i -= 1\\n                minSoFar = min(nums[i], minSoFar)\\n                score = max(score, minSoFar*(min(j, len(nums)-1)-i+1))\\n        return score\\n```",
                "solutionTags": [],
                "code": "```\\n\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n        minSoFar = nums[k]\\n        i = k\\n        j = k\\n        score = minSoFar\\n        while i-1 >= 0 or j+1 < len(nums):\\n            if (i-1 < 0) or ((j+1 < len(nums)) and (nums[j+1] >= nums[i-1])):\\n                j += 1\\n                minSoFar = min(nums[j], minSoFar)\\n                score = max(score, minSoFar*(j-max(i, 0)+1))\\n            elif (j+1 >= len(nums)) or ((i-1 >= 0) and nums[i-1] >= nums[j+1]):\\n                i -= 1\\n                minSoFar = min(nums[i], minSoFar)\\n                score = max(score, minSoFar*(min(j, len(nums)-1)-i+1))\\n        return score\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1140690,
                "title": "c-two-pointers-greedy-compact-solution-o-n-runtime-complexity-o-1-space-complexity",
                "content": "The idea behind my solution is to start by considering the interval `[k, k]` and then grow it greedily left or right. Among the two directions, we will choose the one for which the `nums` array has the largest value. As we expand the interval, we also update the candidate solution if applicable. Solution below:  \\n\\n        int iL = k, iR = k, result = nums[k];\\n        \\n        int minValue = nums[k];\\n        while (iL > 0 || iR < nums.size() - 1) {\\n            int lVal = iL > 0 ? nums[iL - 1] : INT_MIN;\\n            int rVal = iR < nums.size() - 1 ? nums[iR + 1] : INT_MIN;\\n            \\n            if (lVal > rVal) {\\n                iL -= 1;\\n                minValue = min(minValue, lVal);\\n            } else {\\n                iR += 1;\\n                minValue = min(minValue, rVal);\\n            }\\n            result = max(result, minValue * (iR - iL + 1));\\n        }\\n        return result;",
                "solutionTags": [],
                "code": "The idea behind my solution is to start by considering the interval `[k, k]` and then grow it greedily left or right. Among the two directions, we will choose the one for which the `nums` array has the largest value. As we expand the interval, we also update the candidate solution if applicable. Solution below:  \\n\\n        int iL = k, iR = k, result = nums[k];\\n        \\n        int minValue = nums[k];\\n        while (iL > 0 || iR < nums.size() - 1) {\\n            int lVal = iL > 0 ? nums[iL - 1] : INT_MIN;\\n            int rVal = iR < nums.size() - 1 ? nums[iR + 1] : INT_MIN;\\n            \\n            if (lVal > rVal) {\\n                iL -= 1;\\n                minValue = min(minValue, lVal);\\n            } else {\\n                iR += 1;\\n                minValue = min(minValue, rVal);\\n            }\\n            result = max(result, minValue * (iR - iL + 1));\\n        }\\n        return result;",
                "codeTag": "Unknown"
            },
            {
                "id": 1114005,
                "title": "java-easy-solution-100-faster-o-n-time-greedy",
                "content": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int l = k, r=k;\\n        int ans = nums[k];\\n        int min = nums[k];\\n        while(l > 0 || r < nums.length-1){\\n            if(l>0 && r<nums.length-1){\\n                if(nums[l-1] > nums[r+1]){\\n                    l--;\\n                    min = Math.min(min, nums[l]);\\n                }else{\\n                    r++;\\n                    min = Math.min(min, nums[r]);\\n                }\\n            }else if(l>0){\\n                l--;\\n                min = Math.min(min, nums[l]);\\n            }else{\\n                r++;\\n                min = Math.min(min, nums[r]);\\n            }\\n            \\n            ans = Math.max(ans, min*(r-l+1));\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int l = k, r=k;\\n        int ans = nums[k];\\n        int min = nums[k];\\n        while(l > 0 || r < nums.length-1){\\n            if(l>0 && r<nums.length-1){\\n                if(nums[l-1] > nums[r+1]){\\n                    l--;\\n                    min = Math.min(min, nums[l]);\\n                }else{\\n                    r++;\\n                    min = Math.min(min, nums[r]);\\n                }\\n            }else if(l>0){\\n                l--;\\n                min = Math.min(min, nums[l]);\\n            }else{\\n                r++;\\n                min = Math.min(min, nums[r]);\\n            }\\n            \\n            ans = Math.max(ans, min*(r-l+1));\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110863,
                "title": "c-two-pointers-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int pt=nums[k];\\n        int ll=k;\\n        int rr=k;\\n        int ans=0;\\n        while(1)\\n        {\\n            while(rr+1<nums.size() && nums[rr+1]>=pt)\\n                rr++;\\n            while(ll-1>=0 && nums[ll-1]>=pt)\\n                ll--;\\n            int g=pt*(rr-ll+1);\\n            pt=0;\\n            if(rr+1<nums.size())\\n                pt=nums[rr+1];\\n            if(ll-1>=0)\\n                pt=max(pt,nums[ll-1]);\\n             ans=max(ans,g);\\n            if(pt==0)\\n                break;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int pt=nums[k];\\n        int ll=k;\\n        int rr=k;\\n        int ans=0;\\n        while(1)\\n        {\\n            while(rr+1<nums.size() && nums[rr+1]>=pt)\\n                rr++;\\n            while(ll-1>=0 && nums[ll-1]>=pt)\\n                ll--;\\n            int g=pt*(rr-ll+1);\\n            pt=0;\\n            if(rr+1<nums.size())\\n                pt=nums[rr+1];\\n            if(ll-1>=0)\\n                pt=max(pt,nums[ll-1]);\\n             ans=max(ans,g);\\n            if(pt==0)\\n                break;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110165,
                "title": "python3-greedy-two-pointers",
                "content": "Couldn\\'t do this problem during the contest for some reason...\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        min = nums[k]\\n        left, right = k, k\\n        res = min\\n        while left >= 0 or right < n:\\n            i = left\\n            while i >= 0 and nums[i] >= nums[left]:\\n                i -= 1\\n            j = right\\n            while j < n and nums[j] >= nums[right]:\\n                j += 1\\n            res = max(res, min * (j - i - 1))\\n            if i == -1 or j == n:\\n                left, right = i, j\\n                if j != n:\\n                    min = nums[j]\\n                elif i != -1:\\n                    min = nums[i]\\n            else:\\n                if nums[i] > nums[j]:\\n                    left, right = i, j - 1\\n                    min = nums[i]\\n                else:\\n                    left, right = i + 1, j\\n                    min = nums[j]\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        min = nums[k]\\n        left, right = k, k\\n        res = min\\n        while left >= 0 or right < n:\\n            i = left\\n            while i >= 0 and nums[i] >= nums[left]:\\n                i -= 1\\n            j = right\\n            while j < n and nums[j] >= nums[right]:\\n                j += 1\\n            res = max(res, min * (j - i - 1))\\n            if i == -1 or j == n:\\n                left, right = i, j\\n                if j != n:\\n                    min = nums[j]\\n                elif i != -1:\\n                    min = nums[i]\\n            else:\\n                if nums[i] > nums[j]:\\n                    left, right = i, j - 1\\n                    min = nums[i]\\n                else:\\n                    left, right = i + 1, j\\n                    min = nums[j]\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110159,
                "title": "c-monotonic-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0);\\n        stack<int> idx;\\n        int res = 0;\\n        for (int i = 0; i < nums.size(); i++) {\\n            while (!idx.empty() && nums[idx.top()] > nums[i]) {\\n                int m = nums[idx.top()];\\n                idx.pop();\\n                int l = idx.empty() ? -1 : idx.top();\\n                if(l < k && k < i) {\\n                    res = max((i - l - 1) * m, res);\\n                }\\n            }\\n            idx.push(i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.push_back(0);\\n        stack<int> idx;\\n        int res = 0;\\n        for (int i = 0; i < nums.size(); i++) {\\n            while (!idx.empty() && nums[idx.top()] > nums[i]) {\\n                int m = nums[idx.top()];\\n                idx.pop();\\n                int l = idx.empty() ? -1 : idx.top();\\n                if(l < k && k < i) {\\n                    res = max((i - l - 1) * m, res);\\n                }\\n            }\\n            idx.push(i);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1109527,
                "title": "dynamic-programming-approach",
                "content": "dynamic approach below uses O(n^2) in time complexity as it makes a 2D DP table. and uses O(n^2) space.\\nObviously realized greedy has much better time complexity and space complexity. and DP approach fails a test case(test case 36) due to not meeting time requirements/TLE.\\nNever the less, it was not intuitive first, that greedy will work.  Yet to figure , when to go greedy or not.\\nBut the intuition I feel now is, is choosing suboptimal solution does not break the global optimal, keep choosing the local optimal and eventually the search space is fully explored. In this case, choosing local optimum is definitely part of global optimum, so greedy works. But anyone who can help with figuring the intuition when greedy will work, would be great help.\\n\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n \\n        rows = k\\n        arrlength = len(nums)\\n        columns = arrlength -k - 1\\n        dp = [[0 for i in range(columns+1)] for j in range(rows+1)]\\n         \\n        dp[0][0]= nums[k]\\n        for i in range(1,rows+1):\\n            dp[i][0] = min(nums[k-i] , dp[i-1][0])\\n            \\n        for j in range(1,columns+1):\\n            dp[0][j] = min(nums[k+j], dp[0][j-1] )\\n        \\n        for i in range(1,rows+1):\\n            for j in range (1,columns+1):\\n                dp[i][j] = min(dp[i-1][j],dp[i][j-1])\\n\\n        maxval = dp[0][0]            \\n                \\n        for  i in range(1, rows+1):\\n            dp[i][0] = dp[i][0]*(i+1)\\n            \\n        for j in range (1, columns+1):\\n            dp[0][j] = dp[0][j] * (j+1)\\n        \\n        \\n        for i in range (1,rows+1):\\n            for j in range(1,columns+1):\\n                dp[i][j] = dp[i][j] * (j+i+1)\\n                \\n    \\n\\n        \\n        for i in range (0,rows+1):\\n            for j in range(columns+1):\\n                maxval = max(maxval,dp[i][j])\\n                \\n\\n                \\n        return maxval\\n\\t\\t```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n \\n        rows = k\\n        arrlength = len(nums)\\n        columns = arrlength -k - 1\\n        dp = [[0 for i in range(columns+1)] for j in range(rows+1)]\\n         \\n        dp[0][0]= nums[k]\\n        for i in range(1,rows+1):\\n            dp[i][0] = min(nums[k-i] , dp[i-1][0])\\n            \\n        for j in range(1,columns+1):\\n            dp[0][j] = min(nums[k+j], dp[0][j-1] )\\n        \\n        for i in range(1,rows+1):\\n            for j in range (1,columns+1):\\n                dp[i][j] = min(dp[i-1][j],dp[i][j-1])\\n\\n        maxval = dp[0][0]            \\n                \\n        for  i in range(1, rows+1):\\n            dp[i][0] = dp[i][0]*(i+1)\\n            \\n        for j in range (1, columns+1):\\n            dp[0][j] = dp[0][j] * (j+1)\\n        \\n        \\n        for i in range (1,rows+1):\\n            for j in range(1,columns+1):\\n                dp[i][j] = dp[i][j] * (j+i+1)\\n                \\n    \\n\\n        \\n        for i in range (0,rows+1):\\n            for j in range(columns+1):\\n                maxval = max(maxval,dp[i][j])\\n                \\n\\n                \\n        return maxval\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 1109239,
                "title": "c-monotone-stack-o-n",
                "content": "This is one application of templated monotone stack similar to other lc problems. We can see from the context that the score of a subarray is mainly defined by the local minimum value. i.e\\n\\n```\\nscore(nums[i,j]) = min(nums[i:j]) * (j - i + 1) , i,j are inclusive\\n```\\n\\nSo ...\\n1. We invertibly use `num` to locate the subarray i, j where `num` is the minimum in `nums[i:j]`.\\n2. Compute the score for each `num` and corresponding i, j.\\n3. Pick the maximum score given the restriction that i <= k <= j\\n. \\n```c++\\nclass Solution {\\npublic:\\n  int maximumScore(vector<int> &nums, int k) {\\n    int n = nums.size();\\n    stack<int> stk;\\n    vector<int> left(n, -1);  // index of next smaller to the left\\n    vector<int> right(n, n);  // index of next smaller to the right\\n\\n    // next smaller on left\\n    for(int i = 0; i < nums.size(); ++i) {\\n      while(!stk.empty() && nums[stk.top()] >= nums[i])\\n        stk.pop();\\n      if(!stk.empty()) left[i] = stk.top();\\n      stk.push(i);\\n    }\\n\\n    stk = stack<int>();\\n    // next smaller on right\\n    for(int i = n-1; i >= 0; --i) {\\n      while(!stk.empty() && nums[stk.top()] >= nums[i])\\n        stk.pop();\\n      if(!stk.empty()) right[i] = stk.top();\\n      stk.push(i);\\n    }\\n\\n    int res = 0;\\n    // get optimal results for each num restricted by k\\n    for(int i = 0; i < n; ++i) {\\n      int l = left[i] + 1, r = right[i] - 1;\\n      if(l > k || r < k) continue; \\n      res = max(res, nums[i] * (r-l+1));\\n    }\\n    return res;\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nscore(nums[i,j]) = min(nums[i:j]) * (j - i + 1) , i,j are inclusive\\n```\n```c++\\nclass Solution {\\npublic:\\n  int maximumScore(vector<int> &nums, int k) {\\n    int n = nums.size();\\n    stack<int> stk;\\n    vector<int> left(n, -1);  // index of next smaller to the left\\n    vector<int> right(n, n);  // index of next smaller to the right\\n\\n    // next smaller on left\\n    for(int i = 0; i < nums.size(); ++i) {\\n      while(!stk.empty() && nums[stk.top()] >= nums[i])\\n        stk.pop();\\n      if(!stk.empty()) left[i] = stk.top();\\n      stk.push(i);\\n    }\\n\\n    stk = stack<int>();\\n    // next smaller on right\\n    for(int i = n-1; i >= 0; --i) {\\n      while(!stk.empty() && nums[stk.top()] >= nums[i])\\n        stk.pop();\\n      if(!stk.empty()) right[i] = stk.top();\\n      stk.push(i);\\n    }\\n\\n    int res = 0;\\n    // get optimal results for each num restricted by k\\n    for(int i = 0; i < n; ++i) {\\n      int l = left[i] + 1, r = right[i] - 1;\\n      if(l > k || r < k) continue; \\n      res = max(res, nums[i] * (r-l+1));\\n    }\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108948,
                "title": "java-solution-using-monotonic-stack",
                "content": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer>stack=new Stack<>();\\n        ArrayList<Integer>arrayList=new ArrayList<>();\\n        ArrayList<Integer>arrayList1=new ArrayList<>();\\n        int len=nums.length;\\n        for (int i=len-1;i>=0;i--)\\n        {\\n            if (stack.isEmpty())\\n            {\\n                arrayList.add(-1);\\n            }\\n            else {\\n                while (!stack.isEmpty() && nums[i] <= nums[stack.peek()]) {\\n                    stack.pop();\\n                }\\n                if (stack.isEmpty())\\n                {\\n                    arrayList.add(-1);\\n                }\\n                else{\\n                    arrayList.add(stack.peek());\\n                }\\n            }\\n            stack.add(i);\\n        }\\n        stack=new Stack<>();\\n        for (int i=0;i<len;i++)\\n        {\\n            if (stack.isEmpty())\\n            {\\n                arrayList1.add(-1);\\n            }\\n            else {\\n                while (!stack.isEmpty() && nums[i] <= nums[stack.peek()]) {\\n                    stack.pop();\\n                }\\n                if (stack.isEmpty())\\n                {\\n                    arrayList1.add(-1);\\n                }\\n                else{\\n                    arrayList1.add(stack.peek());\\n                }\\n            }\\n            stack.add(i);\\n        }\\n        Collections.reverse(arrayList);\\n        int max=Integer.MIN_VALUE;\\n        for (int i=0;i<len;i++)\\n        {\\n            int start;\\n            int end;\\n            if (arrayList1.get(i)==-1)\\n            {\\n                start=-1;\\n            }\\n            else\\n            {\\n                start=arrayList1.get(i);\\n            }\\n            if (arrayList.get(i)==-1)\\n            {\\n                end=len;\\n            }\\n            else {\\n                end=arrayList.get(i);\\n            }\\n            int nowres=Integer.MIN_VALUE;\\n            if (start+1<=k&&end-1>=k) {\\n                 nowres = (end - start-1) * nums[i];\\n            }\\n            max=Math.max(max,nowres);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer>stack=new Stack<>();\\n        ArrayList<Integer>arrayList=new ArrayList<>();\\n        ArrayList<Integer>arrayList1=new ArrayList<>();\\n        int len=nums.length;\\n        for (int i=len-1;i>=0;i--)\\n        {\\n            if (stack.isEmpty())\\n            {\\n                arrayList.add(-1);\\n            }\\n            else {\\n                while (!stack.isEmpty() && nums[i] <= nums[stack.peek()]) {\\n                    stack.pop();\\n                }\\n                if (stack.isEmpty())\\n                {\\n                    arrayList.add(-1);\\n                }\\n                else{\\n                    arrayList.add(stack.peek());\\n                }\\n            }\\n            stack.add(i);\\n        }\\n        stack=new Stack<>();\\n        for (int i=0;i<len;i++)\\n        {\\n            if (stack.isEmpty())\\n            {\\n                arrayList1.add(-1);\\n            }\\n            else {\\n                while (!stack.isEmpty() && nums[i] <= nums[stack.peek()]) {\\n                    stack.pop();\\n                }\\n                if (stack.isEmpty())\\n                {\\n                    arrayList1.add(-1);\\n                }\\n                else{\\n                    arrayList1.add(stack.peek());\\n                }\\n            }\\n            stack.add(i);\\n        }\\n        Collections.reverse(arrayList);\\n        int max=Integer.MIN_VALUE;\\n        for (int i=0;i<len;i++)\\n        {\\n            int start;\\n            int end;\\n            if (arrayList1.get(i)==-1)\\n            {\\n                start=-1;\\n            }\\n            else\\n            {\\n                start=arrayList1.get(i);\\n            }\\n            if (arrayList.get(i)==-1)\\n            {\\n                end=len;\\n            }\\n            else {\\n                end=arrayList.get(i);\\n            }\\n            int nowres=Integer.MIN_VALUE;\\n            if (start+1<=k&&end-1>=k) {\\n                 nowres = (end - start-1) * nums[i];\\n            }\\n            max=Math.max(max,nowres);\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108729,
                "title": "easy-two-pointers-solution-c",
                "content": "Intuition is very simple, since i >= k >= j , we will be expanding our window from k towards start and end.\\nSince we want to maximise the minimum number in window, we will expand the window only in the direction which has greater value.\\nWhile expanding we\\'ll keep track of overall ans & minimum val in the current window.\\n\\n***\\n\\tint maximumScore(vector<int>& nums, int k) {\\n\\n        int i=k, j=k, ans=nums[k], minv=nums[k], n=nums.size();\\n        \\n        do {\\n            if(i>0 && j<n-1) {\\n                if(nums[i-1]>=nums[j+1])\\n                    i--;\\n                else\\n                    j++;\\n            }\\n            else if(i==0 && j<n-1)\\n                j++;\\n            else if(j==n-1 && i>0)\\n                i--;\\n            \\n            minv = min({minv,nums[i],nums[j]});\\n            ans = max(ans,(j-i+1)*minv);\\n        \\n        } while(i>0 || j<n-1);\\n        \\n        return ans;\\n    }\\n***\\n\\n**Time Complexity** - O(n)\\n\\n",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "Intuition is very simple, since i >= k >= j , we will be expanding our window from k towards start and end.\\nSince we want to maximise the minimum number in window, we will expand the window only in the direction which has greater value.\\nWhile expanding we\\'ll keep track of overall ans & minimum val in the current window.\\n\\n***\\n\\tint maximumScore(vector<int>& nums, int k) {\\n\\n        int i=k, j=k, ans=nums[k], minv=nums[k], n=nums.size();\\n        \\n        do {\\n            if(i>0 && j<n-1) {\\n                if(nums[i-1]>=nums[j+1])\\n                    i--;\\n                else\\n                    j++;\\n            }\\n            else if(i==0 && j<n-1)\\n                j++;\\n            else if(j==n-1 && i>0)\\n                i--;\\n            \\n            minv = min({minv,nums[i],nums[j]});\\n            ans = max(ans,(j-i+1)*minv);\\n        \\n        } while(i>0 || j<n-1);\\n        \\n        return ans;\\n    }\\n***\\n\\n**Time Complexity** - O(n)\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1108689,
                "title": "c-two-pointers-approach-time-complexity-o-n-simple-solution",
                "content": "* As i <=  k and j >=k, we initialize i=j=k\\n* We expand the window by either decreasing i or increasing j and each step calculate the score\\n\\t* Increase j if nums[i-1] < nums[j] , so that min is maximised for score\\n* Keep track of overall minimum in window and maximum score\\n\\n\\n```\\npublic class Solution {\\n    public int MaximumScore(int[] nums, int k) {\\n        \\n        int maxScore = nums[k], min = nums[k], i = k, j= k, n= nums.Length;\\n        \\n        while(i > 0 || j < n - 1)        \\n        {\\n            if(i == 0)\\n                ++j;\\n            else if (j == n-1)\\n                --i;\\n            else if(nums[i-1] < nums[j+1])\\n                ++j;\\n            else\\n                --i;\\n            \\n            min = Math.Min(min, nums[i] < nums[j] ? nums[i] : nums[j]);\\n            maxScore = Math.Max(maxScore, min*(j-i+1));\\n        }\\n        \\n        return maxScore;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int MaximumScore(int[] nums, int k) {\\n        \\n        int maxScore = nums[k], min = nums[k], i = k, j= k, n= nums.Length;\\n        \\n        while(i > 0 || j < n - 1)        \\n        {\\n            if(i == 0)\\n                ++j;\\n            else if (j == n-1)\\n                --i;\\n            else if(nums[i-1] < nums[j+1])\\n                ++j;\\n            else\\n                --i;\\n            \\n            min = Math.Min(min, nums[i] < nums[j] ? nums[i] : nums[j]);\\n            maxScore = Math.Max(maxScore, min*(j-i+1));\\n        }\\n        \\n        return maxScore;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108550,
                "title": "c-o-n-time-two-pointers",
                "content": "\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        \\n        int mini = nums[k];\\n        for(int i = k + 1; i< n; ++i) {\\n            nums[i] = std::min(mini, nums[i]);\\n            mini = nums[i];\\n        }\\n        \\n        mini = nums[k];\\n        for(int i = k - 1; i >= 0; --i) {\\n            nums[i] = std::min(mini, nums[i]);\\n            mini = nums[i];\\n        }\\n        \\n        int res = nums[k];\\n        for(int i = k + 1; i< n; ++i) { // scan right arry start at k\\n            int current = nums[i] * (i - k + 1);\\n            res = std::max(current, res);\\n        }\\n        \\n        for(int i = k - 1; i >= 0; --i) { // scan left array end at k\\n            int current = nums[i] * (k - i + 1);\\n            res = std::max(current, res);\\n        }\\n\\n        int left = k;\\n        int right = k;\\n        while(left >= 0 && right < n) { // scan array to both end from k // the rule is extend left or right which has larger value\\n            int current = std::min(nums[left], nums[right]) * (right - left + 1);\\n            res = std::max(res, current);\\n            \\n            int l1 = left;\\n            while (left > 0 && nums[left - 1] == nums[left]) {\\n                --left;\\n            }\\n            if (left < l1) continue;\\n            \\n            int r1 = right;\\n            while (right < n - 1 && nums[right + 1] == nums[right]) {\\n                ++right;\\n            }\\n            if (right > r1) continue;\\n            \\n            if (left == 0 && right == n) break;\\n            \\n            if (left == 0) {\\n                ++right;\\n                continue;\\n            }\\n            \\n            if (right == n) {\\n                --left;\\n                continue;\\n            }\\n            \\n            if (nums[left - 1] > nums[right + 1]) {\\n                --left;\\n            } else {\\n                ++right;\\n            }\\n            \\n        }\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        \\n        int mini = nums[k];\\n        for(int i = k + 1; i< n; ++i) {\\n            nums[i] = std::min(mini, nums[i]);\\n            mini = nums[i];\\n        }\\n        \\n        mini = nums[k];\\n        for(int i = k - 1; i >= 0; --i) {\\n            nums[i] = std::min(mini, nums[i]);\\n            mini = nums[i];\\n        }\\n        \\n        int res = nums[k];\\n        for(int i = k + 1; i< n; ++i) { // scan right arry start at k\\n            int current = nums[i] * (i - k + 1);\\n            res = std::max(current, res);\\n        }\\n        \\n        for(int i = k - 1; i >= 0; --i) { // scan left array end at k\\n            int current = nums[i] * (k - i + 1);\\n            res = std::max(current, res);\\n        }\\n\\n        int left = k;\\n        int right = k;\\n        while(left >= 0 && right < n) { // scan array to both end from k // the rule is extend left or right which has larger value\\n            int current = std::min(nums[left], nums[right]) * (right - left + 1);\\n            res = std::max(res, current);\\n            \\n            int l1 = left;\\n            while (left > 0 && nums[left - 1] == nums[left]) {\\n                --left;\\n            }\\n            if (left < l1) continue;\\n            \\n            int r1 = right;\\n            while (right < n - 1 && nums[right + 1] == nums[right]) {\\n                ++right;\\n            }\\n            if (right > r1) continue;\\n            \\n            if (left == 0 && right == n) break;\\n            \\n            if (left == 0) {\\n                ++right;\\n                continue;\\n            }\\n            \\n            if (right == n) {\\n                --left;\\n                continue;\\n            }\\n            \\n            if (nums[left - 1] > nums[right + 1]) {\\n                --left;\\n            } else {\\n                ++right;\\n            }\\n            \\n        }\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1108471,
                "title": "c-greedy-solution-expanding-from-k-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.insert(nums.begin(), 0); nums.push_back(0); // expand bounday with 0 for elegant code\\n        \\n        int left = k + 1, right = k + 1, localMin = nums[k + 1], res = nums[k + 1];\\n \\n        while (left > 0 && right < nums.size() - 1) {\\n            if (nums[left - 1] >= nums[right + 1]) {\\n                localMin = min(localMin, nums[--left]); \\n            } else {\\n                localMin = min(localMin, nums[++right]); \\n            }\\n            \\n            res = max(res, localMin * (right - left + 1));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        nums.insert(nums.begin(), 0); nums.push_back(0); // expand bounday with 0 for elegant code\\n        \\n        int left = k + 1, right = k + 1, localMin = nums[k + 1], res = nums[k + 1];\\n \\n        while (left > 0 && right < nums.size() - 1) {\\n            if (nums[left - 1] >= nums[right + 1]) {\\n                localMin = min(localMin, nums[--left]); \\n            } else {\\n                localMin = min(localMin, nums[++right]); \\n            }\\n            \\n            res = max(res, localMin * (right - left + 1));\\n        }\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1108436,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), ii=k, jj=k, ans=0;\\n        set<int> st;\\n        for (int elem : nums)\\n            st.insert(elem);\\n        ans = *st.begin() * n;\\n        for (auto it=st.rbegin(); it!=st.rend(); it++) {\\n            int elem = *it;\\n            //if (n*elem<ans) continue;\\n            //if (elem == *st.begin()) continue;\\n            while (ii>=0 && nums[ii]>=elem)\\n                ii--;\\n            if (ii<k && (ii<0 || nums[ii]!=elem))\\n                ii++;\\n            while (jj<n && nums[jj]>=elem)\\n                jj++;\\n            if (jj>k && (jj==n || nums[jj]!=elem))\\n                jj--; \\n            int curr = (jj-ii+1) *elem;\\n            if (jj==ii)\\n                curr = min(curr, nums[jj]);\\n            //cout << elem << \", \" << curr << endl;\\n            //cout << ii << \", \" << jj << endl;\\n            ans = max(ans, curr);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), ii=k, jj=k, ans=0;\\n        set<int> st;\\n        for (int elem : nums)\\n            st.insert(elem);\\n        ans = *st.begin() * n;\\n        for (auto it=st.rbegin(); it!=st.rend(); it++) {\\n            int elem = *it;\\n            //if (n*elem<ans) continue;\\n            //if (elem == *st.begin()) continue;\\n            while (ii>=0 && nums[ii]>=elem)\\n                ii--;\\n            if (ii<k && (ii<0 || nums[ii]!=elem))\\n                ii++;\\n            while (jj<n && nums[jj]>=elem)\\n                jj++;\\n            if (jj>k && (jj==n || nums[jj]!=elem))\\n                jj--; \\n            int curr = (jj-ii+1) *elem;\\n            if (jj==ii)\\n                curr = min(curr, nums[jj]);\\n            //cout << elem << \", \" << curr << endl;\\n            //cout << ii << \", \" << jj << endl;\\n            ans = max(ans, curr);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1108395,
                "title": "c-two-pointers-o-n-easy-to-understand",
                "content": "Start from k and try to expand the good subarray on the left and right.\\nSince you expand at every stage, (j-i+1) will always increase. So go in the direction where min value increases to maximize the answer.\\n\\n```\\nint maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int ans = nums[k];\\n        int minval = nums[k];\\n        while (i-1 >= 0 && j+1 < nums.size()) {\\n            int leftval = nums[i-1];\\n            int rightval = nums[j+1];\\n            \\n            int leftmin = min(leftval, minval);\\n            int rightmin = min(rightval, minval);\\n            if (leftmin > rightmin) {   // go left\\n                i--;\\n                minval = leftmin;\\n                ans = max(ans, leftmin*(j-i+1));\\n            }\\n            else {\\n                j++;\\n                minval = rightmin;\\n                ans = max(ans, rightmin*(j-i+1));\\n            }\\n        }\\n        while (i-1 >= 0) {\\n            int leftval = nums[i-1];\\n            int leftmin = min(leftval, minval);\\n            i--;\\n            minval = leftmin;\\n            ans = max(ans, leftmin*(j-i+1));\\n        }\\n        while (j+1 < nums.size()) {\\n            int rightval = nums[j+1];\\n            int rightmin = min(rightval, minval);\\n            j++;\\n            minval = rightmin;\\n            ans = max(ans, rightmin*(j-i+1));\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nint maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int ans = nums[k];\\n        int minval = nums[k];\\n        while (i-1 >= 0 && j+1 < nums.size()) {\\n            int leftval = nums[i-1];\\n            int rightval = nums[j+1];\\n            \\n            int leftmin = min(leftval, minval);\\n            int rightmin = min(rightval, minval);\\n            if (leftmin > rightmin) {   // go left\\n                i--;\\n                minval = leftmin;\\n                ans = max(ans, leftmin*(j-i+1));\\n            }\\n            else {\\n                j++;\\n                minval = rightmin;\\n                ans = max(ans, rightmin*(j-i+1));\\n            }\\n        }\\n        while (i-1 >= 0) {\\n            int leftval = nums[i-1];\\n            int leftmin = min(leftval, minval);\\n            i--;\\n            minval = leftmin;\\n            ans = max(ans, leftmin*(j-i+1));\\n        }\\n        while (j+1 < nums.size()) {\\n            int rightval = nums[j+1];\\n            int rightmin = min(rightval, minval);\\n            j++;\\n            minval = rightmin;\\n            ans = max(ans, rightmin*(j-i+1));\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1108289,
                "title": "simple-o-n-greedy-solution-and-why-constraints-are-so-important",
                "content": "The key to solving this problem is acknowledging that **having the `k` constraint actually makes the problem a lot easier.** It gives us an index that *must* be in our solution, so we can start our solution from there. In fact, if we weren\\'t given this constraint, I don\\'t know if this would be solvable in O(N) time. We\\'re used to seeing `Hard` problems with annoying constraints, but it\\'s pretty rare for said constraints to actually make the problem easier!\\n\\nOnce you figure that out, the algorithm for this one is relatively simple. All we have to do is keep track of a window of values starting with the value at `k`; then, at each \"step,\" we either extend the current window left or right depending on which side has a larger value for us to consume. We only have to keep track of the current minimum in the window at each \"step,\" and keep going until we can no longer perform steps.\\n\\nPython solution:\\n\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    # To start, we\\'ll set the default best score to that of the entire array.\\n    ret = min(nums) * len(nums)\\n\\n    # Initialize our pointers to k, the element that must be included in the window at all times.\\n    i = k\\n    j = k\\n\\n    # Extend i and j as far as possible without changing the current minimum, which is nums[k].\\n    cur = nums[k]\\n    while i > 0 and nums[i-1] >= cur:\\n        i -= 1\\n    while j < len(nums) - 1 and nums[j+1] >= cur:\\n        j += 1\\n\\n    # For as long as our window is not as big as the entire array...\\n    while i != 0 or j != len(nums) - 1:\\n        # Check if the score of the current window is better than the best score we\\'ve seen so far.\\n        ret = max(ret, (j - i + 1) * cur)\\n\\n        # We want to extend the size of the current window, but there\\'s a problem: because of how we\\'ve\\n        # positioned our two index pointers at the current state, going in either direction will certainly\\n        # decrease the minimum value that we\\'re keeping track of, which may lower the score even if the\\n        # new window gets a lot bigger!\\n        # Since we definitely can\\'t increase the size of the window without decreasing our minimum value,\\n        # let\\'s just pick whichever direction has the larger value. We\\'ll eventually go both in directions anyway, \\n\\t\\t# so we should keep our current minimum as high as possible.\\n        if j != len(nums) - 1 and (i == 0 or nums[i - 1] < nums[j + 1]):\\n            j += 1\\n            cur = nums[j]\\n            # In this case, we\\'re extending the window to the right. Keep going for as long as we don\\'t find an\\n            # even lower minimum.\\n            while j < len(nums) - 1 and nums[j+1] >= cur:\\n                j += 1\\n        else:\\n            i -= 1\\n            cur = nums[i]\\n            # In this case, we\\'re going left. Same as above - extend for as long as our minimum is unchanged.\\n            while i > 0 and nums[i-1] >= cur:\\n                i -= 1\\n\\n    # At the end of this, we\\'ll return the score of whatever window was the most optimal.\\n    return ret\\n```\\n\\nPlease ask any questions in the comments!",
                "solutionTags": [],
                "code": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    # To start, we\\'ll set the default best score to that of the entire array.\\n    ret = min(nums) * len(nums)\\n\\n    # Initialize our pointers to k, the element that must be included in the window at all times.\\n    i = k\\n    j = k\\n\\n    # Extend i and j as far as possible without changing the current minimum, which is nums[k].\\n    cur = nums[k]\\n    while i > 0 and nums[i-1] >= cur:\\n        i -= 1\\n    while j < len(nums) - 1 and nums[j+1] >= cur:\\n        j += 1\\n\\n    # For as long as our window is not as big as the entire array...\\n    while i != 0 or j != len(nums) - 1:\\n        # Check if the score of the current window is better than the best score we\\'ve seen so far.\\n        ret = max(ret, (j - i + 1) * cur)\\n\\n        # We want to extend the size of the current window, but there\\'s a problem: because of how we\\'ve\\n        # positioned our two index pointers at the current state, going in either direction will certainly\\n        # decrease the minimum value that we\\'re keeping track of, which may lower the score even if the\\n        # new window gets a lot bigger!\\n        # Since we definitely can\\'t increase the size of the window without decreasing our minimum value,\\n        # let\\'s just pick whichever direction has the larger value. We\\'ll eventually go both in directions anyway, \\n\\t\\t# so we should keep our current minimum as high as possible.\\n        if j != len(nums) - 1 and (i == 0 or nums[i - 1] < nums[j + 1]):\\n            j += 1\\n            cur = nums[j]\\n            # In this case, we\\'re extending the window to the right. Keep going for as long as we don\\'t find an\\n            # even lower minimum.\\n            while j < len(nums) - 1 and nums[j+1] >= cur:\\n                j += 1\\n        else:\\n            i -= 1\\n            cur = nums[i]\\n            # In this case, we\\'re going left. Same as above - extend for as long as our minimum is unchanged.\\n            while i > 0 and nums[i-1] >= cur:\\n                i -= 1\\n\\n    # At the end of this, we\\'ll return the score of whatever window was the most optimal.\\n    return ret\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4078528,
                "title": "java-solution-with-an-85-faster-approach",
                "content": "# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int l=0, r=nums.length-1;\\n        for(int i=k-1; i>=0; i--){\\n            nums[i] = Math.min(nums[i+1], nums[i]);\\n        }\\n        for(int i=k+1; i<nums.length; i++){\\n            nums[i] = Math.min(nums[i-1], nums[i]);\\n        }\\n        int res=nums[0];\\n        while(l<r){\\n            res = Math.max(res, Math.min(nums[l], nums[r]) * (r-l+1));\\n            if(nums[l] < nums[r])\\n                l++;\\n            else\\n                r--;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int l=0, r=nums.length-1;\\n        for(int i=k-1; i>=0; i--){\\n            nums[i] = Math.min(nums[i+1], nums[i]);\\n        }\\n        for(int i=k+1; i<nums.length; i++){\\n            nums[i] = Math.min(nums[i-1], nums[i]);\\n        }\\n        int res=nums[0];\\n        while(l<r){\\n            res = Math.max(res, Math.min(nums[l], nums[r]) * (r-l+1));\\n            if(nums[l] < nums[r])\\n                l++;\\n            else\\n                r--;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4045326,
                "title": "similar-to-sum-of-subarray-minimum",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThis approach is similar to LeetCode 907-Sum of Subarray Minimum\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int n = A.size();\\n        int MOD = 1e9 + 7;\\n        vector<int> left(n), right(n);\\n        stack<int>st;\\n        st.push(0);\\n        left[0] = 1; \\n        for(int i=1; i<n; i++)\\n        {\\n            while(!st.empty() && A[i] < A[st.top()]) \\n                st.pop();\\n            \\n            if(st.empty()) \\n                left[i] = i+1; \\n            else \\n                left[i] = i - st.top(); \\n            \\n            st.push(i);\\n            \\n        }\\n        \\n        while(st.size()) \\n            st.pop();\\n        \\n       \\n        st.push(n-1);\\n        right[n-1] = 1; \\n        for(int i=n-2; i>=0; i--)\\n        {\\n            while(!st.empty() && A[i] <= A[st.top()]) \\n                st.pop();\\n            \\n            if(st.empty()) \\n                right[i] = n-i; \\n            else \\n                right[i] = st.top()-i;\\n            \\n            st.push(i);\\n        }\\n        int ans=0;\\n       \\n\\n        for(int i=0;i<n;i++){\\n            int lr=i-left[i]+1;\\n            int rr=i+right[i]-1;\\n            // cout<<lr<<\" \"<<rr<<endl;\\n            if(k>rr||k<lr)continue;\\n            else{\\n                ans=max(ans,A[i]*(rr-lr+1));\\n                // if(ans>prev){\\n                //     prev=ans;\\n                //     // cout<<i<<\" \";\\n                // }\\n\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int n = A.size();\\n        int MOD = 1e9 + 7;\\n        vector<int> left(n), right(n);\\n        stack<int>st;\\n        st.push(0);\\n        left[0] = 1; \\n        for(int i=1; i<n; i++)\\n        {\\n            while(!st.empty() && A[i] < A[st.top()]) \\n                st.pop();\\n            \\n            if(st.empty()) \\n                left[i] = i+1; \\n            else \\n                left[i] = i - st.top(); \\n            \\n            st.push(i);\\n            \\n        }\\n        \\n        while(st.size()) \\n            st.pop();\\n        \\n       \\n        st.push(n-1);\\n        right[n-1] = 1; \\n        for(int i=n-2; i>=0; i--)\\n        {\\n            while(!st.empty() && A[i] <= A[st.top()]) \\n                st.pop();\\n            \\n            if(st.empty()) \\n                right[i] = n-i; \\n            else \\n                right[i] = st.top()-i;\\n            \\n            st.push(i);\\n        }\\n        int ans=0;\\n       \\n\\n        for(int i=0;i<n;i++){\\n            int lr=i-left[i]+1;\\n            int rr=i+right[i]-1;\\n            // cout<<lr<<\" \"<<rr<<endl;\\n            if(k>rr||k<lr)continue;\\n            else{\\n                ans=max(ans,A[i]*(rr-lr+1));\\n                // if(ans>prev){\\n                //     prev=ans;\\n                //     // cout<<i<<\" \";\\n                // }\\n\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 4035024,
                "title": "very-easy-to-understand-two-pointer-linear-time-and-constant-space",
                "content": "\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& num, int k) {\\n        int n=num.size();\\n        int i=k, j=k;\\n        int mn=num[i];\\n        int ans=mn;\\n        while(i!=0 || j!=n-1){\\n            while(i>0 && min(mn,num[i-1])==mn) i--;\\n            while(j<n-1 && min(mn,num[j+1])==mn) j++;\\n            int f = mn*(j-i+1);\\n            ans = max(ans,f);\\n            int p=-1;\\n            if(i>0) p=max(p,min(mn,num[i-1]));\\n            if(j<n-1) p=max(p,min(mn,num[j+1]));\\n            mn=p;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& num, int k) {\\n        int n=num.size();\\n        int i=k, j=k;\\n        int mn=num[i];\\n        int ans=mn;\\n        while(i!=0 || j!=n-1){\\n            while(i>0 && min(mn,num[i-1])==mn) i--;\\n            while(j<n-1 && min(mn,num[j+1])==mn) j++;\\n            int f = mn*(j-i+1);\\n            ans = max(ans,f);\\n            int p=-1;\\n            if(i>0) p=max(p,min(mn,num[i-1]));\\n            if(j<n-1) p=max(p,min(mn,num[j+1]));\\n            mn=p;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992100,
                "title": "simple-fast-solution-using-two-pointers",
                "content": "# Approach\\nStart with left and right pointers both set to the initial index (k) and expand in both directions: \\n\\n* \"skim over\" indices with higher or equal scores than the current minimum since those scores have no effect. \\n* Once you reach \"edges\" on both sides (beyond those points are lower scores) - Calculate the score between the pointers and update the maximum if the score is higher than the existing one.\\n* Set current minimum as max(nums[left], nums[right]) and continue until the array is fully analyzed.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int max = 0;\\n        int left = k;\\n        int right = k;\\n        int currElevation = nums[k];\\n        while (left >= 0 || right < nums.length) {\\n            while (left >= 0 && nums[left] >= currElevation) {\\n                left--;\\n            }\\n            while (right < nums.length && nums[right] >= currElevation) {\\n                right++;\\n            }\\n            max = Math.max(max, currElevation * (right - left - 1));\\n            if (left >= 0 && right < nums.length) {\\n                currElevation = Math.max(nums[left], nums[right]);\\n            } else if (left >= 0) {\\n                currElevation = nums[left];\\n            } else if (right < nums.length){\\n                currElevation = nums[right];\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int max = 0;\\n        int left = k;\\n        int right = k;\\n        int currElevation = nums[k];\\n        while (left >= 0 || right < nums.length) {\\n            while (left >= 0 && nums[left] >= currElevation) {\\n                left--;\\n            }\\n            while (right < nums.length && nums[right] >= currElevation) {\\n                right++;\\n            }\\n            max = Math.max(max, currElevation * (right - left - 1));\\n            if (left >= 0 && right < nums.length) {\\n                currElevation = Math.max(nums[left], nums[right]);\\n            } else if (left >= 0) {\\n                currElevation = nums[left];\\n            } else if (right < nums.length){\\n                currElevation = nums[right];\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3979618,
                "title": "c-largest-rectangle-in-histogram",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> pref(n,-1),suf(n,n);\\n        stack<int> st;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(st.size()==0)\\n            st.push(i);\\n            else\\n            {\\n                while(st.size()>0 && nums[st.top()]>nums[i])\\n                {\\n                    suf[st.top()] = i;\\n                    st.pop();\\n                }\\n                st.push(i);\\n            }\\n        }\\n        while(!st.empty())\\n        st.pop();\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(st.size()==0)\\n            st.push(i);\\n            else\\n            {\\n                while(st.size()>0 && nums[st.top()]>nums[i])\\n                {\\n                    pref[st.top()] = i;\\n                    st.pop();\\n                }\\n                st.push(i);\\n            }\\n        }\\n        \\n        long long ans = 0;\\n        for(int i=0;i<n;i++)\\n        {\\n            long long mini = nums[i];\\n            int l = pref[i];\\n            int r = suf[i];\\n            if(l+1<=k && r-1>=k)\\n            {\\n                ans = max(ans,mini*(r-l-1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        vector<int> pref(n,-1),suf(n,n);\\n        stack<int> st;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(st.size()==0)\\n            st.push(i);\\n            else\\n            {\\n                while(st.size()>0 && nums[st.top()]>nums[i])\\n                {\\n                    suf[st.top()] = i;\\n                    st.pop();\\n                }\\n                st.push(i);\\n            }\\n        }\\n        while(!st.empty())\\n        st.pop();\\n        for(int i=n-1;i>=0;i--)\\n        {\\n            if(st.size()==0)\\n            st.push(i);\\n            else\\n            {\\n                while(st.size()>0 && nums[st.top()]>nums[i])\\n                {\\n                    pref[st.top()] = i;\\n                    st.pop();\\n                }\\n                st.push(i);\\n            }\\n        }\\n        \\n        long long ans = 0;\\n        for(int i=0;i<n;i++)\\n        {\\n            long long mini = nums[i];\\n            int l = pref[i];\\n            int r = suf[i];\\n            if(l+1<=k && r-1>=k)\\n            {\\n                ans = max(ans,mini*(r-l-1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933839,
                "title": "golang-mono-stack-easy-to-understand",
                "content": "# Intuition\\nSince it requires finding the minimum element in a subarray, we need to use monotonic stack to find the previous and next minimum elements.\\n\\n# Approach\\nThis is very similar to the Sum of Subarray Minimums and we use a monotonically increasing stack to find the subarray where a specific element will be the minimum. We want to find the largest such subarray. If the subarray bounds satisfy the condition of `i <= k <= j`, we update our result.\\n\\n# Complexity\\n- Time complexity: O(n)\\n- Space complexity: O(n)\\n\\n# Code\\n```\\nfunc maximumScore(nums []int, k int) int {\\n  var stack []int\\n  stack = append(stack, -1) // for convenience\\n  var res int\\n  // Just use a monotonic stack to find the previous minimum and next minimum index\\n  // we can use the top of the stack as the minimum element.\\n  for idx := 0; idx <= len(nums); idx++ {\\n    for len(stack) > 1 && (idx == len(nums) || nums[stack[len(stack)-1]] > nums[idx]) {\\n      min := nums[stack[len(stack)-1]]\\n      stack = stack[:len(stack)-1]\\n      // i and j are the boundaries of the sub array where top of the stack is the\\n      // minimum element.\\n      i, j := stack[len(stack)-1] + 1, idx - 1\\n      if i <= k && k <= j {\\n        res = max(res, min * (j - i + 1))\\n      }\\n    }\\n    stack = append(stack, idx)\\n  }\\n  return res\\n}\\n\\nfunc max(a, b int) int {\\n  if a > b {\\n    return a\\n  }\\n  return b\\n}\\n```",
                "solutionTags": [
                    "Go",
                    "Monotonic Stack"
                ],
                "code": "```\\nfunc maximumScore(nums []int, k int) int {\\n  var stack []int\\n  stack = append(stack, -1) // for convenience\\n  var res int\\n  // Just use a monotonic stack to find the previous minimum and next minimum index\\n  // we can use the top of the stack as the minimum element.\\n  for idx := 0; idx <= len(nums); idx++ {\\n    for len(stack) > 1 && (idx == len(nums) || nums[stack[len(stack)-1]] > nums[idx]) {\\n      min := nums[stack[len(stack)-1]]\\n      stack = stack[:len(stack)-1]\\n      // i and j are the boundaries of the sub array where top of the stack is the\\n      // minimum element.\\n      i, j := stack[len(stack)-1] + 1, idx - 1\\n      if i <= k && k <= j {\\n        res = max(res, min * (j - i + 1))\\n      }\\n    }\\n    stack = append(stack, idx)\\n  }\\n  return res\\n}\\n\\nfunc max(a, b int) int {\\n  if a > b {\\n    return a\\n  }\\n  return b\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3834748,
                "title": "simple-approach-o-n-time-o-1-space-beats-100-124ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThis problem is silimar to Largest Area in a Histogram. What makes it simpler is the fact that we have been given where to begin (`at k`). As a result we don\\'t have to use stacks (Recall we needed stack to keep a track of previous minimum for a particular index assuming rectangle can be pivoted at any index. Here we\\'ve been given the pivot `k`).\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Start `i` from `k-1` and go to `0`. We will keep a track of current minimum number encountered. Keep on modifying `nums[i]` with that minimum. (Notice that higher values of `nums[i]` won\\'t be involved in the answer anyways).\\n2. Start `i` from `k+1` again and to `n-1` (`n == nums.size()`). Do the same as above.\\n3. Notice as `i` goes from `k-1` to `0`, the numbers we encounter that are higher than current minimum won\\'t ever become a minimum in a valid subarray as `i<=k` (For them to become minimum, `j` has to be less than `k`). This same is true for when `i` goes from `k+1` to `n-1`.\\n4. Now do a typical two-pointer greedy approach to find the `maxscore` starting from `i=0` and `j=n-1`. Reduce that pointer which contains the minimum of `nums[i]` and `nums[j]` and at every iteration keep on finding the `maxscore`.\\n\\nDo Upvote if you liked the SOlution :)\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n`O(n)` As we have only traversed linearly\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n`O(1)` We were smart enough to do it in place ;)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int minval = nums[k];\\n        int n = nums.size();\\n        for (int i=k-1;i>=0;i--){\\n            minval = min(minval,nums[i]);\\n            nums[i] = minval;\\n        }\\n        minval = nums[k];\\n        for (int j=k+1;j<n;j++){\\n            minval = min(minval,nums[j]);\\n            nums[j] = minval;\\n        }\\n        //for (auto i:v) cout<<i<<\" \";\\n        int i=0,j=n-1;\\n        int maxscore = -1;\\n        while (i <= j){\\n            int score = (j-i+1)*min(nums[i],nums[j]);\\n            maxscore = max(maxscore,score);\\n            if (nums[i] < nums[j]) i++;\\n            else j--;\\n        }\\n        return maxscore;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int minval = nums[k];\\n        int n = nums.size();\\n        for (int i=k-1;i>=0;i--){\\n            minval = min(minval,nums[i]);\\n            nums[i] = minval;\\n        }\\n        minval = nums[k];\\n        for (int j=k+1;j<n;j++){\\n            minval = min(minval,nums[j]);\\n            nums[j] = minval;\\n        }\\n        //for (auto i:v) cout<<i<<\" \";\\n        int i=0,j=n-1;\\n        int maxscore = -1;\\n        while (i <= j){\\n            int score = (j-i+1)*min(nums[i],nums[j]);\\n            maxscore = max(maxscore,score);\\n            if (nums[i] < nums[j]) i++;\\n            else j--;\\n        }\\n        return maxscore;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3833450,
                "title": "two-pointer-c",
                "content": "\\n# Approach\\nTwo Pointer:\\nLoop invariant: we choose a min number each time and expand as much as possible on both side considering it as min elmenet for the formula. Aftere we have computed ans with this, we elect new min, which will be the max of the number at 2 ends.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), i = k, j = k , min_ind = k, ans = nums[k];\\n        while(i>=0 || j < n){\\n            // traverse left.\\n            while(i>=0 && nums[i]>=nums[min_ind]){\\n                i--;\\n            }\\n\\n            // traverse right.\\n            while(j<n && nums[j]>=nums[min_ind]){\\n                j++;\\n            }\\n\\n            // update ans with max len and this min_ind.\\n            ans = max(ans, nums[min_ind]*(j-i-1));\\n\\n            //choose min_ind again. ### NOTE: we should only choose the index which has greater value then other, that way we will not miss this element as min element for ans. Other wise we will ignore this case.\\n            if(i>=0 && j<n){\\n                if(nums[i]>nums[j])\\n                    min_ind = i;\\n                else\\n                    min_ind = j;\\n            } \\n            else if(i>=0){\\n                min_ind = i;\\n            } else {\\n                min_ind = j;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size(), i = k, j = k , min_ind = k, ans = nums[k];\\n        while(i>=0 || j < n){\\n            // traverse left.\\n            while(i>=0 && nums[i]>=nums[min_ind]){\\n                i--;\\n            }\\n\\n            // traverse right.\\n            while(j<n && nums[j]>=nums[min_ind]){\\n                j++;\\n            }\\n\\n            // update ans with max len and this min_ind.\\n            ans = max(ans, nums[min_ind]*(j-i-1));\\n\\n            //choose min_ind again. ### NOTE: we should only choose the index which has greater value then other, that way we will not miss this element as min element for ans. Other wise we will ignore this case.\\n            if(i>=0 && j<n){\\n                if(nums[i]>nums[j])\\n                    min_ind = i;\\n                else\\n                    min_ind = j;\\n            } \\n            else if(i>=0){\\n                min_ind = i;\\n            } else {\\n                min_ind = j;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3821773,
                "title": "simple-java-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        HashMap<Integer,Integer> h1=new HashMap<Integer,Integer>();\\n        HashMap<Integer,Integer> h2=new HashMap<Integer,Integer>();\\n        int left[]=new int[k+1];\\n        int right[]=new int[nums.length-k];\\n        int min=nums[k];\\n        left[k]=min;\\n        for(int i=k-1;i>=0;i--)\\n        {\\n            if(nums[i]<min)\\n            {\\n                min=nums[i];\\n            }\\n            left[i]=min;\\n            if(!h1.containsKey(min))\\n            {\\n               h1.put(min,i);\\n            }\\n        }\\n\\n        h1.put(nums[k],k);\\n        min=nums[k];\\n        right[0]=min;\\n        int r=1;\\n        h2.put(min,k);\\n        for(int j=k+1;j<nums.length;j++)\\n        {\\n            if(nums[j]<min)\\n            {\\n              min=nums[j];\\n            }\\n            right[r]=min;\\n            if(!h2.containsKey(min))\\n            {\\n               h2.put(min,r);\\n            }\\n            r++;\\n        }\\n     \\n       int lstart=0,rstart=right.length-1;\\n       long ans=0;\\n       while(lstart<=k && rstart>=0)\\n       {\\n           int p=left[lstart];\\n           int q=right[rstart];\\n           if(p<q)\\n           {\\n              long score=1l;\\n              score=score*(rstart+1+k-lstart)*p;\\n              if(score>ans)\\n              {\\n                  ans=score;\\n              }\\n              int x=h1.get(p);\\n             \\n                  lstart=x+1;\\n              \\n           }\\n           else if(p==q)\\n           {\\n               long score=1l;\\n               score=score*(rstart+1+k-lstart)*p;\\n               if(score>ans)\\n               {\\n                 ans=score;\\n               }\\n               int x=h1.get(p);\\n               lstart=x+1;\\n                x=h2.get(q);\\n                rstart=x-1;\\n                \\n           }\\n           else\\n           {\\n               long score=1l;\\n               score=score*(rstart+1+k-lstart)*q;\\n               if(score>ans)\\n               {\\n                 ans=score;\\n               }\\n               int x=h2.get(q);\\n              rstart=x-1;\\n                \\n           }\\n       }\\n\\n       return (int)ans;\\n\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        HashMap<Integer,Integer> h1=new HashMap<Integer,Integer>();\\n        HashMap<Integer,Integer> h2=new HashMap<Integer,Integer>();\\n        int left[]=new int[k+1];\\n        int right[]=new int[nums.length-k];\\n        int min=nums[k];\\n        left[k]=min;\\n        for(int i=k-1;i>=0;i--)\\n        {\\n            if(nums[i]<min)\\n            {\\n                min=nums[i];\\n            }\\n            left[i]=min;\\n            if(!h1.containsKey(min))\\n            {\\n               h1.put(min,i);\\n            }\\n        }\\n\\n        h1.put(nums[k],k);\\n        min=nums[k];\\n        right[0]=min;\\n        int r=1;\\n        h2.put(min,k);\\n        for(int j=k+1;j<nums.length;j++)\\n        {\\n            if(nums[j]<min)\\n            {\\n              min=nums[j];\\n            }\\n            right[r]=min;\\n            if(!h2.containsKey(min))\\n            {\\n               h2.put(min,r);\\n            }\\n            r++;\\n        }\\n     \\n       int lstart=0,rstart=right.length-1;\\n       long ans=0;\\n       while(lstart<=k && rstart>=0)\\n       {\\n           int p=left[lstart];\\n           int q=right[rstart];\\n           if(p<q)\\n           {\\n              long score=1l;\\n              score=score*(rstart+1+k-lstart)*p;\\n              if(score>ans)\\n              {\\n                  ans=score;\\n              }\\n              int x=h1.get(p);\\n             \\n                  lstart=x+1;\\n              \\n           }\\n           else if(p==q)\\n           {\\n               long score=1l;\\n               score=score*(rstart+1+k-lstart)*p;\\n               if(score>ans)\\n               {\\n                 ans=score;\\n               }\\n               int x=h1.get(p);\\n               lstart=x+1;\\n                x=h2.get(q);\\n                rstart=x-1;\\n                \\n           }\\n           else\\n           {\\n               long score=1l;\\n               score=score*(rstart+1+k-lstart)*q;\\n               if(score>ans)\\n               {\\n                 ans=score;\\n               }\\n               int x=h2.get(q);\\n              rstart=x-1;\\n                \\n           }\\n       }\\n\\n       return (int)ans;\\n\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3806625,
                "title": "monotonic-stack-clean-and-easy-to-understand-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity :O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n      public int maximumScore(int[] arr, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int[][] minima = new int[2][arr.length];\\n        for (int[] a : minima) {\\n            Arrays.fill(a, -1);\\n        }\\n        for (int i = 0; i < arr.length; i++) {\\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\\n                minima[0][stack.pop()] = i;\\n            }\\n            if (!stack.isEmpty()) {\\n                minima[1][i] = stack.peek();\\n            }\\n            stack.push(i);\\n        }\\n        int ans = Integer.MIN_VALUE;\\n        for (int i = 0; i < arr.length; i++) {\\n            int right = minima[0][i] != -1 ? minima[0][i] -1 : arr.length - 1;\\n            int left = minima[1][i] != -1 ? minima[1][i] + 1 : 0;\\n            ans = (left <= k) && (k <= right) ? Math.max(ans, arr[i] * (right - left + 1)) : ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n      public int maximumScore(int[] arr, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int[][] minima = new int[2][arr.length];\\n        for (int[] a : minima) {\\n            Arrays.fill(a, -1);\\n        }\\n        for (int i = 0; i < arr.length; i++) {\\n            while (!stack.isEmpty() && arr[stack.peek()] > arr[i]) {\\n                minima[0][stack.pop()] = i;\\n            }\\n            if (!stack.isEmpty()) {\\n                minima[1][i] = stack.peek();\\n            }\\n            stack.push(i);\\n        }\\n        int ans = Integer.MIN_VALUE;\\n        for (int i = 0; i < arr.length; i++) {\\n            int right = minima[0][i] != -1 ? minima[0][i] -1 : arr.length - 1;\\n            int left = minima[1][i] != -1 ? minima[1][i] + 1 : 0;\\n            ans = (left <= k) && (k <= right) ? Math.max(ans, arr[i] * (right - left + 1)) : ans;\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3799747,
                "title": "c-solution-using-monotonic-non-decreasing-stack",
                "content": "# Intuition\\nThe score of a subarray is defined as the minimum value in that subarray multiplied by the length of the subarray.\\n\\nThe idea is to identify the subarrays that can contribute to the maximum score without calculating the score for all possible subarrays. A key observation is that for any element nums[i] in the array, if it is the minimum value in a subarray, then the subarray\\'s length will be determined by the nearest smaller elements to its left (NSL) and nearest smaller elements to its right (NSR). We will include the subarray between these two indexes which will be the optimal answer subarray.\\n\\n# Approach\\n \\nThe monotonic stack will store the indices of the elements, and it will be in non-increasing order. This means that the top element of the stack will be the largest element, and the elements below it will be smaller.\\nWe will iterate through the nums array, and for each element, we will perform the following steps:\\n1. While the stack is not empty and the current element is smaller than the element at the top of the stack, we pop elements from the stack. \\n2. For each popped element, we calculate its NSL and NSR and check if the current index k lies between NSL and NSR. If it does, we can calculate the score using the formula: score = nums[mid] * (NSR - NSL - 1).\\n3. After processing the current element, we push its index into the stack for future comparisons.\\nOnce the iteration is complete, we will have the maximum score maxa, which represents the maximum score that can be obtained from any valid subarray in the nums vector.\\n\\n# Complexity\\n- Time complexity: The algorithm performs a single pass through the nums array, and for each element, it performs a constant amount of work (popping elements from the stack and calculating the score). Hence, the time complexity is O(n), where n is the size of the input nums array.\\n- Space complexity: The space complexity is O(n) because the monotonic stack can potentially store all the elements of the nums array in the worst case.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int maxa=0;\\n        int n = nums.size();\\n        stack<int> st;\\n        for(int i=0;i<=n;i++){\\n            while(!st.empty() && (i==n||nums[st.top()]>=nums[i])){\\n                int mid = st.top();\\n                st.pop();\\n                int NSL = st.empty()?-1:st.top();\\n                int NSR = i;\\n                if(k < NSR && k > NSL) maxa = max(maxa, nums[mid]*(NSR-NSL-1));\\n            }\\n            st.push(i);\\n        }\\n        return maxa; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int maxa=0;\\n        int n = nums.size();\\n        stack<int> st;\\n        for(int i=0;i<=n;i++){\\n            while(!st.empty() && (i==n||nums[st.top()]>=nums[i])){\\n                int mid = st.top();\\n                st.pop();\\n                int NSL = st.empty()?-1:st.top();\\n                int NSR = i;\\n                if(k < NSR && k > NSL) maxa = max(maxa, nums[mid]*(NSR-NSL-1));\\n            }\\n            st.push(i);\\n        }\\n        return maxa; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3736218,
                "title": "java-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int n;\\n    public void nextLeftSmall(int[] nums,int[] arr){\\n        Stack<Integer>stack = new Stack();\\n        for(int i = 0;i < n;i++){\\n            while(!stack.empty() && nums[stack.peek()] >= nums[i])\\n                stack.pop();\\n            if(!stack.empty())\\n                arr[i] = stack.peek();\\n            else\\n                arr[i] = -1;\\n            stack.push(i);\\n        }\\n    }\\n\\n    public void nextRightSmall(int[] nums,int[] arr){\\n        Stack<Integer>stack = new Stack();\\n        for(int i = n-1;i >= 0;i--){\\n            while(!stack.empty() && nums[stack.peek()] >= nums[i])\\n                stack.pop();\\n            if(!stack.empty())\\n                arr[i] = stack.peek();\\n            else\\n                arr[i] = n;\\n            stack.push(i);\\n        }\\n    }\\n\\n    public int maximumScore(int[] nums, int k) {\\n        n= nums.length;\\n        int[] arr1 = new int[n];\\n        int[] arr2 = new int[n];\\n        nextLeftSmall(nums,arr1);\\n        nextRightSmall(nums,arr2);\\n\\n        int ans = 0;\\n        for(int i = 0;i < n;i++){\\n            int l = arr1[i];\\n            int r = arr2[i];\\n\\n            if(l + 1<= k && k <= r - 1)\\n                ans = Math.max(ans,nums[i]*(r-l-1));\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int n;\\n    public void nextLeftSmall(int[] nums,int[] arr){\\n        Stack<Integer>stack = new Stack();\\n        for(int i = 0;i < n;i++){\\n            while(!stack.empty() && nums[stack.peek()] >= nums[i])\\n                stack.pop();\\n            if(!stack.empty())\\n                arr[i] = stack.peek();\\n            else\\n                arr[i] = -1;\\n            stack.push(i);\\n        }\\n    }\\n\\n    public void nextRightSmall(int[] nums,int[] arr){\\n        Stack<Integer>stack = new Stack();\\n        for(int i = n-1;i >= 0;i--){\\n            while(!stack.empty() && nums[stack.peek()] >= nums[i])\\n                stack.pop();\\n            if(!stack.empty())\\n                arr[i] = stack.peek();\\n            else\\n                arr[i] = n;\\n            stack.push(i);\\n        }\\n    }\\n\\n    public int maximumScore(int[] nums, int k) {\\n        n= nums.length;\\n        int[] arr1 = new int[n];\\n        int[] arr2 = new int[n];\\n        nextLeftSmall(nums,arr1);\\n        nextRightSmall(nums,arr2);\\n\\n        int ans = 0;\\n        for(int i = 0;i < n;i++){\\n            int l = arr1[i];\\n            int r = arr2[i];\\n\\n            if(l + 1<= k && k <= r - 1)\\n                ans = Math.max(ans,nums[i]*(r-l-1));\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3722190,
                "title": "two-pointers-in-o-n-with-intuition",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n1)  i<= k <= j... which meant nums[k] will always be contributing in our answer. therefore i and j would start iterating from k.\\n2)  for an array = [...7,3,10,5,6...] if our k is at \\'10\\' , i am comparing \\'3\\' and \\'5\\' and making decision, because as soon as i take \\'3\\' , my minimum would be decreased (not that \\'7\\' on the left of \\'3\\' would make any difference since i have to take minimum) even further and decrease my final answer too...so i can greedily check and take decision in O(n).\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTwo - Pointers.\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int i=k-1;\\n        int j=k+1;\\n        int n = nums.length;\\n        int min = nums[k];\\n        int answer = nums[k];\\n        while(i>=0 || j< n){\\n            if(i>=0 && j<n && nums[i] >= nums[j]){\\n                min = Math.min(min,nums[i]);\\n                answer = Math.max(answer,(j-i)*min);\\n                i--;\\n            }else if(i>=0 && j<n && nums[i] <= nums[j]){\\n                min = Math.min(min,nums[j]);\\n                answer = Math.max(answer,(j-i)*min);\\n                j++;\\n            }else if(i<0){\\n                min = Math.min(min,nums[j]);\\n                answer = Math.max(answer,(j-i)*min);\\n                j++;\\n            }else{\\n                min = Math.min(min,nums[i]);\\n                answer = Math.max(answer,(j-i)*min);\\n                i--;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int i=k-1;\\n        int j=k+1;\\n        int n = nums.length;\\n        int min = nums[k];\\n        int answer = nums[k];\\n        while(i>=0 || j< n){\\n            if(i>=0 && j<n && nums[i] >= nums[j]){\\n                min = Math.min(min,nums[i]);\\n                answer = Math.max(answer,(j-i)*min);\\n                i--;\\n            }else if(i>=0 && j<n && nums[i] <= nums[j]){\\n                min = Math.min(min,nums[j]);\\n                answer = Math.max(answer,(j-i)*min);\\n                j++;\\n            }else if(i<0){\\n                min = Math.min(min,nums[j]);\\n                answer = Math.max(answer,(j-i)*min);\\n                j++;\\n            }else{\\n                min = Math.min(min,nums[i]);\\n                answer = Math.max(answer,(j-i)*min);\\n                i--;\\n            }\\n        }\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3681980,
                "title": "easy-2-pointer",
                "content": "\\n```\\n/*\\n\\n\\t\\t\\t\\t    ----\\n\\t\\t -----------    ---\\n\\t-----                   ----------\\n---                                   -----------|\\n|                                                |\\n-------------------------------------------------------\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& a, int k) {\\n        int n = a.size();\\n        vector<int>h(n);\\n        h[k]=a[k];\\n        for(int i=k+1;i<n;i++){\\n            h[i]=min(h[i-1], a[i]);\\n        }\\n        for(int i=k-1;i>=0;i--){\\n            h[i]=min(h[i+1], a[i]);\\n        }\\n        \\n        int maxArea=0;\\n        int i=0,j=n-1;\\n        while(i<=k and j>=k){\\n            maxArea=max(maxArea, min(h[i],h[j])*(j-i+1));\\n            if(h[i]<h[j])i++;\\n            else j--;\\n        }\\n        \\n        return maxArea;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/*\\n\\n\\t\\t\\t\\t    ----\\n\\t\\t -----------    ---\\n\\t-----                   ----------\\n---                                   -----------|\\n|                                                |\\n-------------------------------------------------------\\n*/\\n\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& a, int k) {\\n        int n = a.size();\\n        vector<int>h(n);\\n        h[k]=a[k];\\n        for(int i=k+1;i<n;i++){\\n            h[i]=min(h[i-1], a[i]);\\n        }\\n        for(int i=k-1;i>=0;i--){\\n            h[i]=min(h[i+1], a[i]);\\n        }\\n        \\n        int maxArea=0;\\n        int i=0,j=n-1;\\n        while(i<=k and j>=k){\\n            maxArea=max(maxArea, min(h[i],h[j])*(j-i+1));\\n            if(h[i]<h[j])i++;\\n            else j--;\\n        }\\n        \\n        return maxArea;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3659662,
                "title": "simple-c-solution-without-using-stack-o-n-time-complex",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity : O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ --> \\n\\n- Space complexity : O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n=v.size();\\n        vector<int>v1(k+1);\\n        v1[k]=v[k];\\n        for(int i=k-1;i>=0;i--){\\n            v1[i]=min(v1[i+1],v[i]);\\n        }\\n        vector<int>v2(n-k);\\n        v2[0]=v[k];\\n        for(int i=1;i<n-k;i++){\\n            v2[i]=min(v2[i-1],v[i+k]);\\n        }\\n        int i=0;\\n        int j=n-k-1;\\n        int res=INT_MIN;\\n        int u=n;\\n        while(i<=k and j>=0){\\n            int w=min(v1[i],v2[j]);\\n            res=max(res,w*(u));\\n            if(w==v1[i]) i++;\\n            else j--;\\n            u--;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Design"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n=v.size();\\n        vector<int>v1(k+1);\\n        v1[k]=v[k];\\n        for(int i=k-1;i>=0;i--){\\n            v1[i]=min(v1[i+1],v[i]);\\n        }\\n        vector<int>v2(n-k);\\n        v2[0]=v[k];\\n        for(int i=1;i<n-k;i++){\\n            v2[i]=min(v2[i-1],v[i+k]);\\n        }\\n        int i=0;\\n        int j=n-k-1;\\n        int res=INT_MIN;\\n        int u=n;\\n        while(i<=k and j>=0){\\n            int w=min(v1[i],v2[j]);\\n            res=max(res,w*(u));\\n            if(w==v1[i]) i++;\\n            else j--;\\n            u--;\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3601753,
                "title": "c-monotonic-stack",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int res = 0, cnt, n = nums.size();\\n        stack<pair<int,int>> st;\\n        for (int i = 0; i < n; ++ i) {\\n            cnt = 1;\\n            while (!st.empty() && st.top().first > nums[i]) {\\n                cnt += st.top().second;\\n                if (i > k && (i - cnt + 1) <= k) res = max(res, (cnt - 1) * st.top().first);\\n                st.pop();\\n            }\\n            st.push({nums[i], cnt});\\n        }\\n        cnt = 0;\\n        while (!st.empty()) {\\n            cnt += st.top().second;\\n            if ((n - cnt) <= k) res = max(res, cnt * st.top().first);\\n            st.pop();\\n        }\\n        return res;\\n    }\\n};\\n```\\n**Please upvote if u like the solution :)**",
                "solutionTags": [
                    "C++",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int res = 0, cnt, n = nums.size();\\n        stack<pair<int,int>> st;\\n        for (int i = 0; i < n; ++ i) {\\n            cnt = 1;\\n            while (!st.empty() && st.top().first > nums[i]) {\\n                cnt += st.top().second;\\n                if (i > k && (i - cnt + 1) <= k) res = max(res, (cnt - 1) * st.top().first);\\n                st.pop();\\n            }\\n            st.push({nums[i], cnt});\\n        }\\n        cnt = 0;\\n        while (!st.empty()) {\\n            cnt += st.top().second;\\n            if ((n - cnt) <= k) res = max(res, cnt * st.top().first);\\n            st.pop();\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3600243,
                "title": "2-pointers-100-100-c",
                "content": "# Approach\\nInitialize 2 ptrs l,r at k. Initialize min as value at k. Then, keep reducing l and increasing r till one of them point a smaller element. Then, iterate other one till it points a smaller element. Repeat this process and keep updating the ans at every step.\\n\\n# Complexity\\n- Time complexity:\\no(2*n)\\n\\n- Space complexity:\\no(1)\\n\\n# Code\\n```\\nstatic int fast_io = []()\\n{ std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int p=k,q=k,ans=nums[k],m=nums[k],r=m;\\n        while(p||q<nums.size()-1){\\n            if (p>0)\\n                p--,m=min(m,nums[p]);\\n            if (q<nums.size()-1)\\n                q++,m=min(m,nums[q]);\\n            ans=max(ans,m*(q-p+1));\\n            if (m<r){\\n                if (nums[p]==m){\\n                    p++;\\n                    while(q<nums.size()){\\n                        if (nums[q]<m){\\n                            q--;\\n                            break;\\n                        }\\n                        r=min(r,nums[q]);\\n                        ans=max(ans,r*(q-p+1));\\n                        q++;\\n                    }\\n                    if (q==nums.size())\\n                        q--;\\n                    r=min(r,nums[q]);\\n                    ans=max(ans,r*(q-p+1));\\n                }\\n                else{\\n                    q--;\\n                    while(p>=0){\\n                        if (nums[p]<m){\\n                            p++;\\n                            break;\\n                        }\\n                        r=min(r,nums[p]);\\n                        ans=max(ans,r*(q-p+1));\\n                        p--;\\n                    }\\n                    if (p<0)\\n                        p++;\\n                    r=min(r,nums[p]);\\n                    ans=max(ans,r*(q-p+1));\\n                }\\n            }\\n            r=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nstatic int fast_io = []()\\n{ std::ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr); return 0; }();\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int p=k,q=k,ans=nums[k],m=nums[k],r=m;\\n        while(p||q<nums.size()-1){\\n            if (p>0)\\n                p--,m=min(m,nums[p]);\\n            if (q<nums.size()-1)\\n                q++,m=min(m,nums[q]);\\n            ans=max(ans,m*(q-p+1));\\n            if (m<r){\\n                if (nums[p]==m){\\n                    p++;\\n                    while(q<nums.size()){\\n                        if (nums[q]<m){\\n                            q--;\\n                            break;\\n                        }\\n                        r=min(r,nums[q]);\\n                        ans=max(ans,r*(q-p+1));\\n                        q++;\\n                    }\\n                    if (q==nums.size())\\n                        q--;\\n                    r=min(r,nums[q]);\\n                    ans=max(ans,r*(q-p+1));\\n                }\\n                else{\\n                    q--;\\n                    while(p>=0){\\n                        if (nums[p]<m){\\n                            p++;\\n                            break;\\n                        }\\n                        r=min(r,nums[p]);\\n                        ans=max(ans,r*(q-p+1));\\n                        p--;\\n                    }\\n                    if (p<0)\\n                        p++;\\n                    r=min(r,nums[p]);\\n                    ans=max(ans,r*(q-p+1));\\n                }\\n            }\\n            r=m;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3565951,
                "title": "python-monotonic-stack-next-lesser-element-boundaries",
                "content": "```py\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        #get next lesser element to the right (right boundry)\\n        stack = []\\n        right = [len(nums)-1] * len(nums)\\n        for i in range(len(nums)-1,-1,-1):\\n            \\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n                \\n            if stack:\\n                right[i] = stack[-1] -1 \\n                \\n            stack.append(i)\\n        \\n\\n        #get lesser value to the left (left boundry) + calculate max value if left and right include k\\n        res = 0\\n        stack = []\\n        for i in range(len(nums)):\\n            \\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n                \\n            val = 0   \\n            if stack:\\n                val = stack[-1] + 1 \\n                \\n            stack.append(i)\\n            if val <= k and right[i] >= k:\\n                res = max(res, nums[i] * (right[i] - val +1))\\n        \\n        return res",
                "solutionTags": [
                    "Python",
                    "Monotonic Stack"
                ],
                "code": "```py\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        #get next lesser element to the right (right boundry)\\n        stack = []\\n        right = [len(nums)-1] * len(nums)\\n        for i in range(len(nums)-1,-1,-1):\\n            \\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n                \\n            if stack:\\n                right[i] = stack[-1] -1 \\n                \\n            stack.append(i)\\n        \\n\\n        #get lesser value to the left (left boundry) + calculate max value if left and right include k\\n        res = 0\\n        stack = []\\n        for i in range(len(nums)):\\n            \\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n                \\n            val = 0   \\n            if stack:\\n                val = stack[-1] + 1 \\n                \\n            stack.append(i)\\n            if val <= k and right[i] >= k:\\n                res = max(res, nums[i] * (right[i] - val +1))\\n        \\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 3548069,
                "title": "python-variation-of-largest-rectangle-in-histogram",
                "content": "This problem is almost the same as [LC 84 .Largest Rectangle in Histogram](https://leetcode.com/problems/largest-rectangle-in-histogram/)\\n\\nWhy I said \"almost\"? Because, the extra thing in this problem is the value \"k\" that we are provided with as input.\\n\\nLet\\'s take an example and try to solve it as Largest Rectangle in Histogram \\n\\n\\tnums = [1,4,3,7,4,5], k = 3\\n\\t\\nIf you take each value and represent it has a bar on a bar chart, we get something like this - \\n\\n![image](https://assets.leetcode.com/users/images/bb2600b7-a70d-40c8-9de6-2366264296a4_1684659903.7957752.png)\\n\\n\\tNow, we want the largest rectangle that we can make in this histogram. \\n\\n\\tFor that, we can take each bar and see how far to left and right we can extend this bar. \\n\\n\\tFor example, if I take the first bar with height = 1, \\n\\tthen I can extend it all the way till the end. \\n\\t\\n\\tWhy? because, there are no smaller bars in between so it will span across the entire chart.\\n\\n\\tAnd so, we will get a rectangle that has length => (rightmost index - leftmost index) + 1 => (5 - 0) + 1 => 6\\n\\tAnd the height = 1 (same as height of the bar from which we extended)\\n\\n\\tSo, area => 6 * 1 => 6\\n\\n\\tBut, is this the largest rectangle? For that, we have to take every bar and do the same thing as above.\\n\\n\\tWhen we are at the third bar with height = 3, \\n\\twe will see that we can extend it till index 1 on left and till index 5 on right.\\n\\n\\tSo for it, the area will be => 5 * 3 => 15\\n\\n\\tAnd this is the largest rectangle in this histogram. \\n\\nAnd for this current problem as well, \"15\" is the output for this list. \\n\\nBut, does this mean we just have to find maximum area? In that case, what is the use of \"k\"?\\n\\nWell, \"k\" is just an index that we are given such that we are asked to only take those subarrays that include this index in them.\\nIn simple words, the starting index of those subarrys should be k or less than k. And the last index should be k or more than k.\\n\\nAnd if we use this logic in our histogram, it simply means,\\n\\n\\tOnly consider the rectangles which include the index \"k\"\\n\\t\\nSo, when for any index, we check the left boundary and right boundary for its rectangle, we also need to make sure this left and right boundaries include \"k\" in between.\\n\\n\\tThat is, leftBoundary <= k and rightBoundary >= k.\\n\\nOnly if this condition is satisfied, we can update the maximum score.\\n\\nAnd well, that\\'s pretty much all that\\'s different than the Largest Rectangle in Histogram problem. We just have this one extra check while we update the maximum score.\\n\\n\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        # Length of the list\\n        n = len(nums)\\n        \\n        # Max Score to Return\\n        maxScore = 0\\n        \\n        # Nearest Smaller Index on Left\\n        NSL = [-1] * n\\n        \\n        stack = []\\n        \\n        # Traverse from Left to Right\\n        for i in range(n):\\n            # If the top element is greater, remove it\\n            while stack and nums[stack[-1]] >= nums[i]: stack.pop()\\n                \\n            # At this point, if stack is not empty\\n            # Then top of stack has index of the nearest smaller element on the left\\n            if stack: NSL[i] = stack[-1]\\n                \\n            # Push current element to stack as well\\n            stack.append(i)\\n            \\n        # Nearest Smaller Index on Right\\n        NSR = [n] * n\\n        \\n        stack = []\\n        \\n        # Traverse from Right to Left\\n        for i in range(n - 1, -1, -1):\\n            # If the top element is greater, remove it\\n            while stack and nums[stack[-1]] >= nums[i]: stack.pop()\\n                \\n            # At this point, if stack is not empty\\n            # Then top of stack has the index of nearest smaller element on the right\\n            if stack: NSR[i] = stack[-1]\\n                \\n            # Push current element to stack as well\\n            stack.append(i)\\n        \\n        # Now, we calculate the area of the rectangle\\n        for i in range(n):\\n            \\n            # What is the left boundary\\n            leftBoundary = NSL[i] + 1\\n            \\n            # What is the right boundary\\n            rightBoundary = NSR[i] - 1\\n            \\n            # Height of the current block\\n            height = nums[i]\\n            \\n            \\n            # Now, we can update our maximum score based on the area that we get\\n            # Note that we are given \"k\" and that \"k\" should be >= i and <= j\\n            # In simple words, whatever rectangle we take, it should have the index \"k\" in it\\n            # So, we have to also check that the current rectangle has the index k inside it\\n            if leftBoundary <= k and rightBoundary >= k:\\n                \\n                # What is the area?\\n                area = ((rightBoundary - leftBoundary) + 1) * height\\n                \\n                # Update the maximum score\\n                maxScore = max(maxScore,area)\\n        # Return the maximum Score of a good subarray\\n        return maxScore\\n```",
                "solutionTags": [
                    "Python",
                    "Stack"
                ],
                "code": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n        # Length of the list\\n        n = len(nums)\\n        \\n        # Max Score to Return\\n        maxScore = 0\\n        \\n        # Nearest Smaller Index on Left\\n        NSL = [-1] * n\\n        \\n        stack = []\\n        \\n        # Traverse from Left to Right\\n        for i in range(n):\\n            # If the top element is greater, remove it\\n            while stack and nums[stack[-1]] >= nums[i]: stack.pop()\\n                \\n            # At this point, if stack is not empty\\n            # Then top of stack has index of the nearest smaller element on the left\\n            if stack: NSL[i] = stack[-1]\\n                \\n            # Push current element to stack as well\\n            stack.append(i)\\n            \\n        # Nearest Smaller Index on Right\\n        NSR = [n] * n\\n        \\n        stack = []\\n        \\n        # Traverse from Right to Left\\n        for i in range(n - 1, -1, -1):\\n            # If the top element is greater, remove it\\n            while stack and nums[stack[-1]] >= nums[i]: stack.pop()\\n                \\n            # At this point, if stack is not empty\\n            # Then top of stack has the index of nearest smaller element on the right\\n            if stack: NSR[i] = stack[-1]\\n                \\n            # Push current element to stack as well\\n            stack.append(i)\\n        \\n        # Now, we calculate the area of the rectangle\\n        for i in range(n):\\n            \\n            # What is the left boundary\\n            leftBoundary = NSL[i] + 1\\n            \\n            # What is the right boundary\\n            rightBoundary = NSR[i] - 1\\n            \\n            # Height of the current block\\n            height = nums[i]\\n            \\n            \\n            # Now, we can update our maximum score based on the area that we get\\n            # Note that we are given \"k\" and that \"k\" should be >= i and <= j\\n            # In simple words, whatever rectangle we take, it should have the index \"k\" in it\\n            # So, we have to also check that the current rectangle has the index k inside it\\n            if leftBoundary <= k and rightBoundary >= k:\\n                \\n                # What is the area?\\n                area = ((rightBoundary - leftBoundary) + 1) * height\\n                \\n                # Update the maximum score\\n                maxScore = max(maxScore,area)\\n        # Return the maximum Score of a good subarray\\n        return maxScore\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3546302,
                "title": "rust-monotonic-stack",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {\\n        let mut stack = vec![];\\n        let mut max_score = nums[k as usize];\\n\\n        for right in 0..=nums.len() {\\n            while !stack.is_empty() && (right == nums.len() || nums[*stack.last().unwrap()] >= nums[right]) {\\n                let right = right as i32;\\n                \\n                let min_val = nums[stack.pop().unwrap()];\\n\\n                let left = stack.last().map(|x| *x as i32).unwrap_or(-1);\\n\\n                if left < k && right > k {\\n                    max_score = max_score.max(min_val * (right - left - 1));\\n                }\\n            }\\n            stack.push(right);\\n        }\\n        max_score\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {\\n        let mut stack = vec![];\\n        let mut max_score = nums[k as usize];\\n\\n        for right in 0..=nums.len() {\\n            while !stack.is_empty() && (right == nums.len() || nums[*stack.last().unwrap()] >= nums[right]) {\\n                let right = right as i32;\\n                \\n                let min_val = nums[stack.pop().unwrap()];\\n\\n                let left = stack.last().map(|x| *x as i32).unwrap_or(-1);\\n\\n                if left < k && right > k {\\n                    max_score = max_score.max(min_val * (right - left - 1));\\n                }\\n            }\\n            stack.push(right);\\n        }\\n        max_score\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3491694,
                "title": "my-solution",
                "content": "```\\n/**\\n * Time Complexity: O(n)\\n * Space Complexity: O(1)\\n * where `n` is the length of the vector `nums`\\n */\\nclass Solution {\\n public:\\n  int maximumScore(const vector<int> &nums, const int k) {\\n    const int n = static_cast<int>(nums.size());\\n    int min_num = numeric_limits<int>::max();\\n    int ret = numeric_limits<int>::min();\\n    for (int left = k, right = k; true; ) {\\n      min_num = min({min_num, nums[left], nums[right]});\\n      ret = max(ret, min_num * (right - left + 1));\\n      if (left == 0 && right == n - 1) {\\n        break;\\n      }\\n\\n      if (left == 0) {\\n        ++right;\\n      } else if (right == n - 1) {\\n        --left;\\n      } else {\\n        if (nums[left - 1] == nums[right + 1]) {\\n          --left;\\n          ++right;\\n        } else if (nums[left - 1] > nums[right + 1]) {\\n          --left;\\n        } else {\\n          ++right;\\n        }\\n      }\\n    }\\n    return ret;\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * Time Complexity: O(n)\\n * Space Complexity: O(1)\\n * where `n` is the length of the vector `nums`\\n */\\nclass Solution {\\n public:\\n  int maximumScore(const vector<int> &nums, const int k) {\\n    const int n = static_cast<int>(nums.size());\\n    int min_num = numeric_limits<int>::max();\\n    int ret = numeric_limits<int>::min();\\n    for (int left = k, right = k; true; ) {\\n      min_num = min({min_num, nums[left], nums[right]});\\n      ret = max(ret, min_num * (right - left + 1));\\n      if (left == 0 && right == n - 1) {\\n        break;\\n      }\\n\\n      if (left == 0) {\\n        ++right;\\n      } else if (right == n - 1) {\\n        --left;\\n      } else {\\n        if (nums[left - 1] == nums[right + 1]) {\\n          --left;\\n          ++right;\\n        } else if (nums[left - 1] > nums[right + 1]) {\\n          --left;\\n        } else {\\n          ++right;\\n        }\\n      }\\n    }\\n    return ret;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3417336,
                "title": "swift-solution-two-pointers",
                "content": "# Code\\n```\\nclass Solution {\\n    func maximumScore(_ nums: [Int], _ k: Int) -> Int {\\n        var mn = nums[k]\\n        var answer = mn\\n        \\n        var i = k, j = k\\n        \\n        while i > 0 || j < nums.count - 1 {\\n            if j >= nums.count - 1 {\\n                i -= 1\\n                mn = min(mn, nums[i])\\n                answer = max(answer, mn * (j - i + 1))\\n            } else if i == 0 {\\n                j += 1\\n                mn = min(mn, nums[j])\\n                answer = max(answer, mn * (j - i + 1))\\n            } else {\\n                if nums[i - 1] <= nums[j + 1] {\\n                    j += 1\\n                    mn = min(mn, nums[j])\\n                    answer = max(answer, mn * (j - i + 1))\\n                } else {\\n                    i -= 1\\n                    mn = min(mn, nums[i])\\n                    answer = max(answer, mn * (j - i + 1))\\n                }\\n            }\\n        }\\n        \\n        return answer\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func maximumScore(_ nums: [Int], _ k: Int) -> Int {\\n        var mn = nums[k]\\n        var answer = mn\\n        \\n        var i = k, j = k\\n        \\n        while i > 0 || j < nums.count - 1 {\\n            if j >= nums.count - 1 {\\n                i -= 1\\n                mn = min(mn, nums[i])\\n                answer = max(answer, mn * (j - i + 1))\\n            } else if i == 0 {\\n                j += 1\\n                mn = min(mn, nums[j])\\n                answer = max(answer, mn * (j - i + 1))\\n            } else {\\n                if nums[i - 1] <= nums[j + 1] {\\n                    j += 1\\n                    mn = min(mn, nums[j])\\n                    answer = max(answer, mn * (j - i + 1))\\n                } else {\\n                    i -= 1\\n                    mn = min(mn, nums[i])\\n                    answer = max(answer, mn * (j - i + 1))\\n                }\\n            }\\n        }\\n        \\n        return answer\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3403826,
                "title": "brute-force-2-pointer-start-from-k-o-n-o-1",
                "content": "# Code 1\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int n = nums.size();\\n        int res = nums[i];\\n        int mn = res;\\n        while(i>0 || j<n-1){\\n            if(i==0) j++;\\n            else if(j==n-1) i--;\\n            else if(nums[i-1]<nums[j+1]) j++;\\n            else i--;\\n            mn = min(mn,min(nums[i],nums[j]));\\n            res = max(res,mn*(j-i+1));\\n        }\\n        return res;\\n    }\\n};\\n```\\n\\n# Code 2\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int n = nums.size();\\n        int res = nums[i];\\n        int mn = res;\\n        while(1){\\n            if(i-1>=0 && nums[i-1]>=mn){\\n                i--;\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(j+1<n && nums[j+1]>=mn){\\n                j++;\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i==0 && j+1<n){\\n                j++;\\n                mn = min(mn,nums[j]);\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i-1>=0 && j==n-1){\\n                i--;\\n                mn = min(mn,nums[i]);\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i==0 && j==n-1){\\n                break;\\n            }\\n            else{\\n                if(nums[i-1]>nums[j+1]){\\n                    i--;\\n                    mn = min(mn,nums[i]);\\n                }\\n                else{\\n                    j++;\\n                    mn = min(mn,nums[j]);\\n                }\\n                res = max(res,mn*(j-i+1));\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```\\n# upvote if it\\'s help you HAPPY CODING :)",
                "solutionTags": [
                    "C++",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int n = nums.size();\\n        int res = nums[i];\\n        int mn = res;\\n        while(i>0 || j<n-1){\\n            if(i==0) j++;\\n            else if(j==n-1) i--;\\n            else if(nums[i-1]<nums[j+1]) j++;\\n            else i--;\\n            mn = min(mn,min(nums[i],nums[j]));\\n            res = max(res,mn*(j-i+1));\\n        }\\n        return res;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int i = k;\\n        int j = k;\\n        int n = nums.size();\\n        int res = nums[i];\\n        int mn = res;\\n        while(1){\\n            if(i-1>=0 && nums[i-1]>=mn){\\n                i--;\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(j+1<n && nums[j+1]>=mn){\\n                j++;\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i==0 && j+1<n){\\n                j++;\\n                mn = min(mn,nums[j]);\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i-1>=0 && j==n-1){\\n                i--;\\n                mn = min(mn,nums[i]);\\n                res = max(res,mn*(j-i+1));\\n            }\\n            else if(i==0 && j==n-1){\\n                break;\\n            }\\n            else{\\n                if(nums[i-1]>nums[j+1]){\\n                    i--;\\n                    mn = min(mn,nums[i]);\\n                }\\n                else{\\n                    j++;\\n                    mn = min(mn,nums[j]);\\n                }\\n                res = max(res,mn*(j-i+1));\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3390286,
                "title": "c",
                "content": "```\\nusing LL = long long ;\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int ret = 0 ;\\n        int n = nums.size() ;\\n        int left = k -1, right = k + 1 ;\\n        LL sum = nums[k] ;\\n        int minVal = nums[k] ;\\n        while(left >= 0 || right < n){\\n            if(left >= 0 && nums[left] >= minVal){\\n                sum += nums[left] ;\\n                left-- ;\\n            }\\n            else if(right < n && nums[right] >= minVal){\\n                sum += nums[right] ;\\n                right++ ;\\n            }\\n            else{\\n                ret = max(ret, minVal*(right - left - 1)) ;\\n                if(left >= 0 && right < n)\\n                    minVal = max(nums[left], nums[right]) ;\\n                else if(left >= 0)\\n                    minVal = nums[left] ;\\n                else\\n                    minVal = nums[right] ;\\n            }\\n        }\\n        ret = max(ret, minVal * (right -left -1)) ;\\n        return ret ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\nusing LL = long long ;\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int ret = 0 ;\\n        int n = nums.size() ;\\n        int left = k -1, right = k + 1 ;\\n        LL sum = nums[k] ;\\n        int minVal = nums[k] ;\\n        while(left >= 0 || right < n){\\n            if(left >= 0 && nums[left] >= minVal){\\n                sum += nums[left] ;\\n                left-- ;\\n            }\\n            else if(right < n && nums[right] >= minVal){\\n                sum += nums[right] ;\\n                right++ ;\\n            }\\n            else{\\n                ret = max(ret, minVal*(right - left - 1)) ;\\n                if(left >= 0 && right < n)\\n                    minVal = max(nums[left], nums[right]) ;\\n                else if(left >= 0)\\n                    minVal = nums[left] ;\\n                else\\n                    minVal = nums[right] ;\\n            }\\n        }\\n        ret = max(ret, minVal * (right -left -1)) ;\\n        return ret ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3346249,
                "title": "c-solution-stack",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nvoid nsl(vector<int>&arr,vector<int>&temp){\\n    stack<int>st;\\n    int n=arr.size();\\n    for(int i=0;i<n;i++){\\n        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();\\n        if(st.empty())temp[i]=-1;\\n        else temp[i]=st.top();\\n        st.push(i);\\n    }\\n}\\nvoid nsr(vector<int>&arr,vector<int>&temp){\\n    stack<int>st;\\n    int n= arr.size();\\n    for(int i=n-1;i>=0;i--){\\n        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();\\n        if(st.empty())temp[i]=n;\\n        else temp[i]=st.top();\\n        st.push(i);\\n    }\\n}\\n    int maximumScore(vector<int>& nums, int k) {\\n//         5 5 5 4 5 4 1 1 1 1\\n// left    -1 5 5 5 4 -1 -1 -1 -1 \\n// right    1 1 1 1 1  1  n n  n  n \\n            int n=nums.size();\\n            vector<int>left(n),right(n);\\n            nsl(nums,left);\\n            nsr(nums,right);\\n            int ans=0;\\n            for(int i=0;i<n;i++){\\n                if(left[i]+1<=k && k<=right[i]-1){\\n                    ans=max(ans,nums[i]*(right[i]-left[i]-1));\\n                }\\n            }\\n            \\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nvoid nsl(vector<int>&arr,vector<int>&temp){\\n    stack<int>st;\\n    int n=arr.size();\\n    for(int i=0;i<n;i++){\\n        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();\\n        if(st.empty())temp[i]=-1;\\n        else temp[i]=st.top();\\n        st.push(i);\\n    }\\n}\\nvoid nsr(vector<int>&arr,vector<int>&temp){\\n    stack<int>st;\\n    int n= arr.size();\\n    for(int i=n-1;i>=0;i--){\\n        while(!st.empty() && arr[st.top()]>=arr[i])st.pop();\\n        if(st.empty())temp[i]=n;\\n        else temp[i]=st.top();\\n        st.push(i);\\n    }\\n}\\n    int maximumScore(vector<int>& nums, int k) {\\n//         5 5 5 4 5 4 1 1 1 1\\n// left    -1 5 5 5 4 -1 -1 -1 -1 \\n// right    1 1 1 1 1  1  n n  n  n \\n            int n=nums.size();\\n            vector<int>left(n),right(n);\\n            nsl(nums,left);\\n            nsr(nums,right);\\n            int ans=0;\\n            for(int i=0;i<n;i++){\\n                if(left[i]+1<=k && k<=right[i]-1){\\n                    ans=max(ans,nums[i]*(right[i]-left[i]-1));\\n                }\\n            }\\n            \\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3343747,
                "title": "solution-with-using-nextsmallest-and-prevsmallest-values",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n#define pii pair<int,int>\\nclass Solution {\\npublic:\\n    void print(vector<int> v)\\n    {\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout << v[i] << \" \";\\n        }\\n        cout <<  endl;\\n    }\\n/*\\n                                                           \\n                                      K                         \\n                                    |***|                          \\n                                    |***|                 \\n                                    |***|               |***| \\n                |***|               |***|     |***|     |***|\\n                |***|     |***|     |***|     |***|     |***| \\n        |***|   |***|     |***|     |***|     |***|     |***| \\n        |***|   |***|     |***|     |***|     |***|     |***| \\n\\n        nextSmallest\\n        6      2         6        4          6       6\\n\\n        prevSmallest\\n        -1      0        0        2          2       4\\n\\n*/\\n    int maximumScore(vector<int>& nums, int k) {  \\n        int n = nums.size(); \\n        vector<int> nextSmallest(n,n);\\n        vector<int> prevSmallest(n,-1);\\n\\n        stack<int> s1,s2;\\n\\n        for (int i=0;i<n;i++)\\n        {\\n            while(!s1.empty())\\n            {\\n                int j = s1.top();\\n                if (nums[j] > nums[i])\\n                {\\n                    nextSmallest[j] = i;\\n                    s1.pop();\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n            }\\n            s1.push(i);\\n        }\\n\\n        // print(nextSmallest);\\n\\n        for (int i=n-1;i>=0;i--)\\n        {\\n            while(!s2.empty())\\n            {\\n                int j = s2.top();\\n                if (nums[j] >= nums[i])\\n                {\\n                    prevSmallest[j] = i;\\n                    s2.pop();\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n            }\\n            s2.push(i);\\n        }\\n\\n        // print(prevSmallest);\\n\\n        int ans = INT_MIN;\\n        for(int i=0;i<n;i++)\\n        {\\n            // prev+1 ..... next-1\\n            int next = nextSmallest[i], prev = prevSmallest[i];\\n            if (k < next && k > prev)\\n            {\\n                ans = max(ans, nums[i]*(next - prev - 1));\\n            }\\n        }   \\n\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n#define pii pair<int,int>\\nclass Solution {\\npublic:\\n    void print(vector<int> v)\\n    {\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout << v[i] << \" \";\\n        }\\n        cout <<  endl;\\n    }\\n/*\\n                                                           \\n                                      K                         \\n                                    |***|                          \\n                                    |***|                 \\n                                    |***|               |***| \\n                |***|               |***|     |***|     |***|\\n                |***|     |***|     |***|     |***|     |***| \\n        |***|   |***|     |***|     |***|     |***|     |***| \\n        |***|   |***|     |***|     |***|     |***|     |***| \\n\\n        nextSmallest\\n        6      2         6        4          6       6\\n\\n        prevSmallest\\n        -1      0        0        2          2       4\\n\\n*/\\n    int maximumScore(vector<int>& nums, int k) {  \\n        int n = nums.size(); \\n        vector<int> nextSmallest(n,n);\\n        vector<int> prevSmallest(n,-1);\\n\\n        stack<int> s1,s2;\\n\\n        for (int i=0;i<n;i++)\\n        {\\n            while(!s1.empty())\\n            {\\n                int j = s1.top();\\n                if (nums[j] > nums[i])\\n                {\\n                    nextSmallest[j] = i;\\n                    s1.pop();\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n            }\\n            s1.push(i);\\n        }\\n\\n        // print(nextSmallest);\\n\\n        for (int i=n-1;i>=0;i--)\\n        {\\n            while(!s2.empty())\\n            {\\n                int j = s2.top();\\n                if (nums[j] >= nums[i])\\n                {\\n                    prevSmallest[j] = i;\\n                    s2.pop();\\n                }\\n                else\\n                {\\n                    break;\\n                }\\n            }\\n            s2.push(i);\\n        }\\n\\n        // print(prevSmallest);\\n\\n        int ans = INT_MIN;\\n        for(int i=0;i<n;i++)\\n        {\\n            // prev+1 ..... next-1\\n            int next = nextSmallest[i], prev = prevSmallest[i];\\n            if (k < next && k > prev)\\n            {\\n                ans = max(ans, nums[i]*(next - prev - 1));\\n            }\\n        }   \\n\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3336661,
                "title": "java-stack-soln",
                "content": "# If this Helps Dont Forget to ```Upvote``` and:\\n![image.png](https://assets.leetcode.com/users/images/f0ce05f0-c2af-423d-b84e-afe51c0ad055_1679677934.8236241.png)\\n\\n\\n# Approach\\nHere we find the next smaller and prev smaller pos for each element nd calculating the score for each point\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> st = new Stack<>();\\n\\n        int maxS = 0;\\n\\n        for(int i=0;i<nums.length;i++){\\n            while(!st.isEmpty() && nums[st.peek()]>=nums[i]){\\n                int index = st.pop();\\n                int min = nums[index];\\n                int l, r=i-1;\\n                if(st.isEmpty()){\\n                    l =-1;\\n                }\\n                else{\\n                    l = st.peek();\\n                }\\n                l++;\\n\\n                if(l<=k && k<=r){\\n                    int width = r-l+1;\\n                    // System.out.println(min+\" \"+width);\\n                    maxS = Math.max(maxS, min * width);\\n                }\\n\\n            }\\n            st.push(i);\\n        }\\n\\n        while(!st.isEmpty()){\\n            int index = st.pop();\\n            int min = nums[index];\\n            int l, r = nums.length-1;\\n            if(st.isEmpty()){\\n                l =-1;\\n            }\\n            else{\\n                l = st.peek();\\n            }\\n            l++;\\n\\n            if(l<=k && k<=r){\\n                int width = r-l+1;\\n                // System.out.println(min+\" \"+width);\\n                maxS = Math.max(maxS, min * width);\\n            }\\n\\n        }\\n\\n        return maxS;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Upvote```\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> st = new Stack<>();\\n\\n        int maxS = 0;\\n\\n        for(int i=0;i<nums.length;i++){\\n            while(!st.isEmpty() && nums[st.peek()]>=nums[i]){\\n                int index = st.pop();\\n                int min = nums[index];\\n                int l, r=i-1;\\n                if(st.isEmpty()){\\n                    l =-1;\\n                }\\n                else{\\n                    l = st.peek();\\n                }\\n                l++;\\n\\n                if(l<=k && k<=r){\\n                    int width = r-l+1;\\n                    // System.out.println(min+\" \"+width);\\n                    maxS = Math.max(maxS, min * width);\\n                }\\n\\n            }\\n            st.push(i);\\n        }\\n\\n        while(!st.isEmpty()){\\n            int index = st.pop();\\n            int min = nums[index];\\n            int l, r = nums.length-1;\\n            if(st.isEmpty()){\\n                l =-1;\\n            }\\n            else{\\n                l = st.peek();\\n            }\\n            l++;\\n\\n            if(l<=k && k<=r){\\n                int width = r-l+1;\\n                // System.out.println(min+\" \"+width);\\n                maxS = Math.max(maxS, min * width);\\n            }\\n\\n        }\\n\\n        return maxS;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3213204,
                "title": "just-a-runnable-solution",
                "content": "# Code\\n```\\nimpl Solution {\\n    pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {\\n        let (mut res, mut mini) = (nums[k as usize], nums[k as usize]);\\n        let (mut i, mut j) = (k, k);\\n        let n = nums.len() as i32;\\n        while i > 0 || j < n - 1 {\\n            let left = if i > 0 { nums[(i - 1) as usize] } else { 0 };\\n            let right = if j < n - 1 { nums[(j + 1) as usize] } else { 0 };\\n            if left < right {\\n                mini = mini.min(nums[(j + 1) as usize]);\\n                j += 1;\\n            } else {\\n                mini = mini.min(nums[(i - 1) as usize]);\\n                i -= 1;\\n            }\\n            res = res.max(mini * (j - i + 1));\\n        }\\n        res\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn maximum_score(nums: Vec<i32>, k: i32) -> i32 {\\n        let (mut res, mut mini) = (nums[k as usize], nums[k as usize]);\\n        let (mut i, mut j) = (k, k);\\n        let n = nums.len() as i32;\\n        while i > 0 || j < n - 1 {\\n            let left = if i > 0 { nums[(i - 1) as usize] } else { 0 };\\n            let right = if j < n - 1 { nums[(j + 1) as usize] } else { 0 };\\n            if left < right {\\n                mini = mini.min(nums[(j + 1) as usize]);\\n                j += 1;\\n            } else {\\n                mini = mini.min(nums[(i - 1) as usize]);\\n                i -= 1;\\n            }\\n            res = res.max(mini * (j - i + 1));\\n        }\\n        res\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3207702,
                "title": "greedy-approach-with-two-pointer-o-n-solution-with-o-1-spaceo",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n\\n- Space complexity: O(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        i,j = k,k\\n        min_so_far = nums[k]\\n        ans = nums[k]\\n        n = len(nums)\\n\\n        while j < n and i >= 0:\\n            if j == n-1 and i == 0:\\n                break\\n            elif j == n-1:\\n                i -= 1\\n                min_so_far = min(min_so_far, nums[i])\\n            elif i == 0:\\n                j += 1 \\n                min_so_far = min(min_so_far, nums[j])   \\n            elif nums[j+1] > nums[i-1]:\\n                j += 1\\n                min_so_far = min(min_so_far, nums[j])     \\n            else:\\n                i -= 1\\n                min_so_far = min(min_so_far, nums[i])\\n\\n            ans = max(ans, min_so_far * (j - i + 1))\\n\\n        return ans    \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        i,j = k,k\\n        min_so_far = nums[k]\\n        ans = nums[k]\\n        n = len(nums)\\n\\n        while j < n and i >= 0:\\n            if j == n-1 and i == 0:\\n                break\\n            elif j == n-1:\\n                i -= 1\\n                min_so_far = min(min_so_far, nums[i])\\n            elif i == 0:\\n                j += 1 \\n                min_so_far = min(min_so_far, nums[j])   \\n            elif nums[j+1] > nums[i-1]:\\n                j += 1\\n                min_so_far = min(min_so_far, nums[j])     \\n            else:\\n                i -= 1\\n                min_so_far = min(min_so_far, nums[i])\\n\\n            ans = max(ans, min_so_far * (j - i + 1))\\n\\n        return ans    \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3177053,
                "title": "python-3-explained-in-detail-easy-to-understand",
                "content": "![image.png](https://assets.leetcode.com/users/images/4dcc9062-6d74-424e-b9d1-41e301e79eed_1676222585.9996865.png)\\n\\n\\n# Approach\\n---\\n### 2 pointers\\n- start from the k-th element\\n- move pointer with greater potential\\n- update `current height` and `maximum score`\\n---\\n\\n\\n0. Illustration of algorithm is based on **example 1**\\n`nums = [1,4,3,7,4,5]`,   `k = 3` \\n1. start from k-th element\\n```\\n  l = r = 3                    l, r\\n                                \\u25BC\\n                       1  4  3  7  4  5\\n                \\n  current height = 7\\n\\n  current score  = 7 * (3 - 3 + 1) = 7\\n  maximum score  = 7\\n```\\n- **Notice that:**\\n  moving right pointer is preferable to moving left pointer (`4` > `3`), because on the next step:\\n   + width will increase by 1 (no matter which pointer we will move)\\n   - by choosing 4 we could get a better result\\n\\n\\n\\n\\n\\n \\n2. move right pointer\\n(because element to the right `5` is greater than element to the left  `3`)\\n```\\n                                l  r   \\n                                \\u25BC  \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(7, 4) = 4\\n\\n  current score  = 4 * (4 - 3 + 1) = 8\\n  maximum score  = min(7, 8) = 8\\n```\\n3. move left pointer\\n(because right pointer is already reached right border)\\n```\\n                                l     r   \\n                                \\u25BC     \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(4, 5) = 4\\n\\n  current score  = 4 * (5 - 3 + 1) = 12\\n  maximum score  = min(8, 12) = 12\\n```\\n4. move left pointer\\n(because right pointer is already reached right border)\\n```\\n                             l        r   \\n                             \\u25BC        \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(4, 3) = 3\\n\\n  current score  = 3 * (5 - 2 + 1) = 12\\n  maximum score  = min(12, 12) = 12\\n```\\n5. move left pointer\\n(because right pointer is already reached right border)\\n```\\n                          l           r   \\n                          \\u25BC           \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(3, 4) = 3\\n\\n  current score  = 3 * (5 - 1 + 1) = 15\\n  maximum score  = min(12, 15) = 15\\n```\\n6. move left pointer\\n(because right pointer is already reached right border)\\n```\\n                       l              r   \\n                       \\u25BC              \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(3, 1) = 1\\n\\n  current score  = 1 * (5 - 0 + 1) = 6\\n  maximum score  = min(15, 6) = 15\\n```\\n\\n\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n\\n        nums_l = len(nums)\\n        \\n        # start from k-th element\\n        l, r   = k, k     \\n        scr_m  = nums[k]   # score          is equal to the k-th element value\\n        cur_h  = nums[k]   # current height is equal to the k-th element value \\n\\n        while l >= 0 and r < nums_l:\\n\\n            cur_h = min(cur_h, nums[l], nums[r])       # find minimum height\\n            scr_m = max(scr_m, cur_h * (r - l + 1))    # update maximum score\\n\\n            if   l == 0:                      r += 1   # reached left  border\\n            elif r == nums_l - 1:             l -= 1   # reached right border\\n            elif nums[r + 1] > nums[l - 1]:   r += 1   # element to the right >  element to the left\\n            else:                             l -= 1   # element to the right <= element to the left\\n            \\n        \\n        return scr_m\\n```",
                "solutionTags": [
                    "Python3",
                    "Two Pointers"
                ],
                "code": "```\\n  l = r = 3                    l, r\\n                                \\u25BC\\n                       1  4  3  7  4  5\\n                \\n  current height = 7\\n\\n  current score  = 7 * (3 - 3 + 1) = 7\\n  maximum score  = 7\\n```\n```\\n                                l  r   \\n                                \\u25BC  \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(7, 4) = 4\\n\\n  current score  = 4 * (4 - 3 + 1) = 8\\n  maximum score  = min(7, 8) = 8\\n```\n```\\n                                l     r   \\n                                \\u25BC     \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(4, 5) = 4\\n\\n  current score  = 4 * (5 - 3 + 1) = 12\\n  maximum score  = min(8, 12) = 12\\n```\n```\\n                             l        r   \\n                             \\u25BC        \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(4, 3) = 3\\n\\n  current score  = 3 * (5 - 2 + 1) = 12\\n  maximum score  = min(12, 12) = 12\\n```\n```\\n                          l           r   \\n                          \\u25BC           \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(3, 4) = 3\\n\\n  current score  = 3 * (5 - 1 + 1) = 15\\n  maximum score  = min(12, 15) = 15\\n```\n```\\n                       l              r   \\n                       \\u25BC              \\u25BC \\n                       1  4  3  7  4  5 \\n  \\n  current height = min(3, 1) = 1\\n\\n  current score  = 1 * (5 - 0 + 1) = 6\\n  maximum score  = min(15, 6) = 15\\n```\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n\\n        nums_l = len(nums)\\n        \\n        # start from k-th element\\n        l, r   = k, k     \\n        scr_m  = nums[k]   # score          is equal to the k-th element value\\n        cur_h  = nums[k]   # current height is equal to the k-th element value \\n\\n        while l >= 0 and r < nums_l:\\n\\n            cur_h = min(cur_h, nums[l], nums[r])       # find minimum height\\n            scr_m = max(scr_m, cur_h * (r - l + 1))    # update maximum score\\n\\n            if   l == 0:                      r += 1   # reached left  border\\n            elif r == nums_l - 1:             l -= 1   # reached right border\\n            elif nums[r + 1] > nums[l - 1]:   r += 1   # element to the right >  element to the left\\n            else:                             l -= 1   # element to the right <= element to the left\\n            \\n        \\n        return scr_m\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3161486,
                "title": "c-sliding-window-solution-beats-100-explained",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nMy first thought was to use a sliding window to keep track of the maximum score, since we are interested in finding the maximum score of subarrays with size k.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nI used a sliding window to keep track of the minimum element within the window, and used that to compute the maximum score for the window. I then used two pointers, one for the left side of the window and one for the right side of the window, and moved them accordingly to find the maximum score of all subarrays of size k. \\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n#pragma GCC optimize(\"Ofast\",\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\",\"f16c\")\\nstatic const auto fast = []() {ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); return 0; } ();\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        int ans = nums[k];\\n        int l = k, r = k;\\n        int mn = nums[k];\\n        while (l > 0 || r < n - 1) {\\n            if (l == 0) {\\n                r++;\\n            } else if (r == n - 1) {\\n                l--;\\n            } else if (nums[l - 1] < nums[r + 1]) {\\n                r++;\\n            } else {\\n                l--;\\n            }\\n            mn = min(mn, min(nums[l], nums[r]));\\n            ans = max(ans, mn * (r - l + 1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Two Pointers",
                    "Binary Search",
                    "Stack"
                ],
                "code": "```\\n#pragma GCC optimize(\"Ofast\",\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\",\"f16c\")\\nstatic const auto fast = []() {ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0); return 0; } ();\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n = nums.size();\\n        int ans = nums[k];\\n        int l = k, r = k;\\n        int mn = nums[k];\\n        while (l > 0 || r < n - 1) {\\n            if (l == 0) {\\n                r++;\\n            } else if (r == n - 1) {\\n                l--;\\n            } else if (nums[l - 1] < nums[r + 1]) {\\n                r++;\\n            } else {\\n                l--;\\n            }\\n            mn = min(mn, min(nums[l], nums[r]));\\n            ans = max(ans, mn * (r - l + 1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3145954,
                "title": "two-pointer-and-greedy-easy",
                "content": "# Intuition \\nTwo Pointers and Greedy\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] arr, int k) {\\n        int i = k;\\n        int j = k;\\n        int res = arr[k];\\n        int min = arr[k];\\n        int n = arr.length;\\n        while(i>0 || j<n-2){\\n            if(i == 0){\\n                j++;\\n                min = Math.min(min,arr[j]);\\n            }\\n            else if(j == n-1){\\n                i--;\\n                min = Math.min(min,arr[i]);\\n            }else{\\n                int a = arr[i-1];\\n                int b = arr[j+1];\\n                if(a>=b){\\n                    i--;\\n                    min = Math.min(min,arr[i]);\\n                }else{\\n                    j++;\\n                    min = Math.min(min,arr[j]);\\n                }\\n            }\\n            res = Math.max(res,min*(j-i+1));\\n        }\\n        res = Math.max(res,(n)*Math.min(min,Math.min(arr[0], arr[n-1])));\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] arr, int k) {\\n        int i = k;\\n        int j = k;\\n        int res = arr[k];\\n        int min = arr[k];\\n        int n = arr.length;\\n        while(i>0 || j<n-2){\\n            if(i == 0){\\n                j++;\\n                min = Math.min(min,arr[j]);\\n            }\\n            else if(j == n-1){\\n                i--;\\n                min = Math.min(min,arr[i]);\\n            }else{\\n                int a = arr[i-1];\\n                int b = arr[j+1];\\n                if(a>=b){\\n                    i--;\\n                    min = Math.min(min,arr[i]);\\n                }else{\\n                    j++;\\n                    min = Math.min(min,arr[j]);\\n                }\\n            }\\n            res = Math.max(res,min*(j-i+1));\\n        }\\n        res = Math.max(res,(n)*Math.min(min,Math.min(arr[0], arr[n-1])));\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3126917,
                "title": "python-simple-two-pointers",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        res = min_val = nums[k]\\n        i,j,n = k,k,len(nums)\\n\\n        while i > 0 or j+1 < n:\\n            if (nums[i-1] if i else 0) < (nums[j+1] if j+1 < n else 0):\\n                j += 1\\n            else:\\n                i -= 1\\n\\n            min_val = min(min_val,nums[i],nums[j])\\n            res = max(res,min_val*(j-i+1))\\n\\n        return res\\n\\n\\n            \\n\\n\\n\\n\\n\\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums, k):\\n        res = min_val = nums[k]\\n        i,j,n = k,k,len(nums)\\n\\n        while i > 0 or j+1 < n:\\n            if (nums[i-1] if i else 0) < (nums[j+1] if j+1 < n else 0):\\n                j += 1\\n            else:\\n                i -= 1\\n\\n            min_val = min(min_val,nums[i],nums[j])\\n            res = max(res,min_val*(j-i+1))\\n\\n        return res\\n\\n\\n            \\n\\n\\n\\n\\n\\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3093738,
                "title": "sparse-table-tutorial-detailed-explanation",
                "content": "# Intuition\\nTake 2 pointers left and right on each end of the array and keep moving while these pointers are on either side of the index k. \\n\\nFor some left and right pointers, \\nCurrent ans = (right - left+1) * min(arr[left], arr[left+1], ... arr[right])\\n\\ni.e. current ans = len * min(left, right)\\n\\nNow, for the next range, length would for sure decrease by 1 so, we should try moving that pointer which maximizes our minimum. \\n\\n\\nThus, \\nif min(left, k) <= min(k, right) , increment the left pointer, as we might have a better minimum in the range (left+1, k), otherwise decrement right pointer\\n\\n# Approach\\n\\nFor the above approach, we need to find range minimum multiple times. The best data structure to achieve this task, is Sparse Table.\\nProvided the array is immutable while the queries are being processed, it can compute range minimum in O(1) time complexity.\\n\\nAny non-negative number can be uniquely represented as a sum of decreasing powers of two.\\nEx. 13 = 1101 = 8 + 4 + 1\\n\\nThus, for a number x, the number of summands atmax = \\n![image.png](https://assets.leetcode.com/users/images/447cbf61-fc8f-478a-b485-d4895be1e603_1674557984.1520488.png) \\n\\nBy the same reasoning any interval can be uniquely represented as a union of intervals with lengths that are decreasing powers of two.\\n\\nEx. [2, 14] = [2, 9] U [10, 13] U [14, 14]\\n\\nwhere the complete interval has length 13, and the individual intervals have the lengths 8, 4 and 1 respectively.\\n\\nThe main idea behind Sparse Tables is to precompute all answers for range queries with power of two length.\\n\\nWhen computing the minimum of a range, it doesn\\'t matter if we process a value in the range once or twice. Therefore instead of splitting a range into multiple ranges, we can also split the range into only two overlapping ranges with power of two length.\\n\\nEx. Range of [1, 6] can be split up into [1, 4] and [3, 6] \\ni.e. min(1, 6) = min(min(1, 4), min(3, 6))\\n\\nSparseTable[i][j] would be storing the minimum value starting from the index i of length 2^j\\n\\nEx. SparseTable[4][2] = min(arr[4], arr[5], arr[6], arr[7])\\n\\nOn generalizing the above fact, \\n\\nmin(L, R) = min(SparseTable[L][i], SparseTable[R - 2^i + 1][i]) where i = log2(R-L+1)\\n\\nRecursively, the table can be filled as follows, where in SparseTable[j][i] specifies, the minimum value of the range starting from the index j of length 2^i which can be computed using left and right halves of the range 2^i\\n\\n* Left Half starts at index j of length 2^(i-1)\\n\\n* Right Half starts at index j+2^(i-1) of length 2^(i-1)\\n\\nThe minimum of above 2 is the minimum of the range starting at index j of length 2^i\\n\\nSparseTable[j][i]=merge(SparseTable[j][i-1], SparseTable[j+(1<<(i-1))][i-1]);\\n\\n\\n\\n# Complexity\\n- Time complexity: O(N * Log2(N)) to build the Sparse table and O(N) to process once the table is build, as we receive range minimum queries in constant time later on. \\n\\n- Space complexity: O(N * Log2(N)) to store the sparse table\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    struct item{\\n        int val;\\n    };\\n\\n    struct sparseTable{\\n        int sze, mxLog;\\n        vector<int> logval;\\n        vector<vector<item>> table;\\n\\n        item merge(item a, item b){\\n            return {min(a.val, b.val)};\\n        }\\n\\n        item single(int v){\\n            return {v};\\n        }\\n\\n        void build(vector<int> &a){\\n            sze=a.size();\\n            mxLog=log2(sze);\\n            table.resize(sze+1);\\n            logval.resize(sze+1);\\n            logval[1]=0;\\n            for(int i=2; i<=sze; i++)logval[i]=logval[i/2]+1;\\n            for(int i=0; i<sze; i++){\\n                table[i].resize(mxLog+1);\\n                fill(table[i].begin(), table[i].end(), item());\\n            }\\n            for(int i=0; i<sze; i++)table[i][0]=single(a[i]);\\n            for(int i=1; i<=mxLog; i++){\\n                for(int j=0; (j+(1<<i))<=sze; j++){\\n                    table[j][i]=merge(table[j][i-1], table[j+(1<<(i-1))][i-1]);\\n                }\\n            }\\n        }\\n\\n        item query(int l, int r){\\n            int j=logval[r-l+1];\\n            item ans=item();\\n            ans=merge(table[l][j], table[r-(1<<j)+1][j]);\\n            return ans;\\n        }\\n    };\\n\\n    int maximumScore(vector<int>& nums,int k) {\\n        sparseTable st;\\n        st.build(nums);\\n        int n=nums.size();\\n        int left = 0, right = n-1, score = 0;\\n        while (left <= k && k<= right){\\n            int currentScore = st.query(left,right).val * (right - left + 1);\\n            score = max(score, currentScore);\\n            if (st.query(left,k).val <= st.query(k,right).val){\\n                left+=1;\\n            }else{\\n                right-=1;\\n            }\\n        }\\n        return score ;\\n    }\\n};\\n\\n```\\n\\nDo Upvote, If found helpful \\uD83D\\uDE0A\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "Hash Table",
                    "Dynamic Programming"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    struct item{\\n        int val;\\n    };\\n\\n    struct sparseTable{\\n        int sze, mxLog;\\n        vector<int> logval;\\n        vector<vector<item>> table;\\n\\n        item merge(item a, item b){\\n            return {min(a.val, b.val)};\\n        }\\n\\n        item single(int v){\\n            return {v};\\n        }\\n\\n        void build(vector<int> &a){\\n            sze=a.size();\\n            mxLog=log2(sze);\\n            table.resize(sze+1);\\n            logval.resize(sze+1);\\n            logval[1]=0;\\n            for(int i=2; i<=sze; i++)logval[i]=logval[i/2]+1;\\n            for(int i=0; i<sze; i++){\\n                table[i].resize(mxLog+1);\\n                fill(table[i].begin(), table[i].end(), item());\\n            }\\n            for(int i=0; i<sze; i++)table[i][0]=single(a[i]);\\n            for(int i=1; i<=mxLog; i++){\\n                for(int j=0; (j+(1<<i))<=sze; j++){\\n                    table[j][i]=merge(table[j][i-1], table[j+(1<<(i-1))][i-1]);\\n                }\\n            }\\n        }\\n\\n        item query(int l, int r){\\n            int j=logval[r-l+1];\\n            item ans=item();\\n            ans=merge(table[l][j], table[r-(1<<j)+1][j]);\\n            return ans;\\n        }\\n    };\\n\\n    int maximumScore(vector<int>& nums,int k) {\\n        sparseTable st;\\n        st.build(nums);\\n        int n=nums.size();\\n        int left = 0, right = n-1, score = 0;\\n        while (left <= k && k<= right){\\n            int currentScore = st.query(left,right).val * (right - left + 1);\\n            score = max(score, currentScore);\\n            if (st.query(left,k).val <= st.query(k,right).val){\\n                left+=1;\\n            }else{\\n                right-=1;\\n            }\\n        }\\n        return score ;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3086243,
                "title": "best-solution-using-binary-search-and-prefix-sum-easiest-solution-ace-solution",
                "content": "# Intuition\\n<!-- Descr-->binary search\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nsimple solution using binary search and prefix sum\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        long long int n=nums.size();\\n        vector< int> pre(n,  INT_MAX);\\n        //    long long int n=nums.size();\\n        vector< int> pre2(n-k-1,  INT_MAX);\\n        pre[k]=nums[k];\\n        long long int ans=nums[k];\\n        for(long long int i=k+1; i<n; i++){\\n            pre[i]=min(pre[i-1], nums[i]);\\n            ans=max(ans, pre[i]*(i-k+1));\\n            pre2[n-1-i]=pre[i];\\n        }\\n        for(long long int i=k-1; i>=0; i--){\\n             pre[i]=min(pre[i+1], nums[i]);\\n              ans=max(ans, pre[i]*(k-i+1));\\n        }\\n//   long long int ans=nums[k];\\n        for(long long int i=n-1; i>k; i--){\\n            long long int p=pre[i];\\n            auto it=lower_bound(pre.begin(), pre.begin()+k, p);\\n            if(it==pre.end()) continue;\\n            long long int q=it-pre.begin();\\n            // cout<<i<<\" \"<<p<<\" \"<<q<<\" \"<<p*(i-q+1)<<endl;\\n            ans=max(ans, p*(i-q+1));\\n        }\\n        // for(int i=0; i<pre2.size(); i++) cout<<pre2[i]<<\" \";\\n        for(long long int i=0; i<k; i++){\\n            long long int p=pre[i];\\n            auto it=lower_bound(pre2.begin(), pre2.end(), p);\\n            if(it==pre2.end()) continue;\\n            long long int q=n-1-(it-pre2.begin());\\n            //  cout<<i<<\" \"<<p<<\" \"<<q<<\" \"<<p*(q-i+1)<<endl;\\n            ans=max(ans, p*(q-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search",
                    "Prefix Sum"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        long long int n=nums.size();\\n        vector< int> pre(n,  INT_MAX);\\n        //    long long int n=nums.size();\\n        vector< int> pre2(n-k-1,  INT_MAX);\\n        pre[k]=nums[k];\\n        long long int ans=nums[k];\\n        for(long long int i=k+1; i<n; i++){\\n            pre[i]=min(pre[i-1], nums[i]);\\n            ans=max(ans, pre[i]*(i-k+1));\\n            pre2[n-1-i]=pre[i];\\n        }\\n        for(long long int i=k-1; i>=0; i--){\\n             pre[i]=min(pre[i+1], nums[i]);\\n              ans=max(ans, pre[i]*(k-i+1));\\n        }\\n//   long long int ans=nums[k];\\n        for(long long int i=n-1; i>k; i--){\\n            long long int p=pre[i];\\n            auto it=lower_bound(pre.begin(), pre.begin()+k, p);\\n            if(it==pre.end()) continue;\\n            long long int q=it-pre.begin();\\n            // cout<<i<<\" \"<<p<<\" \"<<q<<\" \"<<p*(i-q+1)<<endl;\\n            ans=max(ans, p*(i-q+1));\\n        }\\n        // for(int i=0; i<pre2.size(); i++) cout<<pre2[i]<<\" \";\\n        for(long long int i=0; i<k; i++){\\n            long long int p=pre[i];\\n            auto it=lower_bound(pre2.begin(), pre2.end(), p);\\n            if(it==pre2.end()) continue;\\n            long long int q=n-1-(it-pre2.begin());\\n            //  cout<<i<<\" \"<<p<<\" \"<<q<<\" \"<<p*(q-i+1)<<endl;\\n            ans=max(ans, p*(q-i+1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3029441,
                "title": "c-previous-and-next-smaller",
                "content": "# Observation\\n- in the range (j-i+1) * nums[k] if kth index value has to be multipiled by j-i+1 so that elemnt has to be the smallest in whole range\\n- and in other way we can say for index k the valid subarray going to be the one form previous smaller value than kth idx+1 and next smaller value than kth idx-1\\n\\n# Approach\\n- find next smaller and previous smaller for each index\\n- iterate through the whole array and find maximum answer \\n\\n# Complexity\\n- Time complexity: BigO(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:BigO(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int> nex_small(n,n);\\n        vector<int> prev_small(n,-1);\\n        stack<int> st,st1;\\n        for(int i=0;i<n;i++){\\n            if(st.empty()){\\n                st.push(i);\\n                continue;\\n            }\\n\\n            while(!st.empty() && nums[st.top()]>nums[i]){\\n                nex_small[st.top()]=i;\\n                st.pop();\\n            }\\n            st.push(i);\\n        }\\n\\n        for(int i=n-1;i>=0;i--){\\n            if(st1.empty()){\\n                st1.push(i);\\n                continue;\\n            }\\n\\n            while(!st1.empty() && nums[st1.top()]>nums[i]){\\n                prev_small[st1.top()]=i;\\n                st1.pop();\\n            }\\n            st1.push(i);\\n        }\\n        int ans=0;\\n        for(int x=0;x<n;x++){\\n            int i=prev_small[x];\\n            int j=nex_small[x];\\n            int val=nums[x];\\n            //cout<<k<<\" \"<<i<<\" \"<<j<<endl;\\n            if((i+1)<=k && (j-1)>=k){\\n                ans=max(ans,(j-i-1)*val);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n//code by sachin\\n```\\n**Upvote if solution was helpfull**",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int> nex_small(n,n);\\n        vector<int> prev_small(n,-1);\\n        stack<int> st,st1;\\n        for(int i=0;i<n;i++){\\n            if(st.empty()){\\n                st.push(i);\\n                continue;\\n            }\\n\\n            while(!st.empty() && nums[st.top()]>nums[i]){\\n                nex_small[st.top()]=i;\\n                st.pop();\\n            }\\n            st.push(i);\\n        }\\n\\n        for(int i=n-1;i>=0;i--){\\n            if(st1.empty()){\\n                st1.push(i);\\n                continue;\\n            }\\n\\n            while(!st1.empty() && nums[st1.top()]>nums[i]){\\n                prev_small[st1.top()]=i;\\n                st1.pop();\\n            }\\n            st1.push(i);\\n        }\\n        int ans=0;\\n        for(int x=0;x<n;x++){\\n            int i=prev_small[x];\\n            int j=nex_small[x];\\n            int val=nums[x];\\n            //cout<<k<<\" \"<<i<<\" \"<<j<<endl;\\n            if((i+1)<=k && (j-1)>=k){\\n                ans=max(ans,(j-i-1)*val);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n//code by sachin\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2987683,
                "title": "easy-solution-2-pointer-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n          long long ans = nums[k]; \\n          int i = k, j=k;\\n          int mini = nums[k]; \\n          int n = nums.size(); \\n          while(i>0 || j<nums.size()-1){\\n              if(i==0){\\n                 mini = min(mini,nums[j+1]); \\n                 j++;\\n              }\\n              else if(j==n-1){\\n                  mini = min(mini, nums[i-1]); \\n                  i--;\\n              }\\n              else{\\n                  if(nums[i-1]>=nums[j+1]){\\n                      mini = min(nums[i-1], mini); \\n                      i--;\\n                  }\\n                  else{\\n                      mini = min(nums[j+1], mini);\\n                      j++;\\n                  }\\n              }\\n              ans = max(ans,1LL*mini*(j-i+1)); \\n          }\\n          return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n          long long ans = nums[k]; \\n          int i = k, j=k;\\n          int mini = nums[k]; \\n          int n = nums.size(); \\n          while(i>0 || j<nums.size()-1){\\n              if(i==0){\\n                 mini = min(mini,nums[j+1]); \\n                 j++;\\n              }\\n              else if(j==n-1){\\n                  mini = min(mini, nums[i-1]); \\n                  i--;\\n              }\\n              else{\\n                  if(nums[i-1]>=nums[j+1]){\\n                      mini = min(nums[i-1], mini); \\n                      i--;\\n                  }\\n                  else{\\n                      mini = min(nums[j+1], mini);\\n                      j++;\\n                  }\\n              }\\n              ans = max(ans,1LL*mini*(j-i+1)); \\n          }\\n          return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2914816,
                "title": "c-two-pointer-faster-in-general",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int i = k - 1, j = k + 1, n = A.size(), ans = A[k], mn = A[k]; \\n\\n        while(i>=0 || j<n) {\\n            int lmin = i >= 0 ? A[i] : 0; \\n            int rmin = j < n ? A[j] : 0; \\n            mn = min(mn, max(lmin, rmin));\\n\\n            while (i>=0 && A[i]>=mn) i--;\\n            while (j<n && A[j]>=mn) j++;\\n            \\n            ans = max(ans, mn * (j-i-1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Two Pointers",
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& A, int k) {\\n        int i = k - 1, j = k + 1, n = A.size(), ans = A[k], mn = A[k]; \\n\\n        while(i>=0 || j<n) {\\n            int lmin = i >= 0 ? A[i] : 0; \\n            int rmin = j < n ? A[j] : 0; \\n            mn = min(mn, max(lmin, rmin));\\n\\n            while (i>=0 && A[i]>=mn) i--;\\n            while (j<n && A[j]>=mn) j++;\\n            \\n            ans = max(ans, mn * (j-i-1));\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2867704,
                "title": "java-sol",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        return Area(nums,k);   \\n    }\\n    private static int Area(int[] area,int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int max_area = 0;\\n        for (int i = 0; i < area.length; i++) {\\n            while (!stack.isEmpty() && area[i] < area[stack.peek()]) {\\n                int h = area[stack.pop()];\\n                int r = i;\\n                if(k < r)\\n                if (stack.isEmpty()) {\\n                    max_area = Math.max(max_area, h * r);\\n                } else {\\n                    int l = stack.peek();\\n                    if(k > l)\\n                    max_area = Math.max(max_area, h * (r - l - 1));\\n                }\\n            }\\n            stack.push(i);\\n        }\\n        while (!stack.isEmpty()) {\\n            int h = area[stack.pop()];\\n            int r = area.length;\\n            if(k < r)\\n            if(stack.isEmpty()) { \\n                max_area = Math.max(max_area,h * r);\\n            } else {\\n                int l = stack.peek();\\n                if(k > l)\\n                max_area = Math.max(max_area,h * (r - l - 1));\\n                }\\n            }\\n        return max_area;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        return Area(nums,k);   \\n    }\\n    private static int Area(int[] area,int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int max_area = 0;\\n        for (int i = 0; i < area.length; i++) {\\n            while (!stack.isEmpty() && area[i] < area[stack.peek()]) {\\n                int h = area[stack.pop()];\\n                int r = i;\\n                if(k < r)\\n                if (stack.isEmpty()) {\\n                    max_area = Math.max(max_area, h * r);\\n                } else {\\n                    int l = stack.peek();\\n                    if(k > l)\\n                    max_area = Math.max(max_area, h * (r - l - 1));\\n                }\\n            }\\n            stack.push(i);\\n        }\\n        while (!stack.isEmpty()) {\\n            int h = area[stack.pop()];\\n            int r = area.length;\\n            if(k < r)\\n            if(stack.isEmpty()) { \\n                max_area = Math.max(max_area,h * r);\\n            } else {\\n                int l = stack.peek();\\n                if(k > l)\\n                max_area = Math.max(max_area,h * (r - l - 1));\\n                }\\n            }\\n        return max_area;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2841880,
                "title": "two-pointer-stack-solution-python",
                "content": "**Two Pointer Approach\\nTime: O(n)\\nSpace: O(1)**\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    n = len(nums)\\n    i = j = k\\n    score =  c_min = nums[k]\\n\\n    while i >= 0 and j < n:\\n        if j < n-1 and (i==0 or nums[i-1] < nums[j+1]):\\n            j += 1\\n        else:\\n            i -= 1\\n        c_min = min(c_min, nums[i], nums[j])\\n        score = max(score, c_min*(j - i + 1))\\n\\n        if i == 0 and j == n-1: break\\n\\n    return score\\n```\\n**Stack Approach\\nTime: O(n)\\nSpace: O(n)**\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    n = len(nums)\\n    def nextSmaller(iterator, val):\\n        stack = []\\n        res = [val]*n\\n        for i in iterator:\\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n            if stack:\\n                res[i] = stack[-1]\\n            stack.append(i)\\n        return res\\n    \\n    smallerLeft = nextSmaller(range(n), -1)\\n    smallerRight = nextSmaller(reversed(range(n)), n)\\n    \\n    score = 0\\n    for i in range(n):\\n        if smallerLeft[i] < k < smallerRight[i]:\\n            score = max(score, nums[i]*(smallerRight[i] - smallerLeft[i] - 1))\\n    \\n    return score\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers",
                    "Stack"
                ],
                "code": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    n = len(nums)\\n    i = j = k\\n    score =  c_min = nums[k]\\n\\n    while i >= 0 and j < n:\\n        if j < n-1 and (i==0 or nums[i-1] < nums[j+1]):\\n            j += 1\\n        else:\\n            i -= 1\\n        c_min = min(c_min, nums[i], nums[j])\\n        score = max(score, c_min*(j - i + 1))\\n\\n        if i == 0 and j == n-1: break\\n\\n    return score\\n```\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n    n = len(nums)\\n    def nextSmaller(iterator, val):\\n        stack = []\\n        res = [val]*n\\n        for i in iterator:\\n            while stack and nums[stack[-1]] >= nums[i]:\\n                stack.pop()\\n            if stack:\\n                res[i] = stack[-1]\\n            stack.append(i)\\n        return res\\n    \\n    smallerLeft = nextSmaller(range(n), -1)\\n    smallerRight = nextSmaller(reversed(range(n)), n)\\n    \\n    score = 0\\n    for i in range(n):\\n        if smallerLeft[i] < k < smallerRight[i]:\\n            score = max(score, nums[i]*(smallerRight[i] - smallerLeft[i] - 1))\\n    \\n    return score\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2831301,
                "title": "python-the-same-solution-but-less-if-else",
                "content": "# Code\\n```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nums = [0] + nums + [0]\\n        i = j = k+1\\n        res, n = 0, nums[i]\\n\\n        while n:\\n            while n <= nums[i]: i -= 1\\n            while n <= nums[j]: j += 1\\n            res = max(res, n * (j-i-1))\\n            n = max(nums[i], nums[j])\\n        \\n        return res\\n\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        nums = [0] + nums + [0]\\n        i = j = k+1\\n        res, n = 0, nums[i]\\n\\n        while n:\\n            while n <= nums[i]: i -= 1\\n            while n <= nums[j]: j += 1\\n            res = max(res, n * (j-i-1))\\n            n = max(nums[i], nums[j])\\n        \\n        return res\\n\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2771935,
                "title": "monotonic-queue-with-memo",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int[] leftRange = new int[nums.length];\\n        Deque<Integer> mono = new LinkedList<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            int num = nums[i];\\n\\n            while (!mono.isEmpty() && nums[mono.peekLast()] >= num) {\\n                mono.pollLast();\\n            }\\n            leftRange[i] = mono.isEmpty() ? 0 : mono.peekLast() + 1;\\n            mono.offerLast(i);\\n        }\\n        mono = new LinkedList<>();\\n        int[] rightRange = new int[nums.length];\\n\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            int num = nums[i];\\n\\n            while (!mono.isEmpty() && nums[mono.peekLast()] >= num) {\\n                mono.pollLast();\\n            }\\n            rightRange[i] = mono.isEmpty() ? nums.length - 1 : mono.peekLast() - 1;\\n            mono.offerLast(i);\\n        }\\n        int ans = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            int leftIndex = leftRange[i];\\n            int rightIndex = rightRange[i];\\n\\n            if (leftIndex <= k && k <= rightIndex) {\\n                int length = rightIndex - leftIndex + 1;\\n                int num = nums[i];\\n                ans = Math.max(ans, length * num);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Dynamic Programming",
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int[] leftRange = new int[nums.length];\\n        Deque<Integer> mono = new LinkedList<>();\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            int num = nums[i];\\n\\n            while (!mono.isEmpty() && nums[mono.peekLast()] >= num) {\\n                mono.pollLast();\\n            }\\n            leftRange[i] = mono.isEmpty() ? 0 : mono.peekLast() + 1;\\n            mono.offerLast(i);\\n        }\\n        mono = new LinkedList<>();\\n        int[] rightRange = new int[nums.length];\\n\\n        for (int i = nums.length - 1; i >= 0; i--) {\\n            int num = nums[i];\\n\\n            while (!mono.isEmpty() && nums[mono.peekLast()] >= num) {\\n                mono.pollLast();\\n            }\\n            rightRange[i] = mono.isEmpty() ? nums.length - 1 : mono.peekLast() - 1;\\n            mono.offerLast(i);\\n        }\\n        int ans = 0;\\n\\n        for (int i = 0; i < nums.length; i++) {\\n            int leftIndex = leftRange[i];\\n            int rightIndex = rightRange[i];\\n\\n            if (leftIndex <= k && k <= rightIndex) {\\n                int length = rightIndex - leftIndex + 1;\\n                int num = nums[i];\\n                ans = Math.max(ans, length * num);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2753401,
                "title": "two-pointers-extending-the-good-array-clean-solution",
                "content": "We start from the middle element of `k` and expand by selecting bigger value, either left or right.\\n\\n```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximumScore = function(nums, k) {\\n    let i = k;\\n    let j = k;\\n    let score = nums[k]\\n    let maxScore = score;\\n    let smallest = nums[k]\\n    \\n    const extendLeft = () => {\\n        if(i>0) {\\n            smallest = Math.min(smallest, nums[--i])\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    const extendRight = () => {\\n        if(j < nums.length -1) {\\n            smallest = Math.min(smallest, nums[++j])\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    while(i > 0 || j < nums.length -1) {\\n        if(nums[i-1] >= nums[j+1]) {\\n            if(!extendLeft()) {\\n                extendRight()\\n            }\\n        } else {\\n            if(!extendRight()) {\\n                extendLeft()\\n            }\\n        }\\n        \\n        score = (j - i +1) * smallest;\\n        maxScore = Math.max(score, maxScore)\\n    }\\n    \\n    return maxScore;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} nums\\n * @param {number} k\\n * @return {number}\\n */\\nvar maximumScore = function(nums, k) {\\n    let i = k;\\n    let j = k;\\n    let score = nums[k]\\n    let maxScore = score;\\n    let smallest = nums[k]\\n    \\n    const extendLeft = () => {\\n        if(i>0) {\\n            smallest = Math.min(smallest, nums[--i])\\n            return true;\\n        }\\n        \\n        return false;\\n    }\\n    \\n    const extendRight = () => {\\n        if(j < nums.length -1) {\\n            smallest = Math.min(smallest, nums[++j])\\n            return true;\\n        }\\n        return false;\\n    }\\n    \\n    while(i > 0 || j < nums.length -1) {\\n        if(nums[i-1] >= nums[j+1]) {\\n            if(!extendLeft()) {\\n                extendRight()\\n            }\\n        } else {\\n            if(!extendRight()) {\\n                extendLeft()\\n            }\\n        }\\n        \\n        score = (j - i +1) * smallest;\\n        maxScore = Math.max(score, maxScore)\\n    }\\n    \\n    return maxScore;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2745015,
                "title": "c-code-for-beginners-explanation-of-why-histogram-code-reference-for-future-me",
                "content": "Histogram is nothing but finding out that height which can spread out to maximum subarray. Mathematically, height of tower*subarray size. so this height is atleast found in that subarray and hence we multiply it with that size. So, here it was simply asking you maximum histogram area where on bar is on the left side of k and the other is on the right side of k\\n\\nWe are not using >= and<= in the conditions, and here is the reason why  s.top() represent the ith index and j is obviously the jth index. The ith and jth index here do not constitute the answer, rather they serve as boundary of the subarray, the subarray j-s.top()-1 is the concerned subarray, where every element has atleast height arr[s.top()]. So, your actual subarray starts from s.top()+1 and ends at j-1. This is why we do not use <= because if the equal condition hits in lets say ith index case. the subarray starts from i+1 actually, then it will get greater than k since we put <= condition there. Similar the case with jth index if it has >= and lets say = condition hit, j-1 will become less than k and wrong answer will creep in\\n\\n\\n\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        stack<int> s;\\n        int j=0;\\n        int res=0;\\n        while(j<nums.size()){\\n            if(s.empty() || nums[s.top()]<=nums[j]){\\n                s.push(j++);\\n            }\\n            else{\\n                int top=s.top();\\n                s.pop();\\n                int temp=0;\\n                if(s.empty() && j>k){\\n                    temp=nums[top]*j;\\n                }\\n                else if(!s.empty() && j>k && s.top()<k){\\n                    temp=nums[top]*(j-s.top()-1);\\n                }\\n                res=max(res,temp);\\n            }\\n        }\\n        while(!s.empty()){\\n            int top=s.top();\\n            s.pop();\\n            int temp=0;\\n            if(s.empty() && j>k){\\n                temp=nums[top]*j;\\n            }\\n            else if(!s.empty() && j>k && s.top()<k){\\n                temp=nums[top]*(j-s.top()-1);\\n            }\\n            res=max(res,temp);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        stack<int> s;\\n        int j=0;\\n        int res=0;\\n        while(j<nums.size()){\\n            if(s.empty() || nums[s.top()]<=nums[j]){\\n                s.push(j++);\\n            }\\n            else{\\n                int top=s.top();\\n                s.pop();\\n                int temp=0;\\n                if(s.empty() && j>k){\\n                    temp=nums[top]*j;\\n                }\\n                else if(!s.empty() && j>k && s.top()<k){\\n                    temp=nums[top]*(j-s.top()-1);\\n                }\\n                res=max(res,temp);\\n            }\\n        }\\n        while(!s.empty()){\\n            int top=s.top();\\n            s.pop();\\n            int temp=0;\\n            if(s.empty() && j>k){\\n                temp=nums[top]*j;\\n            }\\n            else if(!s.empty() && j>k && s.top()<k){\\n                temp=nums[top]*(j-s.top()-1);\\n            }\\n            res=max(res,temp);\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2712555,
                "title": "python-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n\\t\\t\\t# We start with both left and right pointers at index k and\\n\\t\\t\\t# initial score as nums[k]\\n\\t\\t\\tres, minimum, left, right, sz = nums[k], nums[k], k, k, len(nums)\\n\\t\\t\\twhile left > 0 or right < sz - 1:\\n\\t\\t\\t\\t# If nums[left - 1] < nums[right + 1], we increment right to\\n\\t\\t\\t\\t# accomodate one more element in right subarray\\n\\t\\t\\t\\tif (nums[left - 1] if left else 0) < (nums[right + 1] if right < sz - 1 else 0):\\n\\t\\t\\t\\t\\tright += 1\\n\\t\\t\\t\\t# If nums[left - 1] >= nums[right + 1], we decrement left to\\n\\t\\t\\t\\t# accomodate one more element in left subarray\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tleft -= 1\\n\\t\\t\\t\\t# Update the minimum\\n\\t\\t\\t\\tminimum = min(minimum, nums[left], nums[right])\\n\\t\\t\\t\\t# Update the optimal score\\n\\t\\t\\t\\tres = max(res, minimum * (right - left + 1))\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "\\tclass Solution:\\n\\t\\tdef maximumScore(self, nums: List[int], k: int) -> int:\\n\\t\\t\\t# We start with both left and right pointers at index k and\\n\\t\\t\\t# initial score as nums[k]\\n\\t\\t\\tres, minimum, left, right, sz = nums[k], nums[k], k, k, len(nums)\\n\\t\\t\\twhile left > 0 or right < sz - 1:\\n\\t\\t\\t\\t# If nums[left - 1] < nums[right + 1], we increment right to\\n\\t\\t\\t\\t# accomodate one more element in right subarray\\n\\t\\t\\t\\tif (nums[left - 1] if left else 0) < (nums[right + 1] if right < sz - 1 else 0):\\n\\t\\t\\t\\t\\tright += 1\\n\\t\\t\\t\\t# If nums[left - 1] >= nums[right + 1], we decrement left to\\n\\t\\t\\t\\t# accomodate one more element in left subarray\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tleft -= 1\\n\\t\\t\\t\\t# Update the minimum\\n\\t\\t\\t\\tminimum = min(minimum, nums[left], nums[right])\\n\\t\\t\\t\\t# Update the optimal score\\n\\t\\t\\t\\tres = max(res, minimum * (right - left + 1))\\n\\t\\t\\treturn res",
                "codeTag": "Java"
            },
            {
                "id": 2709936,
                "title": "python-2-pointer-solution-faster-than-90",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        # We start with both left and right pointers at index k and\\n        # initial score as nums[k]\\n        res, minimum, left, right, sz = nums[k], nums[k], k, k, len(nums)\\n        while left > 0 or right < sz - 1:\\n            # If nums[left - 1] < nums[right + 1], we increment right to\\n            # accomodate one more element in right subarray\\n            if (nums[left - 1] if left else 0) < (nums[right + 1] if right < sz - 1 else 0):\\n                right += 1\\n            # If nums[left - 1] >= nums[right + 1], we decrement left to\\n            # accomodate one more element in left subarray\\n            else:\\n                left -= 1\\n            # Update the minimum\\n            minimum = min(minimum, nums[left], nums[right])\\n            # Update the optimal score\\n            res = max(res, minimum * (right - left + 1))\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        # We start with both left and right pointers at index k and\\n        # initial score as nums[k]\\n        res, minimum, left, right, sz = nums[k], nums[k], k, k, len(nums)\\n        while left > 0 or right < sz - 1:\\n            # If nums[left - 1] < nums[right + 1], we increment right to\\n            # accomodate one more element in right subarray\\n            if (nums[left - 1] if left else 0) < (nums[right + 1] if right < sz - 1 else 0):\\n                right += 1\\n            # If nums[left - 1] >= nums[right + 1], we decrement left to\\n            # accomodate one more element in left subarray\\n            else:\\n                left -= 1\\n            # Update the minimum\\n            minimum = min(minimum, nums[left], nums[right])\\n            # Update the optimal score\\n            res = max(res, minimum * (right - left + 1))\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2706153,
                "title": "c",
                "content": "(```)  class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) \\n    {\\n        int i = k, ans = 0;\\n        int j = k, n = nums.size();\\n        \\n        int mini = nums[k];\\n        \\n        if(n == 1)\\n        {\\n            return nums[0];\\n        }\\n        \\n        while(i >0 || j<n-1)\\n        {\\n            if(i == 0)\\n            {\\n                j++;\\n            }\\n            else if(j == n-1) \\n            {\\n                i--;\\n            }\\n            else if(nums[i-1] < nums[j+1])\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                i--;\\n            }\\n            \\n            mini = min({mini,nums[i],nums[j]});\\n            \\n            \\n            ans = max(ans,(j-i+1)* mini);  \\n                \\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) \\n    {\\n        int i = k, ans = 0;\\n        int j = k, n = nums.size();\\n        \\n        int mini = nums[k];\\n        \\n        if(n == 1)\\n        {\\n            return nums[0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2651132,
                "title": "java-monotonic-stack-solution",
                "content": "```\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int max = 0;\\n        for (int i = 0; i <= nums.length; i++) {\\n            int h = i == nums.length ? Integer.MIN_VALUE : nums[i];\\n            while (!stack.isEmpty() && nums[stack.peek()] > h) {\\n\\t\\t\\t// current min\\n                int pop = stack.pop();\\n                int left = stack.isEmpty() ? -1 : stack.peek();\\n\\t\\t\\t\\t// check if subarray is good\\n                if (k >= left + 1 && k <= i - 1) {\\n                    max = Math.max(max, nums[pop] * (i - left - 1));\\n                }\\n            }\\n            stack.push(i);\\n        }\\n        return max;\\n    }",
                "solutionTags": [
                    "Java",
                    "Monotonic Stack"
                ],
                "code": "```\\n    public int maximumScore(int[] nums, int k) {\\n        Stack<Integer> stack = new Stack<>();\\n        int max = 0;\\n        for (int i = 0; i <= nums.length; i++) {\\n            int h = i == nums.length ? Integer.MIN_VALUE : nums[i];\\n            while (!stack.isEmpty() && nums[stack.peek()] > h) {\\n\\t\\t\\t// current min\\n                int pop = stack.pop();\\n                int left = stack.isEmpty() ? -1 : stack.peek();\\n\\t\\t\\t\\t// check if subarray is good\\n                if (k >= left + 1 && k <= i - 1) {\\n                    max = Math.max(max, nums[pop] * (i - left - 1));\\n                }\\n            }\\n            stack.push(i);\\n        }\\n        return max;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2626643,
                "title": "easy-c-solution",
                "content": "We Will store the index of next smaller to the left(nsl) and next smaller to the right(nsr) and then we will check if k lies between the certain index and tan we will calculate the answer.\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> nextSmallerToRight(vector<int>& nums)\\n   {\\n       int n=nums.size();\\n       vector<int>v(n);\\n       stack<int>st;\\n       v[n-1]=n;\\n       st.push(n-1);\\n       for(int i=n-2;i>=0;i--)\\n       {\\n           while(!st.empty() and nums[i]<=nums[st.top()])\\n           {\\n               st.pop();\\n           }\\n           if(st.empty())\\n           {\\n               v[i]=n;\\n           }\\n           else v[i]=st.top();\\n           st.push(i);\\n       }\\n       return v;\\n   }\\n   \\n   vector<int> nextSmallerToLeft(vector<int>& nums)\\n   {\\n       int n=nums.size();\\n       vector<int>v(n);\\n       stack<int>st;\\n       v[0]=-1;\\n       st.push(0);\\n       for(int i=1;i<n;i++)\\n       {\\n           while(!st.empty() and nums[st.top()]>=nums[i])\\n           {\\n               st.pop();\\n           }\\n           if(st.empty())\\n           {\\n               v[i]=-1;\\n           }\\n           else v[i]=st.top();\\n           st.push(i);\\n       }\\n       return v;\\n   }\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int>nsl(n),nsr(n);\\n        nsl=nextSmallerToLeft(nums);\\n        nsr=nextSmallerToRight(nums);\\n        int ma=0,le,ri;\\n        for(int i=0;i<n;i++)\\n        {\\n            int val=(nsr[i]-nsl[i]-1);\\n            if(k<=nsr[i]-1 and k>=nsl[i]+1)\\n            {\\n                ma=max(ma,val*(nums[i]));\\n            }\\n        }\\n        return ma;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Monotonic Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> nextSmallerToRight(vector<int>& nums)\\n   {\\n       int n=nums.size();\\n       vector<int>v(n);\\n       stack<int>st;\\n       v[n-1]=n;\\n       st.push(n-1);\\n       for(int i=n-2;i>=0;i--)\\n       {\\n           while(!st.empty() and nums[i]<=nums[st.top()])\\n           {\\n               st.pop();\\n           }\\n           if(st.empty())\\n           {\\n               v[i]=n;\\n           }\\n           else v[i]=st.top();\\n           st.push(i);\\n       }\\n       return v;\\n   }\\n   \\n   vector<int> nextSmallerToLeft(vector<int>& nums)\\n   {\\n       int n=nums.size();\\n       vector<int>v(n);\\n       stack<int>st;\\n       v[0]=-1;\\n       st.push(0);\\n       for(int i=1;i<n;i++)\\n       {\\n           while(!st.empty() and nums[st.top()]>=nums[i])\\n           {\\n               st.pop();\\n           }\\n           if(st.empty())\\n           {\\n               v[i]=-1;\\n           }\\n           else v[i]=st.top();\\n           st.push(i);\\n       }\\n       return v;\\n   }\\n    int maximumScore(vector<int>& nums, int k) {\\n        int n=nums.size();\\n        vector<int>nsl(n),nsr(n);\\n        nsl=nextSmallerToLeft(nums);\\n        nsr=nextSmallerToRight(nums);\\n        int ma=0,le,ri;\\n        for(int i=0;i<n;i++)\\n        {\\n            int val=(nsr[i]-nsl[i]-1);\\n            if(k<=nsr[i]-1 and k>=nsl[i]+1)\\n            {\\n                ma=max(ma,val*(nums[i]));\\n            }\\n        }\\n        return ma;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2616111,
                "title": "simple-stack-dp-solution-c",
                "content": "let\\n\\nleft[i]    := the biggest j where nums[j] < nums[i] holds (-1 if no such j exists)\\nright[i]  := the smallest j where nums[i] > nums[j] holds(n if no such j exists)\\n\\nThis can be easily done if you use the technique of *Problem84. Largest Rectangle in Histogram.*\\n\\nThe answer is the maximum value of (right[i] - left[i] -1) * nums[i] for such i that satisfies two contraints below:  0 <= i < n, left[i] + 1 <= k <= right[i] - 1.\\n\\nTime Complexity : O(N)\\nSpace Complexity : O(N)\\n\\n```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        const int n = nums.size();\\n        vector<int> left(n, -1), right(n, n);\\n        {\\n            vector<int> stack;\\n            for (int i = 0; i < n; i++){\\n                while(!stack.empty() && nums[stack.back()] >= nums[i]){\\n                    stack.pop_back();    \\n                }\\n                if (!stack.empty()) left[i] = stack.back();\\n                stack.emplace_back(i);\\n            }\\n        }\\n        {\\n            vector<int> stack;\\n            for (int i = n - 1; i >= 0; i--){\\n                while(!stack.empty() && nums[stack.back()] >= nums[i]){\\n                    stack.pop_back();    \\n                }\\n                if (!stack.empty()) right[i] = stack.back();\\n                stack.emplace_back(i);\\n            }      \\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++){\\n            int l = left[i] + 1, r = right[i] - 1;\\n            if (l <= k && k <= r){\\n                ans = max(ans, (r - l + 1) * nums[i]);    \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Dynamic Programming",
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) {\\n        const int n = nums.size();\\n        vector<int> left(n, -1), right(n, n);\\n        {\\n            vector<int> stack;\\n            for (int i = 0; i < n; i++){\\n                while(!stack.empty() && nums[stack.back()] >= nums[i]){\\n                    stack.pop_back();    \\n                }\\n                if (!stack.empty()) left[i] = stack.back();\\n                stack.emplace_back(i);\\n            }\\n        }\\n        {\\n            vector<int> stack;\\n            for (int i = n - 1; i >= 0; i--){\\n                while(!stack.empty() && nums[stack.back()] >= nums[i]){\\n                    stack.pop_back();    \\n                }\\n                if (!stack.empty()) right[i] = stack.back();\\n                stack.emplace_back(i);\\n            }      \\n        }\\n\\n        int ans = 0;\\n        for (int i = 0; i < n; i++){\\n            int l = left[i] + 1, r = right[i] - 1;\\n            if (l <= k && k <= r){\\n                ans = max(ans, (r - l + 1) * nums[i]);    \\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2592656,
                "title": "using-monotonic-stack",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        next_lowest = [n for i in range(n)]\\n        prev_lowest = [-1 for i in range(n)]\\n        res = 0\\n        stack = []\\n        for i in range(n):\\n            while len(stack) > 0 and nums[i] < nums[stack[-1]]:\\n                curr = stack.pop()\\n                next_lowest[curr] = i\\n            if len(stack) > 0:\\n                prev_lowest[i] = stack[-1]\\n            stack.append(i)\\n        for i in range(n):\\n            if prev_lowest[i] < k < next_lowest[i]:\\n                currArea = (next_lowest[i] - prev_lowest[i] - 1) * nums[i]\\n                res = max(res, currArea)\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        n = len(nums)\\n        next_lowest = [n for i in range(n)]\\n        prev_lowest = [-1 for i in range(n)]\\n        res = 0\\n        stack = []\\n        for i in range(n):\\n            while len(stack) > 0 and nums[i] < nums[stack[-1]]:\\n                curr = stack.pop()\\n                next_lowest[curr] = i\\n            if len(stack) > 0:\\n                prev_lowest[i] = stack[-1]\\n            stack.append(i)\\n        for i in range(n):\\n            if prev_lowest[i] < k < next_lowest[i]:\\n                currArea = (next_lowest[i] - prev_lowest[i] - 1) * nums[i]\\n                res = max(res, currArea)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2545342,
                "title": "easy-c-solution-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n=v.size();\\n        int ans=v[k],mi=v[k];\\n        int i=k,j=k;\\n        while(!(i<=0 && j>=n-1))\\n        {\\n            int a=((i<=0)?INT_MIN:v[i-1]);\\n            int b=((j>=n-1)?INT_MIN:v[j+1]);\\n            if(a<b)\\n            {\\n                j++;\\n                mi=min(mi,b);\\n                ans=max(ans,mi*(j-i+1));\\n            }\\n            else \\n            {\\n                i--;\\n                mi=min(mi,a);\\n                ans=max(ans,mi*(j-i+1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Greedy"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& v, int k) {\\n        int n=v.size();\\n        int ans=v[k],mi=v[k];\\n        int i=k,j=k;\\n        while(!(i<=0 && j>=n-1))\\n        {\\n            int a=((i<=0)?INT_MIN:v[i-1]);\\n            int b=((j>=n-1)?INT_MIN:v[j+1]);\\n            if(a<b)\\n            {\\n                j++;\\n                mi=min(mi,b);\\n                ans=max(ans,mi*(j-i+1));\\n            }\\n            else \\n            {\\n                i--;\\n                mi=min(mi,a);\\n                ans=max(ans,mi*(j-i+1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2537010,
                "title": "c-two-pointers-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) \\n    {\\n        int n=nums.size(),i=k,j=k,mini=nums[k],res=nums[k];\\n        while(i>0||j<n-1)\\n        {\\n            if((i>0?nums[i-1]:0)<(j<n-1?nums[j+1]:0))\\n            {\\n                mini=min(mini,nums[++j]);\\n            }\\n            else\\n            {\\n                mini=min(mini,nums[--i]);\\n            }\\n            res=max(res,mini*(j-i+1));\\n        }\\n        return res;\\n        \\n    }\\n};\\n//if you like the solution plz upvote.",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "class Solution {\\npublic:\\n    int maximumScore(vector<int>& nums, int k) \\n    {\\n        int n=nums.size(),i=k,j=k,mini=nums[k],res=nums[k];\\n        while(i>0||j<n-1)\\n        {\\n            if((i>0?nums[i-1]:0)<(j<n-1?nums[j+1]:0))\\n            {\\n                mini=min(mini,nums[++j]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2532541,
                "title": "python-easy-solution-o-n-double-pointers",
                "content": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        n = len(nums)\\n        min_to_k = [max(nums)] * n\\n        \\n        curr = nums[k]\\n        for i in range(k, -1, -1):\\n            curr = min(curr, nums[i])\\n            min_to_k[i] = curr\\n        curr = nums[k]\\n        for i in range(k, n):\\n            curr = min(curr, nums[i])\\n            min_to_k[i] = curr\\n        \\n        left_memo = [0] * (k+1)\\n        right = n-1\\n        for i in range(k+1):\\n            while min_to_k[i] > min_to_k[right]:\\n                right -= 1\\n            left_memo[i] = right\\n        \\n        right_memo = [0] * (n-k)\\n        left = 0\\n        for i in range(n-1, k-1, -1):\\n            while min_to_k[i] > min_to_k[left]:\\n                left += 1\\n            right_memo[i-k] = left\\n        \\n        res = 0\\n        for i in range(k+1):\\n            res = max(res, min_to_k[i] * (left_memo[i]-i+1))\\n        for i in range(k, n):\\n            res = max(res, min_to_k[i] * (i-right_memo[i-k]+1))\\n            \\n        return res\\n                \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maximumScore(self, nums: List[int], k: int) -> int:\\n        \\n        n = len(nums)\\n        min_to_k = [max(nums)] * n\\n        \\n        curr = nums[k]\\n        for i in range(k, -1, -1):\\n            curr = min(curr, nums[i])\\n            min_to_k[i] = curr\\n        curr = nums[k]\\n        for i in range(k, n):\\n            curr = min(curr, nums[i])\\n            min_to_k[i] = curr\\n        \\n        left_memo = [0] * (k+1)\\n        right = n-1\\n        for i in range(k+1):\\n            while min_to_k[i] > min_to_k[right]:\\n                right -= 1\\n            left_memo[i] = right\\n        \\n        right_memo = [0] * (n-k)\\n        left = 0\\n        for i in range(n-1, k-1, -1):\\n            while min_to_k[i] > min_to_k[left]:\\n                left += 1\\n            right_memo[i-k] = left\\n        \\n        res = 0\\n        for i in range(k+1):\\n            res = max(res, min_to_k[i] * (left_memo[i]-i+1))\\n        for i in range(k, n):\\n            res = max(res, min_to_k[i] * (i-right_memo[i-k]+1))\\n            \\n        return res\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2528551,
                "title": "java-easy-solution-o-n-using-monotonic-stack",
                "content": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length;\\n        int[] left = new int[n];\\n        int[] right = new int[n];\\n        \\n        right[0] = n;\\n        Stack<Integer> st = new Stack<>();\\n        st.push(0);\\n        for(int i = 1; i < n; i++){\\n            while(st.size() > 0 && nums[i] < nums[st.peek()]){\\n                    right[st.pop()] = i;\\n            }\\n           st.push(i);\\n        }\\n        \\n        while(st.size() > 0){\\n            right[st.pop()] = n;\\n        }\\n        \\n        left[n - 1] = -1;\\n        st.clear();\\n        st.push(n - 1);\\n        for(int i = n - 2; i >= 0; i--){\\n            while(st.size() > 0 && nums[i] < nums[st.peek()]){\\n                    left[st.pop()] = i;\\n            }\\n           st.push(i);\\n        }\\n        \\n        while(st.size() > 0){\\n            left[st.pop()] = -1;\\n        }\\n        int max = Integer.MIN_VALUE;\\n        for(int i = 0; i < n; i++){\\n            int maxL = left[i] + 1;\\n            int maxR = right[i] - 1;\\n            if(maxL <= k && maxR >= k){\\n                int len = Math.abs(maxR - maxL) + 1;\\n                max = Math.max(max, len*nums[i]);\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maximumScore(int[] nums, int k) {\\n        int n = nums.length;\\n        int[] left = new int[n];\\n        int[] right = new int[n];\\n        \\n        right[0] = n;\\n        Stack<Integer> st = new Stack<>();\\n        st.push(0);\\n        for(int i = 1; i < n; i++){\\n            while(st.size() > 0 && nums[i] < nums[st.peek()]){\\n                    right[st.pop()] = i;\\n            }\\n           st.push(i);\\n        }\\n        \\n        while(st.size() > 0){\\n            right[st.pop()] = n;\\n        }\\n        \\n        left[n - 1] = -1;\\n        st.clear();\\n        st.push(n - 1);\\n        for(int i = n - 2; i >= 0; i--){\\n            while(st.size() > 0 && nums[i] < nums[st.peek()]){\\n                    left[st.pop()] = i;\\n            }\\n           st.push(i);\\n        }\\n        \\n        while(st.size() > 0){\\n            left[st.pop()] = -1;\\n        }\\n        int max = Integer.MIN_VALUE;\\n        for(int i = 0; i < n; i++){\\n            int maxL = left[i] + 1;\\n            int maxR = right[i] - 1;\\n            if(maxL <= k && maxR >= k){\\n                int len = Math.abs(maxR - maxL) + 1;\\n                max = Math.max(max, len*nums[i]);\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2506871,
                "title": "o-n-easy-python-solution",
                "content": "1. Make 2 arrays to know the max length for which the curr element stays the minimum.\\n2. For this, use monotonic stack.\\n3. Pop the element if its greater than or equal to the current element. Else, use the index of top most element(if any).\\n4. Now for every index i, you have the length for which is the minimum(left[i] + right[i] - 1).\\n5. Now maximize your ans, checking for the condition i.e., left extreme must be less than k, and right one greater than k.\\n```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n\\tn = len(nums)\\n\\tleft, right = [1 for _ in range(n)], [1 for _ in range(n)]\\n\\tstack = []\\n\\tfor i in range(n):\\n\\t\\tele = nums[i]\\n\\t\\twhile(stack and stack[-1][0] >= ele):\\n\\t\\t\\tstack.pop()\\n\\t\\tleft[i] = i-(stack[-1][1] if(stack) else -1)\\n\\t\\tstack.append([ele, i])\\n\\tstack = []\\n\\tfor i in range(n-1, -1, -1):\\n\\t\\tele = nums[i]\\n\\t\\twhile(stack and stack[-1][0] >= ele):\\n\\t\\t\\tstack.pop()\\n\\t\\tif(stack):\\n\\t\\t\\tright[i] = stack[-1][1] - i\\n\\t\\telse:\\n\\t\\t\\tright[i] = n-i\\n\\t\\tstack.append([ele, i])\\n\\tans = 0\\n\\t# print(left, right)\\n\\tfor i in range(n):\\n\\t\\tif(i-left[i] < k and i + right[i] > k):\\n\\t\\t\\tans = max(ans, nums[i] * (left[i]+right[i]-1))\\n\\treturn ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Monotonic Stack"
                ],
                "code": "```\\ndef maximumScore(self, nums: List[int], k: int) -> int:\\n\\tn = len(nums)\\n\\tleft, right = [1 for _ in range(n)], [1 for _ in range(n)]\\n\\tstack = []\\n\\tfor i in range(n):\\n\\t\\tele = nums[i]\\n\\t\\twhile(stack and stack[-1][0] >= ele):\\n\\t\\t\\tstack.pop()\\n\\t\\tleft[i] = i-(stack[-1][1] if(stack) else -1)\\n\\t\\tstack.append([ele, i])\\n\\tstack = []\\n\\tfor i in range(n-1, -1, -1):\\n\\t\\tele = nums[i]\\n\\t\\twhile(stack and stack[-1][0] >= ele):\\n\\t\\t\\tstack.pop()\\n\\t\\tif(stack):\\n\\t\\t\\tright[i] = stack[-1][1] - i\\n\\t\\telse:\\n\\t\\t\\tright[i] = n-i\\n\\t\\tstack.append([ele, i])\\n\\tans = 0\\n\\t# print(left, right)\\n\\tfor i in range(n):\\n\\t\\tif(i-left[i] < k and i + right[i] > k):\\n\\t\\t\\tans = max(ans, nums[i] * (left[i]+right[i]-1))\\n\\treturn ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2502683,
                "title": "c-fastest-solution-usin-stack",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& heights, int k) {\\n           int n=heights.size();\\n        vector<int>right(n,n);\\n        vector<int>left(n,-1);\\n        stack<int>s;\\n        for(int i=n-1;i>=0;i--){\\n            while(!s.empty() and heights[s.top()]>=heights[i]){\\n                s.pop();\\n            }\\n            if(!s.empty()){\\n                right[i]=s.top();\\n            }\\n            s.push(i);\\n        }\\n        while(!s.empty()){\\n            s.pop();\\n        }\\n          for(int i=0;i<n;i++){\\n            while(!s.empty() and heights[s.top()]>=heights[i]){\\n                s.pop();\\n            }\\n            if(!s.empty()){\\n                left[i]=s.top();\\n            }\\n            s.push(i);\\n        }\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            int x=heights[i];\\n            if(left[i]<k and right[i]>k){\\n            int y=right[i]-left[i]-1;\\n            ans=max(ans,x*y);\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "Stack"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& heights, int k) {\\n           int n=heights.size();\\n        vector<int>right(n,n);\\n        vector<int>left(n,-1);\\n        stack<int>s;\\n        for(int i=n-1;i>=0;i--){\\n            while(!s.empty() and heights[s.top()]>=heights[i]){\\n                s.pop();\\n            }\\n            if(!s.empty()){\\n                right[i]=s.top();\\n            }\\n            s.push(i);\\n        }\\n        while(!s.empty()){\\n            s.pop();\\n        }\\n          for(int i=0;i<n;i++){\\n            while(!s.empty() and heights[s.top()]>=heights[i]){\\n                s.pop();\\n            }\\n            if(!s.empty()){\\n                left[i]=s.top();\\n            }\\n            s.push(i);\\n        }\\n        int ans=0;\\n        for(int i=0;i<n;i++){\\n            int x=heights[i];\\n            if(left[i]<k and right[i]>k){\\n            int y=right[i]-left[i]-1;\\n            ans=max(ans,x*y);\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2496323,
                "title": "c-best-solution-easiest",
                "content": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& heights, int k) {\\n        stack<int> st;\\n        st.push(-1);\\n        int ans=0;\\n        int n = heights.size();\\n        \\n        for(int i=0;i<=n;i++){\\n                while(st.top()!=-1 && (i==n || heights[st.top()]>=heights[i])){\\n                    int t = st.top();\\n                    st.pop();\\n                    int area = (heights[t])*((st.size()==0)?(i):(i-st.top()-1));\\n                    if(st.top()<k && i>k)\\n                    ans = max(ans,area);\\n                }\\n                 st.push(i);\\n            }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maximumScore(vector<int>& heights, int k) {\\n        stack<int> st;\\n        st.push(-1);\\n        int ans=0;\\n        int n = heights.size();\\n        \\n        for(int i=0;i<=n;i++){\\n                while(st.top()!=-1 && (i==n || heights[st.top()]>=heights[i])){\\n                    int t = st.top();\\n                    st.pop();\\n                    int area = (heights[t])*((st.size()==0)?(i):(i-st.top()-1));\\n                    if(st.top()<k && i>k)\\n                    ans = max(ans,area);\\n                }\\n                 st.push(i);\\n            }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1789666,
                "content": [
                    {
                        "username": "Finesse",
                        "content": "The hints are overcomplicated. The problem is easy to solve with 2 pointers and a greedy approach. My simple hints:\\n\\n1. Start from the subarray that includes only the `k` element. Expand left and right using 2 pointers.\\n2. The farther the pointers are, the better for the score. But the minimum value can \\xABharm\\xBB the score significantly, so it needs to be maximized.\\n3. Finding the minimum number of the subarray takes `O(1)` if you move 1 pointer 1 index at a time.\\n4. When you choose which pointer to move, choose the one that will \\xABharm\\xBB the minimum value less."
                    },
                    {
                        "username": "Vishakha_17",
                        "content": "** wat is this explanation called??"
                    },
                    {
                        "username": "descartes131",
                        "content": "The solution of this problem includes greedy properties. You might solve this problem without proof like me, so I wrote the proof of greedy property.\\n\\nBefore this, summary of solution is that using two pointer(it would be lo and hi) starts from k, and then move the pointer to bigger side(e.x. if nums[lo-1] < nums[hi+1], make lo = lo-1, if not, hi = hi + 1). While doing this, update max value of the target of problem.\\n\\n**Time Complexity O(N) - moving pointer only occurs n times at most**\\n\\n**Space Compexity O(1) - using only two pointers**\\n\\nThe structure of proof is induction. Assumption is that nums[lo...hi] is N length and the min value of nums[lo..hi] is maximum among other n length subarray of nums starting from k.\\n\\n## Base Case\\nk == lo && k == hi, nums[k] is length 1 subarray and it has only one elements. It\\'s obvious.\\n\\n## N Case\\n\\nIt\\'s assumed.\\n\\n## N+1 Case\\n\\ncompares nums[lo-1] and nums[hi+1], and let\\'s call min[lo..hi] is the min value of nums[lo..hi].(nums[lo..hi] is { nums[lo], nums[lo+1], .. , nums[hi-1], nums[hi] })\\n\\n1. min[lo..hi] \\u2264 nums[lo-1] and  min[lo..hi] \\u2264 nums[hi+1], extension to any side is ok.\\n2. if min[lo..hi] \\u2264 nums[lo-1] and nums[hi+1] < min[lo..hi], if it extends to hi, it\\'s minimum would be lower than before, so it should extend to lo.\\n3. if nums[lo-1] < min[lo..hi] and min[lo..hi] \\u2264 nums[hi+1], same to (2)\\n4. nums[lo-1] < min[lo..hi] and nums[hi+1] < min[lo..hi], it should extends to bigger side. if not the minimum would be lower than other side extension.\\n\\nIf it follows solutions way, it satisfiies (1) ~ (4), extended N+1 also length N+1 subarray(nums[lo-1..hi] or nums[lo..hi+1] which has maximum min value."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "Time in coding Greedy 2 mins\nTime in Proving why it'll work 30+mins"
                    }
                ]
            },
            {
                "id": 1570365,
                "content": [
                    {
                        "username": "Finesse",
                        "content": "The hints are overcomplicated. The problem is easy to solve with 2 pointers and a greedy approach. My simple hints:\\n\\n1. Start from the subarray that includes only the `k` element. Expand left and right using 2 pointers.\\n2. The farther the pointers are, the better for the score. But the minimum value can \\xABharm\\xBB the score significantly, so it needs to be maximized.\\n3. Finding the minimum number of the subarray takes `O(1)` if you move 1 pointer 1 index at a time.\\n4. When you choose which pointer to move, choose the one that will \\xABharm\\xBB the minimum value less."
                    },
                    {
                        "username": "Vishakha_17",
                        "content": "** wat is this explanation called??"
                    },
                    {
                        "username": "descartes131",
                        "content": "The solution of this problem includes greedy properties. You might solve this problem without proof like me, so I wrote the proof of greedy property.\\n\\nBefore this, summary of solution is that using two pointer(it would be lo and hi) starts from k, and then move the pointer to bigger side(e.x. if nums[lo-1] < nums[hi+1], make lo = lo-1, if not, hi = hi + 1). While doing this, update max value of the target of problem.\\n\\n**Time Complexity O(N) - moving pointer only occurs n times at most**\\n\\n**Space Compexity O(1) - using only two pointers**\\n\\nThe structure of proof is induction. Assumption is that nums[lo...hi] is N length and the min value of nums[lo..hi] is maximum among other n length subarray of nums starting from k.\\n\\n## Base Case\\nk == lo && k == hi, nums[k] is length 1 subarray and it has only one elements. It\\'s obvious.\\n\\n## N Case\\n\\nIt\\'s assumed.\\n\\n## N+1 Case\\n\\ncompares nums[lo-1] and nums[hi+1], and let\\'s call min[lo..hi] is the min value of nums[lo..hi].(nums[lo..hi] is { nums[lo], nums[lo+1], .. , nums[hi-1], nums[hi] })\\n\\n1. min[lo..hi] \\u2264 nums[lo-1] and  min[lo..hi] \\u2264 nums[hi+1], extension to any side is ok.\\n2. if min[lo..hi] \\u2264 nums[lo-1] and nums[hi+1] < min[lo..hi], if it extends to hi, it\\'s minimum would be lower than before, so it should extend to lo.\\n3. if nums[lo-1] < min[lo..hi] and min[lo..hi] \\u2264 nums[hi+1], same to (2)\\n4. nums[lo-1] < min[lo..hi] and nums[hi+1] < min[lo..hi], it should extends to bigger side. if not the minimum would be lower than other side extension.\\n\\nIf it follows solutions way, it satisfiies (1) ~ (4), extended N+1 also length N+1 subarray(nums[lo-1..hi] or nums[lo..hi+1] which has maximum min value."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "Time in coding Greedy 2 mins\nTime in Proving why it'll work 30+mins"
                    }
                ]
            },
            {
                "id": 1575025,
                "content": [
                    {
                        "username": "Finesse",
                        "content": "The hints are overcomplicated. The problem is easy to solve with 2 pointers and a greedy approach. My simple hints:\\n\\n1. Start from the subarray that includes only the `k` element. Expand left and right using 2 pointers.\\n2. The farther the pointers are, the better for the score. But the minimum value can \\xABharm\\xBB the score significantly, so it needs to be maximized.\\n3. Finding the minimum number of the subarray takes `O(1)` if you move 1 pointer 1 index at a time.\\n4. When you choose which pointer to move, choose the one that will \\xABharm\\xBB the minimum value less."
                    },
                    {
                        "username": "Vishakha_17",
                        "content": "** wat is this explanation called??"
                    },
                    {
                        "username": "descartes131",
                        "content": "The solution of this problem includes greedy properties. You might solve this problem without proof like me, so I wrote the proof of greedy property.\\n\\nBefore this, summary of solution is that using two pointer(it would be lo and hi) starts from k, and then move the pointer to bigger side(e.x. if nums[lo-1] < nums[hi+1], make lo = lo-1, if not, hi = hi + 1). While doing this, update max value of the target of problem.\\n\\n**Time Complexity O(N) - moving pointer only occurs n times at most**\\n\\n**Space Compexity O(1) - using only two pointers**\\n\\nThe structure of proof is induction. Assumption is that nums[lo...hi] is N length and the min value of nums[lo..hi] is maximum among other n length subarray of nums starting from k.\\n\\n## Base Case\\nk == lo && k == hi, nums[k] is length 1 subarray and it has only one elements. It\\'s obvious.\\n\\n## N Case\\n\\nIt\\'s assumed.\\n\\n## N+1 Case\\n\\ncompares nums[lo-1] and nums[hi+1], and let\\'s call min[lo..hi] is the min value of nums[lo..hi].(nums[lo..hi] is { nums[lo], nums[lo+1], .. , nums[hi-1], nums[hi] })\\n\\n1. min[lo..hi] \\u2264 nums[lo-1] and  min[lo..hi] \\u2264 nums[hi+1], extension to any side is ok.\\n2. if min[lo..hi] \\u2264 nums[lo-1] and nums[hi+1] < min[lo..hi], if it extends to hi, it\\'s minimum would be lower than before, so it should extend to lo.\\n3. if nums[lo-1] < min[lo..hi] and min[lo..hi] \\u2264 nums[hi+1], same to (2)\\n4. nums[lo-1] < min[lo..hi] and nums[hi+1] < min[lo..hi], it should extends to bigger side. if not the minimum would be lower than other side extension.\\n\\nIf it follows solutions way, it satisfiies (1) ~ (4), extended N+1 also length N+1 subarray(nums[lo-1..hi] or nums[lo..hi+1] which has maximum min value."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "Time in coding Greedy 2 mins\nTime in Proving why it'll work 30+mins"
                    }
                ]
            },
            {
                "id": 2038629,
                "content": [
                    {
                        "username": "Finesse",
                        "content": "The hints are overcomplicated. The problem is easy to solve with 2 pointers and a greedy approach. My simple hints:\\n\\n1. Start from the subarray that includes only the `k` element. Expand left and right using 2 pointers.\\n2. The farther the pointers are, the better for the score. But the minimum value can \\xABharm\\xBB the score significantly, so it needs to be maximized.\\n3. Finding the minimum number of the subarray takes `O(1)` if you move 1 pointer 1 index at a time.\\n4. When you choose which pointer to move, choose the one that will \\xABharm\\xBB the minimum value less."
                    },
                    {
                        "username": "Vishakha_17",
                        "content": "** wat is this explanation called??"
                    },
                    {
                        "username": "descartes131",
                        "content": "The solution of this problem includes greedy properties. You might solve this problem without proof like me, so I wrote the proof of greedy property.\\n\\nBefore this, summary of solution is that using two pointer(it would be lo and hi) starts from k, and then move the pointer to bigger side(e.x. if nums[lo-1] < nums[hi+1], make lo = lo-1, if not, hi = hi + 1). While doing this, update max value of the target of problem.\\n\\n**Time Complexity O(N) - moving pointer only occurs n times at most**\\n\\n**Space Compexity O(1) - using only two pointers**\\n\\nThe structure of proof is induction. Assumption is that nums[lo...hi] is N length and the min value of nums[lo..hi] is maximum among other n length subarray of nums starting from k.\\n\\n## Base Case\\nk == lo && k == hi, nums[k] is length 1 subarray and it has only one elements. It\\'s obvious.\\n\\n## N Case\\n\\nIt\\'s assumed.\\n\\n## N+1 Case\\n\\ncompares nums[lo-1] and nums[hi+1], and let\\'s call min[lo..hi] is the min value of nums[lo..hi].(nums[lo..hi] is { nums[lo], nums[lo+1], .. , nums[hi-1], nums[hi] })\\n\\n1. min[lo..hi] \\u2264 nums[lo-1] and  min[lo..hi] \\u2264 nums[hi+1], extension to any side is ok.\\n2. if min[lo..hi] \\u2264 nums[lo-1] and nums[hi+1] < min[lo..hi], if it extends to hi, it\\'s minimum would be lower than before, so it should extend to lo.\\n3. if nums[lo-1] < min[lo..hi] and min[lo..hi] \\u2264 nums[hi+1], same to (2)\\n4. nums[lo-1] < min[lo..hi] and nums[hi+1] < min[lo..hi], it should extends to bigger side. if not the minimum would be lower than other side extension.\\n\\nIf it follows solutions way, it satisfiies (1) ~ (4), extended N+1 also length N+1 subarray(nums[lo-1..hi] or nums[lo..hi+1] which has maximum min value."
                    },
                    {
                        "username": "LC_Binod",
                        "content": "Time in coding Greedy 2 mins\nTime in Proving why it'll work 30+mins"
                    }
                ]
            }
        ]
    },
    {
        "title": "Count Pairs of Equal Substrings With Minimum Difference",
        "question_content": null,
        "solutions": [],
        "discussions": [
            {
                "id": 1567043,
                "content": [
                    {
                        "username": "sfx77",
                        "content": "and, at the least, need more examples so at least we can deduce what they mean"
                    }
                ]
            }
        ]
    },
    {
        "title": "Rearrange Products Table",
        "question_content": "<p>Table: <code>Products</code></p>\n\n<pre>\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| product_id  | int     |\n| store1      | int     |\n| store2      | int     |\n| store3      | int     |\n+-------------+---------+\nproduct_id is the primary key (column with unique values) for this table.\nEach row in this table indicates the product&#39;s price in 3 different stores: store1, store2, and store3.\nIf the product is not available in a store, the price will be null in that store&#39;s column.\n</pre>\n\n<p>&nbsp;</p>\n\n<p>Write a solution to rearrange the <code>Products</code> table so that each row has <code>(product_id, store, price)</code>. If a product is not available in a store, do <strong>not</strong> include a row with that <code>product_id</code> and <code>store</code> combination in the result table.</p>\n\n<p>Return the result table in <strong>any order</strong>.</p>\n\n<p>The result format is in the following example.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> \nProducts table:\n+------------+--------+--------+--------+\n| product_id | store1 | store2 | store3 |\n+------------+--------+--------+--------+\n| 0          | 95     | 100    | 105    |\n| 1          | 70     | null   | 80     |\n+------------+--------+--------+--------+\n<strong>Output:</strong> \n+------------+--------+-------+\n| product_id | store  | price |\n+------------+--------+-------+\n| 0          | store1 | 95    |\n| 0          | store2 | 100   |\n| 0          | store3 | 105   |\n| 1          | store1 | 70    |\n| 1          | store3 | 80    |\n+------------+--------+-------+\n<strong>Explanation:</strong> \nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2.\n</pre>\n",
        "solutions": [
            {
                "id": 2521016,
                "title": "mysql-beginner-level-easy-to-understand-simple-short-solution",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions. HAPPY CODING:)\\nAny suggestions and improvements are always welcome.***\\n*====================================================================*\\n\\u2705 **MySQL Code :**\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```\\n**Runtime:**  495ms\\n**Memory Usage:**  0B\\n________________________________\\n__________________________________\\n\\nIf you like the solution, please upvote \\uD83D\\uDD3C\\nFor any questions, or discussions, comment below. \\uD83D\\uDC47\\uFE0F",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118884,
                "title": "2-simple-solutions-reverse-pivot-and-union",
                "content": "Reverse PIVOT\\n\\n```\\nSELECT product_id,store,price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS T\\n```\\n\\nUNION\\n\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\nORDER BY 1,2 ASC\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id,store,price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS T\\n```\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\nORDER BY 1,2 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3849226,
                "title": "pandas-vs-sql-elegant-short-all-30-days-of-pandas-solutions",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```Python []\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    return pd.melt(\\n        products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\'\\n    ).dropna()\\n```\\n```SQL []\\nSELECT product_id,\\n       \\'store1\\' AS store,\\n       store1 AS price\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n\\n UNION\\n\\n SELECT product_id,\\n       \\'store2\\' AS store,\\n       store2 AS price\\n  FROM Products\\n WHERE store2 IS NOT NULL\\n\\n UNION\\n\\n SELECT product_id,\\n       \\'store3\\' AS store,\\n       store3 AS price\\n  FROM Products\\n WHERE store3 IS NOT NULL\\n\\n ORDER BY product_id, store;\\n```\\n\\n# Important!\\n###### If you like the solution or find it useful, feel free to **upvote** for it, it will support me in creating high quality solutions)\\n\\n# 30 Days of Pandas solutions\\n\\n### Data Filtering \\u2705\\n- [Big Countries](https://leetcode.com/problems/big-countries/solutions/3848474/pandas-elegant-short-1-line/)\\n- [Recyclable and Low Fat Products](https://leetcode.com/problems/recyclable-and-low-fat-products/solutions/3848500/pandas-elegant-short-1-line/)\\n- [Customers Who Never Order](https://leetcode.com/problems/customers-who-never-order/solutions/3848527/pandas-elegant-short-1-line/)\\n- [Article Views I](https://leetcode.com/problems/article-views-i/solutions/3867192/pandas-elegant-short-1-line/)\\n\\n\\n### String Methods \\u2705\\n- [Invalid Tweets](https://leetcode.com/problems/invalid-tweets/solutions/3849121/pandas-elegant-short-1-line/)\\n- [Calculate Special Bonus](https://leetcode.com/problems/calculate-special-bonus/solutions/3867209/pandas-elegant-short-1-line/)\\n- [Fix Names in a Table](https://leetcode.com/problems/fix-names-in-a-table/solutions/3849167/pandas-elegant-short-1-line/)\\n- [Find Users With Valid E-Mails](https://leetcode.com/problems/find-users-with-valid-e-mails/solutions/3849177/pandas-elegant-short-1-line/)\\n- [Patients With a Condition](https://leetcode.com/problems/patients-with-a-condition/solutions/3849196/pandas-elegant-short-1-line-regex/)\\n\\n\\n### Data Manipulation \\u2705\\n- [Nth Highest Salary](https://leetcode.com/problems/nth-highest-salary/solutions/3867257/pandas-elegant-short-1-line/)\\n- [Second Highest Salary](https://leetcode.com/problems/second-highest-salary/solutions/3867278/pandas-elegant-short/)\\n- [Department Highest Salary](https://leetcode.com/problems/department-highest-salary/solutions/3867312/pandas-elegant-short-1-line/)\\n- [Rank Scores](https://leetcode.com/problems/rank-scores/solutions/3872817/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Delete Duplicate Emails](https://leetcode.com/problems/delete-duplicate-emails/solutions/3849211/pandas-elegant-short/)\\n- [Rearrange Products Table](https://leetcode.com/problems/rearrange-products-table/solutions/3849226/pandas-elegant-short-1-line/)\\n\\n\\n### Statistics \\u2705\\n- [The Number of Rich Customers](https://leetcode.com/problems/the-number-of-rich-customers/solutions/3849251/pandas-elegant-short-1-line/)\\n- [Immediate Food Delivery I](https://leetcode.com/problems/immediate-food-delivery-i/solutions/3872719/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Count Salary Categories](https://leetcode.com/problems/count-salary-categories/solutions/3872801/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Find Total Time Spent by Each Employee](https://leetcode.com/problems/find-total-time-spent-by-each-employee/solutions/3872715/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Game Play Analysis I](https://leetcode.com/problems/game-play-analysis-i/solutions/3863223/pandas-elegant-short-1-line/)\\n- [Number of Unique Subjects Taught by Each Teacher](https://leetcode.com/problems/number-of-unique-subjects-taught-by-each-teacher/solutions/3863239/pandas-elegant-short-1-line/)\\n- [Classes More Than 5 Students](https://leetcode.com/problems/classes-more-than-5-students/solutions/3863249/pandas-elegant-short/)\\n- [Customer Placing the Largest Number of Orders](https://leetcode.com/problems/customer-placing-the-largest-number-of-orders/solutions/3863257/pandas-elegant-short-1-line/)\\n- [Group Sold Products By The Date](https://leetcode.com/problems/group-sold-products-by-the-date/solutions/3863267/pandas-elegant-short-1-line/)\\n- [Daily Leads and Partners](https://leetcode.com/problems/daily-leads-and-partners/solutions/3863279/pandas-elegant-short-1-line/)\\n\\n\\n### Data Aggregation \\u2705\\n- [Actors and Directors Who Cooperated At Least Three Times](https://leetcode.com/problems/actors-and-directors-who-cooperated-at-least-three-times/solutions/3863309/pandas-elegant-short/)\\n- [Replace Employee ID With The Unique Identifier](https://leetcode.com/problems/replace-employee-id-with-the-unique-identifier/solutions/3872822/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Students and Examinations](https://leetcode.com/problems/students-and-examinations/solutions/3872699/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n- [Managers with at Least 5 Direct Reports](https://leetcode.com/problems/managers-with-at-least-5-direct-reports/solutions/3872861/pandas-elegant-short/)\\n- [Sales Person](https://leetcode.com/problems/sales-person/solutions/3872712/pandas-elegant-short-1-line-all-30-days-of-pandas-solutions/)\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "MySQL",
                    "Pandas"
                ],
                "code": "```Python []\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    return pd.melt(\\n        products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\'\\n    ).dropna()\\n```\n```SQL []\\nSELECT product_id,\\n       \\'store1\\' AS store,\\n       store1 AS price\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n\\n UNION\\n\\n SELECT product_id,\\n       \\'store2\\' AS store,\\n       store2 AS price\\n  FROM Products\\n WHERE store2 IS NOT NULL\\n\\n UNION\\n\\n SELECT product_id,\\n       \\'store3\\' AS store,\\n       store3 AS price\\n  FROM Products\\n WHERE store3 IS NOT NULL\\n\\n ORDER BY product_id, store;\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2326207,
                "title": "question-what-if-store-types-are-far-more-than-3-e-g-30",
                "content": "The union way can only be used when there are limited stores that can be listed one by one. Then comes a question: if there are too many different \\'stores\\' to be listed, how could we deal with this problem?\\nThanks a lot!",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1119436,
                "title": "simple-union",
                "content": "```\\nselect product_id,\\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from products where store3 is not null\\n```\\n",
                "solutionTags": [],
                "code": "```\\nselect product_id,\\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1125958,
                "title": "mysql-union-all-mssql-unpivot-oracle-unpivot",
                "content": "MySQL solution using UNION ALL\\n```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n    \\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```\\n\\nMSSQL solution using UNPIVOT\\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS tmp\\n```\\n\\nOracle solution using UNPIVOT \\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT EXCLUDE NULLS\\n(\\n\\tprice\\n\\tFOR store in (store1 AS \\'store1\\',store2 AS \\'store2\\',store3 AS \\'store3\\')\\n);\\n```",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n    \\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS tmp\\n```\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT EXCLUDE NULLS\\n(\\n\\tprice\\n\\tFOR store in (store1 AS \\'store1\\',store2 AS \\'store2\\',store3 AS \\'store3\\')\\n);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3863397,
                "title": "pandas-simple-easy-to-understand",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.  Create an empty list to store the rearranged rows\\n2. Iterate over each row in the original products DataFrame.\\n3. For each row, extract the product_id value.\\n\\n4. Check each store column (store1, store2, and store3) for price availability.\\n\\n5. Get the price value from the current store column.\\n\\n6. Check if the price is not null (i.e., the product is available in that store).\\n\\n7. If the price is not null, add a new row to the list with the values (product_id, store, price).\\n\\n8. After processing all rows, create a new DataFrame using the list of rearranged rows.\\n\\n9. The new DataFrame will have three columns: product_id, store, and price.\\n\\n10. Return the newly created DataFrame containing the rearranged table structure.\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # Create an empty list to store the rearranged rows\\n    rearranged_rows = []\\n\\n    # Iterate over each row in the original table\\n    for _, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n\\n        # Check each store for price availability\\n        for store_col in [\\'store1\\', \\'store2\\', \\'store3\\']:\\n            price = row[store_col]\\n            if pd.notna(price):\\n                # If the price is not null, add the (product_id, store, price) tuple to the list\\n                rearranged_rows.append((product_id, store_col, price))\\n\\n    # Create a new DataFrame with the rearranged rows\\n    result_table = pd.DataFrame(rearranged_rows, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n\\n    return result_table\\n```\\n![upvote img.jpg](https://assets.leetcode.com/users/images/7625000a-89a9-4418-bfff-05b1726a78ca_1691162555.623444.jpeg)\\n",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # Create an empty list to store the rearranged rows\\n    rearranged_rows = []\\n\\n    # Iterate over each row in the original table\\n    for _, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n\\n        # Check each store for price availability\\n        for store_col in [\\'store1\\', \\'store2\\', \\'store3\\']:\\n            price = row[store_col]\\n            if pd.notna(price):\\n                # If the price is not null, add the (product_id, store, price) tuple to the list\\n                rearranged_rows.append((product_id, store_col, price))\\n\\n    # Create a new DataFrame with the rearranged rows\\n    result_table = pd.DataFrame(rearranged_rows, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n\\n    return result_table\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2139985,
                "title": "simple-easy-mysql",
                "content": "**<<< Press Upvote Button !!!!!!**\\n\\n```\\n# Write your MySQL query statement below\\n\\nselect product_id , ( \\'store1\\' ) as store , store1 as price\\n    from Products where store1 is NOT NULL\\n    \\nUNION\\n\\nselect product_id , ( \\'store2\\' ) as store , store2 as price\\n    from Products where store2 is NOT NULL\\n    \\nUNION\\n\\nselect product_id , ( \\'store3\\' ) as store , store3 as price\\n    from Products where store3 is NOT NULL;\\n```\\n![image](https://assets.leetcode.com/users/images/b9f113a0-064b-4cf7-ab09-6154212b13ef_1654975841.638725.jpeg)\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nselect product_id , ( \\'store1\\' ) as store , store1 as price\\n    from Products where store1 is NOT NULL\\n    \\nUNION\\n\\nselect product_id , ( \\'store2\\' ) as store , store2 as price\\n    from Products where store2 is NOT NULL\\n    \\nUNION\\n\\nselect product_id , ( \\'store3\\' ) as store , store3 as price\\n    from Products where store3 is NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3108199,
                "title": "simple-and-easy-explanation-for-beginners",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 as price FROM products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 as price FROM products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 as price From products WHERE store3 IS NOT NULL\\nORDER BY 1,2 ASC;\\n```\\nlet us understand it in parts\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 as price FROM products WHERE store1 IS NOT NULL\\n```\\nselect \\'store1\\' as store => does nothing but add a column named store in which you can add any value(here \\'store1\\') manually, \\nnow we select store1 as price where store1 is not null => this statement gives you the values present only in column store1 naming it price.\\nNow after this we use union for adding the entries for other stores as well in the same pattern and after that order it by product_id.\\n\\nI would recommend running only first line and see the output and then run the whole code without the last line for a better understanding.\\n\\nIf you have any doubt feel free to ask in the comments.\\n\\nPlease upvote if you found this useful.\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 as price FROM products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 as price FROM products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 as price From products WHERE store3 IS NOT NULL\\nORDER BY 1,2 ASC;\\n```\n```\\nSELECT product_id, \\'store1\\' AS store, store1 as price FROM products WHERE store1 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3890418,
                "title": "pandas-a-very-short-and-simple-solution",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*pandas.melt* lets you unpivot a table. This means that you\\'ll turn your wide table into a long (and narrow) table. In other words, all the store columns (store1, store2, store3) will be put into a single  column. The values contained in these columns will also be put into a single new column.\\n\\n1. You\\'ll start off with *df = ( ..... )*, which let\\'s you save the output in a new DataFrame.\\n2. The *products.melt( ..... )* function lets you unpivot the table (go from wide to long).\\n3. Then you\\'ll name the column(s) which you want to leave unchanged, in this case \\'product_id\\'.\\n4. Next you\\'ll name the columns you want to unpivot (go from wide to long).\\n5. Then you\\'ll name this new long column.\\n6. Finally, you\\'ll name the column in which all the values of the store columns are put.\\n7. To get rid of the null values, you\\'ll use *.dropna()*.\\n\\nIf you like this solution, **please upvote**!\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Saves output in new DataFrame\\n    df = (\\n        # 2. .melt() lets you unpivot the table\\n        products.melt(\\n            # 3. Columns you want to leave unchanged\\n            id_vars = [\\'product_id\\'],\\n            # 4. Columns you want to unpivot\\n            value_vars = [\\'store1\\', \\'store2\\', \\'store3\\'], \\n            # 5. This names the store column\\n            var_name = \\'store\\',\\n            # 6. This names the price column\\n            value_name = \\'price\\'\\n            )\\n        # 7. .dropna() lets you drop the null values\\n        .dropna() \\n    )\\n    return df\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Saves output in new DataFrame\\n    df = (\\n        # 2. .melt() lets you unpivot the table\\n        products.melt(\\n            # 3. Columns you want to leave unchanged\\n            id_vars = [\\'product_id\\'],\\n            # 4. Columns you want to unpivot\\n            value_vars = [\\'store1\\', \\'store2\\', \\'store3\\'], \\n            # 5. This names the store column\\n            var_name = \\'store\\',\\n            # 6. This names the price column\\n            value_name = \\'price\\'\\n            )\\n        # 7. .dropna() lets you drop the null values\\n        .dropna() \\n    )\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1975393,
                "title": "mysql-union-solution",
                "content": "```\\n# Write your MySQL query statement below\\nselect * from (\\nselect product_id,\\'store1\\' as store, store1 as price from Products\\nunion \\nselect product_id,\\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from Products\\n) store where price is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect * from (\\nselect product_id,\\'store1\\' as store, store1 as price from Products\\nunion \\nselect product_id,\\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from Products\\n) store where price is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1143938,
                "title": "three-solutions-to-unpivot-a-table",
                "content": "1. traditional way: create all categories (by recursive CTE), cross join and case when\\n```\\nWITH recursive CTE AS (\\n\\t\\t\\t\\t\\t\\tSELECT 1 as num\\n\\t\\t\\t\\t\\t\\t UNION ALL\\n\\t\\t\\t\\t\\t    SELECT num+1 as num \\n\\t\\t\\t\\t\\t      FROM CTE\\n\\t\\t\\t\\t        WHERE num+1<=3)\\n, CJ AS (\\n\\t\\t\\tSELECT DISTINCT product_id,\\n\\t\\t\\t\\t   CASE WHEN num = 1 THEN \\'store1\\' WHEN num = 2 THEN \\'store2\\' WHEN num = 3 THEN \\'store3\\' END AS store,\\n\\t\\t\\t       CASE WHEN num = 1 THEN store1 WHEN num =2 THEN store2 WHEN num=3 THEN store3 END AS price\\n\\t\\t\\t\\t\\t   FROM Products\\n\\t\\t\\t\\t CROSS JOIN CTE)\\nSELECT * FROM CJ WHERE price IS NOT NULL\\n```\\n2. union all (if there are not too many categories/categories are provided)\\n```\\nSELECT DISTINCT product_id, \\'store1\\' as store, store1 as price\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n UNION\\nSELECT DISTINCT product_id, \\'store2\\' as store, store2 as price\\n  FROM Products\\n WHERE store2 IS NOT NULL\\n UNION\\nSELECT DISTINCT product_id, \\'store3\\' as store, store3 as price\\n  FROM Products\\n WHERE store3 IS NOT NULL\\n ```\\n3. function UNPIVOT (MSSQL)\\n```\\nSELECT DISTINCT product_id, store1 as store\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n ```",
                "solutionTags": [],
                "code": "```\\nWITH recursive CTE AS (\\n\\t\\t\\t\\t\\t\\tSELECT 1 as num\\n\\t\\t\\t\\t\\t\\t UNION ALL\\n\\t\\t\\t\\t\\t    SELECT num+1 as num \\n\\t\\t\\t\\t\\t      FROM CTE\\n\\t\\t\\t\\t        WHERE num+1<=3)\\n, CJ AS (\\n\\t\\t\\tSELECT DISTINCT product_id,\\n\\t\\t\\t\\t   CASE WHEN num = 1 THEN \\'store1\\' WHEN num = 2 THEN \\'store2\\' WHEN num = 3 THEN \\'store3\\' END AS store,\\n\\t\\t\\t       CASE WHEN num = 1 THEN store1 WHEN num =2 THEN store2 WHEN num=3 THEN store3 END AS price\\n\\t\\t\\t\\t\\t   FROM Products\\n\\t\\t\\t\\t CROSS JOIN CTE)\\nSELECT * FROM CJ WHERE price IS NOT NULL\\n```\n```\\nSELECT DISTINCT product_id, \\'store1\\' as store, store1 as price\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n UNION\\nSELECT DISTINCT product_id, \\'store2\\' as store, store2 as price\\n  FROM Products\\n WHERE store2 IS NOT NULL\\n UNION\\nSELECT DISTINCT product_id, \\'store3\\' as store, store3 as price\\n  FROM Products\\n WHERE store3 IS NOT NULL\\n ```\n```\\nSELECT DISTINCT product_id, store1 as store\\n  FROM Products\\n WHERE store1 IS NOT NULL\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118410,
                "title": "mysql-union-select-easier-to-understand",
                "content": "```\\nSELECT\\n    view.product_id,\\n    view.store,\\n    view.price\\nFROM (\\n    SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products\\n    UNION ALL\\n    SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products\\n    UNION ALL\\n    SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products\\n) AS view\\nWHERE view.price IS NOT NULL;\\n```\\n\\nGood reference: https://stackoverflow.com/questions/13944417/mysql-convert-column-to-row-pivot-table",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    view.product_id,\\n    view.store,\\n    view.price\\nFROM (\\n    SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products\\n    UNION ALL\\n    SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products\\n    UNION ALL\\n    SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products\\n) AS view\\nWHERE view.price IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3435024,
                "title": "superb-logic-using-union",
                "content": "# 1. MYSQL\\n```\\nselect product_id,\\'store1\\' as store,store1 as price from products where store1 is not null\\nunion \\nselect product_id,\\'store2\\' as store,store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from products where store3 is not null\\n```\\n# please upvote me it would encourage me alot\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id,\\'store1\\' as store,store1 as price from products where store1 is not null\\nunion \\nselect product_id,\\'store2\\' as store,store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2498430,
                "title": "mysql-simple-and-clean-solution",
                "content": "**Please Upvote if it helped you !!!**\\n```\\nselect product_id ,\\'store1\\' as store ,store1 as price from products where store1 is not null\\nunion \\nselect product_id ,\\'store2\\' as store ,store2 as price from products where store2 is not null\\nunion \\nselect product_id ,\\'store3\\' as store,store3 as price from products where store3 is not null\\norder by product_id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id ,\\'store1\\' as store ,store1 as price from products where store1 is not null\\nunion \\nselect product_id ,\\'store2\\' as store ,store2 as price from products where store2 is not null\\nunion \\nselect product_id ,\\'store3\\' as store,store3 as price from products where store3 is not null\\norder by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2245836,
                "title": "simple-mysql-solution",
                "content": "```\\nSelect product_id,\"store1\" store, store1 as price from Products where store1 is not NULL\\nunion\\nSelect product_id,\"store2\" store, store2 as price from Products where store2 is not NULL \\nunion\\nSelect product_id,\"store3\" store, store3 as price from Products where store3 is not NULL\\n\\n```\\n\\n**Please UpVote if it was Helpful :)**",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect product_id,\"store1\" store, store1 as price from Products where store1 is not NULL\\nunion\\nSelect product_id,\"store2\" store, store2 as price from Products where store2 is not NULL \\nunion\\nSelect product_id,\"store3\" store, store3 as price from Products where store3 is not NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1565141,
                "title": "questions-what-if-there-are-more-than-three-stores-what-if-there-are-thousands-of-stores",
                "content": "As stated above, what if there are too many stores to all explicitly write it out and then union? Is there any way to solve it in another way in mysql?\\n\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL;   \\n```\\n",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL;   \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3425902,
                "title": "4-solutions-union-all-union-from-case",
                "content": "# SOLUTION-1: \\nUNION ALL\\n\\n# EXPLANATION\\n+ We use three separate SELECT statements to extract the data for each store, and use UNION ALL to concatenate the results into a single table.\\n+ For each SELECT statement, we use a WHERE clause to exclude rows where the price is null for the given store.\\n+ We use the AS keyword to alias the column names as required by the output format.\\n+ Finally, we use ORDER BY to sort the rows by product_id and store.\\n\\n# Code\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id, store;\\n```\\n\\n# SOLUTION-2: \\nUNION\\n\\n# EXPLANATION\\n+ This query is almost identical to the previous one, but it uses the UNION operator instead of UNION ALL. \\n+ The difference is that UNION **removes duplicates** from the result set, whereas UNION ALL keeps all rows, even if they are duplicates. \\n+ Since we know that each product can only have one price per store, there are no duplicate rows in the output, so using UNION instead of UNION ALL is safe and can **potentially improve performance** by reducing the amount of data that needs to be processed.\\n\\nI hope this alternative solution helps!\\n\\n# Code\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id, store;\\n\\n```\\n\\n# SOLUTION-3: \\nFROM (NESTED QUERY)\\n\\n# EXPLANATION\\nThis query is similar to the previous examples, but instead of using separate SELECT statements for each store, it uses a subquery with UNION ALL to combine the results.\\n\\nThe subquery selects the product_id, store name, and price for each store where the price is not NULL. The outer query simply selects the three columns from the subquery and orders the result by product_id and store.\\n\\nThis approach can be useful if there are many columns to select from, or if there are many stores to check for each product. It can also be more efficient than using multiple SELECT statements if the database system can optimize the subquery execution.\\n\\nOverall, there are many ways to write the SQL query for rearranging the Products table, and the best approach may depend on the specific database system and data being queried\\n# Code\\n```\\nSELECT product_id, store, price\\nFROM (\\n  SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\n  UNION ALL\\n  SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\n  UNION ALL\\n  SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n) AS tmp\\nORDER BY product_id, store;\\n\\n```\\n\\n# SOLUTION-4: \\nCASE\\n\\n# EXPLANATION\\nThis query uses a CASE statement to determine which store has a price for each product. The query selects the product_id, store name, and price for each store where the price is not NULL. The WHERE clause filters out rows where all stores have NULL prices. Finally, the result is ordered by product_id and store.\\n\\nThis approach can be useful if there are many stores to check for each product and the number of stores is not fixed. However, it can be less efficient than the previous examples, especially if there are many rows with NULL prices, since the database system has to evaluate multiple CASE statements for each row.\\n\\nOverall, there are many ways to write the SQL query for rearranging the Products table, and the best approach may depend on the specific database system and data being queried.\\n\\n# Code\\n```\\nSELECT product_id, store, price\\nFROM (\\n  SELECT \\n    product_id,\\n    \\'store1\\' AS store,\\n    CASE WHEN store1 IS NOT NULL THEN store1 END AS price\\n  FROM Products\\n  UNION ALL\\n  SELECT \\n    product_id,\\n    \\'store2\\' AS store,\\n    CASE WHEN store2 IS NOT NULL THEN store2 END AS price\\n  FROM Products\\n  UNION ALL\\n  SELECT \\n    product_id,\\n    \\'store3\\' AS store,\\n    CASE WHEN store3 IS NOT NULL THEN store3 END AS price\\n  FROM Products\\n) AS rearranged\\nWHERE price IS NOT NULL\\nORDER BY product_id, store;\\n```\\n\\nI hope all solutions helps to build the understanding.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id, store;\\n```\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id, store;\\n\\n```\n```\\nSELECT product_id, store, price\\nFROM (\\n  SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\n  UNION ALL\\n  SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\n  UNION ALL\\n  SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n) AS tmp\\nORDER BY product_id, store;\\n\\n```\n```\\nSELECT product_id, store, price\\nFROM (\\n  SELECT \\n    product_id,\\n    \\'store1\\' AS store,\\n    CASE WHEN store1 IS NOT NULL THEN store1 END AS price\\n  FROM Products\\n  UNION ALL\\n  SELECT \\n    product_id,\\n    \\'store2\\' AS store,\\n    CASE WHEN store2 IS NOT NULL THEN store2 END AS price\\n  FROM Products\\n  UNION ALL\\n  SELECT \\n    product_id,\\n    \\'store3\\' AS store,\\n    CASE WHEN store3 IS NOT NULL THEN store3 END AS price\\n  FROM Products\\n) AS rearranged\\nWHERE price IS NOT NULL\\nORDER BY product_id, store;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2689874,
                "title": "easy-approach-suggest-better-meathods",
                "content": "\\tselect product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\n\\tunion\\n\\tselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\n\\tunion\\n\\tselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2597978,
                "title": "sql-easiest-solution-using-union-very-understandable-approach",
                "content": "\\tSELECT product_id,\\n\\t\"store1\" AS store,\\n\\tstore1 AS price \\n\\tFROM Products WHERE store1 IS NOT NULL\\n\\n\\tUNION\\n\\n\\tSELECT product_id,\\n\\t\"store2\" AS store,\\n\\tstore2 AS price \\n\\tFROM Products WHERE store2 IS NOT NULL\\n\\n\\tUNION\\n\\n\\tSELECT product_id,\\n\\t\"store3\" AS store,\\n\\tstore3 AS price \\n\\tFROM Products WHERE store3 IS NOT NULL;",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "\\tSELECT product_id,\\n\\t\"store1\" AS store,\\n\\tstore1 AS price \\n\\tFROM Products WHERE store1 IS NOT NULL\\n\\n\\tUNION\\n\\n\\tSELECT product_id,\\n\\t\"store2\" AS store,\\n\\tstore2 AS price \\n\\tFROM Products WHERE store2 IS NOT NULL\\n\\n\\tUNION\\n\\n\\tSELECT product_id,\\n\\t\"store3\" AS store,\\n\\tstore3 AS price \\n\\tFROM Products WHERE store3 IS NOT NULL;",
                "codeTag": "Unknown"
            },
            {
                "id": 2452041,
                "title": "easy-solution-using-union-and-where-clause-in-mysql",
                "content": "```\\nselect  product_id, \\'store1\\' as store, store1 as price from Products  where store1 is not null\\nunion\\nselect  product_id, \\'store2\\' as store, store2 as price from Products  where store2 is not null\\nunion\\nselect  product_id, \\'store3\\' as store, store3 as price from Products  where store3 is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect  product_id, \\'store1\\' as store, store1 as price from Products  where store1 is not null\\nunion\\nselect  product_id, \\'store2\\' as store, store2 as price from Products  where store2 is not null\\nunion\\nselect  product_id, \\'store3\\' as store, store3 as price from Products  where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2364700,
                "title": "mysql-union-efficient-approach-easy-to-understand",
                "content": "****Please Upvote if you found this helpful.****\\n\\n\\n```\\nselect product_id,\\'store1\\' as store,store1 as price from Products\\nwhere store1 is not null\\n\\nunion\\n\\nselect product_id,\\'store2\\' as store,store2 as price from Products\\nwhere store2 is not null\\n\\nunion\\n\\nselect product_id,\\'store3\\' as store,store3 as price from Products\\nwhere store3 is not null\\norder by product_id asc,price desc;\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id,\\'store1\\' as store,store1 as price from Products\\nwhere store1 is not null\\n\\nunion\\n\\nselect product_id,\\'store2\\' as store,store2 as price from Products\\nwhere store2 is not null\\n\\nunion\\n\\nselect product_id,\\'store3\\' as store,store3 as price from Products\\nwhere store3 is not null\\norder by product_id asc,price desc;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2150696,
                "title": "you-can-do-it-bro",
                "content": "## ***Easy Breezy! Guys***\\n\\n***Upvote if found useful*** :-\\n\\n![image](https://assets.leetcode.com/users/images/fde63879-9ce4-4941-ba73-0339430d5899_1655200210.9459124.gif)\\n\\n\\n```\\nselect * from \\n(select product_id, \"store1\" as store, store1 as price from Products\\nunion \\nselect product_id, \"store2\", store2 from Products\\nunion\\nselect product_id, \"store3\", store3 from Products) sub where price is not null\\n```;\\n\\n\"Feedback Appreaciated\"",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect * from \\n(select product_id, \"store1\" as store, store1 as price from Products\\nunion \\nselect product_id, \"store2\", store2 from Products\\nunion\\nselect product_id, \"store3\", store3 from Products) sub where price is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2031431,
                "title": "using-unpivot",
                "content": "select product_id,store,price from Products\\nUNPIVOT\\n(\\n    price \\n    for store in (store1,store2,store3)\\n) as unpivoting",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "select product_id,store,price from Products\\nUNPIVOT\\n(\\n    price \\n    for store in (store1,store2,store3)\\n) as unpivoting",
                "codeTag": "Unknown"
            },
            {
                "id": 3449637,
                "title": "notmy-product-s-price-for-each-store",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2491013,
                "title": "beats-99-89-with-understandable-code",
                "content": "```\\n##for store 1 \\nwith t1 as (select product_id, \\'store1\\' as store, store1 as price from Products where store1 is not null),\\n\\n##for store 2\\nt2 as (select product_id, \\'store2\\' as store, store2 as price from Products where store2 is not null),\\n\\n##for store 3\\nt3 as (select product_id, \\'store3\\' as store, store3 as price from Products where store3 is not null)\\n\\n\\nselect * from  (select * from t1 x UNION select * from t2 y UNION select * from t3 z) as X;\\n```\\n\\nplease upvote if this is helpful.",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n##for store 1 \\nwith t1 as (select product_id, \\'store1\\' as store, store1 as price from Products where store1 is not null),\\n\\n##for store 2\\nt2 as (select product_id, \\'store2\\' as store, store2 as price from Products where store2 is not null),\\n\\n##for store 3\\nt3 as (select product_id, \\'store3\\' as store, store3 as price from Products where store3 is not null)\\n\\n\\nselect * from  (select * from t1 x UNION select * from t2 y UNION select * from t3 z) as X;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2144058,
                "title": "mysql-union-subquery-the-simplest-solution",
                "content": "```\\nselect * from \\n(select product_id, \"store1\" as store, store1 as price from Products\\nunion \\nselect product_id, \"store2\", store2 from Products\\nunion\\nselect product_id, \"store3\", store3 from Products) sub where price is not null;\\n\\n```",
                "solutionTags": [],
                "code": "```\\nselect * from \\n(select product_id, \"store1\" as store, store1 as price from Products\\nunion \\nselect product_id, \"store2\", store2 from Products\\nunion\\nselect product_id, \"store3\", store3 from Products) sub where price is not null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1997766,
                "title": "fast-simple-mysql-solution-using-case",
                "content": "```\\nSELECT A.product_id, B.COLUMN_NAME as store,\\nCASE\\n    WHEN B.COLUMN_NAME = \"store1\" THEN store1\\n    WHEN B.COLUMN_NAME = \"store2\" THEN store2\\n    WHEN B.COLUMN_NAME = \"store3\" THEN store3\\nEND AS price\\nFROM Products A, INFORMATION_SCHEMA.COLUMNS B\\n  WHERE table_name = \\'Products\\' AND column_name != \"product_id\"\\n  HAVING price IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT A.product_id, B.COLUMN_NAME as store,\\nCASE\\n    WHEN B.COLUMN_NAME = \"store1\" THEN store1\\n    WHEN B.COLUMN_NAME = \"store2\" THEN store2\\n    WHEN B.COLUMN_NAME = \"store3\" THEN store3\\nEND AS price\\nFROM Products A, INFORMATION_SCHEMA.COLUMNS B\\n  WHERE table_name = \\'Products\\' AND column_name != \"product_id\"\\n  HAVING price IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3911849,
                "title": "super-simple-pandas-step-by-step-explained",
                "content": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # set product_id as the index, preparing for stacking stores\\n    products.set_index(\\'product_id\\', inplace=True)\\n\\n    # stack stores\\n    products = products.stack(dropna=True).reset_index()\\n\\n    # rename columns\\n    products.columns = [\\'product_id\\',\\'store\\',\\'price\\']\\n    return pd.DataFrame(products)\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # set product_id as the index, preparing for stacking stores\\n    products.set_index(\\'product_id\\', inplace=True)\\n\\n    # stack stores\\n    products = products.stack(dropna=True).reset_index()\\n\\n    # rename columns\\n    products.columns = [\\'product_id\\',\\'store\\',\\'price\\']\\n    return pd.DataFrame(products)\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2350295,
                "title": "3-solutions-union-unpivot-and-cross-apply",
                "content": "UNION\\n```\\nWITH cte_p AS (\\nSELECT product_id , \\'store1\\' as store, store1 as price\\nFROM Products\\nUNION ALL\\nSELECT product_id , \\'store2\\' as store, store2 as price\\nFROM Products\\nUNION ALL\\nSELECT product_id , \\'store3\\' as store, store3 as price\\nFROM Products\\n)\\nSELECT *\\nFROM cte_p\\nWHERE price IS NOT NULL\\n```\\nUNPIVOT\\n```\\nSELECT product_id, store, price\\nFROM Products\\nUNPIVOT\\n(\\n  price\\n  for store in (store1, store2, store3)\\n) unpiv\\n```\\nCROSS APPLY\\n```\\nSELECT product_id, store, price \\nFROM Products\\nCROSS APPLY\\n(\\n  VALUES\\n    (\\'store1\\', store1),\\n    (\\'store2\\', store2),\\n    (\\'store3\\', store3)\\n) c (store, price)\\nWHERE price IS NOT NULL\\n```",
                "solutionTags": [
                    "Union Find"
                ],
                "code": "```\\nWITH cte_p AS (\\nSELECT product_id , \\'store1\\' as store, store1 as price\\nFROM Products\\nUNION ALL\\nSELECT product_id , \\'store2\\' as store, store2 as price\\nFROM Products\\nUNION ALL\\nSELECT product_id , \\'store3\\' as store, store3 as price\\nFROM Products\\n)\\nSELECT *\\nFROM cte_p\\nWHERE price IS NOT NULL\\n```\n```\\nSELECT product_id, store, price\\nFROM Products\\nUNPIVOT\\n(\\n  price\\n  for store in (store1, store2, store3)\\n) unpiv\\n```\n```\\nSELECT product_id, store, price \\nFROM Products\\nCROSS APPLY\\n(\\n  VALUES\\n    (\\'store1\\', store1),\\n    (\\'store2\\', store2),\\n    (\\'store3\\', store3)\\n) c (store, price)\\nWHERE price IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2304340,
                "title": "solution-with-unpivot-and-union-unpivot-is-bit-faster",
                "content": "UNPIVOT IS ONLY AVALIBLE IN MY SQL\\n```\\nSELECT Product_id, Store, Price\\nFrom Products\\nUNPIVOT\\n(\\nStore for price in (\\n[store1],[store2],[store3]\\n)\\n) as u\\n```\\nThis Query We Can run Everywhere \\n```\\nSelect Product_id, \\'store1\\' as Store, Store1 as Price\\nfrom Products\\nwhere store1 IS NOT NULL\\nUNION\\nSelect Product_id, \\'store2\\' as Store, Store2 as Price\\nfrom Products\\nwhere store2 IS NOT NULL \\nUNION\\nSelect Product_id, \\'store3\\' as Store, Store3 as Price\\nfrom Products\\nwhere store3 IS NOT NULL \\n```\\nHappy Learning",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT Product_id, Store, Price\\nFrom Products\\nUNPIVOT\\n(\\nStore for price in (\\n[store1],[store2],[store3]\\n)\\n) as u\\n```\n```\\nSelect Product_id, \\'store1\\' as Store, Store1 as Price\\nfrom Products\\nwhere store1 IS NOT NULL\\nUNION\\nSelect Product_id, \\'store2\\' as Store, Store2 as Price\\nfrom Products\\nwhere store2 IS NOT NULL \\nUNION\\nSelect Product_id, \\'store3\\' as Store, Store3 as Price\\nfrom Products\\nwhere store3 IS NOT NULL \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2290970,
                "title": "sql-server-using-unpivot",
                "content": "# Converting columns to rows using ```UNPIVOT``` \\n```\\nSELECT product_id, store, price\\nFROM \\n( \\n   SELECT product_id, \\n    store1, \\n    store2,  \\n    store3 \\n FROM Products) AS ActualData\\nUNPIVOT\\n(\\n       price\\n       FOR store IN (store1, store2, store3)\\n) AS UnpivotData\\nWHERE price is not null\\n```\\n\\ncheck this link for reference and explaination https://dotnettutorials.net/lesson/pivot-and-unpivot-sql-server/",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```UNPIVOT```\n```\\nSELECT product_id, store, price\\nFROM \\n( \\n   SELECT product_id, \\n    store1, \\n    store2,  \\n    store3 \\n FROM Products) AS ActualData\\nUNPIVOT\\n(\\n       price\\n       FOR store IN (store1, store2, store3)\\n) AS UnpivotData\\nWHERE price is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2283394,
                "title": "oracle-simple-best-solution",
                "content": "# Please upvote if you find it helpful.\\n\\n```\\n/* Write your PL/SQL query statement below */\\n\\n\\nSELECT\\nproduct_id AS \"product_id\", \\n\\'store1\\' AS \"store\", \\nstore1 AS \"price\"\\nFROM products\\nWHERE store1 IS NOT null\\n\\nUNION\\n\\nSELECT \\nproduct_id AS \"product_id\", \\n\\'store2\\' AS \"store\", \\nstore2 AS \"price\"\\nFROM products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT \\nproduct_id AS \"product_id\", \\n\\'store3\\' AS \"store\", \\nstore3 AS \"price\"\\nFROM products\\nWHERE store3 IS NOT NULL;\\n```\\n\\n# If you have any queries, you can ask me.",
                "solutionTags": [
                    "MySQL",
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\n\\nSELECT\\nproduct_id AS \"product_id\", \\n\\'store1\\' AS \"store\", \\nstore1 AS \"price\"\\nFROM products\\nWHERE store1 IS NOT null\\n\\nUNION\\n\\nSELECT \\nproduct_id AS \"product_id\", \\n\\'store2\\' AS \"store\", \\nstore2 AS \"price\"\\nFROM products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT \\nproduct_id AS \"product_id\", \\n\\'store3\\' AS \"store\", \\nstore3 AS \"price\"\\nFROM products\\nWHERE store3 IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1987010,
                "title": "mysql-o-n-time-beats-99-97-memory-speed-0ms-april-2022",
                "content": "***Hello it would be my pleasure to introduce myself Darian.***\\n\\n```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n    \\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```\\n\\n***Consider upvote if useful! Hopefully it can be used in your advantage!***\\n***Take care brother, peace, love!***",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n    \\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1980871,
                "title": "easy-solution-with-union",
                "content": "```\\n  SELECT PRODUCT_ID, \\'store1\\' AS STORE, STORE1 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE1 IS NOT NULL    \\n   UNION\\n  SELECT PRODUCT_ID, \\'store2\\' AS STORE, STORE2 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE2 IS NOT NULL    \\n   UNION\\n  SELECT PRODUCT_ID, \\'store3\\' AS STORE, STORE3 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE3 IS NOT NULL\\n   ```",
                "solutionTags": [
                    "MS SQL Server",
                    "Union Find"
                ],
                "code": "```\\n  SELECT PRODUCT_ID, \\'store1\\' AS STORE, STORE1 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE1 IS NOT NULL    \\n   UNION\\n  SELECT PRODUCT_ID, \\'store2\\' AS STORE, STORE2 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE2 IS NOT NULL    \\n   UNION\\n  SELECT PRODUCT_ID, \\'store3\\' AS STORE, STORE3 AS PRICE\\n    FROM PRODUCTS\\n   WHERE STORE3 IS NOT NULL\\n   ```",
                "codeTag": "Unknown"
            },
            {
                "id": 1477178,
                "title": "easy-mysql-solution",
                "content": "select * from\\n(select product_id, \\'store1\\' as store, store1 as price from Products\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products) t\\nwhere price is not null",
                "solutionTags": [],
                "code": "select * from\\n(select product_id, \\'store1\\' as store, store1 as price from Products\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products) t\\nwhere price is not null",
                "codeTag": "Unknown"
            },
            {
                "id": 1118702,
                "title": "mysql-union",
                "content": "```\\nSELECT product_id, \\'store1\\' as store, store1 as price FROM Products WHERE store1 is not null \\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price FROM Products WHERE store2 is not null \\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price FROM Products WHERE store3 is not null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' as store, store1 as price FROM Products WHERE store1 is not null \\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price FROM Products WHERE store2 is not null \\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price FROM Products WHERE store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2473183,
                "title": "easy-mysql-union",
                "content": "```\\nselect product_id, \\'store1\\' as store, store1 as price\\nfrom products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price\\nfrom products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price\\nfrom products where store3 is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \\'store1\\' as store, store1 as price\\nfrom products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price\\nfrom products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price\\nfrom products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118432,
                "title": "ms-sql-unpivot",
                "content": "```\\nSELECT product_id, store, price\\nFROM (\\n    SELECT product_id, store1, store2, store3\\n    FROM Products\\n) pvt\\nUNPIVOT \\n(\\n    price FOR store IN (store1, store2, store3)\\n) unpvt;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, store, price\\nFROM (\\n    SELECT product_id, store1, store2, store3\\n    FROM Products\\n) pvt\\nUNPIVOT \\n(\\n    price FOR store IN (store1, store2, store3)\\n) unpvt;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3853137,
                "title": "simple-mysql-solution-using-union",
                "content": "\\n```\\nselect product_id, \\'store1\\' as store , store1 as price\\nfrom Products\\nwhere store1 is not null\\nUNION\\nselect product_id, \\'store2\\' as store , store2 as price\\nfrom Products\\nwhere store2 is not null\\nUNION\\nselect product_id, \\'store3\\' as store , store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id, \\'store1\\' as store , store1 as price\\nfrom Products\\nwhere store1 is not null\\nUNION\\nselect product_id, \\'store2\\' as store , store2 as price\\nfrom Products\\nwhere store2 is not null\\nUNION\\nselect product_id, \\'store3\\' as store , store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3724988,
                "title": "mysql-solution-for-rearrange-products-table-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind the solution is to rearrange the data in the Products table to transform it into a result table with rows in the format (product_id, store, price).\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nThe query consists of three SELECT statements combined using the UNION operator. Each SELECT statement retrieves the product_id, the store name as a string literal, and the price from the corresponding store column. The WHERE clause is used to exclude rows where the price is null in each store column.\\n\\nThe result will be a table with rows in the format (product_id, store, price), where each row represents a product available in a store with its corresponding price. The result table will include all products available in any of the stores, and the rows can be in any order.\\n\\nIf there are duplicate rows in the original Products table (same product_id with the same non-null price in multiple store columns), the UNION operator will remove the duplicates from the result table.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this query is dependent on the size of the Products table, as it needs to scan each row to check the availability of the product in each store. Therefore, the time complexity is O(n), where n is the number of rows in the table.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is also dependent on the number of rows in the Products table. The query will generate a result table with rows for each product available in any of the stores. If there are m distinct products available in the stores, the space complexity is O(m).\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3614576,
                "title": "simple-mysql-solution-union",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \"store2\" as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \"store3\" as store, store3 as price from products where store3 is not null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \"store2\" as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \"store3\" as store, store3 as price from products where store3 is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3276371,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store, store1 as price from Products\\nwhere store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products\\nwhere store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products\\nwhere store3 is not null;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store, store1 as price from Products\\nwhere store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products\\nwhere store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products\\nwhere store3 is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3234307,
                "title": "sql-server-clean-easy",
                "content": "```\\n/* Write your T-SQL query statement below */\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM products WHERE store3 IS NOT NULL\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM products WHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2677733,
                "title": "mysql-solution",
                "content": "In this case, it is more efficient to use UNION ALL, since there is no need to check for duplicates and spend extra time on it.\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\n    FROM Products\\n    WHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\n    FROM Products\\n    WHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\n    FROM Products\\n    WHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\n    FROM Products\\n    WHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\n    FROM Products\\n    WHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\n    FROM Products\\n    WHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2646988,
                "title": "sql-simple-and-easy-solution-using-union-easy-understandinng",
                "content": "Select product_id, \"store1\" as store, store1 as price\\nFrom Products where store1 is not null\\nUnion\\nSelect product_id, \"store2\" as store, store2 as price\\nFrom Products where store2 is not null\\nunion \\nSelect product_id, \"store3\" as store, store3 as price\\nFrom Products Where store3 is not null;",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "Select product_id, \"store1\" as store, store1 as price\\nFrom Products where store1 is not null\\nUnion\\nSelect product_id, \"store2\" as store, store2 as price\\nFrom Products where store2 is not null\\nunion \\nSelect product_id, \"store3\" as store, store3 as price\\nFrom Products Where store3 is not null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2540498,
                "title": "mysql-using-union-with-an-explanation",
                "content": "First of all, you need to decompose the task: \\n1) We need to use 1 Row and get all the necessary data in it, \\n2) We need to convert the data to the form specified in the task, \\n3) We need to implement a NULL check. \\n\\nWhy is the solution via UNION? \\n\\nBecause we need to achieve a result in which we have a selection from various \"variations\" of one table, for this we select the price for the goods from the store1 store, etc. recursively repeating the same thing, and then select the column with the name of the store (I made it as simple as possible, presented the magiz in the form of a column) and we check for NULL, I hope the code is explained more competently than I am)\\n```\\nSELECT\\n    e.product_id, \\n    \"store1\" AS store,\\n    e.store1 AS price\\nFROM Products e\\nWHERE e.store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    e.product_id,\\n    \"store2\" AS store,\\n    e.store2 AS price\\nFROM Products e\\nWHERE e.store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    e.product_id, \\n    \"store3\" AS store,\\n    e.store3 AS price\\nFROM Products e\\nWHERE e.store3 IS NOT NULL\\n;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    e.product_id, \\n    \"store1\" AS store,\\n    e.store1 AS price\\nFROM Products e\\nWHERE e.store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    e.product_id,\\n    \"store2\" AS store,\\n    e.store2 AS price\\nFROM Products e\\nWHERE e.store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    e.product_id, \\n    \"store3\" AS store,\\n    e.store3 AS price\\nFROM Products e\\nWHERE e.store3 IS NOT NULL\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2421363,
                "title": "simple-to-understand-40-faster-easy-code",
                "content": "```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store ,store1 as price \\nfrom Products\\nwhere store1 is not null\\nunion \\nselect product_id, \\'store2\\' as store ,store2 as price \\nfrom Products\\nwhere store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store ,store3 as price \\nfrom Products\\nwhere store3 is not null;\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store ,store1 as price \\nfrom Products\\nwhere store1 is not null\\nunion \\nselect product_id, \\'store2\\' as store ,store2 as price \\nfrom Products\\nwhere store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store ,store3 as price \\nfrom Products\\nwhere store3 is not null;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2387110,
                "title": "mysql-intuitive-union",
                "content": "```\\nSELECT product_id,\"store1\" AS store, store1 AS price FROM Products where store1  IS NOT NULL\\nUNION\\nSELECT product_id,\"store2\" AS store, store2 AS price FROM Products where store2  IS NOT NULL\\nUNION\\nSELECT product_id,\"store3\" AS store, store3 AS price FROM Products where store3  IS NOT NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id,\"store1\" AS store, store1 AS price FROM Products where store1  IS NOT NULL\\nUNION\\nSELECT product_id,\"store2\" AS store, store2 AS price FROM Products where store2  IS NOT NULL\\nUNION\\nSELECT product_id,\"store3\" AS store, store3 AS price FROM Products where store3  IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2212991,
                "title": "mysql-union-solution-faster-than-99",
                "content": "```\\nSELECT\\nProducts.product_id,\\n\\'store1\\' as store,\\nstore1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\nProducts.product_id,\\n\\'store2\\' as store,\\nstore2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\nProducts.product_id,\\n\\'store3\\' as store,\\nstore3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT\\nProducts.product_id,\\n\\'store1\\' as store,\\nstore1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\nProducts.product_id,\\n\\'store2\\' as store,\\nstore2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\nProducts.product_id,\\n\\'store3\\' as store,\\nstore3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2212003,
                "title": "sql-easy-to-understand-union-select-simple",
                "content": "```\\nSELECT product_id,\\n\\t\"store1\" AS store,\\n\\tstore1 AS price \\nFROM Products WHERE store1 IS NOT null\\nUNION\\nSELECT product_id,\\n\\t\"store2\" AS store,\\n\\tstore2 AS price \\nFROM Products WHERE store2 IS NOT null\\nUNION\\nSELECT product_id,\\n\\t\"store3\" AS store,\\n\\tstore3 AS price \\nFROM Products WHERE store3 IS NOT null;\\n\\n```\\nPlease upvote if you found this useful :)",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id,\\n\\t\"store1\" AS store,\\n\\tstore1 AS price \\nFROM Products WHERE store1 IS NOT null\\nUNION\\nSELECT product_id,\\n\\t\"store2\" AS store,\\n\\tstore2 AS price \\nFROM Products WHERE store2 IS NOT null\\nUNION\\nSELECT product_id,\\n\\t\"store3\" AS store,\\n\\tstore3 AS price \\nFROM Products WHERE store3 IS NOT null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2185104,
                "title": "simple-solution-using-union",
                "content": "```\\n# Write your MySQL query statement below\\n# Pivot Function cannot be used as PIVOT >> ROWS to COLUMNS not vice versa\\n# So we use UNION\\n\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n# Pivot Function cannot be used as PIVOT >> ROWS to COLUMNS not vice versa\\n# So we use UNION\\n\\nSELECT product_id, \\'store1\\' AS store, store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2158292,
                "title": "easy-and-simple-solution-using-union",
                "content": "```\\nselect product_id,\\'store1\\' store , store1 price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' store , store2 price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' store , store3 price from products where store3 is not null \\norder by product_id, price\\n\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id,\\'store1\\' store , store1 price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' store , store2 price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' store , store3 price from products where store3 is not null \\norder by product_id, price\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2121487,
                "title": "mysql-solution-union-of-tables",
                "content": "```\\n\\tSELECT product_id, \\'store1\\' AS store, store1 AS price \\n\\tFROM Products \\n\\tWHERE store1 IS NOT NULL\\nUNION\\n\\tSELECT product_id, \\'store2\\' AS store, store2 AS price \\n\\tFROM Products \\n\\tWHERE store2 IS NOT NULL\\nUNION\\n\\tSELECT product_id, \\'store3\\' AS store, store3 AS price \\n\\tFROM Products \\n\\tWHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n\\tSELECT product_id, \\'store1\\' AS store, store1 AS price \\n\\tFROM Products \\n\\tWHERE store1 IS NOT NULL\\nUNION\\n\\tSELECT product_id, \\'store2\\' AS store, store2 AS price \\n\\tFROM Products \\n\\tWHERE store2 IS NOT NULL\\nUNION\\n\\tSELECT product_id, \\'store3\\' AS store, store3 AS price \\n\\tFROM Products \\n\\tWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2088938,
                "title": "the-easiest-solution",
                "content": "Runtime: 470 ms, faster than 78.93% of MySQL online submissions for Rearrange Products Table.\\nMemory Usage: 0B, less than 100.00% of MySQL online submissions for Rearrange Products Table.\\n\\n```\\nselect product_id, \\'store1\\' as store, store1 as price from Products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products where store3 is not null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \\'store1\\' as store, store1 as price from Products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products where store3 is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2002122,
                "title": "simple-sql-solution-using-union",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\n    FROM Products \\n    WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\n    FROM Products \\n    WHERE store2 IS NOT NULL\\n    UNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\n    FROM Products \\n    WHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\n    FROM Products \\n    WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\n    FROM Products \\n    WHERE store2 IS NOT NULL\\n    UNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\n    FROM Products \\n    WHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1661695,
                "title": "solution-oracle-union",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nSELECT product_id, \\n    \\'store1\\' as store,\\n    store1 as price\\nFROM products where store1 is not null\\nUNION \\nSELECT product_id, \\n    \\'store2\\' as store,\\n    store2 as price\\nFROM products where store2 is not null\\nUNION\\nSELECT product_id, \\n    \\'store3\\' as store,\\n    store3 as price\\nFROM products where store3 is not null\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT product_id, \\n    \\'store1\\' as store,\\n    store1 as price\\nFROM products where store1 is not null\\nUNION \\nSELECT product_id, \\n    \\'store2\\' as store,\\n    store2 as price\\nFROM products where store2 is not null\\nUNION\\nSELECT product_id, \\n    \\'store3\\' as store,\\n    store3 as price\\nFROM products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1521624,
                "title": "ms-sql",
                "content": "#### Question\\n```\\n1795. Rearrange Products Table\\nEasy\\n\\nSQL Schema\\nTable: Products\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| product_id  | int     |\\n| store1      | int     |\\n| store2      | int     |\\n| store3      | int     |\\n+-------------+---------+\\nproduct_id is the primary key for this table.\\nEach row in this table indicates the product\\'s price in 3 different stores: store1, store2, and store3.\\nIf the product is not available in a store, the price will be null in that store\\'s column.\\n \\n\\nWrite an SQL query to rearrange the Products table so that each row has (product_id, store, price). If a product is not available in a store, do not include a row with that product_id and store combination in the result table.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example:\\n\\n \\n\\nProducts table:\\n+------------+--------+--------+--------+\\n| product_id | store1 | store2 | store3 |\\n+------------+--------+--------+--------+\\n| 0          | 95     | 100    | 105    |\\n| 1          | 70     | null   | 80     |\\n+------------+--------+--------+--------+\\n\\nResult table:\\n+------------+--------+-------+\\n| product_id | store  | price |\\n+------------+--------+-------+\\n| 0          | store1 | 95    |\\n| 0          | store2 | 100   |\\n| 0          | store3 | 105   |\\n| 1          | store1 | 70    |\\n| 1          | store3 | 80    |\\n+------------+--------+-------+\\n\\nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2.\\n```\\n\\n#### Answer\\n```SQL\\nselect product_id, \\'store1\\' as store, store1 as price from Products p \\nwhere store1 is not NULL\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products p \\nwhere store2 is not NULL\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products p \\nwhere store3 is not NULL\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n1795. Rearrange Products Table\\nEasy\\n\\nSQL Schema\\nTable: Products\\n\\n+-------------+---------+\\n| Column Name | Type    |\\n+-------------+---------+\\n| product_id  | int     |\\n| store1      | int     |\\n| store2      | int     |\\n| store3      | int     |\\n+-------------+---------+\\nproduct_id is the primary key for this table.\\nEach row in this table indicates the product\\'s price in 3 different stores: store1, store2, and store3.\\nIf the product is not available in a store, the price will be null in that store\\'s column.\\n \\n\\nWrite an SQL query to rearrange the Products table so that each row has (product_id, store, price). If a product is not available in a store, do not include a row with that product_id and store combination in the result table.\\n\\nReturn the result table in any order.\\n\\nThe query result format is in the following example:\\n\\n \\n\\nProducts table:\\n+------------+--------+--------+--------+\\n| product_id | store1 | store2 | store3 |\\n+------------+--------+--------+--------+\\n| 0          | 95     | 100    | 105    |\\n| 1          | 70     | null   | 80     |\\n+------------+--------+--------+--------+\\n\\nResult table:\\n+------------+--------+-------+\\n| product_id | store  | price |\\n+------------+--------+-------+\\n| 0          | store1 | 95    |\\n| 0          | store2 | 100   |\\n| 0          | store3 | 105   |\\n| 1          | store1 | 70    |\\n| 1          | store3 | 80    |\\n+------------+--------+-------+\\n\\nProduct 0 is available in all three stores with prices 95, 100, and 105 respectively.\\nProduct 1 is available in store1 with price 70 and store3 with price 80. The product is not available in store2.\\n```\n```SQL\\nselect product_id, \\'store1\\' as store, store1 as price from Products p \\nwhere store1 is not NULL\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from Products p \\nwhere store2 is not NULL\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from Products p \\nwhere store3 is not NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1118397,
                "title": "simple-mysql-solution-using-union-select",
                "content": "```\\n# Write your MySQL query statement below\\nSELECT product_id,\"store1\" as store,store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION SELECT product_id,\"store2\",store2\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION SELECT product_id,\"store3\",store3\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "solutionTags": [],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id,\"store1\" as store,store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION SELECT product_id,\"store2\",store2\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION SELECT product_id,\"store3\",store3\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3934345,
                "title": "pandas-simple-easy-solution-beginner-friendly",
                "content": "**\\uD83D\\uDD3C IF YOU FIND THIS POST HELPFUL PLEASE UPVOTE \\uD83D\\uDC4D**\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    result_rows = []\\n    \\n    for idx, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n        \\n        for store in [\\'store1\\', \\'store2\\', \\'store3\\']:\\n            price = row[store]\\n            \\n            if pd.notna(price):\\n                result_rows.append((product_id, store, price))\\n                \\n    result_df = pd.DataFrame(result_rows, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n    \\n    return result_df\\n```\\n**Thank you for reading! \\uD83D\\uDE04 Comment if you have any questions or feedback.**",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    result_rows = []\\n    \\n    for idx, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n        \\n        for store in [\\'store1\\', \\'store2\\', \\'store3\\']:\\n            price = row[store]\\n            \\n            if pd.notna(price):\\n                result_rows.append((product_id, store, price))\\n                \\n    result_df = pd.DataFrame(result_rows, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n    \\n    return result_df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3877546,
                "title": "mysql-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3854311,
                "title": "best-solutions-mysql-pandas-1-liner-beats-100",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    return pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n```",
                "solutionTags": [
                    "MySQL",
                    "Pandas"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    return pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3851957,
                "title": "pandas-two-solution",
                "content": "# Intuition\\nThe new version of pandas has a function ```pivot_longer()```, which will give a similar ```melt()``` result, but this simulator uses the old version of pandas. The code using ```pivot_longer()``` is below:\\n\\n```\\nproducts.pivot_longer(cols=[\"store1\", \"store2\", \"store3\"], \\n                      names_to=[\"store\", \"price\"])\\n```\\n\\n\\n\\n# Runtime\\n272 ms\\nBeats 100.00% of users with Pandas\\n\\n\\n# Code\\n\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    products = pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n    return products\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```pivot_longer()```\n```melt()```\n```pivot_longer()```\n```\\nproducts.pivot_longer(cols=[\"store1\", \"store2\", \"store3\"], \\n                      names_to=[\"store\", \"price\"])\\n```\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    products = pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n    return products\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2925657,
                "title": "correct-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below:-\\nSELECT product_id,\"store1\" as store,store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION SELECT product_id,\"store2\",store2\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION SELECT product_id,\"store3\",store3\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below:-\\nSELECT product_id,\"store1\" as store,store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION SELECT product_id,\"store2\",store2\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION SELECT product_id,\"store3\",store3\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2842307,
                "title": "453ms-solution-using-cross-join-lateral",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCROSS JOIN LATERAL\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect p.product_id, x.store, x.price\\nfrom Products p\\ncross join lateral (\\n    select store1, \\'store1\\' \\n    union all select store2, \\'store2\\'\\n    union all select store3, \\'store3\\'\\n) as x(price, store)\\nwhere price <> \\'0\\'\\norder by product_id ASC\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect p.product_id, x.store, x.price\\nfrom Products p\\ncross join lateral (\\n    select store1, \\'store1\\' \\n    union all select store2, \\'store2\\'\\n    union all select store3, \\'store3\\'\\n) as x(price, store)\\nwhere price <> \\'0\\'\\norder by product_id ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2748314,
                "title": "mysql-easy-level",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM products WHERE store3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM products WHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM products WHERE store3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2677371,
                "title": "mysql-solution",
                "content": "```\\nselect product_id, \"store1\" store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \"store2\" store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \"store3\" store, store3 as price from products where store3 is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \"store1\" store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \"store2\" store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \"store3\" store, store3 as price from products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2565288,
                "title": "simple-and-easy-sql-union-solution",
                "content": "```\\nselect product_id, \"store1\" as store , store1 as price from products \\nwhere store1 is not null union\\nselect product_id, \"store2\" as store ,store2 as price from products \\nwhere store2 is not null union\\nselect product_id, \"store3\" as store ,store3 as price from products \\nwhere store3 is not null\\norder by product_id;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \"store1\" as store , store1 as price from products \\nwhere store1 is not null union\\nselect product_id, \"store2\" as store ,store2 as price from products \\nwhere store2 is not null union\\nselect product_id, \"store3\" as store ,store3 as price from products \\nwhere store3 is not null\\norder by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2544897,
                "title": "mysql-solution",
                "content": "Let me know i\\'m not alone....\\n```\\nSelect product_id, \\n\\'store1\\' AS store,\\nstore1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSelect product_id, \\n\\'store2\\' AS store,\\nstore2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSelect product_id, \\n\\'store3\\' AS store,\\nstore3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSelect product_id, \\n\\'store1\\' AS store,\\nstore1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSelect product_id, \\n\\'store2\\' AS store,\\nstore2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSelect product_id, \\n\\'store3\\' AS store,\\nstore3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2527876,
                "title": "neat-and-easy-solution",
                "content": "**#Solution**\\n\\nselect * from (\\nselect product_id,\\'store1\\' as store, store1 as price from Products\\nunion \\nselect product_id,\\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from Products\\n) store where price is not null;",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "**#Solution**\\n\\nselect * from (\\nselect product_id,\\'store1\\' as store, store1 as price from Products\\nunion \\nselect product_id,\\'store2\\' as store, store2 as price from Products\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from Products\\n) store where price is not null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2513340,
                "title": "mssql-easy-solution-with-unpivot",
                "content": "```sql\\n-- using unpivot\\nselect product_id, store, price\\nfrom(\\n    select product_id, store1, store2, store3 from Products\\n    ) as p\\nunpivot(\\n          price for store in (store1,store2,store3)\\n    ) as pv",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```sql\\n-- using unpivot\\nselect product_id, store, price\\nfrom(\\n    select product_id, store1, store2, store3 from Products\\n    ) as p\\nunpivot(\\n          price for store in (store1,store2,store3)\\n    ) as pv",
                "codeTag": "Unknown"
            },
            {
                "id": 2427674,
                "title": "easy-to-understand-mysql-solution",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM products WHERE store3 IS NOT NULL",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2426458,
                "title": "simple-mysql-solution",
                "content": "```\\nselect product_id, \\'store1\\' as store, store1 as price \\nfrom products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price \\nfrom products where store2 is not null\\nunion \\nselect product_id, \\'store3\\' as store, store3 as price \\nfrom products where store3 is not null;",
                "solutionTags": [],
                "code": "```\\nselect product_id, \\'store1\\' as store, store1 as price \\nfrom products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price \\nfrom products where store2 is not null\\nunion \\nselect product_id, \\'store3\\' as store, store3 as price \\nfrom products where store3 is not null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2394749,
                "title": "ms-sql-server-union-vs-union-all",
                "content": "One way you can do it is using UNION, but I recommend UNION ALL here. \\nThe major difference between UNION and UNION ALL is that **UNION gets rid of duplicate records** whereas **UNION ALL takes all the records**. \\n\\nIn our scenario, there won\\'t be a situation where we are going to have duplicate records so using UNION and forcing the server to check for duplicates will be an extra overhead and will increase execution time.\\n\\nHere\\'s my script for the UNION ALL\\n\\n```\\nSELECT \\n    product_id, \\n    \\'store1\\' as store, \\n    store1 as price\\nfrom Products\\nwhere store1 is not null\\n\\nUNION ALL\\n\\nSELECT \\n    product_id, \\n    \\'store2\\' as store, \\n    store2 as price\\nfrom Products\\nwhere store2 is not null\\n\\nUNION ALL\\n\\nSELECT \\n    product_id, \\n    \\'store3\\' as store, \\n    store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "solutionTags": [
                    "MS SQL Server",
                    "Union Find"
                ],
                "code": "```\\nSELECT \\n    product_id, \\n    \\'store1\\' as store, \\n    store1 as price\\nfrom Products\\nwhere store1 is not null\\n\\nUNION ALL\\n\\nSELECT \\n    product_id, \\n    \\'store2\\' as store, \\n    store2 as price\\nfrom Products\\nwhere store2 is not null\\n\\nUNION ALL\\n\\nSELECT \\n    product_id, \\n    \\'store3\\' as store, \\n    store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2309829,
                "title": "easy-solution",
                "content": "SELECT Product_id, Store, Price\\nFrom Products\\nUNPIVOT\\n(\\nStore for price in (\\n[store1],[store2],[store3]\\n)\\n) as u\\n",
                "solutionTags": [],
                "code": "SELECT Product_id, Store, Price\\nFrom Products\\nUNPIVOT\\n(\\nStore for price in (\\n[store1],[store2],[store3]\\n)\\n) as u\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2202080,
                "title": "two-mysql-solutions",
                "content": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM\\n    Products\\nWHERE\\n    store1 IS NOT NULL\\nUNION\\n    SELECT\\n        product_id,\\n        \\'store2\\' AS store,\\n        store2 AS price\\n    FROM\\n        Products\\n    WHERE\\n        store2 IS NOT NULL\\nUNION\\n    SELECT\\n        product_id,\\n        \\'store3\\' AS store,\\n        store3 AS price\\n    FROM\\n        Products\\n    WHERE\\n        store3 IS NOT NULL;\\n```\\n\\n```\\nSELECT\\n    product_id,\\n    store,\\n    price\\nFROM\\n(\\n    SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products\\n    UNION \\n    SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products\\n    UNION\\n    SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products\\n) p\\nWHERE\\n    price IS NOT NULL;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM\\n    Products\\nWHERE\\n    store1 IS NOT NULL\\nUNION\\n    SELECT\\n        product_id,\\n        \\'store2\\' AS store,\\n        store2 AS price\\n    FROM\\n        Products\\n    WHERE\\n        store2 IS NOT NULL\\nUNION\\n    SELECT\\n        product_id,\\n        \\'store3\\' AS store,\\n        store3 AS price\\n    FROM\\n        Products\\n    WHERE\\n        store3 IS NOT NULL;\\n```\n```\\nSELECT\\n    product_id,\\n    store,\\n    price\\nFROM\\n(\\n    SELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products\\n    UNION \\n    SELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products\\n    UNION\\n    SELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products\\n) p\\nWHERE\\n    price IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2164592,
                "title": "solution-using-union",
                "content": "```\\nselect product_id,\\'store1\\' as store,store1 as price\\nfrom Products\\nwhere store1 is not null\\n\\n\\nunion\\n\\n\\nselect product_id,\\'store2\\' as store,store2 as price\\nfrom Products\\nwhere store2 is not null\\n\\n\\nunion\\n\\n\\nselect product_id,\\'store3\\' as store,store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id,\\'store1\\' as store,store1 as price\\nfrom Products\\nwhere store1 is not null\\n\\n\\nunion\\n\\n\\nselect product_id,\\'store2\\' as store,store2 as price\\nfrom Products\\nwhere store2 is not null\\n\\n\\nunion\\n\\n\\nselect product_id,\\'store3\\' as store,store3 as price\\nfrom Products\\nwhere store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2108053,
                "title": "easy-sql-query-beginner-friendly",
                "content": "```\\nselect product_id, \"store1\" as \\'store\\', store1 as \\'price\\'\\nfrom products where store1 is not null\\nunion\\nselect product_id, \"store2\" as \\'store\\', store2 as \\'price\\'\\nfrom products where store2 is not null\\nunion\\nselect product_id, \"store3\" as \\'store\\', store3 as \\'price\\'\\nfrom products where store3 is not null\\norder by product_id;\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id, \"store1\" as \\'store\\', store1 as \\'price\\'\\nfrom products where store1 is not null\\nunion\\nselect product_id, \"store2\" as \\'store\\', store2 as \\'price\\'\\nfrom products where store2 is not null\\nunion\\nselect product_id, \"store3\" as \\'store\\', store3 as \\'price\\'\\nfrom products where store3 is not null\\norder by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2101658,
                "title": "mysql-solution",
                "content": "```\\nselect product_id,\\'store1\\' as store,store1 as price from Products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from Products where store2 is not null \\nunion \\nselect product_id,\\'store3\\' as store,store3 as price from Products where store3 is not null",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2086800,
                "title": "very-easy-sql-query-using-union",
                "content": "```\\nselect product_id,\\'store1\\' as store,store1 as price from Products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from Products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from Products where store3 is not null```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect product_id,\\'store1\\' as store,store1 as price from Products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from Products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from Products where store3 is not null```",
                "codeTag": "Unknown"
            },
            {
                "id": 2078166,
                "title": "mysql-simple-solution-using-union-all",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION ALL \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION ALL \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION ALL\\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2069182,
                "title": "two-easy-approaches-using-union-and-unpivot-explained",
                "content": "There can be two approaches to the problem :\\n1. Using UNION \\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n```\\n\\n2. Using UNPIVOT : \\n\\n\\tUNPIVOT is a relational operator that accepts two columns, along with  a list of columns, and generates a row for each column specified in the list.\\n\\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS T\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n```\n```\\nSELECT \\n    product_id,\\n    store,\\n    price\\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1,store2,store3)\\n) AS T\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2050048,
                "title": "simple-mysql-solution",
                "content": "```\\nSelect product_id, \\'store1\\' As store, store1 As price From Products Where store1 Is Not null\\nUNION\\nSelect product_id, \\'store2\\' As store, store2 As price From Products Where store2 Is Not null\\nUNION\\nSelect product_id, \\'store3\\' As store, store3 As price From Products Where store3 Is Not null;\\n```",
                "solutionTags": [],
                "code": "```\\nSelect product_id, \\'store1\\' As store, store1 As price From Products Where store1 Is Not null\\nUNION\\nSelect product_id, \\'store2\\' As store, store2 As price From Products Where store2 Is Not null\\nUNION\\nSelect product_id, \\'store3\\' As store, store3 As price From Products Where store3 Is Not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2021714,
                "title": "simple-and-easiest-solution-using-union",
                "content": "SELECT PRODUCT_ID, \\'store1\\' AS \\'store\\' , STORE1 AS \\'PRICE\\' FROM PRODUCTS WHERE STORE1 IS NOT NULL\\nUNION\\nSELECT PRODUCT_ID, \\'store2\\' AS \\'store\\' , STORE2 AS \\'PRICE\\' FROM PRODUCTS WHERE STORE2 IS NOT NULL\\nUNION\\nSELECT PRODUCT_ID, \\'store3\\' AS \\'store\\' , STORE3 AS \\'PRICE\\' FROM PRODUCTS WHERE STORE3 IS NOT NULL",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1966143,
                "title": "easy-to-understand-sql",
                "content": "```\\n# Write your MySQL query statement below\\n(\\n    select\\n        product_id, \\'store1\\' as store, store1 as price\\n    from\\n        products\\n    where\\n        store1 is not null\\n )\\nunion\\n(\\n    select\\n        product_id, \\'store2\\' as store, store2 as price\\n    from\\n        products\\n    where\\n        store2 is not null\\n)\\nunion\\n(\\n    select\\n        product_id, \\'store3\\' as store, store3 as price\\n    from\\n        products\\n    where\\n        store3 is not null\\n)\\norder by\\n    product_id;\\n```\\nIf you have any **doubts**, feel **free to ask**...\\nIf you understand the **concept**. Don\\'t Forget to **upvote**\\n\\n\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n(\\n    select\\n        product_id, \\'store1\\' as store, store1 as price\\n    from\\n        products\\n    where\\n        store1 is not null\\n )\\nunion\\n(\\n    select\\n        product_id, \\'store2\\' as store, store2 as price\\n    from\\n        products\\n    where\\n        store2 is not null\\n)\\nunion\\n(\\n    select\\n        product_id, \\'store3\\' as store, store3 as price\\n    from\\n        products\\n    where\\n        store3 is not null\\n)\\norder by\\n    product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1934237,
                "title": "mysql-easy-solution-union",
                "content": "select product_id, \"store1\" as store, store1 as price from products\\nwhere store1 is not NULL\\nUNION\\nselect product_id, \"store2\" as store, store2 as price from products\\nwhere store2 is not NULL\\nUNION\\nselect product_id, \"store3\" as store, store3 as price from products\\nwhere store3 is not NULL",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1801582,
                "title": "simple-solution-96-faster",
                "content": "SELECT product_id,store,price FROM(\\nSELECT product_id,\\'store1\\' AS store , store1 AS price  FROM Products\\nUNION\\nSELECT product_id,\\'store2\\' AS store , store2 AS price  FROM Products\\nUNION\\nSELECT product_id,\\'store3\\' AS store , store3 AS price  FROM Products\\n) abc WHERE price IS NOT NULL \\n\\n",
                "solutionTags": [],
                "code": "SELECT product_id,store,price FROM(\\nSELECT product_id,\\'store1\\' AS store , store1 AS price  FROM Products\\nUNION\\nSELECT product_id,\\'store2\\' AS store , store2 AS price  FROM Products\\nUNION\\nSELECT product_id,\\'store3\\' AS store , store3 AS price  FROM Products\\n) abc WHERE price IS NOT NULL \\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1289222,
                "title": "mysql-union-all",
                "content": "SELECT \\n    product_id, \\n    \"store1\" as store,\\n    store1 as price\\nFROM Products\\nWHERE store1 is NOT NULL\\nUNION ALL\\n\\nSELECT \\n    product_id, \\n    \"store2\" as store,\\n    store2 as price\\nFROM Products\\nWHERE store2 is NOT NULL\\n\\n\\nUNION ALL\\nSELECT \\n    product_id, \\n    \"store3\" as store,\\n    store3 as price\\nFROM Products\\nWHERE store3 is NOT NULL",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1240754,
                "title": "unpivot",
                "content": "SELECT * FROM Products \\nUNPIVOT\\n(price\\n    for store in \\n    (store1 as \\'store1\\',\\n    store2 as \\'store2\\',\\n    store3 as \\'store3\\')\\n)",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "SELECT * FROM Products \\nUNPIVOT\\n(price\\n    for store in \\n    (store1 as \\'store1\\',\\n    store2 as \\'store2\\',\\n    store3 as \\'store3\\')\\n)",
                "codeTag": "Unknown"
            },
            {
                "id": 1158524,
                "title": "mysql-easy-solution-using-union",
                "content": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    product_id,\\n    \\'store1\\' AS store,\\n    store1 AS price\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    product_id,\\n    \\'store2\\' AS store,\\n    store2 AS price\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT\\n    product_id,\\n    \\'store3\\' AS store,\\n    store3 AS price\\nFROM Products\\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1129816,
                "title": "unpivot-mssql",
                "content": "Usage of PIVOT && UNPIVOT:\\nhttps://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot?view=sql-server-ver15\\n\\nSolution\\n```\\n/* Write your T-SQL query statement below */\\nSELECT product_id, store, price FROM Products \\nUNPIVOT\\n(\\n    price\\n    for store in ([store1], [store2], [store3])\\n) res\\n```",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nSELECT product_id, store, price FROM Products \\nUNPIVOT\\n(\\n    price\\n    for store in ([store1], [store2], [store3])\\n) res\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1122538,
                "title": "easy-and-simple-ms-sql-unpivot",
                "content": "Select product_id, store, price \\nFROM products\\nUNPIVOT\\n(\\nPrice\\nFOR store in ([store1],[store2],[store3])\\n)a",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "Select product_id, store, price \\nFROM products\\nUNPIVOT\\n(\\nPrice\\nFOR store in ([store1],[store2],[store3])\\n)a",
                "codeTag": "Unknown"
            },
            {
                "id": 4073028,
                "title": "pandas-easy-rearrange-products-table",
                "content": "[see the Successfully Accepted Submission](https://leetcode.com/submissions/detail/1055519739/)\\n\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we  create a Boolean Series that check if the values in the \"store1\", \"store2\" and \"store3\" column of the DataFrame products have a valid value.\\n        pExists1 = products[\\'store1\\'].notnull()\\n        pExists2 = products[\\'store2\\'].notnull()\\n        pExists3 = products[\\'store3\\'].notnull()\\n\\n    # The, we concatenate rows from the products DataFrame based on certain conditions and structure. Also, we reset the index of the resulting DataFrame so that it starts from 0, 1, 2, etc., instead of retaining the index values from the original DataFrames.\\n        concat_products = pd.concat([\\n            products.loc[pExists1, [\\'product_id\\']].assign(store = \\'store1\\', price = products[\\'store1\\']),\\n            products.loc[pExists2, [\\'product_id\\']].assign(store = \\'store2\\', price = products[\\'store2\\']),\\n            products.loc[pExists3, [\\'product_id\\']].assign(store = \\'store3\\', price = products[\\'store3\\'])\\n        ], ignore_index = True)\\n \\n        return concat_products\\n\\n```\\n\\n![image](https://assets.leetcode.com/users/images/f1fae832-506f-4d3e-90f1-7036514f2ec9_1695310040.1645045.jpeg)\\n",
                "solutionTags": [],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    \\n    # First, we  create a Boolean Series that check if the values in the \"store1\", \"store2\" and \"store3\" column of the DataFrame products have a valid value.\\n        pExists1 = products[\\'store1\\'].notnull()\\n        pExists2 = products[\\'store2\\'].notnull()\\n        pExists3 = products[\\'store3\\'].notnull()\\n\\n    # The, we concatenate rows from the products DataFrame based on certain conditions and structure. Also, we reset the index of the resulting DataFrame so that it starts from 0, 1, 2, etc., instead of retaining the index values from the original DataFrames.\\n        concat_products = pd.concat([\\n            products.loc[pExists1, [\\'product_id\\']].assign(store = \\'store1\\', price = products[\\'store1\\']),\\n            products.loc[pExists2, [\\'product_id\\']].assign(store = \\'store2\\', price = products[\\'store2\\']),\\n            products.loc[pExists3, [\\'product_id\\']].assign(store = \\'store3\\', price = products[\\'store3\\'])\\n        ], ignore_index = True)\\n \\n        return concat_products\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 4066880,
                "title": "very-easy-code-mysql",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id ,\\'store1\\' AS store,STORE1 AS price FROM PRODUCTS WHERE STORE1 IS NOT NULL\\nUNION\\nSELECT product_id ,\\'store2\\' AS store,store2 AS price FROM PRODUCTS WHERE STORE2 IS NOT NULL\\nUNION\\nSELECT product_id ,\\'store3\\' AS store,store3 AS price FROM PRODUCTS WHERE STORE3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id ,\\'store1\\' AS store,STORE1 AS price FROM PRODUCTS WHERE STORE1 IS NOT NULL\\nUNION\\nSELECT product_id ,\\'store2\\' AS store,store2 AS price FROM PRODUCTS WHERE STORE2 IS NOT NULL\\nUNION\\nSELECT product_id ,\\'store3\\' AS store,store3 AS price FROM PRODUCTS WHERE STORE3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943648,
                "title": "improved-complexity-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\nSELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products p1\\nwhere p1.store1 is not null\\nUNION\\nSELECT product_id, \\'store2\\', store2\\nFROM Products p2\\nwhere p2.store2 is not null\\nUNION \\nSELECT product_id, \\'store3\\', store3\\nFROM Products p3\\nwhere p3.store3 is not null\\n\\n/*UNION assumes its column names from the first query*/\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nSELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products p1\\nwhere p1.store1 is not null\\nUNION\\nSELECT product_id, \\'store2\\', store2\\nFROM Products p2\\nwhere p2.store2 is not null\\nUNION \\nSELECT product_id, \\'store3\\', store3\\nFROM Products p3\\nwhere p3.store3 is not null\\n\\n/*UNION assumes its column names from the first query*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3936787,
                "title": "using-melt-and-dropna",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    x = pd.melt(products, id_vars = [\"product_id\"], var_name = \"store\", value_name =\"price\").dropna(axis = 0)\\n    return x\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    x = pd.melt(products, id_vars = [\"product_id\"], var_name = \"store\", value_name =\"price\").dropna(axis = 0)\\n    return x\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3903496,
                "title": "self-explanatory-simple",
                "content": "\\r\\n\\r\\n# Code\\r\\n```\\r\\n# Write your MySQL query statement below\\r\\nSELECT product_id, \\r\\n\\'store1\\' AS store, \\r\\nstore1 AS price \\r\\nFROM products\\r\\nWHERE store1 \\r\\nIS NOT NULL\\r\\nUNION\\r\\nSELECT product_id, \\r\\n\\'store2\\' AS store,\\r\\nstore2 AS price\\r\\nFROM products\\r\\nWHERE store2\\r\\nIS NOT NULL\\r\\nUNION \\r\\nSELECT product_id,\\r\\n\\'store3\\' AS store,\\r\\nstore3 AS price\\r\\nFROM products\\r\\nWHERE store3\\r\\nIS NOT NULL\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\r\\n# Write your MySQL query statement below\\r\\nSELECT product_id, \\r\\n\\'store1\\' AS store, \\r\\nstore1 AS price \\r\\nFROM products\\r\\nWHERE store1 \\r\\nIS NOT NULL\\r\\nUNION\\r\\nSELECT product_id, \\r\\n\\'store2\\' AS store,\\r\\nstore2 AS price\\r\\nFROM products\\r\\nWHERE store2\\r\\nIS NOT NULL\\r\\nUNION \\r\\nSELECT product_id,\\r\\n\\'store3\\' AS store,\\r\\nstore3 AS price\\r\\nFROM products\\r\\nWHERE store3\\r\\nIS NOT NULL\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3890572,
                "title": "the-solution-of-the-problem-using-a-command-that-in-pandas-library",
                "content": "\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Saves output in new DataFrame\\n    df = (\\n        # 2. .melt() lets you unpivot the table\\n        products.melt(\\n            # 3. Columns you want to leave unchanged\\n            id_vars = [\\'product_id\\'],\\n            # 4. Columns you want to unpivot\\n            value_vars = [\\'store1\\', \\'store2\\', \\'store3\\'], \\n            # 5. This names the store column\\n            var_name = \\'store\\',\\n            # 6. This names the price column\\n            value_name = \\'price\\'\\n            )\\n        # 7. .dropna() lets you drop the null values\\n        .dropna() \\n    )\\n    return df\\n```",
                "solutionTags": [
                    "Python3",
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    # 1. Saves output in new DataFrame\\n    df = (\\n        # 2. .melt() lets you unpivot the table\\n        products.melt(\\n            # 3. Columns you want to leave unchanged\\n            id_vars = [\\'product_id\\'],\\n            # 4. Columns you want to unpivot\\n            value_vars = [\\'store1\\', \\'store2\\', \\'store3\\'], \\n            # 5. This names the store column\\n            var_name = \\'store\\',\\n            # 6. This names the price column\\n            value_name = \\'price\\'\\n            )\\n        # 7. .dropna() lets you drop the null values\\n        .dropna() \\n    )\\n    return df\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3887534,
                "title": "simple-and-detailed-code-without-melt-func",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    result_data = []\\n\\n    # Iterate through each row in the DataFrame\\n    for index, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n        if row[\\'store1\\'] is not None:\\n            result_data.append([product_id, \\'store1\\', row[\\'store1\\']])\\n        if row[\\'store2\\'] is not None:\\n            result_data.append([product_id, \\'store2\\', row[\\'store2\\']])\\n        if row[\\'store3\\'] is not None:\\n            result_data.append([product_id, \\'store3\\', row[\\'store3\\']])\\n\\n    # Create a DataFrame from the rearranged data\\n    result_df = pd.DataFrame(result_data, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n\\n    # Display the result\\n    return result_df.sort_values(by=\\'store\\').dropna()\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    result_data = []\\n\\n    # Iterate through each row in the DataFrame\\n    for index, row in products.iterrows():\\n        product_id = row[\\'product_id\\']\\n        if row[\\'store1\\'] is not None:\\n            result_data.append([product_id, \\'store1\\', row[\\'store1\\']])\\n        if row[\\'store2\\'] is not None:\\n            result_data.append([product_id, \\'store2\\', row[\\'store2\\']])\\n        if row[\\'store3\\'] is not None:\\n            result_data.append([product_id, \\'store3\\', row[\\'store3\\']])\\n\\n    # Create a DataFrame from the rearranged data\\n    result_df = pd.DataFrame(result_data, columns=[\\'product_id\\', \\'store\\', \\'price\\'])\\n\\n    # Display the result\\n    return result_df.sort_values(by=\\'store\\').dropna()\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3886389,
                "title": "using-pandas-built-in-melt-method",
                "content": "# Intuition\\nRefer here for documentation of [melt](https://pandas.pydata.org/docs/reference/api/pandas.melt.html)\\n\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    melted_df = products.melt(id_vars=\\'product_id\\', var_name=\\'store\\',value_name=\\'price\\')\\n    melted_df = melted_df.dropna()  # Drop rows with missing prices\\n    return melted_df\\n\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    melted_df = products.melt(id_vars=\\'product_id\\', var_name=\\'store\\',value_name=\\'price\\')\\n    melted_df = melted_df.dropna()  # Drop rows with missing prices\\n    return melted_df\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3833668,
                "title": "pandas-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    res = pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n    return res\\n```",
                "solutionTags": [
                    "Pandas"
                ],
                "code": "```\\nimport pandas as pd\\n\\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\\n    res = pd.melt(products, id_vars=\\'product_id\\', var_name=\\'store\\', value_name=\\'price\\').dropna()\\n    return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3499241,
                "title": "easy-1-shot-solution-explained",
                "content": "# Intuition\\n1. It is to use union operation and takind store 1 and store prices in a row which is we use rows store1, store2 and store3 in row price .\\n2. So we take store 1 as a name to be stored in store column with value of store1 and others respectively and also taking in the condition that it is not null\\n\\n\\n# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store ,store1 as price \\nfrom products\\nwhere store1 is NOT NULL\\nunion\\nselect product_id, \\'store2\\' as store ,store2 as price \\nfrom products\\nwhere store2 is NOT NULL\\nunion\\nselect product_id, \\'store3\\' as store ,store3 as price \\nfrom products\\nwhere store3 is NOT NULL\\norder by product_id\\n```\\n## Hope It Helped",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \\'store1\\' as store ,store1 as price \\nfrom products\\nwhere store1 is NOT NULL\\nunion\\nselect product_id, \\'store2\\' as store ,store2 as price \\nfrom products\\nwhere store2 is NOT NULL\\nunion\\nselect product_id, \\'store3\\' as store ,store3 as price \\nfrom products\\nwhere store3 is NOT NULL\\norder by product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3098402,
                "title": "using-union-beats-70",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nselect product_id ,\\'store1\\' as store, store1 as price from Products where store1 is not null\\nunion all\\nselect product_id ,\\'store2\\' as store, store2 as price from Products where store2 is not null\\nunion all\\nselect product_id ,\\'store3\\' as store, store3 as price from Products where store3 is not null\\norder by product_id,store\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\nselect product_id ,\\'store1\\' as store, store1 as price from Products where store1 is not null\\nunion all\\nselect product_id ,\\'store2\\' as store, store2 as price from Products where store2 is not null\\nunion all\\nselect product_id ,\\'store3\\' as store, store3 as price from Products where store3 is not null\\norder by product_id,store\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3080984,
                "title": "mysql-solution",
                "content": "# Code\\n```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price from Products\\nwhere store1 is not null\\nunion\\nselect product_id, \"store2\" as store, store2 as price from Products\\nwhere store2 is not null\\nunion\\nselect product_id, \"store3\" as store, store3 as price from Products\\nwhere store3 is not null;\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Database"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price from Products\\nwhere store1 is not null\\nunion\\nselect product_id, \"store2\" as store, store2 as price from Products\\nwhere store2 is not null\\nunion\\nselect product_id, \"store3\" as store, store3 as price from Products\\nwhere store3 is not null;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3056006,
                "title": "three-two-one-go",
                "content": "```\\r\\n# s t o r e 1\\r\\nSELECT product_id, \\'store1\\' as store, store1 as price \\r\\nFROM Products\\r\\nWHERE store1 is not null \\r\\n\\r\\nunion\\r\\n\\r\\n# s t o r e 2\\r\\nSELECT product_id, \\'store2\\' as store, store2 as price \\r\\nFROM Products\\r\\nWHERE store2 is not null \\r\\n\\r\\nunion\\r\\n\\r\\n# s t o r e 3\\r\\nSELECT product_id, \\'store3\\' as store, store3 as price \\r\\nFROM Products\\r\\nWHERE store3 is not null \\r\\n\\r\\n\\r\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\r\\n# s t o r e 1\\r\\nSELECT product_id, \\'store1\\' as store, store1 as price \\r\\nFROM Products\\r\\nWHERE store1 is not null \\r\\n\\r\\nunion\\r\\n\\r\\n# s t o r e 2\\r\\nSELECT product_id, \\'store2\\' as store, store2 as price \\r\\nFROM Products\\r\\nWHERE store2 is not null \\r\\n\\r\\nunion\\r\\n\\r\\n# s t o r e 3\\r\\nSELECT product_id, \\'store3\\' as store, store3 as price \\r\\nFROM Products\\r\\nWHERE store3 is not null \\r\\n\\r\\n\\r\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2933907,
                "title": "easiest-and-optimised-soln",
                "content": "\\n\\n# Code\\n```\\nselect * from\\n(SELECT product_id,\"store1\" as store,store1 as price FROM Products\\nUNION ALL\\nSELECT product_id,\"store2\" as store,store2 as price FROM Products\\nUNION ALL\\nSELECT product_id,\"store3\" as store,store3 as price FROM Products\\n)AS tt\\nwhere tt.price is not NULL;\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nselect * from\\n(SELECT product_id,\"store1\" as store,store1 as price FROM Products\\nUNION ALL\\nSELECT product_id,\"store2\" as store,store2 as price FROM Products\\nUNION ALL\\nSELECT product_id,\"store3\" as store,store3 as price FROM Products\\n)AS tt\\nwhere tt.price is not NULL;\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2899220,
                "title": "mysql-union",
                "content": "https://leetcode.com/submissions/detail/857847975/\\n```\\n# Write your MySQL query statement below\\n(\\n    select product_id, \\'store1\\' as store, store1 as price\\n    from Products\\n    where store1 is not null\\n)\\nunion\\n(\\n    select product_id, \\'store2\\' as store, store2 as price\\n    from Products\\n    where store2 is not null\\n)\\nunion\\n(\\n    select product_id, \\'store3\\' as store, store3 as price\\n    from Products\\n    where store3 is not null\\n)\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n(\\n    select product_id, \\'store1\\' as store, store1 as price\\n    from Products\\n    where store1 is not null\\n)\\nunion\\n(\\n    select product_id, \\'store2\\' as store, store2 as price\\n    from Products\\n    where store2 is not null\\n)\\nunion\\n(\\n    select product_id, \\'store3\\' as store, store3 as price\\n    from Products\\n    where store3 is not null\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2805924,
                "title": "easy-solution",
                "content": "\\n# Code\\n```\\n# Write your MySQL query statement below\\nSELECT product_id, \"store1\" as store, store1 as price\\nFROM Products\\nWHERE store1 is not null\\nUNION\\nSELECT product_id, \"store2\" as store, store2 as price\\nFROM Products\\nWHERE store2 is not null\\nUNION\\nSELECT product_id, \"store3\" as store, store3 as price\\nFROM Products\\nWHERE store3 is not null\\n\\n\\n\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nSELECT product_id, \"store1\" as store, store1 as price\\nFROM Products\\nWHERE store1 is not null\\nUNION\\nSELECT product_id, \"store2\" as store, store2 as price\\nFROM Products\\nWHERE store2 is not null\\nUNION\\nSELECT product_id, \"store3\" as store, store3 as price\\nFROM Products\\nWHERE store3 is not null\\n\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2619381,
                "title": "the-simple-solution",
                "content": "```\\nwith T as (\\n    select product_id, \\n        \"store1\" as store,\\n        store1 as price\\n    from Products\\n    union\\n    select product_id, \\n        \"store2\" as store,\\n        store2 as price\\n    from Products\\n    union\\n    select product_id, \\n        \"store3\" as store,\\n        store3 as price\\n    from Products)\\n    \\nselect *\\nfrom T\\nwhere price is not null\\n```",
                "solutionTags": [],
                "code": "```\\nwith T as (\\n    select product_id, \\n        \"store1\" as store,\\n        store1 as price\\n    from Products\\n    union\\n    select product_id, \\n        \"store2\" as store,\\n        store2 as price\\n    from Products\\n    union\\n    select product_id, \\n        \"store3\" as store,\\n        store3 as price\\n    from Products)\\n    \\nselect *\\nfrom T\\nwhere price is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2605842,
                "title": "mysql-559ms-beginner-union-rearrange-products-table",
                "content": "**please upvote**\\n\\n**Most easy solution**\\n\\n```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price \\nFROM Products \\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store2\\' AS store, store2 AS price \\nFROM Products \\nWHERE store2 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id, \\'store3\\' AS store, store3 AS price \\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2592550,
                "title": "easy-and-simple-using-union",
                "content": "```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price\\nfrom products \\nwhere store1 is not null \\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom products \\nwhere store2 is not null \\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom products \\nwhere store3 is not null ;",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id, \"store1\" as store, store1 as price\\nfrom products \\nwhere store1 is not null \\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom products \\nwhere store2 is not null \\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom products \\nwhere store3 is not null ;",
                "codeTag": "Unknown"
            },
            {
                "id": 2578423,
                "title": "mysql-solution-easy-understanding-union",
                "content": "```\\n# Write your MySQL query statement below\\nselect product_id,\\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from products where store3 is not null\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n# Write your MySQL query statement below\\nselect product_id,\\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store, store3 as price from products where store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2563371,
                "title": "using-unpivot-to-flip-in-sql-server",
                "content": "**Upvote if you feel it easy :)**\\n\\nUsing UNPIVOT operator to flip store columns into rows.\\n```\\nSELECT product_id, store, price\\nFROM Products\\nUNPIVOT\\n(\\n    price\\n    FOR store in (store1, Store2, store3)\\n) U;\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\nSELECT product_id, store, price\\nFROM Products\\nUNPIVOT\\n(\\n    price\\n    FOR store in (store1, Store2, store3)\\n) U;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2552117,
                "title": "mysql-union",
                "content": "```\\nselect product_id, \"store1\" as store, store1 as price\\nfrom Products where not store1 <=> null\\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom Products where not store2 <=> null\\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom Products where not store3 <=> null\\n\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \"store1\" as store, store1 as price\\nfrom Products where not store1 <=> null\\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom Products where not store2 <=> null\\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom Products where not store3 <=> null\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2538549,
                "title": "mysql-solution-using-union",
                "content": "```\\n# Write your MySQL query statement below\\n\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 IS NOT null\\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 IS NOT null\\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 IS NOT null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\n# Write your MySQL query statement below\\n\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 IS NOT null\\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 IS NOT null\\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 IS NOT null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2530814,
                "title": "mysql-easy-solution",
                "content": "# Write your MySQL query statement below\\nwith al as (\\nselect product_id, \"store1\" as store,\\n        store1 as price\\nfrom products\\nunion all\\nselect product_id, \"store2\" as store,\\n        store2 as price\\nfrom products\\nunion all\\nselect product_id, \"store3\" as store,\\n       store3 as price\\nfrom products)\\n\\nselect product_id,store,price\\nfrom al\\nwhere price is not null\\n\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "# Write your MySQL query statement below\\nwith al as (\\nselect product_id, \"store1\" as store,\\n        store1 as price\\nfrom products\\nunion all\\nselect product_id, \"store2\" as store,\\n        store2 as price\\nfrom products\\nunion all\\nselect product_id, \"store3\" as store,\\n       store3 as price\\nfrom products)\\n\\nselect product_id,store,price\\nfrom al\\nwhere price is not null\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2508284,
                "title": "mysql-solution-clean-fast-and-easy",
                "content": "**Please UPVOOTE**\\n\\n```\\n\\tSELECT \\n\\t\\tproduct_id,\\n\\t\\t\\'store1\\' AS store,\\n\\t\\tstore1 AS price \\n\\tFROM Products\\n\\tWHERE \\n\\t\\tstore1 IS NOT NULL\\nUNION\\n\\tSELECT \\n\\t\\tproduct_id,\\n\\t\\t\\'store2\\' AS store,\\n\\t\\tstore2 AS price \\n\\tFROM Products\\n\\tWHERE \\n\\tstore2 IS NOT NULL\\nUNION\\n\\t\\tSELECT \\n\\t\\t\\tproduct_id,\\n\\t\\t\\t\\'store3\\' AS store,\\n\\t\\t\\tstore3 AS price \\n\\t\\tFROM Products\\n\\tWHERE \\n\\t\\tstore3 IS NOT NULL\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\n\\tSELECT \\n\\t\\tproduct_id,\\n\\t\\t\\'store1\\' AS store,\\n\\t\\tstore1 AS price \\n\\tFROM Products\\n\\tWHERE \\n\\t\\tstore1 IS NOT NULL\\nUNION\\n\\tSELECT \\n\\t\\tproduct_id,\\n\\t\\t\\'store2\\' AS store,\\n\\t\\tstore2 AS price \\n\\tFROM Products\\n\\tWHERE \\n\\tstore2 IS NOT NULL\\nUNION\\n\\t\\tSELECT \\n\\t\\t\\tproduct_id,\\n\\t\\t\\t\\'store3\\' AS store,\\n\\t\\t\\tstore3 AS price \\n\\t\\tFROM Products\\n\\tWHERE \\n\\t\\tstore3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2503707,
                "title": "postgresql-unnest-array",
                "content": "```\\nWITH t AS (\\n        SELECT product_id,\\n                UNNEST(ARRAY[\\'store1\\', \\'store2\\', \\'store3\\']) AS store,\\n                UNNEST(ARRAY[store1, store2, store3]) AS price\\n        FROM Products\\n        )\\nSELECT * FROM t WHERE t.price IS NOT NULL\\n```\\n\\nThis would be a lot prettier if I didn\\'t need to create a temp table in order to filter out the nulls. If someone has a suggestion, please, suggest away!",
                "solutionTags": [],
                "code": "```\\nWITH t AS (\\n        SELECT product_id,\\n                UNNEST(ARRAY[\\'store1\\', \\'store2\\', \\'store3\\']) AS store,\\n                UNNEST(ARRAY[store1, store2, store3]) AS price\\n        FROM Products\\n        )\\nSELECT * FROM t WHERE t.price IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2503685,
                "title": "postgresql-cross-join-lateral",
                "content": "```\\nSELECT p.product_id, t.*\\nFROM Products p\\n  CROSS JOIN LATERAL (\\n     VALUES \\n       (\\'store1\\', p.store1),\\n       (\\'store2\\', p.store2),\\n       (\\'store3\\', p.store3)\\n  ) AS t(store, price)\\n WHERE price IS NOT NULL\\n ```\\n \\nThis solution was inspired by the article [Unpivot with Postgres](https://blog.sql-workbench.eu/post/unpivot-with-postgres/). Unfortunately, I still don\\'t quite understand what\\'s going on with lateral joins.",
                "solutionTags": [],
                "code": "```\\nSELECT p.product_id, t.*\\nFROM Products p\\n  CROSS JOIN LATERAL (\\n     VALUES \\n       (\\'store1\\', p.store1),\\n       (\\'store2\\', p.store2),\\n       (\\'store3\\', p.store3)\\n  ) AS t(store, price)\\n WHERE price IS NOT NULL\\n ```",
                "codeTag": "Unknown"
            },
            {
                "id": 2483111,
                "title": "mysql-union",
                "content": "```\\nSELECT product_id, \\'store1\\' as store, store1 as price FROM Products where store1 is not null UNION\\nSELECT product_id, \\'store2\\' as store, store2 as price FROM Products where store2 is not null UNION\\nSELECT product_id, \\'store3\\' as store, store3 as price FROM Products where store3 is not null \\n```",
                "solutionTags": [
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' as store, store1 as price FROM Products where store1 is not null UNION\\nSELECT product_id, \\'store2\\' as store, store2 as price FROM Products where store2 is not null UNION\\nSELECT product_id, \\'store3\\' as store, store3 as price FROM Products where store3 is not null \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2465723,
                "title": "mysql-solution-uaing-union",
                "content": "```\\nselect * from\\n(\\nselect product_id,\\'store1\\' as store ,store1 as price from products \\nunion  \\nselect product_id,\\'store2\\' as store ,store2 as price from products \\nunion  \\nselect product_id,\\'store3\\' as store ,store3 as price from products\\n)temp\\nwhere temp.price is not null;\\n",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect * from\\n(\\nselect product_id,\\'store1\\' as store ,store1 as price from products \\nunion  \\nselect product_id,\\'store2\\' as store ,store2 as price from products \\nunion  \\nselect product_id,\\'store3\\' as store ,store3 as price from products\\n)temp\\nwhere temp.price is not null;\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2454696,
                "title": "mysql-solution",
                "content": "```\\nselect\\n    product_id,\\n    \\'store1\\' as store,\\n    store1 as price\\nfrom products\\nwhere store1 is not null\\nunion\\nselect\\n    product_id,\\n    \\'store2\\' as store,\\n    store2 as price\\nfrom products\\nwhere store2 is not null\\nunion\\nselect\\n    product_id,\\n    \\'store3\\' as store,\\n    store3 as price\\nfrom products\\nwhere store3 is not null\\n```",
                "solutionTags": [],
                "code": "```\\nselect\\n    product_id,\\n    \\'store1\\' as store,\\n    store1 as price\\nfrom products\\nwhere store1 is not null\\nunion\\nselect\\n    product_id,\\n    \\'store2\\' as store,\\n    store2 as price\\nfrom products\\nwhere store2 is not null\\nunion\\nselect\\n    product_id,\\n    \\'store3\\' as store,\\n    store3 as price\\nfrom products\\nwhere store3 is not null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2431881,
                "title": "easy-solution-union-and-order-by",
                "content": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL UNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL UNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL  ORDER BY 1,2 ASC\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL UNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL UNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL  ORDER BY 1,2 ASC\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2410663,
                "title": "mysql-easy-and-intutive-approach",
                "content": "(select product_id, \"store1\" store ,store1 price from Products where store1 is not null\\n    union\\nselect product_id, \"store2\" store ,store2 price from Products where store2 is not null)\\n    union\\nselect product_id, \"store3\" store ,store3 price from Products where store3 is not null\\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "(select product_id, \"store1\" store ,store1 price from Products where store1 is not null\\n    union\\nselect product_id, \"store2\" store ,store2 price from Products where store2 is not null)\\n    union\\nselect product_id, \"store3\" store ,store3 price from Products where store3 is not null\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2408658,
                "title": "ms-sql-one-liner-w-unpivot",
                "content": "`SELECT product_id, store, price FROM Products UNPIVOT (price FOR store IN (store1, store2, store3)) AS x`",
                "solutionTags": [],
                "code": "`SELECT product_id, store, price FROM Products UNPIVOT (price FOR store IN (store1, store2, store3)) AS x`",
                "codeTag": "Unknown"
            },
            {
                "id": 2385562,
                "title": "rearrange-product-tables",
                "content": "```\\nSELECT product_id,\\'store1\\' as store, store1 as price\\nFROM Products \\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id,\\'store2\\' as store, store2 as price\\nFROM Products \\nWHERE store2 IS NOT NULL\\n\\nUNION \\n\\nSELECT product_id,\\'store3\\' as store, store3 as price\\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "solutionTags": [
                    "Union Find"
                ],
                "code": "```\\nSELECT product_id,\\'store1\\' as store, store1 as price\\nFROM Products \\nWHERE store1 IS NOT NULL\\n\\nUNION\\n\\nSELECT product_id,\\'store2\\' as store, store2 as price\\nFROM Products \\nWHERE store2 IS NOT NULL\\n\\nUNION \\n\\nSELECT product_id,\\'store3\\' as store, store3 as price\\nFROM Products \\nWHERE store3 IS NOT NULL\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2378018,
                "title": "single-where-with-union-yes",
                "content": "```\\nselect * from (\\n    select product_id, \\'store1\\' as store, store1 as price from products \\n    union\\n    select product_id, \\'store2\\' as store, store2 as price from products \\n    union\\n    select product_id, \\'store3\\' as store, store3 as price from products \\n    order by 1) as U\\nwhere U.price is not null\\n;\\n```",
                "solutionTags": [],
                "code": "```\\nselect * from (\\n    select product_id, \\'store1\\' as store, store1 as price from products \\n    union\\n    select product_id, \\'store2\\' as store, store2 as price from products \\n    union\\n    select product_id, \\'store3\\' as store, store3 as price from products \\n    order by 1) as U\\nwhere U.price is not null\\n;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2342445,
                "title": "oracle-simple-solution-with-unpivot",
                "content": "\\nRuntime 698 ms\\nBeats 94.78%\\n\\n# Code\\n```\\n/* Write your PL/SQL query statement below */\\n\\n\\nSELECT * FROM Products\\nUNPIVOT(\\n    price   -- unpivot_clause\\n    FOR store  --  unpivot_for_clause\\n    IN ( -- unpivot_in_clause\\n        store1  AS \\'store1\\', \\n        store2  AS \\'store2\\', \\n        store3  AS \\'store3\\'\\n    )\\n)\\n```",
                "solutionTags": [
                    "Oracle"
                ],
                "code": "```\\n/* Write your PL/SQL query statement below */\\n\\n\\nSELECT * FROM Products\\nUNPIVOT(\\n    price   -- unpivot_clause\\n    FOR store  --  unpivot_for_clause\\n    IN ( -- unpivot_in_clause\\n        store1  AS \\'store1\\', \\n        store2  AS \\'store2\\', \\n        store3  AS \\'store3\\'\\n    )\\n)\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2333188,
                "title": "easiest-solution",
                "content": "```\\nselect product_id,\\'store1\\' as store,store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from products where store3 is not null",
                "solutionTags": [
                    "MySQL",
                    "MS SQL Server"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2325618,
                "title": "mysql-solution-with-union",
                "content": "```\\nselect product_id, \\'store1\\' as \\'store\\', store1 \\nas price\\nfrom products \\nwhere store1 is not null\\n\\nunion\\n\\nselect product_id, \\'store2\\' as \\'store\\', store2 \\nas price\\nfrom products \\nwhere store2 is not null\\n\\nunion\\n\\nselect product_id, \\'store3\\' as \\'store\\', store3 \\nas price\\nfrom products \\nwhere store3 is not null\\n\\norder by product_id, store\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nselect product_id, \\'store1\\' as \\'store\\', store1 \\nas price\\nfrom products \\nwhere store1 is not null\\n\\nunion\\n\\nselect product_id, \\'store2\\' as \\'store\\', store2 \\nas price\\nfrom products \\nwhere store2 is not null\\n\\nunion\\n\\nselect product_id, \\'store3\\' as \\'store\\', store3 \\nas price\\nfrom products \\nwhere store3 is not null\\n\\norder by product_id, store\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2317322,
                "title": "use-union-all-instead-of-union",
                "content": "The difference between Union and Union All is that Union extracts the rows that are being specified in the query while Union All extracts all the rows including the duplicates (repeated values) from both the queries.\\n\\nUseful if multiple stores have same prices.\\n```\\n/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as [store], store1 as [price]\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store2\\' as [store], store2 as [price]\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store3\\' as [store], store3 as [price]\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "solutionTags": [
                    "MS SQL Server"
                ],
                "code": "```\\n/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as [store], store1 as [price]\\nFROM Products\\nWHERE store1 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store2\\' as [store], store2 as [price]\\nFROM Products\\nWHERE store2 IS NOT NULL\\n\\nUNION ALL\\n\\nSELECT product_id, \\'store3\\' as [store], store3 as [price]\\nFROM Products\\nWHERE store3 IS NOT NULL\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2305072,
                "title": "mysql-solution-runtime-448-ms-faster-than-88-85",
                "content": "```\\nselect product_id, \"store1\" as store, store1 as price\\nfrom products \\nwhere store1 IS NOT NULL\\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom products \\nwhere store2 IS NOT NULL\\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom products \\nwhere store3 IS NOT NULL\\norder by product_id;",
                "solutionTags": [],
                "code": "```\\nselect product_id, \"store1\" as store, store1 as price\\nfrom products \\nwhere store1 IS NOT NULL\\nunion\\nselect product_id, \"store2\" as store, store2 as price\\nfrom products \\nwhere store2 IS NOT NULL\\nunion\\nselect product_id, \"store3\" as store, store3 as price\\nfrom products \\nwhere store3 IS NOT NULL\\norder by product_id;",
                "codeTag": "Unknown"
            },
            {
                "id": 2285389,
                "title": "sql-for-dummies",
                "content": "\\tselect product_id, store, price\\n\\tfrom (\\n\\t\\tselect product_id, \\'store1\\' as store, store1 as price from Products\\n\\t\\tunion \\n\\t\\tselect product_id, \\'store2\\' as store, store2 as price from Products\\n\\t\\tunion\\n\\t\\tselect product_id, \\'store3\\' as store, store3 as price from Products\\n\\t) p\\n\\twhere\\n\\t\\tprice is not null;",
                "solutionTags": [],
                "code": "\\tselect product_id, store, price\\n\\tfrom (\\n\\t\\tselect product_id, \\'store1\\' as store, store1 as price from Products\\n\\t\\tunion \\n\\t\\tselect product_id, \\'store2\\' as store, store2 as price from Products\\n\\t\\tunion\\n\\t\\tselect product_id, \\'store3\\' as store, store3 as price from Products\\n\\t) p\\n\\twhere\\n\\t\\tprice is not null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2280528,
                "title": "1795-rearrange-products-table",
                "content": "```\\nSELECT * FROM \\n(\\n      SELECT product_id, \\'store1\\' store, store1 price from Products\\n\\t  UNION\\n\\t  SELECT product_id, \\'store2\\' store, store2 price from Products\\n\\t  UNION\\n\\t  SELECT product_id, \\'store3\\' store, store3 price from Products\\n) a\\nWHERE price is not null; \\n```\\n\\nApplicable on MySQL only. \\nAll conditions are satisfied.\\nThank you.",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSELECT * FROM \\n(\\n      SELECT product_id, \\'store1\\' store, store1 price from Products\\n\\t  UNION\\n\\t  SELECT product_id, \\'store2\\' store, store2 price from Products\\n\\t  UNION\\n\\t  SELECT product_id, \\'store3\\' store, store3 price from Products\\n) a\\nWHERE price is not null; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2265841,
                "title": "1795-rearrange-products-table",
                "content": "```\\nSELECT  product_id, store1\\' as store, store1 price\\nFROM Products WHERE store1 IS NOT null\\n\\nUNION\\n\\nSELECT  product_id, \\'store2\\' as store, store2 price\\nFROM Products WHERE store2 IS NOT null\\n\\nUNION\\n\\nSELECT  product_id, \\'store3\\' as store, store3 price\\nFROM Products WHERE store3 IS NOT null\\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT  product_id, store1\\' as store, store1 price\\nFROM Products WHERE store1 IS NOT null\\n\\nUNION\\n\\nSELECT  product_id, \\'store2\\' as store, store2 price\\nFROM Products WHERE store2 IS NOT null\\n\\nUNION\\n\\nSELECT  product_id, \\'store3\\' as store, store3 price\\nFROM Products WHERE store3 IS NOT null\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2255431,
                "title": "why-this-union-case-when-still-returns-null",
                "content": "This is my submission, and I\\'m wondering why having included IS NOT NULL condition still returns the table with null values in?\\n\\nSELECT product_id,\\n    CASE WHEN store1 IS NOT NULL THEN \\'store1\\' END as \\'store\\' , \\n    CASE WHEN store1 IS NOT NULL THEN store1 END as \\'price\\'\\nFROM Products\\nUNION\\nSELECT product_id,\\n    CASE WHEN store2 IS NOT NULL THEN \\'store2\\' END as \\'store\\' , \\n    CASE WHEN store2 IS NOT NULL THEN store2 END as \\'price\\'\\nFROM Products\\nUNION\\nSELECT product_id,\\n    CASE WHEN store3 IS NOT NULL THEN \\'store3\\' END as \\'store\\' , \\n    CASE WHEN store3 IS NOT NULL THEN store3 END as \\'price\\'\\nFROM Products",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2247867,
                "title": "easy-approach-union-faster",
                "content": "```\\nSelect product_id, \\'store1\\' as store , store1 as price from products where store1 is not null \\nunion\\nSelect product_id, \\'store2\\' as store , store2 as price from products where store2 is not null\\nunion\\nSelect product_id, \\'store3\\' as store , store3 as price from products where store3 is not null;\\n```",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "```\\nSelect product_id, \\'store1\\' as store , store1 as price from products where store1 is not null \\nunion\\nSelect product_id, \\'store2\\' as store , store2 as price from products where store2 is not null\\nunion\\nSelect product_id, \\'store3\\' as store , store3 as price from products where store3 is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2239472,
                "title": "elegant",
                "content": "\\n\\nselect  product_id , \"store1\" as store , store1 as price \\nfrom Products where store1 is not null\\nUnion\\nselect  product_id , \"store2\" as store , store2 as price \\nfrom Products where store2 is not  null\\nUnion\\nselect  product_id , \"store3\" as store , store3 as price \\nfrom Products where store3 is not  null",
                "solutionTags": [],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 2148489,
                "title": "ms-sql-unpivot",
                "content": "/* Write your T-SQL query statement below */\\nSELECT product_id, store, price\\nFROM\\n(\\n  SELECT * \\n  FROM Products\\n) AS cp\\nUNPIVOT \\n(  \\n  price FOR store IN (store1, store2, store3)\\n) AS up",
                "solutionTags": [],
                "code": "/* Write your T-SQL query statement below */\\nSELECT product_id, store, price\\nFROM\\n(\\n  SELECT * \\n  FROM Products\\n) AS cp\\nUNPIVOT \\n(  \\n  price FOR store IN (store1, store2, store3)\\n) AS up",
                "codeTag": "Unknown"
            },
            {
                "id": 2118288,
                "title": "oracle-solution-unpivot",
                "content": "```\\n/* Write your PL/SQL query statement below */\\nselect *\\nfrom Products\\nunpivot (\\n    price\\n    for store\\n    in (\\n        store1 as \\'store1\\',\\n        store2 as \\'store2\\',\\n        store3 as \\'store3\\'\\n    )\\n);\\n",
                "solutionTags": [],
                "code": "```\\n/* Write your PL/SQL query statement below */\\nselect *\\nfrom Products\\nunpivot (\\n    price\\n    for store\\n    in (\\n        store1 as \\'store1\\',\\n        store2 as \\'store2\\',\\n        store3 as \\'store3\\'\\n    )\\n);\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 2111263,
                "title": "easy-solution-using-union",
                "content": "Simply use Union to select data for different stores.\\n\\n```\\nselect product_id,\"store1\" as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\"store2\" as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\"store3\" as store, store3 as price from products where store3 is not null\\norder by product_id;\\n```",
                "solutionTags": [],
                "code": "```\\nselect product_id,\"store1\" as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id,\"store2\" as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id,\"store3\" as store, store3 as price from products where store3 is not null\\norder by product_id;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2076091,
                "title": "mysql-union-cross-join-case-when-pivot-columns-to-rows",
                "content": "```\\nwith cte as (select \"store1\" as store union select \"store2\" union select \"store3\")\\n\\nselect sub.* \\nfrom (select product_id, store, case when store = \"store1\" then store1 when store = \"store2\" then store2 else store3 end as price \\nfrom Products cross join cte) sub where price is not null;\\n```",
                "solutionTags": [],
                "code": "```\\nwith cte as (select \"store1\" as store union select \"store2\" union select \"store3\")\\n\\nselect sub.* \\nfrom (select product_id, store, case when store = \"store1\" then store1 when store = \"store2\" then store2 else store3 end as price \\nfrom Products cross join cte) sub where price is not null;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2066501,
                "title": "union-simple-solution",
                "content": "```\\nSELECT product_id,\\'store1\\' AS store,store1 AS price \\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id,\\'store2\\' AS store,store2 AS price \\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id,\\'store3\\' AS store,store3 AS price \\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id,\\'store1\\' AS store,store1 AS price \\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id,\\'store2\\' AS store,store2 AS price \\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id,\\'store3\\' AS store,store3 AS price \\nFROM Products\\nWHERE store3 IS NOT NULL\\nORDER BY product_id\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2063882,
                "title": "mysql-solution-using-union",
                "content": "```\\nSELECT PRODUCT_ID, \\n\\'store1\\' AS STORE,\\nSTORE1 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE1 IS NOT NULL\\n\\nUNION\\n\\nSELECT PRODUCT_ID,\\n\\'store2\\' AS STORE,\\nSTORE2 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE2 IS NOT NULL\\n\\nUNION \\n\\nSELECT PRODUCT_ID,\\n\\'store3\\' AS STORE,\\nSTORE3 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE3 IS NOT NULL;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT PRODUCT_ID, \\n\\'store1\\' AS STORE,\\nSTORE1 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE1 IS NOT NULL\\n\\nUNION\\n\\nSELECT PRODUCT_ID,\\n\\'store2\\' AS STORE,\\nSTORE2 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE2 IS NOT NULL\\n\\nUNION \\n\\nSELECT PRODUCT_ID,\\n\\'store3\\' AS STORE,\\nSTORE3 AS PRICE\\nFROM PRODUCTS\\nWHERE STORE3 IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2059528,
                "title": "easiest-solution-to-understand-using-only-union",
                "content": "select product_id,\\'store1\\' as store,store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from products where store3 is not null;",
                "solutionTags": [
                    "MySQL",
                    "Union Find"
                ],
                "code": "select product_id,\\'store1\\' as store,store1 as price from products where store1 is not null\\nunion\\nselect product_id,\\'store2\\' as store,store2 as price from products where store2 is not null\\nunion\\nselect product_id,\\'store3\\' as store,store3 as price from products where store3 is not null;",
                "codeTag": "Unknown"
            },
            {
                "id": 2059424,
                "title": "easy-and-simple-solution-using-view-and-union-all",
                "content": "**Rearrange Products Table Solution**\\n```\\nSELECT\\n    view.product_id,\\n    view.store,\\n    view.price\\n        FROM (\\n            SELECT product_id, \\'store1\\' AS store, store1 AS price \\n                FROM Products\\n                \\n            UNION ALL\\n            \\n            SELECT product_id, \\'store2\\' AS store, store2 AS price \\n                FROM Products\\n            \\n            UNION ALL\\n            \\n            SELECT product_id, \\'store3\\' AS store, store3 AS price \\n                FROM Products\\n            \\n            ) AS view\\n                WHERE view.price IS NOT NULL;\\n```",
                "solutionTags": [],
                "code": "```\\nSELECT\\n    view.product_id,\\n    view.store,\\n    view.price\\n        FROM (\\n            SELECT product_id, \\'store1\\' AS store, store1 AS price \\n                FROM Products\\n                \\n            UNION ALL\\n            \\n            SELECT product_id, \\'store2\\' AS store, store2 AS price \\n                FROM Products\\n            \\n            UNION ALL\\n            \\n            SELECT product_id, \\'store3\\' AS store, store3 AS price \\n                FROM Products\\n            \\n            ) AS view\\n                WHERE view.price IS NOT NULL;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2029328,
                "title": "1795-rearrange-products-table",
                "content": "```\\nSELECT product_id,\\n       \\'store1\\' AS store,\\n       store1   AS price\\nFROM   products\\nWHERE  store1 IS NOT NULL\\nUNION\\nSELECT product_id,\\n       \\'store2\\' AS store,\\n       store2   AS price\\nFROM   products\\nWHERE  store2 IS NOT NULL\\nUNION\\nSELECT product_id,\\n       \\'store3\\' AS store,\\n       store3   AS price\\nFROM   products\\nWHERE  store3 IS NOT NULL; \\n```",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "```\\nSELECT product_id,\\n       \\'store1\\' AS store,\\n       store1   AS price\\nFROM   products\\nWHERE  store1 IS NOT NULL\\nUNION\\nSELECT product_id,\\n       \\'store2\\' AS store,\\n       store2   AS price\\nFROM   products\\nWHERE  store2 IS NOT NULL\\nUNION\\nSELECT product_id,\\n       \\'store3\\' AS store,\\n       store3   AS price\\nFROM   products\\nWHERE  store3 IS NOT NULL; \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2021486,
                "title": "easy-solution-sql",
                "content": "```\\nSELECT product_id, \\'store1\\' AS \\'store\\', store1 AS \\'price\\' FROM Products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS \\'store\\', store2 AS \\'price\\' FROM Products WHERE store2 IS NOT NULL \\nUNION\\nSELECT product_id, \\'store3\\' AS \\'store\\', store3 AS \\'price\\' FROM Products WHERE store3 IS NOT NULL \\n```",
                "solutionTags": [],
                "code": "```\\nSELECT product_id, \\'store1\\' AS \\'store\\', store1 AS \\'price\\' FROM Products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS \\'store\\', store2 AS \\'price\\' FROM Products WHERE store2 IS NOT NULL \\nUNION\\nSELECT product_id, \\'store3\\' AS \\'store\\', store3 AS \\'price\\' FROM Products WHERE store3 IS NOT NULL \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2015520,
                "title": "easy-solution-using-unions",
                "content": "```\\nSELECT product_id, \\'store1\\' AS \\'store\\', store1 AS \\'price\\' FROM Products WHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' AS \\'store\\', store2 AS \\'price\\' FROM Products WHERE store2 IS NOT NULL \\nUNION\\nSELECT product_id, \\'store3\\' AS \\'store\\', store3 AS \\'price\\' FROM Products WHERE store3 IS NOT NULL \\n",
                "solutionTags": [
                    "MySQL"
                ],
                "code": "",
                "codeTag": "Unknown"
            },
            {
                "id": 1984071,
                "title": "ms-sql-with-unpivot-alternative-solution",
                "content": "```\\n/* Write your T-SQL query statement below */\\nselect product_id, store, price\\nfrom\\n    (select product_id, store1, store2, store3\\n    from Products) p\\nUNPIVOT\\n    (price for store in (store1, store2, store3)) as unpvt\\n```\\nhttps://docs.microsoft.com/en-us/sql/t-sql/queries/from-using-pivot-and-unpivot?view=sql-server-ver15",
                "solutionTags": [],
                "code": "```\\n/* Write your T-SQL query statement below */\\nselect product_id, store, price\\nfrom\\n    (select product_id, store1, store2, store3\\n    from Products) p\\nUNPIVOT\\n    (price for store in (store1, store2, store3)) as unpvt\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1575689,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1807846,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1717242,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1674749,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1575073,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2020199,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1767811,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2030333,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1705918,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2033644,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1575689,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1807846,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1717242,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1674749,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1575073,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2020199,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1767811,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2030333,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 1705918,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2033644,
                "content": [
                    {
                        "username": "mounishsavier",
                        "content": "/* Write your T-SQL query statement below */\\n\\nSELECT product_id, \\'store1\\' as store,  store1 AS price FROM products\\nWHERE store1 IS NOT NULL \\nUNION \\nSELECT product_id, \\'store2\\' as store,  store2 AS price FROM products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store,  store3 AS price FROM products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "jn_divyank",
                        "content": "HINT 1  : \\'store1\\' as store ( This will help in using column value in row )\\nHINT 2  : Think of UNION ( This way you can combine multiple results )"
                    },
                    {
                        "username": "manikpurivibhu",
                        "content": "[@centr0](/centr0) you need them as \\'store1\\', \\'store2\\' and \\'store3\\' are to be used as string values"
                    },
                    {
                        "username": "centr0",
                        "content": "can you explain the required quotes around store1?"
                    },
                    {
                        "username": "SIN99",
                        "content": "Here we are trying to unpivot the data. \\nBut ***MySQL does not have an UNPIVOT function, so we will have to use a UNION ALL query to convert the columns into rows \\n\\nUNPIVOT will work fine if you are using MS SQL SERVER !"
                    },
                    {
                        "username": "shilparm",
                        "content": "Thank you for clarifying."
                    },
                    {
                        "username": "user9157Sk",
                        "content": "UNPIVOT Function can help us to improve the performance of the query.\\n\\nSELECT product_id , store  , price \\nFROM Products\\nUNPIVOT\\n(\\n\\tprice\\n\\tFOR store in (store1, store2, store3)\\n) AS Products_Unpivoted"
                    },
                    {
                        "username": "402Coder",
                        "content": "[@Hlen](/Hlen) if you are using MySQL pivot functions are not natively available.  only in ms sql server"
                    },
                    {
                        "username": "Hlen",
                        "content": "but this doen\\'t work on my end T_T"
                    },
                    {
                        "username": "Zee09",
                        "content": "Hi leetCode,\\n\\nOne solution is to write \\'storeX\\' AS STORE to insert store x as a string under the STORE column. My question is how does SQL recognize this syntax to mean insert this string for each respective based on the records retrieved? Isn\\'t the \"AS\" keyword used to change the name of column in the base table?\\n\\nThank you all."
                    },
                    {
                        "username": "sammorozov",
                        "content": "Type mismatch error in Pandas schema. None is not an Int64, you can use this to test your code locally,\\nTag a comment for Pandas users :)\\n\\n\\ndata = [[0, 95, 100, 105], [1, 70, None, 80]]\\nProducts = pd.DataFrame(data, columns=[\\'product_id\\', \\'store1\\', \\'store2\\', \\'store3\\'])"
                    },
                    {
                        "username": "potatopie",
                        "content": "[@potatopie](/potatopie) i didnt know that the error was in the casting of types.."
                    },
                    {
                        "username": "potatopie",
                        "content": "yoooooo thank you LEGEND"
                    },
                    {
                        "username": "user9910cp",
                        "content": "select product_id, \\'store1\\' as store, store1 as price from products where store1 is not null\\nunion\\nselect product_id, \\'store2\\' as store, store2 as price from products where store2 is not null\\nunion\\nselect product_id, \\'store3\\' as store, store3 as price from products where store3 is not null\\n\\ncan someone explain this solution"
                    },
                    {
                        "username": "bleongambetta",
                        "content": "Here\\'s more or less how this breaks down if I\\'m understanding correctly, there may be more nuance to this that I\\'m missing.\\n |Code | Explanation |\\n| ---- | ----- |\\n| select product_id, | Select the product ID as usual |\\n| \\'store1\\' as store, | Write Store1 in a column labeled Store for each selected item |\\n| store1 as price from products | Write the price for Store 1 from Products in a price column|\\n| where store1 is not null | Only choose pieces of data where Store1 doesn\\'t have \\'null\\' price. |\\n|union | Do the next set too |\\n\\nHope this helps! "
                    },
                    {
                        "username": "wtain",
                        "content": "In Pandas schema provided it seems like the type \\'int64\\' is not nullable. \\nMade it nullable by changing it to \\'Int64\\' (with capital I). \\n\\nSee: https://pandas.pydata.org/docs/user_guide/integer_na.html"
                    },
                    {
                        "username": "JakhongirMurodov",
                        "content": "MySQL outputs 0 instead of omitting null values(rows). "
                    },
                    {
                        "username": "sgavrylov",
                        "content": "Pandas schema has mistypo.  Please use Int64 (first char is capitalize) instead int64 (as in schema)"
                    }
                ]
            },
            {
                "id": 2025276,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 2018178,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 2017130,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1862166,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1845897,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1800108,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1763376,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1761890,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1740750,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            },
            {
                "id": 1725455,
                "content": [
                    {
                        "username": "SaksAg",
                        "content": "Think along the lines of Union and \\'store1\\' as store"
                    },
                    {
                        "username": "Ayush1695",
                        "content": " `import pandas as pd\n\ndef rearrange_products_table(products: pd.DataFrame) -> pd.DataFrame:\n    return products.melt(id_vars = [\"product_id\"], var_name = \"store\").rename(columns = {\"value\":\"price\"}).sort_values([\"store\"]).dropna(axis = 0)`"
                    },
                    {
                        "username": "mrunmayee0109",
                        "content": "Those who are trying in Pandas, look into melt() funtion."
                    },
                    {
                        "username": "Amit_Jha",
                        "content": "Below query worked for me,\\nSELECT p1.product_id, \\'store1\\' as store, p1.store1 AS price FROM products as p1\\nWHERE p1.store1 IS NOT NULL\\nUNION\\nSELECT p2.product_id, \\'store2\\' as store, p2.store2 AS price FROM products as p2\\nWHERE p2.store2 IS NOT NULL\\nUNION\\nSELECT p3.product_id, \\'store3\\' as store, p3.store3 AS price FROM products as p3\\nWHERE p3.store3 IS NOT NULL"
                    },
                    {
                        "username": "yasminsmulla",
                        "content": "why below code is not returning any result \\nselect product_id , \\ncase when store1 is not null then \"store1\" \\nwhen store2 is not null then \"store2\" \\nwhen store3 is not null then \"store3\"\\nend as \"store\"\\n, \\ncase when store1 is not null then store1\\nwhen store2 is not null then store2 \\nwhen store3 is not null then store3\\nend as \"price\"\\nfrom products \\n"
                    },
                    {
                        "username": "Nishantvohra",
                        "content": "select product_id,store,price from\\n(select product_id, store1,store2,store3 from Products) Pro\\nUnpivot(price for store in (Store1,Store2,Store3)) as pro1\\nwhere price is not null;"
                    },
                    {
                        "username": "nikipande00",
                        "content": "\\nSELECT product_id, \\'store1\\' AS store, store1 AS price FROM Products WHERE store1 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store2\\' AS store, store2 AS price FROM Products WHERE store2 IS NOT NULL\\nUNION \\nSELECT product_id, \\'store3\\' AS store, store3 AS price FROM Products WHERE store3 IS NOT NULL\\n\\n\\nAdd the conditon as IS NOT NULL"
                    },
                    {
                        "username": "Prasenjit1997",
                        "content": "SELECT product_id, \\'store1\\' as store, store1 as price\\nFROM Products\\nWHERE store1 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store2\\' as store, store2 as price\\nFROM Products\\nWHERE store2 IS NOT NULL\\nUNION\\nSELECT product_id, \\'store3\\' as store, store3 as price\\nFROM Products\\nWHERE store3 IS NOT NULL"
                    },
                    {
                        "username": "tuneer_bhattacharya",
                        "content": "# Write your MySQL query statement below\\nSELECT product_id,\\'store1\\' as store,store1 as price FROM Products WHERE store1 is NOT NULL \\nUNION\\nSELECT product_id,\\'store2\\' as store,store2 as price FROM Products WHERE store2 is NOT NULL \\nUNION\\nSELECT product_id,\\'store3\\' as store,store3 as price FROM Products WHERE store3 is NOT NULL "
                    },
                    {
                        "username": "vaishno_raizada",
                        "content": "Unpivot function in simply manner\\nselect product_id , \\'store1\\' as store , store1 as price from Products\\nwhere store1 > 0\\nunion \\nselect product_id , \\'store2\\' as store , store2  as price from Products\\nwhere store2 > 0\\nunion \\nselect product_id , \\'store3\\' as store ,  store3  as price from Products\\nwhere store3 > 0"
                    }
                ]
            }
        ]
    },
    {
        "title": "Second Largest Digit in a String",
        "question_content": "<p>Given an alphanumeric string <code>s</code>, return <em>the <strong>second largest</strong> numerical digit that appears in </em><code>s</code><em>, or </em><code>-1</code><em> if it does not exist</em>.</p>\n\n<p>An <strong>alphanumeric</strong><strong> </strong>string is a string consisting of lowercase English letters and digits.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;dfa12321afd&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abc1111&quot;\n<strong>Output:</strong> -1\n<strong>Explanation:</strong> The digits that appear in s are [1]. There is no second largest digit. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 500</code></li>\n\t<li><code>s</code> consists of only lowercase English letters and/or digits.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 1118774,
                "title": "java-python-3-time-o-n-space-o-1-code",
                "content": "**Q & A**\\nQ1: I got wrong answer when asked \"ck077\" and answered \"7\". I think all digits that appear here are [0, 7] and the second largest is 7. Why is this a wrong answer? \\nA1: Good question. According to the 2nd example: \\n```\\nInput: s = \"abc1111\"\\nOutput: -1\\nExplanation: The digits that appear in s are [1]. There is no second largest digit.\\n```\\nWe are actually looking for the 2nd **distinct** largest digit. The problem should have made it crystal clear to avoid any confusion. \\n**End of Q & A**\\n\\n----\\n\\n```java\\n    public int secondHighest(String s) {\\n        int first = -1, sec = -1;\\n        for (int i = 0; i < s.length(); ++i) {\\n            char c = s.charAt(i); \\n            if (Character.isDigit(c)) {\\n                int d = c - \\'0\\';\\n                if (first < d) {\\n                    sec = first;\\n                    first = d;\\n                }else if (sec < d && d < first) {\\n                    sec = d;\\n                }\\n            }\\n        }\\n        return sec;\\n    }\\n```\\n```python\\n    def secondHighest(self, s: str) -> int:\\n        first = sec = -1\\n        for c in s:\\n            if c.isdigit():\\n                d = ord(c) - ord(\\'0\\')\\n                if first < d:\\n                    sec, first = first, d\\n                elif sec < d and d < first:\\n                    sec = d\\n        return sec\\n```",
                "solutionTags": [],
                "code": "```\\nInput: s = \"abc1111\"\\nOutput: -1\\nExplanation: The digits that appear in s are [1]. There is no second largest digit.\\n```\n```java\\n    public int secondHighest(String s) {\\n        int first = -1, sec = -1;\\n        for (int i = 0; i < s.length(); ++i) {\\n            char c = s.charAt(i); \\n            if (Character.isDigit(c)) {\\n                int d = c - \\'0\\';\\n                if (first < d) {\\n                    sec = first;\\n                    first = d;\\n                }else if (sec < d && d < first) {\\n                    sec = d;\\n                }\\n            }\\n        }\\n        return sec;\\n    }\\n```\n```python\\n    def secondHighest(self, s: str) -> int:\\n        first = sec = -1\\n        for c in s:\\n            if c.isdigit():\\n                d = ord(c) - ord(\\'0\\')\\n                if first < d:\\n                    sec, first = first, d\\n                elif sec < d and d < first:\\n                    sec = d\\n        return sec\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1118925,
                "title": "c-0ms-linear-time-constant-space-no-sets-solution",
                "content": "Nice problem; we might be tempted to use a set, but that would be rather wasteful, since we only need to store at best 2 values.\\n\\nAnd so we will do the things the *hard* way.\\n\\nTo do so, we will declare `res`, an array of 2 elements, both initially set to be `-1`.\\n\\nThen, time to parse each character `c` of `s` and:\\n* check if it is a numerical character, in which case:\\n\\t* normalise its value to be in the `0 - 9` range, the one we will be working on;\\n\\t* update `res`:\\n\\t\\t* if `c > ress[0]`, we will shift the current value of `res[0]` to `res[1]` and update the first with `c`;\\n\\t\\t* the second part is trickier: we need to check if `c > res[1]`, but only if `c != res[0]`, since we do not consider duplicated digits, and, if so, update that too.\\n\\nOnce done, we can retun `res[i]` and be done :)\\n\\nThe code:\\n\\n```cpp\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        // support variables\\n        int res[2] = {-1, -1};\\n        // parsing s\\n        for (char c: s) {\\n            // considering only numerical characters\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                // normalising c\\n                c -= \\'0\\';\\n                // updating res\\n                if (c > res[0]) {\\n                    res[1] = res[0];\\n                    res[0] = c;\\n                } else if (c != res[0] && c > res[1]) res[1] = c;\\n            }\\n        }\\n        return res[1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "String"
                ],
                "code": "```cpp\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        // support variables\\n        int res[2] = {-1, -1};\\n        // parsing s\\n        for (char c: s) {\\n            // considering only numerical characters\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                // normalising c\\n                c -= \\'0\\';\\n                // updating res\\n                if (c > res[0]) {\\n                    res[1] = res[0];\\n                    res[0] = c;\\n                } else if (c != res[0] && c > res[1]) res[1] = c;\\n            }\\n        }\\n        return res[1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118858,
                "title": "clean-python-3-straightforward",
                "content": "Time: `O(N)`\\nSpace: `O(1)`\\n\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        first = second = -1\\n        for c in s:\\n            if c.isdigit():\\n                d = int(c)\\n                if d > first:\\n                    first, second = d, first\\n                elif first > d > second:\\n                    second = d\\n        return second\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        first = second = -1\\n        for c in s:\\n            if c.isdigit():\\n                d = int(c)\\n                if d > first:\\n                    first, second = d, first\\n                elif first > d > second:\\n                    second = d\\n        return second\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118787,
                "title": "clean-python-with-comments",
                "content": "```\\ndef secondHighest(self, s):\\n        t = set()  # create set to store unique digits\\n        for i in s:\\n            if \\'0\\'<=i<=\\'9\\':\\n                t.add(int(i))  # add digit to the set\\n        if len(t)>1:\\n            return sorted(list(t))[-2] #  sort and return second largest one if number of elements are more than 1 \\n        return -1     # otherwise return -1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\ndef secondHighest(self, s):\\n        t = set()  # create set to store unique digits\\n        for i in s:\\n            if \\'0\\'<=i<=\\'9\\':\\n                t.add(int(i))  # add digit to the set\\n        if len(t)>1:\\n            return sorted(list(t))[-2] #  sort and return second largest one if number of elements are more than 1 \\n        return -1     # otherwise return -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1168765,
                "title": "java-easy-and-100-solution-using-just-two-for-loop",
                "content": "if you like it pls upvote\\n\\nJava\\n\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int[] arr = new int[10];\\n        for(int i = 0;i<s.length();i++){\\n            if(s.charAt(i) - \\'0\\' <=9 & s.charAt(i)-\\'0\\' >=0){\\n                arr[s.charAt(i)-\\'0\\']++;\\n            }\\n        }\\n        boolean first = false;\\n        for(int i = 9;i>=0;i--){\\n            if(arr[i] !=0){\\n                if(first)\\n                    return i;\\n                else first = true;\\n            }\\n        }\\n        \\n        \\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int[] arr = new int[10];\\n        for(int i = 0;i<s.length();i++){\\n            if(s.charAt(i) - \\'0\\' <=9 & s.charAt(i)-\\'0\\' >=0){\\n                arr[s.charAt(i)-\\'0\\']++;\\n            }\\n        }\\n        boolean first = false;\\n        for(int i = 9;i>=0;i--){\\n            if(arr[i] !=0){\\n                if(first)\\n                    return i;\\n                else first = true;\\n            }\\n        }\\n        \\n        \\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1396700,
                "title": "c-gradually-improved-multiple-solutions-read-to-learn",
                "content": "I learn a lot from DISCUSS sections. And always remember that EASY tagged questions are a good target to practice (1) writing clean code, (2) using STLs to make it concise, (3) Simplest solution which others can understand.\\n\\nSo, don\\'t miss EASY tagged questions to experiment.\\n\\n```\\n//Approach-1 (simple and straight forward)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max1 = -1;\\n        int max2 = -1;\\n        \\n        for(const char& ch : s) {\\n            if(isdigit(ch)) {\\n                int num = ch - \\'0\\';\\n                if(num > max1) {\\n                    max2 = max1;\\n                    max1 = num;\\n                } else if(num > max2 && num != max1) {\\n                    max2 = num;\\n                }\\n            }\\n        }\\n        return max2;\\n    }\\n};\\n```\\n\\n```\\n//Approach-2 (Using map)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        map<int, int> mp;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                mp[ch-\\'0\\'] = 1;\\n        }\\n        \\n        if(mp.empty()) return -1;\\n        auto it = rbegin(mp);\\n        it++;\\n        return it == rend(mp) ? -1 : it->first;\\n    }\\n};\\n```\\n\\n```\\n//Approach-3 (Using set instead of map in approach-2)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> st;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                st.insert(ch-\\'0\\');\\n        }\\n        \\n        if(st.empty()) return -1;\\n        auto it = rbegin(st);\\n        it++;\\n        return it == rend(st) ? -1 : *it;\\n    }\\n};\\n```\\n\\n```\\n//Approach-4 (Smart and cleaning of Approach-3)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> st;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                st.insert(ch-\\'0\\');\\n        }\\n        \\n        return st.size() > 1 ? *next(rbegin(st)): -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n//Approach-1 (simple and straight forward)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max1 = -1;\\n        int max2 = -1;\\n        \\n        for(const char& ch : s) {\\n            if(isdigit(ch)) {\\n                int num = ch - \\'0\\';\\n                if(num > max1) {\\n                    max2 = max1;\\n                    max1 = num;\\n                } else if(num > max2 && num != max1) {\\n                    max2 = num;\\n                }\\n            }\\n        }\\n        return max2;\\n    }\\n};\\n```\n```\\n//Approach-2 (Using map)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        map<int, int> mp;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                mp[ch-\\'0\\'] = 1;\\n        }\\n        \\n        if(mp.empty()) return -1;\\n        auto it = rbegin(mp);\\n        it++;\\n        return it == rend(mp) ? -1 : it->first;\\n    }\\n};\\n```\n```\\n//Approach-3 (Using set instead of map in approach-2)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> st;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                st.insert(ch-\\'0\\');\\n        }\\n        \\n        if(st.empty()) return -1;\\n        auto it = rbegin(st);\\n        it++;\\n        return it == rend(st) ? -1 : *it;\\n    }\\n};\\n```\n```\\n//Approach-4 (Smart and cleaning of Approach-3)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> st;\\n        \\n        for(const char &ch : s) {\\n            if(isdigit(ch))\\n                st.insert(ch-\\'0\\');\\n        }\\n        \\n        return st.size() > 1 ? *next(rbegin(st)): -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1234851,
                "title": "swift-second-largest-digit-in-a-string-test-cases",
                "content": "##### Solution \\uD83C\\uDF89\\n```swift\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        let set = Set(s.compactMap { $0.wholeNumberValue }).sorted(by: >)\\n        return set.count > 1 ? set[1] : -1\\n    }\\n}\\n```\\n\\n##### Tests\\n```swift\\nimport XCTest\\n\\n// Executed 2 tests, with 0 failures (0 unexpected) in 0.110 (0.112) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test1() {\\n        XCTAssertEqual(s.secondHighest(\"dfa12321afd\"), 2)\\n    }\\n    func test2() {\\n        XCTAssertEqual(s.secondHighest(\"abc1111\"), -1)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```swift\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        let set = Set(s.compactMap { $0.wholeNumberValue }).sorted(by: >)\\n        return set.count > 1 ? set[1] : -1\\n    }\\n}\\n```\n```swift\\nimport XCTest\\n\\n// Executed 2 tests, with 0 failures (0 unexpected) in 0.110 (0.112) seconds\\n\\nclass Tests: XCTestCase {\\n    private let s = Solution()\\n    func test1() {\\n        XCTAssertEqual(s.secondHighest(\"dfa12321afd\"), 2)\\n    }\\n    func test2() {\\n        XCTAssertEqual(s.secondHighest(\"abc1111\"), -1)\\n    }\\n}\\n\\nTests.defaultTestSuite.run()\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1123344,
                "title": "c-no-extra-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max = -1;\\n        int secondMax = -1;\\n        for (char c : s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                if (c > max) {\\n                    secondMax = max;\\n                    max = c;\\n                }\\n                else if (c < max && c > secondMax) {\\n                    secondMax = c;\\n                }\\n            }\\n        }\\n        return secondMax == -1  ? -1 : secondMax - \\'0\\';\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max = -1;\\n        int secondMax = -1;\\n        for (char c : s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                if (c > max) {\\n                    secondMax = max;\\n                    max = c;\\n                }\\n                else if (c < max && c > secondMax) {\\n                    secondMax = c;\\n                }\\n            }\\n        }\\n        return secondMax == -1  ? -1 : secondMax - \\'0\\';\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1642413,
                "title": "java-bit-manipulation-beats-100",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        // Integer map for storing digits\\n        int map = 0;\\n        // For keeping count of digits processed\\n        int bCount = 0;\\n        for(char c : s.toCharArray()){\\n            // If current character is a digit and is not stored\\n            // in the map\\n            if(Character.isDigit(c) && (map&(1<<(c-\\'0\\'))) == 0){\\n                // Turn the bit on at respective digit position in map\\n                map|=(1<<(c-\\'0\\'));\\n                bCount++;\\n                // Since we need second largest, after 2 unique digits\\n                // we need to discard smallest digit in the map\\n                if(bCount > 2) map&=(map-1);\\n            }\\n        }\\n        if(bCount < 2) return -1;\\n        for(int i = 0; i < 32; i++,map>>=1) if((map&1) == 1) return i;\\n        \\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Bit Manipulation"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        // Integer map for storing digits\\n        int map = 0;\\n        // For keeping count of digits processed\\n        int bCount = 0;\\n        for(char c : s.toCharArray()){\\n            // If current character is a digit and is not stored\\n            // in the map\\n            if(Character.isDigit(c) && (map&(1<<(c-\\'0\\'))) == 0){\\n                // Turn the bit on at respective digit position in map\\n                map|=(1<<(c-\\'0\\'));\\n                bCount++;\\n                // Since we need second largest, after 2 unique digits\\n                // we need to discard smallest digit in the map\\n                if(bCount > 2) map&=(map-1);\\n            }\\n        }\\n        if(bCount < 2) return -1;\\n        for(int i = 0; i < 32; i++,map>>=1) if((map&1) == 1) return i;\\n        \\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118905,
                "title": "easiest-solutions-java-time-o-n-and-space-o-1",
                "content": "Idea is \\n1.store all  digits(**Store in HashSet so that dont have to face duplicate digit problem**)\\n2.Update largest and second largest accordingly\\n\\n**Solution 1:**\\n```\\n    public int secondHighest(String s) {\\n        int largest=-1;\\n        int secondLargest=-1;\\n        \\n        HashSet<Integer> digits=new HashSet<>();\\n        for(char ch:s.toCharArray()){\\n          if(ch>=\\'0\\' && ch<=\\'9\\'){\\n             int digit=ch-\\'0\\';\\n              digits.add(digit);\\n          }\\n        }\\n        \\n        for(int digit:digits){\\n            if(digit>largest){\\n                secondLargest=largest;\\n                largest=digit;\\n            }else if(digit>secondLargest){\\n                secondLargest=digit;\\n            }\\n        }\\n      \\n        return secondLargest;\\n    }\\n```\\n**Time:O(N) but  Space : O(unique_digits) at worst case O(N) :(**\\n\\nSo let us now optimise the space\\n\\n**Solution 2: Time:O(N) and Space:O(1)**\\n```\\n    public int secondHighest(String s) {\\n        int largest = -1, secondLargest = -1;\\n\\t\\t\\n        for (int i = 0; i < s.length(); ++i) {\\n            char ch= s.charAt(i); \\n\\t\\t\\n\\t\\t\\t if(!Character.isDigit(ch)) continue;  // bcz we want digits only\\n\\t\\t\\t \\n            int digit = ch - \\'0\\';\\n            if ( digit > largest) {\\n               largest=secondLargest;\\n\\t\\t\\t   largest=digit;                             \\n            }else if (digit < largest && digit > secondLargest) {  \\n                secondLargest = digit;\\n            }\\n        }\\n        return secondLargest;\\n    }\\n```\\t\\n\\nPlease **UPVOTE** if found it helpful :)\\n\\n###### Silly Mistakes which people do in general:\\n###### 1. Order of updation is important i.e dont update largest first then secondLargest to largest.\\n###### 2. Miss the thing that duplicates are there.\\n\\t",
                "solutionTags": [
                    "Java",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\n    public int secondHighest(String s) {\\n        int largest=-1;\\n        int secondLargest=-1;\\n        \\n        HashSet<Integer> digits=new HashSet<>();\\n        for(char ch:s.toCharArray()){\\n          if(ch>=\\'0\\' && ch<=\\'9\\'){\\n             int digit=ch-\\'0\\';\\n              digits.add(digit);\\n          }\\n        }\\n        \\n        for(int digit:digits){\\n            if(digit>largest){\\n                secondLargest=largest;\\n                largest=digit;\\n            }else if(digit>secondLargest){\\n                secondLargest=digit;\\n            }\\n        }\\n      \\n        return secondLargest;\\n    }\\n```\n```\\n    public int secondHighest(String s) {\\n        int largest = -1, secondLargest = -1;\\n\\t\\t\\n        for (int i = 0; i < s.length(); ++i) {\\n            char ch= s.charAt(i); \\n\\t\\t\\n\\t\\t\\t if(!Character.isDigit(ch)) continue;  // bcz we want digits only\\n\\t\\t\\t \\n            int digit = ch - \\'0\\';\\n            if ( digit > largest) {\\n               largest=secondLargest;\\n\\t\\t\\t   largest=digit;                             \\n            }else if (digit < largest && digit > secondLargest) {  \\n                secondLargest = digit;\\n            }\\n        }\\n        return secondLargest;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1119971,
                "title": "c-simple-solution-o-n-time-easy-to-understand",
                "content": "```\\nint secondHighest(string s) {\\n        vector<int>v(10,0); \\n        for(char c:s){\\n            if(isdigit(c)){\\n                v[c-48] = 1;\\n            }\\n        }\\n        bool it = false;\\n        for(int i=9;i>=0;i--){\\n            if(v[i]){\\n                if(it==false) it = true;\\n                else return i;\\n            }\\n        }\\n        return -1;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint secondHighest(string s) {\\n        vector<int>v(10,0); \\n        for(char c:s){\\n            if(isdigit(c)){\\n                v[c-48] = 1;\\n            }\\n        }\\n        bool it = false;\\n        for(int i=9;i>=0;i--){\\n            if(v[i]){\\n                if(it==false) it = true;\\n                else return i;\\n            }\\n        }\\n        return -1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2571746,
                "title": "python-99-faster-easy-solution",
                "content": "```\\ndef secondHighest(self, s: str) -> int:\\n        digits = set()\\n        s = list(set(s))\\n        for letter in s:\\n            if letter.isdigit():\\n                digits.add(letter)\\n        digits = sorted(list(digits))\\n        return -1 if len(digits) < 2 else digits[-2]\\n```\\n![image](https://assets.leetcode.com/users/images/84d6767c-7ba3-4d8d-9fab-c5f20ec3da95_1663085971.3857815.png)\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\ndef secondHighest(self, s: str) -> int:\\n        digits = set()\\n        s = list(set(s))\\n        for letter in s:\\n            if letter.isdigit():\\n                digits.add(letter)\\n        digits = sorted(list(digits))\\n        return -1 if len(digits) < 2 else digits[-2]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1739076,
                "title": "python3-faster-solution-easiest-brute-force",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        s=set(s)\\n        a=[]\\n        for i in s:\\n            if i.isnumeric() :\\n                a.append(int(i))\\n        a.sort()\\n        if len(a)<2:\\n            return -1\\n        return a[len(a)-2]\\n```\\n**optimized code**\\n```\\ndef secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        s=set(s)\\n        a=[]\\n        for i in s:\\n            if i.isnumeric() :\\n                a.append(int(i))\\n        a.sort()\\n        if len(a)<2:\\n            return -1\\n        return a[len(a)-2]\\n```\n```\\ndef secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2805410,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int res[2] = {-1, -1};\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                c -= \\'0\\';\\n                if (c > res[0]) {\\n                    res[1] = res[0];\\n                    res[0] = c;\\n                } else if (c != res[0] && c > res[1]) res[1] = c;\\n            }\\n        }\\n        return res[1];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int res[2] = {-1, -1};\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                c -= \\'0\\';\\n                if (c > res[0]) {\\n                    res[1] = res[0];\\n                    res[0] = c;\\n                } else if (c != res[0] && c > res[1]) res[1] = c;\\n            }\\n        }\\n        return res[1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1463169,
                "title": "python-3-simple-solution-2-lines",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:              |   #Alternative (Thanks, @upinfour4)\\n        num = sorted(set(i for i in s if i.isdigit()))   |   num = sorted(set(filter(str.isdigit, s)))\\n        return num[-2] if len(num) > 1 else -1\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:              |   #Alternative (Thanks, @upinfour4)\\n        num = sorted(set(i for i in s if i.isdigit()))   |   num = sorted(set(filter(str.isdigit, s)))\\n        return num[-2] if len(num) > 1 else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1230218,
                "title": "python3-simple-solution-using-list",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        l = []\\n        for i in s:\\n            if i.isdigit() and i not in l:\\n                l.append(i)\\n        if len(l) >= 2:\\n            return int(sorted(l)[-2])\\n        else:\\n            return -1\\n```\\n**If you like this solution, please upvote for this**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        l = []\\n        for i in s:\\n            if i.isdigit() and i not in l:\\n                l.append(i)\\n        if len(l) >= 2:\\n            return int(sorted(l)[-2])\\n        else:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118879,
                "title": "c-simple-solution-with-set",
                "content": "```\\n// Please, UpVote, if you like it :-)\\n// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Second Largest Digit in a String.\\n// Memory Usage: 6.9 MB, less than 100.00% of C++ online submissions for Second Largest Digit in a String.\\nint secondHighest(string s) {\\n\\tset<int> digits;\\n\\tfor (char c : s)\\n\\t\\tif (isdigit(c))\\n\\t\\t\\tdigits.insert(c - \\'0\\');\\n\\tif (digits.size() < 2)\\n\\t\\treturn -1;\\n\\tauto resIt = digits.rbegin();\\n\\treturn *(++resIt);\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "```\\n// Please, UpVote, if you like it :-)\\n// Runtime: 0 ms, faster than 100.00% of C++ online submissions for Second Largest Digit in a String.\\n// Memory Usage: 6.9 MB, less than 100.00% of C++ online submissions for Second Largest Digit in a String.\\nint secondHighest(string s) {\\n\\tset<int> digits;\\n\\tfor (char c : s)\\n\\t\\tif (isdigit(c))\\n\\t\\t\\tdigits.insert(c - \\'0\\');\\n\\tif (digits.size() < 2)\\n\\t\\treturn -1;\\n\\tauto resIt = digits.rbegin();\\n\\treturn *(++resIt);\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3549412,
                "title": "simplest-python-solution",
                "content": "\\n\\n# Code\\n```\\nfrom sortedcontainers import SortedSet\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a = [int(x) for x in s if x.isnumeric()]\\n        return SortedSet(a)[-2] if len(set(a)) >= 2 else -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom sortedcontainers import SortedSet\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a = [int(x) for x in s if x.isnumeric()]\\n        return SortedSet(a)[-2] if len(set(a)) >= 2 else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3109791,
                "title": "simple-cpp-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>v;\\n        set<int>ss;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                ss.insert(s[i]-\\'0\\');\\n            }\\n        }\\n        if(ss.size()<=1)return -1;\\n        for(auto it:ss)\\n        {\\n            v.push_back(it);\\n        }\\n        sort(v.begin(),v.end());\\n        return v[v.size()-2];\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>v;\\n        set<int>ss;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                ss.insert(s[i]-\\'0\\');\\n            }\\n        }\\n        if(ss.size()<=1)return -1;\\n        for(auto it:ss)\\n        {\\n            v.push_back(it);\\n        }\\n        sort(v.begin(),v.end());\\n        return v[v.size()-2];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2845277,
                "title": "simple-solution-and-easy-understanding",
                "content": "apporch behind this  \\nfirst we store all integer val in a vector then we iterate vector and find  max and again iterate to find second large element \\nt(c)=o(n)\\n// if you find it is helpful for you then you can upvote it//\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n     vector<int>ans;\\n     int n=s.size();\\n        int maxi=INT_MIN;\\n        int sl=-1;\\n    for(int i=0;i<n;i++)\\n    {\\n        if(!isalpha(s[i]))\\n            ans.push_back(s[i]-\\'0\\');\\n    }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n             maxi=max(maxi,ans[i]);\\n        }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            if(ans[i]>sl&&ans[i]!=maxi)\\n                sl=ans[i];\\n        }\\n        return sl;\\n    }\\n};\\n// in discuss section  no one apporch like this then i post my solution\\n```\\n",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n     vector<int>ans;\\n     int n=s.size();\\n        int maxi=INT_MIN;\\n        int sl=-1;\\n    for(int i=0;i<n;i++)\\n    {\\n        if(!isalpha(s[i]))\\n            ans.push_back(s[i]-\\'0\\');\\n    }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n             maxi=max(maxi,ans[i]);\\n        }\\n        for(int i=0;i<ans.size();i++)\\n        {\\n            if(ans[i]>sl&&ans[i]!=maxi)\\n                sl=ans[i];\\n        }\\n        return sl;\\n    }\\n};\\n// in discuss section  no one apporch like this then i post my solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2307622,
                "title": "beats-100-other-solutions",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        output = []\\n        \\n        for l in s:\\n            if l.isdigit():\\n                output.append(int(l))\\n                \\n        output = sorted(list(set(output)))\\n        if len(output) < 2: return -1\\n        \\n        return output[-2]\\n```",
                "solutionTags": [
                    "Sorting"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        output = []\\n        \\n        for l in s:\\n            if l.isdigit():\\n                output.append(int(l))\\n                \\n        output = sorted(list(set(output)))\\n        if len(output) < 2: return -1\\n        \\n        return output[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1731838,
                "title": "python-3-30ms-fastest-set-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1270192,
                "title": "javascript-using-sort-and-set",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let intArr = new Set();\\n    for(let val of s){\\n      if(!isNaN(val) ){\\n        intArr.add(parseInt(val))\\n      }\\n    }\\n  let sorted = Array.from(intArr).sort((a,b) => b-a);\\n  return sorted.length <= 1 ? -1 : sorted[1];    \\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let intArr = new Set();\\n    for(let val of s){\\n      if(!isNaN(val) ){\\n        intArr.add(parseInt(val))\\n      }\\n    }\\n  let sorted = Array.from(intArr).sort((a,b) => b-a);\\n  return sorted.length <= 1 ? -1 : sorted[1];    \\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1228266,
                "title": "c-two-solutions",
                "content": "##### Solution 1\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint secondHighest(string s) {\\n\\t\\t\\tint max1 = -1;\\n\\t\\t\\tint max2 = -1;\\n\\t\\t\\tfor(int i = 0; i < s.size(); i++){\\n\\t\\t\\t\\tif(s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n\\t\\t\\t\\t\\tint t = s[i] - \\'0\\';\\n\\t\\t\\t\\t\\tif(t > max1){\\n\\t\\t\\t\\t\\t\\tmax2 = max1;\\n\\t\\t\\t\\t\\t\\tmax1 = t;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(t > max2 and t != max1){\\n\\t\\t\\t\\t\\t\\tmax2 = t;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(max1 != max2){\\n\\t\\t\\t\\treturn max2;\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t};\\n##### Solution 2\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint secondHighest(string s) {\\n\\t\\t\\tvector<int> temp(10, 0);\\n\\t\\t\\tfor(int i = 0; i < s.size(); i++){\\n\\t\\t\\t\\tif(s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n\\t\\t\\t\\t\\ttemp[s[i] - 48]++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tint flag = 0;\\n\\t\\t\\tfor(int i = 9; i >= 0; i--){\\n\\t\\t\\t\\tif(temp[i]){\\n\\t\\t\\t\\t\\tif(flag == 0){\\n\\t\\t\\t\\t\\t\\tflag = 1;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\t\\treturn i;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn -1;\\n\\t\\t}\\n\\t};\\n\\n\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint secondHighest(string s) {\\n\\t\\t\\tint max1 = -1;\\n\\t\\t\\tint max2 = -1;\\n\\t\\t\\tfor(int i = 0; i < s.size(); i++){\\n\\t\\t\\t\\tif(s[i] >= \\'0\\' and s[i] <= \\'9\\'){\\n\\t\\t\\t\\t\\tint t = s[i] - \\'0\\';\\n\\t\\t\\t\\t\\tif(t > max1){\\n\\t\\t\\t\\t\\t\\tmax2 = max1;\\n\\t\\t\\t\\t\\t\\tmax1 = t;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1120807,
                "title": "my-java-solution-using-2-varibles-to-track-the-largest-and-second-largest",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int first = -1;\\n        int second = -1;\\n        for (int i=0; i<s.length(); i++) {\\n            char current = s.charAt(i);\\n            if (Character.isDigit(current)) {\\n                int value = current - \\'0\\';\\n                if (value > first) {\\n                    second = first;\\n                    first = value;\\n                }\\n                else if (second < value && value < first) {\\n                    second = value;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int first = -1;\\n        int second = -1;\\n        for (int i=0; i<s.length(); i++) {\\n            char current = s.charAt(i);\\n            if (Character.isDigit(current)) {\\n                int value = current - \\'0\\';\\n                if (value > first) {\\n                    second = first;\\n                    first = value;\\n                }\\n                else if (second < value && value < first) {\\n                    second = value;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3491579,
                "title": "simple-c-program-in-o-n-time-and-o-1-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nJust traverse the array and find out maxi then in another loop find maxi2. Must know the char conversion to integer.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int i = 0;\\n        int maxi = -1;\\n        int maxi2 = -1;\\n        int c = -1;\\n\\n        while(i<s.size()){\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                c = s[i];\\n                maxi = max(c,maxi);\\n            }\\n            i++;\\n        }\\n\\n        i = 0;\\n        while(i<s.size()){\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                c = s[i];\\n                if(c != maxi)\\n                    maxi2 = max(c,maxi2);\\n            }\\n            i++;\\n        }\\n\\n        if(maxi2 == -1){\\n            return maxi2;\\n        }\\n\\n        int ans = (maxi2 - \\'0\\');\\n        return ans;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int i = 0;\\n        int maxi = -1;\\n        int maxi2 = -1;\\n        int c = -1;\\n\\n        while(i<s.size()){\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                c = s[i];\\n                maxi = max(c,maxi);\\n            }\\n            i++;\\n        }\\n\\n        i = 0;\\n        while(i<s.size()){\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\'){\\n                c = s[i];\\n                if(c != maxi)\\n                    maxi2 = max(c,maxi2);\\n            }\\n            i++;\\n        }\\n\\n        if(maxi2 == -1){\\n            return maxi2;\\n        }\\n\\n        int ans = (maxi2 - \\'0\\');\\n        return ans;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457413,
                "title": "100-beginners-friendly",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n            remove all strings and get only the digits &\\n            put all unique digits to set as well as Array &\\n            find the second max\\n\\n# Complexity\\n- Time complexity: O(nlogN)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        String t=s.replaceAll(\"\\\\\\\\D+\",\"\");\\n        char[] res= t.toCharArray();\\n        int[] digits= new int[res.length];\\n        Set<Integer> set= new HashSet<Integer>();\\n\\n        for(int i=0;i<res.length;i++){\\n            if(!set.contains(res[i]-\\'0\\')){\\n                                digits[i]=res[i]-\\'0\\';\\n                            set.add(digits[i]);\\n            }\\n        }\\n\\n        if(set.size()<2) return -1;\\n\\n        Arrays.sort(digits);\\n        System.out.println(Arrays.toString(digits));\\n        int max=digits[digits.length-1];\\n        for(int i=digits.length-2; i>=0;i--){\\n             if(max> digits[i])\\n             {\\n                     return digits[i];\\n                 \\n             } \\n        }\\n\\n        return -1;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        String t=s.replaceAll(\"\\\\\\\\D+\",\"\");\\n        char[] res= t.toCharArray();\\n        int[] digits= new int[res.length];\\n        Set<Integer> set= new HashSet<Integer>();\\n\\n        for(int i=0;i<res.length;i++){\\n            if(!set.contains(res[i]-\\'0\\')){\\n                                digits[i]=res[i]-\\'0\\';\\n                            set.add(digits[i]);\\n            }\\n        }\\n\\n        if(set.size()<2) return -1;\\n\\n        Arrays.sort(digits);\\n        System.out.println(Arrays.toString(digits));\\n        int max=digits[digits.length-1];\\n        for(int i=digits.length-2; i>=0;i--){\\n             if(max> digits[i])\\n             {\\n                     return digits[i];\\n                 \\n             } \\n        }\\n\\n        return -1;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2464367,
                "title": "python-cryptic-one-liner",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return ([-1,-1]+sorted(set(s) & set(\"0123456789\")))[-2]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return ([-1,-1]+sorted(set(s) & set(\"0123456789\")))[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2134292,
                "title": "c-set-clean-easy",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint secondHighest(string s) {\\n\\t\\t\\tset<int>a;\\n\\t\\t\\tfor(auto i : s){\\n\\t\\t\\t\\tif(isdigit(i)){\\n\\t\\t\\t\\t\\ta.insert(i-\\'0\\');\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\tif(a.size()<2)\\n\\t\\t\\t\\treturn -1;\\n\\t\\t\\telse{\\n\\t\\t\\t\\tauto itr = a.end();\\n\\t\\t\\t\\titr--;\\n\\t\\t\\t\\titr--;\\n\\t\\t\\t\\treturn *itr;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t};\\n\\n\\tfeel free to ask your doubts :)\\n\\tand pls upvote if it was helpful :)",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint secondHighest(string s) {\\n\\t\\t\\tset<int>a;\\n\\t\\t\\tfor(auto i : s){\\n\\t\\t\\t\\tif(isdigit(i)){\\n\\t\\t\\t\\t\\ta.insert(i-\\'0\\');\\n\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2074993,
                "title": "c-stl-copy-if-function-explanation",
                "content": "reference : [votrubac](https://leetcode.com/problems/second-largest-digit-in-a-string/discuss/1118781/C%2B%2B-Set)\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n\\t\\t//O(N) solution without using extra space\\n        // int l1 =  INT_MIN , l2 = INT_MIN;\\n        // for(auto c : s){\\n        //     if(isdigit(c)){\\n        //         if(c-\\'0\\' > l1){\\n        //             l2 = l1;\\n        //             l1 = c-\\'0\\';\\n        //         }\\n        //         else if(c-\\'0\\' < l1 and c-\\'0\\' > l2) l2 = c-\\'0\\';\\n        //     }\\n        // }\\n        // return l2 == INT_MIN ? -1 : l2;\\n        \\n        \\n\\t\\t/*\\n\\t\\t\\t2nd sol - approach : 1st create a set and insert all the number from the string .\\n\\t\\t\\tas we know set dosent contain duplicate element and at the end if the set size > 1 \\n\\t\\t\\t2nd largest element is present if not return -1 (not present)\\n\\t\\t*/\\n\\t\\t\\n\\t\\t\\n        set<int> myset;\\n        \\n        copy_if(begin(s), end(s), inserter(myset, begin(myset)), ::isdigit);\\n\\t\\t/* \\n\\t\\t\\thow copy_if function works : in this function you have to pass four parameters \\n\\t\\t\\tcopy_if(begin iterator , end iterator , destination , condition)\\n\\t\\t\\t\\n\\t\\t\\teg :    vector<int> from_vec = {1,2,3,4,5,6,7,8,9,10};\\n\\t\\t\\t\\t\\tvector<int> to_vec;\\n\\t\\t\\t\\t\\t//here i wnat to copy all the number from from_vec vector to to_vec vector which are divisable by 2 .\\n\\t\\t\\t\\t\\tcopy_if(from_vec.begin(),from_vec.end(),inserter(to_vec,begin(to_vec)),[](int n){return n%2==0;});\\n\\t\\t\\t\\t\\tfor(auto it : to_vec) cout<<it<<\" \";\\n\\t\\t\\t\\t\\to/p : 2 4 6 8 10\\n\\t\\t\\t\\t\\t\\t  \\n\\t\\t*/\\n        //copy_if(begin(s), end(s), inserter(myset, begin(myset)), [](char c){return isdigit(c);}); // you can write your custom comparator also\\n        \\n        return myset.size() > 1 ? *next(rbegin(myset)) - \\'0\\' : -1;\\n    }\\n};\\n```\\n\\n**IF YOU LIKE PLEASE UPVOTE**",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n\\t\\t//O(N) solution without using extra space\\n        // int l1 =  INT_MIN , l2 = INT_MIN;\\n        // for(auto c : s){\\n        //     if(isdigit(c)){\\n        //         if(c-\\'0\\' > l1){\\n        //             l2 = l1;\\n        //             l1 = c-\\'0\\';\\n        //         }\\n        //         else if(c-\\'0\\' < l1 and c-\\'0\\' > l2) l2 = c-\\'0\\';\\n        //     }\\n        // }\\n        // return l2 == INT_MIN ? -1 : l2;\\n        \\n        \\n\\t\\t/*\\n\\t\\t\\t2nd sol - approach : 1st create a set and insert all the number from the string .\\n\\t\\t\\tas we know set dosent contain duplicate element and at the end if the set size > 1 \\n\\t\\t\\t2nd largest element is present if not return -1 (not present)\\n\\t\\t*/\\n\\t\\t\\n\\t\\t\\n        set<int> myset;\\n        \\n        copy_if(begin(s), end(s), inserter(myset, begin(myset)), ::isdigit);\\n\\t\\t/* \\n\\t\\t\\thow copy_if function works : in this function you have to pass four parameters \\n\\t\\t\\tcopy_if(begin iterator , end iterator , destination , condition)\\n\\t\\t\\t\\n\\t\\t\\teg :    vector<int> from_vec = {1,2,3,4,5,6,7,8,9,10};\\n\\t\\t\\t\\t\\tvector<int> to_vec;\\n\\t\\t\\t\\t\\t//here i wnat to copy all the number from from_vec vector to to_vec vector which are divisable by 2 .\\n\\t\\t\\t\\t\\tcopy_if(from_vec.begin(),from_vec.end(),inserter(to_vec,begin(to_vec)),[](int n){return n%2==0;});\\n\\t\\t\\t\\t\\tfor(auto it : to_vec) cout<<it<<\" \";\\n\\t\\t\\t\\t\\to/p : 2 4 6 8 10\\n\\t\\t\\t\\t\\t\\t  \\n\\t\\t*/\\n        //copy_if(begin(s), end(s), inserter(myset, begin(myset)), [](char c){return isdigit(c);}); // you can write your custom comparator also\\n        \\n        return myset.size() > 1 ? *next(rbegin(myset)) - \\'0\\' : -1;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1854847,
                "title": "java-solution",
                "content": "```java\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int k=2;\\n        for(char i=\\'9\\';i>=\\'0\\';i--)\\n        {\\n            if(s.indexOf(i)>-1)\\n                k--;\\n            if(k==0)\\n                return i-\\'0\\';\\n        }\\n        return -1;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int secondHighest(String s) {\\n        int k=2;\\n        for(char i=\\'9\\';i>=\\'0\\';i--)\\n        {\\n            if(s.indexOf(i)>-1)\\n                k--;\\n            if(k==0)\\n                return i-\\'0\\';\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1739099,
                "title": "python3-without-array-or-sorting-faster-solution-easiest",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        st = (set(s))\\n        f1,s2=-1,-1\\n        for i in st:\\n            if i.isnumeric():\\n                i=int(i)\\n                if i>f1:\\n                    s2=f1\\n                    f1=i\\n                elif i>s2 and i!=f1:\\n                    s2=i\\n        return s2\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1593658,
                "title": "easy-python-solution",
                "content": "```\\n    def secondHighest(self, s: str) -> int:\\n        l=[]\\n        for i in s:\\n            if i.isdigit() and int(i) not in l:\\n                l.append(int(i))\\n        l.sort()\\n        return -1 if len(l)<2 else l[-2]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\n    def secondHighest(self, s: str) -> int:\\n        l=[]\\n        for i in s:\\n            if i.isdigit() and int(i) not in l:\\n                l.append(int(i))\\n        l.sort()\\n        return -1 if len(l)<2 else l[-2]\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1406956,
                "title": "c-two-solutions-1-with-set-2-without-extra-data-structures",
                "content": "1- With Set\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        set<int> sets;\\n        \\n        for(auto ch: s)\\n        {\\n            if(isdigit(ch))\\n            {\\n                sets.insert(ch-\\'0\\');\\n            }\\n        }\\n        if(sets.size() < 2) return -1;\\n        set<int>::iterator it = sets.end(); \\n        --it;\\n        --it;\\n        return *it;\\n    }\\n};\\n```\\n\\n\\n2- With constant extra space (Faster than 100% || 0 ms)\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        int first = -1;\\n        int second = -1;\\n        \\n        for(auto c : s)\\n        {\\n            if(c >= \\'0\\' && c <= \\'9\\')\\n            {\\n                int val  = c - \\'0\\';\\n        \\n                if(val > first)\\n                {\\n                    second = first;\\n                    first = val;\\n                }\\n                else if(val != first && val>second)\\n                {\\n                    second = val;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        set<int> sets;\\n        \\n        for(auto ch: s)\\n        {\\n            if(isdigit(ch))\\n            {\\n                sets.insert(ch-\\'0\\');\\n            }\\n        }\\n        if(sets.size() < 2) return -1;\\n        set<int>::iterator it = sets.end(); \\n        --it;\\n        --it;\\n        return *it;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        int first = -1;\\n        int second = -1;\\n        \\n        for(auto c : s)\\n        {\\n            if(c >= \\'0\\' && c <= \\'9\\')\\n            {\\n                int val  = c - \\'0\\';\\n        \\n                if(val > first)\\n                {\\n                    second = first;\\n                    first = val;\\n                }\\n                else if(val != first && val>second)\\n                {\\n                    second = val;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1370509,
                "title": "simple-java-solution",
                "content": "class Solution {\\n\\n    public int secondHighest(String s) {\\n        int c[]=new int[10];\\n        Arrays.fill(c,0);\\n        int i,l=0,h=0;\\n        for(i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)>=\\'0\\'&&s.charAt(i)<=\\'9\\')\\n            {\\n                c[s.charAt(i)-\\'0\\']++;\\n            }\\n        }\\n        for(i=0;i<10;i++)\\n        {\\n            if(c[i]>0)\\n                break;\\n        }\\n        if(i==10)\\n            return -1;\\n        for(i=9;i>=0;i--)\\n        {\\n            if(c[i]>0)\\n                l++;\\n            if(l==2)\\n            {\\n                return i;\\n            }\\n        }\\n        return -1;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n\\n    public int secondHighest(String s) {\\n        int c[]=new int[10];\\n        Arrays.fill(c,0);\\n        int i,l=0,h=0;\\n        for(i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)>=\\'0\\'&&s.charAt(i)<=\\'9\\')\\n            {\\n                c[s.charAt(i)-\\'0\\']++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1139817,
                "title": "python-one-liner",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return ([-1, -1] + sorted(set(int(c) for c in s if c.isdigit())))[-2]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return ([-1, -1] + sorted(set(int(c) for c in s if c.isdigit())))[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1135522,
                "title": "javascript-solution-easy-100-faster-80-53-more-memory-efficient",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    //let\\'s start by getting rid of all the non-digits\\n    let myRegex = /\\\\D/g\\n    s = s.replace(myRegex,\\'\\')\\n    var digits = s.split(\\'\\')\\n    //at this point, digits is an array of all the digit characters that were originally in s\\n    digits.sort(function(a, b){return b - a}) //sort the array into descending order\\n    var res = new Set(digits) //turn the array into a set, to remove duplicates\\n    if(res.size <=1){\\n        //if the set is sized 1, then there is no second largest digit\\n        return -1 \\n    }\\n    else{\\n        //otherwise, the second largest digit would be at index 1 (because we sorted the array into descending order)\\n        return [...res][1]\\n    }\\n};",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    //let\\'s start by getting rid of all the non-digits\\n    let myRegex = /\\\\D/g\\n    s = s.replace(myRegex,\\'\\')\\n    var digits = s.split(\\'\\')\\n    //at this point, digits is an array of all the digit characters that were originally in s\\n    digits.sort(function(a, b){return b - a}) //sort the array into descending order\\n    var res = new Set(digits) //turn the array into a set, to remove duplicates\\n    if(res.size <=1){\\n        //if the set is sized 1, then there is no second largest digit\\n        return -1 \\n    }\\n    else{\\n        //otherwise, the second largest digit would be at index 1 (because we sorted the array into descending order)\\n        return [...res][1]\\n    }\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1130770,
                "title": "java-o-n-simple-readable-solution-beats-100",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int digitCounts[] = new int[10];\\n        for (int i = 0; i < s.length(); i++) {\\n            char current = s.charAt(i);\\n            if (Character.isDigit(current)) {\\n                digitCounts[current - \\'0\\']++;\\n            }\\n        }\\n        \\n        boolean digitSeen = false;\\n        for (int i = digitCounts.length - 1; i >= 0; i--) {\\n            if (digitCounts[i] > 0) {\\n                if (digitSeen)\\n                    return i;\\n                digitSeen = true;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int digitCounts[] = new int[10];\\n        for (int i = 0; i < s.length(); i++) {\\n            char current = s.charAt(i);\\n            if (Character.isDigit(current)) {\\n                digitCounts[current - \\'0\\']++;\\n            }\\n        }\\n        \\n        boolean digitSeen = false;\\n        for (int i = digitCounts.length - 1; i >= 0; i--) {\\n            if (digitCounts[i] > 0) {\\n                if (digitSeen)\\n                    return i;\\n                digitSeen = true;\\n            }\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1124532,
                "title": "go-o-n-with-2-ints-memory",
                "content": "```\\nfunc secondHighest(s string) int {\\n    first := -1\\n    second := -1\\n    for _,c := range s {\\n        if unicode.IsDigit(c) {\\n            digit := int(c - \\'0\\')\\n            if digit > first {\\n                first, second = digit, first\\n            } else if digit > second && digit != first {\\n                second = digit\\n            }\\n        }\\n    }\\n    return second\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc secondHighest(s string) int {\\n    first := -1\\n    second := -1\\n    for _,c := range s {\\n        if unicode.IsDigit(c) {\\n            digit := int(c - \\'0\\')\\n            if digit > first {\\n                first, second = digit, first\\n            } else if digit > second && digit != first {\\n                second = digit\\n            }\\n        }\\n    }\\n    return second\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1119081,
                "title": "1-liners-python-ruby",
                "content": "Python:\\n```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *filter(s.count, \\'0123456789\\')][-2]\\n```\\n```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *sorted(set(filter(str.isdigit, s)))][-2]\\n```\\n```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *(i for i in range(10) if str(i) in s)][-2]\\n```\\nRuby:\\n```\\ndef second_highest(s)\\n  s.scan(/\\\\d/).uniq.sort[-2]&.to_i || -1\\nend\\n```\\n```\\ndef second_highest(s)\\n  ((\\'0\\'..\\'9\\').to_a & s.chars)[-2]&.to_i || -1\\nend\\n```",
                "solutionTags": [],
                "code": "```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *filter(s.count, \\'0123456789\\')][-2]\\n```\n```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *sorted(set(filter(str.isdigit, s)))][-2]\\n```\n```\\ndef secondHighest(self, s: str) -> int:\\n    return [-1, -1, *(i for i in range(10) if str(i) in s)][-2]\\n```\n```\\ndef second_highest(s)\\n  s.scan(/\\\\d/).uniq.sort[-2]&.to_i || -1\\nend\\n```\n```\\ndef second_highest(s)\\n  ((\\'0\\'..\\'9\\').to_a & s.chars)[-2]&.to_i || -1\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1118744,
                "title": "python-o-n-and-o-nlogn-solutions",
                "content": "O(n) Solution:\\n\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        res = set()\\n        \\n        #store all the digits in set\\n        for i in s:\\n            if i.isnumeric():\\n                res.add(int(i))\\n                \\n        if len(res) <= 1:\\n            return -1\\n        \\n        #find the second largest element\\n        first = second = float(-inf)\\n        \\n        res = list(res)\\n        \\n        for i in range(len(res)):\\n            #if the current element is smaller than first then update both first and second\\n            if res[i] > first:\\n                second = first\\n                first = res[i]\\n            \\n            #if the current element is in between then update second\\n            elif res[i] > second and res[i] != first:\\n                second = res[i]\\n        \\n        if second == float(-inf):\\n            return -1\\n        else:\\n            return second\\n      \\n```\\n      \\nO(nlogn) solution:\\n\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        res = set()\\n        \\n        #store all the digits in set\\n        for i in s:\\n            if i.isnumeric():\\n                res.add(int(i))\\n                \\n        if len(res) <= 1:\\n            return -1\\n        else:\\n            return sorted(res)[-2]\\n```\\n",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        res = set()\\n        \\n        #store all the digits in set\\n        for i in s:\\n            if i.isnumeric():\\n                res.add(int(i))\\n                \\n        if len(res) <= 1:\\n            return -1\\n        \\n        #find the second largest element\\n        first = second = float(-inf)\\n        \\n        res = list(res)\\n        \\n        for i in range(len(res)):\\n            #if the current element is smaller than first then update both first and second\\n            if res[i] > first:\\n                second = first\\n                first = res[i]\\n            \\n            #if the current element is in between then update second\\n            elif res[i] > second and res[i] != first:\\n                second = res[i]\\n        \\n        if second == float(-inf):\\n            return -1\\n        else:\\n            return second\\n      \\n```\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        res = set()\\n        \\n        #store all the digits in set\\n        for i in s:\\n            if i.isnumeric():\\n                res.add(int(i))\\n                \\n        if len(res) <= 1:\\n            return -1\\n        else:\\n            return sorted(res)[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3788260,
                "title": "2-c-solutions-with-and-without-hashset-beginner-friendly-approach",
                "content": "# Code\\n```\\n// Solution 1 (Without set)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int ans[2] = {-1, -1};\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                c -= \\'0\\';\\n                if (c > ans[0])\\n                    ans[1] = ans[0], ans[0] = c;\\n                else if(c != ans[0] && c > ans[1]) \\n                    ans[1] = c;\\n            }\\n        }\\n        return ans[1];\\n    }\\n};\\n\\n// Solution 2 (With set)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> ans;\\n        for(auto i : s){\\n            if(i>=\\'0\\' && i<=\\'9\\'){\\n                ans.insert(i-\\'0\\');\\n            }\\n        }\\n        if(ans.size() < 2)\\n\\t\\t    return -1;\\n    \\tauto resIt = ans.rbegin();\\n\\t    return *(++resIt);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\n// Solution 1 (Without set)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int ans[2] = {-1, -1};\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                c -= \\'0\\';\\n                if (c > ans[0])\\n                    ans[1] = ans[0], ans[0] = c;\\n                else if(c != ans[0] && c > ans[1]) \\n                    ans[1] = c;\\n            }\\n        }\\n        return ans[1];\\n    }\\n};\\n\\n// Solution 2 (With set)\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int> ans;\\n        for(auto i : s){\\n            if(i>=\\'0\\' && i<=\\'9\\'){\\n                ans.insert(i-\\'0\\');\\n            }\\n        }\\n        if(ans.size() < 2)\\n\\t\\t    return -1;\\n    \\tauto resIt = ans.rbegin();\\n\\t    return *(++resIt);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3666527,
                "title": "easy-c-solution-using-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        map<int,int>digit;\\n        for(int i=0;i<s.length();i++){\\n            if(!isalpha(s[i])) digit[s[i]-\\'0\\']++;\\n        }\\n        if(digit.size() <= 1) return -1;\\n        auto it = digit.rbegin();\\n        it++;\\n        return it->first;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        map<int,int>digit;\\n        for(int i=0;i<s.length();i++){\\n            if(!isalpha(s[i])) digit[s[i]-\\'0\\']++;\\n        }\\n        if(digit.size() <= 1) return -1;\\n        auto it = digit.rbegin();\\n        it++;\\n        return it->first;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3664315,
                "title": "c-easy-solution-beginner-s-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int maxi1 = -1, maxi2 = -1;\\n        int n = s.length();\\n        \\n        for(int i=0; i<n; i++){\\n            int num = s[i] - \\'0\\';\\n            if(num>=0 && num<=9){\\n                if(num > maxi1){\\n                    maxi2 = maxi1;\\n                    maxi1 = num;\\n                }\\n                else if(num != maxi1 && num > maxi2){\\n                    maxi2 = num;\\n                }\\n            }\\n        }\\n\\n        return maxi2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int maxi1 = -1, maxi2 = -1;\\n        int n = s.length();\\n        \\n        for(int i=0; i<n; i++){\\n            int num = s[i] - \\'0\\';\\n            if(num>=0 && num<=9){\\n                if(num > maxi1){\\n                    maxi2 = maxi1;\\n                    maxi1 = num;\\n                }\\n                else if(num != maxi1 && num > maxi2){\\n                    maxi2 = num;\\n                }\\n            }\\n        }\\n\\n        return maxi2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457504,
                "title": "100-simplified-solution-for-beginners",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n**remove Strings collect only digits & put inside      \\nArrraylist if it does not present &\\nif array size 2 return -1\\nsorting and  After removing 1st element,\\nthe element at position 2 will  be the second maxm\\n**\\n# Complexity\\n- Time complexity:O(nlogn)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        String t= s.replaceAll(\"\\\\\\\\D+\",\"\");\\n        System.out.println(t);\\n        ArrayList<Integer> ls= new ArrayList<>();\\n\\n        for(int i=0;i<t.length();i++){\\n            int val= t.charAt(i)-\\'0\\';\\n            if(!ls.contains(val)){\\n                ls.add(val);\\n            }\\n        }\\n\\n        //debug  printing the arraylist\\n        \\n        if(ls.size()<2) return -1;\\n\\n        // sort the arraylist \\n        Collections.sort(ls, Collections.reverseOrder());\\n        // for(int i=0;i<ls.size();i++){\\n        //     System.out.print(ls.get(i)+\" ->\");\\n        // }\\n\\n        ls.remove(ls.get(0));\\n\\n\\n        return ls.remove(0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        String t= s.replaceAll(\"\\\\\\\\D+\",\"\");\\n        System.out.println(t);\\n        ArrayList<Integer> ls= new ArrayList<>();\\n\\n        for(int i=0;i<t.length();i++){\\n            int val= t.charAt(i)-\\'0\\';\\n            if(!ls.contains(val)){\\n                ls.add(val);\\n            }\\n        }\\n\\n        //debug  printing the arraylist\\n        \\n        if(ls.size()<2) return -1;\\n\\n        // sort the arraylist \\n        Collections.sort(ls, Collections.reverseOrder());\\n        // for(int i=0;i<ls.size();i++){\\n        //     System.out.print(ls.get(i)+\" ->\");\\n        // }\\n\\n        ls.remove(ls.get(0));\\n\\n\\n        return ls.remove(0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3397693,
                "title": "java-set",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new TreeSet<>(Collections.reverseOrder());\\n\\n        for(char c:s.toCharArray())\\n            if(Character.isDigit(c))\\n                set.add(Integer.parseInt(String.valueOf(c)));\\n\\n        if(set.size() == 1)\\n            return -1;\\n\\n        int i=1;\\n        for(int j: set)\\n            if(i++==2)\\n                return j;\\n\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sort",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new TreeSet<>(Collections.reverseOrder());\\n\\n        for(char c:s.toCharArray())\\n            if(Character.isDigit(c))\\n                set.add(Integer.parseInt(String.valueOf(c)));\\n\\n        if(set.size() == 1)\\n            return -1;\\n\\n        int i=1;\\n        for(int j: set)\\n            if(i++==2)\\n                return j;\\n\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3176042,
                "title": "two-different-approach-java",
                "content": "\\n# 1 - solution\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet();\\n        \\n        for (char c : s.toCharArray())\\n            if (Character.isDigit(c)) set.add(Integer.parseInt(String.valueOf(c)));\\n        \\n        int maximum = 0;\\n        for (int i : set) maximum = Math.max(i, maximum);\\n\\n        int n = Integer.MIN_VALUE;\\n        for (int i : set)\\n            if (i < maximum) n = Math.max(i, n);\\n\\n        return n < 0 ? -1 : n;\\n    }\\n}\\n```\\n\\n\\n# Best solution\\n```\\n\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        int greatestDigit = -1;\\n        int secondGreatestDigit = -1;\\n        \\n        for (char c : s.toCharArray()) {\\n            if ((c <= 57)) {\\n                int curDigit = c - 48;\\n                if (curDigit > greatestDigit) {\\n                    secondGreatestDigit = greatestDigit;\\n                    greatestDigit = curDigit;\\n                } \\n                else if (curDigit == greatestDigit || curDigit == secondGreatestDigit);\\n                else if (curDigit > secondGreatestDigit) secondGreatestDigit = curDigit;\\n            }\\n        }\\n        \\n        return secondGreatestDigit;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet();\\n        \\n        for (char c : s.toCharArray())\\n            if (Character.isDigit(c)) set.add(Integer.parseInt(String.valueOf(c)));\\n        \\n        int maximum = 0;\\n        for (int i : set) maximum = Math.max(i, maximum);\\n\\n        int n = Integer.MIN_VALUE;\\n        for (int i : set)\\n            if (i < maximum) n = Math.max(i, n);\\n\\n        return n < 0 ? -1 : n;\\n    }\\n}\\n```\n```\\n\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        int greatestDigit = -1;\\n        int secondGreatestDigit = -1;\\n        \\n        for (char c : s.toCharArray()) {\\n            if ((c <= 57)) {\\n                int curDigit = c - 48;\\n                if (curDigit > greatestDigit) {\\n                    secondGreatestDigit = greatestDigit;\\n                    greatestDigit = curDigit;\\n                } \\n                else if (curDigit == greatestDigit || curDigit == secondGreatestDigit);\\n                else if (curDigit > secondGreatestDigit) secondGreatestDigit = curDigit;\\n            }\\n        }\\n        \\n        return secondGreatestDigit;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3065375,
                "title": "java-javascript-solution-jw",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\nJava:\\n```\\npublic int secondHighest(String s) {\\n    int first = -1, sec = -1;\\n    for (int i = 0; i < s.length(); ++i) {\\n        char c = s.charAt(i); \\n        if (Character.isDigit(c)) {\\n            int d = c - \\'0\\';\\n            if (first < d) {\\n                sec = first;\\n                first = d;\\n            } else if (sec < d && d < first) {\\n                sec = d;\\n            }\\n        }\\n    }\\n    return sec;\\n}\\n```\\nJavascript:\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let first = -1, sec = -1;\\n    for (let i = 0; i < s.length; ++i) {\\n        let c =  +s.charAt(i); \\n        if (Number.isInteger(c)) {\\n            if (first < c) {\\n                sec = first;\\n                first = c;\\n            } else if (sec < c && c < first) {\\n                sec = c;\\n            }\\n        }\\n    }\\n    return sec;\\n};\\n```",
                "solutionTags": [
                    "Java",
                    "JavaScript"
                ],
                "code": "```\\npublic int secondHighest(String s) {\\n    int first = -1, sec = -1;\\n    for (int i = 0; i < s.length(); ++i) {\\n        char c = s.charAt(i); \\n        if (Character.isDigit(c)) {\\n            int d = c - \\'0\\';\\n            if (first < d) {\\n                sec = first;\\n                first = d;\\n            } else if (sec < d && d < first) {\\n                sec = d;\\n            }\\n        }\\n    }\\n    return sec;\\n}\\n```\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let first = -1, sec = -1;\\n    for (let i = 0; i < s.length; ++i) {\\n        let c =  +s.charAt(i); \\n        if (Number.isInteger(c)) {\\n            if (first < c) {\\n                sec = first;\\n                first = c;\\n            } else if (sec < c && c < first) {\\n                sec = c;\\n            }\\n        }\\n    }\\n    return sec;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2945667,
                "title": "simple-100-faster-beginner-friendly-treeset",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAll we have to found here is second Distinct largest number.\\nfor the test case **\" ck077 \"** the digits are [0,7] where the largest digit is 7 and the second largest is 0.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n###### ***Brute Force and Treeset.***\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$ O(n*logn)$$ for adding elements in treeset\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n$$O(n)$$ where n is length of string\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n\\n        char[] c=s.toCharArray();\\n\\n        TreeSet<Integer> set=new TreeSet<>();\\n\\n        for(int i=0;i<c.length;i++)\\n        {\\n            if(c[i]>=\\'0\\' && c[i]<=\\'9\\')\\n            {\\n                set.add(c[i]-\\'0\\');\\n            }\\n        }\\n\\n        \\n        if(set.size()==0 || set.size()==1)\\n        return -1;\\n\\n\\n        set.pollLast();\\n\\n        return set.last();\\n\\n\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String",
                    "Binary Indexed Tree",
                    "Hash Function"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n\\n        char[] c=s.toCharArray();\\n\\n        TreeSet<Integer> set=new TreeSet<>();\\n\\n        for(int i=0;i<c.length;i++)\\n        {\\n            if(c[i]>=\\'0\\' && c[i]<=\\'9\\')\\n            {\\n                set.add(c[i]-\\'0\\');\\n            }\\n        }\\n\\n        \\n        if(set.size()==0 || set.size()==1)\\n        return -1;\\n\\n\\n        set.pollLast();\\n\\n        return set.last();\\n\\n\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2889171,
                "title": "python3-memory-beats-97-22-how-can-i-improve-the-runtime-though",
                "content": "# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        nums = []\\n        for char in s:\\n            if char.isdigit():\\n                nums.append(int(char))\\n        nums = [num for num in nums if num != max(nums)]\\n        if len(nums) >= 1: return max(nums)\\n        else: return -1\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/c4c71af3-f3b3-48a6-ab0d-a185d1e6bc34_1670469692.8230677.png)\\n![image.png](https://assets.leetcode.com/users/images/71093191-2e72-4fb2-836e-8e2154a50128_1670469734.680368.png)\\nAww, man\\u2934",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        nums = []\\n        for char in s:\\n            if char.isdigit():\\n                nums.append(int(char))\\n        nums = [num for num in nums if num != max(nums)]\\n        if len(nums) >= 1: return max(nums)\\n        else: return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2794291,
                "title": "python-easy-to-understand",
                "content": "\\n# Approach\\nIndexing and Brute Force\\n\\n# Complexity\\n- Time complexity:\\nO(NlogN)\\n\\n- Space complexity:\\nO(N)\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        lst = []\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                lst.append(s[i])\\n        lst = list(set(lst))\\n        if len(lst) <= 1:\\n            return -1\\n        else:\\n            lst.sort()\\n            index = len(lst)-2\\n            res = lst[index]\\n            return res\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        lst = []\\n        for i in range(len(s)):\\n            if s[i].isdigit():\\n                lst.append(s[i])\\n        lst = list(set(lst))\\n        if len(lst) <= 1:\\n            return -1\\n        else:\\n            lst.sort()\\n            index = len(lst)-2\\n            res = lst[index]\\n            return res\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2637991,
                "title": "double-iteration-max",
                "content": "```\\nprivate:\\n    int max(int i, char j){\\n        int r = j-\\'0\\';\\n        if(i>r)\\n            return i;\\n        return r;\\n    }\\npublic:\\n    int secondHighest(string s) {\\n        int lar=-1 , slar=-1;\\n        for(int i=0;i<s.size();i++){\\n            \\n            if(isdigit(s[i])){\\n                lar = max(lar, s[i]);\\n                cout<<lar<<\" \";\\n            }\\n        }\\n        for(int i=0;i<s.size();i++){\\n            if(isdigit(s[i]) && s[i]-\\'0\\' != lar){\\n                slar = max(slar, s[i]);\\n            }\\n        }\\n        return slar;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nprivate:\\n    int max(int i, char j){\\n        int r = j-\\'0\\';\\n        if(i>r)\\n            return i;\\n        return r;\\n    }\\npublic:\\n    int secondHighest(string s) {\\n        int lar=-1 , slar=-1;\\n        for(int i=0;i<s.size();i++){\\n            \\n            if(isdigit(s[i])){\\n                lar = max(lar, s[i]);\\n                cout<<lar<<\" \";\\n            }\\n        }\\n        for(int i=0;i<s.size();i++){\\n            if(isdigit(s[i]) && s[i]-\\'0\\' != lar){\\n                slar = max(slar, s[i]);\\n            }\\n        }\\n        return slar;\\n    }\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2402900,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int firstmax=INT_MIN;\\n        int secondmax=INT_MIN;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\')\\n            {\\n                int val=s[i]-\\'0\\';\\n                \\n                if(val>firstmax)\\n                {\\n                    secondmax=max(secondmax,firstmax);\\n                    firstmax=val;\\n                }\\n                else if(val!=firstmax and val<firstmax and val>secondmax)\\n                {\\n                    secondmax=val;\\n                }\\n            }\\n        }\\n        if(secondmax==INT_MIN)\\n        {\\n            return -1;\\n        }\\n        return secondmax;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int firstmax=INT_MIN;\\n        int secondmax=INT_MIN;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\')\\n            {\\n                int val=s[i]-\\'0\\';\\n                \\n                if(val>firstmax)\\n                {\\n                    secondmax=max(secondmax,firstmax);\\n                    firstmax=val;\\n                }\\n                else if(val!=firstmax and val<firstmax and val>secondmax)\\n                {\\n                    secondmax=val;\\n                }\\n            }\\n        }\\n        if(secondmax==INT_MIN)\\n        {\\n            return -1;\\n        }\\n        return secondmax;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2342861,
                "title": "c-100-best-approach-easy-to-understand",
                "content": "**Please vote my approach**\\n```\\npublic:\\n    int secondHighest(string s) {\\n        int ans=-1;\\n        int max=-1;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n                int a=s[i]-\\'0\\';\\n                if(a>ans){\\n                    if(a>max){\\n                        ans=max;\\n                        max=a;\\n                    } if(max!=a){\\n                       ans=a;\\n                   }\\n                }\\n            }\\n        }\\n         return ans;                 \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\npublic:\\n    int secondHighest(string s) {\\n        int ans=-1;\\n        int max=-1;\\n        for(int i=0;i<s.length();i++){\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n                int a=s[i]-\\'0\\';\\n                if(a>ans){\\n                    if(a>max){\\n                        ans=max;\\n                        max=a;\\n                    } if(max!=a){\\n                       ans=a;\\n                   }\\n                }\\n            }\\n        }\\n         return ans;                 \\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2064337,
                "title": "fastest-easy-java-solution",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) \\n    {\\n        int largest = -1;\\n        int second = largest;\\n        for(char c:s.toCharArray())\\n        {\\n            int i = Character.getNumericValue(c);\\n            if(i>=0 && i<=9)\\n            {\\n                if(i>largest)\\n                {\\n                    second = largest;\\n                    largest = i;\\n                }\\n                else if(i<largest && i>second)\\n                    second = i;\\n            }\\n        }\\n        return second;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int secondHighest(String s) \\n    {\\n        int largest = -1;\\n        int second = largest;\\n        for(char c:s.toCharArray())\\n        {\\n            int i = Character.getNumericValue(c);\\n            if(i>=0 && i<=9)\\n            {\\n                if(i>largest)\\n                {\\n                    second = largest;\\n                    largest = i;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 2058570,
                "title": "python-solution",
                "content": "```\\nlst = []\\n        \\nfor c in s:\\n\\tif c.isdigit():\\n\\t\\tlst.append(c)\\n\\nlst = sorted(set(lst),reverse=True)\\nif len(lst) > 1:\\n\\treturn lst[1]\\nelse:\\n\\treturn -1\\n```",
                "solutionTags": [
                    "Ordered Set"
                ],
                "code": "```\\nlst = []\\n        \\nfor c in s:\\n\\tif c.isdigit():\\n\\t\\tlst.append(c)\\n\\nlst = sorted(set(lst),reverse=True)\\nif len(lst) > 1:\\n\\treturn lst[1]\\nelse:\\n\\treturn -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2050780,
                "title": "python-3-o-n-time-o-n-space",
                "content": "![image](https://assets.leetcode.com/users/images/a0753d72-5582-4693-8343-e74399d64642_1652874480.4883132.png)\\n\\n    def secondHighest(self, s: str) -> int:\\n        \"\"\" O(N)TS\"\"\"\\n        ans = list(set(filter(str.isdigit, s)))\\n        return heapq.nlargest(2, ans)[-1] if len(ans) > 1 else -1",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/a0753d72-5582-4693-8343-e74399d64642_1652874480.4883132.png)\\n\\n    def secondHighest(self, s: str) -> int:\\n        \"\"\" O(N)TS\"\"\"\\n        ans = list(set(filter(str.isdigit, s)))\\n        return heapq.nlargest(2, ans)[-1] if len(ans) > 1 else -1",
                "codeTag": "Python3"
            },
            {
                "id": 2026819,
                "title": "simplest-c-solution-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int f = -1 , se = -1;\\n        for(char ch:s)\\n            if(ch-48 < 10 && ch-48 > -1){\\n                if(ch-48 > f){\\n                    se = f;\\n                    f = ch-48;\\n                    continue;\\n                }\\n                if(ch-48 > se && ch-48 != f) se = ch-48;\\n            }\\n        return se;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int f = -1 , se = -1;\\n        for(char ch:s)\\n            if(ch-48 < 10 && ch-48 > -1){\\n                if(ch-48 > f){\\n                    se = f;\\n                    f = ch-48;\\n                    continue;\\n                }\\n                if(ch-48 > se && ch-48 != f) se = ch-48;\\n            }\\n        return se;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1989368,
                "title": "python3-simple-solution-with-explanation",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        b=[]\\n        \\n        # Creating a list of only numbers in the string\\n        for i in set(s): # Using set speeds up the loop by only taking unique characters\\n            if i.isnumeric(): # Built in function to check if an element is a number\\n                b.append(i)\\n        \\n        # Sorting the list in descending order\\n        b.sort(reverse=True)\\n        \\n        # Checking if the length of the list is greater than 2\\n        if len(b)>=2:\\n            return b[1] # Return second largest\\n        else:\\n            return -1\\n    \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        b=[]\\n        \\n        # Creating a list of only numbers in the string\\n        for i in set(s): # Using set speeds up the loop by only taking unique characters\\n            if i.isnumeric(): # Built in function to check if an element is a number\\n                b.append(i)\\n        \\n        # Sorting the list in descending order\\n        b.sort(reverse=True)\\n        \\n        # Checking if the length of the list is greater than 2\\n        if len(b)>=2:\\n            return b[1] # Return second largest\\n        else:\\n            return -1\\n    \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1952113,
                "title": "second-largest-digit-in-a-string-29-ms-faster-than-98-10",
                "content": "```\\ns = \"abc111\"\\na = set(s)\\nb = list(a)\\nt = []\\nfor i in b:\\n    if i == \\'1\\' or i == \\'2\\' or i == \\'3\\' or i == \\'4\\' or i == \\'5\\' or i == \\'6\\' or i == \\'7\\' or i == \\'8\\' or i == \\'9\\' or i == \\'0\\':\\n        t.append(int(i))\\n\\nt.sort()\\nt.reverse()\\nif len(t) > 1:\\n    return t[1]\\nelse:\\n    return -1\\n```",
                "solutionTags": [
                    "Python3",
                    "Sorting",
                    "Ordered Set"
                ],
                "code": "```\\ns = \"abc111\"\\na = set(s)\\nb = list(a)\\nt = []\\nfor i in b:\\n    if i == \\'1\\' or i == \\'2\\' or i == \\'3\\' or i == \\'4\\' or i == \\'5\\' or i == \\'6\\' or i == \\'7\\' or i == \\'8\\' or i == \\'9\\' or i == \\'0\\':\\n        t.append(int(i))\\n\\nt.sort()\\nt.reverse()\\nif len(t) > 1:\\n    return t[1]\\nelse:\\n    return -1\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1902972,
                "title": "clean-easiest-python-3-faster-solution-combination-use-of-list-and-set-straight-forward",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        temp=[]\\n        res={}\\n        largest=0\\n        sec_largest=0\\n        for i in s:\\n            if i.isdigit():\\n                c=int(i)\\n                temp.append(c)\\n        temp.sort()\\n        res=set(temp)\\n        temp=list(res)\\n        if len(temp)>1:\\n            for i in temp:\\n                if largest<i:\\n                    sec_largest=largest\\n                    largest=i\\n                elif i>=sec_largest:\\n                    sec_largest=i\\n\\n            return (sec_largest)\\n        else:\\n            return (-1)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        temp=[]\\n        res={}\\n        largest=0\\n        sec_largest=0\\n        for i in s:\\n            if i.isdigit():\\n                c=int(i)\\n                temp.append(c)\\n        temp.sort()\\n        res=set(temp)\\n        temp=list(res)\\n        if len(temp)>1:\\n            for i in temp:\\n                if largest<i:\\n                    sec_largest=largest\\n                    largest=i\\n                elif i>=sec_largest:\\n                    sec_largest=i\\n\\n            return (sec_largest)\\n        else:\\n            return (-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1845712,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        t=[]\\n        if s.isalpha():\\n                return(-1)\\n        for i in range(len(s)):\\n            if (s[i].isdigit()):\\n                t.append(int(s[i]))\\n        if len(sorted(list(set(t))))==1:\\n            return -1\\n        else:\\n            return(sorted(list(set(t)))[-2])\\n```",
                "solutionTags": [
                    "String",
                    "Stack",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        t=[]\\n        if s.isalpha():\\n                return(-1)\\n        for i in range(len(s)):\\n            if (s[i].isdigit()):\\n                t.append(int(s[i]))\\n        if len(sorted(list(set(t))))==1:\\n            return -1\\n        else:\\n            return(sorted(list(set(t)))[-2])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1812230,
                "title": "c-0ms-o-1-space-complexity-easy-explained-code",
                "content": "**Please do remeber to upvote if you liked my code. This motivates to keep writing more such solutions :)**\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) \\n    {\\n        int max1 = -1, max2 = -1;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            int temp = s[i]-\\'0\\';\\n            if(temp >= 0 and temp <= 9)    // Checking if char is a number bw 0 to 9\\n            {\\n                if(temp > max1)   // Case1: Check if number is > max1\\n                {\\n                    max2 = max1;\\n                    max1 = temp;\\n                }\\n                else if(temp > max2 and temp < max1)  // Case2: Checking if number is > max2 but < than max1\\n                    max2 = temp;\\n            }\\n        }\\n        \\n        return max2;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) \\n    {\\n        int max1 = -1, max2 = -1;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            int temp = s[i]-\\'0\\';\\n            if(temp >= 0 and temp <= 9)    // Checking if char is a number bw 0 to 9\\n            {\\n                if(temp > max1)   // Case1: Check if number is > max1\\n                {\\n                    max2 = max1;\\n                    max1 = temp;\\n                }\\n                else if(temp > max2 and temp < max1)  // Case2: Checking if number is > max2 but < than max1\\n                    max2 = temp;\\n            }\\n        }\\n        \\n        return max2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1788176,
                "title": "easy-peezy",
                "content": "\\n```\\n\\n```class Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>v;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                v.push_back(s[i]-\\'0\\');\\n            }\\n        }\\n        if(v.size()==0)\\n        {\\n            return -1;\\n        }\\n        \\n        sort(v.begin(),v.end());\\n          int x=v[v.size()-1];\\n        for(int j=v.size()-2;j>=0;j--)\\n        {\\n          if(v[j]<x)\\n          {\\n              return v[j];\\n          }\\n        }\\n        return -1;\\n    }\\n};",
                "solutionTags": [],
                "code": "```\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1764083,
                "title": "javascript-easy-to-understand-solution",
                "content": "You can also use `Number.isNaN()` to determine if value is a number.\\n\\n- relying on fact that digits are positive values we can set both first and second maxes to `-1`\\n\\n```js\\nvar secondHighest = function(s) {\\n    const numbers = new Set(\\'0123456789\\');\\n    \\n    let max = -1;\\n    let secondMax = -1;\\n    for (const char of s) {\\n        if (!numbers.has(char)) {\\n            continue;\\n        }\\n        \\n        const num = Number(char);\\n        \\n        if (num === max) {\\n            continue;\\n        }\\n        \\n        if (num > max) {\\n            secondMax = max;\\n            max = num;\\n            continue;\\n        }\\n        \\n        if (num > secondMax) {\\n            secondMax = num;\\n        }\\n    }\\n    \\n    return secondMax;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```js\\nvar secondHighest = function(s) {\\n    const numbers = new Set(\\'0123456789\\');\\n    \\n    let max = -1;\\n    let secondMax = -1;\\n    for (const char of s) {\\n        if (!numbers.has(char)) {\\n            continue;\\n        }\\n        \\n        const num = Number(char);\\n        \\n        if (num === max) {\\n            continue;\\n        }\\n        \\n        if (num > max) {\\n            secondMax = max;\\n            max = num;\\n            continue;\\n        }\\n        \\n        if (num > secondMax) {\\n            secondMax = num;\\n        }\\n    }\\n    \\n    return secondMax;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1751848,
                "title": "c-simple-solution-100-run-time",
                "content": "**There is no need to use set here. We can simply use two variables.**\\n```\\nint secondHighest(string s) {\\n        \\n        int maxm=-1,preMax=-1;\\n        \\n        for(auto ch: s){\\n           //check if it is a digit or not\\n            if(isdigit(ch)){\\n             //make \"ch\" to int\\n                ch = ch - \\'0\\';\\n                \\n              //update res\\n                if(ch > maxm){\\n                    preMax=maxm;//store curr max in pre maxm\\n                    maxm  =ch;  //update max value\\n                }\\n                \\n                else if(ch != maxm && ch > preMax) preMax=ch;\\n                \\n            }\\n        }\\n        return preMax;\\n    }\\n```\\n# Please upvote, If you liked the solution!",
                "solutionTags": [],
                "code": "```\\nint secondHighest(string s) {\\n        \\n        int maxm=-1,preMax=-1;\\n        \\n        for(auto ch: s){\\n           //check if it is a digit or not\\n            if(isdigit(ch)){\\n             //make \"ch\" to int\\n                ch = ch - \\'0\\';\\n                \\n              //update res\\n                if(ch > maxm){\\n                    preMax=maxm;//store curr max in pre maxm\\n                    maxm  =ch;  //update max value\\n                }\\n                \\n                else if(ch != maxm && ch > preMax) preMax=ch;\\n                \\n            }\\n        }\\n        return preMax;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1743793,
                "title": "simple-solution-java-o-n",
                "content": "Time Complexity: O(N)\\nSpace Complexity: O(1)\\n\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int max=-1,smax=-1;\\n        \\n        for(int i=0;i<s.length();i++){\\n            if(Character.isDigit(s.charAt(i))){\\n                int digit=s.charAt(i)-\\'0\\';\\n                if(digit>max){\\n                    smax=max;\\n                    max=digit;\\n                }\\n                else if(digit>smax && max!=digit)\\n                    smax=digit;\\n            }\\n        }\\n        \\n        return smax;\\n    }\\n}\\n```\\nPlease **upvote**, if you like the solution:)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int max=-1,smax=-1;\\n        \\n        for(int i=0;i<s.length();i++){\\n            if(Character.isDigit(s.charAt(i))){\\n                int digit=s.charAt(i)-\\'0\\';\\n                if(digit>max){\\n                    smax=max;\\n                    max=digit;\\n                }\\n                else if(digit>smax && max!=digit)\\n                    smax=digit;\\n            }\\n        }\\n        \\n        return smax;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1637473,
                "title": "easy-c-solution-0ms-constant-space",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a=-1, b=-1, count=0;\\n        for(auto &i : s){\\n            if((int)i>=48 && (int)i<=57){\\n                if(i-\\'0\\'>b || i - \\'0\\' >a){\\n                    if(i-\\'0\\'>a && i-\\'0\\'<b){\\n                        a=i-\\'0\\';\\n                        count++;\\n                        continue;\\n                    }\\n                    if(b!=i-\\'0\\'){\\n                        a=b;\\n                        b=i-\\'0\\';\\n                        count++;\\n                    } \\n                }\\n                \\n            }\\n        }\\n        if(count<2 || a==b) return -1;\\n        return a;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a=-1, b=-1, count=0;\\n        for(auto &i : s){\\n            if((int)i>=48 && (int)i<=57){\\n                if(i-\\'0\\'>b || i - \\'0\\' >a){\\n                    if(i-\\'0\\'>a && i-\\'0\\'<b){\\n                        a=i-\\'0\\';\\n                        count++;\\n                        continue;\\n                    }\\n                    if(b!=i-\\'0\\'){\\n                        a=b;\\n                        b=i-\\'0\\';\\n                        count++;\\n                    } \\n                }\\n                \\n            }\\n        }\\n        if(count<2 || a==b) return -1;\\n        return a;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1615321,
                "title": "java-streams-solution-one-liner",
                "content": "```java\\nclass Solution {\\n    public int secondHighest(String s) {\\n        return s.chars() // create an IntStream of the characters in the String\\n            .filter(Character::isDigit) // only consider digit characters\\n            .distinct() // don\\'t consider duplicates\\n            .map(c -> -c).sorted() // sort in descending order\\n            .skip(1) // skip first one (to get second largest)\\n            .map(c -> -c-\\'0\\') // convert digit character to int\\n            .findFirst().orElse(-1); // return first (second after skip), if not found return -1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int secondHighest(String s) {\\n        return s.chars() // create an IntStream of the characters in the String\\n            .filter(Character::isDigit) // only consider digit characters\\n            .distinct() // don\\'t consider duplicates\\n            .map(c -> -c).sorted() // sort in descending order\\n            .skip(1) // skip first one (to get second largest)\\n            .map(c -> -c-\\'0\\') // convert digit character to int\\n            .findFirst().orElse(-1); // return first (second after skip), if not found return -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1587995,
                "title": "c-brute-force-easy-thinkable-solution",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>v;\\n        for(int i=0;i<s.size();i++){\\n            if(isdigit(s[i])){\\n                v.push_back(s[i]-\\'0\\');\\n            }\\n        }\\n        set<int>st;\\n        for(int i=0;i<v.size();i++){\\n            st.insert(v[i]);\\n        }\\n        vector<int>nums;\\n        for(auto& num :st) {\\n            nums.push_back(num);\\n        }\\n        if(nums.size()<2) return -1;\\n            else return nums[nums.size()-2];\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>v;\\n        for(int i=0;i<s.size();i++){\\n            if(isdigit(s[i])){\\n                v.push_back(s[i]-\\'0\\');\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1581793,
                "title": "100-faster-cpp-c-simple-and-easy-with-explanation-clean-n-clear-code",
                "content": "The intuition for the problem is very simple. we just traverse the characters of the string and whenever we detect a number character we push it into the set. The reason of using the set here is that set avoid the repetition of elements and also set helps in maintaining the order of the elements. At the end we returned the element present at the last second position of the set ( as set.rbegin() gives the reference to the last element so ++set.rbegin() gives the reference to the last second). \\n\\nNote: the catch in this problem is that if there is no second largest element then we have to return -1;\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int>st;\\n        \\n        for(int i = 0; i<s.size(); i++){\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n                st.insert(s[i]-\\'0\\');\\n            }\\n        }\\n        \\n        if(st.size()>1){\\n            return *(++st.rbegin());\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int>st;\\n        \\n        for(int i = 0; i<s.size(); i++){\\n            if(s[i]>=\\'0\\' and s[i]<=\\'9\\'){\\n                st.insert(s[i]-\\'0\\');\\n            }\\n        }\\n        \\n        if(st.size()>1){\\n            return *(++st.rbegin());\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1565266,
                "title": "python-100-faster",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        nset = set(s)\\n        found = False\\n        for i in range(9,-1,-1):\\n            if str(i) in nset:\\n                if found:\\n                    return i\\n                found = True\\n        return -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        nset = set(s)\\n        found = False\\n        for i in range(9,-1,-1):\\n            if str(i) in nset:\\n                if found:\\n                    return i\\n                found = True\\n        return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1511094,
                "title": "java-solution-using-treeset-sortedset",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        SortedSet<Character> set = new TreeSet<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (Character.isDigit(s.charAt(i)))\\n                set.add(s.charAt(i));\\n        }\\n        if (set.size() > 1) {\\n            set.remove(set.last());\\n            return set.last() - \\'0\\';\\n        } else {\\n            return -1;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        SortedSet<Character> set = new TreeSet<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            if (Character.isDigit(s.charAt(i)))\\n                set.add(s.charAt(i));\\n        }\\n        if (set.size() > 1) {\\n            set.remove(set.last());\\n            return set.last() - \\'0\\';\\n        } else {\\n            return -1;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1475444,
                "title": "java-1ms-faster-than-100-of-java-submissions-on-time-o1-space",
                "content": "```\\nclass Solution {\\n  public int secondHighest(String s) {\\n    // fMax - first maximum\\n\\t// sMax = second maximum\\n    int fMax = -1, sMax = -1;\\n\\n    for (char c: s.toCharArray()) {\\n      if (Character.isDigit(c)) {\\n\\t    // get numeric value from char\\n        int numValue = (int) c - \\'0\\';\\n        if (numValue > fMax) {\\n          sMax = fMax;\\n          fMax = numValue;\\n\\t\\t// check if sMax is not the same as fMax\\n        } else if (numValue > sMax && numValue != fMax) {\\n          sMax = numValue;\\n        }\\n      }\\n    }\\n    return fMax == sMax ? -1 : sMax;\\n  }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  public int secondHighest(String s) {\\n    // fMax - first maximum\\n\\t// sMax = second maximum\\n    int fMax = -1, sMax = -1;\\n\\n    for (char c: s.toCharArray()) {\\n      if (Character.isDigit(c)) {\\n\\t    // get numeric value from char\\n        int numValue = (int) c - \\'0\\';\\n        if (numValue > fMax) {\\n          sMax = fMax;\\n          fMax = numValue;\\n\\t\\t// check if sMax is not the same as fMax\\n        } else if (numValue > sMax && numValue != fMax) {\\n          sMax = numValue;\\n        }\\n      }\\n    }\\n    return fMax == sMax ? -1 : sMax;\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1456296,
                "title": "c-faster-than-100-easy-explanation-with-comments",
                "content": "```\\nint secondHighest(string s) {\\n        int l = s.length();\\n        vector<int> v;\\n\\t\\t\\n\\t\\t// Let\\'s get all the digits in the string and place it inside a vector.\\n        for(int i=0; i<l; i++) {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                v.push_back(s[i] - \\'0\\'); // Note, we are already converting characters in string to integer values.\\n            }\\n        }\\n        sort(begin(v), end(v)); // Sort elements inside vector \\n\\t\\t\\n\\t\\t// This loop takes care for the repeating elements. Say if we have 2,3,4,7,7 in vector. Then second largest element would be 4.\\n        while(v.size() > 1) { \\n            int sz = v.size();\\n            if(v[sz - 1] > v[sz - 2]) return v[sz-2];\\n            else v.pop_back();\\n        }\\n        return -1;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint secondHighest(string s) {\\n        int l = s.length();\\n        vector<int> v;\\n\\t\\t\\n\\t\\t// Let\\'s get all the digits in the string and place it inside a vector.\\n        for(int i=0; i<l; i++) {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\') {\\n                v.push_back(s[i] - \\'0\\'); // Note, we are already converting characters in string to integer values.\\n            }\\n        }\\n        sort(begin(v), end(v)); // Sort elements inside vector \\n\\t\\t\\n\\t\\t// This loop takes care for the repeating elements. Say if we have 2,3,4,7,7 in vector. Then second largest element would be 4.\\n        while(v.size() > 1) { \\n            int sz = v.size();\\n            if(v[sz - 1] > v[sz - 2]) return v[sz-2];\\n            else v.pop_back();\\n        }\\n        return -1;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1453529,
                "title": "c-easy-solution",
                "content": "\\tpublic class Solution {\\n\\t\\tpublic int SecondHighest(string s) {\\n\\t\\t\\tint first = -1, second = -1;\\n\\n\\t\\t\\tforeach(var chr in s) {\\n\\t\\t\\t\\tif(chr >= \\'0\\' && chr <= \\'9\\') {\\n\\t\\t\\t\\t\\tint num = Convert.ToInt16(chr - \\'0\\');\\n\\t\\t\\t\\t\\tif(num == first)\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\telse if(num > first) {\\n\\t\\t\\t\\t\\t\\tsecond = first;\\n\\t\\t\\t\\t\\t\\tfirst = num;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse if(num > second)\\n\\t\\t\\t\\t\\t\\tsecond = num;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn second;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution {\\n\\t\\tpublic int SecondHighest(string s) {\\n\\t\\t\\tint first = -1, second = -1;\\n\\n\\t\\t\\tforeach(var chr in s) {\\n\\t\\t\\t\\tif(chr >= \\'0\\' && chr <= \\'9\\') {\\n\\t\\t\\t\\t\\tint num = Convert.ToInt16(chr - \\'0\\');\\n\\t\\t\\t\\t\\tif(num == first)\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\telse if(num > first) {\\n\\t\\t\\t\\t\\t\\tsecond = first;\\n\\t\\t\\t\\t\\t\\tfirst = num;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 1420446,
                "title": "simple-o-n-solution-question-explained",
                "content": "I was really confussed with the question as it was asking for the second largest \\ne.g \"ck077\" is expted to return 0 but my understanding was 7 is the second largest so that should be returned\\n\\nWhat we want is the second largest distnct elements so the distinct elements from \"ck077\", would be [0, 7] and 7 is the largest but we want the second largest which is 0.\\n\\n```\\nvar secondHighest = function(s) {\\n    const arr = new Array(10).fill(false)\\n    \\n    for (let c of s) {\\n        if (parseInt(c) >= 0) arr[parseInt(c)] = true\\n    }\\n            \\n    let foundFirstLargest = false\\n    for (let i=9; i>=0; i--) {\\n        if (arr[i] === true && foundFirstLargest) return i\\n        else if (arr[i] === true) foundFirstLargest = true\\n    }\\n    \\n    return -1   \\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar secondHighest = function(s) {\\n    const arr = new Array(10).fill(false)\\n    \\n    for (let c of s) {\\n        if (parseInt(c) >= 0) arr[parseInt(c)] = true\\n    }\\n            \\n    let foundFirstLargest = false\\n    for (let i=9; i>=0; i--) {\\n        if (arr[i] === true && foundFirstLargest) return i\\n        else if (arr[i] === true) foundFirstLargest = true\\n    }\\n    \\n    return -1   \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1418078,
                "title": "faster-than-91-in-python3",
                "content": "def secondHighest(self, s: str) -> int:\\n        li=[]\\n        for i in s:\\n            if(i.isdigit()):\\n                li.append(i)\\n        li=list(set(li))\\n        li.sort()\\n        try:\\n            return li[-2]\\n        except:\\n            return -1",
                "solutionTags": [],
                "code": "def secondHighest(self, s: str) -> int:\\n        li=[]\\n        for i in s:\\n            if(i.isdigit()):\\n                li.append(i)\\n        li=list(set(li))\\n        li.sort()\\n        try:\\n            return li[-2]\\n        except:\\n            return -1",
                "codeTag": "Python3"
            },
            {
                "id": 1412027,
                "title": "c-o-n-time-o-1-space-no-usage-of-set",
                "content": "We need to keep track of only the maximum and the second maximum digit in the string \\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max = -1 , smax = -1; \\n        for(char c : s){\\n            if(c>=\\'0\\' && c<=\\'9\\') {\\n                int n = c-\\'0\\'; \\n                if(n>max) {\\n                    smax = max; \\n                    max = n;\\n                }\\n                else if(n>smax && n<max) {\\n                    smax = n; \\n                }\\n            }\\n        }\\n        return smax;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int max = -1 , smax = -1; \\n        for(char c : s){\\n            if(c>=\\'0\\' && c<=\\'9\\') {\\n                int n = c-\\'0\\'; \\n                if(n>max) {\\n                    smax = max; \\n                    max = n;\\n                }\\n                else if(n>smax && n<max) {\\n                    smax = n; \\n                }\\n            }\\n        }\\n        return smax;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1406929,
                "title": "java-three-solutions-with-set-and-without-set",
                "content": "\\n1) With TreeSet\\n2) With Array(Extra space)\\n3) Without  Extra Data Structure(constant space and faster than 99%)\\n\\n1: With TreeSet\\n```\\npublic int secondHighest(String s) {\\n        TreeSet<Integer>pq= new TreeSet<>((a,b)->b-a);\\n        for(var c:s.toCharArray())\\n        {\\n            if(Character.isDigit(c))\\n            {\\n                pq.add(Integer.parseInt(c+\"\"));\\n            }\\n        }\\n        if(pq.size()<2)\\n            return -1;\\n        Iterator<Integer> itr = pq.iterator();\\n        \\n        itr.next() ;\\n        return itr.next();\\n    }\\n```\\t\\n\\t\\n2)Without Tree Set(BetterTime Complexity)\\t\\n\\t\\n     public int secondHighest(String s) {\\n         int arr[]=new int[10];\\n         for(var c:s.toCharArray())\\n        {\\n             if(c>=\\'0\\' && c<=\\'9\\')\\n                 arr[c-\\'0\\']++;\\n         }\\n         PriorityQueue<Integer>pq= new PriorityQueue<>();\\n         for(int i=9;i>=0;i--)\\n         {\\n             if(arr[i]!=0)\\n                 pq.add(i);\\n             if(pq.size()==2)\\n                 return pq.poll();\\n         }\\n         return -1;\\n         \\n     }\\n\\t \\n\\t \\n\\t3: Without Extra Data Structure (optimized)\\n\\t\\n\\t\\n\\t public int secondHighest(String s) {\\n         char first=\\'/\\',second=\\'/\\';\\n         for(var c:s.toCharArray())\\n         {\\n             if(c>=\\'0\\' && c<=\\'9\\')\\n             {\\n                 if(first==\\'/\\')\\n                 {\\n                     first=c;\\n                 }\\n                 else if(first<c)\\n                 {\\n                     second= first;\\n                     first= c;\\n                 }\\n                 else if(second<c)\\n                 {\\n                     if(c!=first)\\n                     second=c;\\n                 }\\n             }\\n         }\\n         return (second!=\\'/\\' && second==first)?-1 : second-\\'0\\';\\n     }\\n\\t",
                "solutionTags": [
                    "Java",
                    "Tree",
                    "Ordered Set"
                ],
                "code": "```\\npublic int secondHighest(String s) {\\n        TreeSet<Integer>pq= new TreeSet<>((a,b)->b-a);\\n        for(var c:s.toCharArray())\\n        {\\n            if(Character.isDigit(c))\\n            {\\n                pq.add(Integer.parseInt(c+\"\"));\\n            }\\n        }\\n        if(pq.size()<2)\\n            return -1;\\n        Iterator<Integer> itr = pq.iterator();\\n        \\n        itr.next() ;\\n        return itr.next();\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1362030,
                "title": "simple-python-solution-which-is-84-faster",
                "content": "```\\nclass Solution(object):\\n    def secondHighest(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        sl = []\\n        for i in s:\\n           if i.isnumeric():\\n             sl.append(i)\\n        try:\\n            sl = set(sl)\\n            sl.remove(max(sl))\\n            return max(sl)\\n        except ValueError:\\n            return -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def secondHighest(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        sl = []\\n        for i in s:\\n           if i.isnumeric():\\n             sl.append(i)\\n        try:\\n            sl = set(sl)\\n            sl.remove(max(sl))\\n            return max(sl)\\n        except ValueError:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1348315,
                "title": "java-1ms-99-87-faster-o-1-space-o-n-time",
                "content": "![image](https://assets.leetcode.com/users/images/3ed9a13d-9b42-4d9a-b16e-1d53489116b8_1626696710.577745.png)\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n\\t// fld is for FirstlargestDigit nd sld is for Second LargestDigit \\n        int fld=-1,sld=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n            {\\n                if(s.charAt(i)-\\'0\\'==fld) continue;\\n                \\n                if(s.charAt(i)-\\'0\\'>fld)\\n                {\\n                    sld=fld;\\n                    fld=s.charAt(i)-\\'0\\';\\n                    continue;\\n                }\\n                \\n                if(sld<s.charAt(i)-\\'0\\')\\n                {\\n                    sld=s.charAt(i)-\\'0\\';\\n                }\\n            }\\n        }\\n        if(sld==-1) return -1;\\n        return sld;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n\\t// fld is for FirstlargestDigit nd sld is for Second LargestDigit \\n        int fld=-1,sld=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\')\\n            {\\n                if(s.charAt(i)-\\'0\\'==fld) continue;\\n                \\n                if(s.charAt(i)-\\'0\\'>fld)\\n                {\\n                    sld=fld;\\n                    fld=s.charAt(i)-\\'0\\';\\n                    continue;\\n                }\\n                \\n                if(sld<s.charAt(i)-\\'0\\')\\n                {\\n                    sld=s.charAt(i)-\\'0\\';\\n                }\\n            }\\n        }\\n        if(sld==-1) return -1;\\n        return sld;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1314923,
                "title": "java-hashset-sol-runtime-3-ms",
                "content": "```\\nclass Solution \\n{\\n    public int secondHighest(String s) \\n    {\\n        HashSet<Integer> hs = new HashSet<Integer>();\\n        int flag=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(Character.isDigit(s.charAt(i)))\\n            {\\n                hs.add(s.charAt(i)-\\'0\\');\\n                flag=1;\\n            }\\n        }\\n        ArrayList<Integer> al = new ArrayList<Integer>(hs);\\n        if(flag==0 || hs.size()==1)\\n            return -1;\\n        else\\n            return al.get(al.size()-2);\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int secondHighest(String s) \\n    {\\n        HashSet<Integer> hs = new HashSet<Integer>();\\n        int flag=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(Character.isDigit(s.charAt(i)))\\n            {\\n                hs.add(s.charAt(i)-\\'0\\');\\n                flag=1;\\n            }\\n        }\\n        ArrayList<Integer> al = new ArrayList<Integer>(hs);\\n        if(flag==0 || hs.size()==1)\\n            return -1;\\n        else\\n            return al.get(al.size()-2);\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1280182,
                "title": "java-solution-with-set-function",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet<>();\\n        \\n        for(char c: s.toCharArray()){\\n            if(Character.isDigit(c))\\n            {\\n                int num = c - \\'0\\';\\n                set.add(num);\\n            }\\n        }\\n        \\n        Object[] array = set.toArray();\\n        if(array.length > 1)\\n        {\\n            return (int) array[array.length - 2];\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet<>();\\n        \\n        for(char c: s.toCharArray()){\\n            if(Character.isDigit(c))\\n            {\\n                int num = c - \\'0\\';\\n                set.add(num);\\n            }\\n        }\\n        \\n        Object[] array = set.toArray();\\n        if(array.length > 1)\\n        {\\n            return (int) array[array.length - 2];\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1274543,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution \\n{\\n    public int secondHighest(String s) \\n    {\\n        int i , largest = -1 , secondLargest = -1 , value ;\\n        for( i = 0 ; i < s.length() ; i++ )\\n        {\\n            value = Character.getNumericValue(s.charAt(i)) ;\\n            if( Character.isDigit(s.charAt(i)) )\\n            {\\n                if( value > largest )\\n                {\\n                    secondLargest = largest ;\\n                    largest = value ;\\n                }\\n                else if( value > secondLargest && value < largest )\\n                {\\n                    secondLargest = value ;\\n                }\\n            }            \\n        }\\n        return secondLargest ;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int secondHighest(String s) \\n    {\\n        int i , largest = -1 , secondLargest = -1 , value ;\\n        for( i = 0 ; i < s.length() ; i++ )\\n        {\\n            value = Character.getNumericValue(s.charAt(i)) ;\\n            if( Character.isDigit(s.charAt(i)) )\\n            {\\n                if( value > largest )\\n                {\\n                    secondLargest = largest ;\\n                    largest = value ;\\n                }\\n                else if( value > secondLargest && value < largest )\\n                {\\n                    secondLargest = value ;\\n                }\\n            }            \\n        }\\n        return secondLargest ;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1270204,
                "title": "python-3-89-67-faster",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        dl = []\\n        for d in s:\\n            if d.isdigit():\\n                dl.append(d)\\n        dl = sorted(list(set(dl)), reverse=True)\\n        return dl[1] if len(dl)>1 else -1",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        dl = []\\n        for d in s:\\n            if d.isdigit():\\n                dl.append(d)\\n        dl = sorted(list(set(dl)), reverse=True)\\n        return dl[1] if len(dl)>1 else -1",
                "codeTag": "Java"
            },
            {
                "id": 1268130,
                "title": "python-o-n-97",
                "content": "```\\n# Note: ord(\\'/\\') < ord(\\'0\\')\\n\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        hi1 = \\'/\\'              # first highest digit, initialized to less than zero character\\n        hi2 = \\'/\\'              # second highest digit\\n        for c in s:\\n            if c.isdigit():\\n                if c > hi1:\\n                    hi1, hi2 = c, hi1\\n                elif hi2 < c < hi1:\\n                    hi2 = c\\n        return int(hi2) if hi2 != \\'/\\' else -1\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n# Note: ord(\\'/\\') < ord(\\'0\\')\\n\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        hi1 = \\'/\\'              # first highest digit, initialized to less than zero character\\n        hi2 = \\'/\\'              # second highest digit\\n        for c in s:\\n            if c.isdigit():\\n                if c > hi1:\\n                    hi1, hi2 = c, hi1\\n                elif hi2 < c < hi1:\\n                    hi2 = c\\n        return int(hi2) if hi2 != \\'/\\' else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1249223,
                "title": "easy-to-understand-golang-solution-faster-than-100",
                "content": "```\\nfunc secondHighest(s string) int {\\n\\thighest := -1\\n\\tsecond := -1\\n\\n\\tfor _, i := range s {\\n\\t\\tif i - \\':\\' < 0 { \\n\\t\\t\\t/*\\n\\t\\t\\tWe check whether i - \\':\\' because in an ascii table \\':\\' is the element after \\'9\\'\\n\\t\\t\\tSo, any letter - \\':\\' would be greater than 0\\n\\t\\t\\t*/\\n\\t\\t\\tnum := int(i - \\'0\\')\\n\\t\\t\\tif num > highest {\\n\\t\\t\\t\\tsecond, highest = highest, num\\n\\t\\t\\t} else if num > second && num < highest {\\n\\t\\t\\t\\tsecond = num\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn second\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc secondHighest(s string) int {\\n\\thighest := -1\\n\\tsecond := -1\\n\\n\\tfor _, i := range s {\\n\\t\\tif i - \\':\\' < 0 { \\n\\t\\t\\t/*\\n\\t\\t\\tWe check whether i - \\':\\' because in an ascii table \\':\\' is the element after \\'9\\'\\n\\t\\t\\tSo, any letter - \\':\\' would be greater than 0\\n\\t\\t\\t*/\\n\\t\\t\\tnum := int(i - \\'0\\')\\n\\t\\t\\tif num > highest {\\n\\t\\t\\t\\tsecond, highest = highest, num\\n\\t\\t\\t} else if num > second && num < highest {\\n\\t\\t\\t\\tsecond = num\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\treturn second\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1248430,
                "title": "using-set-simple-cpp",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        set <int> S;\\n        for(int i = 0; i < s.size();i++)\\n            {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n                S.insert(s[i] -\\'0\\');\\n            }\\n            if(S.size() <= 1)\\n\\n            return -1;\\n        auto itr = S.end();\\n      itr--;\\n        itr--;\\n        return *itr;\\n       \\n\\n         \\n        }\\n        \\n};\\n``",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int secondHighest(string s)\\n    {\\n        set <int> S;\\n        for(int i = 0; i < s.size();i++)\\n            {\\n            if(s[i] >= \\'0\\' && s[i] <= \\'9\\')\\n                S.insert(s[i] -\\'0\\');\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1223817,
                "title": "java-easy-to-understand-solution",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int len = s.length();\\n\\t\\tList<Integer> nums = new ArrayList<>();\\n\\t\\tfor (int i = 0; i < len; i++) {\\n\\t\\t\\tif (Character.isDigit(s.charAt(i)))\\n\\t\\t\\t\\tnums.add(s.charAt(i) - \\'0\\');\\n\\t\\t}\\n\\t\\tint first = -1, second = -1;\\n\\t\\tfor (int i : nums) {\\n\\t\\t\\tif (i > first) {\\n\\t\\t\\t\\tsecond = first;\\n\\t\\t\\t\\tfirst = i;\\n\\t\\t\\t} else if (i > second && i != first)\\n\\t\\t\\t\\tsecond = i;\\n\\t\\t}\\n\\t\\treturn (second == -1) ? -1 : second;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int len = s.length();\\n\\t\\tList<Integer> nums = new ArrayList<>();\\n\\t\\tfor (int i = 0; i < len; i++) {\\n\\t\\t\\tif (Character.isDigit(s.charAt(i)))\\n\\t\\t\\t\\tnums.add(s.charAt(i) - \\'0\\');\\n\\t\\t}\\n\\t\\tint first = -1, second = -1;\\n\\t\\tfor (int i : nums) {\\n\\t\\t\\tif (i > first) {\\n\\t\\t\\t\\tsecond = first;\\n\\t\\t\\t\\tfirst = i;\\n\\t\\t\\t} else if (i > second && i != first)\\n\\t\\t\\t\\tsecond = i;\\n\\t\\t}\\n\\t\\treturn (second == -1) ? -1 : second;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1208019,
                "title": "one-liner-javascript",
                "content": "Not the best run time, but probably the shortest code:\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    return Array.from(new Set(s.replace(/\\\\D/g, \\'\\').split(\\'\\'))).sort((a, b) => b - a)[1] ?? -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    return Array.from(new Set(s.replace(/\\\\D/g, \\'\\').split(\\'\\'))).sort((a, b) => b - a)[1] ?? -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1160194,
                "title": "c-simple-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int m1=-1,m2=-1;\\n        for(auto x:s){\\n            if(!isdigit(x))\\n                continue;\\n            auto d=x-\\'0\\';\\n            if(d==m1)\\n                continue;\\n            if(d>m1){\\n                m2=m1;\\n                m1=d;\\n            }\\n            else if(d>m2){\\n                m2=d;\\n            }\\n            \\n        }\\n        return m2;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int m1=-1,m2=-1;\\n        for(auto x:s){\\n            if(!isdigit(x))\\n                continue;\\n            auto d=x-\\'0\\';\\n            if(d==m1)\\n                continue;\\n            if(d>m1){\\n                m2=m1;\\n                m1=d;\\n            }\\n            else if(d>m2){\\n                m2=d;\\n            }\\n            \\n        }\\n        return m2;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1155337,
                "title": "python-3-93-faster",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        digits = list(set([int(char) for char in s if char.isnumeric()]))\\n        digits.sort()\\n        if len(digits) > 2:\\n            return digits[-2]\\n        elif len(digits) == 2:\\n            return digits[0]\\n        else:\\n            return -1\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        digits = list(set([int(char) for char in s if char.isnumeric()]))\\n        digits.sort()\\n        if len(digits) > 2:\\n            return digits[-2]\\n        elif len(digits) == 2:\\n            return digits[0]\\n        else:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1152818,
                "title": "c-o-1-space-and-o-n-time-simple-code",
                "content": "```\\nclass Solution \\n{\\npublic:\\n    int secondHighest(string s) \\n    {\\n        int firMax = -1;\\n        int secMax = -1;\\n        // finding first maximum number\\n        for ( char i:s ) {\\n            int num = i-\\'0\\';\\n            if ( num >= 0 && num <= 9 ) \\n                if ( num > firMax ) \\n                    firMax = num;\\n        }\\n        // finding second maximum number\\n        for ( char i:s ) {\\n            int num = i-\\'0\\';\\n            if ( num >= 0 && num <= 9 ) \\n                if ( num > secMax && num < firMax ) \\n                    secMax = num;\\n        }\\n        return secMax;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\npublic:\\n    int secondHighest(string s) \\n    {\\n        int firMax = -1;\\n        int secMax = -1;\\n        // finding first maximum number\\n        for ( char i:s ) {\\n            int num = i-\\'0\\';\\n            if ( num >= 0 && num <= 9 ) \\n                if ( num > firMax ) \\n                    firMax = num;\\n        }\\n        // finding second maximum number\\n        for ( char i:s ) {\\n            int num = i-\\'0\\';\\n            if ( num >= 0 && num <= 9 ) \\n                if ( num > secMax && num < firMax ) \\n                    secMax = num;\\n        }\\n        return secMax;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1143669,
                "title": "c-using-set",
                "content": "```\\nint secondHighest(string s) {\\n        set<int>digits;\\n        for(auto x : s)\\n        {\\n            if(isdigit(x))\\n                digits.insert(x-\\'0\\');\\n        }\\n        if(digits.size()>0)\\n        digits.erase(*digits.rbegin());\\n        return digits.size()>0?*digits.rbegin():-1;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nint secondHighest(string s) {\\n        set<int>digits;\\n        for(auto x : s)\\n        {\\n            if(isdigit(x))\\n                digits.insert(x-\\'0\\');\\n        }\\n        if(digits.size()>0)\\n        digits.erase(*digits.rbegin());\\n        return digits.size()>0?*digits.rbegin():-1;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1142650,
                "title": "ultra-simple-cpp-java-solution-suggestions-for-optimization-are-welcomed",
                "content": "Runtime: 4 ms, faster than 82.86% of C++ online submissions for Second Largest Digit in a String.\\nMemory Usage: 6.7 MB, less than 50.83% of C++ online submissions for Second Largest Digit in a String.\\n\\n```\\n\\nclass Solution {\\npublic:\\n   \\n \\n    int secondHighest(string s) {\\n        \\n        vector<char> v;\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\'){\\n                auto id=find(v.begin(),v.end(),s[i]);\\n                if(id==v.end())\\n                    v.push_back(s[i]);\\n            }\\n               \\n        }\\n        \\n        sort(v.begin(),v.end(),greater<int>());\\n        if(v.size()<=1)\\n            return -1;\\n        \\n        return v[1]-\\'0\\';\\n    }\\n};\\n\\n```\\n\\nRuntime: 4 ms, faster than 82.86% of C++ online submissions for Second Largest Digit in a String.\\nMemory Usage: 6.6 MB, less than 80.16% of C++ online submissions for Second Largest Digit in a String.\\n\\n```\\nclass Solution {\\npublic:\\n    \\n    int secondHighest(string s) {\\n        \\n        int first_max=INT_MIN,second_max=INT_MIN;\\n        \\n        for(int i=0;i<s.length();i++){\\n            if((int)s[i]>=0 && (int)s[i]<=\\'9\\'){\\n               \\n               if(s[i]-\\'0\\'>first_max){\\n                   second_max=first_max;\\n                   first_max=s[i]-\\'0\\';\\n               }\\n               else if(s[i]-\\'0\\'>second_max && s[i]-\\'0\\'<first_max)\\n                   second_max=s[i]-\\'0\\';\\n            }       \\n        }\\n        \\n        if(first_max==second_max || second_max==INT_MIN)\\n            return -1;\\n        \\n        return second_max;\\n    }\\n};\\n```\\n\\nRuntime: 3 ms, faster than 48.42% of Java online submissions for Second Largest Digit in a String.\\nMemory Usage: 37.3 MB, less than 97.99% of Java online submissions for Second Largest Digit in a String.\\n\\n```\\nclass Solution {\\n    \\n    public int secondHighest(String s) {\\n        \\n        ArrayList<Character> v = new ArrayList<>();\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\'){\\n                if(!v.contains(s.charAt(i)))\\n                    v.add(s.charAt(i));\\n            }      \\n        }\\n        \\n        Collections.sort(v, Collections.reverseOrder());  \\n        \\n        if(v.size()<=1)\\n            return -1;\\n        \\n        return v.get(1)-\\'0\\';\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n   \\n \\n    int secondHighest(string s) {\\n        \\n        vector<char> v;\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\'){\\n                auto id=find(v.begin(),v.end(),s[i]);\\n                if(id==v.end())\\n                    v.push_back(s[i]);\\n            }\\n               \\n        }\\n        \\n        sort(v.begin(),v.end(),greater<int>());\\n        if(v.size()<=1)\\n            return -1;\\n        \\n        return v[1]-\\'0\\';\\n    }\\n};\\n\\n```\n```\\nclass Solution {\\npublic:\\n    \\n    int secondHighest(string s) {\\n        \\n        int first_max=INT_MIN,second_max=INT_MIN;\\n        \\n        for(int i=0;i<s.length();i++){\\n            if((int)s[i]>=0 && (int)s[i]<=\\'9\\'){\\n               \\n               if(s[i]-\\'0\\'>first_max){\\n                   second_max=first_max;\\n                   first_max=s[i]-\\'0\\';\\n               }\\n               else if(s[i]-\\'0\\'>second_max && s[i]-\\'0\\'<first_max)\\n                   second_max=s[i]-\\'0\\';\\n            }       \\n        }\\n        \\n        if(first_max==second_max || second_max==INT_MIN)\\n            return -1;\\n        \\n        return second_max;\\n    }\\n};\\n```\n```\\nclass Solution {\\n    \\n    public int secondHighest(String s) {\\n        \\n        ArrayList<Character> v = new ArrayList<>();\\n        \\n        for(int i=0;i<s.length();i++){\\n            \\n            if(s.charAt(i)>=\\'0\\' && s.charAt(i)<=\\'9\\'){\\n                if(!v.contains(s.charAt(i)))\\n                    v.add(s.charAt(i));\\n            }      \\n        }\\n        \\n        Collections.sort(v, Collections.reverseOrder());  \\n        \\n        if(v.size()<=1)\\n            return -1;\\n        \\n        return v.get(1)-\\'0\\';\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1137914,
                "title": "rust-with-iterators",
                "content": "```\\nimpl Solution {\\n    pub fn second_highest(s: String) -> i32 {\\n        let mut ar = [false; 10];\\n\\n        s.as_bytes()\\n            .iter()\\n            .filter(|x| x.is_ascii_digit())\\n            .map(|x| x - b\\'0\\')\\n            .for_each(|x| ar[x as usize] = true);\\n\\n        ar.iter()\\n            .enumerate()\\n            .filter_map(|(ind, val)| if *val { Some(ind as i32) } else { None })\\n            .rev()\\n            .nth(1)\\n            .unwrap_or(-1)\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust",
                    "Iterator"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn second_highest(s: String) -> i32 {\\n        let mut ar = [false; 10];\\n\\n        s.as_bytes()\\n            .iter()\\n            .filter(|x| x.is_ascii_digit())\\n            .map(|x| x - b\\'0\\')\\n            .for_each(|x| ar[x as usize] = true);\\n\\n        ar.iter()\\n            .enumerate()\\n            .filter_map(|(ind, val)| if *val { Some(ind as i32) } else { None })\\n            .rev()\\n            .nth(1)\\n            .unwrap_or(-1)\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1137434,
                "title": "easy-and-fast-python3",
                "content": "\\tclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        ls=[]\\n        for i in s:\\n            if i.isnumeric():\\n                ls.append(i)\\n        \\n        ls=sorted(set(ls))\\n        if len(ls)>1:\\n            return ls[-2]\\n        else:\\n            return -1",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\tclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        ls=[]\\n        for i in s:\\n            if i.isnumeric():\\n                ls.append(i)\\n        \\n        ls=sorted(set(ls))\\n        if len(ls)>1:\\n            return ls[-2]\\n        else:\\n            return -1",
                "codeTag": "Java"
            },
            {
                "id": 1131691,
                "title": "c-two-solutions-100-faster-iterative-method-priority-queue-method",
                "content": "**Priority Queue**\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        priority_queue<int> queue;\\n        \\n        for (const char c : s){\\n            if (isdigit(c)){\\n                queue.push(c - \\'0\\');\\n            }\\n        }\\n        \\n        // if all the characters in the string are letter\\n        if (queue.empty()) return -1;\\n        \\n        int largest = queue.top();\\n        queue.pop();\\n        while (!queue.empty() && queue.top() == largest){\\n            queue.pop();\\n        }\\n        \\n        return queue.empty() ? -1 : queue.top();\\n    }\\n};\\n```\\n\\n**Iterative (100% faster)**\\n\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        vector<int> cnt (10, 0);\\n        \\n        for (const char c : s){\\n            if (isdigit(c)) ++cnt[c - \\'0\\'];\\n        }\\n        \\n        int largest = -1;\\n        for (int i = cnt.size() - 1; i >=0; --i){\\n            if (largest != -1 && i < largest && cnt[i] > 0) return i;\\n            if (cnt[i] > 0) largest = i;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        priority_queue<int> queue;\\n        \\n        for (const char c : s){\\n            if (isdigit(c)){\\n                queue.push(c - \\'0\\');\\n            }\\n        }\\n        \\n        // if all the characters in the string are letter\\n        if (queue.empty()) return -1;\\n        \\n        int largest = queue.top();\\n        queue.pop();\\n        while (!queue.empty() && queue.top() == largest){\\n            queue.pop();\\n        }\\n        \\n        return queue.empty() ? -1 : queue.top();\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        vector<int> cnt (10, 0);\\n        \\n        for (const char c : s){\\n            if (isdigit(c)) ++cnt[c - \\'0\\'];\\n        }\\n        \\n        int largest = -1;\\n        for (int i = cnt.size() - 1; i >=0; --i){\\n            if (largest != -1 && i < largest && cnt[i] > 0) return i;\\n            if (cnt[i] > 0) largest = i;\\n        }\\n        \\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1130012,
                "title": "c-with-slight-optimization",
                "content": "```class Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int largest = -1;\\n        int second_largest = -1;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (isdigit(s[i])) {\\n                int digit = s[i] - \\'0\\';\\n                if (digit > largest) {\\n                    second_largest = largest;\\n                    largest = digit;\\n                } else if (digit < largest && digit > second_largest) {\\n                    second_largest = digit;\\n                }\\n                // there\\'s no digit greater than 9 that make 8 not be the second largest\\n                if (second_largest == 8)\\n                    break;\\n            }\\n        }\\n        return second_largest;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int largest = -1;\\n        int second_largest = -1;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (isdigit(s[i])) {\\n                int digit = s[i] - \\'0\\';\\n                if (digit > largest) {\\n                    second_largest = largest;\\n                    largest = digit;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1122197,
                "title": "c-solution-faster-than-100-other-c-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int max = -1, secondMax = -1;\\n        \\n        for(char c: s)\\n        {\\n            if(c >= \\'0\\' and c <= \\'9\\')\\n            {\\n                int temp = c - \\'0\\';\\n                if(temp > max)\\n                {\\n                    secondMax = max;\\n                    max = temp;\\n                }\\n                if(temp < max and temp > secondMax)\\n                {\\n                    secondMax = temp;\\n                }\\n            }\\n        }\\n        \\n        return secondMax;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        int max = -1, secondMax = -1;\\n        \\n        for(char c: s)\\n        {\\n            if(c >= \\'0\\' and c <= \\'9\\')\\n            {\\n                int temp = c - \\'0\\';\\n                if(temp > max)\\n                {\\n                    secondMax = max;\\n                    max = temp;\\n                }\\n                if(temp < max and temp > secondMax)\\n                {\\n                    secondMax = temp;\\n                }\\n            }\\n        }\\n        \\n        return secondMax;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1121685,
                "title": "java-100-100-solution",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        List<Integer> list = new ArrayList<>();\\n\\t\\t\\n        for(char c : s.toCharArray()) {\\n            if(Character.isDigit(c) && !list.contains(Integer.parseInt(String.valueOf(c)))) {\\n                list.add(Integer.parseInt(String.valueOf(c)));\\n            }\\n        }\\n\\t\\t\\n        Collections.sort(list);\\n        \\n        return list.size() > 1 ? list.get(list.size() - 2) : -1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Sorting"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        List<Integer> list = new ArrayList<>();\\n\\t\\t\\n        for(char c : s.toCharArray()) {\\n            if(Character.isDigit(c) && !list.contains(Integer.parseInt(String.valueOf(c)))) {\\n                list.add(Integer.parseInt(String.valueOf(c)));\\n            }\\n        }\\n\\t\\t\\n        Collections.sort(list);\\n        \\n        return list.size() > 1 ? list.get(list.size() - 2) : -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1120136,
                "title": "cpp-easy-fast-solution-fast-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int n=s.size();\\n      vector<int>v1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                int a=s[i]-\\'0\\';\\n               v1.push_back(a);\\n            }\\n        }\\n        sort(v1.begin(),v1.end());\\n        n=v1.size();\\n        vector<int>::iterator ip; \\n  \\n    \\n    ip = std::unique(v1.begin(), v1.end()); \\n    \\n   \\n        n=v1.size();\\n        if(n>=2&&v1[n-2]!=v1[n-1])\\n            return v1[n-2];\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int n=s.size();\\n      vector<int>v1;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(isdigit(s[i]))\\n            {\\n                int a=s[i]-\\'0\\';\\n               v1.push_back(a);\\n            }\\n        }\\n        sort(v1.begin(),v1.end());\\n        n=v1.size();\\n        vector<int>::iterator ip; \\n  \\n    \\n    ip = std::unique(v1.begin(), v1.end()); \\n    \\n   \\n        n=v1.size();\\n        if(n>=2&&v1[n-2]!=v1[n-1])\\n            return v1[n-2];\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1119882,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a=-1,b=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]-\\'0\\'<=9)\\n            {\\n                int val=s[i]-\\'0\\';\\n                if(a==-1)\\n                    a=val;\\n                else if(b==-1)\\n                {\\n                    if(a<val)\\n                    {\\n                        b=a;\\n                        a=val;\\n                    }\\n                    else if(a==val)\\n                        continue;\\n                    else\\n                        b=val;\\n                }\\n                else\\n                {\\n                    if(val>a)\\n                    {\\n                        b=a;\\n                        a=val;\\n                    }\\n                    else if(val<a&&val>b)\\n                        b=val;\\n                    else\\n                        continue;\\n                }\\n            }\\n        }\\n        if(b==-1||a==b)\\n            return -1;\\n        return b;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a=-1,b=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(s[i]-\\'0\\'<=9)\\n            {\\n                int val=s[i]-\\'0\\';\\n                if(a==-1)\\n                    a=val;\\n                else if(b==-1)\\n                {\\n                    if(a<val)\\n                    {\\n                        b=a;\\n                        a=val;\\n                    }\\n                    else if(a==val)\\n                        continue;\\n                    else\\n                        b=val;\\n                }\\n                else\\n                {\\n                    if(val>a)\\n                    {\\n                        b=a;\\n                        a=val;\\n                    }\\n                    else if(val<a&&val>b)\\n                        b=val;\\n                    else\\n                        continue;\\n                }\\n            }\\n        }\\n        if(b==-1||a==b)\\n            return -1;\\n        return b;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1119574,
                "title": "c-with-two-variables",
                "content": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a = INT_MIN, b = INT_MIN;\\n        int temp;\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (isdigit(s[i])) {\\n                int cur = s[i] - \\'0\\';\\n                if (cur > a) {\\n                    b = a;\\n                    a = cur;\\n                } if (cur > b && cur != a) {\\n                    b = cur;\\n                } \\n            }    \\n        }\\n        return (b == INT_MIN ? -1 : b); \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int a = INT_MIN, b = INT_MIN;\\n        int temp;\\n        for (int i = 0; i < s.size(); i++)\\n        {\\n            if (isdigit(s[i])) {\\n                int cur = s[i] - \\'0\\';\\n                if (cur > a) {\\n                    b = a;\\n                    a = cur;\\n                } if (cur > b && cur != a) {\\n                    b = cur;\\n                } \\n            }    \\n        }\\n        return (b == INT_MIN ? -1 : b); \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118857,
                "title": "c-o-n-set",
                "content": "Maintain a set of all numbers and return the second last number from set pointer.\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string str) {\\n        set<int> s;\\n        int n = str.length();\\n        \\n        for(int i = 0; i < n; i++){\\n            if(str[i] >= \\'0\\' && str[i] <= \\'9\\'){\\n                s.insert((int)(str[i] - \\'0\\'));\\n            }    \\n        }\\n        \\n        if(s.size() <= 1) return -1;\\n        else{\\n            auto itr = s.end();\\n            itr--;\\n            itr--;\\n            return *itr;\\n        }\\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [
                    "C",
                    "Ordered Set"
                ],
                "code": "class Solution {\\npublic:\\n    int secondHighest(string str) {\\n        set<int> s;\\n        int n = str.length();\\n        \\n        for(int i = 0; i < n; i++){\\n            if(str[i] >= \\'0\\' && str[i] <= \\'9\\'){\\n                s.insert((int)(str[i] - \\'0\\'));\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1118836,
                "title": "java-solution-straight-forward",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int a = -1, b = -1;\\n        for (char c : s.toCharArray()) {\\n            if (Character.isDigit(c)) {\\n                int x = Character.getNumericValue(c);\\n                if (x > a) {\\n                    b = a;\\n                    a = x;\\n                } else if (x != a && x > b) {\\n                    b = x;\\n                }\\n            }\\n        }\\n        return b;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int a = -1, b = -1;\\n        for (char c : s.toCharArray()) {\\n            if (Character.isDigit(c)) {\\n                int x = Character.getNumericValue(c);\\n                if (x > a) {\\n                    b = a;\\n                    a = x;\\n                } else if (x != a && x > b) {\\n                    b = x;\\n                }\\n            }\\n        }\\n        return b;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118817,
                "title": "java-solution-using-hashset",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++) {\\n            if(!Character.isLetter(s.charAt(i))){\\n                set.add(Integer.parseInt(String.valueOf(s.charAt(i))));\\n            }\\n        }\\n        if(!set.isEmpty()){\\n        Object obj = Collections.max(set);\\n           set.remove(obj);\\n        if(!set.isEmpty()) return Collections.max(set);\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        Set<Integer> set = new HashSet<>();\\n        for(int i=0; i<s.length(); i++) {\\n            if(!Character.isLetter(s.charAt(i))){\\n                set.add(Integer.parseInt(String.valueOf(s.charAt(i))));\\n            }\\n        }\\n        if(!set.isEmpty()){\\n        Object obj = Collections.max(set);\\n           set.remove(obj);\\n        if(!set.isEmpty()) return Collections.max(set);\\n        }\\n        return -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118802,
                "title": "easy-java-solution",
                "content": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        char max1 = \\'0\\' - 1, max2 = \\'0\\' - 1;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n                if (s.charAt(i) > max1) {\\n                    max2 = max1;\\n                    max1 = s.charAt(i);\\n                }\\n                else if (s.charAt(i) > max2 && s.charAt(i) < max1) {\\n                    max2 = s.charAt(i);\\n                }\\n            }\\n        }\\n        return max2 - \\'0\\';\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        char max1 = \\'0\\' - 1, max2 = \\'0\\' - 1;\\n        for (int i = 0; i < s.length(); i++) {\\n            if (s.charAt(i) >= \\'0\\' && s.charAt(i) <= \\'9\\') {\\n                if (s.charAt(i) > max1) {\\n                    max2 = max1;\\n                    max1 = s.charAt(i);\\n                }\\n                else if (s.charAt(i) > max2 && s.charAt(i) < max1) {\\n                    max2 = s.charAt(i);\\n                }\\n            }\\n        }\\n        return max2 - \\'0\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1118795,
                "title": "easy-c-solution-using-set",
                "content": "***\\n\\n\\tclass Solution {\\n\\tpublic:\\n    int secondHighest(string s) {\\n        set<int> st;            // to store only unique and in sorted order\\n        \\n        for(auto ch:s) {\\n            if(isdigit(ch))     // if digit, then insert in set\\n                st.insert(ch-\\'0\\'); \\n        }\\n        \\n        if(st.size()<=1)        // if there are only O or 1 digit, we cannot find second-largest\\n            return -1;\\n        \\n        auto it=st.end(); \\n        st.erase(--it);         // delete the last element i.e. the largest element\\n        \\n        return *st.rbegin();    // and then return the largest element from the remaining elements\\n    }\\n};\\n\\n***",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n    int secondHighest(string s) {\\n        set<int> st;            // to store only unique and in sorted order\\n        \\n        for(auto ch:s) {\\n            if(isdigit(ch))     // if digit, then insert in set\\n                st.insert(ch-\\'0\\'); \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1118791,
                "title": "c-solution",
                "content": "```\\npublic int SecondHighest(string s) {\\n        var firstLargest = -1;\\n        var secLargest = -1;\\n        foreach (var ch in s)\\n        {\\n            var num = (int)(ch - \\'0\\');\\n            if (num >= 0 && num <= 9)\\n            {\\n                if (firstLargest < num)\\n                {\\n                    secLargest = firstLargest;\\n                    firstLargest = num;\\n                }\\n                else if (firstLargest != num && secLargest < num)\\n                {\\n                    secLargest = num;\\n                }\\n            }\\n        }\\n        \\n        return secLargest;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int SecondHighest(string s) {\\n        var firstLargest = -1;\\n        var secLargest = -1;\\n        foreach (var ch in s)\\n        {\\n            var num = (int)(ch - \\'0\\');\\n            if (num >= 0 && num <= 9)\\n            {\\n                if (firstLargest < num)\\n                {\\n                    secLargest = firstLargest;\\n                    firstLargest = num;\\n                }\\n                else if (firstLargest != num && secLargest < num)\\n                {\\n                    secLargest = num;\\n                }\\n            }\\n        }\\n        \\n        return secLargest;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1118746,
                "title": "python3-hash-set",
                "content": "\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        seen = set()\\n        for c in s: \\n            if c.isdigit(): \\n                seen.add(int(c))\\n        return -1 if len(seen) < 2 else sorted(seen)[-2]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        seen = set()\\n        for c in s: \\n            if c.isdigit(): \\n                seen.add(int(c))\\n        return -1 if len(seen) < 2 else sorted(seen)[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4082322,
                "title": "very-easy-to-understand-python-using-dictionary",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a = {\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\', \\'n\\', \\'o\\', \\'p\\', \\'q\\', \\'r\\', \\'s\\', \\'t\\', \\'u\\', \\'v\\', \\'w\\', \\'x\\', \\'y\\', \\'z\\'}\\n        l = -1\\n        ans = -1\\n\\n        for ele in s:\\n            if ele not in a:\\n                if int(ele)>l:\\n                    ans =l\\n                    l=int(ele)\\n                # print(ele)\\n                if (int(ele)>ans and int(ele)<l):\\n                    ans = int(ele)\\n                    \\n        return ans\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a = {\\'a\\', \\'b\\', \\'c\\', \\'d\\', \\'e\\', \\'f\\', \\'g\\', \\'h\\', \\'i\\', \\'j\\', \\'k\\', \\'l\\', \\'m\\', \\'n\\', \\'o\\', \\'p\\', \\'q\\', \\'r\\', \\'s\\', \\'t\\', \\'u\\', \\'v\\', \\'w\\', \\'x\\', \\'y\\', \\'z\\'}\\n        l = -1\\n        ans = -1\\n\\n        for ele in s:\\n            if ele not in a:\\n                if int(ele)>l:\\n                    ans =l\\n                    l=int(ele)\\n                # print(ele)\\n                if (int(ele)>ans and int(ele)<l):\\n                    ans = int(ele)\\n                    \\n        return ans\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4079338,
                "title": "c-easy-3-variable-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int SecondHighest(string s) {\\n        int num1=-1,num2=-1,num3=-1;\\n        for(int i=0;i<s.Length;i++){\\n            if(int.TryParse(s[i].ToString(), out num1)){\\n                if(num1>num2){\\n                    num3=num2;\\n                    num2=num1;\\n                }else if(num1<num2 && num1>num3){\\n                    num3=num1;\\n                }\\n            }\\n        }\\n        return num1==num2 && num2==num3?-1:num3;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int SecondHighest(string s) {\\n        int num1=-1,num2=-1,num3=-1;\\n        for(int i=0;i<s.Length;i++){\\n            if(int.TryParse(s[i].ToString(), out num1)){\\n                if(num1>num2){\\n                    num3=num2;\\n                    num2=num1;\\n                }else if(num1<num2 && num1>num3){\\n                    num3=num1;\\n                }\\n            }\\n        }\\n        return num1==num2 && num2==num3?-1:num3;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077372,
                "title": "optiminal-use-of-collectionframe-work-100-beats-easy-and-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(char ch : s.toCharArray()){\\n            if(Character.isDigit(ch) && !list.contains(ch-\\'0\\')){\\n                list.add(ch-\\'0\\');\\n            }\\n        }\\n\\n        if(list.size()<=1) return -1;\\n        Collections.sort(list, Collections.reverseOrder());\\n        list.remove(list.get(0));\\n        return list.remove(0);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        ArrayList<Integer> list = new ArrayList<>();\\n        for(char ch : s.toCharArray()){\\n            if(Character.isDigit(ch) && !list.contains(ch-\\'0\\')){\\n                list.add(ch-\\'0\\');\\n            }\\n        }\\n\\n        if(list.size()<=1) return -1;\\n        Collections.sort(list, Collections.reverseOrder());\\n        list.remove(list.get(0));\\n        return list.remove(0);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073866,
                "title": "heap-no-duplicates",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nThis is something to be used to find k-largest element, in our case k = 2, so we could say that space complexity is constant aswell as operations on heap.\\n\\n# Complexity\\n- Time complexity:\\nO(n * log(k)) = O(n)\\n\\n- Space complexity:\\nO(k) = O(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        priority_queue<int, vector<int>, greater<int>> pq{};\\n        unordered_map<int, bool> inPQ{};\\n\\n        constexpr int k = 2;\\n\\n        for(auto i : s){\\n\\n            if(isdigit(i) && inPQ[i - \\'0\\'] == false){\\n\\n                pq.push(i - \\'0\\');\\n                inPQ[i - \\'0\\'] = true;\\n\\n                if(pq.size() > k) {\\n                    inPQ[pq.top()] = false;\\n                    pq.pop();\\n                }\\n            }\\n\\n        }\\n\\n        if(pq.size() < k) return -1;\\n\\n        return pq.top();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        \\n        priority_queue<int, vector<int>, greater<int>> pq{};\\n        unordered_map<int, bool> inPQ{};\\n\\n        constexpr int k = 2;\\n\\n        for(auto i : s){\\n\\n            if(isdigit(i) && inPQ[i - \\'0\\'] == false){\\n\\n                pq.push(i - \\'0\\');\\n                inPQ[i - \\'0\\'] = true;\\n\\n                if(pq.size() > k) {\\n                    inPQ[pq.top()] = false;\\n                    pq.pop();\\n                }\\n            }\\n\\n        }\\n\\n        if(pq.size() < k) return -1;\\n\\n        return pq.top();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070223,
                "title": "without-tree-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n      HashSet<Integer> list=new HashSet<>();\\n\\n      for(int i=0;i<s.length();i++){\\n        char ch=s.charAt(i);\\n        if(ch>=\\'0\\'&&ch<=\\'9\\'){\\n          int a = ch - \\'0\\';\\n          list.add(a);\\n        }\\n      }\\n      \\n      List<Integer> list1 = new ArrayList<>(list);\\n        Collections.sort(list1);\\n      int n=list1.size();\\n      if(n==1)\\n        {return -1;}\\n      for(int i=0;i<n;i++){\\n        if(list1.get(n-2-i)!=list1.get(n-1-i)){\\n          return list1.get(n-2-i);\\n        }\\n      }\\n      \\n      \\n    return -1; \\n\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n      HashSet<Integer> list=new HashSet<>();\\n\\n      for(int i=0;i<s.length();i++){\\n        char ch=s.charAt(i);\\n        if(ch>=\\'0\\'&&ch<=\\'9\\'){\\n          int a = ch - \\'0\\';\\n          list.add(a);\\n        }\\n      }\\n      \\n      List<Integer> list1 = new ArrayList<>(list);\\n        Collections.sort(list1);\\n      int n=list1.size();\\n      if(n==1)\\n        {return -1;}\\n      for(int i=0;i<n;i++){\\n        if(list1.get(n-2-i)!=list1.get(n-1-i)){\\n          return list1.get(n-2-i);\\n        }\\n      }\\n      \\n      \\n    return -1; \\n\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4070221,
                "title": "without-tree-set",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n      HashSet<Integer> list=new HashSet<>();\\n\\n      for(int i=0;i<s.length();i++){\\n        char ch=s.charAt(i);\\n        if(ch>=\\'0\\'&&ch<=\\'9\\'){\\n          int a = ch - \\'0\\';\\n          list.add(a);\\n        }\\n      }\\n      int max=Integer.MIN_VALUE;\\n      int smax=Integer.MIN_VALUE;\\n      List<Integer> list1 = new ArrayList<>(list);\\n        Collections.sort(list1);\\n      int n=list1.size();\\n      if(n==1)\\n        {return -1;}\\n      for(int i=0;i<n;i++){\\n        if(list1.get(n-2-i)!=list1.get(n-1-i)){\\n          return list1.get(n-2-i);\\n        }\\n      }\\n      \\n      \\n    return -1; \\n\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n      HashSet<Integer> list=new HashSet<>();\\n\\n      for(int i=0;i<s.length();i++){\\n        char ch=s.charAt(i);\\n        if(ch>=\\'0\\'&&ch<=\\'9\\'){\\n          int a = ch - \\'0\\';\\n          list.add(a);\\n        }\\n      }\\n      int max=Integer.MIN_VALUE;\\n      int smax=Integer.MIN_VALUE;\\n      List<Integer> list1 = new ArrayList<>(list);\\n        Collections.sort(list1);\\n      int n=list1.size();\\n      if(n==1)\\n        {return -1;}\\n      for(int i=0;i<n;i++){\\n        if(list1.get(n-2-i)!=list1.get(n-1-i)){\\n          return list1.get(n-2-i);\\n        }\\n      }\\n      \\n      \\n    return -1; \\n\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069352,
                "title": "python3-99-best-memory-usage",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        out = set()\\n        for x in s:\\n            if x.isdigit():\\n                out.add(int(x))\\n        \\n        return -1 if len(out) < 2 else sorted(out)[-2]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        out = set()\\n        for x in s:\\n            if x.isdigit():\\n                out.add(int(x))\\n        \\n        return -1 if len(out) < 2 else sorted(out)[-2]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4058530,
                "title": "99-runtime-99-memory-the-fastest-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/7e1e9b3f-1911-4d74-b336-4902988e375f_1695015926.5048883.png)\\n\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        first_found = False\\n\\n        for num in \"9876543210\":\\n            if s.find(num) + 1:\\n                if first_found: return int(num)\\n                first_found = True\\n\\n        return -1\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        first_found = False\\n\\n        for num in \"9876543210\":\\n            if s.find(num) + 1:\\n                if first_found: return int(num)\\n                first_found = True\\n\\n        return -1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055093,
                "title": "best-javascript-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let high=-1, secondHigh ,result;\\n    for(let i=0;i<s.length;i++){\\n    if(s[i]>\\'9\\')continue\\n\\n    if(s[i]>high){\\n        secondHigh=high;\\n        high=s[i];\\n    }\\n\\n    if(s[i]<high && s[i]>=secondHigh){\\n        result=s[i];\\n        secondHigh=s[i];\\n    }\\n\\n    }\\n \\n result=secondHigh!=-1?secondHigh:result\\nreturn result? result:-1;\\n\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n    let high=-1, secondHigh ,result;\\n    for(let i=0;i<s.length;i++){\\n    if(s[i]>\\'9\\')continue\\n\\n    if(s[i]>high){\\n        secondHigh=high;\\n        high=s[i];\\n    }\\n\\n    if(s[i]<high && s[i]>=secondHigh){\\n        result=s[i];\\n        secondHigh=s[i];\\n    }\\n\\n    }\\n \\n result=secondHigh!=-1?secondHigh:result\\nreturn result? result:-1;\\n\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4050256,
                "title": "typescript-javascript-one-line-solution-good-performance",
                "content": "# Code\\n```\\nfunction secondHighest(s: string): number {\\n    return [\\n        ...new Set(\\n            s.match(/\\\\d/g)?.map(Number).sort((a, b) => +b - +a)\\n        )\\n    ][1] ?? -1;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\nfunction secondHighest(s: string): number {\\n    return [\\n        ...new Set(\\n            s.match(/\\\\d/g)?.map(Number).sort((a, b) => +b - +a)\\n        )\\n    ][1] ?? -1;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4045565,
                "title": "regular-expression-can-always-be-the-solution",
                "content": "# Intuition\\nI always try to avoid brute force approach. There is always a way to solve any problem without brute force. Since python is a very powerful language when dealing with strings and regular expression, the first think I tried is to to get all the integers of the string with \"re.findall\" method, then select the second largest one.\\n\\n# Approach\\n1. Get all integers of the string with \"re.findall\". The returned list is unsorted and may contain duplicate values.\\n2. Remove duplicate values and sort the list.\\n3. Return the second to last element.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n- Space complexity: $$O(n)$$\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        all1 = re.findall(r\\'\\\\d\\', s)\\n        all1 = sorted(list(set(all1)))\\n        try:\\n            return int(all1[-2])\\n        except:\\n            return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        all1 = re.findall(r\\'\\\\d\\', s)\\n        all1 = sorted(list(set(all1)))\\n        try:\\n            return int(all1[-2])\\n        except:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042768,
                "title": "golang-simple-o-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunc secondHighest(s string) int {\\n\\tfirst, second := -10, -10\\n\\n\\tfor _, i := range s {\\n\\t\\tif i <= 57 && i >= 48 {\\n\\t\\t\\tcur := int(i - 48)\\n\\t\\t\\tif cur == first {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tif cur > first {\\n\\t\\t\\t\\tsecond = first\\n\\t\\t\\t\\tfirst = cur\\n\\t\\t\\t} else if cur > second {\\n\\t\\t\\t\\tsecond = cur\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif second == -10 {\\n\\t\\treturn -1\\n\\t}\\n\\n\\treturn second\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc secondHighest(s string) int {\\n\\tfirst, second := -10, -10\\n\\n\\tfor _, i := range s {\\n\\t\\tif i <= 57 && i >= 48 {\\n\\t\\t\\tcur := int(i - 48)\\n\\t\\t\\tif cur == first {\\n\\t\\t\\t\\tcontinue\\n\\t\\t\\t}\\n\\t\\t\\tif cur > first {\\n\\t\\t\\t\\tsecond = first\\n\\t\\t\\t\\tfirst = cur\\n\\t\\t\\t} else if cur > second {\\n\\t\\t\\t\\tsecond = cur\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tif second == -10 {\\n\\t\\treturn -1\\n\\t}\\n\\n\\treturn second\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041579,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        m = float(\\'-inf\\')\\n        sm = float(\\'-inf\\')\\n\\n        for i in s:\\n            if i.isdigit():\\n                if int(i) > m:\\n                    sm = m\\n                    m = int(i)\\n                else:\\n                    if int(i) > sm and int(i) != m:\\n                        sm = int(i)\\n                    \\n        if sm > float(\\'-inf\\'):\\n            return sm\\n        else:\\n            return -1\\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        m = float(\\'-inf\\')\\n        sm = float(\\'-inf\\')\\n\\n        for i in s:\\n            if i.isdigit():\\n                if int(i) > m:\\n                    sm = m\\n                    m = int(i)\\n                else:\\n                    if int(i) > sm and int(i) != m:\\n                        sm = int(i)\\n                    \\n        if sm > float(\\'-inf\\'):\\n            return sm\\n        else:\\n            return -1\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040654,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a=[]\\n        for i in s :\\n            if i.isdigit():\\n                a.append(i)\\n        b=[]\\n        for i in a :\\n            if i not in b :\\n                b.append(i)\\n        b.sort()\\n        b.reverse()\\n        if len(b)>1 :\\n            if b[0]!=b[1] :\\n                return int(b[1])\\n            else :\\n                return int(-1)\\n        else :\\n            return int(-1)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        a=[]\\n        for i in s :\\n            if i.isdigit():\\n                a.append(i)\\n        b=[]\\n        for i in a :\\n            if i not in b :\\n                b.append(i)\\n        b.sort()\\n        b.reverse()\\n        if len(b)>1 :\\n            if b[0]!=b[1] :\\n                return int(b[1])\\n            else :\\n                return int(-1)\\n        else :\\n            return int(-1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040458,
                "title": "java-easy-upvote",
                "content": "# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int largest = -1;\\n        int second = -1;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(Character.isDigit(c)){\\n                int a = Character.getNumericValue(c);\\n                if(a>largest){\\n                    second = largest;\\n                    largest=a;\\n                }\\n                else if(a>second && a!=largest){\\n                    second = a;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int largest = -1;\\n        int second = -1;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(Character.isDigit(c)){\\n                int a = Character.getNumericValue(c);\\n                if(a>largest){\\n                    second = largest;\\n                    largest=a;\\n                }\\n                else if(a>second && a!=largest){\\n                    second = a;\\n                }\\n            }\\n        }\\n        return second;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040259,
                "title": "one-line-solution",
                "content": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return int(sorted(set(s) & set(string.digits) | {\"-1\", \"-01\"})[-2])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return int(sorted(set(s) & set(string.digits) | {\"-1\", \"-01\"})[-2])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4038671,
                "title": "c-solution-with-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n) where n is the length of given string.\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int SecondHighest(string s) {\\n        int[] arr=new int[10];\\n        foreach(char ch in s){\\n            if(ch>=\\'0\\' && ch<=\\'9\\'){\\n                arr[ch-\\'0\\']+=1;\\n            }\\n        }\\n        foreach(int ele in arr)\\n           Console.Write(\"{0}|\",ele);\\n        int ans=-1;bool fM=false;\\n        for(int i=9;i>=0;i--){\\n            if(!fM && arr[i]>0) {\\n                fM=true;\\n            }\\n            else if(fM && arr[i]>0){\\n                ans=i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int SecondHighest(string s) {\\n        int[] arr=new int[10];\\n        foreach(char ch in s){\\n            if(ch>=\\'0\\' && ch<=\\'9\\'){\\n                arr[ch-\\'0\\']+=1;\\n            }\\n        }\\n        foreach(int ele in arr)\\n           Console.Write(\"{0}|\",ele);\\n        int ans=-1;bool fM=false;\\n        for(int i=9;i>=0;i--){\\n            if(!fM && arr[i]>0) {\\n                fM=true;\\n            }\\n            else if(fM && arr[i]>0){\\n                ans=i;\\n                break;\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035673,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 50ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 16.29mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        two=-1\\n        one=-1\\n        for i in range(len(s)):\\n            if(s[i].isdigit()):\\n                if(int(s[i])>one):\\n                    two=one\\n                    one=int(s[i])\\n                elif(int(s[i])<one and int(s[i])>two):\\n                    two=int(s[i])\\n        return two\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        two=-1\\n        one=-1\\n        for i in range(len(s)):\\n            if(s[i].isdigit()):\\n                if(int(s[i])>one):\\n                    two=one\\n                    one=int(s[i])\\n                elif(int(s[i])<one and int(s[i])>two):\\n                    two=int(s[i])\\n        return two\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035671,
                "title": "simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 50ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 16.29mb\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        two=-1\\n        one=-1\\n        for i in range(len(s)):\\n            if(s[i].isdigit()):\\n                if(int(s[i])>one):\\n                    two=one\\n                    one=int(s[i])\\n                elif(int(s[i])<one and int(s[i])>two):\\n                    two=int(s[i])\\n        return two\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        two=-1\\n        one=-1\\n        for i in range(len(s)):\\n            if(s[i].isdigit()):\\n                if(int(s[i])>one):\\n                    two=one\\n                    one=int(s[i])\\n                elif(int(s[i])<one and int(s[i])>two):\\n                    two=int(s[i])\\n        return two\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028520,
                "title": "simple-treeset-solution-in-java",
                "content": "# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        TreeSet<Integer>res = new TreeSet<>();\\n        for(char ch:s.toCharArray()){\\n            if(Character.isDigit(ch)) res.add(ch-48);\\n        }\\n        // if the set is empty or it contains only 1 value that means either the string doesn\\'t contain any digit or it doesn\\'t have any second greatest number.\\n        if(res.isEmpty() || res.size()==1) return -1;\\n        // remove the last element from the set and for that TreeSet class has last() method to access the greatest number from the set\\n        res.remove(res.last());\\n        // Now in the set we have second largest element in the form of largest element as we have removed the largest so return the largest element now.\\n        return res.last();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        TreeSet<Integer>res = new TreeSet<>();\\n        for(char ch:s.toCharArray()){\\n            if(Character.isDigit(ch)) res.add(ch-48);\\n        }\\n        // if the set is empty or it contains only 1 value that means either the string doesn\\'t contain any digit or it doesn\\'t have any second greatest number.\\n        if(res.isEmpty() || res.size()==1) return -1;\\n        // remove the last element from the set and for that TreeSet class has last() method to access the greatest number from the set\\n        res.remove(res.last());\\n        // Now in the set we have second largest element in the form of largest element as we have removed the largest so return the largest element now.\\n        return res.last();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4028028,
                "title": "c-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- nlog(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>ans;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                ans.push_back(s[i]-\\'0\\');\\n            }\\n        }\\n        int maxi=-1;\\n        int res=-1;\\n        for(int i=0; i<ans.size(); i++)\\n        {\\n            if(ans[i]>maxi)\\n            {\\n                res=maxi;\\n                maxi=ans[i];\\n            }\\n            else if(maxi>ans[i] && ans[i]>res)\\n            {\\n                res=ans[i];\\n            }\\n        }\\n        if(res!=-1)\\n        {\\n            return res;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<int>ans;\\n        for(int i=0; i<s.size(); i++)\\n        {\\n            if(s[i]>=\\'0\\' && s[i]<=\\'9\\')\\n            {\\n                ans.push_back(s[i]-\\'0\\');\\n            }\\n        }\\n        int maxi=-1;\\n        int res=-1;\\n        for(int i=0; i<ans.size(); i++)\\n        {\\n            if(ans[i]>maxi)\\n            {\\n                res=maxi;\\n                maxi=ans[i];\\n            }\\n            else if(maxi>ans[i] && ans[i]>res)\\n            {\\n                res=ans[i];\\n            }\\n        }\\n        if(res!=-1)\\n        {\\n            return res;\\n        }\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026521,
                "title": "java-solution-arraylist-stream-api-explanations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nHere is my solution in Java by using stream API\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nTraversing the given string and detecting all the digits in variable\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n7 ms\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n41,56 mb\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        //create an arraylist\\n        List<Integer>list1=new ArrayList<>();\\n        //traverse the string and seek the digits in string\\n        for(int i=0;i<s.length();i++){\\n            if(Character.isDigit(s.charAt(i))==true){\\n                //record the digits to arraylist\\n                list1.add((s.charAt(i))-\\'0\\');\\n            }\\n        }\\n        //add unique digits to a new arraylist \\n        List<Integer>uniqueNumbers=list1.stream().distinct().collect(\\n                Collectors.toList());\\n                \\n        if(uniqueNumbers.size()<=1){\\n            return -1;\\n        }\\n        //sort the new arraylist\\n        Collections.sort(uniqueNumbers); \\n\\n        if(uniqueNumbers.size()==2){\\n            return uniqueNumbers.get(0);\\n        }\\n        //return the second largest digit from the arraylist\\n        return uniqueNumbers.get(uniqueNumbers.size()-2);\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        //create an arraylist\\n        List<Integer>list1=new ArrayList<>();\\n        //traverse the string and seek the digits in string\\n        for(int i=0;i<s.length();i++){\\n            if(Character.isDigit(s.charAt(i))==true){\\n                //record the digits to arraylist\\n                list1.add((s.charAt(i))-\\'0\\');\\n            }\\n        }\\n        //add unique digits to a new arraylist \\n        List<Integer>uniqueNumbers=list1.stream().distinct().collect(\\n                Collectors.toList());\\n                \\n        if(uniqueNumbers.size()<=1){\\n            return -1;\\n        }\\n        //sort the new arraylist\\n        Collections.sort(uniqueNumbers); \\n\\n        if(uniqueNumbers.size()==2){\\n            return uniqueNumbers.get(0);\\n        }\\n        //return the second largest digit from the arraylist\\n        return uniqueNumbers.get(uniqueNumbers.size()-2);\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4023991,
                "title": "java-0-n-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int largest = -1;\\n        int secondLargest = -1;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (Character.isDigit(s.charAt(i))) {\\n                if (largest == -1) {\\n                    largest = Character.getNumericValue(s.charAt(i));\\n                    continue;\\n                }\\n\\n                if (Character.getNumericValue(s.charAt(i)) > largest) {\\n                    secondLargest = largest;\\n                    largest = Character.getNumericValue(s.charAt(i));\\n                } else if (Character.getNumericValue(s.charAt(i)) < largest && Character.getNumericValue(s.charAt(i)) > secondLargest) {\\n                    secondLargest = Character.getNumericValue(s.charAt(i));\\n                }\\n            }\\n        }\\n\\n        return secondLargest;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int largest = -1;\\n        int secondLargest = -1;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            if (Character.isDigit(s.charAt(i))) {\\n                if (largest == -1) {\\n                    largest = Character.getNumericValue(s.charAt(i));\\n                    continue;\\n                }\\n\\n                if (Character.getNumericValue(s.charAt(i)) > largest) {\\n                    secondLargest = largest;\\n                    largest = Character.getNumericValue(s.charAt(i));\\n                } else if (Character.getNumericValue(s.charAt(i)) < largest && Character.getNumericValue(s.charAt(i)) > secondLargest) {\\n                    secondLargest = Character.getNumericValue(s.charAt(i));\\n                }\\n            }\\n        }\\n\\n        return secondLargest;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012772,
                "title": "simple-solution-using-set",
                "content": "\\n\\n# Code\\n```\\nconst secondHighest = (s) => {\\n    s = s.split(\"\");\\n    let numbers = new Set();\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (isNaN(s[i]) === false && !numbers.has(s[i])) {\\n            numbers.add(s[i]);\\n        }\\n    }\\n\\n    if ( numbers.size < 2 ) {\\n        return -1;\\n    }\\n\\n    numbers = Array.from(numbers);\\n    numbers.sort((a,b) => b - a);\\n    return numbers[1];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst secondHighest = (s) => {\\n    s = s.split(\"\");\\n    let numbers = new Set();\\n\\n    for (let i = 0; i < s.length; i++) {\\n        if (isNaN(s[i]) === false && !numbers.has(s[i])) {\\n            numbers.add(s[i]);\\n        }\\n    }\\n\\n    if ( numbers.size < 2 ) {\\n        return -1;\\n    }\\n\\n    numbers = Array.from(numbers);\\n    numbers.sort((a,b) => b - a);\\n    return numbers[1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005776,
                "title": "1796-second-largest-digit-in-a-string",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        x=[]\\n        for i in s:\\n            if i.isdigit():\\n                if int(i) not in x:\\n                    x.append(int(i))\\n        x=sorted(x)\\n        if len(x)<=1:\\n            return -1\\n        else:\\n            return x[len(x)-2]\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        x=[]\\n        for i in s:\\n            if i.isdigit():\\n                if int(i) not in x:\\n                    x.append(int(i))\\n        x=sorted(x)\\n        if len(x)<=1:\\n            return -1\\n        else:\\n            return x[len(x)-2]\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4005171,
                "title": "simple-for-loop-1-pass",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int n=s.size();\\n        int maxi=-1;\\n        int smaxi=-1;\\n        for(int i=0;i<n;i++){\\n            if(isdigit(s[i])){\\n                int num=s[i]-\\'0\\';\\n                if(num>maxi){\\n                    smaxi=maxi;\\n                    maxi=num;\\n                }\\n                else if( num!=maxi && num>smaxi){\\n                    smaxi=num;\\n                }\\n            }\\n        }\\n        return smaxi;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        int n=s.size();\\n        int maxi=-1;\\n        int smaxi=-1;\\n        for(int i=0;i<n;i++){\\n            if(isdigit(s[i])){\\n                int num=s[i]-\\'0\\';\\n                if(num>maxi){\\n                    smaxi=maxi;\\n                    maxi=num;\\n                }\\n                else if( num!=maxi && num>smaxi){\\n                    smaxi=num;\\n                }\\n            }\\n        }\\n        return smaxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3992422,
                "title": "recursive-solution-beats-100-with-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int pos = 0;\\n        int last = s.length() - 1;\\n        int max1 = -1;\\n        int max2 = -1;\\n\\n        return secondHighestRecursive(pos,last,max1,max2,s) ;\\n    }   \\n\\n    public int secondHighestRecursive(int pos, int last, int max1, int max2, String s){\\n         char c = s.charAt(pos);\\n         if(Character.isDigit(c)){\\n                int nr = (c - \\'0\\');\\n                if( nr > max1){\\n                    max2 = max1;\\n                    max1 = nr;\\n                }else if(max1 > nr && nr >= max2){\\n                    max2 = nr;\\n                }\\n        }\\n         if(pos == last){\\n                return max2;\\n            }else{\\n                return secondHighestRecursive(pos + 1,last,max1,max2,s);\\n            }\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        int pos = 0;\\n        int last = s.length() - 1;\\n        int max1 = -1;\\n        int max2 = -1;\\n\\n        return secondHighestRecursive(pos,last,max1,max2,s) ;\\n    }   \\n\\n    public int secondHighestRecursive(int pos, int last, int max1, int max2, String s){\\n         char c = s.charAt(pos);\\n         if(Character.isDigit(c)){\\n                int nr = (c - \\'0\\');\\n                if( nr > max1){\\n                    max2 = max1;\\n                    max1 = nr;\\n                }else if(max1 > nr && nr >= max2){\\n                    max2 = nr;\\n                }\\n        }\\n         if(pos == last){\\n                return max2;\\n            }else{\\n                return secondHighestRecursive(pos + 1,last,max1,max2,s);\\n            }\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3976192,
                "title": "python-o-n-beats-100-bonus-one-line-code",
                "content": "# Approach\\nTo eliminate double iteration and/or sorting, we can use a complex if statement within a single loop.\\n\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        max1 = max2 = \\'-1\\'\\n        for num in s:\\n            if num.isdecimal():\\n                if num > max2 and num != max1:\\n                    if num > max1:\\n                        max1, max2 = num, max1\\n                    else:\\n                        max2 = num\\n        return int(max2)\\n```\\n\\n# Bonus One Line Code:\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return 0 if (d:={num for num in s if num.isdecimal()}|{\\'-1\\'}).remove(max(d)) else int(max(d)) if d else -1\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        max1 = max2 = \\'-1\\'\\n        for num in s:\\n            if num.isdecimal():\\n                if num > max2 and num != max1:\\n                    if num > max1:\\n                        max1, max2 = num, max1\\n                    else:\\n                        max2 = num\\n        return int(max2)\\n```\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        return 0 if (d:={num for num in s if num.isdecimal()}|{\\'-1\\'}).remove(max(d)) else int(max(d)) if d else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974052,
                "title": "using-list-comp-and-try-and-except",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        l=list(set([int(i) for i in s if i.isdigit()]))\\n        l.sort(reverse=True)\\n        try:\\n            return l[1]\\n        except:\\n            return -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def secondHighest(self, s: str) -> int:\\n        l=list(set([int(i) for i in s if i.isdigit()]))\\n        l.sort(reverse=True)\\n        try:\\n            return l[1]\\n        except:\\n            return -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3972009,
                "title": "jebas-raja-very-easy",
                "content": "# Intuition\\u2764\\uFE0FKARUNYA UNIVERSITY ACCENTURE\\u2764\\uFE0F\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        int first=-1;\\nint second=-1;\\n\\n//System.out.println(\\'1\\'-\\'0\\');\\n \\nfor (int i = 0; i < s.length(); i++) \\n{\\n \\n  if (s.charAt(i)<97) \\n  {\\n  //System.out.println(s.charAt(i));\\n     if (s.charAt(i)-\\'0\\'>first) \\n     { \\n      second=first;\\n      first=s.charAt(i)-\\'0\\';\\n     }\\n     else if (s.charAt(i)-\\'0\\'>second && s.charAt(i)-\\'0\\'!=first) \\n     {\\n        second=s.charAt(i)-\\'0\\';\\n     }\\n  }\\n}\\n\\n\\n//System.out.println(second);\\n\\nreturn second;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        \\n        int first=-1;\\nint second=-1;\\n\\n//System.out.println(\\'1\\'-\\'0\\');\\n \\nfor (int i = 0; i < s.length(); i++) \\n{\\n \\n  if (s.charAt(i)<97) \\n  {\\n  //System.out.println(s.charAt(i));\\n     if (s.charAt(i)-\\'0\\'>first) \\n     { \\n      second=first;\\n      first=s.charAt(i)-\\'0\\';\\n     }\\n     else if (s.charAt(i)-\\'0\\'>second && s.charAt(i)-\\'0\\'!=first) \\n     {\\n        second=s.charAt(i)-\\'0\\';\\n     }\\n  }\\n}\\n\\n\\n//System.out.println(second);\\n\\nreturn second;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3962025,
                "title": "best-intuitive-solution-beats-100-of-the-users",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int,greater<int>> s1;\\n        for(auto x: s){\\n            if(!isalpha(x)){\\n                s1.insert(x-48);\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n        if(s1.size()<2){\\n            return -1;\\n        }\\n        else{\\n            return *next(s1.begin(),1);\\n        }\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        set<int,greater<int>> s1;\\n        for(auto x: s){\\n            if(!isalpha(x)){\\n                s1.insert(x-48);\\n            }\\n            else{\\n                continue;\\n            }\\n        }\\n        if(s1.size()<2){\\n            return -1;\\n        }\\n        else{\\n            return *next(s1.begin(),1);\\n        }\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959276,
                "title": "easy-solution-using-java",
                "content": "\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        char max = \\'/\\', sMax = \\'/\\';\\n        for(char c:s.toCharArray()){\\n            if(c >= \\'0\\' && c <= \\'9\\'){\\n                if(max < c){\\n                    sMax = max;\\n                    max = c;\\n                }\\n                else if(sMax < c && max != c){\\n                    sMax = c;\\n                }\\n            }\\n        }\\n        return sMax == \\'/\\' ? -1 : (int)sMax - \\'0\\';\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int secondHighest(String s) {\\n        char max = \\'/\\', sMax = \\'/\\';\\n        for(char c:s.toCharArray()){\\n            if(c >= \\'0\\' && c <= \\'9\\'){\\n                if(max < c){\\n                    sMax = max;\\n                    max = c;\\n                }\\n                else if(sMax < c && max != c){\\n                    sMax = c;\\n                }\\n            }\\n        }\\n        return sMax == \\'/\\' ? -1 : (int)sMax - \\'0\\';\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958434,
                "title": "super-easy-javascript-tostring-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 97-100%\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 99.53%\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n  let result = 0\\n  let flag = 0\\n  // Go from the biggest number to smallest \\n  for(let i = 9; i >= 0; i--){\\n    if(s.includes(i.toString())){\\n      flag++ // Set flag to find next highest number\\n      result = i\\n    }\\n    if( flag == 2){\\n       return result\\n    }\\n  }\\n  // If only one number in list, return -1\\n  if(flag < 2){\\n    return -1\\n  }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar secondHighest = function(s) {\\n  let result = 0\\n  let flag = 0\\n  // Go from the biggest number to smallest \\n  for(let i = 9; i >= 0; i--){\\n    if(s.includes(i.toString())){\\n      flag++ // Set flag to find next highest number\\n      result = i\\n    }\\n    if( flag == 2){\\n       return result\\n    }\\n  }\\n  // If only one number in list, return -1\\n  if(flag < 2){\\n    return -1\\n  }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947456,
                "title": "dart-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  int secondHighest(String s) {\\n      Set<int> nums = {};\\n      for (var i in s.split(\\'\\')) {\\n          if (int.tryParse(i) != null) {\\n              nums.add(int.parse(i));\\n          }\\n      }\\n\\n      final numsList = nums.toList();\\n      numsList.sort();\\n      return numsList.length <= 1 ? -1 : numsList[numsList.length - 2];\\n  }\\n}\\n```",
                "solutionTags": [
                    "Dart"
                ],
                "code": "```\\nclass Solution {\\n  int secondHighest(String s) {\\n      Set<int> nums = {};\\n      for (var i in s.split(\\'\\')) {\\n          if (int.tryParse(i) != null) {\\n              nums.add(int.parse(i));\\n          }\\n      }\\n\\n      final numsList = nums.toList();\\n      numsList.sort();\\n      return numsList.length <= 1 ? -1 : numsList[numsList.length - 2];\\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942674,
                "title": "easy-to-follow-c-solution",
                "content": "# Approach\\nCheck input string and mark all found digits in vector. Walk vector backwards and return second digit if present.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1) - uses vector of fixed size 10 to store seen digits.\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<bool> d(10, false);\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                d[c - \\'0\\'] = true;\\n            }\\n        }\\n\\n        bool fistDigitFound = false;\\n        for (int i = 9;i >= 0;i --) {\\n            if (d[i] && !fistDigitFound) {\\n                fistDigitFound = true;\\n            } else if (d[i] && fistDigitFound) {\\n                return i;\\n            }\\n        }\\n        return -1;        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        vector<bool> d(10, false);\\n        for (char c: s) {\\n            if (c >= \\'0\\' && c <= \\'9\\') {\\n                d[c - \\'0\\'] = true;\\n            }\\n        }\\n\\n        bool fistDigitFound = false;\\n        for (int i = 9;i >= 0;i --) {\\n            if (d[i] && !fistDigitFound) {\\n                fistDigitFound = true;\\n            } else if (d[i] && fistDigitFound) {\\n                return i;\\n            }\\n        }\\n        return -1;        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933003,
                "title": "simple-solution-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        // vector<int> arr;\\n        // for(int i=0;i<s.length();i++){\\n        //     if(s[i]>=\\'0\\'&& s[i]<=\\'9\\'){\\n        //         arr.push_back(s[i]-\\'0\\');\\n        //     }\\n        // }\\n        // if(arr.size()==0) return -1;\\n        int largest = -1;\\n        int slargest = -1;\\n        for(int i =0;i<s.size();i++){\\n            if(s[i]>=\\'0\\'&& s[i]<=\\'9\\'){\\n                if(s[i]-\\'0\\'>largest){\\n                    slargest=largest;\\n                    largest=s[i]-\\'0\\';\\n                }else if(s[i]-\\'0\\'<largest && s[i]-\\'0\\'>slargest){\\n                    slargest = s[i]-\\'0\\';\\n                }\\n            }\\n        }\\n\\n        return slargest;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int secondHighest(string s) {\\n        // vector<int> arr;\\n        // for(int i=0;i<s.length();i++){\\n        //     if(s[i]>=\\'0\\'&& s[i]<=\\'9\\'){\\n        //         arr.push_back(s[i]-\\'0\\');\\n        //     }\\n        // }\\n        // if(arr.size()==0) return -1;\\n        int largest = -1;\\n        int slargest = -1;\\n        for(int i =0;i<s.size();i++){\\n            if(s[i]>=\\'0\\'&& s[i]<=\\'9\\'){\\n                if(s[i]-\\'0\\'>largest){\\n                    slargest=largest;\\n                    largest=s[i]-\\'0\\';\\n                }else if(s[i]-\\'0\\'<largest && s[i]-\\'0\\'>slargest){\\n                    slargest = s[i]-\\'0\\';\\n                }\\n            }\\n        }\\n\\n        return slargest;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3910279,
                "title": "swift-one-line-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        Set(Array(s).compactMap { Int(String($0)) }).count > 1 ? Set(Array(s).compactMap { Int(String($0)) }).sorted(by: >)[1] : -1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        Set(Array(s).compactMap { Int(String($0)) }).count > 1 ? Set(Array(s).compactMap { Int(String($0)) }).sorted(by: >)[1] : -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3904784,
                "title": "one-line-solution-swift",
                "content": "\\n# Code\\n```\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        Set(s.filter { $0.isNumber }\\n        .compactMap { Int(String($0)) })\\n        .sorted().dropLast()\\n        .last ?? -1\\n    }\\n}\\n```",
                "solutionTags": [
                    "Swift"
                ],
                "code": "```\\nclass Solution {\\n    func secondHighest(_ s: String) -> Int {\\n        Set(s.filter { $0.isNumber }\\n        .compactMap { Int(String($0)) })\\n        .sorted().dropLast()\\n        .last ?? -1\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1704325,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1843576,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 2071776,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1903201,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1903188,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1868168,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1777615,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1761738,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            },
            {
                "id": 1684241,
                "content": [
                    {
                        "username": "maggiee21",
                        "content": "Is the test case wrong or just me?\\n\\nif `s = \"url15\"` then the output should be `5` right? why is it showing expected `1` \\n\\nFrom the question, second largest numerical digit. "
                    },
                    {
                        "username": "janhs",
                        "content": "5 is the largest numerical digit in s, 1 is the second largest numerical digit in s. So 1 is the correct solution"
                    },
                    {
                        "username": "sylzys",
                        "content": "\"\"ck077\"\\nexpected 0 ??\\nIsn\\'t 7 the 2nd largest digit of [0, 7 ]??"
                    },
                    {
                        "username": "berkaysson",
                        "content": "7 is bigger than 0, so largest digit is 7, second largest one is 0, array should be sorted like this [7, 0]"
                    },
                    {
                        "username": "undercovercoder_",
                        "content": "it means the second largest digit after 7. which is 0"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Don\\'t confuse second largest with second smallest lol"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "🟢 Can we directly  solve it using set"
                    },
                    {
                        "username": "devesh_kumar_kushwaha",
                        "content": "\\uD83D\\uDFE2 Basic problem to a hang on heap data structure."
                    },
                    {
                        "username": "rastogiyash461",
                        "content": "Is any optimization to my solution possible ?\\n\\nfunc secondHighest(s string) int {\\n\\n    hashSet := make(map[int]struct{})\\n    for i:=0 ; i<len(s) ; i++ {\\n        if s[i] >= 48 && s[i] <= 57 {\\n            value , _ := strconv.Atoi(string(s[i]))\\n            hashSet[value] = struct{}{}\\n        }\\n    }\\n    max := -1 \\n    for key , _ := range hashSet{\\n        if key > max {\\n            max = key\\n        }\\n    }\\n    delete(hashSet, max)\\n    max2 := -1 \\n    for key , _ := range hashSet{\\n        if key > max2 {\\n            max2 = key\\n        }\\n    }\\n    return max2\\n}"
                    },
                    {
                        "username": "eduard92",
                        "content": "Was thinking.. I am gonna keep an array of len 2, second largest being on pos 1 but then I saw acceptance rate and I am starting to overthink this.."
                    },
                    {
                        "username": "izzatullohboy007",
                        "content": "class Solution:\\n    def secondHighest(self, s: str) -> int:\\n        n = set()\\n        for i in s:\\n            if i.isdigit() == True:\\n                n.add(int(i))\\n        if len(n)>1:\\n            return sorted(n)[-2]\\n        return -1    "
                    },
                    {
                        "username": "topswe",
                        "content": "Optimal: O(n) time and O(1) space:\n\n2 cases: \n\n1. digit d > max : max = d, second_max = max\n\n2. max > d > second_max : second_max = d"
                    }
                ]
            }
        ]
    }
]