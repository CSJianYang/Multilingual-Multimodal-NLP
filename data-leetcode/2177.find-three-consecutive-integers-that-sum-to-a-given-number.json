[
    {
        "title": "Find Three Consecutive Integers That Sum to a Given Number",
        "question_content": "Given an integer num, return three consecutive integers (as a sorted array) that sum to num. If num cannot be expressed as the sum of three consecutive integers, return an empty array.\n&nbsp;\nExample 1:\n\nInput: num = 33\nOutput: [10,11,12]\nExplanation: 33 can be expressed as 10 + 11 + 12 = 33.\n10, 11, 12 are 3 consecutive integers, so we return [10, 11, 12].\n\nExample 2:\n\nInput: num = 4\nOutput: []\nExplanation: There is no way to express 4 as the sum of 3 consecutive integers.\n\n&nbsp;\nConstraints:\n\n\t0 <= num <= 1015",
        "solutions": [
            {
                "id": 1783715,
                "title": "c-easy-to-understand-explained-with-example",
                "content": "\\n### **Explanation**\\nMathematically:\\nx+(x-1)+(x+1) = n\\n=> 3x=n\\n=> x=n/3\\n\\nThus, we can say that:\\n1. If a number is divisible by 3, then only an answer exists.\\n2. If a number is divisible by 3, then it\\'s answer array would have three elements: \\n\\t\\t\\ti. num/3\\n\\t\\t\\tii. num/3 + 1\\n\\t\\t\\tiii. num/3 - 1\\n\\t\\t\\nLet\\'s check the validity of above points using examples!\\n\\n* For num=2. No triplet is possible.\\n* For num=3. Our answer would be: [0, 1, 2].\\n* For num=4. No triplet is possible.\\n* For num=6. Our answer would be: [1, 2, 3].\\n* For num=9. Our answer would be: [2, 3, 4].\\n\\n\\t\\t\\n\\n### **Code**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n            return {};\\n        \\n        long long mid=num/3;\\n        return {mid-1,mid,mid+1};\\n    }\\n};\\n```\\n\\nSpace and Time Complexity is O(1). \\uD83D\\uDE13",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n            return {};\\n        \\n        long long mid=num/3;\\n        return {mid-1,mid,mid+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1787777,
                "title": "shouldn-t-it-have-been-classified-as-easy",
                "content": "```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    if (num % 3 !== 0)  return []\\n    \\n    \\n    const mid = num / 3\\n    return [mid - 1, mid, mid + 1]\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    if (num % 3 !== 0)  return []\\n    \\n    \\n    const mid = num / 3\\n    return [mid - 1, mid, mid + 1]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783625,
                "title": "java-python-3-divisible-by-3",
                "content": "```java\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) {\\n            return new long[0];\\n        }\\n        num /= 3;\\n        return new long[]{num - 1, num, num + 1};\\n    }\\n```\\n```python\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num % 3 == 0:\\n            num //= 3\\n            return [num - 1, num, num + 1]\\n        return []\\n```\\n**Analysis:**\\n\\nTime & space: `O(1)`.",
                "solutionTags": [
                    "Java",
                    "Python3"
                ],
                "code": "```java\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) {\\n            return new long[0];\\n        }\\n        num /= 3;\\n        return new long[]{num - 1, num, num + 1};\\n    }\\n```\n```python\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num % 3 == 0:\\n            num //= 3\\n            return [num - 1, num, num + 1]\\n        return []\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2186467,
                "title": "c-o-1-solution-0ms-runtime-100-memory-94-57",
                "content": "An observable pttern if you want to represent a number as  sum\\n of 3 consecutive numbers is that, the middle number is going to\\n be num/3;\\n so if it could be divided, then numbers are: [num/3 -1, num/3,num/3+1]\\n else []\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long x = num/3;\\n        if (3*x != num){\\n            return vector<long long>();\\n        }\\n        else{\\n            vector<long long> v;\\n            v.push_back(x-1);\\n            v.push_back(x);\\n            v.push_back(x+1);\\n            return v;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long x = num/3;\\n        if (3*x != num){\\n            return vector<long long>();\\n        }\\n        else{\\n            vector<long long> v;\\n            v.push_back(x-1);\\n            v.push_back(x);\\n            v.push_back(x+1);\\n            return v;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1785733,
                "title": "one-liner",
                "content": "This is possible only if `n` is divisible by 3:\\n- `(x - 1) + x + (x + 1) = n`\\n\\t- `x = n / 3`\\n\\n**C++**\\n```cpp\\nvector<long long> sumOfThree(long long n) {\\n    return n % 3 == 0 ? vector<long long>{n / 3 - 1, n / 3, n / 3 + 1} : vector<long long>{};\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nvector<long long> sumOfThree(long long n) {\\n    return n % 3 == 0 ? vector<long long>{n / 3 - 1, n / 3, n / 3 + 1} : vector<long long>{};\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2185826,
                "title": "python-o-1-solution-easy-to-undestand",
                "content": "**Please upvote and do comment**\\nWe know **three consecutive integers means they differ by 1 from previous one**,\\nThink first one as x, second and third will be x+1,x+2\\nx+x+1+x+2=num,\\nx=(num-6)/3\\nif this x is not a **decimal number** , we can return [x,x+1,x+2] else return []\\n\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        temp=(num-3)/3\\n        if floor(temp)==ceil(temp):\\n            return [int(temp),int(temp)+1,int(temp)+2]\\n        else:\\n            return []\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        temp=(num-3)/3\\n        if floor(temp)==ceil(temp):\\n            return [int(temp),int(temp)+1,int(temp)+2]\\n        else:\\n            return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783382,
                "title": "time-o-1-space-o-1-simple-1-line-solution-with-explanation",
                "content": "If you add more examples to the ones in the description, you may start to see a pattern.\\n\\n*num = 0  ->  []\\nnum = 1  ->  []\\nnum = 2  ->  []\\nnum = 3  ->  [0,1,2]\\nnum = 4  ->  []\\nnum = 5  ->  []\\nnum = 6  ->  [1,2,3]\\nnum = 7  ->  []\\nnum = 8  ->  []\\nnum = 9  ->  [2,3,4]\\n...\\nnum = 33->  [10,11,12]\\n...\\nnum = 99-> [32,33,34]*\\n\\nBased on the above, it looks like the result is not empty only in cases where the num is divisible by 3. Also, if you look at the results, you can notice that the middle number is always a result of division by **3**.  *33 / 3 = 11, 99 / 3 = 33, etc.*\\n\\nTherefore, we can utilize math to come up with the solution:\\n**Javascript:**\\n```Javascript\\nvar sumOfThree = function(num) {\\n    return (num % 3 === 0) ? [num / 3 - 1, num / 3, num / 3 + 1] : [];\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```Javascript\\nvar sumOfThree = function(num) {\\n    return (num % 3 === 0) ? [num / 3 - 1, num / 3, num / 3 + 1] : [];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783425,
                "title": "python3-1-line",
                "content": "Please pull this [commit](https://github.com/gaosanyong/leetcode/commit/97dff55b43563450a33c98f2a216954117100dfe) for solutions of weekly 72. \\n\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        return [] if num % 3 else [num//3-1, num//3, num//3+1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        return [] if num % 3 else [num//3-1, num//3, num//3+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3289056,
                "title": "easy-solution-in-python",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: List[int]\\n        \"\"\"\\n        val=num//3\\n        while val>=0 and 3*val==num:\\n            return [val-1,val,val+1]\\n        return []\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: List[int]\\n        \"\"\"\\n        val=num//3\\n        while val>=0 and 3*val==num:\\n            return [val-1,val,val+1]\\n        return []\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3218237,
                "title": "100-fasrter-0space-c-2-line-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)return {};\\n        return {num/3-1,num/3,num/3+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)return {};\\n        return {num/3-1,num/3,num/3+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3539956,
                "title": "100-submission-using-maths-in-o-1-time-and-space-complexity-c-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWe can see that the answer is only possible for multiple of 3.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nthe 3 number should be x-1,x,x+1 and is a multiple of 3.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1+1+1)==O(1);\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> ans;\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)    return ans;\\n        else{\\n            ans.push_back(num/3-1);\\n            ans.push_back(num/3);\\n            ans.push_back(num/3+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> ans;\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)    return ans;\\n        else{\\n            ans.push_back(num/3-1);\\n            ans.push_back(num/3);\\n            ans.push_back(num/3+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2239380,
                "title": "python3-solution-o-1-time-explanation",
                "content": "**Explanation**\\n\\nLet three consecutive number be `x-1, x, x+1`. According to question there sum should be equal to num.\\n```\\n(x - 1) + (x) + (x + 1) = num\\n3x = num\\nx = num / 3\\n```\\nIt is evident that the middle element should be num / 3. If num is not divisible by 3, there is no possible answer.\\n\\n**Python**\\n\\n```\\nclass Solution:\\n    def sumOfThree(self, num):\\n        if num % 3: return []\\n        x = num // 3\\n        return list(range(x-1,x+2))\\n```\\n\\n`Time Complexibilty` : `O(1)`\\n`Space Complexibility` : `O(1)`",
                "solutionTags": [
                    "Python",
                    "Math"
                ],
                "code": "```\\n(x - 1) + (x) + (x + 1) = num\\n3x = num\\nx = num / 3\\n```\n```\\nclass Solution:\\n    def sumOfThree(self, num):\\n        if num % 3: return []\\n        x = num // 3\\n        return list(range(x-1,x+2))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793326,
                "title": "very-easy-cpp-solution-using-logic",
                "content": "\\'\\'\\'\\nvector<long long> arr;\\n        if(num % 3 != 0) return arr;\\n        long long n = num -3;\\n        long long x = n/3;\\n        arr.push_back(x);\\n        arr.push_back(x+1);\\n        arr.push_back(x+2);\\n        \\n        \\n        return arr;",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "\\'\\'\\'\\nvector<long long> arr;\\n        if(num % 3 != 0) return arr;\\n        long long n = num -3;\\n        long long x = n/3;\\n        arr.push_back(x);\\n        arr.push_back(x+1);\\n        arr.push_back(x+2);\\n        \\n        \\n        return arr;",
                "codeTag": "Unknown"
            },
            {
                "id": 1786039,
                "title": "java-accepted-easy-understandable",
                "content": "```\\nclass Solution {\\n  \\tpublic static long[] sumOfThree(long n) {\\n\\t\\tif (n % 3 != 0) {\\n\\t\\t\\tlong[] ans = new long[0];\\n\\t\\t\\treturn ans;\\n\\n\\t\\t} else {\\n\\t\\t\\tlong[] ans = new long[3];\\n\\t\\t\\tans[0] = n / 3 - 1;\\n\\t\\t\\tans[1] = n / 3;\\n\\t\\t\\tans[2] = n / 3 + 1;\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t}\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n  \\tpublic static long[] sumOfThree(long n) {\\n\\t\\tif (n % 3 != 0) {\\n\\t\\t\\tlong[] ans = new long[0];\\n\\t\\t\\treturn ans;\\n\\n\\t\\t} else {\\n\\t\\t\\tlong[] ans = new long[3];\\n\\t\\t\\tans[0] = n / 3 - 1;\\n\\t\\t\\tans[1] = n / 3;\\n\\t\\t\\tans[2] = n / 3 + 1;\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t}\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783326,
                "title": "c-easy-solution",
                "content": "class Solution {\\npublic:\\n\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long >v;\\n        if(num%3==0)\\n        {\\n            v.push_back(num/3-1);\\n            v.push_back(num/3);\\n            v.push_back(num/3+1);\\n        }\\n        return v;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long >v;\\n        if(num%3==0)\\n        {\\n            v.push_back(num/3-1);\\n            v.push_back(num/3);\\n            v.push_back(num/3+1);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3728764,
                "title": "the-best-and-simple-single-line-java-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nLet the number be x and let y=x/3\\nthen 3y=x;\\ny+y+y=x\\ny-1 +y +y+1 will also be equal to x;\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3!=0)\\n         return new long[] {};\\n        long a=num/3;\\n        return new long[] {a-1,a,a+1};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3!=0)\\n         return new long[] {};\\n        long a=num/3;\\n        return new long[] {a-1,a,a+1};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3476380,
                "title": "simple-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n           return {};\\n        return {(num/3)-1,num/3,(num/3)+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n           return {};\\n        return {(num/3)-1,num/3,(num/3)+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3457238,
                "title": "4-lines-of-code-beats-100-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3!=0)\\n            return new long[0];\\n        num/=3;\\n        return new long[]{num-1,num,num+1};\\n\\n        \\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3!=0)\\n            return new long[0];\\n        num/=3;\\n        return new long[]{num-1,num,num+1};\\n\\n        \\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3192052,
                "title": "c-beats-100-easy",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nCheck if number is divided by 3 or not.\\n\\n# Complexity\\n- Time complexity:\\n$$O(1)$$ \\n\\n- Space complexity:\\n $$O(1)$$ \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> temp;\\n        if(num%3 != 0){\\n            \\n            return temp;\\n        }\\n        long long ans = num/3;\\n        temp.push_back(ans-1);\\n        temp.push_back(ans);\\n        temp.push_back(ans+1);\\n        return temp;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> temp;\\n        if(num%3 != 0){\\n            \\n            return temp;\\n        }\\n        long long ans = num/3;\\n        temp.push_back(ans-1);\\n        temp.push_back(ans);\\n        temp.push_back(ans+1);\\n        return temp;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2788854,
                "title": "3ms-time-o-1-c-solution-one-line-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long &num) {\\n        if(num%3){\\n            return  {};\\n        }\\n        return {num/3-1,num/3,num/3+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long &num) {\\n        if(num%3){\\n            return  {};\\n        }\\n        return {num/3-1,num/3,num/3+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2733446,
                "title": "java-ac-3-line-solution",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        //if(num is not divisible by 3) reutrn empty array\\n        if(num%3!=0) return new long[0];\\n        \\n        // finding three values;\\n        long mid = num/3;\\n        return new long[]{mid-1,mid,mid+1};\\n    }\\n}\\n\\n//please upvote if you liked the solution\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        //if(num is not divisible by 3) reutrn empty array\\n        if(num%3!=0) return new long[0];\\n        \\n        // finding three values;\\n        long mid = num/3;\\n        return new long[]{mid-1,mid,mid+1};\\n    }\\n}\\n\\n//please upvote if you liked the solution\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2712409,
                "title": "java-easiest-solution-1ms-runtime-faster-than-92-online-submission-beginner-friendly-approach",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[0];\\n        if(num%3 == 0){\\n            arr = new long[3];\\n            arr[0] = ((num/3))-1;\\n            arr[1] = (num/3);\\n            arr[2] = ((num/3))+1;\\n            return arr;\\n        }\\n        else{\\n            return arr;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[0];\\n        if(num%3 == 0){\\n            arr = new long[3];\\n            arr[0] = ((num/3))-1;\\n            arr[1] = (num/3);\\n            arr[2] = ((num/3))+1;\\n            return arr;\\n        }\\n        else{\\n            return arr;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2593669,
                "title": "constant-space-constant-complexity-with-explanation",
                "content": "```\\n\\t\\tif(num%3!=0){\\n            return new long[0];\\n        }\\n        \\n        //suppose x is the number\\n        // x+(x+1)+(x+2)==num\\n        // 3x+3==num\\n        // x=(num/3)+1\\n        // SO, THE NUMBER \"num\" SHOULD BE DIVISIBLE BY 3 \\n        \\n        long x=num/3-1;\\n        long[] arr=new long[3];\\n        arr[0]=x;\\n        arr[1]=x+1;\\n        arr[2]=x+2;\\n        \\n        return arr;\\n\\t\\t```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\n\\t\\tif(num%3!=0){\\n            return new long[0];\\n        }\\n        \\n        //suppose x is the number\\n        // x+(x+1)+(x+2)==num\\n        // 3x+3==num\\n        // x=(num/3)+1\\n        // SO, THE NUMBER \"num\" SHOULD BE DIVISIBLE BY 3 \\n        \\n        long x=num/3-1;\\n        long[] arr=new long[3];\\n        arr[0]=x;\\n        arr[1]=x+1;\\n        arr[2]=x+2;\\n        \\n        return arr;\\n\\t\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 2305409,
                "title": "c-binary-search",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        //binary Search\\n        \\n        long long lo = -1;// -1 becoz we have num == 0 as well if we put lo=0 then it will fail in 1 testcase \\n        long long hi = num;\\n        while(lo<=hi){\\n            long long mid = lo +(hi-lo)/2;\\n            long long val = 3*mid+3;//mid+mid+1mid+2 == num\\n            if(val == num){\\n                return {mid,mid+1,mid+2};\\n            }\\n            else if(val>num){\\n                hi = mid-1;\\n            }\\n            else{\\n                lo = mid+1;\\n            }\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        //binary Search\\n        \\n        long long lo = -1;// -1 becoz we have num == 0 as well if we put lo=0 then it will fail in 1 testcase \\n        long long hi = num;\\n        while(lo<=hi){\\n            long long mid = lo +(hi-lo)/2;\\n            long long val = 3*mid+3;//mid+mid+1mid+2 == num\\n            if(val == num){\\n                return {mid,mid+1,mid+2};\\n            }\\n            else if(val>num){\\n                hi = mid-1;\\n            }\\n            else{\\n                lo = mid+1;\\n            }\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2240129,
                "title": "o-1-time-x-1-x-x-1-num-3-line-code",
                "content": "As explained in heading if a number is divisible b 3, just return {num/3-1, num/3 , num/3+1} else return empty array.\\n\\n\\t\\t\\t\\t\\tif(num%3!=0) return {};\\n\\t\\t\\t\\t\\tlong long x = num/3;\\n\\t\\t\\t\\t\\treturn {x-1,x,x+1};",
                "solutionTags": [
                    "C++"
                ],
                "code": "As explained in heading if a number is divisible b 3, just return {num/3-1, num/3 , num/3+1} else return empty array.\\n\\n\\t\\t\\t\\t\\tif(num%3!=0) return {};\\n\\t\\t\\t\\t\\tlong long x = num/3;\\n\\t\\t\\t\\t\\treturn {x-1,x,x+1};",
                "codeTag": "Unknown"
            },
            {
                "id": 1954951,
                "title": "simple-5-lines-of-code-divide-by-3",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        a = b = c = 0\\n        if num % 3 == 0:\\n            val = num // 3\\n            a = val - 1\\n            b = val\\n            c = val + 1\\n        return [a, b, c] if a + b + c == num else []\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        a = b = c = 0\\n        if num % 3 == 0:\\n            val = num // 3\\n            a = val - 1\\n            b = val\\n            c = val + 1\\n        return [a, b, c] if a + b + c == num else []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1808913,
                "title": "c-2-lines",
                "content": "```\\n  vector<long long> sumOfThree(long long num) {\\n        long long t = num/3;\\n        return (t-1 + t + t+1 == num) ?  {t-1, t, t+1} : {};\\n  }",
                "solutionTags": [],
                "code": "```\\n  vector<long long> sumOfThree(long long num) {\\n        long long t = num/3;\\n        return (t-1 + t + t+1 == num) ?  {t-1, t, t+1} : {};\\n  }",
                "codeTag": "Unknown"
            },
            {
                "id": 1794272,
                "title": "cpp-solution-100-faster-o-1-time-and-space-complex",
                "content": "**if there is a ans then num%3==0 \\n explination :**\\n there should exict a \\'n\\' such that\\n     n+(n+1)+(n+2)=num\\n    3*n+3=num\\n\\t3*(n+1)=num\\n\\thence for ans num%3==0;\\n\\tcode\\n\\t\\n\\t` vector<long long> sumOfThree(long long num)\\n    {\\n       if(num%3!=0)\\n           return {};\\n        return {num/3-1,num/3,num/3+1};\\n    }`",
                "solutionTags": [
                    "C"
                ],
                "code": "**if there is a ans then num%3==0 \\n explination :**\\n there should exict a \\'n\\' such that\\n     n+(n+1)+(n+2)=num\\n    3*n+3=num\\n\\t3*(n+1)=num\\n\\thence for ans num%3==0;\\n\\tcode\\n\\t\\n\\t` vector<long long> sumOfThree(long long num)\\n    {\\n       if(num%3!=0)\\n           return {};\\n        return {num/3-1,num/3,num/3+1};\\n    }`",
                "codeTag": "Unknown"
            },
            {
                "id": 1793432,
                "title": "cpp-100-00-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector <long long> v;\\n        if(num%3!=0)\\n            return v;\\n        v.push_back((num/3)-1);\\n        v.push_back(num/3);\\n        v.push_back((num/3)+1);\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector <long long> v;\\n        if(num%3!=0)\\n            return v;\\n        v.push_back((num/3)-1);\\n        v.push_back(num/3);\\n        v.push_back((num/3)+1);\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1793112,
                "title": "simple-java-solution",
                "content": "```class Solution {\\n    public long[] sumOfThree(long n) {\\n        long k=n%3;\\n        if(n%3!=0)\\n        {\\n            long a[]=new long[0];\\n            return a;\\n        }\\n        else\\n        {\\n            long a[]=new long[3];\\n            a[0]=n/3-1;\\n            a[1]=n/3;\\n            a[2]=n/3+1;\\n            return a;\\n        }\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public long[] sumOfThree(long n) {\\n        long k=n%3;\\n        if(n%3!=0)\\n        {\\n            long a[]=new long[0];\\n            return a;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1784678,
                "title": "cakewalk-solution",
                "content": "```\\n vector<long long> sumOfThree(long long num) {\\n        vector <long long> vec;\\n        if(num%3==0){\\n            vec.push_back((num/3)-1);\\n            vec.push_back(num/3);\\n            vec.push_back((num/3)+1);\\n            sort(vec.begin(),vec.end());\\n            return vec;\\n        }\\n        else{\\n            return vec;\\n        }\\n        \\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\n vector<long long> sumOfThree(long long num) {\\n        vector <long long> vec;\\n        if(num%3==0){\\n            vec.push_back((num/3)-1);\\n            vec.push_back(num/3);\\n            vec.push_back((num/3)+1);\\n            sort(vec.begin(),vec.end());\\n            return vec;\\n        }\\n        else{\\n            return vec;\\n        }\\n        \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783809,
                "title": "binary-search-c-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        \\n        typedef long long ll;\\n        long long lo = (long long)0;\\n        long long hi = num;\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n        while(hi-lo>1)\\n        {\\n            long long mid = lo+(hi-lo)/(2ll);\\n            long long k = mid-1ll+mid+1ll+mid;\\n            \\n            if(k==num)\\n            {\\n                return {mid-1ll,mid,mid+1ll};\\n            }\\n            else if(k>num)\\n            {\\n                hi = mid-1ll;\\n            }\\n            else\\n            {\\n                lo = mid+1ll;\\n            }\\n            \\n        }\\n        \\n        if(hi-1ll+hi+1ll+hi==num)\\n        {\\n            return {hi-1ll,hi,hi+1ll};\\n        }\\n        if(lo-1ll+lo+1ll+lo==num)\\n        {\\n            return {lo-1ll,lo,lo+1ll};\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        \\n        typedef long long ll;\\n        long long lo = (long long)0;\\n        long long hi = num;\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n        while(hi-lo>1)\\n        {\\n            long long mid = lo+(hi-lo)/(2ll);\\n            long long k = mid-1ll+mid+1ll+mid;\\n            \\n            if(k==num)\\n            {\\n                return {mid-1ll,mid,mid+1ll};\\n            }\\n            else if(k>num)\\n            {\\n                hi = mid-1ll;\\n            }\\n            else\\n            {\\n                lo = mid+1ll;\\n            }\\n            \\n        }\\n        \\n        if(hi-1ll+hi+1ll+hi==num)\\n        {\\n            return {hi-1ll,hi,hi+1ll};\\n        }\\n        if(lo-1ll+lo+1ll+lo==num)\\n        {\\n            return {lo-1ll,lo,lo+1ll};\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783766,
                "title": "c-o-1-straight-forward-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) {\\n        vector <long long> ans;\\n        \\n        long long x,i,j,k;\\n        \\n        n=n-3;\\n        if(n%3!=0)\\n            return ans;\\n        else\\n        {\\n            x=n/3;\\n            ans.push_back(x);\\n            ans.push_back(x+1);\\n            ans.push_back(x+2);\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) {\\n        vector <long long> ans;\\n        \\n        long long x,i,j,k;\\n        \\n        n=n-3;\\n        if(n%3!=0)\\n            return ans;\\n        else\\n        {\\n            x=n/3;\\n            ans.push_back(x);\\n            ans.push_back(x+1);\\n            ans.push_back(x+2);\\n            return ans;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783747,
                "title": "c-o-1-explanation",
                "content": "Let k, k+1, k+2 be such triplet.\\n```k+k+1+k+2=num```\\n```3*K+3=num```\\n```3*k=num-3```\\n```k=num/3-1```\\nif (num-3) is not a multiple of 3, then no such triplet exists.\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long l=1;\\n        long long r=num;\\n        vector<long long> ans;\\n        num=num-3;\\n        if(num%3!=0)\\n            return ans;\\n        num=num/3;\\n        ans={num, num+1, num+2};\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```k+k+1+k+2=num```\n```3*K+3=num```\n```3*k=num-3```\n```k=num/3-1```\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long l=1;\\n        long long r=num;\\n        vector<long long> ans;\\n        num=num-3;\\n        if(num%3!=0)\\n            return ans;\\n        num=num/3;\\n        ans={num, num+1, num+2};\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783457,
                "title": "python-3-40ms-easy-to-understand-4-lines",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        r=[]\\n        if num%3==0:\\n            r.append((num//3)-1)\\n            r.append((num//3))\\n            r.append((num//3)+1)\\n        return r\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        r=[]\\n        if num%3==0:\\n            r.append((num//3)-1)\\n            r.append((num//3))\\n            r.append((num//3)+1)\\n        return r\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783452,
                "title": "simple-math",
                "content": "```\\n#define ll long long\\n    vector<long long> sumOfThree(long long num) {\\n       vector<ll> v;\\n        if(num%3 != 0) return v;\\n        ll a = num/3;\\n        a--;\\n        vector<ll> vv = {a,a+1,a+2};\\n        return vv;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n#define ll long long\\n    vector<long long> sumOfThree(long long num) {\\n       vector<ll> v;\\n        if(num%3 != 0) return v;\\n        ll a = num/3;\\n        a--;\\n        vector<ll> vv = {a,a+1,a+2};\\n        return vv;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783430,
                "title": "python3-solution-fastest",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3==0:\\n            c=num//3\\n            return [c-1,c,c+1] \\n        else:\\n            return []\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3==0:\\n            c=num//3\\n            return [c-1,c,c+1] \\n        else:\\n            return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783300,
                "title": "easy-and-short-explanation-fastest-python",
                "content": "**The logic is simple:**\\n`x + (x+1)+(x+2)=num`\\n```\\n3x + 3=num\\nx=(num-3)/3\\n\\n```\\n\\n\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        x=(num-3)/3\\n        a=x.is_integer()\\n        b=int(x)\\n        if a is True:\\n            return [b,b+1,b+2]\\n        else:\\n            return []\\n        \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n3x + 3=num\\nx=(num-3)/3\\n\\n```\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        x=(num-3)/3\\n        a=x.is_integer()\\n        b=int(x)\\n        if a is True:\\n            return [b,b+1,b+2]\\n        else:\\n            return []\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783221,
                "title": "simple-c-solution",
                "content": "class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n       vector<long long>v;\\n        if((num%3) !=0){\\n            return v ;\\n        }\\n        else{\\n             v.push_back(num/3 -1);\\n            v.push_back(num/3);\\n            v.push_back(num/3  +1);\\n           \\n\\n\\n        }\\n        return v;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n       vector<long long>v;\\n        if((num%3) !=0){\\n            return v ;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3818375,
                "title": "o-1-solution-faster-than-100",
                "content": "# Intuition\\nwe can take 3 consecutive numbers { x-1 , x , x+1 } and sum of these numbers is given as num. so we can find numbers using this approach.\\n\\n# Approach\\nBase case if num%3!=0 simply return empty vector else return { x-1 , x , x+1 }\\n \\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        if(num%3!=0) return {};\\n        \\n        long long x=num/3;\\n\\n        return {x-1,x,x+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        if(num%3!=0) return {};\\n        \\n        long long x=num/3;\\n\\n        return {x-1,x,x+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3725133,
                "title": "one-liner",
                "content": "\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         return (num%3==0) ? new long[]{(num/3)-1,num/3,(num/3)+1} : new long[]{};\\n         \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         return (num%3==0) ? new long[]{(num/3)-1,num/3,(num/3)+1} : new long[]{};\\n         \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3705853,
                "title": "find-three-consecutive-integers-that-sum-to-a-given-number",
                "content": "Memory-Efficient Approach\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        \\n        long long a=num/3;\\n        long long b=a-1;\\n        long long c=a+1;\\n        if((a+b+c)==num)\\n        {\\n            v.push_back(b);\\n            v.push_back(a);\\n            v.push_back(c);\\n        }   \\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        \\n        long long a=num/3;\\n        long long b=a-1;\\n        long long c=a+1;\\n        if((a+b+c)==num)\\n        {\\n            v.push_back(b);\\n            v.push_back(a);\\n            v.push_back(c);\\n        }   \\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3549654,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> ans;\\n        if(num%3==0){\\n            ans.push_back(num/3-1);\\n            ans.push_back(num/3);\\n            ans.push_back(num/3+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> ans;\\n        if(num%3==0){\\n            ans.push_back(num/3-1);\\n            ans.push_back(num/3);\\n            ans.push_back(num/3+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3517282,
                "title": "c-o-1-beginner-friendly-solution-100-beats",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3 != 0) return {};\\n        vector<long long> ans;\\n        ans.push_back((num/3)-1);\\n        ans.push_back(num/3);\\n        ans.push_back((num/3)+1);\\n         return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3 != 0) return {};\\n        vector<long long> ans;\\n        ans.push_back((num/3)-1);\\n        ans.push_back(num/3);\\n        ans.push_back((num/3)+1);\\n         return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2684715,
                "title": "c-easy-solution-math",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n        long long b=num/3;\\n        return {b-1,b,b+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n        long long b=num/3;\\n        return {b-1,b,b+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2684700,
                "title": "c-easy-solution-math",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        vector<long long>ans;\\n\\t\\n        if((num % 3)  !=0 )\\n        return {};\\n\\n        long long start = (num-3)/3;\\n\\n        ans.push_back(start);\\n        ans.push_back(start+1);\\n        ans.push_back(start+2);\\n\\n        return ans;    \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        vector<long long>ans;\\n\\t\\n        if((num % 3)  !=0 )\\n        return {};\\n\\n        long long start = (num-3)/3;\\n\\n        ans.push_back(start);\\n        ans.push_back(start+1);\\n        ans.push_back(start+2);\\n\\n        return ans;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2661454,
                "title": "python-solution",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        L =[]\\n        if num%3==0:\\n            n=num//3\\n            L.append(n-1)\\n            L.append(n)\\n            L.append(n+1)\\n            return L\\n        else:\\n            return L\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        L =[]\\n        if num%3==0:\\n            n=num//3\\n            L.append(n-1)\\n            L.append(n)\\n            L.append(n+1)\\n            return L\\n        else:\\n            return L\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2661448,
                "title": "c-solution-runtime-0-ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        if (num%3==0){\\n            long long n=num/3;\\n            v.push_back(n-1);\\n            v.push_back(n);\\n            v.push_back(n+1);\\n            return v;\\n        }\\n        else {\\n            return v;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        if (num%3==0){\\n            long long n=num/3;\\n            v.push_back(n-1);\\n            v.push_back(n);\\n            v.push_back(n+1);\\n            return v;\\n        }\\n        else {\\n            return v;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2651694,
                "title": "c-simple-math-4-lines-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        long long NUM = num;\\n        num -= 3;\\n        num /= 3;\\n\\n        if((num + num+1 + num+2) != NUM) return {};\\n\\n        return { num , num+1 , num+2 };\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        long long NUM = num;\\n        num -= 3;\\n        num /= 3;\\n\\n        if((num + num+1 + num+2) != NUM) return {};\\n\\n        return { num , num+1 , num+2 };\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2544307,
                "title": "c-3-line-code-explained-solution",
                "content": "# Explanation\\n**Mathematically:\\nx+(x-1)+(x+1) = n\\n=> 3x=n\\n=> x=n/3\\nThus, we can say that:\\nIf a number is divisible by 3, then only an answer exists.\\nIf a number is divisible by 3, then it\\'s answer array would have three elements:\\ni. num/3\\nii. num/3 + 1\\niii. num/3 - 1\\nLet\\'s check the validity of above points using examples!**\\n\\n\\n![image](https://assets.leetcode.com/users/images/4c962051-916c-4e1b-9921-cfa8ca56e323_1662546686.3802102.png)\\n\\t\\n**T->O(1) && S->O(1)**\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tif(num%3!=0) return {};\\n\\t\\t\\tlong long x=num/3;\\n\\t\\t\\treturn {x-1,x,x+1};\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tif(num%3!=0) return {}",
                "codeTag": "Java"
            },
            {
                "id": 2509844,
                "title": "simple-java-solution",
                "content": "```\\n\\nclass Solution {\\n    public long[] sumOfThree(long num) \\n    {\\n        long[] ans = new long[3];\\n        long[] ans2 = new long[0];\\n        \\n        long pivot = num/3;\\n        \\n        if(  ((pivot-1) + pivot + (pivot+1)) == num )\\n        {\\n            ans[0] = pivot-1;\\n            ans[1] = pivot;\\n            ans[2] = pivot+1;\\n            return ans;\\n        }\\n        else\\n            return ans2;\\n        \\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\nclass Solution {\\n    public long[] sumOfThree(long num) \\n    {\\n        long[] ans = new long[3];\\n        long[] ans2 = new long[0];\\n        \\n        long pivot = num/3;\\n        \\n        if(  ((pivot-1) + pivot + (pivot+1)) == num )\\n        {\\n            ans[0] = pivot-1;\\n            ans[1] = pivot;\\n            ans[2] = pivot+1;\\n            return ans;\\n        }\\n        else\\n            return ans2;\\n        \\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2503838,
                "title": "100-c-easy-o-1-time",
                "content": "```\\nvector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n       if(num%3==0){\\n           long long n=num/3;\\n           ans.push_back(n-1);\\n           ans.push_back(n);\\n           ans.push_back(n+1);\\n       }\\n        return ans;\\n    }\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nvector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n       if(num%3==0){\\n           long long n=num/3;\\n           ans.push_back(n-1);\\n           ans.push_back(n);\\n           ans.push_back(n+1);\\n       }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2497679,
                "title": "java-solution-easy-asf",
                "content": "### Please Upvote !!!\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) return new long[]{};\\n\\n        long mid = num / 3;\\n        return new long[]{mid - 1, mid, mid + 1};\\n    }\\n}\\n\\n// TC: O(1), SC: O(1)\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) return new long[]{};\\n\\n        long mid = num / 3;\\n        return new long[]{mid - 1, mid, mid + 1};\\n    }\\n}\\n\\n// TC: O(1), SC: O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2419901,
                "title": "python3",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if sum([num//3-1,num//3,num//3+1])==num:\\n            return [num//3-1,num//3,num//3+1]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if sum([num//3-1,num//3,num//3+1])==num:\\n            return [num//3-1,num//3,num//3+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2247259,
                "title": "2-line-easy-c-code",
                "content": "```\\nvector<long long> sumOfThree(long long n) {\\n        if(n%3==0) return {n/3-1,n/3,n/3+1};\\n        else return {};\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nvector<long long> sumOfThree(long long n) {\\n        if(n%3==0) return {n/3-1,n/3,n/3+1};\\n        else return {};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2243384,
                "title": "java-solution-faster-than-100-with-explanation",
                "content": "**Explanation of divisibility by 3 :**\\n\\nWe have to find a triplet {x,x+1,x+2} such that its sum=num.\\n\\nSo, x+x+1+x+2=num\\n     3x+3=num\\n     x=(num/3)-1\\n\\nFrom the above equation we can simply determine the value of the elements in the triplet by substituting x.\\n\\n```\\nclass Solution {\\n\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) return new long[0];\\n        long mid = num / 3;\\n        return new long[] { mid - 1, mid, mid + 1 };\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n\\n    public long[] sumOfThree(long num) {\\n        if (num % 3 != 0) return new long[0];\\n        long mid = num / 3;\\n        return new long[] { mid - 1, mid, mid + 1 };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2241769,
                "title": "c",
                "content": "![image](https://assets.leetcode.com/users/images/26c2ad9d-0158-4280-945e-910d3c2860c5_1657030133.1716561.png)\\n```\\nlong long* sumOfThree(long long num, int* returnSize) {\\n    *returnSize = 0;\\n    long long* arr = (long long*) malloc(3 * sizeof(long long));\\n    if (num % 3 == 0) {\\n        num /= 3;\\n        arr[0] = num - 1;\\n        arr[1] = arr[0] + 1;\\n        arr[2] = arr[1] + 1;\\n        *returnSize = 3;\\n    }\\n    return arr;\\n}\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nlong long* sumOfThree(long long num, int* returnSize) {\\n    *returnSize = 0;\\n    long long* arr = (long long*) malloc(3 * sizeof(long long));\\n    if (num % 3 == 0) {\\n        num /= 3;\\n        arr[0] = num - 1;\\n        arr[1] = arr[0] + 1;\\n        arr[2] = arr[1] + 1;\\n        *returnSize = 3;\\n    }\\n    return arr;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2240727,
                "title": "simple-maths-python-divisibility-by-3",
                "content": "```\\nif num%3!=0:\\n\\treturn []\\nelse:\\n    b=num//3\\n    return [b-1,b,b+1]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nif num%3!=0:\\n\\treturn []\\nelse:\\n    b=num//3\\n    return [b-1,b,b+1]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2240714,
                "title": "c-math-1-liner",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if((num - 3)%3)return {};\\n        long long a = (num-3)/3;\\n        return {a , a+1 , a+2};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if((num - 3)%3)return {};\\n        long long a = (num-3)/3;\\n        return {a , a+1 , a+2};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2240151,
                "title": "o-1-100-faster-1liner-c",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num % 3) return {};\\n        return{(num / 3) - 1, num / 3, (num / 3) + 1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num % 3) return {};\\n        return{(num / 3) - 1, num / 3, (num / 3) + 1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2239767,
                "title": "python-4-line-solution",
                "content": "```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: List[int]\\n        \"\"\"\\n        if num%3==0:\\n            l=num//3\\n            return [l-1,l,l+1]\\n        return []\\n        \\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        \"\"\"\\n        :type num: int\\n        :rtype: List[int]\\n        \"\"\"\\n        if num%3==0:\\n            l=num//3\\n            return [l-1,l,l+1]\\n        return []\\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2239409,
                "title": "math-explained",
                "content": "```\\nclass Solution {\\npublic:\\n    // since they told they are consecutive\\n    // (a)+(a+1)+(a+2)=num;\\n    // 3a+3=num;\\n    // so here the number can be formed if and only if it is divisible by 3;\\n    \\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3==0)\\n            return {num/3-1,num/3,num/3+1};\\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    // since they told they are consecutive\\n    // (a)+(a+1)+(a+2)=num;\\n    // 3a+3=num;\\n    // so here the number can be formed if and only if it is divisible by 3;\\n    \\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3==0)\\n            return {num/3-1,num/3,num/3+1};\\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2239321,
                "title": "python-math-intution",
                "content": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        # Solution - Math intution\\n        # Time  - O(1)\\n        # Space - O(1)\\n        x = num // 3\\n        \\n        if ((3 * x)) == num:\\n            return [(x-1), x, (x+1)]\\n        \\n        return []\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        # Solution - Math intution\\n        # Time  - O(1)\\n        # Space - O(1)\\n        x = num // 3\\n        \\n        if ((3 * x)) == num:\\n            return [(x-1), x, (x+1)]\\n        \\n        return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2238971,
                "title": "super-easy-solution",
                "content": "```\\nfunc sumOfThree(num int64) []int64 {\\n    var res []int64\\n    \\n    if num % 3 != 0 {\\n        return res\\n    }\\n    \\n    res = append(res, num/3 - 1)\\n    res = append(res, num/3)\\n    res = append(res, num/3 + 1)\\n    \\n    return res\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "C",
                    "Go",
                    "Math"
                ],
                "code": "```\\nfunc sumOfThree(num int64) []int64 {\\n    var res []int64\\n    \\n    if num % 3 != 0 {\\n        return res\\n    }\\n    \\n    res = append(res, num/3 - 1)\\n    res = append(res, num/3)\\n    res = append(res, num/3 + 1)\\n    \\n    return res\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2238935,
                "title": "2177-find-three-consecutive-integers-that-sum-to-a-given-number",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n            return {};\\n        vector<long long int>nums;\\n        long long int ans=num/3;\\n        nums.push_back(ans-1);\\n           nums.push_back(ans);\\n           nums.push_back(ans+1);\\nreturn nums;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0)\\n            return {};\\n        vector<long long int>nums;\\n        long long int ans=num/3;\\n        nums.push_back(ans-1);\\n           nums.push_back(ans);\\n           nums.push_back(ans+1);\\nreturn nums;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2193799,
                "title": "c-o-1-0ms-runtime-100-memory",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        \\n        \\n        long long result= num/3; \\n    \\n            long long a= result-1;\\n            long long b= result; \\n            long long c= result+1;\\n            \\n        if(a+b+c==num)\\n            return {a,b,c};\\n        \\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        \\n        \\n        long long result= num/3; \\n    \\n            long long a= result-1;\\n            long long b= result; \\n            long long c= result+1;\\n            \\n        if(a+b+c==num)\\n            return {a,b,c};\\n        \\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2185240,
                "title": "one-liner-python3",
                "content": "\\tclass Solution:\\n\\t\\tdef sumOfThree(self, num: int) -> List[int]:\\n\\t\\t\\tif num%3==0:\\n\\t\\t\\t\\treturn([num//3-1,num//3,num//3+1])",
                "solutionTags": [
                    "Python"
                ],
                "code": "\\tclass Solution:\\n\\t\\tdef sumOfThree(self, num: int) -> List[int]:\\n\\t\\t\\tif num%3==0:\\n\\t\\t\\t\\treturn([num//3-1,num//3,num//3+1])",
                "codeTag": "Java"
            },
            {
                "id": 2183996,
                "title": "c-100-fast-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> myvec;\\n        long long a;\\n        a = (num-3)/3;\\n        \\n        if((a+a+1+a+2)==num){\\n            myvec.push_back(a);\\n            myvec.push_back(a+1);\\n            myvec.push_back(a+2);\\n            return myvec;\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> myvec;\\n        long long a;\\n        a = (num-3)/3;\\n        \\n        if((a+a+1+a+2)==num){\\n            myvec.push_back(a);\\n            myvec.push_back(a+1);\\n            myvec.push_back(a+2);\\n            return myvec;\\n        }\\n        \\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2073931,
                "title": "very-simple-solution-java",
                "content": "This problem is a lot simpler than it may seem:\\n- if `num` is divisible by three, return a new `long[]` with `{num/3 - 1, num/3, num/3 + 1`}\\n- otherwise, return an emplty `long[]`. \\n\\n```\\npublic long[] sumOfThree(long num){\\n      if(num % 3 == 0){\\n         return new long[]{num/3 - 1, num/3, num/3 + 1};\\n      }\\n      else return new long[]{};\\n   }\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\npublic long[] sumOfThree(long num){\\n      if(num % 3 == 0){\\n         return new long[]{num/3 - 1, num/3, num/3 + 1};\\n      }\\n      else return new long[]{};\\n   }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2067453,
                "title": "very-simple-maths-cpp",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        vector<long long>v;\\n        long long a=num/3;\\n        if(a*3==num)\\n        {\\n            v.push_back(a-1);\\n            v.push_back(a);\\n            v.push_back(a+1);\\n            \\n        }\\n        return v;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        vector<long long>v;\\n        long long a=num/3;\\n        if(a*3==num)\\n        {\\n            v.push_back(a-1);\\n            v.push_back(a);\\n            v.push_back(a+1);\\n            \\n        }\\n        return v;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2058432,
                "title": "two-line-simple-observation",
                "content": "class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>v;\\n        if(num%(long long)3!=0)\\n            return v;\\n        long long x=num/3;\\n        return {x-1,x,x+1};\\n            \\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>v;\\n        if(num%(long long)3!=0)\\n            return v;\\n        long long x=num/3;\\n        return {x-1,x,x+1}",
                "codeTag": "Java"
            },
            {
                "id": 2043000,
                "title": "ez-work-binary-search-or-math-two-methods-implemented",
                "content": "Intuition:\\nLet\\'s say we are trying to find 3 consecutive numbers, a, a+1, a+2\\nthen all we need to do is, search for a which satisfies: a + (a+1) + (a+2) == num\\nAnd instead of linear search, we use Binary!!!!!!!\\n\\nBinary Search:\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:      \\n        \\n        low, high = -1, 10**15\\n        while low <= high:\\n            mid = low + (high - low)//2\\n            total = (3 * mid) + 3\\n            if total == num:\\n                return [mid, mid+1, mid+2]\\n            elif total > num:\\n                high = mid - 1 \\n            else:\\n                low = mid + 1\\n        return []  \\n```\\nMath:\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3 != 0:\\n            return []\\n        key = num//3\\n        return [key-1, key, key+1]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:      \\n        \\n        low, high = -1, 10**15\\n        while low <= high:\\n            mid = low + (high - low)//2\\n            total = (3 * mid) + 3\\n            if total == num:\\n                return [mid, mid+1, mid+2]\\n            elif total > num:\\n                high = mid - 1 \\n            else:\\n                low = mid + 1\\n        return []  \\n```\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3 != 0:\\n            return []\\n        key = num//3\\n        return [key-1, key, key+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2038733,
                "title": "c-easy-2-line-solution-100-faster-0ms",
                "content": "**Idea**\\nIt is a easy math question. Just check the code.\\n```\\nvector<long long> sumOfThree(long long num) {\\n\\tif(num % 3 != 0) return {};\\n\\treturn {num/3-1, num/3, num/3+1};\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nvector<long long> sumOfThree(long long num) {\\n\\tif(num % 3 != 0) return {};\\n\\treturn {num/3-1, num/3, num/3+1};\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2033835,
                "title": "very-easy-very-small-python",
                "content": "\\n\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3!=0:\\n            return\\n        return [(num//3)-1,num//3,(num//3)+1]\\n```\\n\\nPlease upvote if you find it helpful :)\\n\\t\\t",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3!=0:\\n            return\\n        return [(num//3)-1,num//3,(num//3)+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1985811,
                "title": "simple-mathematics-solution",
                "content": "```\\n let x;\\n    x= (num-3)/3;\\n    let temp=[]\\n    if(x%1==0){\\n        temp.push(x,x+1,x+2)\\n    }\\n    \\n    return temp;\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Math"
                ],
                "code": "```\\n let x;\\n    x= (num-3)/3;\\n    let temp=[]\\n    if(x%1==0){\\n        temp.push(x,x+1,x+2)\\n    }\\n    \\n    return temp;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1927265,
                "title": "easy-c-solution-100-accepted",
                "content": "\\'\\'\\'\\n vector<long long> v;\\n        if(num%3!=0) return v;\\n        long long mid=num/3;\\n        long long first=mid-1;\\n        long long last=mid+1;\\n        v.push_back(first);\\n        v.push_back(mid);\\n        v.push_back(last);\\n        return v;\\n\\n\\'\\'\\'",
                "solutionTags": [
                    "Math",
                    "Simulation"
                ],
                "code": "\\'\\'\\'\\n vector<long long> v;\\n        if(num%3!=0) return v;\\n        long long mid=num/3;\\n        long long first=mid-1;\\n        long long last=mid+1;\\n        v.push_back(first);\\n        v.push_back(mid);\\n        v.push_back(last);\\n        return v;\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 1841601,
                "title": "c-100-faster-easiest-approach",
                "content": "```\\n//method 1\\n\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long no=num/3;\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n     \\n            return {no-1,no,no+1};  \\n    }\\n};\\n\\n//method 2\\n\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> vec;\\n        long long mid_no=num/3;\\n        long long sum=mid_no-1+mid_no+mid_no+1;\\n        \\n        if(sum==num)\\n        {\\n           vec.push_back(mid_no-1);\\n            vec.push_back(mid_no);\\n            vec.push_back(mid_no+1);\\n        }\\n      else\\n      {\\n          {};\\n      }\\n        return vec;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n//method 1\\n\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long no=num/3;\\n        if(num%3!=0)\\n        {\\n            return {};\\n        }\\n     \\n            return {no-1,no,no+1};  \\n    }\\n};\\n\\n//method 2\\n\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> vec;\\n        long long mid_no=num/3;\\n        long long sum=mid_no-1+mid_no+mid_no+1;\\n        \\n        if(sum==num)\\n        {\\n           vec.push_back(mid_no-1);\\n            vec.push_back(mid_no);\\n            vec.push_back(mid_no+1);\\n        }\\n      else\\n      {\\n          {};\\n      }\\n        return vec;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1833906,
                "title": "java-solution",
                "content": "```java\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3==0)\\n        return new long[]{num/3-1,num/3,num/3+1};\\n        else\\n        return new long[0];\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3==0)\\n        return new long[]{num/3-1,num/3,num/3+1}",
                "codeTag": "Java"
            },
            {
                "id": 1821104,
                "title": "c-easy-to-understand-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long sum) {\\n        if(sum%3==0){\\n            long long x=sum/3-1;\\n            return {x,x+1,x+2};\\n        }\\n        else{\\n            return {};\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long sum) {\\n        if(sum%3==0){\\n            long long x=sum/3-1;\\n            return {x,x+1,x+2};\\n        }\\n        else{\\n            return {};\\n        }\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1812261,
                "title": "c-easy-solution-100-faster-easy-to-understand-comments-added",
                "content": "\\n\\n     class Solution {\\n\\t public:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>vect;\\n        long long rem=num%3; // CALCULATING REMAINDER\\n        if(rem!=0 ) // IF REMAINDER IS NOT ZERO THEN ANSWER IS EMPTY VECTOR\\n        {\\n            return vect;\\n        }\\n        long long x=num/3; // IF REMAINDER IS ZERO THEN PERFORM DIVISION\\n        vect.push_back(x-1);//FIRST ELEMENT\\n        vect.push_back(x); // SECOND ELEMENT\\n        vect.push_back(x+1); // THIRD ELEMENT\\n        return vect;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\t public:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>vect;\\n        long long rem=num%3; // CALCULATING REMAINDER\\n        if(rem!=0 ) // IF REMAINDER IS NOT ZERO THEN ANSWER IS EMPTY VECTOR\\n        {\\n            return vect;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1800742,
                "title": "runtime-0-ms-faster-than-100-00-memory-usage-40-3-mb-less-than-95-56",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[3];\\n        if (num % 3 == 0) {\\n            long n = (num / 3);\\n            arr[0] = n - 1;\\n            arr[1] = n;\\n            arr[2] = n + 1;\\n        } else return new long[]{};\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[3];\\n        if (num % 3 == 0) {\\n            long n = (num / 3);\\n            arr[0] = n - 1;\\n            arr[1] = n;\\n            arr[2] = n + 1;\\n        } else return new long[]{};\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1795961,
                "title": "c-o-1",
                "content": "```\\nvector<long long> sumOfThree(long long num) {\\n        if(num%3) return {};\\n        long long x = num/3;\\n        return {x-1, x, x+1};\\n}\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nvector<long long> sumOfThree(long long num) {\\n        if(num%3) return {};\\n        long long x = num/3;\\n        return {x-1, x, x+1};\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1793781,
                "title": "java-0-ms-beats100-solution",
                "content": "```class Solution {\\n    public long[] sumOfThree(long num) {\\n        \\n        if ( num % 3 == 0) {\\n            long [] arr = new long[3];\\n        \\n            arr[1]= num/3;\\n            arr[0]= num/3 - 1;\\n            arr[2] = num/3 + 1;\\n            return arr;\\n        }\\n        \\n        else {\\n            long[] empty = new long[0];\\n            return empty;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```class Solution {\\n    public long[] sumOfThree(long num) {\\n        \\n        if ( num % 3 == 0) {\\n            long [] arr = new long[3];\\n        \\n            arr[1]= num/3;\\n            arr[0]= num/3 - 1;\\n            arr[2] = num/3 + 1;\\n            return arr;\\n        }\\n        \\n        else {\\n            long[] empty = new long[0];\\n            return empty;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1792101,
                "title": "binary-search-java-easy-solution",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {  \\n        long start=0;\\n        long end = num;\\n        while(start<=end){\\n            long mid = (end+start)/2;\\n            if(mid*3==num){\\n                long[] arr = new long[3];\\n                arr[0]=mid-1;\\n                arr[1]=mid;\\n                arr[2]=mid+1;\\n                return arr;\\n            }\\n            if(mid*3<num){\\n                start=mid+1;\\n            }else{\\n                end=mid-1;\\n            }\\n        }\\n        return new long[0];\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {  \\n        long start=0;\\n        long end = num;\\n        while(start<=end){\\n            long mid = (end+start)/2;\\n            if(mid*3==num){\\n                long[] arr = new long[3];\\n                arr[0]=mid-1;\\n                arr[1]=mid;\\n                arr[2]=mid+1;\\n                return arr;\\n            }\\n            if(mid*3<num){\\n                start=mid+1;\\n            }else{\\n                end=mid-1;\\n            }\\n        }\\n        return new long[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1788977,
                "title": "a-few-solutions",
                "content": "If the input value `x` is evenly divisible by 3, then let `k = x / 3` and return a vector of `[k - 1, k, k + 1]`, otherwise return an empty vector.\\n\\n---\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    var sumOfThree = { x: Long -> if (x % 3L == 0L) longArrayOf(x / 3 - 1, x / 3, x / 3 + 1) else longArrayOf() }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet sumOfThree = (x, k = x / 3) => x % 3 ? [] : [k - 1, k, k + 1];\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    sumOfThree = lambda self, x: [x // 3 - 1, x // 3, x // 3 + 1] if not (x % 3) else []\\n```\\n\\n*Rust*\\n```\\ntype VL = Vec<i64>;\\nimpl Solution {\\n    pub fn sum_of_three(x: i64) -> VL {\\n        let k = x / 3;\\n        return if 3 * k == x { vec![k - 1, k, k + 1] } else { vec![] };\\n    }\\n}\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using LL = long long;\\n    using VL = vector<LL>;\\n    VL sumOfThree(LL x) {\\n        auto k = x / 3;\\n        return 3 * k == x ? VL{ k - 1, k, k + 1 } : VL{};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    var sumOfThree = { x: Long -> if (x % 3L == 0L) longArrayOf(x / 3 - 1, x / 3, x / 3 + 1) else longArrayOf() }\\n}\\n```\n```\\nlet sumOfThree = (x, k = x / 3) => x % 3 ? [] : [k - 1, k, k + 1];\\n```\n```\\nclass Solution:\\n    sumOfThree = lambda self, x: [x // 3 - 1, x // 3, x // 3 + 1] if not (x % 3) else []\\n```\n```\\ntype VL = Vec<i64>;\\nimpl Solution {\\n    pub fn sum_of_three(x: i64) -> VL {\\n        let k = x / 3;\\n        return if 3 * k == x { vec![k - 1, k, k + 1] } else { vec![] };\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    using LL = long long;\\n    using VL = vector<LL>;\\n    VL sumOfThree(LL x) {\\n        auto k = x / 3;\\n        return 3 * k == x ? VL{ k - 1, k, k + 1 } : VL{};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1787190,
                "title": "golang-solution-with-explanation",
                "content": "This solution is small but not the easiest to understand.\\n\\nIn Algebra 1, you might have learned how to sum up multiple consecutive numbers to make a result. \\n\\nI came up with this solution because when writing this, I am 15, and I learned about summing up consecutive numbers 2 to 3 years ago.\\n\\n## The Explanation of the Solution:\\n\\n`x + (x + 1) + (x + 2) = num` &rarr; We know that we need 3 consecutive numbers, so if `x` is the first number, `x + 1` is the second number, and `x + 2` is the third number. \\n\\n`3x + 3 = num` &rarr; We can combine all like terms.\\n\\n`3x = num - 3` &rarr; Subtract `3` from both sides.\\n\\n`x = (num - 3) / 3` &rarr; Divide both sides by `3` to isolate `x`.\\n\\nNow that we know the value of `x`, we can find the remaining two numbers, `x + 1`, and `x + 2`. \\n\\n---\\n\\nLet us take an example from the problem statment:\\n\\n`x + (x + 1) + (x + 2) = 33`\\n\\n`3x + 3 = 33`\\n\\n`3x = 30`\\n\\n`x = 10`\\n\\nThe first element is `10` next element is `11`, and the last element is `12`.\\n\\n---\\n\\n\\n``` go\\nfunc sumOfThree(num int64) []int64 {\\n    if (num - 3) % 3 != 0 {\\n        return []int64{}\\n    }\\n    \\n    x := (num - 3) / 3\\n    return []int64{ x, x + 1, x + 2 }\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "``` go\\nfunc sumOfThree(num int64) []int64 {\\n    if (num - 3) % 3 != 0 {\\n        return []int64{}\\n    }\\n    \\n    x := (num - 3) / 3\\n    return []int64{ x, x + 1, x + 2 }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1786261,
                "title": "java-easy-maths",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        /*\\n        Explaination : Let the numbers be x - 1,x,x + 1\\n        so x - 1 + x + x + 1 = num ,\\n        then 3x = num  \\n        */\\n         if(num % 3 == 0){\\n             long x = num / 3;\\n             long n1 = x - 1;\\n             long n2 = x;\\n             long n3 = x + 1;\\n             return new long[]{n1,n2,n3};\\n         }\\n         return new long[]{};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        /*\\n        Explaination : Let the numbers be x - 1,x,x + 1\\n        so x - 1 + x + x + 1 = num ,\\n        then 3x = num  \\n        */\\n         if(num % 3 == 0){\\n             long x = num / 3;\\n             long n1 = x - 1;\\n             long n2 = x;\\n             long n3 = x + 1;\\n             return new long[]{n1,n2,n3};\\n         }\\n         return new long[]{};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1786027,
                "title": "c-2-line-code-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)   return {};\\n        return {num/3-1, num/3, num/3+1};\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)   return {};\\n        return {num/3-1, num/3, num/3+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1786011,
                "title": "unique-solution-using-binary-search-c-easy-to-understand",
                "content": "\\t1.  class Solution {\\n      public:\\n\\t\\t   vector<long long> sumOfThree(long long num) {\\n\\t\\t   vector<long long> ans;\\n\\t\\t   long long int start = -1;\\n\\t\\t   long long int end = num;\\n\\t\\t   long long int mid = start + (end - start)/2;\\n\\t   \\n\\t\\t\\twhile(start <= end){\\n\\t\\t\\t\\tmid = start + ( end - start)/2;\\n\\t\\t\\t\\tif(3 * mid + 3 == num){\\n                ans.push_back(mid);\\n                ans.push_back(mid+1);\\n                ans.push_back(mid+ 2);\\n                break;\\n                }\\n\\t\\t\\t\\telse if(num > 3 * mid + 3 ){\\n                start = mid + 1;\\n                }\\n\\t\\t\\t\\telse end = mid - 1;\\n\\t\\t\\t}\\n\\t\\t\\t\\treturn ans;\\n        }\\n        \\n    \\n};",
                "solutionTags": [
                    "Binary Tree"
                ],
                "code": "class Solution {\\n      public:\\n\\t\\t   vector<long long> sumOfThree(long long num) {\\n\\t\\t   vector<long long> ans;\\n\\t\\t   long long int start = -1;\\n\\t\\t   long long int end = num;\\n\\t\\t   long long int mid = start + (end - start)/2;\\n\\t   \\n\\t\\t\\twhile(start <= end){\\n\\t\\t\\t\\tmid = start + ( end - start)/2;\\n\\t\\t\\t\\tif(3 * mid + 3 == num){\\n                ans.push_back(mid);\\n                ans.push_back(mid+1);\\n                ans.push_back(mid+ 2);\\n                break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1785434,
                "title": "php-simple-solution",
                "content": "```\\nclass Solution {\\n\\n    /**\\n     * @param Integer $num\\n     * @return Integer[]\\n     */\\n    function sumOfThree($num) {\\n        if ($num % 3 !== 0) {\\n            return [];\\n        }\\n        $medium = $num / 3;\\n        return [$medium - 1, $medium, $medium + 1];\\n    }\\n}",
                "solutionTags": [
                    "PHP",
                    "Math"
                ],
                "code": "class Solution {\\n\\n    /**\\n     * @param Integer $num\\n     * @return Integer[]\\n     */\\n    function sumOfThree($num) {\\n        if ($num % 3 !== 0) {\\n            return [];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1783878,
                "title": "2-lines-arithmetic-progression-easy-to-understand-class-10th",
                "content": "Let 3 consecutive numbers be: x-1, x, x+1\\nTheir sum will be (x-1)+(x) +(x+1) i.e 3x, so for given sum to be valid sum of 3 consecutive numbers, it must be divisible by 3.\\n\\n```\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)   return {};            //If not divisible by 3 return empty vector\\n        return {num/3-1,num/3,num/3+1};   //else return num/3 -1, num/3 and num/3 +1\\n    }\\n```",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3)   return {};            //If not divisible by 3 return empty vector\\n        return {num/3-1,num/3,num/3+1};   //else return num/3 -1, num/3 and num/3 +1\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783671,
                "title": "python-basic-math-solution",
                "content": "```\\ndef sumOfThree(self, num: int) -> List[int]:        \\n\\tif num % 3 == 0:\\n\\t\\ta = num // 3 \\n\\t\\treturn [a-1, a, a+1]\\n\\telse:\\n\\t\\treturn []\\n\\n```\\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Math"
                ],
                "code": "```\\ndef sumOfThree(self, num: int) -> List[int]:        \\n\\tif num % 3 == 0:\\n\\t\\ta = num // 3 \\n\\t\\treturn [a-1, a, a+1]\\n\\telse:\\n\\t\\treturn []\\n\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1783637,
                "title": "basic-mathematics-4-lines-of-code",
                "content": "***Please upvote if this solution is helpful :)***\\n\\n3 consecutive nos can be  represented by x-1,x and x+1.\\n\\nSum of these 3 is 3x.\\nWe have 2 cases:\\n* If no is not divisible by 3, then no possible answer exists.\\n* Else, 3x = num, find x and return {x-1,x,x+1}\\n\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long x = num/3;\\n        if(num%3!=0){\\n            return new long[0];\\n        }\\n        return new long[]{x-1,x,x+1};\\n    }\\n}\\n```\\n\\n",
                "solutionTags": [
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long x = num/3;\\n        if(num%3!=0){\\n            return new long[0];\\n        }\\n        return new long[]{x-1,x,x+1};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783616,
                "title": "c-aptitude-simple-solution-easy-understanding",
                "content": "- Let Consecutive Numbers are : `(x),(x+1),(x+2)` \\n- Therefore, x+(x+1)+(x+2) = num\\n- x = (num-3)/3\\n\\n```\\nvector<long long> sumOfThree(long long num) {\\n        ll a,b,c;\\n        ll x = (num-3)/3;\\n        a = x;\\n        b = x+1;\\n        c = x+2;\\n        if(a+b+c == num){\\n            return {a,b,c};\\n        }else{\\n            return {};\\n        }\\n    }\\n```\\n**Please Upvote if you like the solution.**",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math"
                ],
                "code": "```\\nvector<long long> sumOfThree(long long num) {\\n        ll a,b,c;\\n        ll x = (num-3)/3;\\n        a = x;\\n        b = x+1;\\n        c = x+2;\\n        if(a+b+c == num){\\n            return {a,b,c};\\n        }else{\\n            return {};\\n        }\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783613,
                "title": "c-easy-to-understand-divisibility",
                "content": "Sum of 3 consecutive numbers is divisible by 3.\\nSo we need to ensure if the number which we are given must be divisible by 3.\\nIf not return empty vector\\nElse divide number by 3,this will give the middle number.\\n\\nReturn middle-1,middle,middle+1\\n```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tlong long int modval = num%3;\\n\\t\\t\\tvector<long long>ans;\\n\\t\\t\\t\\tif(modval!=0)   //If a number is not divisble by 3 it cannot be represented as 3 consecutive integers \\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\tlong long int midval = num/3;\\n\\t\\t\\treturn {midval-1,midval,midval+1};\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tlong long int modval = num%3;\\n\\t\\t\\tvector<long long>ans;\\n\\t\\t\\t\\tif(modval!=0)   //If a number is not divisble by 3 it cannot be represented as 3 consecutive integers \\n\\t\\t\\t\\treturn ans;\\n\\t\\t\\tlong long int midval = num/3;\\n\\t\\t\\treturn {midval-1,midval,midval+1};\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783588,
                "title": "java-easy-and-clean-solution",
                "content": "\\n    public long[] sumOfThree(long num) {\\n        long[] ans = new long[3];\\n        if ((num - 3) % 3 == 0) return new long[] {(num - 3) / 3, ((num - 3) / 3) + 1, ((num - 3) / 3) + 2 };\\n        return new long[0];\\n    }",
                "solutionTags": [],
                "code": "\\n    public long[] sumOfThree(long num) {\\n        long[] ans = new long[3];\\n        if ((num - 3) % 3 == 0) return new long[] {(num - 3) / 3, ((num - 3) / 3) + 1, ((num - 3) / 3) + 2 };\\n        return new long[0];\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1783564,
                "title": "python-3-straightforward",
                "content": "Solution (if exists) looks like:\\n```[x-1,x,x+1]```\\nSum of these three numbers has to be ```num```:\\n```x-1 + x + x+1 == num```\\nIt is simple to find `x`:\\n```x = num//3```\\n\\nOne line solution:\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        return num%3==0 and [num//3-1,num//3,num//3+1] or []\\n```\\n\\nExplanation in Python:\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3:\\n            return []\\n        x=num//3\\n        return [x-1,x,x+1]\\n```",
                "solutionTags": [],
                "code": "```[x-1,x,x+1]```\n```num```\n```x-1 + x + x+1 == num```\n```x = num//3```\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        return num%3==0 and [num//3-1,num//3,num//3+1] or []\\n```\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3:\\n            return []\\n        x=num//3\\n        return [x-1,x,x+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783556,
                "title": "shortest-and-easiest-c-solution-easy-to-understand",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tif (num%3) return {};\\n\\t\\t\\tlong long no = num/3;\\n\\t\\t\\treturn {no-1, no,no+1};\\n\\t\\t}\\n\\t};\\n\\t\\n**PLEASE UPVOTE IF YOU LIKE THE SOLUTION**",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tvector<long long> sumOfThree(long long num) {\\n\\t\\t\\tif (num%3) return {}",
                "codeTag": "Java"
            },
            {
                "id": 1783546,
                "title": "c-o-1-solution-faster-than-100",
                "content": "**if we drive the question we can get 3x+3=sum which can futher can be written as x=(sum-3)/3\\ncaluclate x and check sum of x,x+1,x+2 is it equal to sum given in the question if it passes this condition oush back x,x+1,x+2 in a vector and return it.**\\n```\\nvector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        long long x=0;\\n        x=(num-3)/3;\\n        if(x+x+x+3==num){\\n            v.push_back(x);\\n            v.push_back(x+1);\\n            v.push_back(x+2);\\n        }\\n        return v;\\n    }",
                "solutionTags": [
                    "C++",
                    "C",
                    "Math",
                    "Greedy"
                ],
                "code": "**if we drive the question we can get 3x+3=sum which can futher can be written as x=(sum-3)/3\\ncaluclate x and check sum of x,x+1,x+2 is it equal to sum given in the question if it passes this condition oush back x,x+1,x+2 in a vector and return it.**\\n```\\nvector<long long> sumOfThree(long long num) {\\n        vector<long long> v;\\n        long long x=0;\\n        x=(num-3)/3;\\n        if(x+x+x+3==num){\\n            v.push_back(x);\\n            v.push_back(x+1);\\n            v.push_back(x+2);\\n        }\\n        return v;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1783460,
                "title": "accepted-solution-in-java",
                "content": "```class Solution {\\n    public long[] sumOfThree(long n) {        \\n       long a[]=new long[3];                \\n        int c=0;\\n        if (n % 3 == 0)\\n        {\\n           c++;\\n            a[0]=n/3-1;\\n            a[1]=n/3;\\n            a[2]=n/3+1;   \\n        }                            \\n        if(c==1)\\n        {\\n            return a;\\n        }\\n        else\\n        {\\n            long x[]=new long[0];\\n            return x;\\n        }        \\n    }\\n}",
                "solutionTags": [
                    "Array"
                ],
                "code": "class Solution {\\n    public long[] sumOfThree(long n) {        \\n       long a[]=new long[3];                \\n        int c=0;\\n        if (n % 3 == 0)\\n        {\\n           c++;\\n            a[0]=n/3-1;\\n            a[1]=n/3;\\n            a[2]=n/3+1;   \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1783426,
                "title": "o-1-simple-cpp-solution",
                "content": "\\nMathematically :\\nthree consecutive integers are in the form  n ,n+1, n+2\\nso to represent as a sum of any integer (say x) \\nx = ( n + n+1+n+2) \\nx=(3n+3)\\nx=3(n+1)\\n\\nso return empty vector if num%3!=0\\n else  return { (num/3)  -1 , num/3, (num/3) +1}\\n \\n\\nFeel free to comment if you got any doubts.\\n\\n```\\n\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long int>ans;\\n    \\n        if(num%3==0){\\n            ans.push_back(num/3 -1);\\n            ans.push_back(num/3 );\\n            ans.push_back(num/3 +1 );\\n            \\n        }\\n        \\n        return ans;\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long int>ans;\\n    \\n        if(num%3==0){\\n            ans.push_back(num/3 -1);\\n            ans.push_back(num/3 );\\n            ans.push_back(num/3 +1 );\\n            \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1783352,
                "title": "simplest-solution-java",
                "content": "** Simple maths formula used to find sum of three consecuitve integer is equal toh a given number.  The number will be the form   x , x+1 , x + 2  on sum it will equal to 3n + 3.**\\n\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         long answer = (num - 3) / 3;\\n        if (answer + answer + 1 + answer + 2 == num) {\\n            return new long[]{answer, answer + 1, answer + 2};\\n\\n        }\\n        return new long[] {};\\n        \\n    }\\n}\\n```\\n\\nplease upvote!",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         long answer = (num - 3) / 3;\\n        if (answer + answer + 1 + answer + 2 == num) {\\n            return new long[]{answer, answer + 1, answer + 2};\\n\\n        }\\n        return new long[] {};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783351,
                "title": "straight-forward-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if (num%3) return {};\\n        long long midNum = num/3;\\n        return {midNum-1, midNum,midNum+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if (num%3) return {};\\n        long long midNum = num/3;\\n        return {midNum-1, midNum,midNum+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783337,
                "title": "java-0-1-using-first-4-case-to-identify-the-pattern",
                "content": "we can see the pattern by exploring first 5 consecutive 3 numbers\\n                            1 +  2  + 3 = 6   \\n                            2 +  3 + 4= 9\\n                            3 +  4 + 5 = 12\\n                            4  + 5 +  6 =. 15\\n\\t\\t\\t\\t\\t\\t\\t5 + 6+ 7 = 18\\n\\tif we continue  , the sum of the next consecutive 3 elements  will always increase by 3 (since there are two numbers between the one that we add and the one that we remove)\\n\\tand we can see that the sum/3 is equal to the mid element\\n```class Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3 > 0){\\n            return new long[0];\\n        }\\n        long l1 = num/3;\\n        return new long[]{l1-1,l1,l1+1};\\n        \\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3 > 0){\\n            return new long[0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1783308,
                "title": "c-solution-4-line",
                "content": "```\\n    vector<long long> sumOfThree(long long n) \\n    {\\n        vector<long long> res;\\n    if (n % 3 == 0)\\n    {\\n        res.push_back(n / 3 - 1);\\n         res.push_back(n / 3);\\n         res.push_back(n / 3 + 1);\\n    }\\n      return res;   \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    vector<long long> sumOfThree(long long n) \\n    {\\n        vector<long long> res;\\n    if (n % 3 == 0)\\n    {\\n        res.push_back(n / 3 - 1);\\n         res.push_back(n / 3);\\n         res.push_back(n / 3 + 1);\\n    }\\n      return res;   \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1783299,
                "title": "easiest-one",
                "content": "\\n\\t\\n\\t#class Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3==0:\\n            k=num//3\\n            j=k-1\\n            l=k+1\\n        else:\\n            return []\\n        return [j,k,l]",
                "solutionTags": [],
                "code": "\\n\\t\\n\\t#class Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3==0:\\n            k=num//3\\n            j=k-1\\n            l=k+1\\n        else:\\n            return []\\n        return [j,k,l]",
                "codeTag": "Java"
            },
            {
                "id": 1783296,
                "title": "divisible-by-3",
                "content": "```\\n//If number is divisible by three a sloution exists\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num==0)\\n            return new long[]{-1,0,1};\\n        if(num%3!=0) return new long[]{};\\n        long[] answer = new long[3];\\n        long d = num/3;\\n        answer[0] = d-1;\\n        answer[1] = d;\\n        answer[2] = d+1;\\n        return answer;\\n    }\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```\\n//If number is divisible by three a sloution exists\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num==0)\\n            return new long[]{-1,0,1};\\n        if(num%3!=0) return new long[]{};\\n        long[] answer = new long[3];\\n        long d = num/3;\\n        answer[0] = d-1;\\n        answer[1] = d;\\n        answer[2] = d+1;\\n        return answer;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783279,
                "title": "java-simple-maths",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] ans = new long[3];\\n        //  consider result to be [x, x + 1, x + 3]\\n        //  then x + x + 1 + x + 2 = num\\n        //  OR 3 * x + 3 = num -> x = (num - 3) / 3;\\n        if ((num - 3) % 3 != 0) {\\n            return new long[0];\\n        }\\n        long x = (num - 3) / 3;\\n        ans[0] = x;\\n        ans[1] = x + 1;\\n        ans[2] = x + 2;\\n        return ans;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] ans = new long[3];\\n        //  consider result to be [x, x + 1, x + 3]\\n        //  then x + x + 1 + x + 2 = num\\n        //  OR 3 * x + 3 = num -> x = (num - 3) / 3;\\n        if ((num - 3) % 3 != 0) {\\n            return new long[0];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1783278,
                "title": "python3-solution-1-line-code-with-explanation",
                "content": "**Please vote**\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        # if num % 3 == 0:\\n        #     x = int((num - 3) / 3)    x + (x +1)  + (x+2) = num -> 3x + 3 = num -> x = (num-3) / 3\\n        #     return [x, x+1, x+2]\\n        # return []\\n        return [int((num - 3) / 3), int((num - 3) / 3)+1, int((num - 3) / 3)+2] if num % 3 == 0 else []\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        # if num % 3 == 0:\\n        #     x = int((num - 3) / 3)    x + (x +1)  + (x+2) = num -> 3x + 3 = num -> x = (num-3) / 3\\n        #     return [x, x+1, x+2]\\n        # return []\\n        return [int((num - 3) / 3), int((num - 3) / 3)+1, int((num - 3) / 3)+2] if num % 3 == 0 else []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783236,
                "title": "c-simple-math-approach",
                "content": "**simple approach just observation**\\nthe numbers are 1,2,3,4,5,6....\\nso,we add next three consecutive numbers 1+2+3, 2+3+4 , 3+4+5 , ... \\nwe get 6,9,12,15....\\nThere is only one possible way to get three consecutive numbers sum equal to k when num is divisible by 3\\nnum%3==0 than only possible\\n\\n**let us take an example: num=66 which is divisible by 3 so the three consecutive numbers will be \\nx=num/3 which is 22 so the three consecutive numbers are x-1, x , x+1 .**\\n\\n**code**\\n\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        if(num%3==0)\\n        {\\n             long long x=num/3;\\n             ans.push_back(x-1);\\n             ans.push_back(x);\\n             ans.push_back(x+1);\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        if(num%3==0)\\n        {\\n             long long x=num/3;\\n             ans.push_back(x-1);\\n             ans.push_back(x);\\n             ans.push_back(x+1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783208,
                "title": "c",
                "content": "public long[] SumOfThree(long num) {\\n        long[] result = new long[3];\\n            long x = (num - 3)/3;\\n        \\n        if((num - 3) % 3 == 0){\\n            result[0] = x;\\n            result[1] = x+1;\\n            result[2] = x+2;}\\n            return result[0] == 0 && result[1] == 0 && result[2] == 0 ? new long[] { } : result;\\n    }",
                "solutionTags": [],
                "code": "public long[] SumOfThree(long num) {\\n        long[] result = new long[3];\\n            long x = (num - 3)/3;\\n        \\n        if((num - 3) % 3 == 0){\\n            result[0] = x;\\n            result[1] = x+1;\\n            result[2] = x+2;}\\n            return result[0] == 0 && result[1] == 0 && result[2] == 0 ? new long[] { } : result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1783197,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n     long ans [] = new long[3];\\n        if(num % 3 == 0){\\n          ans[1] = num/3;\\n          ans[0] = num/3 - 1;\\n          ans[2] = num/3 + 1;\\n          return ans;\\n        }\\n        else \\n            return new long[0];\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n     long ans [] = new long[3];\\n        if(num % 3 == 0){\\n          ans[1] = num/3;\\n          ans[0] = num/3 - 1;\\n          ans[2] = num/3 + 1;\\n          return ans;\\n        }\\n        else \\n            return new long[0];\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1783172,
                "title": "c-easy-o-1-time-and-o-1-space",
                "content": "**Intution :-**\\n\\nLet\\'s take three consecutive numbers as\\n\\n**x-1** , **x** , **x+1**\\n\\nAccording to question \\n\\n(x-1) + x + (x+1) = givenNumber\\n\\n=> 3x = givenNumber\\n=> x = givenNumber/3 , \\n\\nmeans x is an integer , that means this **givenNumber is completely divisible by 3** , if it is not then no answer possible , otherwise just return **{x-1 , x , x+1}** where x = givenNumber/3\\n\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) {\\n        if(n%3)\\n            return {};\\n        return {(n/3)-1 , n/3 , (n/3)+1};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) {\\n        if(n%3)\\n            return {};\\n        return {(n/3)-1 , n/3 , (n/3)+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4073163,
                "title": "easy-java-solution-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long nums) {\\n        \\n        if(nums%3!=0)\\n        return new long[]{};\\n        long a=nums/3;\\n        return new long[]{a-1,a,a+1};\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long nums) {\\n        \\n        if(nums%3!=0)\\n        return new long[]{};\\n        long a=nums/3;\\n        return new long[]{a-1,a,a+1};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4069775,
                "title": "easy-java-solution-with-100-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3==0){\\n            long[] res= new long[3];\\n            res[0] = num/3-1;\\n            res[1] = num/3;\\n            res[2] = num/3+1;\\n            return res;\\n        }\\n        return new long[]{};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num%3==0){\\n            long[] res= new long[3];\\n            res[0] = num/3-1;\\n            res[1] = num/3;\\n            res[2] = num/3+1;\\n            return res;\\n        }\\n        return new long[]{};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4055322,
                "title": "mathematical-approach-explained-in-detail-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach \\nWe have to find three numbers x,y,z such that they all are consecutive and adds up to the given number.\\n\\nSo, mathematically x+y+z=num;\\n\\nNow if x,y,z are consecutive then we can relate them as x=y-1 and z=y+1;\\n\\n(y-1)+y+(y+1)=num;\\n\\nThat means if I provide that extra 1 of z to x or normally solve equation , Then our equation becomes;\\n\\ny+y+y=num;\\n\\n3*y=num;\\n\\nThis equation tells us that if and only if num is a multiple of three then only it can be expressed as a sum of three consecutive number;\\n\\nSo, on dividing with 3 you get the value of y and we know that,\\nx=y-1 and z=y+1.\\n\\nNow can form the array easily. arr[0]=y-1 ; arr[1]=y ; arr[2]=y+1;\\n\\nThanks !!!\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[]=new long[3];\\n\\n        if(num%3!=0){\\n            long arr1[]=new long[0];\\n            return arr1;\\n        }\\n            long c=num/3;\\n\\n            arr[1]=c;\\n            arr[0]=c-1;\\n            arr[2]=c+1;\\n\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[]=new long[3];\\n\\n        if(num%3!=0){\\n            long arr1[]=new long[0];\\n            return arr1;\\n        }\\n            long c=num/3;\\n\\n            arr[1]=c;\\n            arr[0]=c-1;\\n            arr[2]=c+1;\\n\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4052723,
                "title": "c-2-lines-of-code-simple-to-understand",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        if(num%3 == 0) return { num/3-1, num/3, num/3+1 };\\n        return {}; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) \\n    {\\n        if(num%3 == 0) return { num/3-1, num/3, num/3+1 };\\n        return {}; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4031933,
                "title": "one-liner-easy-solution-using-mod-which-beats-99-38-89-79-of-python-users-in-timme-and-space",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n       return [(num-3)//3,(num-3)//3+1,(num-3)//3+2] if num%3==0 else []\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n       return [(num-3)//3,(num-3)//3+1,(num-3)//3+2] if num%3==0 else []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026679,
                "title": "c-easy-solution-divisibility-by-3",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0){\\n            return {};\\n        }\\n        long long x = num/3;\\n        return {x-1,x,x+1};\\n    }\\n};\\n```\\n\\n",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num%3!=0){\\n            return {};\\n        }\\n        long long x = num/3;\\n        return {x-1,x,x+1};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014623,
                "title": "easily-beat-88-with-a-super-simple-solution-ts-o-1-memory-o-1-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n\\n        if num%3==0:\\n            a=num//3\\n            return [a-1, a, a+1]\\n\\n        return []\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n\\n        if num%3==0:\\n            a=num//3\\n            return [a-1, a, a+1]\\n\\n        return []\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010190,
                "title": "1-liner-python",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, n: int) -> List[int]:\\n        return [n//3-1,n//3,n//3+1] if not n%3 else []\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, n: int) -> List[int]:\\n        return [n//3-1,n//3,n//3+1] if not n%3 else []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3993631,
                "title": "java-easy-solution-in-o-1",
                "content": "Time Complexity : O(1);\\n\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[3];\\n        if(num%3 == 0){\\n            arr[0] = num/3 - 1;\\n            arr[1] = num/3;\\n            arr[2] = num/3 + 1;\\n            return arr;\\n        }\\n        \\n        return new long[0];\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public long[] sumOfThree(long num) {\\n        long[] arr = new long[3];\\n        if(num%3 == 0){\\n            arr[0] = num/3 - 1;\\n            arr[1] = num/3;\\n            arr[2] = num/3 + 1;\\n            return arr;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 3988323,
                "title": "java-o-1-math-solution",
                "content": "# Intuition\\nYou just need to substract 3 from num. Then the result of substraction will be a * 3, where a is the first number in the sequence. If the sum of a, b, and c is equal to num, then return them, else return an empty array.\\n\\n# Complexity\\n- Time complexity: O(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long a = (num - 3) / 3, b = a + 1, c = a + 2;\\n        if (a + b + c == num) return new long[]{a, b, c};\\n        else return new long[]{};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long a = (num - 3) / 3, b = a + 1, c = a + 2;\\n        if (a + b + c == num) return new long[]{a, b, c};\\n        else return new long[]{};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984543,
                "title": "always-thinking-for-you",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n*Step 1 -> Check if the given number num is divisible by 3. If it\\'s not divisible by 3, return an empty array because it\\'s impossible to find three consecutive integers that sum to num. This step is implemented with the condition if (num % 3 != 0).*\\n*Step 2 -> If the given number num is divisible by 3, calculate the middle integer by dividing num by 3. Then, return an array containing three consecutive integers: the one before the middle integer (mid - 1), the middle integer (mid), and the one after the middle integer (mid + 1). These three integers will sum to the given num. This step is implemented with the code long mid = num / 3; return new long[]{mid - 1, mid, mid + 1};.*\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        // If the given number can\\'t divide by 3 then \\n        // there is no possiblity of consecutive integers \\n        // that sum to a given number just return empty array\\n        if(num%3 != 0) return new long[]{};\\n        // else there is a possibility divide it by 3 and\\n        // return the result along with previous and after number\\n        long mid = num/3;\\n        return new long[]{mid-1,mid,mid+1};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        // If the given number can\\'t divide by 3 then \\n        // there is no possiblity of consecutive integers \\n        // that sum to a given number just return empty array\\n        if(num%3 != 0) return new long[]{};\\n        // else there is a possibility divide it by 3 and\\n        // return the result along with previous and after number\\n        long mid = num/3;\\n        return new long[]{mid-1,mid,mid+1};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982383,
                "title": "easy-one-liner-solution",
                "content": "# Intuition\\nA number which is the sum of three consecutive number is always divisible by three.\\n\\n# Approach\\nIf a number is divisble by three, then the number obtained by dividing num by three, gives us the middle number of the three consecutive numbers sorted in ascending order.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        vector<long long> ans;\\n\\n        if(num%3==0)\\n        {\\n            long long middle=num/3;\\n            ans.push_back(middle-1);\\n            ans.push_back(middle);\\n            ans.push_back(middle+1);\\n        }\\n        \\n        return ans;\\n        \\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        vector<long long> ans;\\n\\n        if(num%3==0)\\n        {\\n            long long middle=num/3;\\n            ans.push_back(middle-1);\\n            ans.push_back(middle);\\n            ans.push_back(middle+1);\\n        }\\n        \\n        return ans;\\n        \\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3975170,
                "title": "basic-python-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if(num%3==0):\\n            l=[int(num/3)-1,int(num/3),int(num/3)+1]\\n            return l\\n        else:\\n            return []\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if(num%3==0):\\n            l=[int(num/3)-1,int(num/3),int(num/3)+1]\\n            return l\\n        else:\\n            return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3964067,
                "title": "java-easiest-solution",
                "content": "\\n# Approach\\nWe have to make 3 parts of the input number. So assume x, x-1, x+1. Its like we did in school. \\nAnd if the number isn\\'t divisible by 3 return a blank array.\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num % 3 != 0){\\n            return new long[0];\\n        }\\n        long x = num/3;\\n        long[] ans = new long[3];\\n        ans[0] = x-1;\\n        ans[1] = x;\\n        ans[2] = x+1;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        if(num % 3 != 0){\\n            return new long[0];\\n        }\\n        long x = num/3;\\n        long[] ans = new long[3];\\n        ans[0] = x-1;\\n        ans[1] = x;\\n        ans[2] = x+1;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3958938,
                "title": "beats-100-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long n=num/3;\\n        if(n-1+n+n+1==num){\\n            long arr[]=new long[3];\\n            arr[0]=n-1;\\n            arr[1]=n;\\n            arr[2]=n+1;\\n            return arr;\\n        }else{\\n            long arr[]=new long[0];\\n            return arr;\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long n=num/3;\\n        if(n-1+n+n+1==num){\\n            long arr[]=new long[3];\\n            arr[0]=n-1;\\n            arr[1]=n;\\n            arr[2]=n+1;\\n            return arr;\\n        }else{\\n            long arr[]=new long[0];\\n            return arr;\\n        }\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3948847,
                "title": "java-easiest-solution-100-fast",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[] = new long[3];\\n        long temp = num / 3;\\n        if((temp * 3 ) == num){\\n            arr[0] = temp - 1;\\n            arr[1] = temp;\\n            arr[2] = temp + 1;\\n        }\\n        else{\\n            return new long[0];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[] = new long[3];\\n        long temp = num / 3;\\n        if((temp * 3 ) == num){\\n            arr[0] = temp - 1;\\n            arr[1] = temp;\\n            arr[2] = temp + 1;\\n        }\\n        else{\\n            return new long[0];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3940951,
                "title": "easy-c-solution",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long temp=num-3;\\n        if (temp%3!=0) return {};\\n        temp=temp/3;\\n        return {temp,temp+1,temp+2};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        long long temp=num-3;\\n        if (temp%3!=0) return {};\\n        temp=temp/3;\\n        return {temp,temp+1,temp+2};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938436,
                "title": "java-100-beats-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[]=new long[3];\\n        \\n        if(num%3==0){\\n            arr[1]=num/3;\\n            arr[0]=(num/3)-1;\\n            arr[2]=(num/3)+1;\\n        }\\n        else {\\n            return new long[0];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n        long arr[]=new long[3];\\n        \\n        if(num%3==0){\\n            arr[1]=num/3;\\n            arr[0]=(num/3)-1;\\n            arr[2]=(num/3)+1;\\n        }\\n        else {\\n            return new long[0];\\n        }\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3917214,
                "title": "2-line-easy-python-solution",
                "content": "# Code\\n```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        if num%3!=0: return []\\n        else: return [(num/3)-1,(num/3),(num/3)+1]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def sumOfThree(self, num):\\n        if num%3!=0: return []\\n        else: return [(num/3)-1,(num/3),(num/3)+1]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3912331,
                "title": "c-easy-solution",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public long[] SumOfThree(long num) {\\n\\n        long [] arr;\\n        long mid = num / 3;\\n        if(mid + (mid+1) + (mid-1) == num) \\n            return arr = new long[3] {mid-1, mid, mid+1};\\n        \\n        return arr = new long[0];\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "C#",
                    "Array",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\npublic class Solution {\\n    public long[] SumOfThree(long num) {\\n\\n        long [] arr;\\n        long mid = num / 3;\\n        if(mid + (mid+1) + (mid-1) == num) \\n            return arr = new long[3] {mid-1, mid, mid+1};\\n        \\n        return arr = new long[0];\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3907163,
                "title": "math",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n       long long l1=(num-3)/3;\\n        long long l2=l1+1;\\n       long long l3=l1+2;\\n        vector<long long>v;\\n      if(l1+l2+l3==num){\\n              v.push_back(l1);\\n              v.push_back(l2);\\n              v.push_back(l3);\\n              return v;\\n              }\\n              else return v;\\n         \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Math"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n       long long l1=(num-3)/3;\\n        long long l2=l1+1;\\n       long long l3=l1+2;\\n        vector<long long>v;\\n      if(l1+l2+l3==num){\\n              v.push_back(l1);\\n              v.push_back(l2);\\n              v.push_back(l3);\\n              return v;\\n              }\\n              else return v;\\n         \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905218,
                "title": "java-begineer-friendly-beats-100",
                "content": "# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution\\n{\\n    public long[] sumOfThree(long num)\\n    {\\n        if(num%3!=0)\\n            return new long[0];\\n        long ans[] = new long[3];\\n        ans[0] = num/3-1;\\n        ans[1] = num/3;\\n        ans[2] = num/3+1;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Math",
                    "Simulation"
                ],
                "code": "```\\nclass Solution\\n{\\n    public long[] sumOfThree(long num)\\n    {\\n        if(num%3!=0)\\n            return new long[0];\\n        long ans[] = new long[3];\\n        ans[0] = num/3-1;\\n        ans[1] = num/3;\\n        ans[2] = num/3+1;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3897088,
                "title": "beats-83-30-of-users-python3-logical-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3!=0:\\n            return []\\n        else:\\n            a=num//3\\n            return [a-1,a,a+1] \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        if num%3!=0:\\n            return []\\n        else:\\n            a=num//3\\n            return [a-1,a,a+1] \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3881542,
                "title": "ez",
                "content": "# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        n = num - 3\\n        if n % 3 == 0:\\n            a = n // 3\\n            return [a, a+1, a+2]\\n        return\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        n = num - 3\\n        if n % 3 == 0:\\n            a = n // 3\\n            return [a, a+1, a+2]\\n        return\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3880915,
                "title": "beats-100-of-typescript-solutions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\nto use math\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction sumOfThree(num: number): number[] {\\n    if((num - 3) % 3 === 0){\\n        const first = (num - 3) / 3\\n        return [first, first + 1, first + 2]\\n    }\\n    return []\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction sumOfThree(num: number): number[] {\\n    if((num - 3) % 3 === 0){\\n        const first = (num - 3) / 3\\n        return [first, first + 1, first + 2]\\n    }\\n    return []\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3878477,
                "title": "2-easiest-method-o-1-and-o-n-logn-beats-100-with-explanation",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) { \\n        // Method 1 -- simple maths , if n is divisible 3 then x = n/3 ... other 2 number x-1 and x+1\\n        // if(n%3 == 0){\\n        //     long long mid = n/3;\\n        //     long long l = mid-1, r = mid + 1;\\n        //     return vector<long long> {mid-1,mid,mid+1};\\n        // }\\n\\n        // return vector<long long> {};\\n\\n\\n        // Method 2 - binary search\\n        if(n==0)return{-1,0,1};\\n        long long l = 1 , h = n, mid = 0;\\n        while(l<=h){\\n            mid = l + (h-l)/2;\\n            if(mid*3 == n){\\n                return vector<long long> {mid-1,mid,mid+1};\\n            }\\n            else if (3*mid > n){\\n                h = mid-1;\\n            }\\n            else{\\n                l = mid +1;\\n            }\\n        }\\n        return vector<long long> {};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long n) { \\n        // Method 1 -- simple maths , if n is divisible 3 then x = n/3 ... other 2 number x-1 and x+1\\n        // if(n%3 == 0){\\n        //     long long mid = n/3;\\n        //     long long l = mid-1, r = mid + 1;\\n        //     return vector<long long> {mid-1,mid,mid+1};\\n        // }\\n\\n        // return vector<long long> {};\\n\\n\\n        // Method 2 - binary search\\n        if(n==0)return{-1,0,1};\\n        long long l = 1 , h = n, mid = 0;\\n        while(l<=h){\\n            mid = l + (h-l)/2;\\n            if(mid*3 == n){\\n                return vector<long long> {mid-1,mid,mid+1};\\n            }\\n            else if (3*mid > n){\\n                h = mid-1;\\n            }\\n            else{\\n                l = mid +1;\\n            }\\n        }\\n        return vector<long long> {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3873260,
                "title": "best-c-solution-beats-100-maths",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        long long n=num/3;\\n        if(n-1+n+n+1==num)\\n            {\\n                 ans.push_back(n-1);\\n                 ans.push_back(n);\\n                 ans.push_back(n+1);\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        long long n=num/3;\\n        if(n-1+n+n+1==num)\\n            {\\n                 ans.push_back(n-1);\\n                 ans.push_back(n);\\n                 ans.push_back(n+1);\\n            }\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3865332,
                "title": "very-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        if(num%3!=0){\\n            return {};\\n        }\\n        long long n=num/3;\\n        ans.push_back(n-1);\\n        ans.push_back(n);\\n        ans.push_back(n+1);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long>ans;\\n        if(num%3!=0){\\n            return {};\\n        }\\n        long long n=num/3;\\n        ans.push_back(n-1);\\n        ans.push_back(n);\\n        ans.push_back(n+1);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3852626,
                "title": "fast-and-simple-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        ln = num // 3\\n        if (ln - 1) + ln + (ln + 1) == num:\\n            return [ln-1, ln, ln+1]\\n        return []\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        ln = num // 3\\n        if (ln - 1) + ln + (ln + 1) == num:\\n            return [ln-1, ln, ln+1]\\n        return []\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3848335,
                "title": "beats-100-solutions-java-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nto get 3 numbers which form a number we have to divide that number by 3 .... but in this question we have to return 3 consecative numbers .. so what we will do is we will -1 from 1st number and +1 in 3rd number +1 and -1 == 0 ....no effect \\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n      // return type is array so we can not count this array in extra space.\\n        long[] arr = new long[3];\\n        arr[0] = num/3;\\n        arr[1] = num/3;\\n        arr[2] = num/3;\\n        \\n        if((arr[0]+arr[1]+arr[2]) != num) {\\n           return new long[0];\\n        }\\n\\n        arr[0] -= 1;\\n        arr[2] += 1;  \\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n      // return type is array so we can not count this array in extra space.\\n        long[] arr = new long[3];\\n        arr[0] = num/3;\\n        arr[1] = num/3;\\n        arr[2] = num/3;\\n        \\n        if((arr[0]+arr[1]+arr[2]) != num) {\\n           return new long[0];\\n        }\\n\\n        arr[0] -= 1;\\n        arr[2] += 1;  \\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3844083,
                "title": "initial-js-solution",
                "content": "# Intuition\\n\\nThe problem seems to require finding three integers whose sum is equal to the given number num. The approach appears to be to divide num by 3 to get the average of the three numbers. Then, the function checks if the average is an integer or not. If it is not an integer, it returns an empty array since it is impossible to find three integers with a non-integer average. Otherwise, it proceeds to calculate three integers whose average is num/3.\\n\\n# Approach\\nDivide num by 3 to get equal, which is the average of the three numbers.\\nCheck if equal is an integer. If not, return an empty array.\\nOtherwise, construct an array output with three integers whose average is equal - 1, equal, and equal + 1, respectively.\\nReturn the output array.\\n\\n# Complexity\\n# Time complexity: \\n\\nThe time complexity of this solution is O(1) because the operations performed are constant time operations (division, addition, subtraction, etc.). \\n   \\n# Space complexity: \\nThe space complexity is O(1) because the output array always contains only three elements, regardless of the input num.\\n\\n# Code\\n```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    let equal = num/3;\\n    let output = [];\\n\\n    if(!Number.isInteger(equal)){\\n        return output\\n    }\\n\\n    output.push(equal -1);\\n    output.push(equal);\\n    output.push(equal+1);\\n    return output;\\n};\\n```\\n\\n# Improved Solution\\n```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    return (num % 3 !== 0) \\n      ? [] \\n      : [num / 3 - 1, num / 3, num / 3 + 1];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    let equal = num/3;\\n    let output = [];\\n\\n    if(!Number.isInteger(equal)){\\n        return output\\n    }\\n\\n    output.push(equal -1);\\n    output.push(equal);\\n    output.push(equal+1);\\n    return output;\\n};\\n```\n```\\n/**\\n * @param {number} num\\n * @return {number[]}\\n */\\nvar sumOfThree = function(num) {\\n    return (num % 3 !== 0) \\n      ? [] \\n      : [num / 3 - 1, num / 3, num / 3 + 1];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3837817,
                "title": "easiest-solution",
                "content": "# Intuition\\nThe three numbers will be of the type(if they exists i.e. divisible by three): a-1,a,a+1\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> ans;\\n        if(num%3==0){\\n            long long a = num/3;\\n            ans.push_back(a-1);\\n            ans.push_back(a);\\n            ans.push_back(a+1);\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        vector<long long> ans;\\n        if(num%3==0){\\n            long long a = num/3;\\n            ans.push_back(a-1);\\n            ans.push_back(a);\\n            ans.push_back(a+1);\\n        } \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3833661,
                "title": "beats-100-faster-c-easy-code",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        // long long a=-1;\\n        // long long sum=a+ (++a) + (++a);\\n        // while(a<num){\\n        //     if(sum==num) return {a-2,a-1,a};\\n        //     sum = sum - a ;\\n        //     a++;\\n        //     sum = sum + (a+2) ;\\n        // }\\n\\n        if(num%3!=0) return {};\\n        return {num/3-1,num/3,num/3+1};\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n\\n        // long long a=-1;\\n        // long long sum=a+ (++a) + (++a);\\n        // while(a<num){\\n        //     if(sum==num) return {a-2,a-1,a};\\n        //     sum = sum - a ;\\n        //     a++;\\n        //     sum = sum + (a+2) ;\\n        // }\\n\\n        if(num%3!=0) return {};\\n        return {num/3-1,num/3,num/3+1};\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3833526,
                "title": "best-space-and-time-complexity-c-cpp",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if (num % 3 == 0) {\\n        return {num/3 - 1, num/3, num/3 + 1};\\n    } else {\\n        return {};\\n    }\\n\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if (num % 3 == 0) {\\n        return {num/3 - 1, num/3, num/3 + 1};\\n    } else {\\n        return {};\\n    }\\n\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3830467,
                "title": "simple-math-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        a=[]\\n        if num%3==0:\\n            a=[num//3 -1,num//3,num//3 +1]\\n        return a\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def sumOfThree(self, num: int) -> List[int]:\\n        a=[]\\n        if num%3==0:\\n            a=[num//3 -1,num//3,num//3 +1]\\n        return a\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3812653,
                "title": "easy-c-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num==0)return{-1,0,1};\\n        long long low=0,high=num-1;\\n        while(low<=high){\\n            long long mid=low+(high-low)/2;\\n            if(3*mid==num)return {mid-1,mid,mid+1};\\n            else if(3*mid>num)high=mid-1;\\n            else low=mid+1;\\n        }\\n        return {};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Binary Search"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<long long> sumOfThree(long long num) {\\n        if(num==0)return{-1,0,1};\\n        long long low=0,high=num-1;\\n        while(low<=high){\\n            long long mid=low+(high-low)/2;\\n            if(3*mid==num)return {mid-1,mid,mid+1};\\n            else if(3*mid>num)high=mid-1;\\n            else low=mid+1;\\n        }\\n        return {};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3808016,
                "title": "java-if-statement-sol",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         long[] ans = {};\\n    long start = num / 3 -1;\\n    // System.out.println(start);\\n    if ((start + start + 1 + start + 2) == num) {\\n      ans = new long[3];\\n      ans[0] = start;\\n      ans[1] = start+1;\\n      ans[2] = start+2;\\n    }\\n\\n    return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public long[] sumOfThree(long num) {\\n         long[] ans = {};\\n    long start = num / 3 -1;\\n    // System.out.println(start);\\n    if ((start + start + 1 + start + 2) == num) {\\n      ans = new long[3];\\n      ans[0] = start;\\n      ans[1] = start+1;\\n      ans[2] = start+2;\\n    }\\n\\n    return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1576415,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1636880,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1707680,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1832967,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1959136,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1920960,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2011133,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1972694,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2068732,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2068672,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1576415,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1636880,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1707680,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1832967,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1959136,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1920960,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2011133,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 1972694,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2068732,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            },
            {
                "id": 2068672,
                "content": [
                    {
                        "username": "lagaHuaHuBro",
                        "content": "this question is too simple to be medium tagged, i think so."
                    },
                    {
                        "username": "jribbink",
                        "content": "Why is this medium?"
                    },
                    {
                        "username": "kushalnagwanshicloud",
                        "content": "solved under a minute , this shouldn\\'t be medium !!"
                    },
                    {
                        "username": "Deep_shah",
                        "content": "This problem does not have any kind of complexity that can make it a medium level problem, this is more of a easy level problem "
                    },
                    {
                        "username": "geekyshark",
                        "content": "Easiest medium on leetcode hands down"
                    },
                    {
                        "username": "ry4442015",
                        "content": "Should be easy"
                    },
                    {
                        "username": "Kartikey_Bartwal",
                        "content": "This discussion section demotivated me.\nEdit: I deserved the demotivation. The question was a simple linear equation in 1 variable"
                    },
                    {
                        "username": "ianjulo",
                        "content": "lol, i feel you"
                    },
                    {
                        "username": "SoNiceCoder",
                        "content": "fr ?  is this medium..?"
                    },
                    {
                        "username": "reassurance",
                        "content": "In my opinion it should be marked as **EASY** "
                    },
                    {
                        "username": "Inuyasha01",
                        "content": "Should be tagged as easy"
                    }
                ]
            }
        ]
    }
]