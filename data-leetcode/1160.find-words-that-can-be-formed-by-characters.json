[
    {
        "title": "Number of Lines To Write String",
        "question_content": "You are given a string s of lowercase English letters and an array widths denoting how many pixels wide each lowercase English letter is. Specifically, widths[0] is the width of 'a', widths[1] is the width of 'b', and so on.\nYou are trying to write s across several lines, where each line is no longer than 100 pixels. Starting at the beginning of s, write as many letters on the first line such that the total width does not exceed 100 pixels. Then, from where you stopped in s, continue writing as many letters as you can on the second line. Continue this process until you have written all of s.\nReturn an array result of length 2 where:\n\n\tresult[0] is the total number of lines.\n\tresult[1] is the width of the last line in pixels.\n\n&nbsp;\nExample 1:\n\nInput: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\nOutput: [3,60]\nExplanation: You can write s as follows:\nabcdefghij  // 100 pixels wide\nklmnopqrst  // 100 pixels wide\nuvwxyz      // 60 pixels wide\nThere are a total of 3 lines, and the last line is 60 pixels wide.\nExample 2:\n\nInput: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\nOutput: [2,4]\nExplanation: You can write s as follows:\nbbbcccdddaa  // 98 pixels wide\na            // 4 pixels wide\nThere are a total of 2 lines, and the last line is 4 pixels wide.\n&nbsp;\nConstraints:\n\n\twidths.length == 26\n\t2 <= widths[i] <= 10\n\t1 <= s.length <= 1000\n\ts contains only lowercase English letters.",
        "solutions": [
            {
                "id": 120666,
                "title": "easy-solution-6-lines-c-java-python",
                "content": "Very self-explaining codes.\\n\\nNote from description:\\n* The length of S will be in the range ```[1, 1000]```.\\n* S will only contain lowercase letters.\\n* widths is an array of length 26.\\n\\nC++\\n```\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int res = 1, cur = 0;\\n        for (char c : S) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return {res, cur};\\n    }\\n```\\nJava:\\n```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int res = 1, cur = 0;\\n        for (char c : S.toCharArray()) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return new int[] {res, cur};\\n    }\\n```\\nPython\\n```\\n    def numberOfcurs(self, widths, S):\\n        res, cur = 1, 0\\n        for i in S:\\n            width = widths[ord(i) - ord(\\'a\\')]\\n            res += 1 if cur + width > 100 else 0\\n            cur = width if cur + width > 100 else cur + width\\n        return [res, cur]\\n\\t",
                "solutionTags": [],
                "code": "```[1, 1000]```\n```\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int res = 1, cur = 0;\\n        for (char c : S) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return {res, cur};\\n    }\\n```\n```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int res = 1, cur = 0;\\n        for (char c : S.toCharArray()) {\\n            int width = widths[c - \\'a\\'];\\n            res = cur + width > 100 ? res + 1 : res;\\n            cur = cur + width > 100 ? width : cur + width;\\n        }\\n        return new int[] {res, cur};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120695,
                "title": "regex",
                "content": "```\\ndef number_of_lines(widths, s)\\n  a = s.gsub(/./) { \"a#{\\'.\\' * (widths[$&.ord - 97] - 2)}b\" }.scan(/a.{,98}b/)\\n  [a.size, a[-1].size]\\nend\\n```\\nI replace for example a letter of width `6` by the string `a....b`. Then use regex `/a.{,98}b/` to create optimal lines.",
                "solutionTags": [],
                "code": "```\\ndef number_of_lines(widths, s)\\n  a = s.gsub(/./) { \"a#{\\'.\\' * (widths[$&.ord - 97] - 2)}b\" }.scan(/a.{,98}b/)\\n  [a.size, a[-1].size]\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2595859,
                "title": "java-beats-100-simple",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=1;\\n        int sum=0;\\n        for(char i:s.toCharArray()){\\n            if((sum+widths[i-\\'a\\'])<=100)sum+=widths[i-\\'a\\'];\\n            else {\\n                sum=widths[i-\\'a\\'];\\n                count++;\\n            }\\n        }\\n        return new int[]{count,sum};\\n    }\\n}\\nPlease upvote if you like the solution \\uD83D\\uDE4F \\n",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=1;\\n        int sum=0;\\n        for(char i:s.toCharArray()){\\n            if((sum+widths[i-\\'a\\'])<=100)sum+=widths[i-\\'a\\'];\\n            else {\\n                sum=widths[i-\\'a\\'];\\n                count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 120668,
                "title": "c-straightforward",
                "content": "    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines = 1; vector<int> res;\\n        int occupied_width = 0, len = S.length();\\n        \\n        for(int i = 0; i < len; i++) {\\n            if((occupied_width + widths[S[i] - \\'a\\']) > 100) {\\n                lines++;\\n                occupied_width = 0;\\n            }\\n            occupied_width += widths[S[i] - \\'a\\'];\\n        }\\n        \\n        res.push_back(lines);\\n        res.push_back(occupied_width);\\n        \\n        return res;\\n    }",
                "solutionTags": [],
                "code": "    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines = 1; vector<int> res;\\n        int occupied_width = 0, len = S.length();\\n        \\n        for(int i = 0; i < len; i++) {\\n            if((occupied_width + widths[S[i] - \\'a\\']) > 100) {\\n                lines++;\\n                occupied_width = 0;\\n            }\\n            occupied_width += widths[S[i] - \\'a\\'];\\n        }\\n        \\n        res.push_back(lines);\\n        res.push_back(occupied_width);\\n        \\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 2452066,
                "title": "c-for-beginners",
                "content": "We simply keep counting the current sum of pixels, and as soon as it exceeds 100, increment the lines required by one.\\n\\n\\tvector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=1, currSum=0;\\n        \\n        for (int i=0;i<s.size();i++) {\\n            currSum += widths[s[i]-\\'a\\'];\\n            if(currSum > 100) {\\n                currSum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        \\n        return {cnt,currSum};\\n    }",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "We simply keep counting the current sum of pixels, and as soon as it exceeds 100, increment the lines required by one.\\n\\n\\tvector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=1, currSum=0;\\n        \\n        for (int i=0;i<s.size();i++) {\\n            currSum += widths[s[i]-\\'a\\'];\\n            if(currSum > 100) {\\n                currSum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        \\n        return {cnt,currSum};\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1434696,
                "title": "c-easy-to-understand-100-faster",
                "content": "**Please upvote to motivate me in my quest of documenting all leetcode solutions(to help the community). HAPPY CODING:)\\nAny suggestions and improvements are always welcome**\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int count=1;\\n        if(s.length()==0)\\n        return {0,0};    \\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum+=widths[s[i]-\\'a\\'];\\n            if(sum>100)\\n            {\\n                sum=widths[s[i]-\\'a\\'];\\n                count++;\\n            }   \\n        }   \\n        vector<int> ans;\\n        ans.push_back(count);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int count=1;\\n        if(s.length()==0)\\n        return {0,0};    \\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum+=widths[s[i]-\\'a\\'];\\n            if(sum>100)\\n            {\\n                sum=widths[s[i]-\\'a\\'];\\n                count++;\\n            }   \\n        }   \\n        vector<int> ans;\\n        ans.push_back(count);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 508209,
                "title": "javascript-simple-solution",
                "content": "```javascript\\n/**\\n * @param {number[]} widths\\n * @param {string} S\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, S) {\\n  let lines = 1;\\n  let last = 0;\\n  const base = \\'a\\'.charCodeAt(0);\\n  for (let i = 0; i < S.length; i++) {\\n    const width = widths[S.charCodeAt(i) - base];\\n    last += width;\\n    if (last > 100) {\\n      lines++;\\n      last = width;\\n    }\\n  }\\n  return [lines, last];\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {number[]} widths\\n * @param {string} S\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, S) {\\n  let lines = 1;\\n  let last = 0;\\n  const base = \\'a\\'.charCodeAt(0);\\n  for (let i = 0; i < S.length; i++) {\\n    const width = widths[S.charCodeAt(i) - base];\\n    last += width;\\n    if (last > 100) {\\n      lines++;\\n      last = width;\\n    }\\n  }\\n  return [lines, last];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 498470,
                "title": "python-3-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        abc = \\'abcdefghijklmnopqrstuvwxyz\\'\\n        abc_dict = {c:i for i, c in enumerate(abc)}\\n        n = 0\\n        lines = 1\\n\\n        for c in S:\\n            n += widths[abc_dict[c]]\\n            if n == 100:\\n                lines += 1\\n                n = 0\\n                continue\\n            elif n > 100:\\n                lines += 1\\n                n = widths[abc_dict[c]]\\n                \\n        return(lines, n)\\n\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        abc = \\'abcdefghijklmnopqrstuvwxyz\\'\\n        abc_dict = {c:i for i, c in enumerate(abc)}\\n        n = 0\\n        lines = 1\\n\\n        for c in S:\\n            n += widths[abc_dict[c]]\\n            if n == 100:\\n                lines += 1\\n                n = 0\\n                continue\\n            elif n > 100:\\n                lines += 1\\n                n = widths[abc_dict[c]]\\n                \\n        return(lines, n)\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3235298,
                "title": "java-bruteforce-approach",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2854003,
                "title": "just-1-loop-java-98-faster",
                "content": "```Don\\'t forget to upvote if you find it useful```\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int res1=0,res0=0;\\n        int length = s.length();\\n        for(int i=0;i<length;i++){\\n            res1+=widths[s.charAt(i)-\\'a\\'];\\n            if(res1>100){\\n                res0++;\\n                res1=0;\\n                i--;\\n            }\\n        }\\n        return new int[]{res0+1,res1};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```Don\\'t forget to upvote if you find it useful```\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int res1=0,res0=0;\\n        int length = s.length();\\n        for(int i=0;i<length;i++){\\n            res1+=widths[s.charAt(i)-\\'a\\'];\\n            if(res1>100){\\n                res0++;\\n                res1=0;\\n                i--;\\n            }\\n        }\\n        return new int[]{res0+1,res1};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2300227,
                "title": "python-super-easy-solution-faster-than-99-submission",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        a_dict = {l:w for l,w in zip(\"abcdefghijklmnopqrstuvwxyz\",widths)}\\n        r_count, rp_count = 1, 0\\n        for i in range(len(s)):\\n            rp_count += a_dict[s[i]]\\n            if rp_count > 100:\\n                rp_count = a_dict[s[i]]\\n                r_count += 1\\n        return [r_count, rp_count]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        a_dict = {l:w for l,w in zip(\"abcdefghijklmnopqrstuvwxyz\",widths)}\\n        r_count, rp_count = 1, 0\\n        for i in range(len(s)):\\n            rp_count += a_dict[s[i]]\\n            if rp_count > 100:\\n                rp_count = a_dict[s[i]]\\n                r_count += 1\\n        return [r_count, rp_count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2033554,
                "title": "python-understandable-solution-unlike-description-with-explanation",
                "content": "**Explanation**\\nWe loop through each character in `s`, and each time we see what width it is. If the final width is above 100, then we make a new line. We return the number of lines and the final width.\\n\\n```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        lines = 1\\n        width = 0\\n        for char in s:\\n            w = widths[ord(char) - ord(\\'a\\')]\\n            width += w\\n            if width > 100:\\n                lines += 1\\n                width = w\\n        return [lines, width]\\n```\\n\\n**If you liked this, please upvote to support me!**",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        lines = 1\\n        width = 0\\n        for char in s:\\n            w = widths[ord(char) - ord(\\'a\\')]\\n            width += w\\n            if width > 100:\\n                lines += 1\\n                width = w\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1349936,
                "title": "very-easy-java-solution-with-comment-runtime-0-ms-faster-than-100-00",
                "content": "```\\nclass Solution \\n{\\n    public int[] numberOfLines(int[] widths, String s)\\n    {\\n        char chrs[]=s.toCharArray();\\n        int len=chrs.length;\\n        \\n        int line=1, size=0;\\n        for(int i=0; i<len; i++)\\n        {\\n            char tempCh=chrs[i];\\n            //agar mera current size k saath aur ek char add karne se size 100pixel k equal or 100 se chota raha..\\n            if((size+widths[tempCh%97])<=100)\\n            {\\n                //toh karo add...\\n                size+=widths[tempCh%97];\\n            }\\n            else\\n            {\\n                //nahi toh line no. badao aur agli line pe jao jiska size us naya wala charracter ke size se shuru hoga....\\n                line++;\\n                size=widths[tempCh%97];\\n            }\\n        }\\n        \\n        int res[]={line, size};\\n        return res;\\n    }\\n}\\n//By Arindam Ghosh\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution \\n{\\n    public int[] numberOfLines(int[] widths, String s)\\n    {\\n        char chrs[]=s.toCharArray();\\n        int len=chrs.length;\\n        \\n        int line=1, size=0;\\n        for(int i=0; i<len; i++)\\n        {\\n            char tempCh=chrs[i];\\n            //agar mera current size k saath aur ek char add karne se size 100pixel k equal or 100 se chota raha..\\n            if((size+widths[tempCh%97])<=100)\\n            {\\n                //toh karo add...\\n                size+=widths[tempCh%97];\\n            }\\n            else\\n            {\\n                //nahi toh line no. badao aur agli line pe jao jiska size us naya wala charracter ke size se shuru hoga....\\n                line++;\\n                size=widths[tempCh%97];\\n            }\\n        }\\n        \\n        int res[]={line, size};\\n        return res;\\n    }\\n}\\n//By Arindam Ghosh\\n```",
                "codeTag": "Java"
            },
            {
                "id": 923434,
                "title": "easy-if-else-solution-o-n",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        lines = width = 0\\n        \\n        for i in S:\\n            x = widths[ord(i) - ord(\\'a\\')]\\n            if width + x == 100:\\n                lines += 1\\n                width = 0\\n            elif width + x > 100:\\n                lines += 1\\n                width = x\\n            else:\\n                width += x\\n        if width != 0:\\n            lines += 1\\n        return [lines, width]\\n```\\nFor more such questions:https://github.com/vanigupta20024/Programming-Challenges",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        lines = width = 0\\n        \\n        for i in S:\\n            x = widths[ord(i) - ord(\\'a\\')]\\n            if width + x == 100:\\n                lines += 1\\n                width = 0\\n            elif width + x > 100:\\n                lines += 1\\n                width = x\\n            else:\\n                width += x\\n        if width != 0:\\n            lines += 1\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 646530,
                "title": "two-method-easy-to-read-20ms-python3-beats-99",
                "content": "dict\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        dic = {}\\n        for i,num in enumerate(alpha):\\n        \\tdic[num] = widths[i]\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += dic[i]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = dic[i]\\n        return [line, count]\\n```\\nASCII\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += widths[ord(str(i))-97]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = widths[ord(str(i))-97]\\n        return [line, count]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        dic = {}\\n        for i,num in enumerate(alpha):\\n        \\tdic[num] = widths[i]\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += dic[i]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = dic[i]\\n        return [line, count]\\n```\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        line = 1\\n        count = 0\\n        for i in S:\\n        \\tcount += widths[ord(str(i))-97]\\n        \\tif count > 100:\\n        \\t\\tline += 1\\n        \\t\\tcount = widths[ord(str(i))-97]\\n        return [line, count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 515186,
                "title": "806-javascript-one-line-solution",
                "content": "This is more performant than I expected.\\n\\n> Runtime: **52 ms**, faster than *90.63%* of JavaScript online submissions\\n> Memory Usage: **35.6 MB**, less than *100.00%* of JavaScript online submissions\\n\\n```javascript\\nconst numberOfLines = (widths, s) =>\\n  [...s]\\n    .map(c => widths[c.charCodeAt(0) - 97])\\n    .reduce(\\n      (acc, curr) => [\\n        acc[0] + (100 < acc[1] + curr ? 1 : 0),\\n        100 < acc[1] + curr ? curr : acc[1] + curr,\\n      ],\\n      [s.length ? 1 : 0, 0],\\n    );\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\nconst numberOfLines = (widths, s) =>\\n  [...s]\\n    .map(c => widths[c.charCodeAt(0) - 97])\\n    .reduce(\\n      (acc, curr) => [\\n        acc[0] + (100 < acc[1] + curr ? 1 : 0),\\n        100 < acc[1] + curr ? curr : acc[1] + curr,\\n      ],\\n      [s.length ? 1 : 0, 0],\\n    );\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098905,
                "title": "easy-java-solution-beginners-friendly",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        if(s.length()==0)\\n        return new int[]{0,0};\\n        int[] ans=new int[]{1,0};\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int temp=widths[s.charAt(i)-\\'a\\'];\\n            if(temp+sum<=100)\\n            {\\n                sum+=temp;\\n            }\\n            else \\n            {\\n                ans[0]++;\\n                sum=temp;\\n            }\\n        }\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        if(s.length()==0)\\n        return new int[]{0,0};\\n        int[] ans=new int[]{1,0};\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int temp=widths[s.charAt(i)-\\'a\\'];\\n            if(temp+sum<=100)\\n            {\\n                sum+=temp;\\n            }\\n            else \\n            {\\n                ans[0]++;\\n                sum=temp;\\n            }\\n        }\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4026085,
                "title": "best-java-solution-beats-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] arr = new int[2];\\n        int x = 1;\\n        int sum = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + sum > 100){\\n                x++;\\n                sum = 0;\\n            }\\n            sum += char_width;            \\n        }\\n        arr[0] = x;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] arr = new int[2];\\n        int x = 1;\\n        int sum = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + sum > 100){\\n                x++;\\n                sum = 0;\\n            }\\n            sum += char_width;            \\n        }\\n        arr[0] = x;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2888333,
                "title": "c-simple-and-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l=0,r=1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(l+widths[(char)s[i]-97] > 100)\\n            {\\n                r++;\\n                l=widths[(char)s[i]-97];\\n            }\\n            else\\n                l+=widths[(char)s[i]-97];\\n        }\\n        return {r,l};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l=0,r=1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(l+widths[(char)s[i]-97] > 100)\\n            {\\n                r++;\\n                l=widths[(char)s[i]-97];\\n            }\\n            else\\n                l+=widths[(char)s[i]-97];\\n        }\\n        return {r,l};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2738578,
                "title": "easy-java-solution-100-faster",
                "content": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum =0;\\n        int count =1;\\n        for(int i=0; i<s.length(); i++){\\n           char ch = s.charAt(i);\\n           int p = ch - \\'a\\';\\n           if(widths[p] + sum >100){\\n               count++;\\n               sum = widths[p];\\n           }\\n            else{\\n                sum = sum + widths[p];\\n            }\\n       } \\n        int [] arr = {count, sum};\\n        return arr;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum =0;\\n        int count =1;\\n        for(int i=0; i<s.length(); i++){\\n           char ch = s.charAt(i);\\n           int p = ch - \\'a\\';\\n           if(widths[p] + sum >100){\\n               count++;\\n               sum = widths[p];\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 1988033,
                "title": "easy-o-n-js-solution",
                "content": "\\tvar numberOfLines = function(widths, s) {\\n\\t\\tlet lines = 1;\\n\\t\\tlet sum = 0;\\n\\n\\t\\tfor(let i=0; i<s.length; i++){\\n\\t\\t\\tlet num = s.charCodeAt(i) - 97;\\n\\t\\t\\tif(sum + widths[num] <= 100){\\n\\t\\t\\t\\tsum += widths[num];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlines++;\\n\\t\\t\\t\\tsum = widths[num];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [lines, sum];\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "\\tvar numberOfLines = function(widths, s) {\\n\\t\\tlet lines = 1;\\n\\t\\tlet sum = 0;\\n\\n\\t\\tfor(let i=0; i<s.length; i++){\\n\\t\\t\\tlet num = s.charCodeAt(i) - 97;\\n\\t\\t\\tif(sum + widths[num] <= 100){\\n\\t\\t\\t\\tsum += widths[num];\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlines++;\\n\\t\\t\\t\\tsum = widths[num];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn [lines, sum];\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1965820,
                "title": "java-beats-100-00-memory-speed-0ms-april-2022",
                "content": "\\n\\tclass Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n\\t}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1890946,
                "title": "number-of-lines-to-write-string-solution-java",
                "content": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        final int MAX_WIDTH = 100;\\n        int linesCount = 1, curWidth = 0;\\n        int length = S.length();\\n        for (int i = 0; i < length; i++) {\\n            char c = S.charAt(i);\\n            int width = widths[c - \\'a\\'];\\n            if (curWidth + width <= MAX_WIDTH)\\n                curWidth += width;\\n            else {\\n                linesCount++;\\n                curWidth = width;\\n            }\\n        }\\n        return new int[]{linesCount, curWidth};\\n    }\\n}",
                "solutionTags": [
                    "Array",
                    "String"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        final int MAX_WIDTH = 100;\\n        int linesCount = 1, curWidth = 0;\\n        int length = S.length();\\n        for (int i = 0; i < length; i++) {\\n            char c = S.charAt(i);\\n            int width = widths[c - \\'a\\'];\\n            if (curWidth + width <= MAX_WIDTH)\\n                curWidth += width;\\n            else {\\n                linesCount++;\\n                curWidth = width;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1170893,
                "title": "python3-97-faster-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count = ans =  wi = 0\\n        s = list(s)\\n        while s:\\n            val = ord(s[0]) - 97\\n            \\n            if(widths[val] + wi > 100):\\n                wi = 0\\n                count += 1\\n            \\n            wi += widths[val]\\n            \\n            s.pop(0)\\n        return([count + 1 , wi])\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count = ans =  wi = 0\\n        s = list(s)\\n        while s:\\n            val = ord(s[0]) - 97\\n            \\n            if(widths[val] + wi > 100):\\n                wi = 0\\n                count += 1\\n            \\n            wi += widths[val]\\n            \\n            s.pop(0)\\n        return([count + 1 , wi])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1100059,
                "title": "java-100-faster",
                "content": "```\\npublic int[] numberOfLines(int[] widths, String s) {\\n        int width=0;\\n        int noOflines=1;\\n        for(int i=0;i<s.length();i++){\\n            if(width+widths[s.charAt(i)-97]<=100){\\n                width+=widths[s.charAt(i)-97];\\n            }else{\\n                width=widths[s.charAt(i)-97];\\n                noOflines++;\\n            }\\n        }\\n        return new int[]{noOflines,width};\\n    }\\n```\\n\\nPlease upvote if you like the solution :)",
                "solutionTags": [],
                "code": "```\\npublic int[] numberOfLines(int[] widths, String s) {\\n        int width=0;\\n        int noOflines=1;\\n        for(int i=0;i<s.length();i++){\\n            if(width+widths[s.charAt(i)-97]<=100){\\n                width+=widths[s.charAt(i)-97];\\n            }else{\\n                width=widths[s.charAt(i)-97];\\n                noOflines++;\\n            }\\n        }\\n        return new int[]{noOflines,width};\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 135366,
                "title": "my-python-solutuin-beats-99-61",
                "content": "a=0\\n        b=1\\n        for c in S:\\n            if a <=100-width[ord(c)-97]:\\n                a+=width[ord(c)-97]\\n            else:\\n                b+=1\\n                a=0\\n                a+=width[ord(c)-97]\\n        return [b,a]",
                "solutionTags": [],
                "code": "a=0\\n        b=1\\n        for c in S:\\n            if a <=100-width[ord(c)-97]:\\n                a+=width[ord(c)-97]\\n            else:\\n                b+=1\\n                a=0\\n                a+=width[ord(c)-97]\\n        return [b,a]",
                "codeTag": "Unknown"
            },
            {
                "id": 120763,
                "title": "c-minimalism",
                "content": "If the letter cannot fit into the current line, we round the total width to the next 100. Now, we can divide the total width by 100 to see how many lines we have and use modulo to determine the width of the current (last) line. \\n```\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c-\\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + 1, w % 100 };\\n}\\n```\\n**Update**\\nThere is a missing test case when the last line fills exactly 100 characters, and the following code addresses that.\\n```CPP\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c - \\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + (w % 100 > 0), w % 100 > 0 ? w % 100 : w ? 100 : 0 };\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c-\\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + 1, w % 100 };\\n}\\n```\n```CPP\\nvector<int> numberOfLines(vector<int>& ws, string s, int w = 0) {\\n  for (int c : s) \\n      w = ws[c - \\'a\\'] + (w % 100 + ws[c-\\'a\\'] > 100 ? w + 100 - w % 100 : w);\\n  return { w / 100 + (w % 100 > 0), w % 100 > 0 ? w % 100 : w ? 100 : 0 };\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3733389,
                "title": "easy-solution-100-faster-with-explanation",
                "content": "# Approach\\nThe given solution tackles the problem of determining the number of lines needed to write a given string `s` using an array of character widths `widths`.\\n\\nHere\\'s an overview of the approach:\\n\\n1. Create an integer array `res` to store the resulting number of lines and the width of the last line.\\n2. Initialize `lines` and `width` variables to keep track of the current line count and width.\\n3. Iterate through each character, `c`, in the string `s` using a `foreach` loop.\\n4. For each character, calculate its width by accessing the corresponding value in the `widths` array using `widths[c - \\'a\\']`.\\n5. Check if adding the character\\'s width to the current line width exceeds the limit of 100 pixels:\\n   - If it does, increment the line count (`lines++`) and set `width` to the character\\'s width since it will be the width of the next line.\\n   - If it doesn\\'t, add the character\\'s width to the current line width (`width += charWidth`).\\n6. After processing all the characters, assign the line count and the width of the last line to `res[0]` and `res[1]`, respectively.\\n7. Return the `res` array as the result.\\n\\nThis approach iterates through each character of the string `s` and calculates the line count and width of the last line based on the character widths. It avoids the need for a separate map or lookup table, as it directly accesses the `widths` array using the character\\'s ASCII value. The time complexity of this solution is O(n), where n is the length of the string `s`. The space complexity is O(1) since the `res` array has a fixed size.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n\\n        int lines = 1;\\n        int width = 0;\\n\\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            if (width + charWidth > 100) {\\n                lines++;\\n                width = charWidth;\\n            } else {\\n                width += charWidth;\\n            }\\n        }\\n\\n        res[0] = lines;\\n        res[1] = width;\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "C#",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n\\n        int lines = 1;\\n        int width = 0;\\n\\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            if (width + charWidth > 100) {\\n                lines++;\\n                width = charWidth;\\n            } else {\\n                width += charWidth;\\n            }\\n        }\\n\\n        res[0] = lines;\\n        res[1] = width;\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3471335,
                "title": "solution",
                "content": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int lines = 1, width = 0;\\n        for(char c : s) {\\n            int w = widths[c-\\'a\\'];\\n            width += w;\\n            if(width > 100) {\\n                ++lines;\\n                width = w;\\n            }\\n        }\\n        return {lines, width};\\n    }\\n};\\n```\\n\\n```Python3 []\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            cur_width = widths[ord(char)-97]\\n            if width + cur_width <= 100:\\n                width += cur_width\\n            else:\\n                lines += 1\\n                width = cur_width\\n        return [lines, width]\\n```\\n\\n```Java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python3"
                ],
                "code": "```C++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int lines = 1, width = 0;\\n        for(char c : s) {\\n            int w = widths[c-\\'a\\'];\\n            width += w;\\n            if(width > 100) {\\n                ++lines;\\n                width = w;\\n            }\\n        }\\n        return {lines, width};\\n    }\\n};\\n```\n```Python3 []\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            cur_width = widths[ord(char)-97]\\n            if width + cur_width <= 100:\\n                width += cur_width\\n            else:\\n                lines += 1\\n                width = cur_width\\n        return [lines, width]\\n```\n```Java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3352377,
                "title": "number-of-lines-to-write-string-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines=1, width_sum=0;\\n        vector<int> arr;\\n        while(i<s.length())\\n        {\\n            j = s[i]-97;\\n            if((width_sum+widths[j])<=100)\\n            {\\n                width_sum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                width_sum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(width_sum);\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines=1, width_sum=0;\\n        vector<int> arr;\\n        while(i<s.length())\\n        {\\n            j = s[i]-97;\\n            if((width_sum+widths[j])<=100)\\n            {\\n                width_sum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                width_sum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(width_sum);\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3122306,
                "title": "java-solution-with-without-hash-maps-easy-to-understand",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        // Using hashmap :-\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\\n//first we stored all the values of alphabets in hashmap;\\n        int line = 1 ; int sum = 0 ;\\n//integers that we will be using;\\n        for(int i = 0 ; i < str.length() ; i++){\\n            hm.put(str.charAt(i),widths[i]);\\n        }\\n//then we iterated in the string s to check if the sum is\\n//greater than 100 pixels we add a new line;\\n        for(int i = 0 ; i < s.length() ; i++){\\n            char t = s.charAt(i);\\n            if(sum+hm.get(t)<=100){\\n                sum=sum+hm.get(t);\\n            }else{\\n                line++;\\n                sum=hm.get(t);\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum};\\n        \\n        //without hashmap using arrays:-\\n        int line = 1 ; int sum = 0 ;\\n//here we have done the same thing but without using the hashmap\\n//here we will be using the given array widths to add in the sum ;\\n        for(int i = 0 ; i < s.length() ;i++){\\n            int temp = widths[s.charAt(i) - \\'a\\'];\\n            sum = sum + temp ;\\n            if(sum > 100){\\n                line++;\\n                sum = temp;\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum} ;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        // Using hashmap :-\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        String str = \"abcdefghijklmnopqrstuvwxyz\";\\n//first we stored all the values of alphabets in hashmap;\\n        int line = 1 ; int sum = 0 ;\\n//integers that we will be using;\\n        for(int i = 0 ; i < str.length() ; i++){\\n            hm.put(str.charAt(i),widths[i]);\\n        }\\n//then we iterated in the string s to check if the sum is\\n//greater than 100 pixels we add a new line;\\n        for(int i = 0 ; i < s.length() ; i++){\\n            char t = s.charAt(i);\\n            if(sum+hm.get(t)<=100){\\n                sum=sum+hm.get(t);\\n            }else{\\n                line++;\\n                sum=hm.get(t);\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum};\\n        \\n        //without hashmap using arrays:-\\n        int line = 1 ; int sum = 0 ;\\n//here we have done the same thing but without using the hashmap\\n//here we will be using the given array widths to add in the sum ;\\n        for(int i = 0 ; i < s.length() ;i++){\\n            int temp = widths[s.charAt(i) - \\'a\\'];\\n            sum = sum + temp ;\\n            if(sum > 100){\\n                line++;\\n                sum = temp;\\n            }\\n        }\\n//then we return the line and pixels in the last line ;\\n        return new int[]{line,sum} ;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3078551,
                "title": "beats-99-76-solutions-easy-to-understand-o-n-tc-python-code-by-bolt-coding",
                "content": "# Explanation\\nAt first we are initializing pix to 0, min no of lines which will be there is always 1, i for keeping count of index, and a which is ascii of \\'a\\'.\\nWe are then iterating through the s - list of words. In case pix size is <= 100 we increment the pix, incase pix > 100 we increment the line number and initialize the pix back to 0. So now when the while loop ends but pix <= 100 it will print the pix of last line. This way we can print line number and pix in last line.\\n\\n# Complexity\\n- Time complexity: O(n) as we are using a single while loop to iterate over the list\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) as we are using variables to keep track on number of lines and pixel size\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, width: List[int], s: str) -> List[int]:\\n        pix = 0\\n        line = 1\\n        i = 0\\n        a = 97\\n        while i<len(s):\\n            if pix<=100:\\n                pix+=width[ord(s[i])-a]\\n                i+=1\\n                if pix>100:\\n                    line+=1\\n                    pix=0\\n                    i-=1\\n        return [line, pix]\\n\\n\\n\\n```\\n# Learning\\nTo understand problems in simpler ways, need help with projects, want to learn coding from scratch, work on resume level projects, learn data science ...................\\n\\nSubscribe to Bolt Coding Channel - https://www.youtube.com/@boltcoding",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, width: List[int], s: str) -> List[int]:\\n        pix = 0\\n        line = 1\\n        i = 0\\n        a = 97\\n        while i<len(s):\\n            if pix<=100:\\n                pix+=width[ord(s[i])-a]\\n                i+=1\\n                if pix>100:\\n                    line+=1\\n                    pix=0\\n                    i-=1\\n        return [line, pix]\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2890787,
                "title": "easy-c-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n     vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int c=0,a=1;\\n        for(int i=0;i<s.length();i++){\\n            int ch=s[i]-\\'a\\';\\n            if((c+widths[ch])>100){\\n                c=widths[ch];\\n                a++; \\n            }\\n            else\\n            c+=widths[ch];\\n        }\\n        return {a,c};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n     vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int c=0,a=1;\\n        for(int i=0;i<s.length();i++){\\n            int ch=s[i]-\\'a\\';\\n            if((c+widths[ch])>100){\\n                c=widths[ch];\\n                a++; \\n            }\\n            else\\n            c+=widths[ch];\\n        }\\n        return {a,c};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2776504,
                "title": "java-average-o-n-solution",
                "content": "# Complexity\\n- Time complexity: O(N)\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2646278,
                "title": "implementation-in-java-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int []ans=new int[2];\\n        int m=0,t;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            t=(int)s.charAt(i)-97;\\n          \\n            m+=widths[t];\\n            if(m>100)\\n            {\\n                ans[0]++;\\n                m=widths[t];\\n            }\\n        }\\n        ans[1]=m;\\n        ans[0]++;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int []ans=new int[2];\\n        int m=0,t;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            t=(int)s.charAt(i)-97;\\n          \\n            m+=widths[t];\\n            if(m>100)\\n            {\\n                ans[0]++;\\n                m=widths[t];\\n            }\\n        }\\n        ans[1]=m;\\n        ans[0]++;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2548897,
                "title": "js-very-easy-solution-with-o-n-100",
                "content": "```\\nvar numberOfLines = function(widths, s) {\\n    let currentSumPixels = 0;\\n    const output = [1, 0];\\n    for (let i = 0; i < s.length; i++) {\\n        const indexOfChar = s.charCodeAt(i) - 97;\\n        currentSumPixels += widths[indexOfChar];\\n        if (currentSumPixels > 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n            i--;\\n        } else if (currentSumPixels === 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n        }\\n    }\\n    \\n    output[1] = currentSumPixels || 100;\\n    if (!currentSumPixels) output[0]--;\\n\\n    return output;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfLines = function(widths, s) {\\n    let currentSumPixels = 0;\\n    const output = [1, 0];\\n    for (let i = 0; i < s.length; i++) {\\n        const indexOfChar = s.charCodeAt(i) - 97;\\n        currentSumPixels += widths[indexOfChar];\\n        if (currentSumPixels > 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n            i--;\\n        } else if (currentSumPixels === 100) {\\n            currentSumPixels = 0;\\n            output[0]++;\\n        }\\n    }\\n    \\n    output[1] = currentSumPixels || 100;\\n    if (!currentSumPixels) output[0]--;\\n\\n    return output;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2441031,
                "title": "python-hash-table-fast-and-low-memory-usage-97-6",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict(zip([chr(i) for i in range(97, 123)], widths))\\n        lineNumber, lineWidth = 1, 0\\n        for _ in s:\\n            if lineWidth + d[_] <= 100: lineWidth += d[_]\\n            else:\\n                lineNumber += 1\\n                lineWidth = d[_]\\n        return [lineNumber, lineWidth]\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict(zip([chr(i) for i in range(97, 123)], widths))\\n        lineNumber, lineWidth = 1, 0\\n        for _ in s:\\n            if lineWidth + d[_] <= 100: lineWidth += d[_]\\n            else:\\n                lineNumber += 1\\n                lineWidth = d[_]\\n        return [lineNumber, lineWidth]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2208621,
                "title": "python3-runtime-42ms-67-78-memory-13-9mb-19-81",
                "content": "```\\nclass Solution:\\n#     Runtime: 42ms 67.78% Memory: 13.9mb 19.81%\\n# O(n) || O(1)\\n    def numberOfLines(self, widths, s):\\n        newLine = 1\\n        \\n        width = 0\\n        \\n        for char in s:\\n            charWidth = widths[ord(char) - ord(\\'a\\')]\\n            \\n            if charWidth + width > 100:\\n                newLine += 1\\n                width = 0\\n                \\n            width += charWidth\\n                \\n        return [newLine, width]  \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n#     Runtime: 42ms 67.78% Memory: 13.9mb 19.81%\\n# O(n) || O(1)\\n    def numberOfLines(self, widths, s):\\n        newLine = 1\\n        \\n        width = 0\\n        \\n        for char in s:\\n            charWidth = widths[ord(char) - ord(\\'a\\')]\\n            \\n            if charWidth + width > 100:\\n                newLine += 1\\n                width = 0\\n                \\n            width += charWidth\\n                \\n        return [newLine, width]  \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2054270,
                "title": "c-easy-solution-faster-than-100-o-n",
                "content": "```c++\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line_num=1, line_width=0, char_width;\\n        \\n        for (char i: s) {\\n            char_width = widths[(i-\\'a\\')];\\n            if ((line_width + char_width) > 100) {\\n\\t\\t\\t\\t// adding newline\\n                line_num++;\\n                line_width = 0;\\n            }\\n            \\n            line_width += char_width;\\n        }\\n        \\n        return {line_num, line_width}; // it will be automatically converted to vector\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```c++\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line_num=1, line_width=0, char_width;\\n        \\n        for (char i: s) {\\n            char_width = widths[(i-\\'a\\')];\\n            if ((line_width + char_width) > 100) {\\n\\t\\t\\t\\t// adding newline\\n                line_num++;\\n                line_width = 0;\\n            }\\n            \\n            line_width += char_width;\\n        }\\n        \\n        return {line_num, line_width}; // it will be automatically converted to vector\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2050841,
                "title": "javascript-solution-one-liner",
                "content": "```\\nconst numberOfLines = (widths, s) => s.split(\\'\\').reduce((res, c, i) => ([\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? res[0] + 1 : res[0],\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? widths[s.charCodeAt(i) - 97] : res[1] + widths[s.charCodeAt(i) - 97],\\n]), [1, 0]);\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst numberOfLines = (widths, s) => s.split(\\'\\').reduce((res, c, i) => ([\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? res[0] + 1 : res[0],\\n    res[1] + widths[s.charCodeAt(i) - 97] > 100 ? widths[s.charCodeAt(i) - 97] : res[1] + widths[s.charCodeAt(i) - 97],\\n]), [1, 0]);\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2028695,
                "title": "simple-solution-using-python",
                "content": "Runtime: 22 ms\\nMemory Usage: 13.9 MB\\n\\nCreate a dictionary where keys are a to z and values are their corresponding widths given in the problem. After that iterate through the string s and add value to the variable sum1 by taking values from the dictionary and while iterating if the sum1 + width of a string is less than equal to 100 then add the value of width in sum1 else make sum1 = 0 and increment the line. At the end return sum1 and line.\\nAny suggestions and feedbacks are welcome.\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        dict1 = {}\\n        for i in range(97,123):\\n            dict1[chr(i)] = widths[i-97]\\n            \\n        sum1 = 0\\n        line = 1\\n        \\n        for i in range(len(s)):\\n            if sum1 + dict1[s[i]] <= 100:\\n                sum1+=dict1[s[i]]        \\n                \\n            else:\\n                sum1 = 0\\n                sum1+=dict1[s[i]]\\n                line+=1\\n                \\n        return [line,sum1]\\n                \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        dict1 = {}\\n        for i in range(97,123):\\n            dict1[chr(i)] = widths[i-97]\\n            \\n        sum1 = 0\\n        line = 1\\n        \\n        for i in range(len(s)):\\n            if sum1 + dict1[s[i]] <= 100:\\n                sum1+=dict1[s[i]]        \\n                \\n            else:\\n                sum1 = 0\\n                sum1+=dict1[s[i]]\\n                line+=1\\n                \\n        return [line,sum1]\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2010889,
                "title": "c-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int>result;\\n        int count=0,line=1;\\n        for(int i=0;i<s.size();i++){\\n           int z = widths[ s[i]-\\'a\\'];\\n            if(count+z>100){\\n               count =z;\\n                line++;\\n            }\\n            else {\\n                count= count+z;\\n            }     \\n        }\\n        result.push_back(line);\\n        result.push_back(count);\\n     return result;\\n      \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int>result;\\n        int count=0,line=1;\\n        for(int i=0;i<s.size();i++){\\n           int z = widths[ s[i]-\\'a\\'];\\n            if(count+z>100){\\n               count =z;\\n                line++;\\n            }\\n            else {\\n                count= count+z;\\n            }     \\n        }\\n        result.push_back(line);\\n        result.push_back(count);\\n     return result;\\n      \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1943586,
                "title": "java-0ms",
                "content": "\\n\\n\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines =0;\\n        int sum=0;\\n        int [] res= new int[2];\\n     \\n         for ( int i=0; i<s.length(); i++){\\n             sum+=widths[s.charAt(i)-\\'a\\']  ;\\n             if(sum>100){\\n                 sum=0;\\n                 lines++;\\n                 i--;\\n             }\\n         }\\n           res[0]=++lines;  res[1]=sum;\\n        return res;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines =0;\\n        int sum=0;\\n        int [] res= new int[2];\\n     \\n         for ( int i=0; i<s.length(); i++){\\n             sum+=widths[s.charAt(i)-\\'a\\']  ;\\n             if(sum>100){\\n                 sum=0;\\n                 lines++;\\n                 i--;\\n             }\\n         }\\n           res[0]=++lines;  res[1]=sum;\\n        return res;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1893289,
                "title": "python-easy-solution-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines = 1\\n        pix_per_line = 0\\n        for i in s:\\n            if widths[ord(i) - 97] + pix_per_line <= 100:\\n                pix_per_line += widths[ord(i) - 97]\\n            else:\\n                lines += 1\\n                pix_per_line = widths[ord(i) - 97]\\n        return [lines, pix_per_line]",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines = 1\\n        pix_per_line = 0\\n        for i in s:\\n            if widths[ord(i) - 97] + pix_per_line <= 100:\\n                pix_per_line += widths[ord(i) - 97]\\n            else:\\n                lines += 1\\n                pix_per_line = widths[ord(i) - 97]\\n        return [lines, pix_per_line]",
                "codeTag": "Java"
            },
            {
                "id": 1845904,
                "title": "runtime-52-ms-faster-than-100-00-javascript",
                "content": "Runtime: 52 ms, faster than 100.00% of JavaScript online submissions for Number of Lines To Write String.\\nMemory Usage: 42.5 MB, less than 35.48% of JavaScript online submissions for Number of Lines To Write String.\\n\\n```\\nvar numberOfLines = function (widths, s) {\\n  let lines = 0;\\n  let lastLine = 0;\\n\\n  for (let i = 0; i < s.length; i++) {\\n    let wid = widths[s[i].charCodeAt(0) - 97];\\n\\n    if (lastLine + wid <= 100) {\\n      lastLine += wid;\\n    } else if (lastLine + wid > 100) {\\n      lastLine = wid;\\n      lines++;\\n    }\\n\\n    if (lastLine === 100 && i !== s.length - 1) {\\n      lines++;\\n      lastLine = 0;\\n    }\\n  }\\n  if (lastLine <= 100) lines++;\\n  return [lines, lastLine];\\n};\\n\\n```\\n![image](https://assets.leetcode.com/users/images/d5a2d549-eda5-4348-b686-293815a0c1e0_1647174487.6723025.png)\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar numberOfLines = function (widths, s) {\\n  let lines = 0;\\n  let lastLine = 0;\\n\\n  for (let i = 0; i < s.length; i++) {\\n    let wid = widths[s[i].charCodeAt(0) - 97];\\n\\n    if (lastLine + wid <= 100) {\\n      lastLine += wid;\\n    } else if (lastLine + wid > 100) {\\n      lastLine = wid;\\n      lines++;\\n    }\\n\\n    if (lastLine === 100 && i !== s.length - 1) {\\n      lines++;\\n      lastLine = 0;\\n    }\\n  }\\n  if (lastLine <= 100) lines++;\\n  return [lines, lastLine];\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1840437,
                "title": "simple-c-solution-beats-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int countLine = 1;\\n        int countPixel = 0;\\n        int lastCount = 0;\\n        \\n        for(auto i:s) {\\n            if(countPixel+widths[i-\\'a\\'] <=100) {\\n                countPixel+= widths[i-\\'a\\'];\\n            } else {\\n                countPixel = widths[i-\\'a\\'];\\n                countLine++;\\n            }\\n            lastCount = countPixel;\\n        }\\n        \\n        return vector<int>({countLine, countPixel});\\n    }\\n};\\n```\\n\\nIf you like it do upvote.",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int countLine = 1;\\n        int countPixel = 0;\\n        int lastCount = 0;\\n        \\n        for(auto i:s) {\\n            if(countPixel+widths[i-\\'a\\'] <=100) {\\n                countPixel+= widths[i-\\'a\\'];\\n            } else {\\n                countPixel = widths[i-\\'a\\'];\\n                countLine++;\\n            }\\n            lastCount = countPixel;\\n        }\\n        \\n        return vector<int>({countLine, countPixel});\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1761065,
                "title": "simple-c-solution-0ms-100-less-space",
                "content": "Please upvote if you like the code. It is always a great motivation to write more :)\\n\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) \\n    {\\n        int line = 1, currentLine = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(currentLine + widths[s[i]-\\'a\\'] > 100)\\n            {\\n                line++;\\n                currentLine = widths[s[i]-\\'a\\'];\\n            }\\n            else\\n                currentLine += widths[s[i]-\\'a\\'];\\n        }\\n        \\n        vector<int> res;\\n        \\n        res.push_back(line);\\n        res.push_back(currentLine);\\n        \\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) \\n    {\\n        int line = 1, currentLine = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(currentLine + widths[s[i]-\\'a\\'] > 100)\\n            {\\n                line++;\\n                currentLine = widths[s[i]-\\'a\\'];\\n            }\\n            else\\n                currentLine += widths[s[i]-\\'a\\'];\\n        }\\n        \\n        vector<int> res;\\n        \\n        res.push_back(line);\\n        res.push_back(currentLine);\\n        \\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1723043,
                "title": "python-solution-with-explanation",
                "content": "```\\n######################################################\\n\\n#   Runtime: 24ms   -   97.63%\\n#   Memory: 13.8MB  -   99.57%\\n\\n######################################################\\n\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        # lines[0] will store how many lines are there\\n        # lines[1] will store pixels valus of last line\\n        lines = [0, 0]\\n        # Stores pixel value of each line\\n        pixels = 0\\n        \\n        for char in s:\\n            # If adding char to current line exceeds the max pixel length which\\n            # is 100, we go to next line, so we increase lines[0] by 1\\n            # In next line we write the current char, so pixels will be \\n            # reinitialized with the pixel width of cuurent char\\n            if widths[ord(char) - 97] + pixels > 100:\\n                lines[0] += 1\\n                pixels = widths[ord(char) - 97]\\n            # Else, we add current char to current line and increase the pixels\\n            # to pixels + width of current char\\n            else:\\n                pixels += widths[ord(char) - 97]\\n        # After loop ends we haven\\'t added last line. So we increase lines[0] by\\n        # 1 and pixels will have pixel value of last line. So we store it in \\n        # lines[1]\\n        lines[0] += 1\\n        lines[1] = pixels\\n        return lines\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n######################################################\\n\\n#   Runtime: 24ms   -   97.63%\\n#   Memory: 13.8MB  -   99.57%\\n\\n######################################################\\n\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        # lines[0] will store how many lines are there\\n        # lines[1] will store pixels valus of last line\\n        lines = [0, 0]\\n        # Stores pixel value of each line\\n        pixels = 0\\n        \\n        for char in s:\\n            # If adding char to current line exceeds the max pixel length which\\n            # is 100, we go to next line, so we increase lines[0] by 1\\n            # In next line we write the current char, so pixels will be \\n            # reinitialized with the pixel width of cuurent char\\n            if widths[ord(char) - 97] + pixels > 100:\\n                lines[0] += 1\\n                pixels = widths[ord(char) - 97]\\n            # Else, we add current char to current line and increase the pixels\\n            # to pixels + width of current char\\n            else:\\n                pixels += widths[ord(char) - 97]\\n        # After loop ends we haven\\'t added last line. So we increase lines[0] by\\n        # 1 and pixels will have pixel value of last line. So we store it in \\n        # lines[1]\\n        lines[0] += 1\\n        lines[1] = pixels\\n        return lines\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1597740,
                "title": "rust-solution",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let (mut num_lines, mut last_line) = (0, 0);\\n        for width in s.as_bytes().iter().map(|b| widths[(*b - b\\'a\\') as usize]) {\\n            last_line += width;\\n            if last_line > 100 {\\n                last_line = width;\\n                num_lines += 1;\\n            }\\n        }\\n        vec![num_lines + 1, last_line]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let (mut num_lines, mut last_line) = (0, 0);\\n        for width in s.as_bytes().iter().map(|b| widths[(*b - b\\'a\\') as usize]) {\\n            last_line += width;\\n            if last_line > 100 {\\n                last_line = width;\\n                num_lines += 1;\\n            }\\n        }\\n        vec![num_lines + 1, last_line]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1586834,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int line=0;\\n        int pix=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int a=s.charAt(i)-97;\\n            pix=pix+widths[a];\\n            if(pix==100)\\n            {\\n                line++;\\n                if(i!=s.length()-1)\\n                {\\n                    pix=0;\\n                }\\n            }\\n            else if(pix>100)\\n            {\\n                i--;\\n                line++;\\n                pix=0;\\n            }\\n        }\\n        if(pix>0 && pix!=100)\\n        {\\n            line++;\\n        }\\n        int[] result=new int[2];\\n        result[0]=line;\\n        result[1]=pix;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1584954,
                "title": "python-easy-solution",
                "content": "Here we start from x=1 since it represents first line .\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        l=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\\n        \\n        x=1\\n        s1=0\\n        for i in s:\\n            a=l.index(i)\\n            if(s1+widths[a]>100):\\n                s1=widths[a]\\n                x+=1\\n            else:\\n                s1=s1+widths[a]\\n        return([x,s1])\\n```\\nIf u understood the code then plz...UPVOTE",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        l=[\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"]\\n        \\n        x=1\\n        s1=0\\n        for i in s:\\n            a=l.index(i)\\n            if(s1+widths[a]>100):\\n                s1=widths[a]\\n                x+=1\\n            else:\\n                s1=s1+widths[a]\\n        return([x,s1])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1462559,
                "title": "javascript-solution-easy",
                "content": "\\nvar numberOfLines = function(arr, s) {\\n\\n    var res =  [];\\n    \\n    let line = 1;\\n    let last = 0;\\n    \\n    for(let i = 0; i < s.length; i++){\\n        const temp = arr[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        if(last + temp > 100){\\n            line++;\\n            last = 0;\\n            last = temp;\\n        }else{\\n            last += temp;\\n        }\\n    }\\n    \\n    res.push(line);   \\n    res.push(last);\\n\\n    return res;\\n};",
                "solutionTags": [],
                "code": "\\nvar numberOfLines = function(arr, s) {\\n\\n    var res =  [];\\n    \\n    let line = 1;\\n    let last = 0;\\n    \\n    for(let i = 0; i < s.length; i++){\\n        const temp = arr[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n        if(last + temp > 100){\\n            line++;\\n            last = 0;\\n            last = temp;\\n        }else{\\n            last += temp;\\n        }\\n    }\\n    \\n    res.push(line);   \\n    res.push(last);\\n\\n    return res;\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 1462515,
                "title": "java-1ms-easy-code",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int line = 0;\\n        int countline = 1;\\n        for(int i=0; i<s.length(); i++){\\n            int ch = s.charAt(i);\\n            int f = widths[ch - \\'a\\'];\\n            //System.out.println(ch);\\n            if((line+f)<=100){\\n                line += f;\\n            }\\n            else{\\n                countline++;\\n                line = 0;\\n                i--;\\n            }\\n        }\\n        \\n        ans[0] = countline;\\n        ans[1] = line;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int line = 0;\\n        int countline = 1;\\n        for(int i=0; i<s.length(); i++){\\n            int ch = s.charAt(i);\\n            int f = widths[ch - \\'a\\'];\\n            //System.out.println(ch);\\n            if((line+f)<=100){\\n                line += f;\\n            }\\n            else{\\n                countline++;\\n                line = 0;\\n                i--;\\n            }\\n        }\\n        \\n        ans[0] = countline;\\n        ans[1] = line;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1393626,
                "title": "java-solution-0ms",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int curr=(int)s.charAt(i)-97;\\n            int val=widths[curr];\\n            if(sum+val>100)\\n            {\\n                count++;\\n                sum=val;\\n            }\\n            else\\n            {\\n                sum=sum+val;\\n            }\\n        }\\n        int ret[]={count+1,sum};\\n        return ret;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int count=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            int curr=(int)s.charAt(i)-97;\\n            int val=widths[curr];\\n            if(sum+val>100)\\n            {\\n                count++;\\n                sum=val;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1385970,
                "title": "python3-fast-using-ord",
                "content": "\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, tmp = 1, 0\\n        for c in s:\\n            if tmp + widths[ord(c)-97] > 100:\\n                lines += 1\\n                tmp = 0\\n                \\n            tmp += widths[ord(c)-97]\\n        \\n        return [lines, tmp]",
                "solutionTags": [],
                "code": "\\n\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, tmp = 1, 0\\n        for c in s:\\n            if tmp + widths[ord(c)-97] > 100:\\n                lines += 1\\n                tmp = 0\\n                \\n            tmp += widths[ord(c)-97]\\n        \\n        return [lines, tmp]",
                "codeTag": "Java"
            },
            {
                "id": 1372343,
                "title": "py-solution-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines=0\\n        width=0\\n        for i in s:\\n            if(width+widths[ord(i)-97]<=100):\\n                width+=widths[ord(i)-97]\\n            else:\\n                width=0\\n                width+=widths[ord(i)-97]\\n                lines+=1\\n        return [lines,width] if width==0 else [lines+1,width]\\n        \\n            \\n        \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines=0\\n        width=0\\n        for i in s:\\n            if(width+widths[ord(i)-97]<=100):\\n                width+=widths[ord(i)-97]\\n            else:\\n                width=0\\n                width+=widths[ord(i)-97]\\n                lines+=1\\n        return [lines,width] if width==0 else [lines+1,width]\\n        \\n            \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1338444,
                "title": "c-solution-faster-than-90",
                "content": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        var line = 0;\\n        var last = 0;\\n        var c = 0;\\n        foreach(var n in s.Select(x=>widths[(int)x-(int)\\'a\\'])){\\n            if(c+n>100){\\n                last = c;\\n                line++;\\n                c = n;\\n            }else{\\n                c += n;\\n            }\\n        }\\n        if(c>0) line++;\\n        last = c;\\n        return new int[]{line, last};\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        var line = 0;\\n        var last = 0;\\n        var c = 0;\\n        foreach(var n in s.Select(x=>widths[(int)x-(int)\\'a\\'])){\\n            if(c+n>100){\\n                last = c;\\n                line++;\\n                c = n;\\n            }else{\\n                c += n;\\n            }\\n        }\\n        if(c>0) line++;\\n        last = c;\\n        return new int[]{line, last};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1329517,
                "title": "c-solution-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int length=0,line=1;\\n        for(int i=0; i<s.length(); i++){\\n\\t\\t\\n\\t\\t\\t// If adding the length of the next letter results in a line width greater than 100, move to new line and \\n\\t\\t\\t// reinitialize the value of length to the length of that letter\\n            if(length+widths[s[i]-\\'a\\']>100){\\n                length=widths[s[i]-\\'a\\'];\\n                line++;\\n            }   \\n\\t\\t\\t\\n\\t\\t\\t// If that is ot the case, simply add the length of that letter and move ahead\\n            else\\n                length+=widths[s[i]-\\'a\\'];\\n        }\\n        return {line,length};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int length=0,line=1;\\n        for(int i=0; i<s.length(); i++){\\n\\t\\t\\n\\t\\t\\t// If adding the length of the next letter results in a line width greater than 100, move to new line and \\n\\t\\t\\t// reinitialize the value of length to the length of that letter\\n            if(length+widths[s[i]-\\'a\\']>100){\\n                length=widths[s[i]-\\'a\\'];\\n                line++;\\n            }   \\n\\t\\t\\t\\n\\t\\t\\t// If that is ot the case, simply add the length of that letter and move ahead\\n            else\\n                length+=widths[s[i]-\\'a\\'];\\n        }\\n        return {line,length};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1328427,
                "title": "python3-olution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        su, c = 0, 1\\n        for i in s:\\n            x = widths[ord(i)-97]\\n            su += x\\n            if su > 100:\\n                su = x\\n                c += 1\\n        return [c,su]\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        su, c = 0, 1\\n        for i in s:\\n            x = widths[ord(i)-97]\\n            su += x\\n            if su > 100:\\n                su = x\\n                c += 1\\n        return [c,su]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1327430,
                "title": "python3-another-thinking-by-dict",
                "content": "\\n\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        mapping = dict(zip(alpha,widths))\\n        \\n        sum_score = 0\\n        count = 1\\n        for i in range(len(s)):\\n            if (sum_score+mapping[s[i]] <= 100):\\n                sum_score += mapping[s[i]]\\n            else :\\n                sum_score = mapping[s[i]]\\n                count += 1\\n                \\n        return [count,sum_score]",
                "solutionTags": [
                    "Python3"
                ],
                "code": "\\n\\n        alpha = \"abcdefghijklmnopqrstuvwxyz\"\\n        mapping = dict(zip(alpha,widths))\\n        \\n        sum_score = 0\\n        count = 1\\n        for i in range(len(s)):\\n            if (sum_score+mapping[s[i]] <= 100):\\n                sum_score += mapping[s[i]]\\n            else :\\n                sum_score = mapping[s[i]]\\n                count += 1\\n                \\n        return [count,sum_score]",
                "codeTag": "Unknown"
            },
            {
                "id": 1280955,
                "title": "c-solution-faster-than-100-solutions",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> output;\\n        \\n        int i,sum=0,count=1;\\n        int len=s.length();\\n        \\n        for(i=0;i<len;i++){            \\n            // index=s[i]-97;\\n            sum=sum+widths[s[i]-97];\\n            if(sum>100){\\n                count++;\\n                sum=0;\\n                i--;\\n            }\\n            \\n        }\\n        \\n        \\n        output.push_back(count);\\n        output.push_back(sum);\\n        \\n        return output;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> output;\\n        \\n        int i,sum=0,count=1;\\n        int len=s.length();\\n        \\n        for(i=0;i<len;i++){            \\n            // index=s[i]-97;\\n            sum=sum+widths[s[i]-97];\\n            if(sum>100){\\n                count++;\\n                sum=0;\\n                i--;\\n            }\\n            \\n        }\\n        \\n        \\n        output.push_back(count);\\n        output.push_back(sum);\\n        \\n        return output;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1274202,
                "title": "rust-0ms",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n      let s = s.bytes().map(|x| (x - 97) as usize).collect::<Vec<usize>>();\\n      let (mut lines, mut width) = (1,0);\\n      for index in s {\\n          let w = widths[index];\\n          width+=w;\\n          if width > 100 {\\n              lines+=1;\\n              width=w;\\n          }\\n      }\\n      vec![lines,width as i32]  \\n    }\\n}\\n\\t\\t\\t```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n      let s = s.bytes().map(|x| (x - 97) as usize).collect::<Vec<usize>>();\\n      let (mut lines, mut width) = (1,0);\\n      for index in s {\\n          let w = widths[index];\\n          width+=w;\\n          if width > 100 {\\n              lines+=1;\\n              width=w;\\n          }\\n      }\\n      vec![lines,width as i32]  \\n    }\\n}\\n\\t\\t\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 1215203,
                "title": "python-3-89-simple-solution",
                "content": "\\t\\n\\tclass Solution:\\n\\t\\tdef numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n\\t\\t\\tdict1 = dict(zip(string.ascii_lowercase, widths))\\n\\t\\t\\tline, pixel = 1, 0\\n\\t\\t\\tfor x in s:\\n\\t\\t\\t\\tif pixel + dict1[x] <= 100:\\n\\t\\t\\t\\t\\tpixel += dict1[x] \\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tline += 1\\n\\t\\t\\t\\t\\tpixel = 0\\n\\t\\t\\t\\t\\tpixel += dict1[x]  \\n\\t\\t\\treturn [line, pixel]\\n",
                "solutionTags": [],
                "code": "\\t\\n\\tclass Solution:\\n\\t\\tdef numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n\\t\\t\\tdict1 = dict(zip(string.ascii_lowercase, widths))\\n\\t\\t\\tline, pixel = 1, 0\\n\\t\\t\\tfor x in s:\\n\\t\\t\\t\\tif pixel + dict1[x] <= 100:\\n\\t\\t\\t\\t\\tpixel += dict1[x] \\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tline += 1\\n\\t\\t\\t\\t\\tpixel = 0\\n\\t\\t\\t\\t\\tpixel += dict1[x]  \\n\\t\\t\\treturn [line, pixel]\\n",
                "codeTag": "Java"
            },
            {
                "id": 1066236,
                "title": "python3-simple-solution",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count, sum = 1, 0\\n        for i in s:\\n            a = widths[ord(i) - 97]\\n            sum += a\\n            if sum > 100:\\n                count += 1\\n                sum = a\\n        return [count, sum]\\n```\\n**If you like the solution, please vote for this.**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        count, sum = 1, 0\\n        for i in s:\\n            a = widths[ord(i) - 97]\\n            sum += a\\n            if sum > 100:\\n                count += 1\\n                sum = a\\n        return [count, sum]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1060826,
                "title": "java-ez-pz",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int lines=1;\\n        int value=0;\\n        int hun=0;\\n        for(char ch : s.toCharArray()){\\n            value = widths[ch - \\'a\\'];\\n            if(hun+value <=100){\\n                hun+=value;\\n            }\\n            else{\\n                lines++;\\n                hun = value;\\n            }\\n        }\\n        ans[0]= lines;\\n        ans[1]= hun;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int lines=1;\\n        int value=0;\\n        int hun=0;\\n        for(char ch : s.toCharArray()){\\n            value = widths[ch - \\'a\\'];\\n            if(hun+value <=100){\\n                hun+=value;\\n            }\\n            else{\\n                lines++;\\n                hun = value;\\n            }\\n        }\\n        ans[0]= lines;\\n        ans[1]= hun;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1036378,
                "title": "c-beats-100-well-commented-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line=1, sum=0; //Prepare the return variables\\n        for(char c:s) //Scan through each char of the string\\n        {\\n            sum+=widths[c-\\'a\\']; //Add the corresponding pixel width to the sum\\n            if(sum>100) sum=widths[c-\\'a\\'], line++;  //If sum is greater than 100, update the sum and line   \\n        }\\n        return {line, sum};\\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line=1, sum=0; //Prepare the return variables\\n        for(char c:s) //Scan through each char of the string\\n        {\\n            sum+=widths[c-\\'a\\']; //Add the corresponding pixel width to the sum\\n            if(sum>100) sum=widths[c-\\'a\\'], line++;  //If sum is greater than 100, update the sum and line   \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1029632,
                "title": "java-easy-solution-100-faster-clean-code",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n        int lines=0;\\n        int pixels=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            pixels+=widths[s.charAt(i)-97];\\n            if(pixels>100)\\n            {\\n                lines++;\\n                i--;\\n                pixels=0;\\n            }\\n        }\\n        return new int[]{lines+1,pixels};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n        int lines=0;\\n        int pixels=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            pixels+=widths[s.charAt(i)-97];\\n            if(pixels>100)\\n            {\\n                lines++;\\n                i--;\\n                pixels=0;\\n            }\\n        }\\n        return new int[]{lines+1,pixels};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1018264,
                "title": "python-solution",
                "content": "\\tresult = [1, 0]\\n\\tfor c in s:\\n\\t\\tw = widths[ord(c) - ord(\\'a\\')]\\n\\t\\tif result[1] + w <= 100:\\n\\t\\t\\tresult[1] += w\\n\\t\\telse:\\n\\t\\t\\tresult[0] += 1\\n\\t\\t\\tresult[1] = w\\n\\treturn result",
                "solutionTags": [],
                "code": "\\tresult = [1, 0]\\n\\tfor c in s:\\n\\t\\tw = widths[ord(c) - ord(\\'a\\')]\\n\\t\\tif result[1] + w <= 100:\\n\\t\\t\\tresult[1] += w\\n\\t\\telse:\\n\\t\\t\\tresult[0] += 1\\n\\t\\t\\tresult[1] = w\\n\\treturn result",
                "codeTag": "Unknown"
            },
            {
                "id": 876377,
                "title": "python-beats-95",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str):\\n        lines = 1\\n        curline = 0\\n        \\n        for i in S:\\n            x = widths[ord(i)-ord(\\'a\\')]\\n            if curline+x <= 100:\\n                curline += x\\n            else:\\n                lines += 1\\n                curline = x\\n                \\n        return [lines, curline]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str):\\n        lines = 1\\n        curline = 0\\n        \\n        for i in S:\\n            x = widths[ord(i)-ord(\\'a\\')]\\n            if curline+x <= 100:\\n                curline += x\\n            else:\\n                lines += 1\\n                curline = x\\n                \\n        return [lines, curline]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 868393,
                "title": "java-100",
                "content": "```\\nclass Solution {\\n    private static final int MAX_UNITS_PER_LINE = 100;\\n    \\n    public int[] numberOfLines(int[] widths, String S) {\\n        int lineCount = 1;\\n        int lastLineUnitCount = 0;\\n        \\n        for(int i = 0; i < S.length(); i++) {\\n            int val = widths[S.charAt(i) - \\'a\\'];\\n            lastLineUnitCount += val;\\n            if(lastLineUnitCount > MAX_UNITS_PER_LINE) {\\n                lineCount++;\\n                lastLineUnitCount = val;\\n            }\\n        }\\n        \\n        return new int[] {lineCount, lastLineUnitCount};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private static final int MAX_UNITS_PER_LINE = 100;\\n    \\n    public int[] numberOfLines(int[] widths, String S) {\\n        int lineCount = 1;\\n        int lastLineUnitCount = 0;\\n        \\n        for(int i = 0; i < S.length(); i++) {\\n            int val = widths[S.charAt(i) - \\'a\\'];\\n            lastLineUnitCount += val;\\n            if(lastLineUnitCount > MAX_UNITS_PER_LINE) {\\n                lineCount++;\\n                lastLineUnitCount = val;\\n            }\\n        }\\n        \\n        return new int[] {lineCount, lastLineUnitCount};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 843801,
                "title": "c-python-solutions",
                "content": "C++ solution,\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int l = 1, w = 0;\\n\\n        for (char s : S) {\\n            int t = widths[s - \\'a\\'];\\n            \\n            if (t <= 100 - w)\\n                w += t;\\n            else {\\n                ++l;\\n                w = t;\\n            }\\n        }\\n\\n        return {l,w};\\n    }\\n};\\n```\\n\\nPython solution,\\n```\\nclass Solution:\\n    def numberOfLines(self, widths, S):\\n        l, w = 1, 0\\n\\n        for s in S:\\n            t = widths[ord(s) - ord(\\'a\\')]\\n            \\n            if t <= 100 - w:\\n                w += t\\n            else:\\n                l += 1\\n                w = t\\n\\n        return [l,w]\\n```\\n",
                "solutionTags": [
                    "Python",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int l = 1, w = 0;\\n\\n        for (char s : S) {\\n            int t = widths[s - \\'a\\'];\\n            \\n            if (t <= 100 - w)\\n                w += t;\\n            else {\\n                ++l;\\n                w = t;\\n            }\\n        }\\n\\n        return {l,w};\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def numberOfLines(self, widths, S):\\n        l, w = 1, 0\\n\\n        for s in S:\\n            t = widths[ord(s) - ord(\\'a\\')]\\n            \\n            if t <= 100 - w:\\n                w += t\\n            else:\\n                l += 1\\n                w = t\\n\\n        return [l,w]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 599733,
                "title": "java-solution-faster-than-100",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int lines=1,lastLine=0,temp=0;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            int width=widths[S.charAt(i)-\\'a\\'];\\n            temp+=width;\\n            if(temp<100)\\n            {\\n                lastLine=temp;\\n            }\\n            else if(temp==100)\\n            {\\n                lines++;\\n                temp=0;\\n                lastLine=0;\\n            }\\n            else\\n            {\\n                lines++;\\n                temp=0;\\n                temp+=width;\\n                lastLine=temp;\\n            }\\n        }\\n        \\n        int[] out=new int[2];\\n        out[0]=lines;out[1]=lastLine;\\n     \\n    return out;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int lines=1,lastLine=0,temp=0;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            int width=widths[S.charAt(i)-\\'a\\'];\\n            temp+=width;\\n            if(temp<100)\\n            {\\n                lastLine=temp;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 549219,
                "title": "rust-functional-solution",
                "content": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        if s.len() == 0 {\\n            return vec![0, 0];\\n        }\\n        \\n        let (line, acc) = s\\n            .chars()\\n            .map(|chr| alpha_index(chr))\\n            .map(|chr_ind| widths[chr_ind])\\n            .fold((1, 0), |(line, acc), cur| {\\n                if acc + cur > 100 {\\n                    (line + 1, cur)\\n                } else {\\n                    (line, acc + cur)\\n                }\\n            });\\n\\n        vec![line, acc]\\n    }\\n}\\n\\nfn alpha_index(chr: char) -> usize {\\n    if chr >= \\'a\\' && chr <= \\'z\\' {\\n        (chr as usize) - (\\'a\\' as usize)\\n    } else {\\n        panic!(\"unsupported character\")\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        if s.len() == 0 {\\n            return vec![0, 0];\\n        }\\n        \\n        let (line, acc) = s\\n            .chars()\\n            .map(|chr| alpha_index(chr))\\n            .map(|chr_ind| widths[chr_ind])\\n            .fold((1, 0), |(line, acc), cur| {\\n                if acc + cur > 100 {\\n                    (line + 1, cur)\\n                } else {\\n                    (line, acc + cur)\\n                }\\n            });\\n\\n        vec![line, acc]\\n    }\\n}\\n\\nfn alpha_index(chr: char) -> usize {\\n    if chr >= \\'a\\' && chr <= \\'z\\' {\\n        (chr as usize) - (\\'a\\' as usize)\\n    } else {\\n        panic!(\"unsupported character\")\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 541927,
                "title": "javascript-solution-with-explanation",
                "content": "Totally forgot charCodeAt was a thing, so here\\'s how I did it:\\n```\\nvar numberOfLines = function(widths, S) {\\n\\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\\n    let lines = 1;\\n    \\n    let lineWidth = 0;\\n    S.split(\"\").forEach(char => {\\n        let charWidth = widths[alphabet.indexOf(char)]\\n        \\n        if(lineWidth + charWidth <= 100){\\n            lineWidth += charWidth\\n        } else {\\n            lines++\\n            lineWidth = charWidth\\n        }\\n    })\\n    \\n    return [lines,lineWidth]\\n};\\n```\\n\\nUsing the alphabet array, we get an array of letters. The indexes of these letters match up with those in widths. To access that index in widths, we just get the index of what the letter is in alphabet. For example, F is the fifth index of alphabet (index 4). To get its width, we would do widths[4] to see its width.\\n\\nFrom there we have lineWidth, which starts off as zero. For every character in string, we get its width via the method above and see if adding this width to lineWidth would exceed 100. If it doesn\\'t, we just add the character\\'s width to lineWidth. This means lineWidth will successively grow larger until it comes across a character whose width would cause it to exceed 100. \\n\\nWhen that happens, we add 1 to lines (keeps track of how many lines needed), and reset lineWidth to the width of the current character since we are starting a new line. When we\\'re done going through all the characters, lineWidth will be some amount. Be sure to return it along with the total number of lines.\\n",
                "solutionTags": [],
                "code": "```\\nvar numberOfLines = function(widths, S) {\\n\\n    let alphabet = \"abcdefghijklmnopqrstuvwxyz\".split(\"\")\\n    let lines = 1;\\n    \\n    let lineWidth = 0;\\n    S.split(\"\").forEach(char => {\\n        let charWidth = widths[alphabet.indexOf(char)]\\n        \\n        if(lineWidth + charWidth <= 100){\\n            lineWidth += charWidth\\n        } else {\\n            lines++\\n            lineWidth = charWidth\\n        }\\n    })\\n    \\n    return [lines,lineWidth]\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 523351,
                "title": "straight-forward-java-solution",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int countLines = 1, countWidth = 0;\\n        if (S == \"\") {\\n            return new int[]{0, 0};\\n        }\\n        char[] chars = S.toCharArray();\\n        for (int i = 0; i < chars.length; i++) {\\n            int w = widths[chars[i]-\\'a\\'];\\n            countWidth += w;\\n            if (countWidth > 100) {\\n                countWidth = w;\\n                countLines++;\\n            }\\n        }\\n        return new int[]{countLines, countWidth};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int countLines = 1, countWidth = 0;\\n        if (S == \"\") {\\n            return new int[]{0, 0};\\n        }\\n        char[] chars = S.toCharArray();\\n        for (int i = 0; i < chars.length; i++) {\\n            int w = widths[chars[i]-\\'a\\'];\\n            countWidth += w;\\n            if (countWidth > 100) {\\n                countWidth = w;\\n                countLines++;\\n            }\\n        }\\n        return new int[]{countLines, countWidth};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 460478,
                "title": "100-javascript-solution",
                "content": "```\\nvar numberOfLines = function (widths, S) {\\n  let _S = S.split(\"\");\\n  let sum = 0, lines = 0;\\n  for (let i = 0; i < _S.length; i++){\\n    sum += widths[_S[i].charCodeAt(0) - 97];\\n    if (sum === 100) {\\n      sum = 0;\\n      lines++;\\n    } else if (sum > 100) {\\n      sum = 0;\\n      lines++;\\n      i--;\\n    }\\n  }\\n  if (sum === 100) {\\n    return [lines, sum]\\n  }\\n  return [lines+1, sum];\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar numberOfLines = function (widths, S) {\\n  let _S = S.split(\"\");\\n  let sum = 0, lines = 0;\\n  for (let i = 0; i < _S.length; i++){\\n    sum += widths[_S[i].charCodeAt(0) - 97];\\n    if (sum === 100) {\\n      sum = 0;\\n      lines++;\\n    } else if (sum > 100) {\\n      sum = 0;\\n      lines++;\\n      i--;\\n    }\\n  }\\n  if (sum === 100) {\\n    return [lines, sum]\\n  }\\n  return [lines+1, sum];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 434774,
                "title": "java-simple-solution-faster-than-100",
                "content": "```\\npublic int[] numberOfLines(int[] widths, String S) {\\n\\tint lineWidth = 0, lines = 1;\\n\\tfor(char c:S.toCharArray()) {\\n\\t\\tint letterWidth = widths[c-\\'a\\'];\\n\\t\\tif(lineWidth + letterWidth <= 100) {\\n\\t\\t\\tlineWidth += letterWidth;\\n\\t\\t} else {\\n\\t\\t\\tlineWidth = letterWidth;\\n\\t\\t\\tlines++;\\n\\t\\t}\\n\\t}\\n\\tint sol[] = {lines, lineWidth};\\n\\treturn sol;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int[] numberOfLines(int[] widths, String S) {\\n\\tint lineWidth = 0, lines = 1;\\n\\tfor(char c:S.toCharArray()) {\\n\\t\\tint letterWidth = widths[c-\\'a\\'];\\n\\t\\tif(lineWidth + letterWidth <= 100) {\\n\\t\\t\\tlineWidth += letterWidth;\\n\\t\\t} else {\\n\\t\\t\\tlineWidth = letterWidth;\\n\\t\\t\\tlines++;\\n\\t\\t}\\n\\t}\\n\\tint sol[] = {lines, lineWidth};\\n\\treturn sol;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 396131,
                "title": "easy-python-using-dict-or-ord",
                "content": "Please note the single comment with the ord() function that could replace the alphabet dictionary. ord(\\'a\\') is 97.\\n```\\n        alphabet = {\\'a\\': 0, \\'b\\': 1, \\'c\\': 2, \\'d\\': 3, \\'e\\': 4, \\'f\\': 5, \\'g\\': 6, \\'h\\': 7, \\'i\\': 8, \\'j\\': 9, \\'k\\': 10, \\'l\\': 11, \\'m\\': 12, \\'n\\': 13, \\'o\\': 14, \\'p\\': 15, \\'q\\': 16, \\'r\\': 17, \\'s\\': 18, \\'t\\': 19, \\'u\\': 20, \\'v\\': 21, \\'w\\': 22, \\'x\\': 23, \\'y\\': 24, \\'z\\': 25}\\n        count, total = 1, 0\\n        for char in S:\\n            value = widths[alphabet[char]]\\n            # could also use value = widths[ord(char)-97]\\n            if total + value <= 100:\\n                total += value\\n            else:\\n                count += 1\\n                total = value\\n        return [count, total]\\n```",
                "solutionTags": [],
                "code": "```\\n        alphabet = {\\'a\\': 0, \\'b\\': 1, \\'c\\': 2, \\'d\\': 3, \\'e\\': 4, \\'f\\': 5, \\'g\\': 6, \\'h\\': 7, \\'i\\': 8, \\'j\\': 9, \\'k\\': 10, \\'l\\': 11, \\'m\\': 12, \\'n\\': 13, \\'o\\': 14, \\'p\\': 15, \\'q\\': 16, \\'r\\': 17, \\'s\\': 18, \\'t\\': 19, \\'u\\': 20, \\'v\\': 21, \\'w\\': 22, \\'x\\': 23, \\'y\\': 24, \\'z\\': 25}\\n        count, total = 1, 0\\n        for char in S:\\n            value = widths[alphabet[char]]\\n            # could also use value = widths[ord(char)-97]\\n            if total + value <= 100:\\n                total += value\\n            else:\\n                count += 1\\n                total = value\\n        return [count, total]\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 322718,
                "title": "c-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines =0;\\n        int last_line_size=0;\\n        static const int LEN = 100;\\n       for(int i=0,n=S.size();i<n;++i)\\n       {\\n           char c = S[i];\\n           int len = widths[c-\\'a\\'];\\n\\t\\t   //write on current line \\n           if(LEN-last_line_size >= len)\\n           {\\n              last_line_size+= len;\\n           }else  //move to next line\\n           {\\n               ++lines;\\n               last_line_size= len;\\n           }\\n       }\\n        return {lines+1,last_line_size};\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int lines =0;\\n        int last_line_size=0;\\n        static const int LEN = 100;\\n       for(int i=0,n=S.size();i<n;++i)\\n       {\\n           char c = S[i];\\n           int len = widths[c-\\'a\\'];\\n\\t\\t   //write on current line \\n           if(LEN-last_line_size >= len)\\n           {\\n              last_line_size+= len;\\n           }",
                "codeTag": "Java"
            },
            {
                "id": 280849,
                "title": "easy-to-understand-python-solution-36ms-only",
                "content": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        dic={}\\n        for i,j in zip(string.ascii_lowercase,widths):\\n            dic[i]=j\\n        sumd=0\\n        line=1\\n        line_dic={}\\n        for i in S:\\n            if(sumd+dic[i]>100):\\n                line_dic[line]=sumd\\n                line+=1\\n                sumd=0                \\n            sumd+=dic[i]\\n        line_dic[line]=sumd\\n        return [line,line_dic[line]]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], S: str) -> List[int]:\\n        dic={}\\n        for i,j in zip(string.ascii_lowercase,widths):\\n            dic[i]=j\\n        sumd=0\\n        line=1\\n        line_dic={}\\n        for i in S:\\n            if(sumd+dic[i]>100):\\n                line_dic[line]=sumd\\n                line+=1\\n                sumd=0                \\n            sumd+=dic[i]\\n        line_dic[line]=sumd\\n        return [line,line_dic[line]]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 244713,
                "title": "c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int line=1,unit=0;\\n        for(auto c:S)\\n        {\\n            unit+=widths[c-\\'a\\'];\\n            if(unit>100)\\n            {\\n                unit=widths[c-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        vector<int> res;\\n        res.push_back(line);\\n        res.push_back(unit);\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n        int line=1,unit=0;\\n        for(auto c:S)\\n        {\\n            unit+=widths[c-\\'a\\'];\\n            if(unit>100)\\n            {\\n                unit=widths[c-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        vector<int> res;\\n        res.push_back(line);\\n        res.push_back(unit);\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 211157,
                "title": "c-solution",
                "content": "```\\nint *numberOfLines(int *widths, int widthsSize, char *S, int *returnSize) {\\n    int *result = malloc(sizeof(int) * (*returnSize = 2));\\n    int lines = 1, remain = 0;\\n    char *p = S;\\n    while (*p != \\'\\\\0\\') {\\n        int width = widths[*p - \\'a\\'];\\n        if (remain + width > 100) {\\n            lines++;\\n            remain = width;\\n        } else if (remain + width == 100) {\\n            lines++;\\n            remain = 0;\\n        } else {\\n            remain += width;\\n        }\\n        p++;\\n    }\\n    result[0] = lines;\\n    result[1] = remain;\\n    return result;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint *numberOfLines(int *widths, int widthsSize, char *S, int *returnSize) {\\n    int *result = malloc(sizeof(int) * (*returnSize = 2));\\n    int lines = 1, remain = 0;\\n    char *p = S;\\n    while (*p != \\'\\\\0\\') {\\n        int width = widths[*p - \\'a\\'];\\n        if (remain + width > 100) {\\n            lines++;\\n            remain = width;\\n        } else if (remain + width == 100) {\\n            lines++;\\n            remain = 0;\\n        } else {\\n            remain += width;\\n        }\\n        p++;\\n    }\\n    result[0] = lines;\\n    result[1] = remain;\\n    return result;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 161221,
                "title": "java-4-liner-solution",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n    int reqWidth = 0;      \\n        \\n    for(int i=0;i<S.length();i++){\\n        reqWidth += (reqWidth%100 + widths[S.charAt(i)-\\'a\\'])>100 ?(widths[S.charAt(i) - \\'a\\'] + (100 - reqWidth%100)):widths[S.charAt(i)- \\'a\\'];            \\n    }                 \\n        return new int[]{reqWidth/100+1,reqWidth%100};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n    int reqWidth = 0;      \\n        \\n    for(int i=0;i<S.length();i++){\\n        reqWidth += (reqWidth%100 + widths[S.charAt(i)-\\'a\\'])>100 ?(widths[S.charAt(i) - \\'a\\'] + (100 - reqWidth%100)):widths[S.charAt(i)- \\'a\\'];            \\n    }                 \\n        return new int[]{reqWidth/100+1,reqWidth%100};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 160165,
                "title": "simple-swift-solution",
                "content": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var numOfLine = 1\\n        var numOfUnit = 0\\n        var sum = 0\\n\\n        for code in S.unicodeScalars {\\n            let index: Int = Int(code.value - 97)\\n            sum += widths[index]\\n            if sum > 100 { // \\u9700\\u8981\\u6362\\u884C\\n                numOfLine += 1\\n                sum = widths[index]\\n            }\\n        }\\n\\n        numOfUnit = sum\\n\\n        return [numOfLine, numOfUnit]\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var numOfLine = 1\\n        var numOfUnit = 0\\n        var sum = 0\\n\\n        for code in S.unicodeScalars {\\n            let index: Int = Int(code.value - 97)\\n            sum += widths[index]\\n            if sum > 100 { // \\u9700\\u8981\\u6362\\u884C\\n                numOfLine += 1\\n                sum = widths[index]\\n            }\\n        }\\n\\n        numOfUnit = sum\\n\\n        return [numOfLine, numOfUnit]\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 158036,
                "title": "easy-java-using-character-s-ascii-values",
                "content": "```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        int lineValue = 0;\\n        int numLines = 1;\\n        int charVal;\\n        for (int i = 0; i < S.length(); i++) {\\n            charVal = widths[S.charAt(i) - 97];\\n            lineValue += charVal;\\n            if (lineValue > 100) {\\n                lineValue = 0;\\n                numLines++;\\n                lineValue += charVal;\\n            }\\n        }\\n        result[0] = numLines;\\n        result[1] = lineValue;\\n        return result;\\n    }",
                "solutionTags": [],
                "code": "```\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        int lineValue = 0;\\n        int numLines = 1;\\n        int charVal;\\n        for (int i = 0; i < S.length(); i++) {\\n            charVal = widths[S.charAt(i) - 97];\\n            lineValue += charVal;\\n            if (lineValue > 100) {\\n                lineValue = 0;\\n                numLines++;\\n                lineValue += charVal;\\n            }\\n        }\\n        result[0] = numLines;\\n        result[1] = lineValue;\\n        return result;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 149754,
                "title": "easy-java-solution",
                "content": "```\\n\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int width=0,count=1;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            width = width + widths[S.charAt(i) - \\'a\\'];\\n            if(width > 100)\\n            {\\n                count++;\\n                width=widths[S.charAt(i) - \\'a\\'];\\n            }       \\n        }\\n         return new int[] {count, width};\\n        \\n    }\\n}\\n```\\n",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        \\n        int width=0,count=1;\\n        for(int i=0;i<S.length();i++)\\n        {\\n            width = width + widths[S.charAt(i) - \\'a\\'];\\n            if(width > 100)\\n            {\\n                count++;\\n                width=widths[S.charAt(i) - \\'a\\'];\\n            }       \\n        }\\n         return new int[] {count, width};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 145598,
                "title": "python-code-beat-100-for-general-case",
                "content": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dict_letter_widths=dict(zip(list(\\'abcdefghijklmnopqrstuvwxyz\\'),widths))\\n        S_width=[dict_letter_widths[s] for s in S]\\n        rows=1\\n        start=0\\n        for idx, each_w in enumerate(S_width):\\n            if sum(S_width[start:idx+1])>100:\\n                rows+=1\\n                start=idx\\n        \\n        last_row=sum(S_width[start:])\\n        return [rows,last_row] \\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dict_letter_widths=dict(zip(list(\\'abcdefghijklmnopqrstuvwxyz\\'),widths))\\n        S_width=[dict_letter_widths[s] for s in S]\\n        rows=1\\n        start=0\\n        for idx, each_w in enumerate(S_width):\\n            if sum(S_width[start:idx+1])>100:\\n                rows+=1\\n                start=idx\\n        \\n        last_row=sum(S_width[start:])\\n        return [rows,last_row] \\n```",
                "codeTag": "Java"
            },
            {
                "id": 140136,
                "title": "straightforward-java",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        result[0] = 1;\\n        for(char c : S.toCharArray()){\\n            int next = widths[c - \\'a\\'];\\n            if(next + result[1] > 100){\\n                result[0]++;\\n                result[1] = 0;\\n            }\\n            result[1] += next;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        int[] result = new int[2];\\n        result[0] = 1;\\n        for(char c : S.toCharArray()){\\n            int next = widths[c - \\'a\\'];\\n            if(next + result[1] > 100){\\n                result[0]++;\\n                result[1] = 0;\\n            }\\n            result[1] += next;\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 131362,
                "title": "my-python-script",
                "content": "class Solution:\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dic = {}\\n        for i in S:\\n            dic[i] = widths[ord(i) - ord(\\'a\\')]\\n        count = 0\\n        tmp = 0\\n        for i in S:\\n            tmp+= dic[i]\\n            if tmp ==100:\\n                count += 1\\n                tmp = 0\\n\\t\\t\\t\\t\\t elif tmp>100:\\n\\t\\t\\t\\t\\t     count += 1\\n\\t\\t\\t\\t\\t\\t\\t tmp = 0\\n\\t\\t\\t\\t\\t\\t\\t tmp += dic[i]\\n\\t\\t\\tres = []\\n\\t\\t\\tif tmp != 0:\\n\\t\\t\\t    count += 1\\n\\t\\t\\tres.append(count)\\n\\t\\t\\tres.append(tmp)\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "class Solution:\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        dic = {}",
                "codeTag": "Java"
            },
            {
                "id": 124249,
                "title": "my-swift-answer",
                "content": "```\\nfunc numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var asciiArray = S.unicodeScalars.filter{$0.isASCII}.map{Int($0.value) - 97}\\n        var totalUnits = 0\\n        var line = 1\\n        for i in 0..<asciiArray.count {\\n            if (totalUnits + widths[asciiArray[i]]) > 100 {\\n                line = line + 1\\n                totalUnits = widths[asciiArray[i]]\\n            }\\n            else {\\n                totalUnits = totalUnits + widths[asciiArray[i]]\\n            }\\n        }\\n        \\n        return [line, totalUnits]\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\nfunc numberOfLines(_ widths: [Int], _ S: String) -> [Int] {\\n        var asciiArray = S.unicodeScalars.filter{$0.isASCII}.map{Int($0.value) - 97}\\n        var totalUnits = 0\\n        var line = 1\\n        for i in 0..<asciiArray.count {\\n            if (totalUnits + widths[asciiArray[i]]) > 100 {\\n                line = line + 1\\n                totalUnits = widths[asciiArray[i]]\\n            }\\n            else {\\n                totalUnits = totalUnits + widths[asciiArray[i]]\\n            }\\n        }\\n        \\n        return [line, totalUnits]\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120746,
                "title": "my-easy-c-solution",
                "content": "```\\nint* numberOfLines(int* widths, int widthsSize, char* S, int* returnSize) {\\n    int i = 0;\\n    int len = 0;\\n    int sumWidth = 0;\\n    \\n    // algo\\n    for(i = 0 ; S[i] ; i++) {\\n        len = len + widths[S[i] - \\'a\\'];\\n        if(len > 100) {\\n            len = 0;\\n            sumWidth++;\\n            i--;\\n        }\\n    }\\n    \\n    // return code\\n    *returnSize = 2;\\n    int* res = (int *)malloc(sizeof(int) * (*returnSize));\\n    res[0] = sumWidth + 1;\\n    res[1] = len;\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint* numberOfLines(int* widths, int widthsSize, char* S, int* returnSize) {\\n    int i = 0;\\n    int len = 0;\\n    int sumWidth = 0;\\n    \\n    // algo\\n    for(i = 0 ; S[i] ; i++) {\\n        len = len + widths[S[i] - \\'a\\'];\\n        if(len > 100) {\\n            len = 0;\\n            sumWidth++;\\n            i--;\\n        }\\n    }\\n    \\n    // return code\\n    *returnSize = 2;\\n    int* res = (int *)malloc(sizeof(int) * (*returnSize));\\n    res[0] = sumWidth + 1;\\n    res[1] = len;\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 120724,
                "title": "easy-to-understand-python-33ms",
                "content": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        total = 0\\n        lines = 0\\n        for char in S:\\n            total += widths[ord(char) - ord(\"a\")]\\n            # move to a new line\\n            if total > 100:\\n                total = widths[ord(char) - ord(\"a\")]\\n                lines += 1\\n            \\n        return [lines+1, total]\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, S):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type S: str\\n        :rtype: List[int]\\n        \"\"\"\\n        total = 0\\n        lines = 0\\n        for char in S:\\n            total += widths[ord(char) - ord(\"a\")]\\n            # move to a new line\\n            if total > 100:\\n                total = widths[ord(char) - ord(\"a\")]\\n                lines += 1\\n            \\n        return [lines+1, total]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 120702,
                "title": "java-solution-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        char[] cArr = S.toCharArray();\\n        \\n        int width = 0, lineCount = 1;\\n        for(char c : cArr){\\n            if(width + widths[c - \\'a\\'] > 100){\\n                lineCount++;\\n                width = 0;\\n            }\\n            width += widths[c - \\'a\\'];\\n        }\\n        \\n        return new int[]{lineCount, width};\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String S) {\\n        char[] cArr = S.toCharArray();\\n        \\n        int width = 0, lineCount = 1;\\n        for(char c : cArr){\\n            if(width + widths[c - \\'a\\'] > 100){\\n                lineCount++;\\n                width = 0;\\n            }\\n            width += widths[c - \\'a\\'];\\n        }\\n        \\n        return new int[]{lineCount, width};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 120664,
                "title": "accepted-java-solution",
                "content": "```\\n\\tpublic int[] numberOfLines(int[] widths, String S) {\\n\\t\\tint[] res = { 0, 0 };\\n\\t\\tif (S == null || S.length() == 0) {\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\tint lastLineLength = 0;\\n\\t\\tint lineCount = 1;\\n\\n\\t\\tfor (char c : S.toCharArray()) {\\n\\t\\t\\tint wordlLength = widths[c - \\'a\\'];\\n\\t\\t\\tif (lastLineLength + wordlLength > 100) {\\n\\t\\t\\t\\t++lineCount;\\n\\t\\t\\t\\tlastLineLength = wordlLength;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlastLineLength += wordlLength;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tres[0] = lineCount;\\n\\t\\tres[1] = lastLineLength;\\n\\t\\treturn res;\\n\\n\\t}\\n\\t",
                "solutionTags": [],
                "code": "```\\n\\tpublic int[] numberOfLines(int[] widths, String S) {\\n\\t\\tint[] res = { 0, 0 };\\n\\t\\tif (S == null || S.length() == 0) {\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t\\tint lastLineLength = 0;\\n\\t\\tint lineCount = 1;\\n\\n\\t\\tfor (char c : S.toCharArray()) {\\n\\t\\t\\tint wordlLength = widths[c - \\'a\\'];\\n\\t\\t\\tif (lastLineLength + wordlLength > 100) {\\n\\t\\t\\t\\t++lineCount;\\n\\t\\t\\t\\tlastLineLength = wordlLength;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tlastLineLength += wordlLength;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tres[0] = lineCount;\\n\\t\\tres[1] = lastLineLength;\\n\\t\\treturn res;\\n\\n\\t}\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 120646,
                "title": "my-simple-6-lines-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n\\tint cnt = 1, cur = 0;\\n\\tfor (char c : S) {\\n\\t    int t = widths[c - \\'a\\'];\\n\\t    if (cur + t > 100) ++cnt;\\n\\t    cur = (cur + t > 100) ? t : cur + t;\\n\\t}\\n\\treturn {cnt, cur};\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string S) {\\n\\tint cnt = 1, cur = 0;\\n\\tfor (char c : S) {\\n\\t    int t = widths[c - \\'a\\'];\\n\\t    if (cur + t > 100) ++cnt;\\n\\t    cur = (cur + t > 100) ? t : cur + t;\\n\\t}",
                "codeTag": "Java"
            },
            {
                "id": 4104946,
                "title": "beat-100",
                "content": "# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n\\n    private static final int LINE_WIDTH_PX = 100;\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines = 0;\\n        int lastLineWidth = 0;\\n\\n        for (int i = 0, limit = s.length(), line = LINE_WIDTH_PX; i < limit; i++) {\\n            int c = s.charAt(i) - \\'a\\';\\n\\n            int width = widths[c];\\n\\n            // start new line?\\n            if (line + width > LINE_WIDTH_PX) {\\n                line = width;\\n                lines++;\\n            } else {\\n                line += width;\\n            }\\n\\n            lastLineWidth = line;\\n        }\\n\\n        return new int[] {lines, lastLineWidth};\\n    }\\n\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n\\n    private static final int LINE_WIDTH_PX = 100;\\n\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines = 0;\\n        int lastLineWidth = 0;\\n\\n        for (int i = 0, limit = s.length(), line = LINE_WIDTH_PX; i < limit; i++) {\\n            int c = s.charAt(i) - \\'a\\';\\n\\n            int width = widths[c];\\n\\n            // start new line?\\n            if (line + width > LINE_WIDTH_PX) {\\n                line = width;\\n                lines++;\\n            } else {\\n                line += width;\\n            }\\n\\n            lastLineWidth = line;\\n        }\\n\\n        return new int[] {lines, lastLineWidth};\\n    }\\n\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096825,
                "title": "easy-best-c-solution",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity -->\\n<!-- - Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines = 1, widthSum = 0;\\n        vector<int> arr;\\n        while(i < s.length())\\n        {\\n            j = s[i] - 97;\\n            if((widthSum + widths[j]) <= 100)\\n            {\\n                widthSum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                widthSum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(widthSum);\\n        return arr;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int i=0, j, lines = 1, widthSum = 0;\\n        vector<int> arr;\\n        while(i < s.length())\\n        {\\n            j = s[i] - 97;\\n            if((widthSum + widths[j]) <= 100)\\n            {\\n                widthSum += widths[j];\\n                i++;\\n            }\\n            else\\n            {\\n                lines++;\\n                widthSum = 0;\\n            }\\n        }\\n        arr.push_back(lines);\\n        arr.push_back(widthSum);\\n        return arr;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4096180,
                "title": "easy-python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndef func(widths,s):\\n    t=0\\n    l=[]\\n    k=0\\n    for i in range(len(s)):\\n        t+=widths[ord(s[i])-ord(\\'a\\')]\\n        k+=widths[ord(s[i])-ord(\\'a\\')]\\n        if t==100:\\n            l.append(t)\\n            t=0\\n        elif t>=100:\\n            t-=widths[ord(s[i])-ord(\\'a\\')]\\n            l.append(t)\\n            t=widths[ord(s[i])-ord(\\'a\\')]\\n    if k!=sum(l):\\n        l.append(k-sum(l))\\n    print(l)\\n    return [len(l),l[-1]]\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        return func(widths,s)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\ndef func(widths,s):\\n    t=0\\n    l=[]\\n    k=0\\n    for i in range(len(s)):\\n        t+=widths[ord(s[i])-ord(\\'a\\')]\\n        k+=widths[ord(s[i])-ord(\\'a\\')]\\n        if t==100:\\n            l.append(t)\\n            t=0\\n        elif t>=100:\\n            t-=widths[ord(s[i])-ord(\\'a\\')]\\n            l.append(t)\\n            t=widths[ord(s[i])-ord(\\'a\\')]\\n    if k!=sum(l):\\n        l.append(k-sum(l))\\n    print(l)\\n    return [len(l),l[-1]]\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        return func(widths,s)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4094896,
                "title": "1-for-loop-solve",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Don\\'t forget to use \\'i--\\' when the linewidth > 100\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n    let string = \"abcdefghijklmnopqrstuvwxyz\";\\n    string = string.split(\"\");\\n    let width = 0;\\n    let lastline = 0;\\n    let line = 0;\\n    for(let i =0;i<s.length;i++){\\n        const index = string.indexOf(s[i]);\\n        width+=widths[index];\\n        if((lastline += widths[index]) > 100){\\n            lastline = 0;\\n            line++\\n            i--\\n        }\\n        if(i == s.length-1 && lastline != 0) line++;\\n\\n    }\\n\\n    result = [line++,lastline]\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n    let string = \"abcdefghijklmnopqrstuvwxyz\";\\n    string = string.split(\"\");\\n    let width = 0;\\n    let lastline = 0;\\n    let line = 0;\\n    for(let i =0;i<s.length;i++){\\n        const index = string.indexOf(s[i]);\\n        width+=widths[index];\\n        if((lastline += widths[index]) > 100){\\n            lastline = 0;\\n            line++\\n            i--\\n        }\\n        if(i == s.length-1 && lastline != 0) line++;\\n\\n    }\\n\\n    result = [line++,lastline]\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4090237,
                "title": "solution-in-java",
                "content": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int total_lines =0;\\n        int curr_pixel=0;\\n        for (int i = 0; i <s.length() ;i++ ) {\\n            if(curr_pixel+widths[s.charAt(i)-\\'a\\']>100){\\n                curr_pixel=0;\\n                total_lines++;\\n            }\\n            curr_pixel+=widths[s.charAt(i)-\\'a\\'];\\n        }\\n        ans[0]=total_lines+1;\\n        ans[1]=curr_pixel;\\n        return ans;        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] ans = new int[2];\\n        int total_lines =0;\\n        int curr_pixel=0;\\n        for (int i = 0; i <s.length() ;i++ ) {\\n            if(curr_pixel+widths[s.charAt(i)-\\'a\\']>100){\\n                curr_pixel=0;\\n                total_lines++;\\n            }\\n            curr_pixel+=widths[s.charAt(i)-\\'a\\'];\\n        }\\n        ans[0]=total_lines+1;\\n        ans[1]=curr_pixel;\\n        return ans;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4089279,
                "title": "easy-java-solution-beats-100-with-time-and-90-with-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         \\n        int l=1;\\n        int ans=0;\\n\\n    for(char c:s.toCharArray()){\\n        int a = widths[c-\\'a\\'];\\n        if(ans+a>100){\\n            ans =a;\\n            l++;\\n        }\\n        else\\n        ans=ans+a;      \\n    \\n    }\\n    int [] x={l,ans};\\n    return x;\\n    \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         \\n        int l=1;\\n        int ans=0;\\n\\n    for(char c:s.toCharArray()){\\n        int a = widths[c-\\'a\\'];\\n        if(ans+a>100){\\n            ans =a;\\n            l++;\\n        }\\n        else\\n        ans=ans+a;      \\n    \\n    }\\n    int [] x={l,ans};\\n    return x;\\n    \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4087778,
                "title": "beats-100-memory-leveraging-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe intuition behind this solution is to iterate through the input string `s`, calculate the width of each character based on the `widths` array, and keep track of the current row and count of characters in that row. When the count exceeds a certain limit (in this case, 100), we move to the next row.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Initialize variables `row` to `1` (to represent the first row) and `count` to `0` (to keep track of character count in the current row).\\n2. Iterate through each character in the input string `s`.\\n3. For each character, calculate its width using the `widths` array based on its `ASCII` code.\\n4. Check if adding the character\\'s width to the current `count` would exceed the row width limit of `100`. If it does, increment the `row` counter, decrement `i` to process the same character in the next row, and reset `count` to 0. Continue to the next character.\\n5. If adding the character\\'s width doesn\\'t exceed the row width limit, update `count` with the new width.\\n6. Finally, return an array containing the `row` count and the remaining `count` (characters in the last row).\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. O(n) -->\\nThe time complexity of this solution is `O(n)`, where `n` is the length of the input string `s`. We iterate through the string once.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. O(n) -->\\nThe space complexity of this solution is `O(1)` since we use a constant amount of additional space regardless of the input size. We only maintain a few variables to store row count and character count.\\n\\n\\n# Code\\n```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let row = 1;\\n    let count = 0;\\n    for(let i = 0; i < s.length; i++){\\n        const width = widths[s.charCodeAt(i) - 97];\\n        if(count + width > 100) { row++; i--; count = 0; continue; }\\n        count += width;\\n    }\\n\\n    return [row, count];\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let row = 1;\\n    let count = 0;\\n    for(let i = 0; i < s.length; i++){\\n        const width = widths[s.charCodeAt(i) - 97];\\n        if(count + width > 100) { row++; i--; count = 0; continue; }\\n        count += width;\\n    }\\n\\n    return [row, count];\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084849,
                "title": "python-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        count = 0 \\n        line = 0\\n        for i in s:\\n            v=widths[ord(i)-ord(\\'a\\')]\\n            if count+v>100:\\n                count=v\\n                line+=1\\n            else:\\n                count+=v\\n        return [line+1,count]\\n\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def numberOfLines(self, widths, s):\\n        \"\"\"\\n        :type widths: List[int]\\n        :type s: str\\n        :rtype: List[int]\\n        \"\"\"\\n        count = 0 \\n        line = 0\\n        for i in s:\\n            v=widths[ord(i)-ord(\\'a\\')]\\n            if count+v>100:\\n                count=v\\n                line+=1\\n            else:\\n                count+=v\\n        return [line+1,count]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084728,
                "title": "number-of-lines-to-write-string-java-easy-solution",
                "content": "# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n        int sumCount = 1;\\n        int sumOfLine = 0;\\n        for (char c:s.toCharArray()) {\\n            if((sumOfLine=sumOfLine+widths[(int)c - 97])<=100){\\n                sumOfLine-=widths[(int)c - 97];\\n                sumOfLine+=widths[(int)c - 97];\\n            }else {\\n                sumCount++;\\n                sumOfLine = 0;\\n                sumOfLine+=widths[(int)c - 97];            }\\n        }\\n        res[0] = sumCount;\\n        res[1] = sumOfLine;\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] res = new int[2];\\n        int sumCount = 1;\\n        int sumOfLine = 0;\\n        for (char c:s.toCharArray()) {\\n            if((sumOfLine=sumOfLine+widths[(int)c - 97])<=100){\\n                sumOfLine-=widths[(int)c - 97];\\n                sumOfLine+=widths[(int)c - 97];\\n            }else {\\n                sumCount++;\\n                sumOfLine = 0;\\n                sumOfLine+=widths[(int)c - 97];            }\\n        }\\n        res[0] = sumCount;\\n        res[1] = sumOfLine;\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4080224,
                "title": "java-easy-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum=0,c=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if((sum+widths[s.charAt(i)-\\'a\\'])>100)\\n            {\\n                sum=widths[s.charAt(i)-\\'a\\'];\\n                c++;\\n                continue;\\n            }\\n            else \\n            {\\n                sum=sum+widths[s.charAt(i)-\\'a\\'];\\n            }\\n            \\n        }\\n        if(sum>0)\\n        {\\n            c++;\\n        }\\n        int a[]=new int[2];\\n        a[0]=c;\\n        a[1]=sum;\\n        return a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum=0,c=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if((sum+widths[s.charAt(i)-\\'a\\'])>100)\\n            {\\n                sum=widths[s.charAt(i)-\\'a\\'];\\n                c++;\\n                continue;\\n            }\\n            else \\n            {\\n                sum=sum+widths[s.charAt(i)-\\'a\\'];\\n            }\\n            \\n        }\\n        if(sum>0)\\n        {\\n            c++;\\n        }\\n        int a[]=new int[2];\\n        a[0]=c;\\n        a[1]=sum;\\n        return a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077223,
                "title": "c-simple-solution-beats-100",
                "content": "# Intuition\\nThe intuition behind the provided code is to efficiently determine how many lines are needed to write a given string \\'s\\' while ensuring that each line does not exceed 100 pixels in width. To achieve this, the code iterates through each character in the input string \\'s\\' and keeps track of the current line\\'s width (\\'curr\\'). When adding the width of a character to \\'curr\\' would exceed 100 pixels, the code starts a new line, increments the line count, and resets \\'curr\\' to the width of the current character. This process continues until all characters in \\'s\\' are processed, providing the total number of lines needed and the width of the last line.\\n\\n# Approach\\nThe approach taken in the code is straightforward and efficient. It utilizes a single pass through the input string \\'s\\', making it linear in terms of time complexity. By keeping track of the current line\\'s width and resetting it as needed, the code ensures that no line exceeds the specified width constraint. The use of a \\'result\\' vector with two elements simplifies the storage of the output, allowing for the easy retrieval of the total number of lines and the width of the last line. Overall, this approach efficiently solves the problem of formatting a string within pixel constraints.\\n\\n# Complexity\\n- Time complexity:\\n$$O(n)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    std::vector<int> numberOfLines(std::vector<int> &widths, std::string s) {\\n        int curr = 0;\\n        std::vector<int> result = {1, 0};\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (curr + widths[s[i] - 97] > 100) {\\n                curr = 0;\\n                result[0]++;\\n            }\\n            curr += widths[s[i] - 97];\\n        }\\n        result[1] = curr;\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    std::vector<int> numberOfLines(std::vector<int> &widths, std::string s) {\\n        int curr = 0;\\n        std::vector<int> result = {1, 0};\\n        for (int i = 0; i < s.size(); ++i) {\\n            if (curr + widths[s[i] - 97] > 100) {\\n                curr = 0;\\n                result[0]++;\\n            }\\n            curr += widths[s[i] - 97];\\n        }\\n        result[1] = curr;\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4072334,
                "title": "c-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];\\n        int lineCount = 0;\\n        int currentLinewidth = 0;\\n        for(int i=0; i<s.Length; i++){\\n            if(currentLinewidth + widths[(int)s[i]-97] <=100){\\n                currentLinewidth += widths[((int)s[i])-97];\\n            }\\n            else{\\n                lineCount++;\\n                currentLinewidth = widths[((int)s[i])-97];\\n            }\\n        }\\n        result[0]= currentLinewidth > 0 ? ++lineCount : lineCount;\\n        result[1]=currentLinewidth;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];\\n        int lineCount = 0;\\n        int currentLinewidth = 0;\\n        for(int i=0; i<s.Length; i++){\\n            if(currentLinewidth + widths[(int)s[i]-97] <=100){\\n                currentLinewidth += widths[((int)s[i])-97];\\n            }\\n            else{\\n                lineCount++;\\n                currentLinewidth = widths[((int)s[i])-97];\\n            }\\n        }\\n        result[0]= currentLinewidth > 0 ? ++lineCount : lineCount;\\n        result[1]=currentLinewidth;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068183,
                "title": "c-simple-math",
                "content": "# No need desctiption\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l = 1;\\n        int sum = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if (sum + widths[s[i] - \\'a\\'] > 100) {\\n                l++;\\n                sum = 0;\\n            }\\n            sum += widths[s[i] - \\'a\\'];\\n        }\\n        return {l, sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int l = 1;\\n        int sum = 0;\\n        for(int i = 0; i < s.size(); ++i) {\\n            if (sum + widths[s[i] - \\'a\\'] > 100) {\\n                l++;\\n                sum = 0;\\n            }\\n            sum += widths[s[i] - \\'a\\'];\\n        }\\n        return {l, sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4054779,
                "title": "easiest-code-with-no-extra-memory",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int arr[] = new int[2];\\n        for(char ch : s.toCharArray()){\\n            if(arr[1]+widths[ch-\\'a\\'] > 100){\\n                arr[0]++;\\n                arr[1] = 0;\\n            }\\n            arr[1] += widths[ch-\\'a\\'];\\n        }\\n        if(arr[1] > 0)\\n            arr[0]++;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int arr[] = new int[2];\\n        for(char ch : s.toCharArray()){\\n            if(arr[1]+widths[ch-\\'a\\'] > 100){\\n                arr[0]++;\\n                arr[1] = 0;\\n            }\\n            arr[1] += widths[ch-\\'a\\'];\\n        }\\n        if(arr[1] > 0)\\n            arr[0]++;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4051790,
                "title": "1ms-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines=0;\\n        int width=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch=s.charAt(i);\\n            int x=ch-\\'a\\';\\n            sum+=widths[x];\\n            if(sum==100)\\n            {\\n                lines++;\\n                width=sum;\\n                sum=0;\\n            }\\n            if(sum>100)\\n            {\\n                lines++;\\n                width=sum-widths[x];\\n                sum=widths[x];\\n            }\\n        }\\n\\n        if(sum!=0)\\n        {\\n            lines++;\\n            width=sum;\\n        }\\n\\n        int answer[]=new int[2];\\n        answer[0]=lines;\\n        answer[1]=width;\\n        return answer;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int lines=0;\\n        int width=0;\\n        int sum=0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch=s.charAt(i);\\n            int x=ch-\\'a\\';\\n            sum+=widths[x];\\n            if(sum==100)\\n            {\\n                lines++;\\n                width=sum;\\n                sum=0;\\n            }\\n            if(sum>100)\\n            {\\n                lines++;\\n                width=sum-widths[x];\\n                sum=widths[x];\\n            }\\n        }\\n\\n        if(sum!=0)\\n        {\\n            lines++;\\n            width=sum;\\n        }\\n\\n        int answer[]=new int[2];\\n        answer[0]=lines;\\n        answer[1]=width;\\n        return answer;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4043915,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(N)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n  let width = 0;\\n  let slength = 1; // Initialize to 1 for the first line\\n\\n  for (let i = 0; i < s.length; i++) {\\n    if (width + widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)] > 100) {\\n      slength++;\\n      width = 0;\\n    }\\n    width += widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n  }\\n\\n  return [slength, width];\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {number[]} widths\\n * @param {string} s\\n * @return {number[]}\\n */\\nvar numberOfLines = function(widths, s) {\\n  let width = 0;\\n  let slength = 1; // Initialize to 1 for the first line\\n\\n  for (let i = 0; i < s.length; i++) {\\n    if (width + widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)] > 100) {\\n      slength++;\\n      width = 0;\\n    }\\n    width += widths[s.charCodeAt(i) - \\'a\\'.charCodeAt(0)];\\n  }\\n\\n  return [slength, width];\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4043045,
                "title": "simple-and-easily-understandable-cpp-solution-that-beats-100-users",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans(2,0);\\n        int sum = 0;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            int num = widths[s[i]-\\'a\\'];\\n            if(sum+num<=100)\\n            {\\n                sum+=num;\\n            }\\n            else\\n            {\\n                ans[0]++;\\n                sum = num;\\n            }\\n        }\\n        ans[1] = sum;\\n        if(sum)\\n            ans[0]++;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans(2,0);\\n        int sum = 0;\\n        int n = s.length();\\n        for(int i=0;i<n;i++)\\n        {\\n            int num = widths[s[i]-\\'a\\'];\\n            if(sum+num<=100)\\n            {\\n                sum+=num;\\n            }\\n            else\\n            {\\n                ans[0]++;\\n                sum = num;\\n            }\\n        }\\n        ans[1] = sum;\\n        if(sum)\\n            ans[0]++;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4042712,
                "title": "k",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nclass Solution {\\n  int l(char c, vector<int>& widths) {\\n    int asint = c - \\'a\\';\\n    return widths[asint];\\n  }\\n\\n public:\\n  vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int> res(2);\\n    int lineCount = 1;\\n    int curTotal = 0;\\n    for (char c: s) {\\n      int w = l(c,widths);\\n      if (curTotal+w > 100) {\\n        curTotal=w;\\n        lineCount++;\\n      } else {\\n        curTotal+=w;\\n      }\\n    }\\n    res[0] = lineCount;\\n    res[1] = curTotal;\\n    return res;\\n  }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\n\\nclass Solution {\\n  int l(char c, vector<int>& widths) {\\n    int asint = c - \\'a\\';\\n    return widths[asint];\\n  }\\n\\n public:\\n  vector<int> numberOfLines(vector<int>& widths, string s) {\\n    vector<int> res(2);\\n    int lineCount = 1;\\n    int curTotal = 0;\\n    for (char c: s) {\\n      int w = l(c,widths);\\n      if (curTotal+w > 100) {\\n        curTotal=w;\\n        lineCount++;\\n      } else {\\n        curTotal+=w;\\n      }\\n    }\\n    res[0] = lineCount;\\n    res[1] = curTotal;\\n    return res;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4040002,
                "title": "fastest-c-beats-100-easy-to-understand",
                "content": "\\n\\n# Complexity\\n- Time complexity: Asymptotically -> O(n^2), practically -> O(n), because we traversed the array only once. And thus, TC only depends on the size of the array (linear).\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1) No extra space used.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans;\\n        int i=0;\\n        int cnt=0;\\n        int row=0;\\n        while(i<s.size())\\n        {\\n            int count=0;\\n            cnt=0;\\n\\n            while(i<s.size() and (cnt+widths[s[i]-\\'a\\'])<=100)\\n            {\\n                cnt+=widths[s[i]-\\'a\\'];\\n                i++;\\n            }\\n            row+=1;\\n        }\\n        return {row,cnt};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> ans;\\n        int i=0;\\n        int cnt=0;\\n        int row=0;\\n        while(i<s.size())\\n        {\\n            int count=0;\\n            cnt=0;\\n\\n            while(i<s.size() and (cnt+widths[s[i]-\\'a\\'])<=100)\\n            {\\n                cnt+=widths[s[i]-\\'a\\'];\\n                i++;\\n            }\\n            row+=1;\\n        }\\n        return {row,cnt};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4035548,
                "title": "806-number-of-lines-to-write-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n\\n         int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n\\n         int tempSum = 0, lineCounter = 1;\\n        for (char c : s.toCharArray()) {\\n            int currCharLen = widths[c - \\'a\\'];\\n            if (tempSum + currCharLen <= 100) {\\n                tempSum += currCharLen;\\n            } else {\\n                lineCounter++;\\n                tempSum = currCharLen;\\n            }\\n        }\\n        return new int[]{lineCounter, tempSum};\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4029617,
                "title": "very-easy-simplw-for-beginners-beats-80",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        x=0\\n        y=0\\n        a=[]\\n        b=[]\\n        for i in range(len(s)):\\n            z=widths[(ord(s[i])-ord(\\'a\\'))]\\n            if x+z>100:\\n                y+=1\\n                a.append(x)\\n                x=0\\n            x=x+z\\n        a.append(x)\\n        y+=1\\n        b.append(y)\\n        b.append(a[len(a)-1])\\n        return b\\n\\n        \\n\\n        \\n        \\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        x=0\\n        y=0\\n        a=[]\\n        b=[]\\n        for i in range(len(s)):\\n            z=widths[(ord(s[i])-ord(\\'a\\'))]\\n            if x+z>100:\\n                y+=1\\n                a.append(x)\\n                x=0\\n            x=x+z\\n        a.append(x)\\n        y+=1\\n        b.append(y)\\n        b.append(a[len(a)-1])\\n        return b\\n\\n        \\n\\n        \\n        \\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4018649,
                "title": "easy-c-solution-0ms-beats-100-00-of-users-with-c",
                "content": "\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>ans;\\n        int sum=0;\\n        int line=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            int temp=int(s[i])-97;\\n            sum+=widths[temp];\\n            if(sum>100)\\n            {\\n                sum-=widths[temp];\\n                line++;\\n                sum=0;\\n                i--;\\n            }\\n        }\\n            ans.push_back(line+1);\\n            ans.push_back(sum);\\n            return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>ans;\\n        int sum=0;\\n        int line=0;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            int temp=int(s[i])-97;\\n            sum+=widths[temp];\\n            if(sum>100)\\n            {\\n                sum-=widths[temp];\\n                line++;\\n                sum=0;\\n                i--;\\n            }\\n        }\\n            ans.push_back(line+1);\\n            ans.push_back(sum);\\n            return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4014003,
                "title": "swift-solution-using-reduce-14-2-mb-2-ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 14.2 MB\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 2 ms\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\\n        \\n        var numberOfLines = 0\\n        var lastLine = s.reduce(into: 0) {\\n            var ch = ((Character(extendedGraphemeClusterLiteral: $1).asciiValue ?? 0) - 97)\\n            $0 += widths[Int(ch)]\\n            if($0 > 100) {\\n                $0 = 0\\n                numberOfLines += 1\\n                $0 += widths[Int(ch)]\\n            }\\n        }\\n        if (lastLine != 0 ) {numberOfLines += 1}\\n        return [numberOfLines, lastLine]\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Swift",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    func numberOfLines(_ widths: [Int], _ s: String) -> [Int] {\\n        \\n        var numberOfLines = 0\\n        var lastLine = s.reduce(into: 0) {\\n            var ch = ((Character(extendedGraphemeClusterLiteral: $1).asciiValue ?? 0) - 97)\\n            $0 += widths[Int(ch)]\\n            if($0 > 100) {\\n                $0 = 0\\n                numberOfLines += 1\\n                $0 += widths[Int(ch)]\\n            }\\n        }\\n        if (lastLine != 0 ) {numberOfLines += 1}\\n        return [numberOfLines, lastLine]\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4012905,
                "title": "accepted-solution-for-java-beats-100-online-submissions",
                "content": "![Screenshot 2023-09-07 at 12.23.06 PM.png](https://assets.leetcode.com/users/images/52fd9cf4-55a2-4e6b-a81a-bc7593efba28_1694069607.9465797.png)\\n\\n# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int num_lines = 1;\\n        int width = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + width > 100){\\n                num_lines ++;\\n                width = 0;\\n            }\\n            width += char_width;            \\n        }\\n        result[0] = num_lines;\\n        result[1] = width;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int num_lines = 1;\\n        int width = 0;\\n        for(char c : s.toCharArray()){\\n            int char_width = widths[c - \\'a\\'];\\n            if(char_width + width > 100){\\n                num_lines ++;\\n                width = 0;\\n            }\\n            width += char_width;            \\n        }\\n        result[0] = num_lines;\\n        result[1] = width;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4010754,
                "title": "easiest-solution",
                "content": "\\n\\n# Code\\n```java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```\\n```c++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "solutionTags": [
                    "C++",
                    "Java"
                ],
                "code": "```java []\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int total=0;\\n        int count=0;\\n        String str=\"\";\\n        for(int i=0; i<s.length(); i++){\\n            char a=s.charAt(i);\\n            int ele=widths[a-\\'a\\']; \\n            if(total+ele<=100){\\n               str+=Character.valueOf(a).toString();\\n               total=total+ele; \\n            }else{\\n                count++;\\n                str=Character.valueOf(a).toString();\\n                total=ele;\\n            }           \\n        }\\n         if(!str.equals(\"\")) count++;\\n         int[] array=new int[2];\\n         array[0]=count;\\n         array[1]=total;\\n         return array;\\n    }\\n}\\n```\n```c++ []\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4003861,
                "title": "",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            c = widths[ord(char)-97]\\n            if width + c <= 100:\\n                width += c\\n            else:\\n                lines += 1\\n                width = c\\n        return [lines, width]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        lines, width = 1, 0\\n        for char in s:\\n            c = widths[ord(char)-97]\\n            if width + c <= 100:\\n                width += c\\n            else:\\n                lines += 1\\n                width = c\\n        return [lines, width]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3991225,
                "title": "simple-solution-with-explanation-c",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n1. We have a class called Solution with a method called NumberOfLines that takes two parameters: an array called widths and a string called s.\\n2. We create an integer array result with two elements, initialized to 0. This array will store the number of lines used and the remaining width.\\n3. We initialize a variable count to keep track of the current line\\'s width.\\n4. We loop through each character in the input string s.\\n5. For each character, we calculate its width based on its ASCII value using the widths array. If the character is \\'a\\', we add widths[0] to the current count.\\n6. If the current line width exceeds 100, we start a new line by resetting count to the width of the current character and incrementing the first element of the result array, which represents the number of lines used.\\n7. After processing all characters in s, if there is any remaining width, we increment the number of lines used and store the remaining width in the second element of the result array.\\n8. Finally, we return the result array, which contains the number of lines used and the remaining width. This code helps determine how many lines are needed to print the string s on a display where each character has a specific width as defined in the widths array.\\n\\n# Code\\n```\\nppublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];  // Create an integer array to store the result, initialized with two zeros.\\n        int count = 0;  // Initialize a variable \\'count\\' to keep track of the current line width.\\n\\n        // Loop through each character in the input string \\'s\\'.\\n        for(int i = 0; i < s.Length; i++){\\n            // Calculate the width of the current character by using its ASCII value.\\n            // Subtracting 97 from the ASCII value of the character maps it to the \\'widths\\' array.\\n            // For example, \\'a\\' (ASCII 97) corresponds to widths[0], \\'b\\' (ASCII 98) corresponds to widths[1], and so on.\\n            count += widths[s[i] - 97];\\n\\n            // If the current line width exceeds 100, it means we need to start a new line.\\n            if(count > 100){\\n                // Reset the \\'count\\' to the width of the current character.\\n                count = widths[s[i] - 97];\\n                // Increment the first element of the \\'result\\' array, which represents the number of lines used so far.\\n                result[0]++;\\n            }\\n        }\\n\\n        // If there is any remaining width left after processing all characters in \\'s\\',\\n        // it means we need to count one more line and store the remaining width in the second element of the \\'result\\' array.\\n        if(count > 0){\\n            result[0]++;  // Increment the number of lines.\\n            result[1] = count;  // Store the remaining width.\\n        }\\n\\n        // Return the \\'result\\' array, which contains the number of lines used and the remaining width.\\n        return result;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\nppublic class Solution {\\n    public int[] NumberOfLines(int[] widths, string s) {\\n        int[] result = new int[2];  // Create an integer array to store the result, initialized with two zeros.\\n        int count = 0;  // Initialize a variable \\'count\\' to keep track of the current line width.\\n\\n        // Loop through each character in the input string \\'s\\'.\\n        for(int i = 0; i < s.Length; i++){\\n            // Calculate the width of the current character by using its ASCII value.\\n            // Subtracting 97 from the ASCII value of the character maps it to the \\'widths\\' array.\\n            // For example, \\'a\\' (ASCII 97) corresponds to widths[0], \\'b\\' (ASCII 98) corresponds to widths[1], and so on.\\n            count += widths[s[i] - 97];\\n\\n            // If the current line width exceeds 100, it means we need to start a new line.\\n            if(count > 100){\\n                // Reset the \\'count\\' to the width of the current character.\\n                count = widths[s[i] - 97];\\n                // Increment the first element of the \\'result\\' array, which represents the number of lines used so far.\\n                result[0]++;\\n            }\\n        }\\n\\n        // If there is any remaining width left after processing all characters in \\'s\\',\\n        // it means we need to count one more line and store the remaining width in the second element of the \\'result\\' array.\\n        if(count > 0){\\n            result[0]++;  // Increment the number of lines.\\n            result[1] = count;  // Store the remaining width.\\n        }\\n\\n        // Return the \\'result\\' array, which contains the number of lines used and the remaining width.\\n        return result;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3987017,
                "title": "beats-100-at-time-better-than-half-at-space-complexity-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nint(s[i]) will convert char s[i] to a int, int(s[i])-97 will give it\\'s width in given array (97 is integer value of \\'a\\')\\n# \\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& nums, string s) {\\n        vector<int> ans(2,0);\\n        int lines=1;\\n        int sum=0;\\n        for(int i=0;i<s.size();i++){\\n            int id=int(s[i])-97;\\n            if(nums[id]+sum<=100)    sum+=nums[id];\\n            else{\\n                lines++;\\n                sum=0;\\n                sum+=nums[id];\\n            }\\n        }\\n        ans[0]=lines;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& nums, string s) {\\n        vector<int> ans(2,0);\\n        int lines=1;\\n        int sum=0;\\n        for(int i=0;i<s.size();i++){\\n            int id=int(s[i])-97;\\n            if(nums[id]+sum<=100)    sum+=nums[id];\\n            else{\\n                lines++;\\n                sum=0;\\n                sum+=nums[id];\\n            }\\n        }\\n        ans[0]=lines;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3968560,
                "title": "simple-and-efficient-approach-for-beginners-using-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\nWe can solve this code in many ways. In this case, we solved the problem in a simple way. First keep \\'sum\\' variable equal to \\'Zero(0)\\'. Then keep \\'lines\\' variable as \\'One(1)\\'. Now iterate over the string \\'s\\' and update the \\'sum\\' with respect to the widths array. When \\'sum\\' gets the value greater than \\'100\\', we need to increment the \\'lines\\' variable by one time because each line should contain a maximum value of \\'100\\' only. And at the same time we need to update the \\'sum\\' variable as it gets over \\'100\\'. At last  we need to return a vector containing \\'number of lines\\' and \\'sum in the last line\\'.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int lines=1;\\n        for(int i=0;i<s.size();i++){\\n            sum=sum+widths[s[i]-\\'a\\'];\\n            if(sum>100){\\n                lines++;\\n                sum=widths[s[i]-\\'a\\'];\\n            }\\n            \\n            \\n        }\\n        vector <int> res;\\n        res.push_back(lines);\\n        res.push_back(sum);\\n\\n        return res;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        int lines=1;\\n        for(int i=0;i<s.size();i++){\\n            sum=sum+widths[s[i]-\\'a\\'];\\n            if(sum>100){\\n                lines++;\\n                sum=widths[s[i]-\\'a\\'];\\n            }\\n            \\n            \\n        }\\n        vector <int> res;\\n        res.push_back(lines);\\n        res.push_back(sum);\\n\\n        return res;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3960355,
                "title": "beats-100-solution-for-beginner-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum0=0; // sum of all string widths \\n        int sum=0;\\n        int sum1=0; // count of each line\\n        int count=0; // count of lines\\n        vector<int>ans; // store final ans\\n        vector<int>v; // store each lines width\\n        for(char c : s){\\n            sum0 += widths[c-97]; // sum of all string widths\\n            sum += widths[c-97];\\n            if(sum>100){\\n                v.push_back(sum1);\\n                count++;\\n                sum=sum-sum1;\\n            }\\n            else if(sum<=100){\\n                sum1=sum;\\n            }\\n        }\\n        int last = sum0; \\n        for(int j=0;j<v.size();j++){\\n            last=last-v[j]; //last==last_line_pixel\\n        }\\n        if(last>0) count++;// if last>0, then their should be last line\\n        ans.push_back(count);\\n        ans.push_back(last);\\n\\n        return ans;\\n    }\\n}; // plz upvote\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3954528,
                "title": "c-best-solution",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v(2);\\n        int last_width = 0;\\n        int total_width = 0;\\n        int total_line = 0;\\n        for(int i = 0;i<s.size();i++){\\n            bool flag = 0;\\n            char c= s[i];\\n            if(total_width > 100 || flag){\\n                if(total_width > 100){\\n                    total_width = total_width - widths[s[i-1] - 97];\\n                    --i;\\n                }\\n                last_width = total_width;\\n                total_line++;\\n                total_width = 0;\\n            }\\n            else{\\n                total_width = total_width + widths[c-97];\\n                if(total_width > 100){\\n                    --i;\\n                    flag = 1;\\n                }\\n            }\\n        }\\n        if(total_width >0){\\n            total_line++;\\n            last_width = total_width;\\n        }\\n        v[0] = total_line;\\n        v[1] = last_width;\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v(2);\\n        int last_width = 0;\\n        int total_width = 0;\\n        int total_line = 0;\\n        for(int i = 0;i<s.size();i++){\\n            bool flag = 0;\\n            char c= s[i];\\n            if(total_width > 100 || flag){\\n                if(total_width > 100){\\n                    total_width = total_width - widths[s[i-1] - 97];\\n                    --i;\\n                }\\n                last_width = total_width;\\n                total_line++;\\n                total_width = 0;\\n            }\\n            else{\\n                total_width = total_width + widths[c-97];\\n                if(total_width > 100){\\n                    --i;\\n                    flag = 1;\\n                }\\n            }\\n        }\\n        if(total_width >0){\\n            total_line++;\\n            last_width = total_width;\\n        }\\n        v[0] = total_line;\\n        v[1] = last_width;\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950571,
                "title": "easy-to-understand-python3-solution-tc-o-n-sc-o-1",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        ref = ord(\\'a\\')\\n\\n        i,line,count = 0,0,0\\n\\n        while i < len(s):\\n            line += 1\\n            count = 0\\n            while count <= 100 and i < len(s):\\n                count += widths[ord(s[i]) - ref]\\n                i += 1\\n            \\n            if count > 100:\\n                i -= 1\\n                count -= widths[ord(s[i]) - ref]\\n\\n        return [line, count]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        ref = ord(\\'a\\')\\n\\n        i,line,count = 0,0,0\\n\\n        while i < len(s):\\n            line += 1\\n            count = 0\\n            while count <= 100 and i < len(s):\\n                count += widths[ord(s[i]) - ref]\\n                i += 1\\n            \\n            if count > 100:\\n                i -= 1\\n                count -= widths[ord(s[i]) - ref]\\n\\n        return [line, count]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3950157,
                "title": "easy-c-solution-beginner-s-friendly",
                "content": "\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(n)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    int sum=0;\\n    int count=0;\\n    for(int i=0;i<s.size();i++){\\n        int value=widths[s[i]+\\'0\\'-145];\\n        if(sum+value<=100){\\n            sum=sum+value;\\n        }\\n        else{\\n            count++;\\n            sum=0;\\n            sum=sum+value;\\n        }\\n    }\\n    vector<int> result;\\n    result.push_back(count+1);\\n    result.push_back(sum);\\n    return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n    int sum=0;\\n    int count=0;\\n    for(int i=0;i<s.size();i++){\\n        int value=widths[s[i]+\\'0\\'-145];\\n        if(sum+value<=100){\\n            sum=sum+value;\\n        }\\n        else{\\n            count++;\\n            sum=0;\\n            sum=sum+value;\\n        }\\n    }\\n    vector<int> result;\\n    result.push_back(count+1);\\n    result.push_back(sum);\\n    return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943646,
                "title": "java-fastest-solution",
                "content": "\\n# Complexity\\n- Time complexity:  $$O(n)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int count = 0, lines  = 0;\\n\\n        for(char c : s.toCharArray()){\\n            count += widths[c -\\'a\\'];\\n\\n            if(count > 100){\\n                lines++;\\n                count = widths[c-\\'a\\'];\\n            }\\n        }\\n\\n        result[0] = lines+1;\\n        result[1] = count;\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int[] result = new int[2];\\n        int count = 0, lines  = 0;\\n\\n        for(char c : s.toCharArray()){\\n            count += widths[c -\\'a\\'];\\n\\n            if(count > 100){\\n                lines++;\\n                count = widths[c-\\'a\\'];\\n            }\\n        }\\n\\n        result[0] = lines+1;\\n        result[1] = count;\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939955,
                "title": "the-native-solution-is-explained-100-check-it-out",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe given code defines a C++ class Solution with a member function numberOfLines. This function takes two parameters: a vector of integers widths representing the widths of lowercase English letters, and a string s containing lowercase English letters. The goal is to determine how many lines it takes to write the string s using the given widths for each character, and the total width of the last line.\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1.Initialize total to 0 to keep track of the current line\\'s total width and lines to 1 to represent the first line.\\n2.Loop through each character in the string s.\\n3.For each character in s, calculate the index by subtracting \\'a\\' from its ASCII value. This index corresponds to the width of that character in the widths vector.\\n4.Add the width of the character to the total.\\n5.Check if the total exceeds 100, which represents the maximum line width allowed.\\n    If it does, increment the lines counter to represent a new line and reset the total to the width of the current character.\\n6Continue this process until all characters in the string s have been processed.\\n7.Finally, return a vector containing two values: lines, which represents the total number of lines required to write the string, and total, which represents the width of the last line.\\n# Complexity\\n- Time complexity: O(n  )\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of this code is O(n), where n is the length of the input string s. This is because the code iterates through each character in the string once and performs constant time operations for each character.\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity of this code is O(1) because it uses a constant amount of extra space to store the total and lines variables, regardless of the input size. The returned vector also has a constant size (always two elements). The widths vector is provided as input and is not counted towards the space complexity of the function.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        \\n        int total = 0, lines = 1;\\n        for(int i = 0; i < s.length(); ++i){\\n            int index = (s[i] - \\'a\\');\\n\\n            total += widths[index];\\n\\n            if(total > 100){\\n                ++lines;\\n                total = widths[index];\\n            }\\n        }\\n\\n        return {lines, total};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        \\n        int total = 0, lines = 1;\\n        for(int i = 0; i < s.length(); ++i){\\n            int index = (s[i] - \\'a\\');\\n\\n            total += widths[index];\\n\\n            if(total > 100){\\n                ++lines;\\n                total = widths[index];\\n            }\\n        }\\n\\n        return {lines, total};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3939324,
                "title": "806-number-of-lines-to-write-string",
                "content": "\\n\\n# Complexity\\n- Time complexity:\\n-time complexity here,  O(n)\\n\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int lines = 1; // Initialize with at least one line\\n        int currentWidth = 0; // Width of current line\\n        \\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            \\n            if (currentWidth + charWidth > 100) {\\n                lines++;\\n                currentWidth = 0;\\n            }\\n            \\n            currentWidth += charWidth;\\n        }\\n        \\n        return new int[] { lines, currentWidth };\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int lines = 1; // Initialize with at least one line\\n        int currentWidth = 0; // Width of current line\\n        \\n        for (char c : s.toCharArray()) {\\n            int charWidth = widths[c - \\'a\\'];\\n            \\n            if (currentWidth + charWidth > 100) {\\n                lines++;\\n                currentWidth = 0;\\n            }\\n            \\n            currentWidth += charWidth;\\n        }\\n        \\n        return new int[] { lines, currentWidth };\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938006,
                "title": "c-simple-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        vector<int>ans;\\n        int flag=0;\\n        for(int i=0;i<s.size();i++){\\n            int c=s[i]-97;\\n            sum=sum+widths[c];\\n         \\n            if(sum>100){\\n                flag++;\\n                sum=0;\\n                i--;\\n\\n            }\\n            if(sum==100){\\n                 flag++;\\n                sum=0;\\n             \\n\\n            }\\n        }\\n        if(sum==0){\\n            sum=100;\\n            flag--;\\n        }\\n        ans.push_back(flag+1);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum=0;\\n        vector<int>ans;\\n        int flag=0;\\n        for(int i=0;i<s.size();i++){\\n            int c=s[i]-97;\\n            sum=sum+widths[c];\\n         \\n            if(sum>100){\\n                flag++;\\n                sum=0;\\n                i--;\\n\\n            }\\n            if(sum==100){\\n                 flag++;\\n                sum=0;\\n             \\n\\n            }\\n        }\\n        if(sum==0){\\n            sum=100;\\n            flag--;\\n        }\\n        ans.push_back(flag+1);\\n        ans.push_back(sum);\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3937705,
                "title": "python-simple-solution-begginer-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        limit = 0\\n        classification = []\\n        chunk = \\'\\'\\n\\n        for char in s:\\n            test = limit + widths[ord(char) - ord(\\'a\\')]\\n            if test <= 100:\\n                chunk += char\\n                limit += widths[ord(char) - ord(\\'a\\')]\\n            else:\\n                classification.append(chunk)\\n                limit = widths[ord(char) - ord(\\'a\\')]\\n                chunk = char\\n\\n        classification.append(chunk)\\n        last_line_width = sum([widths[ord(char) - ord(\\'a\\')] for char in classification[-1]])\\n\\n        return [len(classification), last_line_width]\\n\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        limit = 0\\n        classification = []\\n        chunk = \\'\\'\\n\\n        for char in s:\\n            test = limit + widths[ord(char) - ord(\\'a\\')]\\n            if test <= 100:\\n                chunk += char\\n                limit += widths[ord(char) - ord(\\'a\\')]\\n            else:\\n                classification.append(chunk)\\n                limit = widths[ord(char) - ord(\\'a\\')]\\n                chunk = char\\n\\n        classification.append(chunk)\\n        last_line_width = sum([widths[ord(char) - ord(\\'a\\')] for char in classification[-1]])\\n\\n        return [len(classification), last_line_width]\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3931270,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/922fa01e-291e-43bb-bf94-dd6965dad015_1692449674.611826.png)\\n\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n       int noOfLines = 0, cnt=0;\\n       for(auto i : s){\\n           if(cnt + widths[i - \\'a\\'] > 100){\\n               noOfLines++;\\n               cnt = widths[i - \\'a\\'];\\n           }\\n           else cnt += widths[i - \\'a\\'];\\n       } \\n       return {noOfLines+1, cnt};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n       int noOfLines = 0, cnt=0;\\n       for(auto i : s){\\n           if(cnt + widths[i - \\'a\\'] > 100){\\n               noOfLines++;\\n               cnt = widths[i - \\'a\\'];\\n           }\\n           else cnt += widths[i - \\'a\\'];\\n       } \\n       return {noOfLines+1, cnt};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927013,
                "title": "number-of-lines-to-write-string-using-c",
                "content": "# Intuition \\uD83E\\uDD14\\nI\\'m thinking of solving this problem by iterating through each character in the given string and keeping track of the total width used. Whenever the width exceeds 100, I\\'ll start a new line and reset the width count.\\n\\n# Approach \\uD83D\\uDE80\\n1. Initialize variables: Create a vector v to store the result. Set sum to 0 to keep track of the current line\\'s width. Set line to 1 to count the number of lines used.\\n\\n2. Iterate through the string: For each character c in the string s:\\n\\n- Add the width of character c to the sum.\\n- If sum exceeds 100, reset sum to the width of character c and increment line.\\n3. Store the result: After iterating through the string, push the line count and the final sum to the vector v.\\n\\n4. Return the result vector v.\\n\\n# Complexity \\uD83D\\uDCCA\\n- Time complexity: The algorithm iterates through each character in the string once, resulting in a linear time complexity of O(n), where n is the length of the string.\\n\\n- Space complexity: The additional space used is for a few integer variables, resulting in constant space usage, i.e., O(1).\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v;\\n        int n = widths.size();\\n        int m = s.size();\\n        int sum=0;\\n        int line = 1 ;\\n        for( int i=0;i<m;i++){\\n            sum += widths[s[i]-\\'a\\'];\\n            if(sum > 100){\\n                sum = widths[s[i]-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        v.push_back(line);\\n        v.push_back(sum);\\n        return v;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int> v;\\n        int n = widths.size();\\n        int m = s.size();\\n        int sum=0;\\n        int line = 1 ;\\n        for( int i=0;i<m;i++){\\n            sum += widths[s[i]-\\'a\\'];\\n            if(sum > 100){\\n                sum = widths[s[i]-\\'a\\'];\\n                line++;\\n            }\\n        }\\n        v.push_back(line);\\n        v.push_back(sum);\\n        return v;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3922263,
                "title": "beats-93",
                "content": "\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        line=0\\n        pixel=0\\n        for i in range(len(s)):\\n            if pixel+widths[ord(s[i])-97]>100:\\n                line+=1\\n                pixel=widths[ord(s[i])-97]\\n            else:\\n                \\n                pixel+=widths[ord(s[i])-97]\\n                \\n        return [line+1,pixel]\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        line=0\\n        pixel=0\\n        for i in range(len(s)):\\n            if pixel+widths[ord(s[i])-97]>100:\\n                line+=1\\n                pixel=widths[ord(s[i])-97]\\n            else:\\n                \\n                pixel+=widths[ord(s[i])-97]\\n                \\n        return [line+1,pixel]\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3913562,
                "title": "short-ans-well-explained",
                "content": "# Intuition\\nTwo variables are needed, one to count pixels and other to count line.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N), one for loop used\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N) as new array is made.\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int line = 0;\\n        int pixelCount = 0;\\n        \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\';\\n            pixelCount += widths[index];\\n            \\n            if (pixelCount > 100) {\\n                i--; // if it exceeds 100\\n                line++;\\n                pixelCount = 0;\\n            }\\n        }\\n        // Last line\\n        if (pixelCount != 0) {\\n            line++;\\n        }\\n        \\n        // Making new array\\n        return new int[]{line, pixelCount};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n         int line = 0;\\n        int pixelCount = 0;\\n        \\n        for (int i = 0; i < s.length(); i++) {\\n            int index = s.charAt(i) - \\'a\\';\\n            pixelCount += widths[index];\\n            \\n            if (pixelCount > 100) {\\n                i--; // if it exceeds 100\\n                line++;\\n                pixelCount = 0;\\n            }\\n        }\\n        // Last line\\n        if (pixelCount != 0) {\\n            line++;\\n        }\\n        \\n        // Making new array\\n        return new int[]{line, pixelCount};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3912149,
                "title": "beats-easy-beginner-friendly-solution-simple-and-easy-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] w, String s) {\\n        int n=s.length(),sum=0,i=0,c=0;\\n        // sum=w[s.charAt(0)-\\'a\\'];\\n        int[] ans=new int[2];\\n        while(i<n){\\n            if(sum+w[s.charAt(i)-\\'a\\']<=100){\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            else{\\n                c++;\\n                sum=0;\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            // System.out.println(sum+\" \"+c);\\n        }\\n        ans[0]=c+1;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] w, String s) {\\n        int n=s.length(),sum=0,i=0,c=0;\\n        // sum=w[s.charAt(0)-\\'a\\'];\\n        int[] ans=new int[2];\\n        while(i<n){\\n            if(sum+w[s.charAt(i)-\\'a\\']<=100){\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            else{\\n                c++;\\n                sum=0;\\n                sum+=w[s.charAt(i)-\\'a\\'];\\n                i++;\\n            }\\n            // System.out.println(sum+\" \"+c);\\n        }\\n        ans[0]=c+1;\\n        ans[1]=sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3905776,
                "title": "c-easier-to-understand-beats-100-00-of-users-with-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\nRun Time: Beats 100.00% of users with C++\\n\\nMemory: Beats 15.82%of users with C++\\n\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line = 1 ; // The initial line is 1 \\n        int currWidth = 0 ;\\n\\n        for(char c : s ){\\n            int width = widths[c-\\'a\\'];\\n            if(currWidth + width  <= 100){\\n                currWidth += width;\\n            }\\n            else{\\n                ++line;\\n                currWidth = width;\\n            }\\n        }\\n        return {line, currWidth};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int line = 1 ; // The initial line is 1 \\n        int currWidth = 0 ;\\n\\n        for(char c : s ){\\n            int width = widths[c-\\'a\\'];\\n            if(currWidth + width  <= 100){\\n                currWidth += width;\\n            }\\n            else{\\n                ++line;\\n                currWidth = width;\\n            }\\n        }\\n        return {line, currWidth};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3902324,
                "title": "beats-100-00-of-users-with-java",
                "content": "# Faster Solution\\nBeats 100.00% of users with Java\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n    \\n        int currentLinePixel = 0;\\n        int noOfLines = 1;\\n        char[] charArray = s.toCharArray();\\n\\n        for(int i = 0 ; i<s.length() ; i ++) {\\n            char c = charArray[i];\\n            int charWidth = widths[c - \\'a\\'];\\n           if (currentLinePixel + charWidth > 100) {\\n            noOfLines++;\\n            currentLinePixel = charWidth;\\n        } else {\\n            currentLinePixel += charWidth;\\n        }\\n\\n\\n        }\\n \\n      return new int[] {noOfLines, currentLinePixel};\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        \\n    \\n        int currentLinePixel = 0;\\n        int noOfLines = 1;\\n        char[] charArray = s.toCharArray();\\n\\n        for(int i = 0 ; i<s.length() ; i ++) {\\n            char c = charArray[i];\\n            int charWidth = widths[c - \\'a\\'];\\n           if (currentLinePixel + charWidth > 100) {\\n            noOfLines++;\\n            currentLinePixel = charWidth;\\n        } else {\\n            currentLinePixel += charWidth;\\n        }\\n\\n\\n        }\\n \\n      return new int[] {noOfLines, currentLinePixel};\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3898355,
                "title": "c-sol-easy-approach",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& width, string s) {\\n        int i,sum=0,line=1;\\n        for(i=0;i<s.size();i++){\\n            sum+=width[s[i]-\\'a\\'];\\n            if(sum>100){\\n                line++;\\n                sum=width[s[i]-\\'a\\'];\\n            }\\n        }\\n        return {line,sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& width, string s) {\\n        int i,sum=0,line=1;\\n        for(i=0;i<s.size();i++){\\n            sum+=width[s[i]-\\'a\\'];\\n            if(sum>100){\\n                line++;\\n                sum=width[s[i]-\\'a\\'];\\n            }\\n        }\\n        return {line,sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3894857,
                "title": "easy-solutions-in-typescript-and-rust",
                "content": "# TypeScript\\n```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let lines = 1;\\n    let currLineWidth = 0;\\n\\n    for (const c of s) {\\n        const charWidth = widths[c.charCodeAt(0) -  \\'a\\'.charCodeAt(0)];\\n\\n        if (currLineWidth + charWidth > 100) {\\n            lines++;\\n            currLineWidth = 0;\\n        }\\n\\n        currLineWidth += charWidth;\\n    }\\n\\n    return [lines, currLineWidth];\\n};\\n```\\n\\n# Rust\\n```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let mut lines = 1;\\n        let mut curr_line_width = 0;\\n\\n        for c in s.chars() {\\n            let char_width = widths[c as usize - \\'a\\' as usize];\\n\\n            if curr_line_width + char_width > 100 {\\n                lines += 1;\\n                curr_line_width = 0;\\n            }\\n\\n            curr_line_width += char_width;\\n        }\\n\\n        vec![lines, curr_line_width]\\n    }\\n}\\n```",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nfunction numberOfLines(widths: number[], s: string): number[] {\\n    let lines = 1;\\n    let currLineWidth = 0;\\n\\n    for (const c of s) {\\n        const charWidth = widths[c.charCodeAt(0) -  \\'a\\'.charCodeAt(0)];\\n\\n        if (currLineWidth + charWidth > 100) {\\n            lines++;\\n            currLineWidth = 0;\\n        }\\n\\n        currLineWidth += charWidth;\\n    }\\n\\n    return [lines, currLineWidth];\\n};\\n```\n```\\nimpl Solution {\\n    pub fn number_of_lines(widths: Vec<i32>, s: String) -> Vec<i32> {\\n        let mut lines = 1;\\n        let mut curr_line_width = 0;\\n\\n        for c in s.chars() {\\n            let char_width = widths[c as usize - \\'a\\' as usize];\\n\\n            if curr_line_width + char_width > 100 {\\n                lines += 1;\\n                curr_line_width = 0;\\n            }\\n\\n            curr_line_width += char_width;\\n        }\\n\\n        vec![lines, curr_line_width]\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3892885,
                "title": "c-solution-3ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            if(sum + widths[s[i] - \\'a\\']<=100){\\n                sum = sum + widths[s[i] - \\'a\\'];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        vector<int> ans(2);\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            if(sum + widths[s[i] - \\'a\\']<=100){\\n                sum = sum + widths[s[i] - \\'a\\'];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        vector<int> ans(2);\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3892883,
                "title": "java-solution-1ms-runtime",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            int n = (int)(s.charAt(i)) - 97;\\n            if(sum + widths[n]<=100){\\n                sum = sum + widths[n];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        int ans[] = new int[2];\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int sum = 0;\\n        int count = 0;\\n        int i = 0;\\n        while(i<s.length()){\\n            int n = (int)(s.charAt(i)) - 97;\\n            if(sum + widths[n]<=100){\\n                sum = sum + widths[n];\\n                i++;\\n            }\\n            else{\\n                count++;\\n                sum = 0;\\n            }\\n        }\\n        count++;\\n        int ans[] = new int[2];\\n        ans[0] = count;\\n        ans[1] = sum;\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3859400,
                "title": "90-above-easy-and-understandable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict()\\n        for i in range(0,26):\\n            d[chr(ord(\\'a\\')+i)]=widths[i]\\n\\n        s1,count = 0,1\\n        i=0\\n        while s1<100 and i<len(s):\\n            r = s[i]\\n            s1+=d[r]\\n            if s1==100:\\n                s1=0\\n                count+=1\\n            elif s1>100:\\n                s1=d[s[i]]\\n                count+=1\\n            i+=1\\n        l=[]\\n        if s1==0:\\n            s1=100\\n            count-=1\\n        l.append(count)\\n        l.append(s1)\\n        return l\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def numberOfLines(self, widths: List[int], s: str) -> List[int]:\\n        d = dict()\\n        for i in range(0,26):\\n            d[chr(ord(\\'a\\')+i)]=widths[i]\\n\\n        s1,count = 0,1\\n        i=0\\n        while s1<100 and i<len(s):\\n            r = s[i]\\n            s1+=d[r]\\n            if s1==100:\\n                s1=0\\n                count+=1\\n            elif s1>100:\\n                s1=d[s[i]]\\n                count+=1\\n            i+=1\\n        l=[]\\n        if s1==0:\\n            s1=100\\n            count-=1\\n        l.append(count)\\n        l.append(s1)\\n        return l\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3855797,
                "title": "java-easy",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int a[]= new int[2];\\n\\t\\tLinkedHashMap<String, Integer> map= new LinkedHashMap<>();\\n\\t\\tint sum=0;\\n\\t\\tint newline=1;\\n\\t\\tint codePoint=97;\\n\\t\\tint lastsumvalue=0;\\n\\t\\tfor (int i = 0; i<=widths.length-1; i++) {\\n\\t\\t\\t\\n\\t\\t\\tmap.put(Character.toString(codePoint), widths[i]);\\n\\t\\t\\tcodePoint++;\\n\\t\\t}\\n\\t\\tfor(int i=0;i<=s.length()-1;i++)\\n\\t\\t{\\n\\t\\tint value=\\tmap.get(String.valueOf(s.charAt(i)));\\n\\t\\tsum=sum+value;\\n\\t\\tif(sum>100)\\n\\t\\t{\\n\\t\\t\\tsum=0;\\n\\t\\t\\tnewline++;\\n\\t\\t\\t\\n\\t\\t\\tsum=sum+value;\\n\\t\\t}\\n\\t\\tlastsumvalue=sum;\\n\\t\\t}\\n\\t\\ta[0]=newline;\\n\\t\\ta[1]=lastsumvalue;\\nreturn a;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        int a[]= new int[2];\\n\\t\\tLinkedHashMap<String, Integer> map= new LinkedHashMap<>();\\n\\t\\tint sum=0;\\n\\t\\tint newline=1;\\n\\t\\tint codePoint=97;\\n\\t\\tint lastsumvalue=0;\\n\\t\\tfor (int i = 0; i<=widths.length-1; i++) {\\n\\t\\t\\t\\n\\t\\t\\tmap.put(Character.toString(codePoint), widths[i]);\\n\\t\\t\\tcodePoint++;\\n\\t\\t}\\n\\t\\tfor(int i=0;i<=s.length()-1;i++)\\n\\t\\t{\\n\\t\\tint value=\\tmap.get(String.valueOf(s.charAt(i)));\\n\\t\\tsum=sum+value;\\n\\t\\tif(sum>100)\\n\\t\\t{\\n\\t\\t\\tsum=0;\\n\\t\\t\\tnewline++;\\n\\t\\t\\t\\n\\t\\t\\tsum=sum+value;\\n\\t\\t}\\n\\t\\tlastsumvalue=sum;\\n\\t\\t}\\n\\t\\ta[0]=newline;\\n\\t\\ta[1]=lastsumvalue;\\nreturn a;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3847258,
                "title": "best-runtime",
                "content": "\\n# Complexity\\nO(n)\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n       int l=0,p=0;\\n       char a;\\n       for (int i=0;i<s.length();i++){\\n           a=s.charAt(i);\\n           p=p+widths[a-97];\\n           if(p>100){\\n               p=0;\\n               l++;\\n               i--;\\n           }\\n       }\\n       int i[]={++l,p};\\n       return i;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n       int l=0,p=0;\\n       char a;\\n       for (int i=0;i<s.length();i++){\\n           a=s.charAt(i);\\n           p=p+widths[a-97];\\n           if(p>100){\\n               p=0;\\n               l++;\\n               i--;\\n           }\\n       }\\n       int i[]={++l,p};\\n       return i;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3845646,
                "title": "c-simple-and-readable",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\no(n) with 100% beat(0ms).\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n0(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>result;\\n        int count=0;  //vector<string>p;\\n        string q=\"\";\\n        int width=0;\\n        for(int i=0;i<s.length();i++){\\n            int index=s[i]-\\'a\\';\\n            q+=s[i];\\n            width+=widths[index];\\n            if(width>100){\\n                q.pop_back();\\n                i=i-1;\\n                count+=1;  //p.push_back(q);\\n                q=\"\";\\n                width=0;\\n            }\\n        }\\n        count+=1;    //p.push_back(q);\\n        int num1=count;   //p.size();\\n        int num2=width;\\n        result.push_back(num1);\\n        result.push_back(num2);\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        vector<int>result;\\n        int count=0;  //vector<string>p;\\n        string q=\"\";\\n        int width=0;\\n        for(int i=0;i<s.length();i++){\\n            int index=s[i]-\\'a\\';\\n            q+=s[i];\\n            width+=widths[index];\\n            if(width>100){\\n                q.pop_back();\\n                i=i-1;\\n                count+=1;  //p.push_back(q);\\n                q=\"\";\\n                width=0;\\n            }\\n        }\\n        count+=1;    //p.push_back(q);\\n        int num1=count;   //p.size();\\n        int num2=width;\\n        result.push_back(num1);\\n        result.push_back(num2);\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3831468,
                "title": "number-of-lines-to-write-string",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        HashMap<Character,Integer> hm = new HashMap<Character,Integer>();\\n        for(int i=0;i<26;i++)\\n        {\\n            hm.put((char)(97+i),widths[i]);\\n        }\\n        int line = 1;\\n        int sum = 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum=sum+hm.get(s.charAt(i));\\n            if(sum>100)\\n            {\\n                line++;\\n                sum = hm.get(s.charAt(i));\\n            }\\n            if(sum==100)\\n            {if(i!=s.length()-1)\\n            {sum=0;\\n            line++;}}\\n        }\\n        int[] arr = new int[2];\\n        arr[0] = line;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] numberOfLines(int[] widths, String s) {\\n        HashMap<Character,Integer> hm = new HashMap<Character,Integer>();\\n        for(int i=0;i<26;i++)\\n        {\\n            hm.put((char)(97+i),widths[i]);\\n        }\\n        int line = 1;\\n        int sum = 0;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            sum=sum+hm.get(s.charAt(i));\\n            if(sum>100)\\n            {\\n                line++;\\n                sum = hm.get(s.charAt(i));\\n            }\\n            if(sum==100)\\n            {if(i!=s.length()-1)\\n            {sum=0;\\n            line++;}}\\n        }\\n        int[] arr = new int[2];\\n        arr[0] = line;\\n        arr[1] = sum;\\n        return arr;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3825192,
                "title": "beats-100-00-of-users-with-c-easy-approach-one-pass-o-n-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=0,curr_sum=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            curr_sum+=widths[s[i]-\\'a\\'];\\n            if(curr_sum>100)\\n            {\\n                curr_sum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        return {cnt + 1,curr_sum};\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    vector<int> numberOfLines(vector<int>& widths, string s) {\\n        int cnt=0,curr_sum=0;\\n        int n=s.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            curr_sum+=widths[s[i]-\\'a\\'];\\n            if(curr_sum>100)\\n            {\\n                curr_sum = widths[s[i]-\\'a\\'];\\n                cnt++;\\n            }\\n        }\\n        return {cnt + 1,curr_sum};\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1564753,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1566104,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1566290,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1876774,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            },
            {
                "id": 1783261,
                "content": [
                    {
                        "username": "georgemeng2001@gmail.com",
                        "content": "The description is so bad, it does not give a clear description, the example helps, but has to read multiple times to guess and guess.\\n"
                    },
                    {
                        "username": "sjw214",
                        "content": "No idea what\\'s even being asked."
                    },
                    {
                        "username": "kenumida",
                        "content": "as the subject"
                    },
                    {
                        "username": "azharsheikh760",
                        "content": "my face when I read description \\uD83D\\uDE28\\uD83D\\uDE28\\uD83D\\uDE28\\nmy face when I looked at example \\uD83D\\uDE30\\uD83D\\uDE30\\uD83D\\uDE31\\uD83D\\uDE31 "
                    },
                    {
                        "username": "satyam_rai15",
                        "content": "Is there something wrong with the testcase where s=\"mqblbtpvicqhbrejb\"? My solution works perfectly fine for all the other testcases (26/27) except this one. "
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "[@arshadsaifi](/arshadsaifi) yeah , thanks for the response even though i corrected it previously i forgot to delete my comment\\n"
                    },
                    {
                        "username": "arshadsaifi",
                        "content": "No, the question is fine. You might have missed the case where the length of a line can be 100px. And your code might be returning 0 for that case."
                    },
                    {
                        "username": "mayanksinghbohra",
                        "content": "for that test case , the total sum comes out to be 100 , which means only 1 line will be required , and the last line will be 100 pixels wide because there is only one line.\\nYou will have to add another condition for this according to your code."
                    },
                    {
                        "username": "sorokus-dev",
                        "content": "All cases passed for me. How to get test case  #26 input in UI? Or please post it here."
                    }
                ]
            }
        ]
    },
    {
        "title": "Find Words That Can Be Formed by Characters",
        "question_content": "<p>You are given an array of strings <code>words</code> and a string <code>chars</code>.</p>\n\n<p>A string is <strong>good</strong> if it can be formed by characters from chars (each character can only be used once).</p>\n\n<p>Return <em>the sum of lengths of all good strings in words</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;cat&quot;,&quot;bt&quot;,&quot;hat&quot;,&quot;tree&quot;], chars = &quot;atach&quot;\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The strings that can be formed are &quot;cat&quot; and &quot;hat&quot; so the answer is 3 + 3 = 6.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> words = [&quot;hello&quot;,&quot;world&quot;,&quot;leetcode&quot;], chars = &quot;welldonehoneyr&quot;\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> The strings that can be formed are &quot;hello&quot; and &quot;world&quot; so the answer is 5 + 5 = 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 1000</code></li>\n\t<li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li>\n\t<li><code>words[i]</code> and <code>chars</code> consist of lowercase English letters.</li>\n</ul>\n",
        "solutions": [
            {
                "id": 360978,
                "title": "c-track-count",
                "content": "```\\nint countCharacters(vector<string>& words, string chars) {\\n  int cnt[26] = {}, res = 0;\\n  for (auto ch : chars) \\n      ++cnt[ch - \\'a\\'];\\n  for (auto &w : words) {\\n    int cnt1[26] = {}, match = true;\\n    for (auto ch : w)\\n      if (++cnt1[ch - \\'a\\'] > cnt[ch - \\'a\\']) {\\n        match = false;\\n        break;\\n      }\\n    if (match) \\n        res += w.size();\\n  }\\n  return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nint countCharacters(vector<string>& words, string chars) {\\n  int cnt[26] = {}, res = 0;\\n  for (auto ch : chars) \\n      ++cnt[ch - \\'a\\'];\\n  for (auto &w : words) {\\n    int cnt1[26] = {}, match = true;\\n    for (auto ch : w)\\n      if (++cnt1[ch - \\'a\\'] > cnt[ch - \\'a\\']) {\\n        match = false;\\n        break;\\n      }\\n    if (match) \\n        res += w.size();\\n  }\\n  return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 360962,
                "title": "java-python-3-count-chars-in-each-word",
                "content": "Count the characters in `chars` in array `cnt`, then for each word in `words` check if `cnt` has enough to cover it.\\n```\\n    public int countCharacters(String[] words, String chars) {\\n        int cnt[] = new int[26], ans = 0;\\n        chars.chars().forEach(c -> ++cnt[c - \\'a\\']); // count chars.\\nouter: \\n        for (String w : words) {\\n            int[] count = cnt.clone();\\n            for (char c : w.toCharArray())\\n                if (--count[c - \\'a\\'] < 0) // not enough, continue next word in words.\\n                    continue outer;\\n            ans += w.length();\\n        }\\n        return ans;\\n    }\\n```\\n```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        sum, chars_counter = 0, collections.Counter(chars)\\n        for word in words:\\n            word_counter = collections.Counter(word)\\n            for c in word_counter:\\n                if word_counter[c] > chars_counter[c]:\\n                    break\\n            else:\\n                sum += len(word)\\n        return sum\\n```\\nSimilar version without using `for - else`.\\n```python\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        sum, ct = 0, collections.Counter\\n        chars_counter = ct(chars)\\n        for word in words:\\n            word_counter = ct(word)\\n            if all(word_counter[c] <= chars_counter[c] for c in word_counter):\\n                sum += len(word)\\n        return sum\\n```\\n**Analysis:**\\n\\nTime:: O(n), space: O(1), where n is total characters in `words` and `chars`",
                "solutionTags": [],
                "code": "```\\n    public int countCharacters(String[] words, String chars) {\\n        int cnt[] = new int[26], ans = 0;\\n        chars.chars().forEach(c -> ++cnt[c - \\'a\\']); // count chars.\\nouter: \\n        for (String w : words) {\\n            int[] count = cnt.clone();\\n            for (char c : w.toCharArray())\\n                if (--count[c - \\'a\\'] < 0) // not enough, continue next word in words.\\n                    continue outer;\\n            ans += w.length();\\n        }\\n        return ans;\\n    }\\n```\n```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        sum, chars_counter = 0, collections.Counter(chars)\\n        for word in words:\\n            word_counter = collections.Counter(word)\\n            for c in word_counter:\\n                if word_counter[c] > chars_counter[c]:\\n                    break\\n            else:\\n                sum += len(word)\\n        return sum\\n```\n```python\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        sum, ct = 0, collections.Counter\\n        chars_counter = ct(chars)\\n        for word in words:\\n            word_counter = ct(word)\\n            if all(word_counter[c] <= chars_counter[c] for c in word_counter):\\n                sum += len(word)\\n        return sum\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 361004,
                "title": "easy-explained-simple-java-check-all-char-count",
                "content": "```\\n\\n    public static int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        int[] seen = new int[26];\\n\\t\\t//Count char of Chars String\\n        for (char c : chars.toCharArray())\\n            seen[c - \\'a\\']++;\\n\\t\\t// Comparing each word in words\\n        for (String word : words) {\\n\\t\\t\\t// simple making copy of seen arr\\n            int[] tSeen = Arrays.copyOf(seen, seen.length); \\n            int Tcount = 0;\\n            for (char c : word.toCharArray()) {\\n                if (tSeen[c - \\'a\\'] > 0) {\\n                    tSeen[c - \\'a\\']--;\\n                    Tcount++;\\n                }\\n            }\\n            if (Tcount == word.length())\\n                count += Tcount;\\n        }\\n        return count;\\n    }\\n\\n```",
                "solutionTags": [],
                "code": "```\\n\\n    public static int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        int[] seen = new int[26];\\n\\t\\t//Count char of Chars String\\n        for (char c : chars.toCharArray())\\n            seen[c - \\'a\\']++;\\n\\t\\t// Comparing each word in words\\n        for (String word : words) {\\n\\t\\t\\t// simple making copy of seen arr\\n            int[] tSeen = Arrays.copyOf(seen, seen.length); \\n            int Tcount = 0;\\n            for (char c : word.toCharArray()) {\\n                if (tSeen[c - \\'a\\'] > 0) {\\n                    tSeen[c - \\'a\\']--;\\n                    Tcount++;\\n                }\\n            }\\n            if (Tcount == word.length())\\n                count += Tcount;\\n        }\\n        return count;\\n    }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 570313,
                "title": "c-hashmap-solution-commented-easy-to-read-and-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        // Create a map to store the occurences of each character in \"chars\"\\n        // Each character is mapped to their frequency <char, int>\\n        vector<int> chFreq(26, 0);\\n        // if a character is found, increment its frequency, e.g chFreq[\\'a\\']++\\n        for(auto ch : chars) chFreq[ch - \\'a\\']++;\\n        \\n        // Declare an integer to store sum of all the strings that are valid\\n        int count = 0;\\n        \\n        // Loop through the vector=\\n        for(auto str : words){\\n            // Create a flag to switch to false if the string can not be formed from \"chars\"\\n            bool flag = true;\\n            // Create a map to store the frequency of characters in current string\\n            vector<int> copyFreq(26, 0);\\n            // Loop through string and if the frequency of any character in the string\\n            // is greater than the frequency of the same character \\n            // in the \"chars\" string, make flag false and end loop (word is invalid)\\n            for(auto ch : str) {\\n                if(++copyFreq[ch - \\'a\\'] > chFreq[ch - \\'a\\']){\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            // Append string\\'s length to \"count\" if the flag is still true(valid)\\n            if(flag) count += str.size();\\n        }\\n        \\n        // Return count\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        // Create a map to store the occurences of each character in \"chars\"\\n        // Each character is mapped to their frequency <char, int>\\n        vector<int> chFreq(26, 0);\\n        // if a character is found, increment its frequency, e.g chFreq[\\'a\\']++\\n        for(auto ch : chars) chFreq[ch - \\'a\\']++;\\n        \\n        // Declare an integer to store sum of all the strings that are valid\\n        int count = 0;\\n        \\n        // Loop through the vector=\\n        for(auto str : words){\\n            // Create a flag to switch to false if the string can not be formed from \"chars\"\\n            bool flag = true;\\n            // Create a map to store the frequency of characters in current string\\n            vector<int> copyFreq(26, 0);\\n            // Loop through string and if the frequency of any character in the string\\n            // is greater than the frequency of the same character \\n            // in the \"chars\" string, make flag false and end loop (word is invalid)\\n            for(auto ch : str) {\\n                if(++copyFreq[ch - \\'a\\'] > chFreq[ch - \\'a\\']){\\n                    flag = false;\\n                    break;\\n                }\\n            }\\n            // Append string\\'s length to \"count\" if the flag is still true(valid)\\n            if(flag) count += str.size();\\n        }\\n        \\n        // Return count\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361377,
                "title": "python-concise-1-liner",
                "content": "```\\nfrom collections import Counter as cnt\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(not cnt(w) - cnt(chars) and len(w) for w in words)\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import Counter as cnt\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(not cnt(w) - cnt(chars) and len(w) for w in words)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 362309,
                "title": "python-3-solution-without-using-counter-class-75-runtime",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter = 0\\n        for w in words:\\n            included = True\\n            charsList = [c for c in chars]\\n            for c in w:\\n                if c in charsList:\\n                    charsList.remove(c)\\n                else:\\n                    included = False\\n                    break\\n            if included: counter = counter+len(w)\\n        return counter",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter = 0\\n        for w in words:\\n            included = True\\n            charsList = [c for c in chars]\\n            for c in w:\\n                if c in charsList:\\n                    charsList.remove(c)\\n                else:\\n                    included = False\\n                    break\\n            if included: counter = counter+len(w)\\n        return counter",
                "codeTag": "Java"
            },
            {
                "id": 999413,
                "title": "map-c-easy",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& v, string s) {\\n          map<char,int> m,p;\\n          int t=0;\\n        \\n          for(auto c: s)\\n               m[c]++;\\n           \\n          for(int i=0;i<v.size();i++)\\n          {   \\n              p=m;\\n              bool ok=1;\\n             \\n              for(int j=0;j<v[i].size();j++)\\n              {\\n                 p[v[i][j]]--; \\n                 if(p[v[i][j]]<0)\\n                 {\\n                     ok=0;\\n                     break;\\n                 }\\n              }\\n              if(ok)\\n                  t+=v[i].size();\\n          }\\n        return t;\\n    }\\n};\\n                         \\uD83D\\uDE0A\\uD83D\\uDE0A\\uD83D\\uDE0A Please do UPVOTE if my code helps you \\uD83D\\uDE0A\\uD83D\\uDE0A\\uD83D\\uDE0A",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countCharacters(vector<string>& v, string s) {\\n          map<char,int> m,p;\\n          int t=0;\\n        \\n          for(auto c: s)\\n               m[c]++;\\n           \\n          for(int i=0;i<v.size();i++)\\n          {   \\n              p=m;\\n              bool ok=1;\\n             \\n              for(int j=0;j<v[i].size();j++)\\n              {\\n                 p[v[i][j]]--; \\n                 if(p[v[i][j]]<0)\\n                 {\\n                     ok=0;\\n                     break;\\n                 }",
                "codeTag": "Java"
            },
            {
                "id": 1019831,
                "title": "java-straightforward-explanation",
                "content": "**Time Complexity:**`O(C + N * S)`, where `C` = length of chars, `N` = number of words, and `S` = longest word in words\\n**Space Complexity:** `O(1)` [considering the constraint of having only lowercase English letters]\\n```\\nclass Solution {\\n    public int[] charFreq = new int[26];\\n    \\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        for(char c : chars.toCharArray()) ++charFreq[c - \\'a\\'];\\n        for(String word : words) if(isGood(word)) count += word.length();\\n\\t\\t\\n        return count;\\n    }\\n    \\n    public boolean isGood(String word) {\\n        int[] localCharFreq = new int[26];\\n        for(char c : word.toCharArray()) ++localCharFreq[c - \\'a\\'];\\n        for(int i = 0; i < 26; i++) if(localCharFreq[i] > charFreq[i]) return false;\\n\\t\\t\\n        return true;\\n    }\\n}\\n/*\\nConstraint:\\nLowercase English letters => an int[] array of size 26, holding frequency of each char respectively.\\n\\nBase Logic:\\n1. Compute the frequency of characters in chars and store in charFreq.\\n2. Go through each word => if the word is \"good\" => increment the counter to this word\\'s length.\\n\\nLogic for how a word is \"good\" (isGood()):\\n1. Compute the frequency of characters in this word and store in (local) int[] array of size 26 (localCharFreq)\\n2. Loop through localCharFreq and compare with (global) charFreq\\n\\t=> if any element in localCharFreq has value > value in charFreq => return false.\\n3. Else return true.\\n\\nThe \"greater than\" comparison also considers the situation where a character present in the word doesn\\'t exist in chars.\\n*/\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int[] charFreq = new int[26];\\n    \\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        for(char c : chars.toCharArray()) ++charFreq[c - \\'a\\'];\\n        for(String word : words) if(isGood(word)) count += word.length();\\n\\t\\t\\n        return count;\\n    }\\n    \\n    public boolean isGood(String word) {\\n        int[] localCharFreq = new int[26];\\n        for(char c : word.toCharArray()) ++localCharFreq[c - \\'a\\'];\\n        for(int i = 0; i < 26; i++) if(localCharFreq[i] > charFreq[i]) return false;\\n\\t\\t\\n        return true;\\n    }\\n}\\n/*\\nConstraint:\\nLowercase English letters => an int[] array of size 26, holding frequency of each char respectively.\\n\\nBase Logic:\\n1. Compute the frequency of characters in chars and store in charFreq.\\n2. Go through each word => if the word is \"good\" => increment the counter to this word\\'s length.\\n\\nLogic for how a word is \"good\" (isGood()):\\n1. Compute the frequency of characters in this word and store in (local) int[] array of size 26 (localCharFreq)\\n2. Loop through localCharFreq and compare with (global) charFreq\\n\\t=> if any element in localCharFreq has value > value in charFreq => return false.\\n3. Else return true.\\n\\nThe \"greater than\" comparison also considers the situation where a character present in the word doesn\\'t exist in chars.\\n*/\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361463,
                "title": "python-using-dictionary",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        tot = 0\\n        for w in words:\\n            d = {}\\n            for c in chars:\\n                if c in d: d[c] += 1\\n                else: d[c] = 1\\n             \\n            temp = 0\\n            for l in w:\\n                if l in d and d[l] > 0:\\n                    d[l] -= 1 \\n                    temp += 1\\n                else:\\n                    temp = 0\\n                    break\\n                    \\n            tot += temp\\n            \\n        return tot\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        tot = 0\\n        for w in words:\\n            d = {}\\n            for c in chars:\\n                if c in d: d[c] += 1\\n                else: d[c] = 1\\n             \\n            temp = 0\\n            for l in w:\\n                if l in d and d[l] > 0:\\n                    d[l] -= 1 \\n                    temp += 1\\n                else:\\n                    temp = 0\\n                    break\\n                    \\n            tot += temp\\n            \\n        return tot\\n```",
                "codeTag": "Java"
            },
            {
                "id": 538391,
                "title": "1160-javascript-almost-1-line-solution-using-reduce",
                "content": "> Runtime: **188 ms**, faster than *63.52%* of JavaScript online submissions_\\n> Memory Usage: **43.9 MB**, less than *100.00%* of JavaScript online submissions_\\n\\n```javascript\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nconst countCharacters = (words, chars) =>\\n  words.reduce((cnt, word, idx) => {\\n    for (const c of [...chars]) word = word.replace(c, \\'\\');\\n    return cnt + (0 === word.length ? words[idx].length : 0);\\n  }, 0);\\n```\\n\\nAnd here is a terse and performant solution with comments.\\n\\n> Runtime: **128 ms**, faster than *80.66%* of JavaScript online submissions\\n> Memory Usage: **44.7 MB**, less than *99.40%* of JavaScript online submissions\\n\\n```javascript\\n/**\\n * Count all the instances of each lowercase character in the given string\\n * and return an array with those counts in an array with indices of the\\n * alphabetical index of that character i.e. 0-25 = a-z\\n *\\n * @param {string} str\\n * @return {number[]}\\n */\\nconst strToCntArr = str => {\\n  // Create the array of all the character counts\\n  const arr = new Array(26).fill(0);\\n  // Increment the count for each character in the string\\n  for (let i = 0; i < str.length; i++) arr[str.charCodeAt(i) - 97]++;\\n  // Return the array with all the counts\\n  return arr;\\n};\\n\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nconst countCharacters = (words, chars) => {\\n  // The sum of length of the valid words\\n  let sum = 0;\\n  // Get the array with the counts of the characters we have\\n  const have = strToCntArr(chars);\\n  // Loop through the words\\n  outer: for (const word of words) {\\n    // Continue if we need more more total characters than we have\\n    if (chars.length < word.length) continue;\\n    // Get the array with the counts of the characters we need\\n    const need = strToCntArr(word);\\n    // Continue the outer loop when we need more characters than we have\\n    for (let i = 0; i < 26; i++) if (have[i] < need[i]) continue outer;\\n    // Any word that reaches this point is valid, so add the length to sum\\n    sum += word.length;\\n  }\\n  // Return the sum of the lengths of all the valid words\\n  return sum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nconst countCharacters = (words, chars) =>\\n  words.reduce((cnt, word, idx) => {\\n    for (const c of [...chars]) word = word.replace(c, \\'\\');\\n    return cnt + (0 === word.length ? words[idx].length : 0);\\n  }, 0);\\n```\n```javascript\\n/**\\n * Count all the instances of each lowercase character in the given string\\n * and return an array with those counts in an array with indices of the\\n * alphabetical index of that character i.e. 0-25 = a-z\\n *\\n * @param {string} str\\n * @return {number[]}\\n */\\nconst strToCntArr = str => {\\n  // Create the array of all the character counts\\n  const arr = new Array(26).fill(0);\\n  // Increment the count for each character in the string\\n  for (let i = 0; i < str.length; i++) arr[str.charCodeAt(i) - 97]++;\\n  // Return the array with all the counts\\n  return arr;\\n};\\n\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nconst countCharacters = (words, chars) => {\\n  // The sum of length of the valid words\\n  let sum = 0;\\n  // Get the array with the counts of the characters we have\\n  const have = strToCntArr(chars);\\n  // Loop through the words\\n  outer: for (const word of words) {\\n    // Continue if we need more more total characters than we have\\n    if (chars.length < word.length) continue;\\n    // Get the array with the counts of the characters we need\\n    const need = strToCntArr(word);\\n    // Continue the outer loop when we need more characters than we have\\n    for (let i = 0; i < 26; i++) if (have[i] < need[i]) continue outer;\\n    // Any word that reaches this point is valid, so add the length to sum\\n    sum += word.length;\\n  }\\n  // Return the sum of the lengths of all the valid words\\n  return sum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 364795,
                "title": "python-easy-to-understand",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        res = 0\\n\\n        for word in words:\\n            indicator = True\\n            for i in word:\\n                if word.count(i) > chars.count(i):\\n                    indicator = False\\n                    break\\n            if indicator:\\n                res += len(word)\\n\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        res = 0\\n\\n        for word in words:\\n            indicator = True\\n            for i in word:\\n                if word.count(i) > chars.count(i):\\n                    indicator = False\\n                    break\\n            if indicator:\\n                res += len(word)\\n\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 363513,
                "title": "java-solution-using-hashmap",
                "content": "```\\n    public int countCharacters(String[] words, String chars) {\\n        HashMap<Character, Integer> countMap = new HashMap<>();\\n        for (char c : chars.toCharArray()) {\\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\\n        }\\n        int res = 0;\\n        HashMap<Character, Integer> copyMap;\\n        for (String word : words) {\\n            copyMap = (HashMap<Character, Integer>) countMap.clone();\\n            boolean fail = false;\\n            for (char c : word.toCharArray()) {\\n                if (copyMap.get(c) == null || copyMap.get(c) <= 0) {\\n                    fail = true;\\n                    break;\\n                } else {\\n                    copyMap.put(c, copyMap.get(c) - 1);\\n                }\\n            }\\n            if (!fail) res += word.length();\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int countCharacters(String[] words, String chars) {\\n        HashMap<Character, Integer> countMap = new HashMap<>();\\n        for (char c : chars.toCharArray()) {\\n            countMap.put(c, countMap.getOrDefault(c, 0) + 1);\\n        }\\n        int res = 0;\\n        HashMap<Character, Integer> copyMap;\\n        for (String word : words) {\\n            copyMap = (HashMap<Character, Integer>) countMap.clone();\\n            boolean fail = false;\\n            for (char c : word.toCharArray()) {\\n                if (copyMap.get(c) == null || copyMap.get(c) <= 0) {\\n                    fail = true;\\n                    break;\\n                } else {\\n                    copyMap.put(c, copyMap.get(c) - 1);\\n                }\\n            }\\n            if (!fail) res += word.length();\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 374231,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    let total = 0;\\n    for (let word of words) {\\n        let map = createMap(chars);       \\n        if (isWordGood(word, map)) {\\n            total += word.length;  \\n        }        \\n    }\\n    \\n    return total;   \\n};\\n\\nvar createMap = function(chars) {\\n    let map = {};\\n    for(let i = 0; i < chars.length; i++) {\\n        if (!map[chars[i]]) {\\n            map[chars[i]] = 0;\\n        } \\n        map[chars[i]]++;        \\n    }\\n    \\n    return map;\\n}\\n\\nvar isWordGood = function(word, map) {\\n    for (let i = 0; i < word.length; i++) {\\n        if (!map[word[i]] || map[word[i]] == 0) {\\n            return false;\\n        }\\n        map[word[i]]--;\\n    }\\n    \\n    return true;\\n}",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    let total = 0;\\n    for (let word of words) {\\n        let map = createMap(chars);       \\n        if (isWordGood(word, map)) {\\n            total += word.length;  \\n        }        \\n    }\\n    \\n    return total;   \\n};\\n\\nvar createMap = function(chars) {\\n    let map = {};\\n    for(let i = 0; i < chars.length; i++) {\\n        if (!map[chars[i]]) {\\n            map[chars[i]] = 0;\\n        } \\n        map[chars[i]]++;        \\n    }\\n    \\n    return map;\\n}\\n\\nvar isWordGood = function(word, map) {\\n    for (let i = 0; i < word.length; i++) {\\n        if (!map[word[i]] || map[word[i]] == 0) {\\n            return false;\\n        }\\n        map[word[i]]--;\\n    }\\n    \\n    return true;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 813520,
                "title": "java-hashmap-solution-with-commented-code-and-basic-explanation",
                "content": "I am writing this explanation because this one actually confused me at first, though it is actually remarkably simple.\\n\\nThe basic idea is to put each character in \\'chars\\' into a HashMap alongside the number of times it appears in \\'chars\\'. We treat this value as the number of remaining uses. Then, for each word in our array, we copy the map and then loop through each character in the word. Whenever there is a character in the word that exists as a key in the map copy, we decrement the value for that key. \\n\\nIf the word has any character that is not in the map copy, or if it uses a character more times than is allowed, we mark the word as not good and stop iterating over that word. If all goes well, we mark the word as good and add its length to our result. \\n\\nI hope that helps anyone who is confused.\\n\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n       \\n        HashMap<Character, Integer> map = new HashMap<>(); \\n        \\n        for(char ch: chars.toCharArray()){ //Create a hashmap where the value of each character key is the number of times it appears in \\'chars\\'. Think of it as the number of uses available. \\n            map.put(ch, map.getOrDefault(ch, 0) + 1); //if the key is not already in the map, add it and set the value to 1. If it is already in the map, add one to the value (number of uses)\\n        }\\n        \\n        //The above hashmap is only used as a template to make copies we can use when we check\\n        \\n        int result = 0; //initialize the result\\n        \\n        for(String word: words) { //For every string in words, we make a temp hashmap by copying the main hashmap. We default to being a \\'good\\' string. \\n            \\n            HashMap<Character, Integer> temp = new HashMap<>(map);\\n            boolean good = true;\\n            \\n            //Next, we iterate over the word. \\n            for(int i = 0; i < word.length(); i++){\\n                char ch = word.charAt(i); \\n                \\n                //If our temp map contains the character and the number of remaining uses of that character is greater than 0,\\n                if(temp.containsKey(ch) && temp.get(ch) > 0){\\n                    \\n                    temp.put(ch, temp.get(ch) -1); //Then decrement the number of remaining uses of ch in the hashmap. \\n                    \\n                } else {\\n                    \\n                    //if at any point we find a character in our word that is either not in the map, or has run out of uses, then this is not a good word. End the loop so we can return.\\n                    good = false;\\n                    break;\\n                    \\n                }\\n            }\\n            \\n            //When the loops have stopped running, see if the word is good. If it is, add its length to our result, and then check the next word.\\n            if(good) {\\n                result += word.length();\\n            }\\n        }\\n        \\n        return result;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n       \\n        HashMap<Character, Integer> map = new HashMap<>(); \\n        \\n        for(char ch: chars.toCharArray()){ //Create a hashmap where the value of each character key is the number of times it appears in \\'chars\\'. Think of it as the number of uses available. \\n            map.put(ch, map.getOrDefault(ch, 0) + 1); //if the key is not already in the map, add it and set the value to 1. If it is already in the map, add one to the value (number of uses)\\n        }\\n        \\n        //The above hashmap is only used as a template to make copies we can use when we check\\n        \\n        int result = 0; //initialize the result\\n        \\n        for(String word: words) { //For every string in words, we make a temp hashmap by copying the main hashmap. We default to being a \\'good\\' string. \\n            \\n            HashMap<Character, Integer> temp = new HashMap<>(map);\\n            boolean good = true;\\n            \\n            //Next, we iterate over the word. \\n            for(int i = 0; i < word.length(); i++){\\n                char ch = word.charAt(i); \\n                \\n                //If our temp map contains the character and the number of remaining uses of that character is greater than 0,\\n                if(temp.containsKey(ch) && temp.get(ch) > 0){\\n                    \\n                    temp.put(ch, temp.get(ch) -1); //Then decrement the number of remaining uses of ch in the hashmap. \\n                    \\n                } else {\\n                    \\n                    //if at any point we find a character in our word that is either not in the map, or has run out of uses, then this is not a good word. End the loop so we can return.\\n                    good = false;\\n                    break;\\n                    \\n                }\\n            }\\n            \\n            //When the loops have stopped running, see if the word is good. If it is, add its length to our result, and then check the next word.\\n            if(good) {\\n                result += word.length();\\n            }\\n        }\\n        \\n        return result;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2930339,
                "title": "python-faster-than-99-86-d",
                "content": "# Code\\n###### **NOTE**: This code was changed because of @potatopie\\'s suggestion. (check comments)\\n\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length=[]\\n        for i in words:\\n            for j in i:\\n                if chars.count(j) < i.count(j): \\n                    break\\n            else:\\n                length.append(len(i))\\n        return sum(length)\\n```\\n\\n###### **NOTE**: This code was added as mentioned as a reply to @Coder-Haris\\'s comment. (check comments)\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length = []\\n        freq = collections.defaultdict(lambda: 0)\\n        for c in chars:\\n            freq[c] += 1\\n\\n        for i in words:\\n            for j in i:\\n                if freq[j] < i.count(j): \\n                    break\\n            else:\\n                length.append(len(i))\\n        return sum(length)\\n```\\n\\n![image.png](https://assets.leetcode.com/users/images/ee98e7d8-9fb7-4d8f-963e-a1407a6e5b5c_1671504290.1059043.png)\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length=[]\\n        for i in words:\\n            for j in i:\\n                if chars.count(j) < i.count(j): \\n                    break\\n            else:\\n                length.append(len(i))\\n        return sum(length)\\n```\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length = []\\n        freq = collections.defaultdict(lambda: 0)\\n        for c in chars:\\n            freq[c] += 1\\n\\n        for i in words:\\n            for j in i:\\n                if freq[j] < i.count(j): \\n                    break\\n            else:\\n                length.append(len(i))\\n        return sum(length)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1728800,
                "title": "easy-c-solution-using-hashmaps",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        unordered_map<char,int> chFreq;\\n        for(auto ch : chars) chFreq[ch]++;\\n        bool flag = true;\\n        string count = \"\";\\n        for(auto str : words){\\n            flag = true;\\n            unordered_map<char,int> copyFreq;\\n            for(auto ch : str) copyFreq[ch]++;\\n            for(auto ch : str) if(copyFreq[ch] > chFreq[ch]) flag = false;\\n            if(flag) count += str;\\n        }\\n        return count.length();\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        unordered_map<char,int> chFreq;\\n        for(auto ch : chars) chFreq[ch]++;\\n        bool flag = true;\\n        string count = \"\";\\n        for(auto str : words){\\n            flag = true;\\n            unordered_map<char,int> copyFreq;\\n            for(auto ch : str) copyFreq[ch]++;\\n            for(auto ch : str) if(copyFreq[ch] > chFreq[ch]) flag = false;\\n            if(flag) count += str;\\n        }\\n        return count.length();\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 920728,
                "title": "python3-easy-to-understand-solution",
                "content": "class Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\n        ans = 0\\n        for word in words:\\n            flag = 1\\n            for char in word:\\n                if chars.count(char) < word.count(char):\\n                    flag = 0\\n                    break\\n            if flag:\\n                ans += len(word)\\n        return ans",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\n        ans = 0\\n        for word in words:\\n            flag = 1\\n            for char in word:\\n                if chars.count(char) < word.count(char):\\n                    flag = 0\\n                    break\\n            if flag:\\n                ans += len(word)\\n        return ans",
                "codeTag": "Java"
            },
            {
                "id": 364805,
                "title": "python-solution-faster-than-100",
                "content": "```python\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ret = 0\\n\\n        for word in words:\\n            boolean = True\\n            for i in word:\\n                if word.count(i) > chars.count(i):\\n                    boolean = False\\n                    break\\n            if boolean:\\n                ret += len(word)\\n\\n        return ret\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ret = 0\\n\\n        for word in words:\\n            boolean = True\\n            for i in word:\\n                if word.count(i) > chars.count(i):\\n                    boolean = False\\n                    break\\n            if boolean:\\n                ret += len(word)\\n\\n        return ret\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361877,
                "title": "javascript",
                "content": "```\\nvar countCharacters = function(words, chars) {\\n    \\n    let count = 0\\n    \\n    const makeHash = (word) => {\\n        let hash = {}\\n        for (let i = 0; i < word.length; i++){\\n            hash[word[i]] ? hash[word[i]]++ : hash[word[i]] = 1\\n        }\\n        return hash\\n    }\\n    \\n    let hash = makeHash(chars)\\n        \\n    for (let i = 0; i < words.length; i++){\\n        let bool = true\\n        let temp = makeHash(words[i])\\n        for(let key in temp){\\n            if (!hash[key] || hash[key] < temp[key]){\\n                bool = false\\n            }\\n        }\\n        bool && (count += words[i].length)\\n    }\\n    return count\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    \\n    let count = 0\\n    \\n    const makeHash = (word) => {\\n        let hash = {}\\n        for (let i = 0; i < word.length; i++){\\n            hash[word[i]] ? hash[word[i]]++ : hash[word[i]] = 1\\n        }\\n        return hash\\n    }\\n    \\n    let hash = makeHash(chars)\\n        \\n    for (let i = 0; i < words.length; i++){\\n        let bool = true\\n        let temp = makeHash(words[i])\\n        for(let key in temp){\\n            if (!hash[key] || hash[key] < temp[key]){\\n                bool = false\\n            }\\n        }\\n        bool && (count += words[i].length)\\n    }\\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2547774,
                "title": "java-array-ascii-easy-solution",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int arr1[] = new int[26];\\n        for(int i=0;i<chars.length();i++){\\n            int num = chars.charAt(i)-97;\\n            arr1[num]++;\\n        }\\n        int len=0;\\n        for(int i=0;i<words.length;i++){\\n            String str = words[i];\\n            int arr2[] = new int[26];\\n            for(int j=0;j<str.length();j++){\\n                int num = str.charAt(j)-97;\\n                arr2[num]++;\\n            }\\n            int flag=0;\\n            for(int k=0;k<26;k++){\\n                if(arr2[k]>arr1[k]){\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n                len=len+str.length();\\n        }\\n        return len;\\n    }\\n}\\n```\\nKindly upvote if you like the code.",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int arr1[] = new int[26];\\n        for(int i=0;i<chars.length();i++){\\n            int num = chars.charAt(i)-97;\\n            arr1[num]++;\\n        }\\n        int len=0;\\n        for(int i=0;i<words.length;i++){\\n            String str = words[i];\\n            int arr2[] = new int[26];\\n            for(int j=0;j<str.length();j++){\\n                int num = str.charAt(j)-97;\\n                arr2[num]++;\\n            }\\n            int flag=0;\\n            for(int k=0;k<26;k++){\\n                if(arr2[k]>arr1[k]){\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n                len=len+str.length();\\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 964311,
                "title": "c-count-stl-function-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) \\n    {\\n        int sum=0,c=0;\\n        for(auto &x: words)\\n        {\\n            for(auto &ch : x)\\n            {\\n                if(count(x.begin(),x.end(),ch)<=count(chars.begin(),chars.end(),ch))\\n                {\\n                    c++;\\n                }\\n                else\\n                {\\n                    c=0;\\n                    break;\\n                }\\n            }\\n            sum=sum+c;\\n            c=0;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) \\n    {\\n        int sum=0,c=0;\\n        for(auto &x: words)\\n        {\\n            for(auto &ch : x)\\n            {\\n                if(count(x.begin(),x.end(),ch)<=count(chars.begin(),chars.end(),ch))\\n                {\\n                    c++;\\n                }\\n                else\\n                {\\n                    c=0;\\n                    break;\\n                }\\n            }\\n            sum=sum+c;\\n            c=0;\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2177578,
                "title": "python3-o-n-2-o-1-runtime-96ms-97-20-memory-14-5mb-84-92",
                "content": "```\\nclass Solution:\\n#     O(n^2) || O(1)\\n# Runtime: 96ms 97.20% Memory: 14.5mb 84.92%\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans=0\\n        for word in words:\\n            for ch in word:\\n                if word.count(ch)>chars.count(ch):\\n                    break\\n            else:\\n                ans+=len(word)\\n        \\n        return ans\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n#     O(n^2) || O(1)\\n# Runtime: 96ms 97.20% Memory: 14.5mb 84.92%\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans=0\\n        for word in words:\\n            for ch in word:\\n                if word.count(ch)>chars.count(ch):\\n                    break\\n            else:\\n                ans+=len(word)\\n        \\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1694903,
                "title": "javascript-solution",
                "content": "## Please upvote, if it helps you!\\n\\n```\\nvar countCharacters = function(words, chars) {\\n    function generateMap(string) {\\n        let map = {}\\n        for (let char of string) {\\n            map[char] = map[char] ? map[char] + 1 : 1\\n        }\\n        return map\\n    }\\n    \\n    let count = 0\\n    \\n    for (let word of words) {\\n        let map = generateMap(chars)\\n        let isValidWord = true\\n        for (let char of word) {            \\n            if (map[char] > 0) {\\n                map[char] -= 1\\n            } else {\\n                isValidWord = false\\n            }\\n        }\\n        if (isValidWord) {\\n            count += word.length\\n        }\\n    }\\n    \\n    return count\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "String"
                ],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    function generateMap(string) {\\n        let map = {}\\n        for (let char of string) {\\n            map[char] = map[char] ? map[char] + 1 : 1\\n        }\\n        return map\\n    }\\n    \\n    let count = 0\\n    \\n    for (let word of words) {\\n        let map = generateMap(chars)\\n        let isValidWord = true\\n        for (let char of word) {            \\n            if (map[char] > 0) {\\n                map[char] -= 1\\n            } else {\\n                isValidWord = false\\n            }\\n        }\\n        if (isValidWord) {\\n            count += word.length\\n        }\\n    }\\n    \\n    return count\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 559328,
                "title": "java-count-in-array-explained",
                "content": "You can solve this in muplitple way, just alternative one for fun.\\nUse array of 26 to count freq of every char in \"chars\".\\nThen iterate over array of words and for each one start counting freq of chars in that word. Every time we count one char in a word compare if that char count is no more than a count of the same char in \"chars\". If greater - this word cannnot be count. Otherwise in the end add length of the word to result.\\n\\nO(NxM) time - need to check every char in every word in words. O(1) space (we use arrays of length 26)\\n\\n```\\n    public int countCharacters(String[] words, String chars) {\\n        if (chars == null || chars.isEmpty() || words == null || words.length == 0)\\n            return 0;\\n        \\n        int[] counts = new int[26];\\n        for (char ch : chars.toCharArray()) {\\n            ++counts[ch - \\'a\\'];    \\n        }\\n        \\n        int res = 0;\\n        for (String w : words) {\\n            int[] wordCounts = new int[26];\\n            boolean possible = true;\\n            for (char ch : w.toCharArray()) {\\n                int idx = ch - \\'a\\';\\n                ++wordCounts[idx];\\n                if (wordCounts[idx] > counts[idx]) {\\n                    possible = false;\\n                    break;\\n                }\\n            }\\n    \\n            if (!possible)\\n                continue;\\n            \\n            res+=w.length();\\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Java",
                    "String",
                    "Counting"
                ],
                "code": "```\\n    public int countCharacters(String[] words, String chars) {\\n        if (chars == null || chars.isEmpty() || words == null || words.length == 0)\\n            return 0;\\n        \\n        int[] counts = new int[26];\\n        for (char ch : chars.toCharArray()) {\\n            ++counts[ch - \\'a\\'];    \\n        }\\n        \\n        int res = 0;\\n        for (String w : words) {\\n            int[] wordCounts = new int[26];\\n            boolean possible = true;\\n            for (char ch : w.toCharArray()) {\\n                int idx = ch - \\'a\\';\\n                ++wordCounts[idx];\\n                if (wordCounts[idx] > counts[idx]) {\\n                    possible = false;\\n                    break;\\n                }\\n            }\\n    \\n            if (!possible)\\n                continue;\\n            \\n            res+=w.length();\\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 386685,
                "title": "python-3-one-liner-abomination",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum([len(w) if (False not in [False if (w.count(l) > chars.count(l)) else True for l in [chr(c) for c in range(97, 123)]]) else 0 for w in words])\\n```\\n\\t\\t\\nNice",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum([len(w) if (False not in [False if (w.count(l) > chars.count(l)) else True for l in [chr(c) for c in range(97, 123)]]) else 0 for w in words])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3128433,
                "title": "simple-java-solution-with-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/*\\nAlgorithm - \\n1. Initialize the count to 0. \\n2. Iterate through an array of strings. \\n    - Check if the string element at index, i is good with the string, chars. \\n        - If it is good, increment the count by the length of the string, words[i]. \\n3. Return the value of the count variable onto the main method. \\n\\nHelper Function isGood - \\n1. Create a hashmap to map the characters in string, chars to the occurrence by iterating through the string, chars. \\n2. Check the elements of hashmap and its occurrence before modification. \\n3. Iterate through the string word and check if the character, ch exists in the hashmap and its occurrence is greater than 0, \\nif it is then decrement the occurrence of that character by 1 and assign the new value to the key (i.e, character ch) onto the hashmap, hm. \\nElse, return false if the character is not present in the hashmap or the count of the character is equal to 0. \\n4. Verify the hashmap after modification for error checks/testing. \\n5. Return true onto the calling function if the string is good. \\n\\nComplexity Analysis - \\n1. Time Complexity = O(N ^ 2 + N * M) => O(N ^ 2)\\n2. Space Complexity = O(N)\\n\\n*/\\n\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (isGood(words[i], chars)) {\\n                System.out.println(\"Good\");\\n                count += words[i].length();\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    private boolean isGood(String word, String chars) {\\n        Map<Character, Integer> hm = new HashMap<>();\\n\\n        for (int i = 0; i < chars.length(); i++) {\\n            char ch = chars.charAt(i);\\n            hm.put(ch, hm.getOrDefault(ch, 0) + 1);\\n        }\\n        System.out.println(\"Hashmap before modification  \" + hm);\\n\\n        for (int i = 0; i < word.length(); i++) {\\n            char ch = word.charAt(i);\\n            if (hm.containsKey(ch) && hm.get(ch) > 0) {\\n                hm.put(ch, hm.get(ch) - 1);\\n            } else {\\n                return false;\\n            }\\n        }\\n        System.out.println(\"Hashmap after modification \" + hm);\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n/*\\nAlgorithm - \\n1. Initialize the count to 0. \\n2. Iterate through an array of strings. \\n    - Check if the string element at index, i is good with the string, chars. \\n        - If it is good, increment the count by the length of the string, words[i]. \\n3. Return the value of the count variable onto the main method. \\n\\nHelper Function isGood - \\n1. Create a hashmap to map the characters in string, chars to the occurrence by iterating through the string, chars. \\n2. Check the elements of hashmap and its occurrence before modification. \\n3. Iterate through the string word and check if the character, ch exists in the hashmap and its occurrence is greater than 0, \\nif it is then decrement the occurrence of that character by 1 and assign the new value to the key (i.e, character ch) onto the hashmap, hm. \\nElse, return false if the character is not present in the hashmap or the count of the character is equal to 0. \\n4. Verify the hashmap after modification for error checks/testing. \\n5. Return true onto the calling function if the string is good. \\n\\nComplexity Analysis - \\n1. Time Complexity = O(N ^ 2 + N * M) => O(N ^ 2)\\n2. Space Complexity = O(N)\\n\\n*/\\n\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n\\n        for (int i = 0; i < words.length; i++) {\\n            if (isGood(words[i], chars)) {\\n                System.out.println(\"Good\");\\n                count += words[i].length();\\n            }\\n        }\\n\\n        return count;\\n    }\\n\\n    private boolean isGood(String word, String chars) {\\n        Map<Character, Integer> hm = new HashMap<>();\\n\\n        for (int i = 0; i < chars.length(); i++) {\\n            char ch = chars.charAt(i);\\n            hm.put(ch, hm.getOrDefault(ch, 0) + 1);\\n        }\\n        System.out.println(\"Hashmap before modification  \" + hm);\\n\\n        for (int i = 0; i < word.length(); i++) {\\n            char ch = word.charAt(i);\\n            if (hm.containsKey(ch) && hm.get(ch) > 0) {\\n                hm.put(ch, hm.get(ch) - 1);\\n            } else {\\n                return false;\\n            }\\n        }\\n        System.out.println(\"Hashmap after modification \" + hm);\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2924506,
                "title": "find-words-that-can-be-formed-by-characters-solution-java",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n  public int countCharacters(String[] words, String chars) {\\n    int ans = 0;\\n    int[] count = new int[26];\\n\\n    for (final char c : chars.toCharArray())\\n      ++count[c - \\'a\\'];\\n\\n    for (final String word : words) {\\n      int[] tempCount = count.clone();\\n      for (final char c : word.toCharArray())\\n        if (--tempCount[c - \\'a\\'] < 0) {\\n          ans -= word.length();\\n          break;\\n        }\\n      ans += word.length();\\n    }\\n\\n    return ans;\\n  }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n  public int countCharacters(String[] words, String chars) {\\n    int ans = 0;\\n    int[] count = new int[26];\\n\\n    for (final char c : chars.toCharArray())\\n      ++count[c - \\'a\\'];\\n\\n    for (final String word : words) {\\n      int[] tempCount = count.clone();\\n      for (final char c : word.toCharArray())\\n        if (--tempCount[c - \\'a\\'] < 0) {\\n          ans -= word.length();\\n          break;\\n        }\\n      ans += word.length();\\n    }\\n\\n    return ans;\\n  }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2188726,
                "title": "python-1-liner",
                "content": "In Python, you can comapre dictionaries.\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(len(word) if collections.Counter(word) <= collections.Counter(chars) else 0 for word in words)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(len(word) if collections.Counter(word) <= collections.Counter(chars) else 0 for word in words)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1147614,
                "title": "simple-java-solution-highly-readable-and-commented",
                "content": "```\\nclass Solution {\\n    private boolean ifWordFeasible(String word, int[] charsFreq) {\\n        for (char chr: word.toCharArray()) { \\n            --charsFreq[chr-\\'a\\']; //reduce frequency of characters in the word\\n            if (charsFreq[chr-\\'a\\'] < 0) return false; //Check if anywhere insufficient chars (i.e use characters from chars string) are there in that case return false\\n        }\\n        return true;\\n        \\n    }\\n    public int countCharacters(String[] words, String chars) {\\n        int result=0; // result variable to store the answer\\n        \\n        for (String word: words) { //iterate over words\\n            int[] charsFreq = new int[26]; //Maintain frequency of characters in chars\\n            for (char chr: chars.toCharArray()) ++charsFreq[chr-\\'a\\']; //Count frequency for all 26 alphabets\\n            if (ifWordFeasible(word, charsFreq))  result += word.length(); // check if word is feasible and add length if feasible\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    private boolean ifWordFeasible(String word, int[] charsFreq) {\\n        for (char chr: word.toCharArray()) { \\n            --charsFreq[chr-\\'a\\']; //reduce frequency of characters in the word\\n            if (charsFreq[chr-\\'a\\'] < 0) return false; //Check if anywhere insufficient chars (i.e use characters from chars string) are there in that case return false\\n        }\\n        return true;\\n        \\n    }\\n    public int countCharacters(String[] words, String chars) {\\n        int result=0; // result variable to store the answer\\n        \\n        for (String word: words) { //iterate over words\\n            int[] charsFreq = new int[26]; //Maintain frequency of characters in chars\\n            for (char chr: chars.toCharArray()) ++charsFreq[chr-\\'a\\']; //Count frequency for all 26 alphabets\\n            if (ifWordFeasible(word, charsFreq))  result += word.length(); // check if word is feasible and add length if feasible\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1067968,
                "title": "c-simple-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint countCharacters(vector<string>& words, string chars) {\\t\\n\\t\\t\\tvector<int> charfrequency(26,0);\\n\\t\\t\\tbool canform = true;\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(char &ch:chars) {\\n\\t\\t\\t\\tcharfrequency[ch - \\'a\\']++;\\n\\t\\t\\t}\\n\\t\\t\\tfor(auto &word:words){\\n\\t\\t\\t\\tvector<int> wordfrequency(26,0);\\n\\t\\t\\t\\tfor(auto &ch:word){\\n\\t\\t\\t\\t\\twordfrequency[ch - \\'a\\']++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tfor(int i = 0;i<charfrequency.size();i++){\\n\\t\\t\\t\\t\\tif(wordfrequency[i] > charfrequency[i]){\\n\\t\\t\\t\\t\\t\\tcanform = false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\telse canform = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(canform) count += word.length();\\n\\t\\t\\t}\\n\\t\\t\\treturn count;    \\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint countCharacters(vector<string>& words, string chars) {\\t\\n\\t\\t\\tvector<int> charfrequency(26,0);\\n\\t\\t\\tbool canform = true;\\n\\t\\t\\tint count = 0;\\n\\t\\t\\tfor(char &ch:chars) {\\n\\t\\t\\t\\tcharfrequency[ch - \\'a\\']++;\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 694572,
                "title": "clean-js-solution",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    let res = 0;\\n    for (let word of words) {\\n        if (word.length > chars.length) continue;\\n        if (isGoodString(word, chars)) res += word.length;\\n    }\\n    return res;\\n};\\n    \\nvar isGoodString = function(word, chars) {\\n    let arr = chars.split(\"\");\\n    for (let char of word) {\\n        let idx = arr.indexOf(char);\\n        if (idx === -1) return false;\\n        else arr[idx] = \"\";\\n    }      \\n    return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    let res = 0;\\n    for (let word of words) {\\n        if (word.length > chars.length) continue;\\n        if (isGoodString(word, chars)) res += word.length;\\n    }\\n    return res;\\n};\\n    \\nvar isGoodString = function(word, chars) {\\n    let arr = chars.split(\"\");\\n    for (let char of word) {\\n        let idx = arr.indexOf(char);\\n        if (idx === -1) return false;\\n        else arr[idx] = \"\";\\n    }      \\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 454173,
                "title": "c-40-stl-includes",
                "content": "class Solution {\\npublic:\\n    int countCharacters(std::vector<std::string>& words, std::string chars) {\\n        \\n        int res = 0;\\n        \\n        std::sort(chars.begin(), chars.end());\\n        \\n        for(auto & el: words)\\n        {\\n            std::sort(el.begin(), el.end());\\n        }\\n        \\n        for(size_t i = 0; i < words.size(); i++)\\n        {\\n            if(std::includes(chars.begin(), chars.end(), words[i].begin(), words[i].end()))\\n            {\\n                res += words[i].size();\\n            }\\n        }\\n        \\n        return res;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countCharacters(std::vector<std::string>& words, std::string chars) {\\n        \\n        int res = 0;\\n        \\n        std::sort(chars.begin(), chars.end());\\n        \\n        for(auto & el: words)\\n        {\\n            std::sort(el.begin(), el.end());\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 365638,
                "title": "python-3-simple-solution",
                "content": "class Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c = 0\\n        for i in words:\\n            flag = True\\n            for j in i:\\n                if i.count(j)>chars.count(j):\\n                    flag = False\\n            if flag:\\n                c = c + len(i)\\n        return c",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "class Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c = 0\\n        for i in words:\\n            flag = True\\n            for j in i:\\n                if i.count(j)>chars.count(j):\\n                    flag = False\\n            if flag:\\n                c = c + len(i)\\n        return c",
                "codeTag": "Java"
            },
            {
                "id": 364223,
                "title": "java-solution",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] dict = new int[256];\\n        for (char c : chars.toCharArray()) {\\n            dict[c]++;\\n        }\\n        int res = 0;\\n        for (String word : words) {\\n            int[] curDict = new int[256];\\n            boolean isValid = true;\\n            for (char c : word.toCharArray()) {\\n                curDict[c]++;\\n                if (curDict[c] > dict[c]) {\\n                    isValid = false;\\n                    break;\\n                }\\n            }\\n            res += isValid ? word.length() : 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] dict = new int[256];\\n        for (char c : chars.toCharArray()) {\\n            dict[c]++;\\n        }\\n        int res = 0;\\n        for (String word : words) {\\n            int[] curDict = new int[256];\\n            boolean isValid = true;\\n            for (char c : word.toCharArray()) {\\n                curDict[c]++;\\n                if (curDict[c] > dict[c]) {\\n                    isValid = false;\\n                    break;\\n                }\\n            }\\n            res += isValid ? word.length() : 0;\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2476433,
                "title": "simple-solution-with-go",
                "content": "```\\nfunc countCharacters(words []string, chars string) int {\\n    charSet := make([]int, 26)\\n    \\n    for i := 0; i < len(chars); i++ {\\n        charSet[int(chars[i] - \\'a\\')]++\\n    }\\n    \\n    sum := 0\\n    \\n    for _, word := range words {\\n        currentCharSet := make([]int, 26)\\n        copy(currentCharSet, charSet)\\n        \\n        isValid := true\\n        \\n        for i := 0; i < len(word); i++ {\\n            currentCharSet[int(word[i] - \\'a\\')]--\\n            \\n            if currentCharSet[int(word[i] - \\'a\\')] < 0 {\\n                isValid = false\\n                break\\n            }\\n        }\\n        \\n        if isValid {\\n            sum += len(word)\\n        }\\n    }\\n    \\n    return sum\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc countCharacters(words []string, chars string) int {\\n    charSet := make([]int, 26)\\n    \\n    for i := 0; i < len(chars); i++ {\\n        charSet[int(chars[i] - \\'a\\')]++\\n    }\\n    \\n    sum := 0\\n    \\n    for _, word := range words {\\n        currentCharSet := make([]int, 26)\\n        copy(currentCharSet, charSet)\\n        \\n        isValid := true\\n        \\n        for i := 0; i < len(word); i++ {\\n            currentCharSet[int(word[i] - \\'a\\')]--\\n            \\n            if currentCharSet[int(word[i] - \\'a\\')] < 0 {\\n                isValid = false\\n                break\\n            }\\n        }\\n        \\n        if isValid {\\n            sum += len(word)\\n        }\\n    }\\n    \\n    return sum\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2395219,
                "title": "python-using-set-and-list-comprehension",
                "content": "```\\nclass Solution(object):\\n    def countCharacters(self, words, chars):\\n        \"\"\"\\n        :type words: List[str]\\n        :type chars: str\\n        :rtype: int\\n        \"\"\"\\n        b = set(chars)\\n        anwser = 0\\n        for i in words:\\n            a = set(i)\\n            if a.issubset(b):\\n                test = [o for o in a if chars.count(o) < i.count(o)]\\n                if len(test) == 0:    \\n                    anwser += len(i)\\n        return anwser\\n```",
                "solutionTags": [
                    "Python",
                    "Ordered Set"
                ],
                "code": "```\\nclass Solution(object):\\n    def countCharacters(self, words, chars):\\n        \"\"\"\\n        :type words: List[str]\\n        :type chars: str\\n        :rtype: int\\n        \"\"\"\\n        b = set(chars)\\n        anwser = 0\\n        for i in words:\\n            a = set(i)\\n            if a.issubset(b):\\n                test = [o for o in a if chars.count(o) < i.count(o)]\\n                if len(test) == 0:    \\n                    anwser += len(i)\\n        return anwser\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2156172,
                "title": "java-solution",
                "content": "I personally don\\'t like this problem becasue the description is so vauge. \\n  \\n  ```\\n  class Solution \\n{\\n    public int countCharacters(String[] words, String chars)\\n    {\\n        HashMap<Character, Integer> myMap = new HashMap<>();\\n        int res = 0;\\n          \\n        for(char ch : chars.toCharArray())\\n            myMap.put(ch, myMap.getOrDefault(ch, 0) + 1);\\n        \\n        for(String word: words)\\n        {\\n            HashMap<Character, Integer> count = new HashMap<>();\\n            int i = 0;\\n            \\n            for(; i < word.length(); i++)\\n            {\\n                char ch = word.charAt(i);\\n                \\n                if(myMap.containsKey(ch)) \\n                {\\n                    if(count.containsKey(ch) && count.get(ch) + 1 > myMap.get(ch))\\n                        break;\\n                    count.put(ch, count.getOrDefault(ch, 0) + 1);\\n                } \\n                else\\n                    break;\\n            }\\n            if(i == word.length())\\n                res += word.length();\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n  class Solution \\n{\\n    public int countCharacters(String[] words, String chars)\\n    {\\n        HashMap<Character, Integer> myMap = new HashMap<>();\\n        int res = 0;\\n          \\n        for(char ch : chars.toCharArray())\\n            myMap.put(ch, myMap.getOrDefault(ch, 0) + 1);\\n        \\n        for(String word: words)\\n        {\\n            HashMap<Character, Integer> count = new HashMap<>();\\n            int i = 0;\\n            \\n            for(; i < word.length(); i++)\\n            {\\n                char ch = word.charAt(i);\\n                \\n                if(myMap.containsKey(ch)) \\n                {\\n                    if(count.containsKey(ch) && count.get(ch) + 1 > myMap.get(ch))\\n                        break;\\n                    count.put(ch, count.getOrDefault(ch, 0) + 1);\\n                } \\n                else\\n                    break;\\n            }\\n            if(i == word.length())\\n                res += word.length();\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2100869,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int count[] = new int[26];\\n        int word_count[][] = new int[words.length][26];\\n        int res = 0;\\n        \\n        for(int i=0; i<chars.length(); i++)\\n            count[(int)(chars.charAt(i) - 97)]++;\\n        \\n        for(int i=0; i<words.length; i++)\\n        {\\n            for(int j=0; j<words[i].length(); j++)\\n                word_count[i][(int)(words[i].charAt(j) - 97)]++;\\n        }\\n        \\n        for(int i=0; i<word_count.length; i++)\\n        {\\n            int c = 0;\\n            for(int j=0; j<26; j++)\\n            {\\n                if(count[j] >= word_count[i][j])\\n                    c++;\\n            }\\n            if(c == 26)\\n                res += words[i].length();\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int count[] = new int[26];\\n        int word_count[][] = new int[words.length][26];\\n        int res = 0;\\n        \\n        for(int i=0; i<chars.length(); i++)\\n            count[(int)(chars.charAt(i) - 97)]++;\\n        \\n        for(int i=0; i<words.length; i++)\\n        {\\n            for(int j=0; j<words[i].length(); j++)\\n                word_count[i][(int)(words[i].charAt(j) - 97)]++;\\n        }\\n        \\n        for(int i=0; i<word_count.length; i++)\\n        {\\n            int c = 0;\\n            for(int j=0; j<26; j++)\\n            {\\n                if(count[j] >= word_count[i][j])\\n                    c++;\\n            }\\n            if(c == 26)\\n                res += words[i].length();\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2099811,
                "title": "python-top-95-solution",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans = \\'\\'\\n        for word in words:\\n            for letter in word:\\n                if chars.count(letter) < word.count(letter):\\n                    break\\n            else:\\n                ans += word\\n        return len(ans)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans = \\'\\'\\n        for word in words:\\n            for letter in word:\\n                if chars.count(letter) < word.count(letter):\\n                    break\\n            else:\\n                ans += word\\n        return len(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1968112,
                "title": "c-hashmap-easy-understanding-clean-code",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        unordered_map<char,int> map;\\n        for(char c:chars)\\n        {\\n            map[c]++;\\n        }\\n        int result = 0;\\n        for(int i = 0;i<words.size();i++)\\n        {\\n            if(funcheck(map,words[i]))\\n            {\\n                result += words[i].size();\\n            }\\n        }\\n        \\n        return result;\\n    }\\n    \\n    bool funcheck(unordered_map<char,int> map,string word)\\n    {\\n        for(char c:word)\\n        {\\n            if(map.find(c) != map.end())\\n            {\\n                map[c]--;\\n                if(map[c] == 0)\\n                {\\n                    map.erase(c);\\n                }\\n            }\\n            \\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n    return true;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        unordered_map<char,int> map;\\n        for(char c:chars)\\n        {\\n            map[c]++;\\n        }\\n        int result = 0;\\n        for(int i = 0;i<words.size();i++)\\n        {\\n            if(funcheck(map,words[i]))\\n            {\\n                result += words[i].size();\\n            }\\n        }\\n        \\n        return result;\\n    }\\n    \\n    bool funcheck(unordered_map<char,int> map,string word)\\n    {\\n        for(char c:word)\\n        {\\n            if(map.find(c) != map.end())\\n            {\\n                map[c]--;\\n                if(map[c] == 0)\\n                {\\n                    map.erase(c);\\n                }\\n            }\\n            \\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        \\n    return true;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1711673,
                "title": "java-hashing-explained",
                "content": "**Idea:** \\n* Find the frequency of each letter in `chars`\\n* For each word `w`, the frequency of each letter `l` must be less than or equal to its frequency in `chars` for `w` to be qualify as a good word\\n>**T/S:** O(m + n)/O(1), where m = size(chars), n = sum(size(words[i]))\\n```\\npublic int countCharacters(String[] words, String chars) {\\n\\tvar letterFrequency = getLetterFrequency(chars);\\n\\tvar count = 0;\\n\\t\\n\\tfor (var word : words)\\n\\t\\tif (isGood(letterFrequency, getLetterFrequency(word)))\\n\\t\\t\\tcount += word.length();\\n\\t\\n\\treturn count;\\n}\\n\\nprivate Map<Character, Integer> getLetterFrequency(String chars) {\\n\\tvar letterFrequency = new HashMap<Character, Integer>();\\n\\tfor (var i = 0; i < chars.length(); i++)\\n\\t\\tletterFrequency.compute(chars.charAt(i), (k, v) -> v == null ? 1 : v + 1);\\n\\treturn letterFrequency;\\n}\\n\\nprivate boolean isGood(Map<Character, Integer> letterFrequency, Map<Character, Integer> wordMap) {\\n\\tfor (var letter : wordMap.keySet())\\n\\t\\tif (letterFrequency.getOrDefault(letter, 0) < wordMap.get(letter))\\n\\t\\t\\treturn false;\\n\\treturn true;\\n}\\n```\\n\\n**Stream Variation:** 6 lines\\n```\\npublic int countCharacters(String[] words, String chars) {\\n\\tvar letterFrequency = getLetterFrequency(chars);\\n\\t\\n\\treturn Arrays.stream(words)\\n\\t\\t\\t\\t .filter(word -> isGood(letterFrequency, getLetterFrequency(word)))\\n\\t\\t\\t\\t .mapToInt(String::length)\\n\\t\\t\\t\\t .sum();\\n}\\n\\nprivate Map<Character, Integer> getLetterFrequency(String chars) {\\n\\tvar letterFrequency = new HashMap<Character, Integer>();\\n\\t\\n\\tIntStream.range(0, chars.length())\\n\\t\\t\\t .forEach(i -> letterFrequency.compute(chars.charAt(i), (k, v) -> v == null ? 1 : v + 1));\\n\\t\\t\\t \\n\\treturn letterFrequency;\\n}\\n\\nprivate boolean isGood(Map<Character, Integer> letterFrequency, Map<Character, Integer> wordMap) {\\n\\treturn wordMap.keySet()\\n\\t\\t\\t\\t  .stream()\\n\\t\\t\\t\\t  .noneMatch(letter -> letterFrequency.getOrDefault(letter, 0) < wordMap.get(letter));\\n}\\n```\\n***Please upvote if this helps***",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int countCharacters(String[] words, String chars) {\\n\\tvar letterFrequency = getLetterFrequency(chars);\\n\\tvar count = 0;\\n\\t\\n\\tfor (var word : words)\\n\\t\\tif (isGood(letterFrequency, getLetterFrequency(word)))\\n\\t\\t\\tcount += word.length();\\n\\t\\n\\treturn count;\\n}\\n\\nprivate Map<Character, Integer> getLetterFrequency(String chars) {\\n\\tvar letterFrequency = new HashMap<Character, Integer>();\\n\\tfor (var i = 0; i < chars.length(); i++)\\n\\t\\tletterFrequency.compute(chars.charAt(i), (k, v) -> v == null ? 1 : v + 1);\\n\\treturn letterFrequency;\\n}\\n\\nprivate boolean isGood(Map<Character, Integer> letterFrequency, Map<Character, Integer> wordMap) {\\n\\tfor (var letter : wordMap.keySet())\\n\\t\\tif (letterFrequency.getOrDefault(letter, 0) < wordMap.get(letter))\\n\\t\\t\\treturn false;\\n\\treturn true;\\n}\\n```\n```\\npublic int countCharacters(String[] words, String chars) {\\n\\tvar letterFrequency = getLetterFrequency(chars);\\n\\t\\n\\treturn Arrays.stream(words)\\n\\t\\t\\t\\t .filter(word -> isGood(letterFrequency, getLetterFrequency(word)))\\n\\t\\t\\t\\t .mapToInt(String::length)\\n\\t\\t\\t\\t .sum();\\n}\\n\\nprivate Map<Character, Integer> getLetterFrequency(String chars) {\\n\\tvar letterFrequency = new HashMap<Character, Integer>();\\n\\t\\n\\tIntStream.range(0, chars.length())\\n\\t\\t\\t .forEach(i -> letterFrequency.compute(chars.charAt(i), (k, v) -> v == null ? 1 : v + 1));\\n\\t\\t\\t \\n\\treturn letterFrequency;\\n}\\n\\nprivate boolean isGood(Map<Character, Integer> letterFrequency, Map<Character, Integer> wordMap) {\\n\\treturn wordMap.keySet()\\n\\t\\t\\t\\t  .stream()\\n\\t\\t\\t\\t  .noneMatch(letter -> letterFrequency.getOrDefault(letter, 0) < wordMap.get(letter));\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1500546,
                "title": "simple-java-approach-no-cloning-no-extra-memory",
                "content": "```\\n    public int countCharacters(String[] words, String chars) {\\n        int[] charsArray = new int[26];\\n        for (char c : chars.toCharArray()) charsArray[c - \\'a\\']++;\\n        int sum = 0;\\n        MAIN_LOOP:\\n        for (String word : words) {\\n            int[] wordArray = new int[26];\\n            for (char c : word.toCharArray()) wordArray[c - \\'a\\']++;\\n            for (int i = 0; i < 26; i++) \\n                if (wordArray[i] > 0 && charsArray[i] < wordArray[i]) continue MAIN_LOOP;\\n            sum += word.length();\\n        }\\n        return sum;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int countCharacters(String[] words, String chars) {\\n        int[] charsArray = new int[26];\\n        for (char c : chars.toCharArray()) charsArray[c - \\'a\\']++;\\n        int sum = 0;\\n        MAIN_LOOP:\\n        for (String word : words) {\\n            int[] wordArray = new int[26];\\n            for (char c : word.toCharArray()) wordArray[c - \\'a\\']++;\\n            for (int i = 0; i < 26; i++) \\n                if (wordArray[i] > 0 && charsArray[i] < wordArray[i]) continue MAIN_LOOP;\\n            sum += word.length();\\n        }\\n        return sum;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1389605,
                "title": "java-clean-and-easy-solution",
                "content": "**Do vote up if you like it :)**\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] commDict = new int[26];\\n        for(char c : chars.toCharArray()) {\\n            commDict[c - \\'a\\']++;\\n        }\\n        \\n        StringBuilder sb = new StringBuilder();\\n        \\n        for(String word : words) {\\n            int[] currDict = new int[26];\\n            for(char c : word.toCharArray()) {\\n                currDict[c - \\'a\\']++;\\n            }\\n            \\n            boolean notGood = false;\\n            for(int i = 0; i < 26; i++) {\\n                if(currDict[i] > commDict[i]) {\\n                    notGood = true;\\n                    break;\\n                }\\n            }\\n            if(!notGood) sb.append(word);\\n        }\\n        return sb.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] commDict = new int[26];\\n        for(char c : chars.toCharArray()) {\\n            commDict[c - \\'a\\']++;\\n        }\\n        \\n        StringBuilder sb = new StringBuilder();\\n        \\n        for(String word : words) {\\n            int[] currDict = new int[26];\\n            for(char c : word.toCharArray()) {\\n                currDict[c - \\'a\\']++;\\n            }\\n            \\n            boolean notGood = false;\\n            for(int i = 0; i < 26; i++) {\\n                if(currDict[i] > commDict[i]) {\\n                    notGood = true;\\n                    break;\\n                }\\n            }\\n            if(!notGood) sb.append(word);\\n        }\\n        return sb.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1016016,
                "title": "javascript-solution",
                "content": "```\\nvar countCharacters = function (words, chars) {\\n  let counter = 0;\\n\\n  const isLegit = (word) => {\\n    let str = chars;\\n      \\n    for (let char of word) {\\n      if (str.includes(char)) {\\n        str = str.replace(char, \\'\\');\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  for (let word of words) {\\n    isLegit(word) ? (counter += word.length) : null;\\n  }\\n\\n  return counter;\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function (words, chars) {\\n  let counter = 0;\\n\\n  const isLegit = (word) => {\\n    let str = chars;\\n      \\n    for (let char of word) {\\n      if (str.includes(char)) {\\n        str = str.replace(char, \\'\\');\\n      } else {\\n        return false;\\n      }\\n    }\\n    return true;\\n  };\\n\\n  for (let word of words) {\\n    isLegit(word) ? (counter += word.length) : null;\\n  }\\n\\n  return counter;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 806134,
                "title": "python-using-dictionaries-please-suggest-improvements",
                "content": "I\\'ve used 2 dictionaries. One containing the frequencies of characters in chars and the other containing the frequency of each word [ A dic is Overwriten for every word ] Any suggestions on how I can improve this code?\\n\\nIt runs faster than 35% and takes lesser memory than 87%\\n\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        from collections import Counter\\n        d = Counter(chars)\\n        ans=0\\n        for word in words:\\n            flag=0\\n            newD = Counter(word)\\n            for key in newD.keys():\\n                try:\\n                    if d[key]>=newD[key]:\\n                        flag=1\\n                    else:\\n                        flag=0\\n                        break\\n                except:\\n                    pass\\n            if flag:\\n                ans+=len(word)\\n            \\n            \\n        return(ans)\\n       \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        from collections import Counter\\n        d = Counter(chars)\\n        ans=0\\n        for word in words:\\n            flag=0\\n            newD = Counter(word)\\n            for key in newD.keys():\\n                try:\\n                    if d[key]>=newD[key]:\\n                        flag=1\\n                    else:\\n                        flag=0\\n                        break\\n                except:\\n                    pass\\n            if flag:\\n                ans+=len(word)\\n            \\n            \\n        return(ans)\\n       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 723170,
                "title": "simple-python-using-counter",
                "content": "Python counter supports &(Intersection) and |(Union) operation, which is very conveient for us to compare. \\n```\\n        # counter\\n        char = Counter(chars)\\n        res = 0\\n        for word in words:\\n            w = Counter(word)\\n            if w & char == w:\\n                res += len(word)\\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\n        # counter\\n        char = Counter(chars)\\n        res = 0\\n        for word in words:\\n            w = Counter(word)\\n            if w & char == w:\\n                res += len(word)\\n        return res\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 713515,
                "title": "javascript-es6-solution-with-reduce",
                "content": "```\\nvar countCharacters = function (words, chars) {\\n  return words.reduce((acc, cur) => {\\n    var char = [...chars];\\n    return [...cur].every((x) => {\\n      var idx = char.indexOf(x);\\n      if (idx > -1) {\\n        return (char[idx] = true);\\n      }\\n    })\\n      ? acc + cur.length\\n      : acc;\\n  }, 0);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function (words, chars) {\\n  return words.reduce((acc, cur) => {\\n    var char = [...chars];\\n    return [...cur].every((x) => {\\n      var idx = char.indexOf(x);\\n      if (idx > -1) {\\n        return (char[idx] = true);\\n      }\\n    })\\n      ? acc + cur.length\\n      : acc;\\n  }, 0);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 627097,
                "title": "c-using-multiset",
                "content": "class Solution {\\npublic:\\n\\n    int countCharacters(vector<string>& words, string chars) {\\n    \\n        multiset<char> ch,temp;\\n        for (auto i:chars)\\n            ch.insert(i);\\n        temp=ch;\\n        \\n        int count=0;\\n        for (auto i:words)\\n        {\\n            string str=i;\\n            int mark=0;\\n            temp=ch;\\n            for(auto j:str)\\n            {\\n                if(temp.find(j)!=temp.end())\\n                {\\n                    temp.erase(temp.find(j));\\n                    continue;\\n                }\\n                else\\n                {\\n                    mark=1;\\n                    break;\\n                }\\n            }\\n            if(mark==0)\\n                count+=str.length();\\n        }\\n        return count;\\n    }\\n};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int countCharacters(vector<string>& words, string chars) {\\n    \\n        multiset<char> ch,temp;\\n        for (auto i:chars)\\n            ch.insert(i);\\n        temp=ch;\\n        \\n        int count=0;\\n        for (auto i:words)\\n        {\\n            string str=i;\\n            int mark=0;\\n            temp=ch;\\n            for(auto j:str)\\n            {\\n                if(temp.find(j)!=temp.end())\\n                {\\n                    temp.erase(temp.find(j));\\n                    continue;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 511527,
                "title": "python-solution-using-hashing",
                "content": "The [`collections.Counter()`](https://docs.python.org/3/library/collections.html#collections.Counter) creates a dictionary with counts of occurence as value and the character as key. First creating a dictionary `d` which contains words and frequency of those words in the `chars` string. Then, for every word in `words`, we need to creat a temporary dictionary (named `w_d`) and check if all of the characters in `word` occurs in `d` at least as many times it occurs in `w_d`.  \\n\\nThe `all()` method returns `True` when for all of the characters in `word` we will have `d.get(ch, 0) >= w_d[ch]`. We need `dict.get()` method because, a character in `word` may not be present in `d`, in that case `get()` will return `0`. If I have used `d[ch]` it will raise error if any character `ch` in `word` is not present in `d`. \\n\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        d = Counter(chars)\\n        ans = 0\\n        for word in words:\\n            w_d = Counter(word)\\n            if all(d.get(ch, 0) >= w_d[ch] for ch in word):\\n                ans += len(word)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        d = Counter(chars)\\n        ans = 0\\n        for word in words:\\n            w_d = Counter(word)\\n            if all(d.get(ch, 0) >= w_d[ch] for ch in word):\\n                ans += len(word)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 461284,
                "title": "go-12ms-97",
                "content": "```go\\nfunc countCharacters(words []string, chars string) int {\\n\\tmagic := [26]int{}\\n\\tfor _, c := range chars {\\n\\t\\tmagic[c-\\'a\\']++\\n\\t}\\n\\tgood := func(word string, magic [26]int) bool {\\n\\t\\tfor _, c := range word {\\n\\t\\t\\tmagic[c-\\'a\\']--\\n\\t\\t\\tif magic[c-\\'a\\'] < 0 {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true\\n\\t}\\n\\t\\n\\tgoodWord := 0\\n\\tfor _, word := range words {\\n\\t\\tif good(word, magic) {\\n            goodWord += len(word)\\n\\t\\t}\\n\\t}\\n\\treturn goodWord\\n}\\n\\n```",
                "solutionTags": [],
                "code": "```go\\nfunc countCharacters(words []string, chars string) int {\\n\\tmagic := [26]int{}\\n\\tfor _, c := range chars {\\n\\t\\tmagic[c-\\'a\\']++\\n\\t}\\n\\tgood := func(word string, magic [26]int) bool {\\n\\t\\tfor _, c := range word {\\n\\t\\t\\tmagic[c-\\'a\\']--\\n\\t\\t\\tif magic[c-\\'a\\'] < 0 {\\n\\t\\t\\t\\treturn false\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn true\\n\\t}\\n\\t\\n\\tgoodWord := 0\\n\\tfor _, word := range words {\\n\\t\\tif good(word, magic) {\\n            goodWord += len(word)\\n\\t\\t}\\n\\t}\\n\\treturn goodWord\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 453169,
                "title": "simple-and-efficient-java-solution",
                "content": "```\\npublic int countCharacters(String[] words, String chars) {\\n\\tint count = 0;\\n\\tint[] seen = new int[26];\\n\\tfor(char c: chars.toCharArray()) {\\n\\t\\tseen[c - \\'a\\']++;\\n\\t}\\n\\n\\tfor(String word: words) {\\n\\t\\t// copy the seen array so we don\\'t have to modify the original seen array\\n\\t\\tint[] seenCopy = Arrays.copyOf(seen, seen.length);\\n\\t\\tboolean isEarlyReturn = false;\\n\\t\\tfor(char c: word.toCharArray()) {                \\n\\t\\t\\tseenCopy[c - \\'a\\']--;\\n\\t\\t\\tif(seenCopy[c - \\'a\\'] < 0) {\\n\\t\\t\\t\\tisEarlyReturn = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(!isEarlyReturn)\\n\\t\\t\\tcount = count + word.length();\\n\\t}\\n\\treturn count;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int countCharacters(String[] words, String chars) {\\n\\tint count = 0;\\n\\tint[] seen = new int[26];\\n\\tfor(char c: chars.toCharArray()) {\\n\\t\\tseen[c - \\'a\\']++;\\n\\t}\\n\\n\\tfor(String word: words) {\\n\\t\\t// copy the seen array so we don\\'t have to modify the original seen array\\n\\t\\tint[] seenCopy = Arrays.copyOf(seen, seen.length);\\n\\t\\tboolean isEarlyReturn = false;\\n\\t\\tfor(char c: word.toCharArray()) {                \\n\\t\\t\\tseenCopy[c - \\'a\\']--;\\n\\t\\t\\tif(seenCopy[c - \\'a\\'] < 0) {\\n\\t\\t\\t\\tisEarlyReturn = true;\\n\\t\\t\\t\\tbreak;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tif(!isEarlyReturn)\\n\\t\\t\\tcount = count + word.length();\\n\\t}\\n\\treturn count;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 436107,
                "title": "python3-one-liner-time-99-91-space-100",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum([len(word) for word in words if all(0 < word.count(x) <= chars.count(x) for x in word)])\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum([len(word) for word in words if all(0 < word.count(x) <= chars.count(x) for x in word)])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 384582,
                "title": "python-5-liner",
                "content": "```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length = 0\\n        for word in words:\\n            if not (Counter(word) - Counter(chars)):\\n                length += len(word)\\n        return length\\n```",
                "solutionTags": [],
                "code": "```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        length = 0\\n        for word in words:\\n            if not (Counter(word) - Counter(chars)):\\n                length += len(word)\\n        return length\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 370649,
                "title": "cpp-100-memory-maps",
                "content": "```\\nint countCharacters(vector<string>& words, string chars) {\\n        if(words.size()==0)\\n            return 0;\\n        \\n        map<char,int> ma;\\n        map<char,int> co;\\n        for(int i=0;i<chars.size();i++)\\n            ma[chars[i]]++;\\n        \\n        int count=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            co=ma;\\n            int flag=0;\\n            for(int j=0;j<words[i].size();j++)\\n            {\\n                if(co[words[i][j]]!=0)\\n                    co[words[i][j]]--;\\n                else\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag==0)\\n                count+=words[i].size();\\n            \\n        }\\n        \\n        return count;\\n        \\n        \\n    }\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nint countCharacters(vector<string>& words, string chars) {\\n        if(words.size()==0)\\n            return 0;\\n        \\n        map<char,int> ma;\\n        map<char,int> co;\\n        for(int i=0;i<chars.size();i++)\\n            ma[chars[i]]++;\\n        \\n        int count=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            co=ma;\\n            int flag=0;\\n            for(int j=0;j<words[i].size();j++)\\n            {\\n                if(co[words[i][j]]!=0)\\n                    co[words[i][j]]--;\\n                else\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            \\n            if(flag==0)\\n                count+=words[i].size();\\n            \\n        }\\n        \\n        return count;\\n        \\n        \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 362197,
                "title": "javascript-solution",
                "content": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    return words.filter(word => {\\n        let charsRemain = chars.split(\\'\\');\\n        let correctWord = true;\\n        \\n        word.split(\\'\\').forEach(letter => {\\n            if (!correctWord) return;\\n            if (charsRemain.includes(letter)) {\\n                charsRemain.splice(charsRemain.indexOf(letter), 1);\\n            } else {\\n                correctWord = false;\\n            }\\n        });\\n        \\n        return correctWord;\\n    }).join(\\'\\').length;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    return words.filter(word => {\\n        let charsRemain = chars.split(\\'\\');\\n        let correctWord = true;\\n        \\n        word.split(\\'\\').forEach(letter => {\\n            if (!correctWord) return;\\n            if (charsRemain.includes(letter)) {\\n                charsRemain.splice(charsRemain.indexOf(letter), 1);\\n            } else {\\n                correctWord = false;\\n            }\\n        });\\n        \\n        return correctWord;\\n    }).join(\\'\\').length;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 361580,
                "title": "java-easy-simple",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] arr = new int[26];\\n        for (char c : chars.toCharArray()) {\\n            arr[c-\\'a\\']++;\\n        }\\n        int ans = 0;\\n        for(String w : words) {\\n            int[] charArray = arr.clone();\\n            int count = 0;\\n            for (char c : w.toCharArray()) {\\n                if(charArray[c - \\'a\\'] > 0) {\\n                    charArray[c - \\'a\\']--;\\n                    count++;\\n                } else \\n                    break;                \\n            }\\n            if(count == w.length()) \\n                ans += w.length();\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] arr = new int[26];\\n        for (char c : chars.toCharArray()) {\\n            arr[c-\\'a\\']++;\\n        }\\n        int ans = 0;\\n        for(String w : words) {\\n            int[] charArray = arr.clone();\\n            int count = 0;\\n            for (char c : w.toCharArray()) {\\n                if(charArray[c - \\'a\\'] > 0) {\\n                    charArray[c - \\'a\\']--;\\n                    count++;\\n                } else \\n                    break;                \\n            }\\n            if(count == w.length()) \\n                ans += w.length();\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361296,
                "title": "easy-to-understand-python-with-comments",
                "content": "**Explanation**\\n\\nBasically, if all the characters to form the _word_ is available in `chars` then it\\'s a good word. What we can do is to count the character counts of `chars` and then, for each _word_ we also count the character counts. If all the characters of the _word_ is in `chctr` and the count is also `<=` then we consider it a good _word_.\\n\\n```Python\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\t# count chars character counts\\n        chctr = collections.Counter(chars)\\n\\t\\t\\n        goodln = 0\\n        for word in words:\\n            wctr = collections.Counter(word)\\n            isgood = True\\n            for key in wctr:\\n\\t\\t\\t\\t# chech if the character (or key) is available &\\n\\t\\t\\t\\t# we have enough of it\\n                if key not in chctr or wctr[key] > chctr[key]:\\n                    isgood = False\\n                    break\\n            if isgood:\\n                goodln += len(word)\\n        return goodln\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```Python\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\t# count chars character counts\\n        chctr = collections.Counter(chars)\\n\\t\\t\\n        goodln = 0\\n        for word in words:\\n            wctr = collections.Counter(word)\\n            isgood = True\\n            for key in wctr:\\n\\t\\t\\t\\t# chech if the character (or key) is available &\\n\\t\\t\\t\\t# we have enough of it\\n                if key not in chctr or wctr[key] > chctr[key]:\\n                    isgood = False\\n                    break\\n            if isgood:\\n                goodln += len(word)\\n        return goodln\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361099,
                "title": "ruby-solution-two-methods",
                "content": "This is the first passing solution I came up with. It\\'s readable, I suppose, but I\\'m not particularly pleased with it.\\n\\n```\\n\\ndef count_characters(words, chars)\\n    found_words = []\\n    words.each do |w|\\n        if word_chars_in_approve_list?(w, chars)\\n            found_words << w \\n        end\\n    end\\n    p found_words\\n    return found_words.join.length\\nend\\n\\ndef word_chars_in_approve_list?(word, chars)\\n    list = chars.split(\"\")\\n    word.split(\"\").each do |c|\\n        if list.include?(c)\\n            index = list.index(c)\\n            list.delete_at(index)\\n        else\\n            return false\\n        end\\n    end\\n    return true\\nend\\n```",
                "solutionTags": [
                    "Ruby"
                ],
                "code": "```\\n\\ndef count_characters(words, chars)\\n    found_words = []\\n    words.each do |w|\\n        if word_chars_in_approve_list?(w, chars)\\n            found_words << w \\n        end\\n    end\\n    p found_words\\n    return found_words.join.length\\nend\\n\\ndef word_chars_in_approve_list?(word, chars)\\n    list = chars.split(\"\")\\n    word.split(\"\").each do |c|\\n        if list.include?(c)\\n            index = list.index(c)\\n            list.delete_at(index)\\n        else\\n            return false\\n        end\\n    end\\n    return true\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 361007,
                "title": "javascript-c-c-count-based",
                "content": "Javascript\\n```\\nvar countCharacters = function(words, chars) {\\n    const count = [];\\n    for(const ch of chars) { count[ch] = (count[ch] || 0) + 1 ; }\\n    let total = 0;\\n    for(const word of words) {\\n        const wordCount = [];\\n        let canConstruct = true;\\n        for(const ch of word) {\\n            wordCount[ch] = (wordCount[ch] || 0) + 1;\\n            if (!count[ch] || wordCount[ch] > count[ch]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        \\n        if (canConstruct) total += word.length;\\n    }\\n    return total;\\n};\\n```\\n\\nC#\\n```\\npublic int CountCharacters(string[] words, string chars) {\\n    var count = new int[26];\\n    foreach(var ch in chars) { count[ch - \\'a\\']++; }\\n    var total = 0;\\n    foreach(var word in words) {\\n        var wordCount = new int[26];\\n        var canConstruct = true;\\n        foreach(var ch in word) {\\n            var ind = ch - \\'a\\';\\n            if (++wordCount[ind] > count[ind]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        if (canConstruct) total += word.Length;\\n    }\\n    return total;\\n}\\n```\\n\\nC++\\n```\\nint countCharacters(vector<string>& words, string chars) {\\n    vector<int> count(26);\\n    int total = 0;\\n    for (auto ch : chars) ++count[ch - \\'a\\'];\\n\\n    for (auto& word : words) {\\n        vector<int> wCount(26);\\n        bool canConstruct = true;\\n        for (auto ch : word) {\\n            auto index = ch - \\'a\\';\\n            if (++wCount[index] > count[index]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        if (canConstruct) total += word.size();\\n    }\\n    return total;\\n}\\n```",
                "solutionTags": [
                    "C",
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    const count = [];\\n    for(const ch of chars) { count[ch] = (count[ch] || 0) + 1 ; }\\n    let total = 0;\\n    for(const word of words) {\\n        const wordCount = [];\\n        let canConstruct = true;\\n        for(const ch of word) {\\n            wordCount[ch] = (wordCount[ch] || 0) + 1;\\n            if (!count[ch] || wordCount[ch] > count[ch]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        \\n        if (canConstruct) total += word.length;\\n    }\\n    return total;\\n};\\n```\n```\\npublic int CountCharacters(string[] words, string chars) {\\n    var count = new int[26];\\n    foreach(var ch in chars) { count[ch - \\'a\\']++; }\\n    var total = 0;\\n    foreach(var word in words) {\\n        var wordCount = new int[26];\\n        var canConstruct = true;\\n        foreach(var ch in word) {\\n            var ind = ch - \\'a\\';\\n            if (++wordCount[ind] > count[ind]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        if (canConstruct) total += word.Length;\\n    }\\n    return total;\\n}\\n```\n```\\nint countCharacters(vector<string>& words, string chars) {\\n    vector<int> count(26);\\n    int total = 0;\\n    for (auto ch : chars) ++count[ch - \\'a\\'];\\n\\n    for (auto& word : words) {\\n        vector<int> wCount(26);\\n        bool canConstruct = true;\\n        for (auto ch : word) {\\n            auto index = ch - \\'a\\';\\n            if (++wCount[index] > count[index]) {\\n                canConstruct = false;\\n                break;\\n            }\\n        }\\n        if (canConstruct) total += word.size();\\n    }\\n    return total;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3979592,
                "title": "easy-solution-in-c",
                "content": "# Intuition\\n\\n\\n# Approach\\n\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\no(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans=0;\\n        unordered_map<char,int>ch;\\n        for(int i=0;i<chars.length();i++){\\n            ch[chars[i]]++;\\n        }\\n        for(int i=0;i<words.size();i++){\\n            unordered_map<char,int>str;\\n            string s=words[i];\\n            for(int j=0;j<s.length();j++){\\n                str[s[j]]++;\\n            }\\n            bool flag=true;\\n            for(int k=0;k<s.length();k++){\\n                if(str[s[k]]>ch[s[k]]){\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n            if(flag)\\n            ans+=s.length();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans=0;\\n        unordered_map<char,int>ch;\\n        for(int i=0;i<chars.length();i++){\\n            ch[chars[i]]++;\\n        }\\n        for(int i=0;i<words.size();i++){\\n            unordered_map<char,int>str;\\n            string s=words[i];\\n            for(int j=0;j<s.length();j++){\\n                str[s[j]]++;\\n            }\\n            bool flag=true;\\n            for(int k=0;k<s.length();k++){\\n                if(str[s[k]]>ch[s[k]]){\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n            if(flag)\\n            ans+=s.length();\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2877542,
                "title": "python-solution-using-counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans=[]\\n        d1=Counter(chars)\\n        for i in range(len(words)):\\n            w=[j for j in words[i]]\\n            d2=Counter(w)\\n        #print(dc)\\n        #print(dw)\\n            if all([k in d1 for k in d2]) and all([d2[k]<=d1[k] for k in d2]):\\n                ans.append(len(w))\\n        return sum(ans)\\n       \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans=[]\\n        d1=Counter(chars)\\n        for i in range(len(words)):\\n            w=[j for j in words[i]]\\n            d2=Counter(w)\\n        #print(dc)\\n        #print(dw)\\n            if all([k in d1 for k in d2]) and all([d2[k]<=d1[k] for k in d2]):\\n                ans.append(len(w))\\n        return sum(ans)\\n       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2822712,
                "title": "c-easy-fast",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\nprivate:\\n    bool check(vector<int> arr1 , vector<int> arr2){\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr1[i] < arr2[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        \\n        vector<int> arr1(26,0);\\n        for(int i = 0 ; i < chars.size() ; i++)\\n            arr1[chars[i]-\\'a\\']++;\\n        \\n        for(int i = 0 ; i < words.size() ; i++){\\n            vector<int> arr2(26,0);\\n            for(int j = 0 ; j < words[i].size() ; j++){\\n                string m = words[i];\\n                arr2[m[j]-\\'a\\']++;\\n            }\\n            \\n            bool p = check(arr1 , arr2);\\n            if(p){\\n                sum = sum + words[i].size();\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    bool check(vector<int> arr1 , vector<int> arr2){\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr1[i] < arr2[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        \\n        vector<int> arr1(26,0);\\n        for(int i = 0 ; i < chars.size() ; i++)\\n            arr1[chars[i]-\\'a\\']++;\\n        \\n        for(int i = 0 ; i < words.size() ; i++){\\n            vector<int> arr2(26,0);\\n            for(int j = 0 ; j < words[i].size() ; j++){\\n                string m = words[i];\\n                arr2[m[j]-\\'a\\']++;\\n            }\\n            \\n            bool p = check(arr1 , arr2);\\n            if(p){\\n                sum = sum + words[i].size();\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2726360,
                "title": "java-hash-solution",
                "content": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    \\n    private static final BigInteger[] primes = new BigInteger[27];\\n    \\n    static {\\n        primes[0] = BigInteger.valueOf(2);\\n        primes[1] = BigInteger.valueOf(3);\\n        primes[2] = BigInteger.valueOf(5);\\n        primes[3] = BigInteger.valueOf(7);\\n        primes[4] = BigInteger.valueOf(11);\\n        primes[5] = BigInteger.valueOf(13);\\n        primes[6] = BigInteger.valueOf(17);\\n        primes[7] = BigInteger.valueOf(19);\\n        primes[8] = BigInteger.valueOf(23);\\n        primes[9] = BigInteger.valueOf(29);\\n        primes[10] = BigInteger.valueOf(31);\\n        primes[11] = BigInteger.valueOf(37);\\n        primes[12] = BigInteger.valueOf(41);\\n        primes[13] = BigInteger.valueOf(43);\\n        primes[14] = BigInteger.valueOf(47);\\n        primes[15] = BigInteger.valueOf(53);\\n        primes[16] = BigInteger.valueOf(59);\\n        primes[17] = BigInteger.valueOf(61);\\n        primes[18] = BigInteger.valueOf(67);\\n        primes[19] = BigInteger.valueOf(71);\\n        primes[20] = BigInteger.valueOf(73);\\n        primes[21] = BigInteger.valueOf(79);\\n        primes[22] = BigInteger.valueOf(83);\\n        primes[23] = BigInteger.valueOf(89);\\n        primes[24] = BigInteger.valueOf(97);\\n        primes[25] = BigInteger.valueOf(101);\\n        primes[26] = BigInteger.valueOf(103); \\n    }\\n    \\n    public int countCharacters(String[] words, String chars) {        \\n        int result = 0;\\n        BigInteger hash = BigInteger.ONE;\\n        for (char ch : chars.toCharArray()) {\\n            hash = hash.multiply(primes[ch - \\'a\\']);\\n        }\\n    \\n        for (String word : words) {\\n            BigInteger wordHash = BigInteger.ONE;\\n            for (char ch : word.toCharArray()) {\\n                wordHash = wordHash.multiply(primes[ch - \\'a\\']);\\n            }\\n            if (hash.remainder(wordHash) == BigInteger.ZERO) {\\n                result += word.length();\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nimport java.math.BigInteger;\\n\\nclass Solution {\\n    \\n    private static final BigInteger[] primes = new BigInteger[27];\\n    \\n    static {\\n        primes[0] = BigInteger.valueOf(2);\\n        primes[1] = BigInteger.valueOf(3);\\n        primes[2] = BigInteger.valueOf(5);\\n        primes[3] = BigInteger.valueOf(7);\\n        primes[4] = BigInteger.valueOf(11);\\n        primes[5] = BigInteger.valueOf(13);\\n        primes[6] = BigInteger.valueOf(17);\\n        primes[7] = BigInteger.valueOf(19);\\n        primes[8] = BigInteger.valueOf(23);\\n        primes[9] = BigInteger.valueOf(29);\\n        primes[10] = BigInteger.valueOf(31);\\n        primes[11] = BigInteger.valueOf(37);\\n        primes[12] = BigInteger.valueOf(41);\\n        primes[13] = BigInteger.valueOf(43);\\n        primes[14] = BigInteger.valueOf(47);\\n        primes[15] = BigInteger.valueOf(53);\\n        primes[16] = BigInteger.valueOf(59);\\n        primes[17] = BigInteger.valueOf(61);\\n        primes[18] = BigInteger.valueOf(67);\\n        primes[19] = BigInteger.valueOf(71);\\n        primes[20] = BigInteger.valueOf(73);\\n        primes[21] = BigInteger.valueOf(79);\\n        primes[22] = BigInteger.valueOf(83);\\n        primes[23] = BigInteger.valueOf(89);\\n        primes[24] = BigInteger.valueOf(97);\\n        primes[25] = BigInteger.valueOf(101);\\n        primes[26] = BigInteger.valueOf(103); \\n    }\\n    \\n    public int countCharacters(String[] words, String chars) {        \\n        int result = 0;\\n        BigInteger hash = BigInteger.ONE;\\n        for (char ch : chars.toCharArray()) {\\n            hash = hash.multiply(primes[ch - \\'a\\']);\\n        }\\n    \\n        for (String word : words) {\\n            BigInteger wordHash = BigInteger.ONE;\\n            for (char ch : word.toCharArray()) {\\n                wordHash = wordHash.multiply(primes[ch - \\'a\\']);\\n            }\\n            if (hash.remainder(wordHash) == BigInteger.ZERO) {\\n                result += word.length();\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2553602,
                "title": "c-solution-find-words-that-can-be-formed-by-characters",
                "content": "```\\nclass Solution {\\nprivate:\\n    bool check(vector<int> arr1 , vector<int> arr2){\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr1[i] < arr2[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        \\n        //find frequency of \\'chars\\'\\n        vector<int> arr1(26,0);\\n        for(int i = 0 ; i < chars.size() ; i++)\\n            arr1[chars[i]-\\'a\\']++;\\n        \\n        for(int i = 0 ; i < words.size() ; i++){\\n            //calculate the frequency of each word.\\n            vector<int> arr2(26,0);\\n            for(int j = 0 ; j < words[i].size() ; j++){\\n                string m = words[i];\\n                arr2[m[j]-\\'a\\']++;\\n            }\\n            \\n            bool p = check(arr1 , arr2);\\n            if(p){\\n                sum = sum + words[i].size();\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "String"
                ],
                "code": "```\\nclass Solution {\\nprivate:\\n    bool check(vector<int> arr1 , vector<int> arr2){\\n        for(int i = 0 ; i < 26 ; i++){\\n            if(arr1[i] < arr2[i])\\n                return false;\\n        }\\n        return true;\\n    }\\n    \\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        \\n        //find frequency of \\'chars\\'\\n        vector<int> arr1(26,0);\\n        for(int i = 0 ; i < chars.size() ; i++)\\n            arr1[chars[i]-\\'a\\']++;\\n        \\n        for(int i = 0 ; i < words.size() ; i++){\\n            //calculate the frequency of each word.\\n            vector<int> arr2(26,0);\\n            for(int j = 0 ; j < words[i].size() ; j++){\\n                string m = words[i];\\n                arr2[m[j]-\\'a\\']++;\\n            }\\n            \\n            bool p = check(arr1 , arr2);\\n            if(p){\\n                sum = sum + words[i].size();\\n            }\\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2161928,
                "title": "using-maps-easy",
                "content": "bool check(string str,string chars)\\n    {\\n        unordered_map<char,int>m;\\n        for(auto val:chars)\\n        {\\n            m[val]++;\\n        }\\n        for(int i=0;i<str.size();i++)\\n        {\\n            if(m[str[i]])\\n            {\\n                m[str[i]]--;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        int ans=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(check(words[i],chars))\\n            {\\n                ans=ans+words[i].size();\\n            }\\n        }\\n        return ans;",
                "solutionTags": [],
                "code": "bool check(string str,string chars)\\n    {\\n        unordered_map<char,int>m;\\n        for(auto val:chars)\\n        {\\n            m[val]++;\\n        }\\n        for(int i=0;i<str.size();i++)\\n        {\\n            if(m[str[i]])\\n            {\\n                m[str[i]]--;\\n            }\\n            else\\n            {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        int ans=0;\\n        for(int i=0;i<words.size();i++)\\n        {\\n            if(check(words[i],chars))\\n            {\\n                ans=ans+words[i].size();\\n            }\\n        }\\n        return ans;",
                "codeTag": "Unknown"
            },
            {
                "id": 2006949,
                "title": "easy-clean-python",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans = 0\\n        for word in words: \\n            for char in word: \\n                if word.count(char) > chars.count(char):  break\\n            else: ans += len(word)\\n        return ans\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        ans = 0\\n        for word in words: \\n            for char in word: \\n                if word.count(char) > chars.count(char):  break\\n            else: ans += len(word)\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2003908,
                "title": "python-easy",
                "content": "```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        hmap = Counter(chars)\\n        res = 0\\n        for word in words:\\n            if not Counter(word) - hmap:  # All the characters from word are in chars\\n                res += len(word)\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        hmap = Counter(chars)\\n        res = 0\\n        for word in words:\\n            if not Counter(word) - hmap:  # All the characters from word are in chars\\n                res += len(word)\\n        return res\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1888459,
                "title": "c-simple-and-easy-to-understand-with-comments-hash-table",
                "content": "class Solution {\\npublic:\\n\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        // hash table of chars and their count.\\n        int charsCounts[26] = {0};\\n        for(int i = 0; i < chars.length(); i++){\\n            charsCounts[chars[i] - \\'a\\']++;\\n        }\\n        \\n        // For each word assume its valid and add its length to result.\\n        // Alternative is to use a flag.\\n        // For each word create its own hashtable of char count.\\n        // Add all letters from the word into a hash table.\\n        // After a letter is added check if it\\'s count exceeds the count\\n        // of the same letter in charsCount hash table.\\n        // If it does the assumption was wrong so substract the words length from result \\n        // and continue to the next word.\\n        int result = 0;\\n        for(int i = 0; i < words.size(); i++){\\n            result += words[i].length();\\n            int wordCharCount[26] = {0};\\n            for(int j = 0; j < words[i].length(); j++){\\n                int index = words[i][j] - \\'a\\';\\n                wordCharCount[index]++;\\n                if(wordCharCount[index] > charsCounts[index]){\\n                    result -= words[i].length();\\n                    break;\\n                }\\n            }\\n        }\\n        return result;\\n    }\\n};",
                "solutionTags": [
                    "C",
                    "Hash Table"
                ],
                "code": "class Solution {\\npublic:\\n\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        // hash table of chars and their count.\\n        int charsCounts[26] = {0}",
                "codeTag": "Java"
            },
            {
                "id": 1875631,
                "title": "python-simple-approach-and-beginner-friendly",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        output = 0\\n        for i in words:\\n            count = 0\\n            for j in i:\\n                if chars.count(j) >= i.count(j):\\n                    count+=1\\n                else:\\n                    break\\n            if count == len(i):\\n                output+=count\\n        return output\\n                \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        output = 0\\n        for i in words:\\n            count = 0\\n            for j in i:\\n                if chars.count(j) >= i.count(j):\\n                    count+=1\\n                else:\\n                    break\\n            if count == len(i):\\n                output+=count\\n        return output\\n                \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1664996,
                "title": "java-count-solution",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] dict = new int[26];\\n        int ans = 0;\\n        for(char c : chars.toCharArray()) dict[c - \\'a\\']++;\\n        \\n        for(String s : words) {\\n            int[] dictCopy = Arrays.copyOf(dict, 26);\\n            for(int i = 0; i<s.length(); i++) {\\n                if(--dictCopy[s.charAt(i) - \\'a\\'] <0 ) break;\\n                if(i == s.length() - 1) ans += s.length();\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] dict = new int[26];\\n        int ans = 0;\\n        for(char c : chars.toCharArray()) dict[c - \\'a\\']++;\\n        \\n        for(String s : words) {\\n            int[] dictCopy = Arrays.copyOf(dict, 26);\\n            for(int i = 0; i<s.length(); i++) {\\n                if(--dictCopy[s.charAt(i) - \\'a\\'] <0 ) break;\\n                if(i == s.length() - 1) ans += s.length();\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1531417,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    int count[]=new int[256];\\n    \\n    \\n    void initialize(String chars){\\n        Arrays.fill(count,0);\\n        for(int i=0;i<chars.length();i++){\\n            count[chars.charAt(i)]++;\\n        }\\n    }\\n    \\n    public int countCharacters(String[] words, String chars) {\\n        boolean flag;\\n        int length=0;\\n        for(String temp:words){\\n            initialize(chars);\\n            flag=true;\\n            for(int i=0;i<temp.length();i++){\\n                if(count[temp.charAt(i)]<=0)\\n                {\\n                    flag=false;\\n                    break;\\n                }\\n                else\\n                count[temp.charAt(i)]--;\\n            }\\n            if(flag){\\n                length+=temp.length();\\n            }\\n        }\\n        return length ;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    int count[]=new int[256];\\n    \\n    \\n    void initialize(String chars){\\n        Arrays.fill(count,0);\\n        for(int i=0;i<chars.length();i++){\\n            count[chars.charAt(i)]++;\\n        }\\n    }\\n    \\n    public int countCharacters(String[] words, String chars) {\\n        boolean flag;\\n        int length=0;\\n        for(String temp:words){\\n            initialize(chars);\\n            flag=true;\\n            for(int i=0;i<temp.length();i++){\\n                if(count[temp.charAt(i)]<=0)\\n                {\\n                    flag=false;\\n                    break;\\n                }\\n                else\\n                count[temp.charAt(i)]--;\\n            }\\n            if(flag){\\n                length+=temp.length();\\n            }\\n        }\\n        return length ;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1525526,
                "title": "c-solution-no-map",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    int countCharacters(vector<string> &words, string chars)\\n    {\\n        int count = 0;\\n        for (const auto &i : words)\\n        {\\n            string charcompare = chars;\\n            int var = 0;\\n            for (const auto &j : i)\\n            {\\n                int finding = charcompare.find(j);\\n                if (finding != string::npos)\\n                {\\n                    charcompare.erase(finding, 1);\\n                    var = i.size();\\n                }\\n                else\\n                {\\n                    var = 0;\\n                    break;\\n                }\\n            }\\n            count += var;\\n            var = 0;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int countCharacters(vector<string> &words, string chars)\\n    {\\n        int count = 0;\\n        for (const auto &i : words)\\n        {\\n            string charcompare = chars;\\n            int var = 0;\\n            for (const auto &j : i)\\n            {\\n                int finding = charcompare.find(j);\\n                if (finding != string::npos)\\n                {\\n                    charcompare.erase(finding, 1);\\n                    var = i.size();\\n                }\\n                else\\n                {\\n                    var = 0;\\n                    break;\\n                }\\n            }\\n            count += var;\\n            var = 0;\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1353416,
                "title": "easy-python-solution",
                "content": "output = 0\\n        count = 0\\n                \\n        for i in words:\\n            count = 0\\n            chars_dup = list(chars)\\n            for j,value in enumerate(i):\\n                if value not in chars_dup:\\n                    break\\n                else:    \\n                    chars_dup.pop(chars_dup.index(value))\\n                    count = count + 1\\n                  \\n            if count == len(i):\\n                output = output + len(i)\\n                chars_dup.clear()\\n                \\n        return output",
                "solutionTags": [],
                "code": "output = 0\\n        count = 0\\n                \\n        for i in words:\\n            count = 0\\n            chars_dup = list(chars)\\n            for j,value in enumerate(i):\\n                if value not in chars_dup:\\n                    break\\n                else:    \\n                    chars_dup.pop(chars_dup.index(value))\\n                    count = count + 1\\n                  \\n            if count == len(i):\\n                output = output + len(i)\\n                chars_dup.clear()\\n                \\n        return output",
                "codeTag": "Unknown"
            },
            {
                "id": 1346239,
                "title": "c-time-94-space-95",
                "content": "```\\n int countCharacters(vector<string>& words, string chars) {\\n        int hash[26]={0},ans=0,j;\\n        for(int i=0;i<chars.size();i++)hash[chars[i]-\\'a\\']++;\\n        for(int i=0;i<words.size();i++){\\n            int flag=1;\\n            for(j=0;j<words[i].size();j++){\\n                if(hash[words[i][j]-\\'a\\'])hash[words[i][j]-\\'a\\']--;\\n                else{\\n                    flag=0;\\n                    break;\\n                }\\n            }\\n            if(flag)ans+=j;\\n            j--;\\n            for(;j>=0;j--)hash[words[i][j]-\\'a\\']++;\\n        }\\n        return ans;\\n    }",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n int countCharacters(vector<string>& words, string chars) {\\n        int hash[26]={0},ans=0,j;\\n        for(int i=0;i<chars.size();i++)hash[chars[i]-\\'a\\']++;\\n        for(int i=0;i<words.size();i++){\\n            int flag=1;\\n            for(j=0;j<words[i].size();j++){\\n                if(hash[words[i][j]-\\'a\\'])hash[words[i][j]-\\'a\\']--;\\n                else{\\n                    flag=0;\\n                    break;\\n                }\\n            }\\n            if(flag)ans+=j;\\n            j--;\\n            for(;j>=0;j--)hash[words[i][j]-\\'a\\']++;\\n        }\\n        return ans;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1269238,
                "title": "python-solution-using-counter",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter_chars = Counter(chars)\\n        sum = 0\\n        for word in words:\\n            counter_word = Counter(word)\\n            if counter_word & counter_chars == counter_word:\\n                sum += len(word)\\n        return sum\\n```",
                "solutionTags": [
                    "Python",
                    "Array"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter_chars = Counter(chars)\\n        sum = 0\\n        for word in words:\\n            counter_word = Counter(word)\\n            if counter_word & counter_chars == counter_word:\\n                sum += len(word)\\n        return sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1192917,
                "title": "simple-python-99-fast-solution",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res = 0\\n        for word in words:\\n            for w in word:\\n                if word.count(w) > chars.count(w):\\n                    break\\n            else:\\n                res += len(word) \\n        return res\\n```\\n**If you find it useful, then please upvote**",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res = 0\\n        for word in words:\\n            for w in word:\\n                if word.count(w) > chars.count(w):\\n                    break\\n            else:\\n                res += len(word) \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1177800,
                "title": "c-easy-solution-using-unordered-map",
                "content": "***Do upvote if you found it helpful to keep me motivated to post more*** \\uD83D\\uDE0A\\u270C\\n***Explanation in the comments section***\\n```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n       unordered_map<char,int> u;\\n        int count = 0 , flag = 1 , i;\\n        for(i=0 ; i < chars.length() ; i++)\\n        { \\n\\t\\t   u[chars[i]]++;\\n\\t\\t}\\n        for(i=0 ; i < words.size(); i++)\\n        {\\n            unordered_map<char,int> v;\\n            flag = 1;\\n          for(j = 0 ; j < words[i].size() ; j++)\\n          {\\n             v[words[i][j]]++;\\n          }\\n            for(auto x: words[i])\\n            {\\n              if(v[x] > u[x])\\n                flag = 0;\\n            }\\n            if(flag == 1)\\n                count += words[i].size();\\n        }\\n        return count;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n       unordered_map<char,int> u;\\n        int count = 0 , flag = 1 , i;\\n        for(i=0 ; i < chars.length() ; i++)\\n        { \\n\\t\\t   u[chars[i]]++;\\n\\t\\t}\\n        for(i=0 ; i < words.size(); i++)\\n        {\\n            unordered_map<char,int> v;\\n            flag = 1;\\n          for(j = 0 ; j < words[i].size() ; j++)\\n          {\\n             v[words[i][j]]++;\\n          }\\n            for(auto x: words[i])\\n            {\\n              if(v[x] > u[x])\\n                flag = 0;\\n            }\\n            if(flag == 1)\\n                count += words[i].size();\\n        }\\n        return count;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1147528,
                "title": "simple-c-solution-with-using-vectors-for-tracking-count",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        vector<int> letters(26,0);\\n        // compute occurances of each letter in the string chars\\n        for(auto ch: chars) {\\n            letters[ch-\\'a\\']++;\\n        }\\n        int sum = 0;\\n        // for every word check if the word can be formed using the letetrs in chars string and add the length to the result if the word can be formed;\\n        for(auto word: words) {\\n            int i = 0;\\n            vector<int> freq = letters;\\n            /* This is equivalent to \\n                while(i < word.size()) {\\n                    freq[word[i]-\\'a\\']--;\\n                    i++\\n                }\\n            */\\n            for(;i < word.size() && freq[word[i]-\\'a\\']-- > 0; i++);\\n            /* This is equivalent to \\n                if(i == word.size() )\\n                    sum += word.size()\\n            */\\n            sum += word.size() * (i == word.size() );\\n        }\\n        return sum;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        vector<int> letters(26,0);\\n        // compute occurances of each letter in the string chars\\n        for(auto ch: chars) {\\n            letters[ch-\\'a\\']++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 899431,
                "title": "life-made-easy-by-collections-counter",
                "content": "![image](https://assets.leetcode.com/users/images/1e79684d-7fc0-46c1-9596-d57ae518066c_1602992697.1196833.png)\\n\\nA little known fact about Counter objects are that you can peform set operations on them. Here also, we subttact the obtained word counter with our pre compiled counter, and if it\\'s null, then we add its length to the result.\\t\\n\\t\\n\\tfrom collections import Counter\\n\\tclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        pre_compiled_counter = Counter(chars)\\n        output = 0 \\n        for word in words : \\n            if Counter(word) - pre_compiled_counter == Counter() :\\n                output = output + len(word)\\n        return output\\n",
                "solutionTags": [],
                "code": "![image](https://assets.leetcode.com/users/images/1e79684d-7fc0-46c1-9596-d57ae518066c_1602992697.1196833.png)\\n\\nA little known fact about Counter objects are that you can peform set operations on them. Here also, we subttact the obtained word counter with our pre compiled counter, and if it\\'s null, then we add its length to the result.\\t\\n\\t\\n\\tfrom collections import Counter\\n\\tclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        pre_compiled_counter = Counter(chars)\\n        output = 0 \\n        for word in words : \\n            if Counter(word) - pre_compiled_counter == Counter() :\\n                output = output + len(word)\\n        return output\\n",
                "codeTag": "Java"
            },
            {
                "id": 856426,
                "title": "swift-2-solutions",
                "content": "**With a dictionary**\\nTime: O(n + m), Space: O(n + m) where n is words.count, m is chars.count\\n```\\nfunc countCharacters(_ words: [String], _ chars: String) -> Int {\\n\\tvar charToFreq = [Character: Int]()\\n\\tvar result = 0\\n\\n\\tfor char in chars {\\n\\t\\tcharToFreq[char, default: 0] += 1\\n\\t}\\n\\n\\tfor word in words {\\n\\t\\tvar curCharToFreq = [Character: Int]()\\n\\n\\t\\tfor char in word {\\n\\t\\t\\tcurCharToFreq[char, default: 0] += 1\\n\\t\\t}\\n\\n\\t\\tvar canBeFormed = true\\n\\t\\tfor (char, freq) in curCharToFreq {\\n\\t\\t\\tif charToFreq[char] == nil || charToFreq[char]! < freq { \\n\\t\\t\\t\\tcanBeFormed = false\\n\\t\\t\\t\\tbreak \\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif canBeFormed {\\n\\t\\t\\tresult += word.count\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n```\\n\\n**With an array, 3 times faster suprisingly**\\nTime: O(n + m), Space: O(n)\\n```\\nfunc countCharacters(_ words: [String], _ chars: String) -> Int {\\n\\tvar freqs = Array(repeating: 0, count: 26)\\n\\tvar result = 0\\n\\n\\tfor char in chars {\\n\\t\\tfreqs[charToInt(char)] += 1\\n\\t}\\n\\n\\tfor word in words {\\n\\t\\tvar curFreqs = freqs\\n\\n\\n\\t\\tvar canBeFormed = true\\n\\t\\tfor char in word {\\n\\t\\t\\tlet index = charToInt(char)\\n\\t\\t\\tif curFreqs[index] <= 0 { \\n\\t\\t\\t\\tcanBeFormed = false\\n\\t\\t\\t\\tbreak \\n\\t\\t\\t}\\n\\t\\t\\tcurFreqs[index] -= 1\\n\\t\\t}\\n\\n\\t\\tif canBeFormed {\\n\\t\\t\\tresult += word.count\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n\\nfunc charToInt(_ char: Character) -> Int {\\n\\treturn Int(char.asciiValue! - Character(\"a\").asciiValue!)\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nfunc countCharacters(_ words: [String], _ chars: String) -> Int {\\n\\tvar charToFreq = [Character: Int]()\\n\\tvar result = 0\\n\\n\\tfor char in chars {\\n\\t\\tcharToFreq[char, default: 0] += 1\\n\\t}\\n\\n\\tfor word in words {\\n\\t\\tvar curCharToFreq = [Character: Int]()\\n\\n\\t\\tfor char in word {\\n\\t\\t\\tcurCharToFreq[char, default: 0] += 1\\n\\t\\t}\\n\\n\\t\\tvar canBeFormed = true\\n\\t\\tfor (char, freq) in curCharToFreq {\\n\\t\\t\\tif charToFreq[char] == nil || charToFreq[char]! < freq { \\n\\t\\t\\t\\tcanBeFormed = false\\n\\t\\t\\t\\tbreak \\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tif canBeFormed {\\n\\t\\t\\tresult += word.count\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n```\n```\\nfunc countCharacters(_ words: [String], _ chars: String) -> Int {\\n\\tvar freqs = Array(repeating: 0, count: 26)\\n\\tvar result = 0\\n\\n\\tfor char in chars {\\n\\t\\tfreqs[charToInt(char)] += 1\\n\\t}\\n\\n\\tfor word in words {\\n\\t\\tvar curFreqs = freqs\\n\\n\\n\\t\\tvar canBeFormed = true\\n\\t\\tfor char in word {\\n\\t\\t\\tlet index = charToInt(char)\\n\\t\\t\\tif curFreqs[index] <= 0 { \\n\\t\\t\\t\\tcanBeFormed = false\\n\\t\\t\\t\\tbreak \\n\\t\\t\\t}\\n\\t\\t\\tcurFreqs[index] -= 1\\n\\t\\t}\\n\\n\\t\\tif canBeFormed {\\n\\t\\t\\tresult += word.count\\n\\t\\t}\\n\\t}\\n\\n\\treturn result\\n}\\n\\nfunc charToInt(_ char: Character) -> Int {\\n\\treturn Int(char.asciiValue! - Character(\"a\").asciiValue!)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 609574,
                "title": "java-modular-code-with-comments-and-using-int-60-time-and-100-memory",
                "content": "Inspired by https://www.youtube.com/watch?v=3MwRGPPB4tw&list=PLI1t_8YX-Apv-UiRlnZwqqrRT8D1RhriX&index=13&t=0s\\n\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int sum = 0;\\n        \\n\\t\\t//26 size array because all inputs are lowercase english letters\\n\\t\\t//prepare char count array using the private method\\n        int[] charsCount = getCountArray(chars);\\n        \\n        for (String word : words) {\\n\\t\\t//prepare char count array for each word in the words list\\n            int[] wordCount = getCountArray(word);\\n\\t\\t\\t\\n\\t\\t\\t//check if the word can be formed by characters in the given \"chars\" string\\n            if(isWordPossible(charsCount,wordCount)) {\\n\\t\\t\\t//if yes, add the current word\\'s length to the sum\\n                sum += word.length();\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n    \\n    private static int[] getCountArray(String w) {\\n        int[] counts = new int[26];\\n        for(int i = 0; i < w.length(); i++) {\\n            counts[w.charAt(i) - \\'a\\']++;\\n        }\\n        return counts;\\n    }\\n    \\n    private boolean isWordPossible(int[] cCount, int[] wCount) {\\n        for(int i = 0; i < cCount.length; i++) {\\n            if(cCount[i] - wCount[i] < 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int sum = 0;\\n        \\n\\t\\t//26 size array because all inputs are lowercase english letters\\n\\t\\t//prepare char count array using the private method\\n        int[] charsCount = getCountArray(chars);\\n        \\n        for (String word : words) {\\n\\t\\t//prepare char count array for each word in the words list\\n            int[] wordCount = getCountArray(word);\\n\\t\\t\\t\\n\\t\\t\\t//check if the word can be formed by characters in the given \"chars\" string\\n            if(isWordPossible(charsCount,wordCount)) {\\n\\t\\t\\t//if yes, add the current word\\'s length to the sum\\n                sum += word.length();\\n            }\\n        }\\n        \\n        return sum;\\n    }\\n    \\n    private static int[] getCountArray(String w) {\\n        int[] counts = new int[26];\\n        for(int i = 0; i < w.length(); i++) {\\n            counts[w.charAt(i) - \\'a\\']++;\\n        }\\n        return counts;\\n    }\\n    \\n    private boolean isWordPossible(int[] cCount, int[] wCount) {\\n        for(int i = 0; i < cCount.length; i++) {\\n            if(cCount[i] - wCount[i] < 0)\\n                return false;\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 602578,
                "title": "python-3-simple-use-for-else-control-loop-99-100",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res = 0\\n        for w in words:\\n            for l in w:\\n                if l not in chars or w.count(l) > chars.count(l):\\n                    break\\n            else: res += len(w)\\n        return res",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res = 0\\n        for w in words:\\n            for l in w:\\n                if l not in chars or w.count(l) > chars.count(l):\\n                    break\\n            else: res += len(w)\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 533699,
                "title": "ruby-iterating-with-hash",
                "content": "```rb\\ndef count_characters(words, chars)\\n    value = 0\\n    chars_counts = Hash.new(0)\\n    chars.chars.each { |char| chars_counts[char] += 1 }\\n   \\n    words.each do |word| \\n        word_chars = word.chars\\n        available_chars = chars_counts.dup\\n        value += word_chars.size if can_form_word?(word_chars,available_chars)\\n    end\\n    \\n    value\\nend\\n\\ndef can_form_word?(word_chars, available_chars)\\n    word_chars.each do |char|\\n        available_chars[char] -= 1  \\n        return false unless available_chars[char] >= 0\\n    end\\n    true\\nend\\n```",
                "solutionTags": [],
                "code": "```rb\\ndef count_characters(words, chars)\\n    value = 0\\n    chars_counts = Hash.new(0)\\n    chars.chars.each { |char| chars_counts[char] += 1 }\\n   \\n    words.each do |word| \\n        word_chars = word.chars\\n        available_chars = chars_counts.dup\\n        value += word_chars.size if can_form_word?(word_chars,available_chars)\\n    end\\n    \\n    value\\nend\\n\\ndef can_form_word?(word_chars, available_chars)\\n    word_chars.each do |char|\\n        available_chars[char] -= 1  \\n        return false unless available_chars[char] >= 0\\n    end\\n    true\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 520416,
                "title": "javascript-using-hashmap-reduce-human-readable",
                "content": "```\\nvar countCharacters = function(words, chars) {\\n    const dict = new Map();\\n    chars.split(\\'\\').forEach(c => {\\n        if(dict.has(c)) {\\n            dict.set(c, dict.get(c) + 1);\\n        } else {\\n            dict.set(c, 1);\\n        }\\n    })\\n    const reducer = (acc, curr) => {\\n        const reference = new Map(dict);\\n        for(let i = 0; i< curr.length; i++) {\\n            if(reference.has(curr[i]) && reference.get(curr[i]) > 0) {\\n                if(i === curr.length - 1) acc += curr.length;\\n                reference.set(curr[i], reference.get(curr[i]) - 1);\\n            } else {\\n                break;\\n            }\\n        }\\n        return acc;   \\n    }\\n    return words.reduce(reducer, 0);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    const dict = new Map();\\n    chars.split(\\'\\').forEach(c => {\\n        if(dict.has(c)) {\\n            dict.set(c, dict.get(c) + 1);\\n        } else {\\n            dict.set(c, 1);\\n        }\\n    })\\n    const reducer = (acc, curr) => {\\n        const reference = new Map(dict);\\n        for(let i = 0; i< curr.length; i++) {\\n            if(reference.has(curr[i]) && reference.get(curr[i]) > 0) {\\n                if(i === curr.length - 1) acc += curr.length;\\n                reference.set(curr[i], reference.get(curr[i]) - 1);\\n            } else {\\n                break;\\n            }\\n        }\\n        return acc;   \\n    }\\n    return words.reduce(reducer, 0);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 489177,
                "title": "c-44ms-98-in-speed-and-100-in-space-proper-comments-added",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        // make a vector of size 26 in which each index represents a character \\n        // from \\'a\\' to \\'z\\'\\n        vector<char> m(26),temp(26);\\n        \\n        auto count = 0;\\n        \\n        // keep track of frequency of each character of chars in vector m \\n        for(auto i:chars)\\n            m[i-\\'a\\']++;\\n        \\n        // saving frequency of each char of chars in temp \\n        // so that when i make changes in the \"m\"(frequency of each char),\\n        // i will not loose my original \"m\"(frequency of each character of chars)\\n        temp = m;\\n        \\n        \\n        for(auto i:words)\\n        {\\n            bool flag = true;\\n            m = temp; \\n            for(auto j:i)\\n            {\\n                if(m[j-\\'a\\']==0)\\n                {\\n                    // situation meets and you enter this if block\\n                    // means there is some character required to make the string                        \\n\\t\\t\\t\\t\\t//on which we are currently iterating over is not in the                           \\n\\t\\t\\t\\t\\t//chars ... so we will break the inner loop and will move to                        \\n\\t\\t\\t\\t\\t//the next word in the words array\\n                    flag = false;\\n                    break;\\n                }\\n                else\\n                    m[j-\\'a\\']--;\\n            }\\n            if(flag)\\n                count+=i.length();\\n        }\\n        return count;\\n    }\\n    Solution(){\\n        // few lines of code to boost up the I/O of our program and hence execution time \\n        ios::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        // make a vector of size 26 in which each index represents a character \\n        // from \\'a\\' to \\'z\\'\\n        vector<char> m(26),temp(26);\\n        \\n        auto count = 0;\\n        \\n        // keep track of frequency of each character of chars in vector m \\n        for(auto i:chars)\\n            m[i-\\'a\\']++;\\n        \\n        // saving frequency of each char of chars in temp \\n        // so that when i make changes in the \"m\"(frequency of each char),\\n        // i will not loose my original \"m\"(frequency of each character of chars)\\n        temp = m;\\n        \\n        \\n        for(auto i:words)\\n        {\\n            bool flag = true;\\n            m = temp; \\n            for(auto j:i)\\n            {\\n                if(m[j-\\'a\\']==0)\\n                {\\n                    // situation meets and you enter this if block\\n                    // means there is some character required to make the string                        \\n\\t\\t\\t\\t\\t//on which we are currently iterating over is not in the                           \\n\\t\\t\\t\\t\\t//chars ... so we will break the inner loop and will move to                        \\n\\t\\t\\t\\t\\t//the next word in the words array\\n                    flag = false;\\n                    break;\\n                }\\n                else\\n                    m[j-\\'a\\']--;\\n            }\\n            if(flag)\\n                count+=i.length();\\n        }\\n        return count;\\n    }\\n    Solution(){\\n        // few lines of code to boost up the I/O of our program and hence execution time \\n        ios::sync_with_stdio(false);\\n        cin.tie(NULL);\\n        cout.tie(NULL);\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 475915,
                "title": "python-iterative-sol-based-on-count-of-string-95-with-explanation",
                "content": "Python iterative sol. based on count() of string\\n\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n          \\n        list_of_success = []\\n        \\n        # visit each word\\n        for word in words:\\n            \\n            # check each character\\n            for character in word:\\n                \\n                if word.count( character ) > chars.count( character ):\\n                    # miss:\\n                    # chars has no enough characters to make the word\\n                    break\\n                    \\n            else:\\n                # hit:\\n                # add the word into list of success\\n                list_of_success.append( word )\\n                \\n                \\n        return len ( \\'\\'.join( list_of_success) )\\n```",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n          \\n        list_of_success = []\\n        \\n        # visit each word\\n        for word in words:\\n            \\n            # check each character\\n            for character in word:\\n                \\n                if word.count( character ) > chars.count( character ):\\n                    # miss:\\n                    # chars has no enough characters to make the word\\n                    break\\n                    \\n            else:\\n                # hit:\\n                # add the word into list of success\\n                list_of_success.append( word )\\n                \\n                \\n        return len ( \\'\\'.join( list_of_success) )\\n```",
                "codeTag": "Java"
            },
            {
                "id": 429603,
                "title": "java-4-ms-91-86-37-8-mb-100",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int result = 0;\\n        int[] charSet = new int[26];\\n        for(int i=0; i<chars.length(); i++){\\n            charSet[chars.charAt(i) - \\'a\\'] ++;\\n        }\\n        \\n        for(String word : words){\\n           int[] copySet = charSet.clone();\\n           if(wordExist(word, copySet))\\n               result += word.length(); \\n        }\\n        \\n        return result;\\n    }\\n    \\n    private boolean wordExist(String word, int[] copySet){\\n        for(int i=0; i<word.length(); i++){\\n               if(copySet[(word.charAt(i) - \\'a\\')] == 0  )\\n                   return false;\\n                else {\\n                    copySet[(word.charAt(i) - \\'a\\')] --;\\n                }\\n           }\\n        return true;\\n    }\\n    \\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int result = 0;\\n        int[] charSet = new int[26];\\n        for(int i=0; i<chars.length(); i++){\\n            charSet[chars.charAt(i) - \\'a\\'] ++;\\n        }\\n        \\n        for(String word : words){\\n           int[] copySet = charSet.clone();\\n           if(wordExist(word, copySet))\\n               result += word.length(); \\n        }\\n        \\n        return result;\\n    }\\n    \\n    private boolean wordExist(String word, int[] copySet){\\n        for(int i=0; i<word.length(); i++){\\n               if(copySet[(word.charAt(i) - \\'a\\')] == 0  )\\n                   return false;\\n                else {\\n                    copySet[(word.charAt(i) - \\'a\\')] --;\\n                }\\n           }\\n        return true;\\n    }\\n    \\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 395266,
                "title": "python-counter",
                "content": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        c = Counter(chars)\\n        res = 0\\n        for w in words:\\n            cw = Counter(w)\\n            if cw == cw & c :\\n                res += len(w)\\n        return res",
                "solutionTags": [],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        c = Counter(chars)\\n        res = 0\\n        for w in words:\\n            cw = Counter(w)\\n            if cw == cw & c :\\n                res += len(w)\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 391495,
                "title": "java-solution-using-hashmap-no-copy-map",
                "content": "```\\npublic int countCharacters(String[] words, String chars) {\\n        if (chars == null || chars.length() == 0) {\\n            return 0;\\n        }\\n        \\n        Map<Character, Integer> charCount = new HashMap<>();\\n        for (char c : chars.toCharArray()) {\\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        int totalLen = 0;\\n        \\n        for (String word : words) {\\n            boolean isFound = true;\\n            Map<Character, Integer> map = new HashMap<>();\\n            for (int i = 0; i < word.length(); i++) {\\n                char c = word.charAt(i);\\n                if (map.getOrDefault(c, 0) >= charCount.getOrDefault(c, 0)) {\\n                    isFound = false;\\n                    break;\\n                }\\n                map.put(c, map.getOrDefault(c, 0) + 1);\\n            }\\n            if (isFound) {\\n                totalLen += word.length();\\n            }\\n        }\\n        return totalLen;\\n    }\\n\\t",
                "solutionTags": [],
                "code": "```\\npublic int countCharacters(String[] words, String chars) {\\n        if (chars == null || chars.length() == 0) {\\n            return 0;\\n        }\\n        \\n        Map<Character, Integer> charCount = new HashMap<>();\\n        for (char c : chars.toCharArray()) {\\n            charCount.put(c, charCount.getOrDefault(c, 0) + 1);\\n        }\\n        \\n        int totalLen = 0;\\n        \\n        for (String word : words) {\\n            boolean isFound = true;\\n            Map<Character, Integer> map = new HashMap<>();\\n            for (int i = 0; i < word.length(); i++) {\\n                char c = word.charAt(i);\\n                if (map.getOrDefault(c, 0) >= charCount.getOrDefault(c, 0)) {\\n                    isFound = false;\\n                    break;\\n                }\\n                map.put(c, map.getOrDefault(c, 0) + 1);\\n            }\\n            if (isFound) {\\n                totalLen += word.length();\\n            }\\n        }\\n        return totalLen;\\n    }\\n\\t",
                "codeTag": "Unknown"
            },
            {
                "id": 386073,
                "title": "python-1-liner",
                "content": "```\\nclass Solution(object):\\n    def countCharacters(self, words, chars):\\n        \"\"\"\\n        :type words: List[str]\\n        :type chars: str\\n        :rtype: int\\n        \"\"\"\\n        return sum([len(word) for word in words if (collections.Counter(word) & collections.Counter(chars) == collections.Counter(word))])\\n```\\n\\nDoes it return early if the count of a letter isn\\'t in \"chars\"? No, but life is short and one-liners are fun.",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def countCharacters(self, words, chars):\\n        \"\"\"\\n        :type words: List[str]\\n        :type chars: str\\n        :rtype: int\\n        \"\"\"\\n        return sum([len(word) for word in words if (collections.Counter(word) & collections.Counter(chars) == collections.Counter(word))])\\n```",
                "codeTag": "Java"
            },
            {
                "id": 361187,
                "title": "java-clean-beats-100",
                "content": "We count the number of characters in initial String. Then for each word we create a copy of the array with counts and decrement number. If after that the number is < 0 - word cannot be formed. Otherwise - add it\\'s length to result.\\nTime - O(max(len(chars), L x len(words)) - we do 2 iterations - for for the len of chars to count characters, then L x len(words) - for each word we check every character, L is average length of word. \\nSpace - O(1) - constant space for number of characters, there will be always constant number of characters.\\n\\n```\\n    public int countCharacters(String[] words, String chars) {\\n        int[] c = new int[128];\\n        //count the num of each character\\n        for (char ch : chars.toCharArray()) {\\n            c[ch]++;\\n        }\\n        \\n        int res = 0;\\n        for (String s : words) {\\n            //create copy of count array for this word\\n            int[] c2 = Arrays.copyOf(c, 128);\\n            boolean valid = true;\\n            for (char ch : s.toCharArray()) {\\n                c2[ch]--;\\n                //if we don\\'t ave enough count of character\\n                if (c2[ch] < 0) {\\n                    valid = false;\\n                    break;\\n                }\\n            }\\n            //if we can form the word - add it\\'s length to the result\\n            if (valid) {\\n                res+= s.length();\\n            } \\n        }\\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n    public int countCharacters(String[] words, String chars) {\\n        int[] c = new int[128];\\n        //count the num of each character\\n        for (char ch : chars.toCharArray()) {\\n            c[ch]++;\\n        }\\n        \\n        int res = 0;\\n        for (String s : words) {\\n            //create copy of count array for this word\\n            int[] c2 = Arrays.copyOf(c, 128);\\n            boolean valid = true;\\n            for (char ch : s.toCharArray()) {\\n                c2[ch]--;\\n                //if we don\\'t ave enough count of character\\n                if (c2[ch] < 0) {\\n                    valid = false;\\n                    break;\\n                }\\n            }\\n            //if we can form the word - add it\\'s length to the result\\n            if (valid) {\\n                res+= s.length();\\n            } \\n        }\\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3723315,
                "title": "easy-and-optimized-solution-in-java-97-beats-fully-explained",
                "content": "# Approach\\nThe provided solution aims to find the sum of the lengths of all \"good\" strings in an array of words, where a string is considered \"good\" if it can be formed using characters from a given `chars` string. Here\\'s a detailed explanation of the approach:\\n\\n1. Initialize a variable `lenSum` to keep track of the sum of lengths of all \"good\" strings.\\n\\n2. Count the occurrences of each character in the `chars` string by calling the `countCharacters` method. This method takes a string as input and returns an array `charCounts` of size 26 (representing the 26 lowercase English letters). Each index of `charCounts` corresponds to a letter, and the value at that index represents the count of that letter in the string. For example, `charCounts[0]` represents the count of \\'a\\', `charCounts[1]` represents the count of \\'b\\', and so on.\\n\\n3. Iterate over each word in the `words` array.\\n\\n4. For each word, count the occurrences of each character by calling the `countCharacters` method again. This time, the method returns an array `wordCounts` representing the character counts for the current word.\\n\\n5. Check if the current word can be formed using the available characters in `chars`. This is done by calling the `canFormWord` method, which takes `wordCounts` and `charCounts` as inputs. It compares the counts of each character in `wordCounts` with the corresponding counts in `charCounts`. If any character count in `wordCounts` exceeds the count in `charCounts`, it means the word cannot be formed, so the method returns `false`. Otherwise, if all character counts in `wordCounts` are less than or equal to the counts in `charCounts`, the word can be formed, and the method returns `true`.\\n\\n6. If the current word is \"good\" (i.e., it can be formed using the available characters), add its length to `lenSum`.\\n\\n7. Repeat steps 4-6 for each word in the `words` array.\\n\\n8. Finally, return the value of `lenSum`, which represents the sum of the lengths of all \"good\" strings.\\n\\nIn summary, the solution counts the occurrences of characters in both the `chars` string and each word separately. It then compares these counts to determine if each word can be formed using the available characters. By counting the characters beforehand and comparing the counts, the solution achieves an improved time complexity of O(n), where n is the total number of characters in `chars` and all words combined.\\n\\n# Complexity\\n- Time complexity: $$O(n)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int lenSum = 0;\\n        int[] charCounts = countCharacters(chars); // Count characters in \\'chars\\'\\n\\n        for (String word : words) {\\n            int[] wordCounts = countCharacters(word); // Count characters in current word\\n            \\n            if (canFormWord(wordCounts, charCounts)) {\\n                lenSum += word.length();\\n            }\\n        }\\n\\n        return lenSum;\\n    }\\n\\n    private int[] countCharacters(String word) {\\n        int[] charCounts = new int[26];\\n        for (char c : word.toCharArray()) {\\n            charCounts[c - \\'a\\']++;\\n        }\\n        return charCounts;\\n    }\\n\\n    private boolean canFormWord(int[] wordCounts, int[] charCounts) {\\n        for (int i = 0; i < 26; i++) {\\n            if (wordCounts[i] > charCounts[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n```",
                "solutionTags": [
                    "Java",
                    "C#",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int lenSum = 0;\\n        int[] charCounts = countCharacters(chars); // Count characters in \\'chars\\'\\n\\n        for (String word : words) {\\n            int[] wordCounts = countCharacters(word); // Count characters in current word\\n            \\n            if (canFormWord(wordCounts, charCounts)) {\\n                lenSum += word.length();\\n            }\\n        }\\n\\n        return lenSum;\\n    }\\n\\n    private int[] countCharacters(String word) {\\n        int[] charCounts = new int[26];\\n        for (char c : word.toCharArray()) {\\n            charCounts[c - \\'a\\']++;\\n        }\\n        return charCounts;\\n    }\\n\\n    private boolean canFormWord(int[] wordCounts, int[] charCounts) {\\n        for (int i = 0; i < 26; i++) {\\n            if (wordCounts[i] > charCounts[i]) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3454322,
                "title": "c-solution-faster-than-100",
                "content": "# Code\\n```\\npublic class Solution {\\n    public int CountCharacters(string[] words, string chars) {\\n        int[] freq = new int[26];\\n        for(int i = 0; i < chars.Length;i++) freq[chars[i] - \\'a\\']++;\\n        int len = 0;\\n        foreach(var word in words){\\n            int[] freqWord = new int[26];\\n            len+= word.Length;\\n            for(int i = 0; i < word.Length;i++){\\n                int idx = word[i] - \\'a\\';\\n                freqWord[idx]++;\\n                if(freqWord[idx] > freq[idx]){\\n                    len-=word.Length;\\n                    break;\\n                }\\n            } \\n        }\\n        return len;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#",
                    "Hash Table"
                ],
                "code": "```\\npublic class Solution {\\n    public int CountCharacters(string[] words, string chars) {\\n        int[] freq = new int[26];\\n        for(int i = 0; i < chars.Length;i++) freq[chars[i] - \\'a\\']++;\\n        int len = 0;\\n        foreach(var word in words){\\n            int[] freqWord = new int[26];\\n            len+= word.Length;\\n            for(int i = 0; i < word.Length;i++){\\n                int idx = word[i] - \\'a\\';\\n                freqWord[idx]++;\\n                if(freqWord[idx] > freq[idx]){\\n                    len-=word.Length;\\n                    break;\\n                }\\n            } \\n        }\\n        return len;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3452868,
                "title": "minimum-memory-solution-with-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        Map<Character, Integer> list = new HashMap<>();\\n\\n        for(int a = 0; a < chars.length(); a++){\\n            char val = chars.charAt(a);\\n\\n            if(list.containsKey(val)) list.put(val, list.get(val)+1);\\n            else list.put(val, 1);\\n        }\\n        for(String word: words){\\n            Map<Character, Integer> temp = new HashMap<>();\\n\\n            for(int a = 0; a < word.length(); a++){\\n                char val = word.charAt(a);\\n\\n                if(temp.containsKey(val)) temp.put(val, temp.get(val)+1);\\n                else temp.put(val, 1);\\n            }\\n            boolean isTrue = true;\\n            for(Map.Entry<Character, Integer> entry: temp.entrySet()){\\n                char val = entry.getKey();\\n                int  con = entry.getValue();\\n                if(!list.containsKey(val) || list.get(val)<con) isTrue = false;\\n            }\\n            if(isTrue) count += word.length();\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n        Map<Character, Integer> list = new HashMap<>();\\n\\n        for(int a = 0; a < chars.length(); a++){\\n            char val = chars.charAt(a);\\n\\n            if(list.containsKey(val)) list.put(val, list.get(val)+1);\\n            else list.put(val, 1);\\n        }\\n        for(String word: words){\\n            Map<Character, Integer> temp = new HashMap<>();\\n\\n            for(int a = 0; a < word.length(); a++){\\n                char val = word.charAt(a);\\n\\n                if(temp.containsKey(val)) temp.put(val, temp.get(val)+1);\\n                else temp.put(val, 1);\\n            }\\n            boolean isTrue = true;\\n            for(Map.Entry<Character, Integer> entry: temp.entrySet()){\\n                char val = entry.getKey();\\n                int  con = entry.getValue();\\n                if(!list.containsKey(val) || list.get(val)<con) isTrue = false;\\n            }\\n            if(isTrue) count += word.length();\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3345877,
                "title": "beginner-friendly-99-19-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    // Create a counter array hashmap\\n    let arr = new Array(26).fill(0);\\n    for (let i = 0; i < chars.length; i++) {\\n        let index = chars.charCodeAt(i) - \\'a\\'.charCodeAt(0);\\n        arr[index]++;\\n    }\\n    // Compare each word to a new copy of the counter array, and sum up the good string words\\n    let sum = 0;\\n    for (let i = 0; i < words.length; i++) {\\n        let word = words[i];\\n        let copyArr = [...arr];\\n        if(isGoodString(copyArr,word)) {\\n            sum += word.length;\\n        }\\n    }\\n    return sum;\\n};\\n// Helper function to check is the char exist the array hashmap\\nvar isGoodString = function(arr, str) {\\n    for (let j = 0; j < str.length; j++) {\\n        if (arr[str.charCodeAt(j) - \\'a\\'.charCodeAt(0)] > 0) {\\n            arr[str.charCodeAt(j) - \\'a\\'.charCodeAt(0)]--;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Hash Table"
                ],
                "code": "```\\n/**\\n * @param {string[]} words\\n * @param {string} chars\\n * @return {number}\\n */\\nvar countCharacters = function(words, chars) {\\n    // Create a counter array hashmap\\n    let arr = new Array(26).fill(0);\\n    for (let i = 0; i < chars.length; i++) {\\n        let index = chars.charCodeAt(i) - \\'a\\'.charCodeAt(0);\\n        arr[index]++;\\n    }\\n    // Compare each word to a new copy of the counter array, and sum up the good string words\\n    let sum = 0;\\n    for (let i = 0; i < words.length; i++) {\\n        let word = words[i];\\n        let copyArr = [...arr];\\n        if(isGoodString(copyArr,word)) {\\n            sum += word.length;\\n        }\\n    }\\n    return sum;\\n};\\n// Helper function to check is the char exist the array hashmap\\nvar isGoodString = function(arr, str) {\\n    for (let j = 0; j < str.length; j++) {\\n        if (arr[str.charCodeAt(j) - \\'a\\'.charCodeAt(0)] > 0) {\\n            arr[str.charCodeAt(j) - \\'a\\'.charCodeAt(0)]--;\\n        } else {\\n            return false;\\n        }\\n    }\\n    return true;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3340562,
                "title": "find-words-that-can-be-formed-by-characters-solution-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n^3)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int i, j, k, flag=0, flag2=0, sum_len=0;\\n        string str;\\n        for(i=0 ; i<words.size() ; i++)\\n        {\\n            str = chars;\\n            flag=0;\\n            for(j=0 ; j<words[i].length() ; j++)\\n            {\\n                flag2=0;\\n                for(k=0 ; k<str.length() ; k++)\\n                {\\n                    if(words[i][j]==str[k])\\n                    {\\n                        str.erase(str.begin()+k);\\n                        flag2=1;\\n                        break;\\n                    }\\n                }\\n                if(flag2==0)\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n            {\\n                sum_len += words[i].length();\\n            }\\n        }\\n        return sum_len;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int i, j, k, flag=0, flag2=0, sum_len=0;\\n        string str;\\n        for(i=0 ; i<words.size() ; i++)\\n        {\\n            str = chars;\\n            flag=0;\\n            for(j=0 ; j<words[i].length() ; j++)\\n            {\\n                flag2=0;\\n                for(k=0 ; k<str.length() ; k++)\\n                {\\n                    if(words[i][j]==str[k])\\n                    {\\n                        str.erase(str.begin()+k);\\n                        flag2=1;\\n                        break;\\n                    }\\n                }\\n                if(flag2==0)\\n                {\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n            {\\n                sum_len += words[i].length();\\n            }\\n        }\\n        return sum_len;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3281353,
                "title": "c-easy-but-slowly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int result=0;\\n        map<char,int> mp1;\\n        for(const auto&it:chars) mp1[it]++;\\n        \\n        for(const auto&it:words){\\n            bool flag=1;\\n            map<char,int> mp2;\\n            for(const auto&itr:it) mp2[itr]++;\\n\\n            if(mp2.size()>mp1.size()){\\n                continue;\\n                mp2.clear();\\n            }\\n            for(const auto&it:mp2){\\n\\n                if(mp1[it.first] < it.second) {\\n                    flag=0;\\n                }\\n            }\\n            if(flag) result+=it.size();\\n            mp2.clear();\\n        }\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int result=0;\\n        map<char,int> mp1;\\n        for(const auto&it:chars) mp1[it]++;\\n        \\n        for(const auto&it:words){\\n            bool flag=1;\\n            map<char,int> mp2;\\n            for(const auto&itr:it) mp2[itr]++;\\n\\n            if(mp2.size()>mp1.size()){\\n                continue;\\n                mp2.clear();\\n            }\\n            for(const auto&it:mp2){\\n\\n                if(mp1[it.first] < it.second) {\\n                    flag=0;\\n                }\\n            }\\n            if(flag) result+=it.size();\\n            mp2.clear();\\n        }\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3173629,
                "title": "js-javascript-solution-using-map",
                "content": "# Code\\n```\\nconst countCharacters = (words, chars) => {\\n    let result = 0;\\n    const charsMap = new Map();\\n    for (const char of chars) {\\n        charsMap.has(char) ? charsMap.set(char, charsMap.get(char) + 1) : charsMap.set(char, 1);\\n    }\\n    for (const word of words) {\\n        const wordMap = new Map();\\n        for (const char of word) {\\n            wordMap.has(char) ? wordMap.set(char, wordMap.get(char) + 1) : wordMap.set(char, 1);\\n        }\\n        for (let i = 0; i < word.length; i++) {\\n            if (charsMap.has(word[i])) {\\n                if (wordMap.get(word[i]) > charsMap.get(word[i])) {\\n                    break;\\n                }\\n            } else {\\n                break;\\n            }\\n            if (i === word.length - 1) result += word.length;\\n        }\\n    }\\n    return result;\\n};\\n```\\n* Runtime: 164 ms (Beats 72.3%)\\n* Memory: 50.9 MB (Beats 42.15%)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst countCharacters = (words, chars) => {\\n    let result = 0;\\n    const charsMap = new Map();\\n    for (const char of chars) {\\n        charsMap.has(char) ? charsMap.set(char, charsMap.get(char) + 1) : charsMap.set(char, 1);\\n    }\\n    for (const word of words) {\\n        const wordMap = new Map();\\n        for (const char of word) {\\n            wordMap.has(char) ? wordMap.set(char, wordMap.get(char) + 1) : wordMap.set(char, 1);\\n        }\\n        for (let i = 0; i < word.length; i++) {\\n            if (charsMap.has(word[i])) {\\n                if (wordMap.get(word[i]) > charsMap.get(word[i])) {\\n                    break;\\n                }\\n            } else {\\n                break;\\n            }\\n            if (i === word.length - 1) result += word.length;\\n        }\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3106048,
                "title": "javascript-solution",
                "content": "```\\nvar countCharacters = function(words, chars) {\\n    const array = []\\n    let count = 0\\n    \\n    for (let word of words) {\\n        const map = new Map()\\n        for (let char of chars) {\\n            map.set(char, map.get(char) + 1 || 1)\\n        }\\n        \\n        for (let i = 0; i < word.length; i++){\\n            if (!map.get(word[i])) break\\n            map.set(word[i], map.get(word[i]) - 1)\\n            if (i === word.length - 1) array.push(word)\\n        }\\n    }\\n    \\n    for (let word of array) {\\n        count += word.length\\n    }\\n    return count\\n};",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    const array = []\\n    let count = 0\\n    \\n    for (let word of words) {\\n        const map = new Map()\\n        for (let char of chars) {\\n            map.set(char, map.get(char) + 1 || 1)\\n        }\\n        \\n        for (let i = 0; i < word.length; i++){\\n            if (!map.get(word[i])) break\\n            map.set(word[i], map.get(word[i]) - 1)\\n            if (i === word.length - 1) array.push(word)\\n        }\\n    }\\n    \\n    for (let word of array) {\\n        count += word.length\\n    }\\n    return count\\n};",
                "codeTag": "Unknown"
            },
            {
                "id": 3102362,
                "title": "java-hash-table",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i=0;i<chars.length();i++) {\\n            char c = chars.charAt(i);\\n            if(hm.containsKey(c)) {\\n                hm.put(c,hm.get(c)+1);\\n            } else {\\n                hm.put(c,1);\\n            }\\n        }\\n\\n        for(int i=0;i<words.length;i++) {\\n            HashMap<Character,Integer> tempMap = new HashMap<>();\\n                for(int j =0;j<words[i].length();j++) {\\n                    char c = words[i].charAt(j);\\n                    if(tempMap.containsKey(c)) {\\n                    tempMap.put(c,tempMap.get(c)+1);\\n                } else {\\n                    tempMap.put(c,1);\\n                }\\n             }\\n             boolean flag = true;\\n             for(Character ch : tempMap.keySet()) {\\n                 if(hm.containsKey(ch) && hm.get(ch) >= tempMap.get(ch)) {\\n                     continue;\\n                 } else {\\n                     flag = false;\\n                     break;\\n                 }\\n             }\\n             if(flag) {\\n                 count += words[i].length();\\n             }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count = 0;\\n\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i=0;i<chars.length();i++) {\\n            char c = chars.charAt(i);\\n            if(hm.containsKey(c)) {\\n                hm.put(c,hm.get(c)+1);\\n            } else {\\n                hm.put(c,1);\\n            }\\n        }\\n\\n        for(int i=0;i<words.length;i++) {\\n            HashMap<Character,Integer> tempMap = new HashMap<>();\\n                for(int j =0;j<words[i].length();j++) {\\n                    char c = words[i].charAt(j);\\n                    if(tempMap.containsKey(c)) {\\n                    tempMap.put(c,tempMap.get(c)+1);\\n                } else {\\n                    tempMap.put(c,1);\\n                }\\n             }\\n             boolean flag = true;\\n             for(Character ch : tempMap.keySet()) {\\n                 if(hm.containsKey(ch) && hm.get(ch) >= tempMap.get(ch)) {\\n                     continue;\\n                 } else {\\n                     flag = false;\\n                     break;\\n                 }\\n             }\\n             if(flag) {\\n                 count += words[i].length();\\n             }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3097302,
                "title": "array-string-only-used-java",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int[] char_map;\\n    public int countCharacters(String[] words, String chars) {\\n        char_map=new int[26];\\n       int ans=0;\\n       for(char c : chars.toCharArray()){\\n           char_map[c-\\'a\\']++;\\n       }\\n\\n       for(String word: words){\\n           int[] dummyArray = Arrays.copyOf(char_map, char_map.length);\\n           int count =0;\\n           for(char c: word.toCharArray()){\\n               if(dummyArray[c-\\'a\\']>0){\\n                   count++;\\n                   dummyArray[c-\\'a\\']--;\\n               }\\n           }\\n           if(count==word.length()){\\n               ans+=word.length();\\n           }\\n       }\\n       return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Array",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n    public int[] char_map;\\n    public int countCharacters(String[] words, String chars) {\\n        char_map=new int[26];\\n       int ans=0;\\n       for(char c : chars.toCharArray()){\\n           char_map[c-\\'a\\']++;\\n       }\\n\\n       for(String word: words){\\n           int[] dummyArray = Arrays.copyOf(char_map, char_map.length);\\n           int count =0;\\n           for(char c: word.toCharArray()){\\n               if(dummyArray[c-\\'a\\']>0){\\n                   count++;\\n                   dummyArray[c-\\'a\\']--;\\n               }\\n           }\\n           if(count==word.length()){\\n               ans+=word.length();\\n           }\\n       }\\n       return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3088497,
                "title": "easy-approach-using-hash-table-o-nk-time-o-26-space",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n       vector<int>hash(26,0);\\n        int ans=0;\\n        for(int i=0;i<chars.length();i++){\\n            hash[chars[i]-97]++;\\n        }\\n        \\n        for(int i=0;i<words.size();i++){\\n            string temp=words[i];\\n            bool canMake=true;\\n            vector<int>org(hash);\\n            for(int j=0;j<temp.length();j++){\\n                if(hash[temp[j]-97]<=0){\\n                    canMake=false;\\n                    break;\\n                }else{\\n                    hash[temp[j]-97]--;\\n                }\\n            }\\n            hash=org;\\n            if(canMake){\\n                ans+=temp.length();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n       vector<int>hash(26,0);\\n        int ans=0;\\n        for(int i=0;i<chars.length();i++){\\n            hash[chars[i]-97]++;\\n        }\\n        \\n        for(int i=0;i<words.size();i++){\\n            string temp=words[i];\\n            bool canMake=true;\\n            vector<int>org(hash);\\n            for(int j=0;j<temp.length();j++){\\n                if(hash[temp[j]-97]<=0){\\n                    canMake=false;\\n                    break;\\n                }else{\\n                    hash[temp[j]-97]--;\\n                }\\n            }\\n            hash=org;\\n            if(canMake){\\n                ans+=temp.length();\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3069735,
                "title": "java-using-hashmap",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n       int arr[] = new int[26];\\n       for(int i=0;i<chars.length();i++){\\n           arr[chars.charAt(i)-\\'a\\']++;\\n       }\\n       boolean c =false;\\n       int sum = 0;\\n       for(int i=0;i<words.length;i++){\\n           String temp = words[i];\\n           HashMap<Character,Integer>map = new HashMap();\\n           for(int j=0;j<temp.length();j++){\\n               map.put(temp.charAt(j),map.getOrDefault(temp.charAt(j),0)+1);\\n           }\\n           for(int k=0;k<temp.length();k++){\\n               if(!(arr[temp.charAt(k)-\\'a\\']>=map.get(temp.charAt(k)))){\\n                   c = true;\\n                   break;\\n               }\\n           }\\n            if(!c){\\n                sum+=temp.length();\\n            }\\n            c = false;\\n       }\\n       return sum; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n       int arr[] = new int[26];\\n       for(int i=0;i<chars.length();i++){\\n           arr[chars.charAt(i)-\\'a\\']++;\\n       }\\n       boolean c =false;\\n       int sum = 0;\\n       for(int i=0;i<words.length;i++){\\n           String temp = words[i];\\n           HashMap<Character,Integer>map = new HashMap();\\n           for(int j=0;j<temp.length();j++){\\n               map.put(temp.charAt(j),map.getOrDefault(temp.charAt(j),0)+1);\\n           }\\n           for(int k=0;k<temp.length();k++){\\n               if(!(arr[temp.charAt(k)-\\'a\\']>=map.get(temp.charAt(k)))){\\n                   c = true;\\n                   break;\\n               }\\n           }\\n            if(!c){\\n                sum+=temp.length();\\n            }\\n            c = false;\\n       }\\n       return sum; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2886813,
                "title": "beginner-friendly-java-solution",
                "content": "# Complexity\\n- Time complexity:\\n**O(m*n)**\\n\\n# Code\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int ch[] = new int[26];\\n        for(char c: chars.toCharArray())  ch[c - \\'a\\']++;\\n        int count = 0;\\n        for(String word : words){\\n            int tmp[] = ch.clone();\\n            count += word.length();\\n            for(char c : word.toCharArray()){\\n                tmp[c - \\'a\\']--;\\n                if(tmp[c - \\'a\\'] < 0){\\n                    count -= word.length();\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int ch[] = new int[26];\\n        for(char c: chars.toCharArray())  ch[c - \\'a\\']++;\\n        int count = 0;\\n        for(String word : words){\\n            int tmp[] = ch.clone();\\n            count += word.length();\\n            for(char c : word.toCharArray()){\\n                tmp[c - \\'a\\']--;\\n                if(tmp[c - \\'a\\'] < 0){\\n                    count -= word.length();\\n                    break;\\n                }\\n            }\\n        }\\n        return count;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2666173,
                "title": "hashmap-approach",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        unordered_map<char,int> l,b;\\n        for(auto i: chars)\\n        {\\n            l[i]+=1;\\n        }\\n        \\n        b = l;\\n        \\n        int res = 0;\\n        for(auto i: words)\\n        {\\n           l=b; \\n           for(int j=0;j<i.length();j++)\\n           {\\n               if(l[i[j]] == 0)\\n                   break;\\n               l[i[j]]-=1;\\n               if(j==i.length()-1)\\n                   res+=i.length();\\n           }\\n        }\\n        \\n        return res;\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        unordered_map<char,int> l,b;\\n        for(auto i: chars)\\n        {\\n            l[i]+=1;\\n        }\\n        \\n        b = l;\\n        \\n        int res = 0;\\n        for(auto i: words)\\n        {\\n           l=b; \\n           for(int j=0;j<i.length();j++)\\n           {\\n               if(l[i[j]] == 0)\\n                   break;\\n               l[i[j]]-=1;\\n               if(j==i.length()-1)\\n                   res+=i.length();\\n           }\\n        }\\n        \\n        return res;\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2484327,
                "title": "c-using-mapping",
                "content": "\\n\\n\\'\\'\\'\\n bool check( string s ,  unordered_map< char , int >mp  )\\n    {\\n        unordered_map< char , int >mp1 ;\\n        \\n        for( auto i : s) mp1[i]++ ;\\n        \\n        for( auto i : mp1 )\\n        {\\n            if(mp[i.first] < mp1[i.first])\\n            {\\n                return false ;\\n            }\\n        }\\n        \\n        return true ;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n      \\n        \\n         unordered_map< char , int >mp ;\\n        \\n        for( auto i : chars ) mp[i]++ ;\\n        \\n        int count = 0 ;\\n        \\n        for( int i = 0 ; i < words.size() ; i++ )\\n        {\\n            if( check( words[i] , mp )) \\n            {\\n                count += words[i].size() ;\\n            }\\n        }\\n        \\n      return count ;\\n    }\\n\\t\\n\\t\\'\\'\\'",
                "solutionTags": [],
                "code": "\\n\\n\\'\\'\\'\\n bool check( string s ,  unordered_map< char , int >mp  )\\n    {\\n        unordered_map< char , int >mp1 ;\\n        \\n        for( auto i : s) mp1[i]++ ;\\n        \\n        for( auto i : mp1 )\\n        {\\n            if(mp[i.first] < mp1[i.first])\\n            {\\n                return false ;\\n            }\\n        }\\n        \\n        return true ;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n      \\n        \\n         unordered_map< char , int >mp ;\\n        \\n        for( auto i : chars ) mp[i]++ ;\\n        \\n        int count = 0 ;\\n        \\n        for( int i = 0 ; i < words.size() ; i++ )\\n        {\\n            if( check( words[i] , mp )) \\n            {\\n                count += words[i].size() ;\\n            }\\n        }\\n        \\n      return count ;\\n    }\\n\\t\\n\\t\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2436747,
                "title": "python-faster-solution-and-easy",
                "content": "```\\ndef countCharacters(self, words: List[str], chars: str) -> int:\\n        char=set(chars)\\n        count=0\\n        for i in words:\\n            for j in i:\\n                if(chars.count(j)<i.count(j)):\\n                    break\\n            else:\\n                count+=len(i)\\n        return count\\n    \\n    \\n```",
                "solutionTags": [],
                "code": "```\\ndef countCharacters(self, words: List[str], chars: str) -> int:\\n        char=set(chars)\\n        count=0\\n        for i in words:\\n            for j in i:\\n                if(chars.count(j)<i.count(j)):\\n                    break\\n            else:\\n                count+=len(i)\\n        return count\\n    \\n    \\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2425817,
                "title": "simple-java-solution",
                "content": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int[] freq = new int[26];\\n        int res=0;\\n        List<String> ans = new ArrayList<>();\\n        \\n        for(char c : chars.toCharArray())\\n            freq[c-\\'a\\']++;\\n        \\n        for(String s : words){\\n            int[] count = new int[26];\\n            boolean flag = true;\\n            for(char c : s.toCharArray()){\\n                count[c-\\'a\\']++;\\n            }\\n            for(int i=0; i<26; i++){\\n                if(freq[i]<count[i]){\\n                    flag=false;\\n                    break;\\n                }\\n            }\\n            if(flag)\\n                ans.add(s);\\n        }\\n        \\n        System.out.print(ans);\\n        \\n        for(int i=0; i<ans.size(); i++){\\n            res += ans.get(i).length();\\n        }\\n        \\n        return res;\\n        \\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int[] freq = new int[26];\\n        int res=0;\\n        List<String> ans = new ArrayList<>();\\n        \\n        for(char c : chars.toCharArray())\\n            freq[c-\\'a\\']++;\\n        \\n        for(String s : words){\\n            int[] count = new int[26];\\n            boolean flag = true;\\n            for(char c : s.toCharArray()){\\n                count[c-\\'a\\']++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2358392,
                "title": "java-faster-than-98-simple-explaination",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] freq = new int[26];\\n        for (int i = 0; i < chars.length(); i++) {\\n            // char - char is a kind of clever way to get the position of\\n            // the character in the alphabet. \\'a\\' - \\'a\\' would give you 0.\\n            // \\'b\\' - \\'a\\' would give you 1. \\'c\\' - \\'a\\' would give you 2, and so on.\\n            freq[chars.charAt(i) - \\'a\\'] ++;\\n        }\\n        \\n        int result = 0;\\n        for (String word : words) {\\n            int[] copy = Arrays.copyOf(freq, freq.length);\\n            boolean pass = true;\\n            for (int j = 0; j < word.length(); j++) {\\n\\t\\t\\t\\t// decrement the frequency of this char in array for using\\n\\t\\t\\t\\t// if there are less than 1 chance for using this character, invalid, \\n\\t\\t\\t\\t// move to next word in words\\n                if (-- copy[word.charAt(j) - \\'a\\'] < 0) {\\n                    pass = false;\\n                    break;\\n                }\\n            }\\n            if (pass) {\\n                result += word.length();\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int[] freq = new int[26];\\n        for (int i = 0; i < chars.length(); i++) {\\n            // char - char is a kind of clever way to get the position of\\n            // the character in the alphabet. \\'a\\' - \\'a\\' would give you 0.\\n            // \\'b\\' - \\'a\\' would give you 1. \\'c\\' - \\'a\\' would give you 2, and so on.\\n            freq[chars.charAt(i) - \\'a\\'] ++;\\n        }\\n        \\n        int result = 0;\\n        for (String word : words) {\\n            int[] copy = Arrays.copyOf(freq, freq.length);\\n            boolean pass = true;\\n            for (int j = 0; j < word.length(); j++) {\\n\\t\\t\\t\\t// decrement the frequency of this char in array for using\\n\\t\\t\\t\\t// if there are less than 1 chance for using this character, invalid, \\n\\t\\t\\t\\t// move to next word in words\\n                if (-- copy[word.charAt(j) - \\'a\\'] < 0) {\\n                    pass = false;\\n                    break;\\n                }\\n            }\\n            if (pass) {\\n                result += word.length();\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2277268,
                "title": "python-counter-easy-solution",
                "content": "```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter = Counter(chars)\\n        res = 0\\n        for word in words:\\n            word_counter = Counter(word)\\n            if all(word_counter[c] <= counter[c] for c in word_counter):\\n                res += len(word)\\n        return res",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        counter = Counter(chars)\\n        res = 0\\n        for word in words:\\n            word_counter = Counter(word)\\n            if all(word_counter[c] <= counter[c] for c in word_counter):\\n                res += len(word)\\n        return res",
                "codeTag": "Java"
            },
            {
                "id": 2247203,
                "title": "c-solution-with-frequencies-of-letters",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        vector<int> freq1(150, 0);\\n        \\n        for(char c:chars)\\n            freq1[(int)c]++;\\n        \\n        int res = 0;\\n        for(string word:words)\\n        {\\n            bool good = true;\\n            vector<int> freq2(150, 0);\\n            for(char c:word)\\n            {\\n                freq2[(int)c]++;\\n                if(freq2[(int)c] > freq1[(int)c])\\n                {\\n                    good = false;\\n                    break;\\n                }\\n            }\\n                          \\n            if (good)\\n                res += word.size();\\n        }\\n        \\n        return res;   \\n    }\\n};\\n```",
                "solutionTags": [
                    "Counting"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        vector<int> freq1(150, 0);\\n        \\n        for(char c:chars)\\n            freq1[(int)c]++;\\n        \\n        int res = 0;\\n        for(string word:words)\\n        {\\n            bool good = true;\\n            vector<int> freq2(150, 0);\\n            for(char c:word)\\n            {\\n                freq2[(int)c]++;\\n                if(freq2[(int)c] > freq1[(int)c])\\n                {\\n                    good = false;\\n                    break;\\n                }\\n            }\\n                          \\n            if (good)\\n                res += word.size();\\n        }\\n        \\n        return res;   \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2242483,
                "title": "easy-python",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        fre = Counter(chars)\\n        count = 0\\n        for i in words:\\n            if Counter(i) <= fre:\\n                count += len(i)\\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        fre = Counter(chars)\\n        count = 0\\n        for i in words:\\n            if Counter(i) <= fre:\\n                count += len(i)\\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2242192,
                "title": "slowest-python-solution",
                "content": "```\\ndef countCharacters(self, words, chars):\\n        length = 0\\n        for word in words:\\n            if not Counter(word) - Counter(chars):\\n                length += len(word)\\n        return length\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef countCharacters(self, words, chars):\\n        length = 0\\n        for word in words:\\n            if not Counter(word) - Counter(chars):\\n                length += len(word)\\n        return length\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2214288,
                "title": "python-multisets",
                "content": "```\\nfrom collections import Counter as multiset\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        chars = multiset(chars)\\n        res = 0\\n        for w in words:\\n            msw = multiset(w)\\n            if msw & chars == msw:\\n                res += len(w)\\n        return res\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter as multiset\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        chars = multiset(chars)\\n        res = 0\\n        for w in words:\\n            msw = multiset(w)\\n            if msw & chars == msw:\\n                res += len(w)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2211365,
                "title": "c-multiset-easy-to-understand",
                "content": "![image](https://assets.leetcode.com/users/images/e418416d-136b-4508-a150-59228b582a5b_1656450547.0913696.png)\\n\\n\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint countCharacters(vector<string>& w, string c) {\\n\\t\\t\\tmultiset<char>s,t;\\n\\t\\t\\tint ans=0;\\n\\t\\t\\tfor(int i=0;i<c.size();i++)s.insert(c[i]);\\n\\t\\t\\tfor(int i=0;i<w.size();i++){\\n\\t\\t\\t\\tt=s;\\n\\t\\t\\t\\tbool f=true;\\n\\t\\t\\t\\tfor(int j=0;j<w[i].size();j++){\\n\\t\\t\\t\\t\\tauto it=t.find(w[i][j]);\\n\\t\\t\\t\\t\\tif(it==t.end()){\\n\\t\\t\\t\\t\\t\\tf=false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\tt.erase(it);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\tif(f) ans+=w[i].size();\\n\\t\\t\\t}\\n\\t\\t\\treturn ans;\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint countCharacters(vector<string>& w, string c) {\\n\\t\\t\\tmultiset<char>s,t;\\n\\t\\t\\tint ans=0;\\n\\t\\t\\tfor(int i=0;i<c.size();i++)s.insert(c[i]);\\n\\t\\t\\tfor(int i=0;i<w.size();i++){\\n\\t\\t\\t\\tt=s;\\n\\t\\t\\t\\tbool f=true;\\n\\t\\t\\t\\tfor(int j=0;j<w[i].size();j++){\\n\\t\\t\\t\\t\\tauto it=t.find(w[i][j]);\\n\\t\\t\\t\\t\\tif(it==t.end()){\\n\\t\\t\\t\\t\\t\\tf=false;\\n\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 2200781,
                "title": "python3-simple",
                "content": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        charCounts = Counter(chars)\\n        \\n        def canBeFormed(word: str) -> int:\\n            for k, v in Counter(word).items():\\n                if v > charCounts[k]:\\n                    return 0\\n            return len(word)\\n        \\n        res = 0   \\n        for word in words:\\n            res += canBeFormed(word)\\n        return res\\n```\\n",
                "solutionTags": [],
                "code": "```\\nfrom collections import Counter\\n\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        charCounts = Counter(chars)\\n        \\n        def canBeFormed(word: str) -> int:\\n            for k, v in Counter(word).items():\\n                if v > charCounts[k]:\\n                    return 0\\n            return len(word)\\n        \\n        res = 0   \\n        for word in words:\\n            res += canBeFormed(word)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2094684,
                "title": "java-easy-to-understand",
                "content": "```\\npublic int countCharacters(String[] words, String chars) {\\n        int [] temp=new int[26];\\n        int ans=0;\\n        HashSet<Character>st=new HashSet<>();\\n        for(char c:chars.toCharArray()){\\n            temp[c-\\'a\\']++;\\n        }\\n        System.out.print(st);\\n        for(String s:words){\\n            if(ismatch(s,temp)){\\n\\n                ans+=s.length();\\n            }\\n        }\\n        return ans;\\n        \\n        \\n    }\\n    boolean ismatch(String s,int[] temp){\\n        int []temp1=Arrays.copyOf(temp, temp.length);\\n        for(char str:s.toCharArray()){\\n            if(temp1[str-\\'a\\']==0) return false;\\n            else temp1[str-\\'a\\']--;\\n\\n        }\\n        return true;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int countCharacters(String[] words, String chars) {\\n        int [] temp=new int[26];\\n        int ans=0;\\n        HashSet<Character>st=new HashSet<>();\\n        for(char c:chars.toCharArray()){\\n            temp[c-\\'a\\']++;\\n        }\\n        System.out.print(st);\\n        for(String s:words){\\n            if(ismatch(s,temp)){\\n\\n                ans+=s.length();\\n            }\\n        }\\n        return ans;\\n        \\n        \\n    }\\n    boolean ismatch(String s,int[] temp){\\n        int []temp1=Arrays.copyOf(temp, temp.length);\\n        for(char str:s.toCharArray()){\\n            if(temp1[str-\\'a\\']==0) return false;\\n            else temp1[str-\\'a\\']--;\\n\\n        }\\n        return true;\\n    }\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2086449,
                "title": "find-words-that-can-be-formed-by-characters-simple",
                "content": "```\\n\\nclass Solution {\\npublic:\\n    \\n    unordered_map<char,int> freqCount(string &s)\\n    {\\n        unordered_map<char,int> freq;\\n        \\n        for(auto ch: s)\\n        {\\n            freq[ch]++;\\n        }\\n        \\n        return freq;\\n    }\\n    \\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        unordered_map<char,int> chFreq;\\n        \\n        unordered_map<char,int> wordFreq;\\n        \\n        chFreq= freqCount(chars);\\n        \\n        int sum=0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            string currString= words[i];\\n            \\n            wordFreq= freqCount(currString);\\n            \\n            int flag=0;\\n            \\n            for(auto ch: currString)\\n            {\\n                if(chFreq[ch]<wordFreq[ch])\\n                    flag=1;\\n                    \\n            }\\n            \\n            if(flag!=1)\\n                sum+= currString.length();  \\n        }\\n        return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    \\n    unordered_map<char,int> freqCount(string &s)\\n    {\\n        unordered_map<char,int> freq;\\n        \\n        for(auto ch: s)\\n        {\\n            freq[ch]++;\\n        }\\n        \\n        return freq;\\n    }\\n    \\n    int countCharacters(vector<string>& words, string chars) {\\n        \\n        unordered_map<char,int> chFreq;\\n        \\n        unordered_map<char,int> wordFreq;\\n        \\n        chFreq= freqCount(chars);\\n        \\n        int sum=0;\\n        \\n        for(int i=0;i<words.size();i++)\\n        {\\n            string currString= words[i];\\n            \\n            wordFreq= freqCount(currString);\\n            \\n            int flag=0;\\n            \\n            for(auto ch: currString)\\n            {\\n                if(chFreq[ch]<wordFreq[ch])\\n                    flag=1;\\n                    \\n            }\\n            \\n            if(flag!=1)\\n                sum+= currString.length();  \\n        }\\n        return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2055758,
                "title": "javascript-js-solution-ultrafast",
                "content": "JavaScript solution\\n\\n```\\nvar countCharacters = function(words, chars) {\\n    const hash = chars.split(\\'\\').reduce((res, c) => {\\n        if (!res[c]) {\\n            res[c] = 0;\\n        }\\n        \\n        res[c]++;\\n        \\n        return res;\\n    }, {});\\n    \\n    const useChar = (hash, c) => {\\n        if (!hash[c]) {\\n            return false;\\n        }\\n    \\n        hash[c]--;\\n        \\n        if (hash[c] === 0) {\\n            delete hash[c];\\n        }\\n        \\n        return true;\\n    };\\n    \\n    return words\\n        .filter((word) => {\\n            let i = 0;\\n            const map = {...hash};\\n        \\n            while (useChar(map, word[i]) && i < word.length) {\\n                i++;\\n            }\\n        \\n            return i === word.length;\\n        })\\n        .reduce((res, word) => res + word.length, 0);\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    const hash = chars.split(\\'\\').reduce((res, c) => {\\n        if (!res[c]) {\\n            res[c] = 0;\\n        }\\n        \\n        res[c]++;\\n        \\n        return res;\\n    }, {});\\n    \\n    const useChar = (hash, c) => {\\n        if (!hash[c]) {\\n            return false;\\n        }\\n    \\n        hash[c]--;\\n        \\n        if (hash[c] === 0) {\\n            delete hash[c];\\n        }\\n        \\n        return true;\\n    };\\n    \\n    return words\\n        .filter((word) => {\\n            let i = 0;\\n            const map = {...hash};\\n        \\n            while (useChar(map, word[i]) && i < word.length) {\\n                i++;\\n            }\\n        \\n            return i === word.length;\\n        })\\n        .reduce((res, word) => res + word.length, 0);\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2039597,
                "title": "no-inbuilt-function-used-and-easy-to-understand",
                "content": "```\\ndef countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\tmatch = myCounter(chars)\\n\\t\\tres = 0\\n\\t\\tfor word in words:\\n\\t\\t\\ttemp = match.copy()\\n\\t\\t\\tpresent = True\\n\\t\\t\\tfor ch in word:\\n\\t\\t\\t\\tif ch in temp and temp[ch] > 0:\\n\\t\\t\\t\\t\\ttemp[ch] -= 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tpresent = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif present:\\n\\t\\t\\t\\tres += len(word)\\n\\t\\treturn res      \\n\\ndef myCounter(string):\\n\\td = {}\\n\\tfor ch in string:\\n\\t\\tif ch in d: d[ch]+=1\\n\\t\\telse: d[ch] = 1\\n\\treturn d\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\ndef countCharacters(self, words: List[str], chars: str) -> int:\\n\\t\\tmatch = myCounter(chars)\\n\\t\\tres = 0\\n\\t\\tfor word in words:\\n\\t\\t\\ttemp = match.copy()\\n\\t\\t\\tpresent = True\\n\\t\\t\\tfor ch in word:\\n\\t\\t\\t\\tif ch in temp and temp[ch] > 0:\\n\\t\\t\\t\\t\\ttemp[ch] -= 1\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tpresent = False\\n\\t\\t\\t\\t\\tbreak\\n\\t\\t\\tif present:\\n\\t\\t\\t\\tres += len(word)\\n\\t\\treturn res      \\n\\ndef myCounter(string):\\n\\td = {}\\n\\tfor ch in string:\\n\\t\\tif ch in d: d[ch]+=1\\n\\t\\telse: d[ch] = 1\\n\\treturn d\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 2027599,
                "title": "java-solution-using-a-hashmap",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(char c: chars.toCharArray())\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        \\n        int ans = 0;\\n        for(String s: words) {\\n            Map<Character, Integer> count = new HashMap<>();\\n            int i = 0;\\n            for(; i<s.length(); i++) {\\n                char c = s.charAt(i);\\n                if(map.containsKey(c)) {\\n                    if(count.containsKey(c) && count.get(c) + 1 > map.get(c))\\n                        break;\\n                    count.put(c, count.getOrDefault(c, 0) + 1);\\n                } else\\n                    break;\\n            }\\n            if(i == s.length())\\n                ans += s.length();\\n        }\\n        \\n        return ans;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        for(char c: chars.toCharArray())\\n            map.put(c, map.getOrDefault(c, 0) + 1);\\n        \\n        int ans = 0;\\n        for(String s: words) {\\n            Map<Character, Integer> count = new HashMap<>();\\n            int i = 0;\\n            for(; i<s.length(); i++) {\\n                char c = s.charAt(i);\\n                if(map.containsKey(c)) {\\n                    if(count.containsKey(c) && count.get(c) + 1 > map.get(c))\\n                        break;\\n                    count.put(c, count.getOrDefault(c, 0) + 1);\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1964580,
                "title": "6-ms-faster-than-93-57-of-java-online-submissions",
                "content": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int allowedFreqChar[] = getFreq(chars);\\n        int count =0 ;\\n        for(String str : words){\\n            int freqChar[] = getFreq(str);\\n            if(isAllowed(allowedFreqChar, freqChar)) {\\n                count+= str.length();\\n            }\\n        }\\n        \\n        return count;\\n    }\\n    \\n    private boolean isAllowed(int allowedFreqChar[], int freqChar[]){\\n        for(int i=0;i<allowedFreqChar.length;i++){\\n            if(allowedFreqChar[i] - freqChar[i] < 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n    \\n    private int[] getFreq(String chars){\\n        int freq[] = new int[26];\\n        for(char c : chars.toCharArray()){\\n            freq[c - \\'a\\']++;\\n        }\\n        return freq;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        \\n        int allowedFreqChar[] = getFreq(chars);\\n        int count =0 ;\\n        for(String str : words){\\n            int freqChar[] = getFreq(str);\\n            if(isAllowed(allowedFreqChar, freqChar)) {\\n                count+= str.length();\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1951603,
                "title": "python-beats-90-using-dictionary",
                "content": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res=0\\n        dic=defaultdict(int)\\n        for c in chars:\\n            dic[c]+=1\\n        for w in words:\\n            if all(w.count(c)<=dic[c] for c in w):\\n                res+=len(w)\\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nfrom collections import defaultdict\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        res=0\\n        dic=defaultdict(int)\\n        for c in chars:\\n            dic[c]+=1\\n        for w in words:\\n            if all(w.count(c)<=dic[c] for c in w):\\n                res+=len(w)\\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1943305,
                "title": "java-faster-than-94-7-frequency-array-easier-to-code-than-map-in-java",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int len = 0;\\n        \\n        // freq\\n        int[] f = new int[26];\\n        for(int i = 0; i < chars.length(); i++){\\n            f[chars.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        // check each word\\n        for(String word : words){\\n            if(check(word, f)) len += word.length();\\n        }\\n        return len;\\n    }\\n    \\n    private boolean check(String word, int[] f){\\n        int[] w = new int[26];\\n        for(int i = 0; i < word.length(); i++){\\n            w[word.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        for(int i = 0; i < 26; i++){\\n            if(f[i] - w[i] < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int len = 0;\\n        \\n        // freq\\n        int[] f = new int[26];\\n        for(int i = 0; i < chars.length(); i++){\\n            f[chars.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        // check each word\\n        for(String word : words){\\n            if(check(word, f)) len += word.length();\\n        }\\n        return len;\\n    }\\n    \\n    private boolean check(String word, int[] f){\\n        int[] w = new int[26];\\n        for(int i = 0; i < word.length(); i++){\\n            w[word.charAt(i) - \\'a\\']++;\\n        }\\n        \\n        for(int i = 0; i < 26; i++){\\n            if(f[i] - w[i] < 0){\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1940107,
                "title": "easiest-hashmap-solution-using-java",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) \\n    {\\n        int count=0;\\n        HashMap<Character,Integer> hmap=new HashMap<>();\\n        for(char i:chars.toCharArray())\\n            hmap.put(i,hmap.getOrDefault(i,0)+1);\\n        for(String str:words)\\n        {\\n            int flag=0;\\n            HashMap<Character,Integer> hmap2=new HashMap<>(hmap);\\n            for(char ch:str.toCharArray())\\n            {\\n                hmap2.put(ch,hmap2.getOrDefault(ch,0)-1);\\n                if(!chars.contains(\"\"+ch) || hmap2.get(ch)==-1)\\n                {\\n                    flag=-1;\\n                    break;\\n                }\\n            }\\n            if(flag==0)\\n                count+=str.length();\\n        }\\n        return count;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Array"
                ],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) \\n    {\\n        int count=0;\\n        HashMap<Character,Integer> hmap=new HashMap<>();\\n        for(char i:chars.toCharArray())\\n            hmap.put(i,hmap.getOrDefault(i,0)+1);\\n        for(String str:words)\\n        {\\n            int flag=0;\\n            HashMap<Character,Integer> hmap2=new HashMap<>(hmap);\\n            for(char ch:str.toCharArray())\\n            {\\n                hmap2.put(ch,hmap2.getOrDefault(ch,0)-1);\\n                if(!chars.contains(\"\"+ch) || hmap2.get(ch)==-1)\\n                {\\n                    flag=-1;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1925256,
                "title": "simple-java-solution-using-map",
                "content": "\\n```\\n  Map<Character,Integer> mapMain= new HashMap<>();\\n\\n        int result=0;\\n        for (int i = 0; i < chars.length(); i++) {\\n            char  ch=chars.charAt(i);\\n            int count=mapMain.getOrDefault(ch,0);\\n            mapMain.put(ch,++count);\\n        }\\n        for (String wo:words){\\n            Map<Character,Integer> map= new HashMap<>(mapMain);\\n            boolean possible=true;\\n            for (int i = 0; i < wo.length(); i++) {\\n                char ch=wo.charAt(i);\\n                int count=map.getOrDefault(ch,0);\\n                if (count>0) {\\n                    map.put(ch, --count);\\n                }else\\n                {\\n                    System.out.println(\"This word cant be formed \"+wo);\\n                    possible=false;\\n                    break;\\n                }\\n            }\\n            if (possible) result+=wo.length();\\n        }\\n        return result;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n  Map<Character,Integer> mapMain= new HashMap<>();\\n\\n        int result=0;\\n        for (int i = 0; i < chars.length(); i++) {\\n            char  ch=chars.charAt(i);\\n            int count=mapMain.getOrDefault(ch,0);\\n            mapMain.put(ch,++count);\\n        }\\n        for (String wo:words){\\n            Map<Character,Integer> map= new HashMap<>(mapMain);\\n            boolean possible=true;\\n            for (int i = 0; i < wo.length(); i++) {\\n                char ch=wo.charAt(i);\\n                int count=map.getOrDefault(ch,0);\\n                if (count>0) {\\n                    map.put(ch, --count);\\n                }else\\n                {\\n                    System.out.println(\"This word cant be formed \"+wo);\\n                    possible=false;\\n                    break;\\n                }\\n            }\\n            if (possible) result+=wo.length();\\n        }\\n        return result;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1918471,
                "title": "python-one-liner-counter",
                "content": "**Solution**:\\n```\\nclass Solution:\\n    def countCharacters(self, words, chars):\\n        d, total = Counter(chars), 0\\n        for w in words: total += self.helper(w, d.copy())\\n        return total\\n    \\n    def helper(self, w, d):\\n        for c in w:\\n            if c not in d or d[c] == 0: return 0\\n            else: d[c]-=1\\n        return len(w)\\n```\\n\\n**One-Liner**:\\n```\\nclass Solution:\\n    def countCharacters(self, words, chars):\\n        return (lambda c:sum(len(x) for x in words if Counter(x) < c))(Counter(chars))\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words, chars):\\n        d, total = Counter(chars), 0\\n        for w in words: total += self.helper(w, d.copy())\\n        return total\\n    \\n    def helper(self, w, d):\\n        for c in w:\\n            if c not in d or d[c] == 0: return 0\\n            else: d[c]-=1\\n        return len(w)\\n```\n```\\nclass Solution:\\n    def countCharacters(self, words, chars):\\n        return (lambda c:sum(len(x) for x in words if Counter(x) < c))(Counter(chars))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1900441,
                "title": "python-idk-what-to-even-calls-this",
                "content": "First I made a helper function that would just check if word had the same characters as chars. Then I did for loop checking.\\nIf anyone knows how to make my helper function better, PLEASE, let me know.\\n```\\nfrom collections import Counter\\nclass Solution:\\n    def isinchars(self, word, chars):\\n        word = collections.Counter(word)\\n        chars = collections.Counter(chars)\\n        for letter in word:\\n            try:\\n                if word.get(letter) > chars.get(letter):\\n                    return False\\n            except:\\n                return False\\n        return True\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        count = 0\\n        for word in words:\\n            if self.isinchars(word, chars):\\n                count += len(word)\\n        \\n        return count\\n\\t\\t\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nfrom collections import Counter\\nclass Solution:\\n    def isinchars(self, word, chars):\\n        word = collections.Counter(word)\\n        chars = collections.Counter(chars)\\n        for letter in word:\\n            try:\\n                if word.get(letter) > chars.get(letter):\\n                    return False\\n            except:\\n                return False\\n        return True\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        count = 0\\n        for word in words:\\n            if self.isinchars(word, chars):\\n                count += len(word)\\n        \\n        return count\\n\\t\\t\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1863466,
                "title": "c-2-hashing-solutions-hashmaps-and-char-vector",
                "content": "**Solution 1: Using char vector**\\n```\\nclass Solution {\\npublic:\\n    bool func(string s, vector<int>mp){\\n        for(char x: s){\\n            if(mp[x-\\'a\\']!=0){\\n                mp[x-\\'a\\']--;\\n            }\\n            \\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans = 0;\\n        vector<int>mp(26,0);\\n        for(char x: chars){\\n            mp[x-\\'a\\']++;\\n        }\\n        \\n        for(int i = 0; i<words.size(); i++){\\n            if(func(words[i], mp)){\\n                ans+=(words[i].size());\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\\n\\n**Solution 2: Using Hashmaps**\\n```\\nclass Solution {\\npublic:\\n    \\n    bool func(string word, unordered_map<char,int>mp){\\n        for(char x: word){\\n            if(mp.find(x) != mp.end()){\\n                mp[x]--;\\n                if(mp[x] == 0){\\n                    mp.erase(x);\\n                }\\n            }\\n            \\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans = 0;\\n        unordered_map<char,int>mp;\\n        for(char x: chars){\\n            mp[x]++;\\n        }\\n        \\n        for(int i = 0; i<words.size(); i++){\\n            if(func(words[i], mp)){\\n                ans+=(words[i].size());\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    bool func(string s, vector<int>mp){\\n        for(char x: s){\\n            if(mp[x-\\'a\\']!=0){\\n                mp[x-\\'a\\']--;\\n            }\\n            \\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans = 0;\\n        vector<int>mp(26,0);\\n        for(char x: chars){\\n            mp[x-\\'a\\']++;\\n        }\\n        \\n        for(int i = 0; i<words.size(); i++){\\n            if(func(words[i], mp)){\\n                ans+=(words[i].size());\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    \\n    bool func(string word, unordered_map<char,int>mp){\\n        for(char x: word){\\n            if(mp.find(x) != mp.end()){\\n                mp[x]--;\\n                if(mp[x] == 0){\\n                    mp.erase(x);\\n                }\\n            }\\n            \\n            else{\\n                return false;\\n            }\\n        }\\n        \\n        return true;\\n    }\\n    \\n    int countCharacters(vector<string>& words, string chars) {\\n        int ans = 0;\\n        unordered_map<char,int>mp;\\n        for(char x: chars){\\n            mp[x]++;\\n        }\\n        \\n        for(int i = 0; i<words.size(); i++){\\n            if(func(words[i], mp)){\\n                ans+=(words[i].size());\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1855350,
                "title": "java-easy-solution",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int freq[]=new int[26];\\n        int totalLength=0;\\n        for(char ch:chars.toCharArray())\\n        {\\n            freq[ch-\\'a\\']++;\\n        }\\n        for(String word:words)\\n        {\\n            int freq1[]=new int[26];\\n            int flag=1;\\n            for(char ch: word.toCharArray())\\n            {\\n                freq1[ch-\\'a\\']++;\\n                if(freq1[ch-\\'a\\']>freq[ch-\\'a\\'])\\n                {\\n                    flag=0;\\n                }\\n            }\\n            if(flag==1)\\n                totalLength+=word.length();\\n        }\\n        return totalLength;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int freq[]=new int[26];\\n        int totalLength=0;\\n        for(char ch:chars.toCharArray())\\n        {\\n            freq[ch-\\'a\\']++;\\n        }\\n        for(String word:words)\\n        {\\n            int freq1[]=new int[26];\\n            int flag=1;\\n            for(char ch: word.toCharArray())\\n            {\\n                freq1[ch-\\'a\\']++;\\n                if(freq1[ch-\\'a\\']>freq[ch-\\'a\\'])\\n                {\\n                    flag=0;\\n                }\\n            }\\n            if(flag==1)\\n                totalLength+=word.length();\\n        }\\n        return totalLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1806893,
                "title": "python3-solution",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c = list(chars)\\n        l,ans = 0,0\\n        for i in words:\\n            for j in list(i):\\n                if j in c:\\n                    l += 1\\n                    c.remove(j)\\n            if l == len(i):\\n                ans += len(i)\\n            c = list(chars)\\n            l = 0\\n        return (ans)\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c = list(chars)\\n        l,ans = 0,0\\n        for i in words:\\n            for j in list(i):\\n                if j in c:\\n                    l += 1\\n                    c.remove(j)\\n            if l == len(i):\\n                ans += len(i)\\n            c = list(chars)\\n            l = 0\\n        return (ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1791465,
                "title": "java-easy-to-understand-code-o-n-with-explanation",
                "content": "1. First of all we have to store the occurance of every char of the given array .\\n2. Second we have to store each and every char count of all string given as array .\\n3. Now as we have both count we can start comparing.\\n4. If any case we find we have greater count for the string arr[] than the string given; we will not include its length, else we will include the length of its.\\n5. return the total length.\\n\\n```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count[]=new int[27];\\n        for(int i=0;i<chars.length();i++)\\n            count[chars.charAt(i) - 96]++;\\n        int arr[]=new int[27];\\n        int ans=0;\\n        for(int i=0;i<words.length;i++){\\n            Arrays.fill(arr,0);\\n            for(int j=0;j<words[i].length();j++){\\n                arr[words[i].charAt(j)-96]++;\\n            }\\n            boolean add=true;\\n            for(int k=1;k<27;k++){\\n                if(arr[k]>0 && arr[k]>count[k]){\\n                    add=false;\\n                    break;\\n                }\\n            }\\n            if(add)ans+=words[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int count[]=new int[27];\\n        for(int i=0;i<chars.length();i++)\\n            count[chars.charAt(i) - 96]++;\\n        int arr[]=new int[27];\\n        int ans=0;\\n        for(int i=0;i<words.length;i++){\\n            Arrays.fill(arr,0);\\n            for(int j=0;j<words[i].length();j++){\\n                arr[words[i].charAt(j)-96]++;\\n            }\\n            boolean add=true;\\n            for(int k=1;k<27;k++){\\n                if(arr[k]>0 && arr[k]>count[k]){\\n                    add=false;\\n                    break;\\n                }\\n            }\\n            if(add)ans+=words[i].length();\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1763598,
                "title": "java-solution-using-two-pointer-without-using-hash-map",
                "content": "```\\nclass Solution{\\n    public int countCharacters(String[] words, String chars) {\\n        char ch []=chars.toCharArray();\\n        Arrays.sort(ch);\\n        int ans = 0;\\n       for(int i=0;i<=words.length-1;i++) \\n       {\\n            char ch1[]=words[i].toCharArray();\\n           Arrays.sort(ch1);\\n           int l1=0;\\n           int l=0;\\n\\n           while(l < ch.length && l1 < ch1.length)\\n           {\\n                \\n               if(ch1[l1] == ch[l]){\\n                   l++;\\n                   l1++;\\n               }\\n               else\\n               {\\n                   l++;                   \\n               }\\n                            \\n           }\\n           \\n           if(l1 == ch1.length)\\n                ans += l1;\\n       }\\n        \\n        return ans;\\n        \\n  }\\n}\\n```",
                "solutionTags": [
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution{\\n    public int countCharacters(String[] words, String chars) {\\n        char ch []=chars.toCharArray();\\n        Arrays.sort(ch);\\n        int ans = 0;\\n       for(int i=0;i<=words.length-1;i++) \\n       {\\n            char ch1[]=words[i].toCharArray();\\n           Arrays.sort(ch1);\\n           int l1=0;\\n           int l=0;\\n\\n           while(l < ch.length && l1 < ch1.length)\\n           {\\n                \\n               if(ch1[l1] == ch[l]){\\n                   l++;\\n                   l1++;\\n               }\\n               else\\n               {\\n                   l++;                   \\n               }\\n                            \\n           }\\n           \\n           if(l1 == ch1.length)\\n                ans += l1;\\n       }\\n        \\n        return ans;\\n        \\n  }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1737569,
                "title": "very-simple-python-solution",
                "content": "We need to solve the problem for each string in words independently and check how many times each character occurs in string chars.\\nThis can be coded as below:\\n\\nclass Solution:\\n\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c=0\\n        res=0\\n        char1=chars\\n        \\n        for ele in words:\\n            c=0\\n            char1=chars\\n            \\n            for i in ele:\\n                if i in char1:\\n                    c+=1\\n                    char1=char1.replace(i,\" \",1)\\n                \\n            if c==len(ele):\\n                res+=len(ele)\\n        return res\\n\\n",
                "solutionTags": [
                    "Python",
                    "String"
                ],
                "code": "We need to solve the problem for each string in words independently and check how many times each character occurs in string chars.\\nThis can be coded as below:\\n\\nclass Solution:\\n\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        c=0\\n        res=0\\n        char1=chars\\n        \\n        for ele in words:\\n            c=0\\n            char1=chars\\n            \\n            for i in ele:\\n                if i in char1:\\n                    c+=1\\n                    char1=char1.replace(i,\" \",1)\\n                \\n            if c==len(ele):\\n                res+=len(ele)\\n        return res\\n\\n",
                "codeTag": "Java"
            },
            {
                "id": 1723724,
                "title": "java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        HashMap<Character,Integer> hmap=new HashMap<>();\\n        int length=0;\\n        for(int i=0;i<chars.length();i++)\\n            hmap.put(chars.charAt(i),hmap.getOrDefault(chars.charAt(i),0)+1);\\n        for(int j=0;j<words.length;j++){\\n            int count=0;\\n            HashMap<Character,Integer> map=new HashMap<>();\\n            String ele=words[j];\\n            for(int k=0;k<ele.length();k++)\\n                map.put(ele.charAt(k),map.getOrDefault(ele.charAt(k),0)+1);\\n            for(int l=0;l<ele.length();l++){\\n                char ch=ele.charAt(l);\\n                    if(hmap.containsKey(ch) && hmap.get(ch)>=map.get(ch))\\n                        count++;\\n            }\\n            if(count==ele.length()){\\n                length += ele.length();\\n            }\\n        }\\n        return length;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        HashMap<Character,Integer> hmap=new HashMap<>();\\n        int length=0;\\n        for(int i=0;i<chars.length();i++)\\n            hmap.put(chars.charAt(i),hmap.getOrDefault(chars.charAt(i),0)+1);\\n        for(int j=0;j<words.length;j++){\\n            int count=0;\\n            HashMap<Character,Integer> map=new HashMap<>();\\n            String ele=words[j];\\n            for(int k=0;k<ele.length();k++)\\n                map.put(ele.charAt(k),map.getOrDefault(ele.charAt(k),0)+1);\\n            for(int l=0;l<ele.length();l++){\\n                char ch=ele.charAt(l);\\n                    if(hmap.containsKey(ch) && hmap.get(ch)>=map.get(ch))\\n                        count++;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1645215,
                "title": "python-simple-solution-by-counting-characters-beats-68-run-time",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        count = 0\\n        chars = list(chars)\\n        \\n        for word in words:\\n            temp = []\\n            chars_pool = chars[:]\\n            for char in word:\\n                if char not in chars_pool:\\n                    break\\n                else:\\n                    temp.append(char)\\n                    chars_pool.remove(char)\\n            temp = \\'\\'.join(temp)\\n            if temp == word:\\n                count += len(word)\\n                    \\n        return count\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        count = 0\\n        chars = list(chars)\\n        \\n        for word in words:\\n            temp = []\\n            chars_pool = chars[:]\\n            for char in word:\\n                if char not in chars_pool:\\n                    break\\n                else:\\n                    temp.append(char)\\n                    chars_pool.remove(char)\\n            temp = \\'\\'.join(temp)\\n            if temp == word:\\n                count += len(word)\\n                    \\n        return count\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1618538,
                "title": "my-java-solution-using-arrays",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        if(words.length == 0)\\n            return 0;\\n        \\n        int res = 0;\\n        // Store the count of all character occurence in chCount array\\n        int[] chCount = new int[26];\\n        \\n        for(char ch : chars.toCharArray())\\n            chCount[ch - \\'a\\']++;\\n\\n        \\n        for(String word : words){\\n            //Create a clone array to be used in each word check\\n            int[] tempCount = chCount.clone();\\n            boolean isValid = true;\\n            for(char ch : word.toCharArray()){\\n                tempCount[ch - \\'a\\']--;\\n                if(tempCount[ch - \\'a\\'] < 0){\\n                    isValid = false;\\n                    break;\\n                }\\n            }\\n            if(isValid)\\n                res+=word.length();\\n        }\\n        return res;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        if(words.length == 0)\\n            return 0;\\n        \\n        int res = 0;\\n        // Store the count of all character occurence in chCount array\\n        int[] chCount = new int[26];\\n        \\n        for(char ch : chars.toCharArray())\\n            chCount[ch - \\'a\\']++;\\n\\n        \\n        for(String word : words){\\n            //Create a clone array to be used in each word check\\n            int[] tempCount = chCount.clone();\\n            boolean isValid = true;\\n            for(char ch : word.toCharArray()){\\n                tempCount[ch - \\'a\\']--;\\n                if(tempCount[ch - \\'a\\'] < 0){\\n                    isValid = false;\\n                    break;\\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1587765,
                "title": "java-track-count-no-hashmap",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int map[] = new int[26], res = 0;\\n        for (char c: chars.toCharArray())   map[c - \\'a\\']++;\\n        for (String word: words) {\\n            int[] lmap = map.clone();\\n            boolean flag = true;\\n            for (char ch: word.toCharArray()) {\\n                if (lmap[ch -\\'a\\'] == 0) {\\n                    flag = false;\\n                    break;\\n                } else  lmap[ch -\\'a\\']--;\\n            }\\n            if (flag) res+=word.length();\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int map[] = new int[26], res = 0;\\n        for (char c: chars.toCharArray())   map[c - \\'a\\']++;\\n        for (String word: words) {\\n            int[] lmap = map.clone();\\n            boolean flag = true;\\n            for (char ch: word.toCharArray()) {\\n                if (lmap[ch -\\'a\\'] == 0) {\\n                    flag = false;\\n                    break;\\n                } else  lmap[ch -\\'a\\']--;\\n            }\\n            if (flag) res+=word.length();\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1537935,
                "title": "java-easy-iterative-98-faster",
                "content": "please upvote if solution helps.\\n\\n````\\n/** we would be using a map to store character count in chars,\\nand then comparing that count with each individual string in array.**/\\n\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int []letters = new int[26];\\n        for(int i=0;i<chars.length();i++){\\n            letters[chars.charAt(i)-\\'a\\']++;\\n        }\\n        \\n        int length=0;\\n        for(String s:words){\\n            int []current= new int[26];\\n            int i=0;\\n            for(i=0;i<s.length();i++){\\n                int cur=s.charAt(i)-\\'a\\';\\n                current[cur]++;\\n                if(current[cur]>letters[cur])\\n                    break;\\n        }\\n            if(i==s.length())\\n                length+=i;\\n        }\\n        return length;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        int []letters = new int[26];\\n        for(int i=0;i<chars.length();i++){\\n            letters[chars.charAt(i)-\\'a\\']++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1523413,
                "title": "java-without-hashmap-and-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        StringBuilder res = new StringBuilder();\\n        \\n        for(String word: words){\\n            int alpha[]= new int [26];\\n            for(int i=0; i<chars.length(); i++){\\n                alpha[chars.charAt(i)-\\'a\\']++;\\n            }\\n            \\n            boolean state=true;\\n            \\n            for(int i=0; i<word.length(); i++){\\n                alpha[word.charAt(i)-\\'a\\']--;\\n                if(alpha[word.charAt(i)-\\'a\\']<0){\\n                    state=false;\\n                    break;\\n                }\\n            }\\n            \\n            if(state){\\n                res.append(word);\\n            }\\n        }\\n        return res.length();\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int countCharacters(String[] words, String chars) {\\n        StringBuilder res = new StringBuilder();\\n        \\n        for(String word: words){\\n            int alpha[]= new int [26];\\n            for(int i=0; i<chars.length(); i++){\\n                alpha[chars.charAt(i)-\\'a\\']++;\\n            }\\n            \\n            boolean state=true;\\n            \\n            for(int i=0; i<word.length(); i++){\\n                alpha[word.charAt(i)-\\'a\\']--;\\n                if(alpha[word.charAt(i)-\\'a\\']<0){\\n                    state=false;\\n                    break;\\n                }\\n            }\\n            \\n            if(state){\\n                res.append(word);\\n            }\\n        }\\n        return res.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1522599,
                "title": "c-hashmap-runtime-81-ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n\\t// map to store frequencies of each charater in chars, unordered map because they take less time.\\n        unordered_map<char, int> mp;\\n        for(auto c:chars) mp[c]++;\\n\\t\\t// auxillary map because we need to maintain the orginal count of character while manipulating according to the need of the string in words.\\n        unordered_map<char, int> mp1=mp;\\n\\t\\t// flag variable to keep track if we have considered all the element of a particular string in words or not\\n        int ans=0, flag=0;\\n        for(auto s:words){\\n            for(int i=0; i<s.size(); i++){\\n                if(mp1.find(s[i])!=mp1.end() && mp1[s[i]]!=0){\\n                    mp1[s[i]]--;\\n                }\\n                else{\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0) {\\n                ans+=s.size();\\n            }\\n            else flag=0;\\n            mp1=mp;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n\\t// map to store frequencies of each charater in chars, unordered map because they take less time.\\n        unordered_map<char, int> mp;\\n        for(auto c:chars) mp[c]++;\\n\\t\\t// auxillary map because we need to maintain the orginal count of character while manipulating according to the need of the string in words.\\n        unordered_map<char, int> mp1=mp;\\n\\t\\t// flag variable to keep track if we have considered all the element of a particular string in words or not\\n        int ans=0, flag=0;\\n        for(auto s:words){\\n            for(int i=0; i<s.size(); i++){\\n                if(mp1.find(s[i])!=mp1.end() && mp1[s[i]]!=0){\\n                    mp1[s[i]]--;\\n                }\\n                else{\\n                    flag=1;\\n                    break;\\n                }\\n            }\\n            if(flag==0) {\\n                ans+=s.size();\\n            }\\n            else flag=0;\\n            mp1=mp;\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1488071,
                "title": "javascript-fast-solution-with-comments-90ms-run-time",
                "content": "```\\nvar countCharacters = function(words, chars) {\\n    // make a map of the characters and their count\\n    var available = new Map()\\n    var total = 0\\n    // populate the available characters map \\n    for(var i = 0; i < chars.length; ++i){\\n        if (!available.has(chars[i])){\\n            available.set(chars[i], 1)\\n        } else {\\n            available.set(chars[i], available.get(chars[i])+1)\\n        }\\n    }\\n    // iterrate through all the words \\n    for(var word of words){\\n        // if the length of the word is greater then char length then skip\\n      if (word.length > chars.length) continue\\n        // create a map of the current word and a flag to let us know if we should \\n        // commit that to the total \\n        var used = new Map()\\n        var shouldCommit = false\\n        // iterate through every character and add it to the used map \\n        for (var char of word){\\n            // if available has it then add it to used \\n            if (available.has(char) && !used.has(char)){\\n                used.set(char, 1)\\n                shouldCommit = true\\n            } \\n            // if both have it make sure we dont go over the ammount\\n            else if (available.has(char) && used.has(char)){\\n                if (used.get(char) < available.get(char)){\\n                     used.set(char,used.get(char)+1)\\n                    shouldCommit = true\\n            // if we are going over the ammount available then break and dont commit\\n                }else if (used.get(char) >= available.get(char)){\\n                    shouldCommit = false\\n                    break\\n                }\\n           \\n            } \\n            // if available does not have it then break early and dont commit \\n            else {\\n                shouldCommit = false\\n               break\\n            }  \\n\\n        }\\n        // commit because the word can be made\\n        if (shouldCommit == true) total+= word.length\\n    \\n    }\\n    // return the total \\n    return total\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nvar countCharacters = function(words, chars) {\\n    // make a map of the characters and their count\\n    var available = new Map()\\n    var total = 0\\n    // populate the available characters map \\n    for(var i = 0; i < chars.length; ++i){\\n        if (!available.has(chars[i])){\\n            available.set(chars[i], 1)\\n        } else {\\n            available.set(chars[i], available.get(chars[i])+1)\\n        }\\n    }\\n    // iterrate through all the words \\n    for(var word of words){\\n        // if the length of the word is greater then char length then skip\\n      if (word.length > chars.length) continue\\n        // create a map of the current word and a flag to let us know if we should \\n        // commit that to the total \\n        var used = new Map()\\n        var shouldCommit = false\\n        // iterate through every character and add it to the used map \\n        for (var char of word){\\n            // if available has it then add it to used \\n            if (available.has(char) && !used.has(char)){\\n                used.set(char, 1)\\n                shouldCommit = true\\n            } \\n            // if both have it make sure we dont go over the ammount\\n            else if (available.has(char) && used.has(char)){\\n                if (used.get(char) < available.get(char)){\\n                     used.set(char,used.get(char)+1)\\n                    shouldCommit = true\\n            // if we are going over the ammount available then break and dont commit\\n                }else if (used.get(char) >= available.get(char)){\\n                    shouldCommit = false\\n                    break\\n                }\\n           \\n            } \\n            // if available does not have it then break early and dont commit \\n            else {\\n                shouldCommit = false\\n               break\\n            }  \\n\\n        }\\n        // commit because the word can be made\\n        if (shouldCommit == true) total+= word.length\\n    \\n    }\\n    // return the total \\n    return total\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1466100,
                "title": "simple-python-solution",
                "content": "\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        arr=[list(x) for x in words] #making the string into an array to remove elements \\n        sum_array=[] #to store the final length of all the substrings formed\\n        for i in arr:\\n            count=0\\n            f=[char for char in chars]\\n            for j in i:\\n                if j in f:\\n                    f.remove(j)\\n                    count+=1\\n            if count==len(i):\\n                sum_array.append(len(i))\\n        return sum(sum_array)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        arr=[list(x) for x in words] #making the string into an array to remove elements \\n        sum_array=[] #to store the final length of all the substrings formed\\n        for i in arr:\\n            count=0\\n            f=[char for char in chars]\\n            for j in i:\\n                if j in f:\\n                    f.remove(j)\\n                    count+=1\\n            if count==len(i):\\n                sum_array.append(len(i))\\n        return sum(sum_array)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1447254,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        char arr[26] {};\\n        for (const auto c: chars)\\n            ++arr[c - \\'a\\'];\\n        for (const auto &word: words) {\\n            bool can_form = true;\\n            char temp[26] {};\\n            for (auto c: word) {\\n                ++temp[c - \\'a\\'];\\n                if (temp[c - \\'a\\'] > arr[c - \\'a\\']) {\\n                    can_form = false;\\n                    break;\\n                }\\n            }\\n            if (can_form) \\n                sum += word.size();\\n        }\\n        return sum;    \\n    }\\n};\\n```\\nO(n) space and time",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int countCharacters(vector<string>& words, string chars) {\\n        int sum = 0;\\n        char arr[26] {};\\n        for (const auto c: chars)\\n            ++arr[c - \\'a\\'];\\n        for (const auto &word: words) {\\n            bool can_form = true;\\n            char temp[26] {};\\n            for (auto c: word) {\\n                ++temp[c - \\'a\\'];\\n                if (temp[c - \\'a\\'] > arr[c - \\'a\\']) {\\n                    can_form = false;\\n                    break;\\n                }\\n            }\\n            if (can_form) \\n                sum += word.size();\\n        }\\n        return sum;    \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1444762,
                "title": "python-count-char-one-liner",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(map(len, filter(lambda w: Counter(w) & Counter(chars) == Counter(w), words)))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        return sum(map(len, filter(lambda w: Counter(w) & Counter(chars) == Counter(w), words)))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1414168,
                "title": "java-2ms-top-1-explanations",
                "content": "```\\nclass Solution {\\n\\t/**\\n\\t* 1. Parse chars and count how many a,b,c are and store them in an array [26] (a-z)\\n\\t* 2. For each word initialize an empty int[26] and count one letter at a time, storing the result in the new int[].\\n\\t*    If the stored result it > than the chars array for that char, return 0 immediately;\\n\\t*    If each loop runs till the end, return the word length\\n\\t*/\\n    public int countCharacters(String[] words, String chars) {\\n\\t\\tint countWords = 0;\\n        int[] charCount = getCharCount(chars);\\n        for(String word : words) {\\n            countWords += getValidWordLength(word, charCount);\\n        }\\n        return countWords;\\n    }\\n    \\n    private int[] getCharCount(String chars) {\\n        int[] charCount = new int[\\'z\\' - \\'a\\' + 1];\\n        for (int i = 0; i < chars.length(); i++) {\\n            charCount[chars.charAt(i)- \\'a\\']++;\\n        }\\n        return charCount;\\n    }\\n    \\n    private int getValidWordLength(String word, int[] charCount) {\\n        int[] wordChars =  new int[26];\\n        int currentChar;\\n        for (int i = 0; i < word.length(); i++) {\\n            currentChar = word.charAt(i) - \\'a\\';\\n            wordChars[currentChar]++;\\n            // if current word has more letters [i] than the charCount/given dictionary, return 0 immediately\\n\\t\\t\\tif (wordChars[currentChar] > charCount[currentChar]) {\\n                return 0;\\n            }\\n        }\\n        return word.length();\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\t/**\\n\\t* 1. Parse chars and count how many a,b,c are and store them in an array [26] (a-z)\\n\\t* 2. For each word initialize an empty int[26] and count one letter at a time, storing the result in the new int[].\\n\\t*    If the stored result it > than the chars array for that char, return 0 immediately;\\n\\t*    If each loop runs till the end, return the word length\\n\\t*/\\n    public int countCharacters(String[] words, String chars) {\\n\\t\\tint countWords = 0;\\n        int[] charCount = getCharCount(chars);\\n        for(String word : words) {\\n            countWords += getValidWordLength(word, charCount);\\n        }\\n        return countWords;\\n    }\\n    \\n    private int[] getCharCount(String chars) {\\n        int[] charCount = new int[\\'z\\' - \\'a\\' + 1];\\n        for (int i = 0; i < chars.length(); i++) {\\n            charCount[chars.charAt(i)- \\'a\\']++;\\n        }\\n        return charCount;\\n    }\\n    \\n    private int getValidWordLength(String word, int[] charCount) {\\n        int[] wordChars =  new int[26];\\n        int currentChar;\\n        for (int i = 0; i < word.length(); i++) {\\n            currentChar = word.charAt(i) - \\'a\\';\\n            wordChars[currentChar]++;\\n            // if current word has more letters [i] than the charCount/given dictionary, return 0 immediately\\n\\t\\t\\tif (wordChars[currentChar] > charCount[currentChar]) {\\n                return 0;\\n            }\\n        }\\n        return word.length();\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1386031,
                "title": "python3-faster-than-99-94-memory-less-than-79-96",
                "content": "![image](https://assets.leetcode.com/users/images/46eca55e-4222-45ea-bb93-dc76f754e415_1628202673.2343316.png)\\n\\n```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        from collections import Counter\\n\\n        c = Counter(chars)\\n\\n        cnt = 0\\n\\n        for word in words:\\n            good = True\\n            for letter in word:\\n\\n                if word.count(letter) > c[letter]:\\n                    good = False\\n                    break\\n\\n            if good:\\n                cnt += len(word)\\n\\n        return cnt\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        \\n        from collections import Counter\\n\\n        c = Counter(chars)\\n\\n        cnt = 0\\n\\n        for word in words:\\n            good = True\\n            for letter in word:\\n\\n                if word.count(letter) > c[letter]:\\n                    good = False\\n                    break\\n\\n            if good:\\n                cnt += len(word)\\n\\n        return cnt\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1378933,
                "title": "python3-another-simple-solution",
                "content": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        temp_chars=chars\\n        answer=0\\n        num=0\\n        for i in words:\\n            for j in i:\\n                if j in temp_chars:\\n                    num+=1\\n                    temp_chars=temp_chars.replace(j,\\'\\',1) #delete first char in chars\\n            if num==len(i): #chech num of matching is same as length of the target\\n                answer+=num\\n            num=0      \\n            temp_chars=chars\\n        return answer\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        temp_chars=chars\\n        answer=0\\n        num=0\\n        for i in words:\\n            for j in i:\\n                if j in temp_chars:\\n                    num+=1\\n                    temp_chars=temp_chars.replace(j,\\'\\',1) #delete first char in chars\\n            if num==len(i): #chech num of matching is same as length of the target\\n                answer+=num\\n            num=0      \\n            temp_chars=chars\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1348096,
                "title": "java-solution-3ms-faster-than-98",
                "content": "```\\npublic int countCharacters(String[] words, String chars) {\\n        int count=0;\\n        int a[]=new int[27];\\n        Arrays.fill(a,0);\\n        for(char i:chars.toCharArray())\\n        {\\n            a[i-\\'a\\']++;\\n        }\\n        for(int i=0;i<words.length;i++)\\n        {\\n            if(words[i].length()>chars.length())\\n                continue;\\n            int b[]=new int[27];int flag=1;\\n            for(char s:words[i].toCharArray())\\n            {\\n                b[s-\\'a\\']++;\\n                if(b[s-\\'a\\']>a[s-\\'a\\'])\\n                {flag=0; break;}\\n            }\\n            if(flag==1)\\n                count+=words[i].length(); \\n        }\\n        return count;\\n    }",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int countCharacters(String[] words, String chars) {\\n        int count=0;\\n        int a[]=new int[27];\\n        Arrays.fill(a,0);\\n        for(char i:chars.toCharArray())\\n        {\\n            a[i-\\'a\\']++;\\n        }\\n        for(int i=0;i<words.length;i++)\\n        {\\n            if(words[i].length()>chars.length())\\n                continue;\\n            int b[]=new int[27];int flag=1;\\n            for(char s:words[i].toCharArray())\\n            {\\n                b[s-\\'a\\']++;\\n                if(b[s-\\'a\\']>a[s-\\'a\\'])\\n                {flag=0; break;}\\n            }\\n            if(flag==1)\\n                count+=words[i].length(); \\n        }\\n        return count;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1330008,
                "title": "python-solution-with-memory-usage-92-better",
                "content": "```\\nimport copy\\nclass Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        chars_freq = {}\\n        for char in chars:\\n            if (char not in chars_freq):\\n                chars_freq.update({char:0})\\n            chars_freq.update({char:chars_freq.get(char)+1})\\n        length = 0\\n        for word in words:\\n            temp_freq_map = copy.deepcopy(chars_freq)\\n            goodString = True\\n            for char in word:\\n                if (temp_freq_map.get(char) == None or temp_freq_map.get(char) == 0):\\n                    goodString = False\\n                    break\\n                temp_freq_map.update({char:temp_freq_map.get(char) - 1})\\n            if (goodString):\\n                length += len(word)\\n        return length",
                "solutionTags": [],
                "code": "class Solution:\\n    def countCharacters(self, words: List[str], chars: str) -> int:\\n        chars_freq = {}",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568234,
                "content": [
                    {
                        "username": "yoo_hoo",
                        "content": "In explaination is mentioned: \"A string is good if it can be formed by characters from chars (each character can only be used once).\"\\n\\nBut in first example we got output 6 because \"cat\" and \"hat\" can be formed. How  you can form those words from chars \"atach\" if each character can be used only once?"
                    },
                    {
                        "username": "wcchuo",
                        "content": "This problem means that each character in `chars` can only be used once for each word in the `words` array, not once for the entire `words` array. At least it didn't mention it.\n\nIn other words, you should consider `chars` as a pool of letters that gets refilled after forming each word, rather than a pool that needs to last for all the words.\n\nSo, in your example, `chars = \"atach\"` can be used to form the word `\"cat\"` because it has one `'c'`, one `'a'`, and one `'t'`. After this, the `chars` string is \"refilled\", so it can be used again to form the word `\"hat\"` because it also has one `'h'`, one `'a'`, and one `'t'`. This is why the total length is `3 + 3 = 6`. \n\nThe key is that the characters are reused for each word in the `words` array, not across all the words.\n\nThe problem description should be edited \"... (each character can only be used once in each `words` iteration)\""
                    },
                    {
                        "username": "quppiehy",
                        "content": "I\\'m also confused by this"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "facing the same problem here?"
                    },
                    {
                        "username": "Md_Saif",
                        "content": "In this test case   [\\n    \\'dyiclysmffuhibgfvapygkorkqllqlvokosagyelotobicwcmebnpznjbirzrzsrtzjxhsfpiwyfhzyonmuabtlwin\\',\\n    \\'ndqeyhhcquplmznwslewjzuyfgklssvkqxmqjpwhrshycmvrb\\',\\n    \\'ulrrbpspyudncdlbkxkrqpivfftrggemkpyjl\\',\\n    \\'boygirdlggnh\\',\\n    \\'xmqohbyqwagkjzpyawsydmdaattthmuvjbzwpyopyafphx\\',\\n    \\'nulvimegcsiwvhwuiyednoxpugfeimnnyeoczuzxgxbqjvegcxeqnjbwnbvowastqhojepisusvsidhqmszbrnynkyop\\',\\n    \\'hiefuovybkpgzygprmndrkyspoiyapdwkxebgsmodhzpx\\',\\n    \\'juldqdzeskpffaoqcyyxiqqowsalqumddcufhouhrskozhlmobiwzxnhdkidr\\',\\n    \\'lnnvsdcrvzfmrvurucrzlfyigcycffpiuoo\\',\\n    \\'oxgaskztzroxuntiwlfyufddl\\',\\n    \\'tfspedteabxatkaypitjfkhkkigdwdkctqbczcugripkgcyfezpuklfqfcsccboarbfbjfrkxp\\',\\n    \\'qnagrpfzlyrouolqquytwnwnsqnmuzphne\\',\\n    \\'eeilfdaookieawrrbvtnqfzcricvhpiv\\',\\n    \\'sisvsjzyrbdsjcwwygdnxcjhzhsxhpceqz\\',\\n    \\'yhouqhjevqxtecomahbwoptzlkyvjexhzcbccusbjjdgcfzlkoqwiwue\\',\\n    \\'hwxxighzvceaplsycajkhynkhzkwkouszwaiuzqcleyflqrxgjsvlegvupzqijbornbfwpefhxekgpuvgiyeudhncv\\',\\n    \\'cpwcjwgbcquirnsazumgjjcltitmeyfaudbnbqhflvecjsupjmgwfbjo\\',\\n    \\'teyygdmmyadppuopvqdodaczob\\',\\n    \\'qaeowuwqsqffvibrtxnjnzvzuuonrkwpysyxvkijemmpdmtnqxwekbpfzs\\',\\n    \\'qqxpxpmemkldghbmbyxpkwgkaykaerhmwwjonrhcsubchs\\',\\n  ],\\n\\nI am getting 47 here on leetcode but when i run my program in local i am getting 0 which is correct so why this is happening here any guesses ??"
                    },
                    {
                        "username": "Teddy-Lin",
                        "content": "return sum([len(word) for word in words if all(word.count(i) <= chars.count(i) for i in word)])"
                    },
                    {
                        "username": "RyanAura",
                        "content": "Whats the point of putting the solution in the discussion."
                    },
                    {
                        "username": "Rushab11",
                        "content": "\n        \n        int len=0;\n        for(int i=0;i<words.size();i++)\n        {\n           string str=words[i];\n           int c=0;\n           for(int k=0;k<str.length();k++)\n           {\n             if(count(chars.begin(),chars.end(),str[k]))\n             {\n                 c++;\n             }\n           }\n           if(c==str.length())\n           {\n               len+=c;\n              \n           }\n           \n\n        }\n        return len;\n    \n\nWhat's Wrong with this Approach ?? Only 10 Test Case Passed"
                    },
                    {
                        "username": "user6808zB",
                        "content": "The below code works for the test cases but fails on the Final Submission when there is the chars of 50 characters and 70 words more than 40 chars each,. Can anyone please give me a suggestion what to modify in the below code: \n\ndef countCharacters(self, words: List[str], chars: str) -> int:\n\n        cnt=0                                                  #variable to count the total number of characters                               \n\n        for word in words:\n            res=[]                                                    #temp array to track the number of characters for the word\n            for i in range(len(word)): \n                if word[i] in chars:\n                    res.append(word[i])\n            if len(res)==len(word): \n                cnt+=len(res) \n        return cnt"
                    },
                    {
                        "username": "guruhegde777",
                        "content": "You are checking if word[ i ] exists in chars without checking the count.\\nFor example if a word has \\'a\\' 3 times but in chars single \\'a\\' is present, then you can\\'t construct a word which has 3 \\'a\\'s with only one \\'a\\'. Hope you understood.  "
                    }
                ]
            },
            {
                "id": 2009030,
                "content": [
                    {
                        "username": "yoo_hoo",
                        "content": "In explaination is mentioned: \"A string is good if it can be formed by characters from chars (each character can only be used once).\"\\n\\nBut in first example we got output 6 because \"cat\" and \"hat\" can be formed. How  you can form those words from chars \"atach\" if each character can be used only once?"
                    },
                    {
                        "username": "wcchuo",
                        "content": "This problem means that each character in `chars` can only be used once for each word in the `words` array, not once for the entire `words` array. At least it didn't mention it.\n\nIn other words, you should consider `chars` as a pool of letters that gets refilled after forming each word, rather than a pool that needs to last for all the words.\n\nSo, in your example, `chars = \"atach\"` can be used to form the word `\"cat\"` because it has one `'c'`, one `'a'`, and one `'t'`. After this, the `chars` string is \"refilled\", so it can be used again to form the word `\"hat\"` because it also has one `'h'`, one `'a'`, and one `'t'`. This is why the total length is `3 + 3 = 6`. \n\nThe key is that the characters are reused for each word in the `words` array, not across all the words.\n\nThe problem description should be edited \"... (each character can only be used once in each `words` iteration)\""
                    },
                    {
                        "username": "quppiehy",
                        "content": "I\\'m also confused by this"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "facing the same problem here?"
                    },
                    {
                        "username": "Md_Saif",
                        "content": "In this test case   [\\n    \\'dyiclysmffuhibgfvapygkorkqllqlvokosagyelotobicwcmebnpznjbirzrzsrtzjxhsfpiwyfhzyonmuabtlwin\\',\\n    \\'ndqeyhhcquplmznwslewjzuyfgklssvkqxmqjpwhrshycmvrb\\',\\n    \\'ulrrbpspyudncdlbkxkrqpivfftrggemkpyjl\\',\\n    \\'boygirdlggnh\\',\\n    \\'xmqohbyqwagkjzpyawsydmdaattthmuvjbzwpyopyafphx\\',\\n    \\'nulvimegcsiwvhwuiyednoxpugfeimnnyeoczuzxgxbqjvegcxeqnjbwnbvowastqhojepisusvsidhqmszbrnynkyop\\',\\n    \\'hiefuovybkpgzygprmndrkyspoiyapdwkxebgsmodhzpx\\',\\n    \\'juldqdzeskpffaoqcyyxiqqowsalqumddcufhouhrskozhlmobiwzxnhdkidr\\',\\n    \\'lnnvsdcrvzfmrvurucrzlfyigcycffpiuoo\\',\\n    \\'oxgaskztzroxuntiwlfyufddl\\',\\n    \\'tfspedteabxatkaypitjfkhkkigdwdkctqbczcugripkgcyfezpuklfqfcsccboarbfbjfrkxp\\',\\n    \\'qnagrpfzlyrouolqquytwnwnsqnmuzphne\\',\\n    \\'eeilfdaookieawrrbvtnqfzcricvhpiv\\',\\n    \\'sisvsjzyrbdsjcwwygdnxcjhzhsxhpceqz\\',\\n    \\'yhouqhjevqxtecomahbwoptzlkyvjexhzcbccusbjjdgcfzlkoqwiwue\\',\\n    \\'hwxxighzvceaplsycajkhynkhzkwkouszwaiuzqcleyflqrxgjsvlegvupzqijbornbfwpefhxekgpuvgiyeudhncv\\',\\n    \\'cpwcjwgbcquirnsazumgjjcltitmeyfaudbnbqhflvecjsupjmgwfbjo\\',\\n    \\'teyygdmmyadppuopvqdodaczob\\',\\n    \\'qaeowuwqsqffvibrtxnjnzvzuuonrkwpysyxvkijemmpdmtnqxwekbpfzs\\',\\n    \\'qqxpxpmemkldghbmbyxpkwgkaykaerhmwwjonrhcsubchs\\',\\n  ],\\n\\nI am getting 47 here on leetcode but when i run my program in local i am getting 0 which is correct so why this is happening here any guesses ??"
                    },
                    {
                        "username": "Teddy-Lin",
                        "content": "return sum([len(word) for word in words if all(word.count(i) <= chars.count(i) for i in word)])"
                    },
                    {
                        "username": "RyanAura",
                        "content": "Whats the point of putting the solution in the discussion."
                    },
                    {
                        "username": "Rushab11",
                        "content": "\n        \n        int len=0;\n        for(int i=0;i<words.size();i++)\n        {\n           string str=words[i];\n           int c=0;\n           for(int k=0;k<str.length();k++)\n           {\n             if(count(chars.begin(),chars.end(),str[k]))\n             {\n                 c++;\n             }\n           }\n           if(c==str.length())\n           {\n               len+=c;\n              \n           }\n           \n\n        }\n        return len;\n    \n\nWhat's Wrong with this Approach ?? Only 10 Test Case Passed"
                    },
                    {
                        "username": "user6808zB",
                        "content": "The below code works for the test cases but fails on the Final Submission when there is the chars of 50 characters and 70 words more than 40 chars each,. Can anyone please give me a suggestion what to modify in the below code: \n\ndef countCharacters(self, words: List[str], chars: str) -> int:\n\n        cnt=0                                                  #variable to count the total number of characters                               \n\n        for word in words:\n            res=[]                                                    #temp array to track the number of characters for the word\n            for i in range(len(word)): \n                if word[i] in chars:\n                    res.append(word[i])\n            if len(res)==len(word): \n                cnt+=len(res) \n        return cnt"
                    },
                    {
                        "username": "guruhegde777",
                        "content": "You are checking if word[ i ] exists in chars without checking the count.\\nFor example if a word has \\'a\\' 3 times but in chars single \\'a\\' is present, then you can\\'t construct a word which has 3 \\'a\\'s with only one \\'a\\'. Hope you understood.  "
                    }
                ]
            },
            {
                "id": 1574699,
                "content": [
                    {
                        "username": "yoo_hoo",
                        "content": "In explaination is mentioned: \"A string is good if it can be formed by characters from chars (each character can only be used once).\"\\n\\nBut in first example we got output 6 because \"cat\" and \"hat\" can be formed. How  you can form those words from chars \"atach\" if each character can be used only once?"
                    },
                    {
                        "username": "wcchuo",
                        "content": "This problem means that each character in `chars` can only be used once for each word in the `words` array, not once for the entire `words` array. At least it didn't mention it.\n\nIn other words, you should consider `chars` as a pool of letters that gets refilled after forming each word, rather than a pool that needs to last for all the words.\n\nSo, in your example, `chars = \"atach\"` can be used to form the word `\"cat\"` because it has one `'c'`, one `'a'`, and one `'t'`. After this, the `chars` string is \"refilled\", so it can be used again to form the word `\"hat\"` because it also has one `'h'`, one `'a'`, and one `'t'`. This is why the total length is `3 + 3 = 6`. \n\nThe key is that the characters are reused for each word in the `words` array, not across all the words.\n\nThe problem description should be edited \"... (each character can only be used once in each `words` iteration)\""
                    },
                    {
                        "username": "quppiehy",
                        "content": "I\\'m also confused by this"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "facing the same problem here?"
                    },
                    {
                        "username": "Md_Saif",
                        "content": "In this test case   [\\n    \\'dyiclysmffuhibgfvapygkorkqllqlvokosagyelotobicwcmebnpznjbirzrzsrtzjxhsfpiwyfhzyonmuabtlwin\\',\\n    \\'ndqeyhhcquplmznwslewjzuyfgklssvkqxmqjpwhrshycmvrb\\',\\n    \\'ulrrbpspyudncdlbkxkrqpivfftrggemkpyjl\\',\\n    \\'boygirdlggnh\\',\\n    \\'xmqohbyqwagkjzpyawsydmdaattthmuvjbzwpyopyafphx\\',\\n    \\'nulvimegcsiwvhwuiyednoxpugfeimnnyeoczuzxgxbqjvegcxeqnjbwnbvowastqhojepisusvsidhqmszbrnynkyop\\',\\n    \\'hiefuovybkpgzygprmndrkyspoiyapdwkxebgsmodhzpx\\',\\n    \\'juldqdzeskpffaoqcyyxiqqowsalqumddcufhouhrskozhlmobiwzxnhdkidr\\',\\n    \\'lnnvsdcrvzfmrvurucrzlfyigcycffpiuoo\\',\\n    \\'oxgaskztzroxuntiwlfyufddl\\',\\n    \\'tfspedteabxatkaypitjfkhkkigdwdkctqbczcugripkgcyfezpuklfqfcsccboarbfbjfrkxp\\',\\n    \\'qnagrpfzlyrouolqquytwnwnsqnmuzphne\\',\\n    \\'eeilfdaookieawrrbvtnqfzcricvhpiv\\',\\n    \\'sisvsjzyrbdsjcwwygdnxcjhzhsxhpceqz\\',\\n    \\'yhouqhjevqxtecomahbwoptzlkyvjexhzcbccusbjjdgcfzlkoqwiwue\\',\\n    \\'hwxxighzvceaplsycajkhynkhzkwkouszwaiuzqcleyflqrxgjsvlegvupzqijbornbfwpefhxekgpuvgiyeudhncv\\',\\n    \\'cpwcjwgbcquirnsazumgjjcltitmeyfaudbnbqhflvecjsupjmgwfbjo\\',\\n    \\'teyygdmmyadppuopvqdodaczob\\',\\n    \\'qaeowuwqsqffvibrtxnjnzvzuuonrkwpysyxvkijemmpdmtnqxwekbpfzs\\',\\n    \\'qqxpxpmemkldghbmbyxpkwgkaykaerhmwwjonrhcsubchs\\',\\n  ],\\n\\nI am getting 47 here on leetcode but when i run my program in local i am getting 0 which is correct so why this is happening here any guesses ??"
                    },
                    {
                        "username": "Teddy-Lin",
                        "content": "return sum([len(word) for word in words if all(word.count(i) <= chars.count(i) for i in word)])"
                    },
                    {
                        "username": "RyanAura",
                        "content": "Whats the point of putting the solution in the discussion."
                    },
                    {
                        "username": "Rushab11",
                        "content": "\n        \n        int len=0;\n        for(int i=0;i<words.size();i++)\n        {\n           string str=words[i];\n           int c=0;\n           for(int k=0;k<str.length();k++)\n           {\n             if(count(chars.begin(),chars.end(),str[k]))\n             {\n                 c++;\n             }\n           }\n           if(c==str.length())\n           {\n               len+=c;\n              \n           }\n           \n\n        }\n        return len;\n    \n\nWhat's Wrong with this Approach ?? Only 10 Test Case Passed"
                    },
                    {
                        "username": "user6808zB",
                        "content": "The below code works for the test cases but fails on the Final Submission when there is the chars of 50 characters and 70 words more than 40 chars each,. Can anyone please give me a suggestion what to modify in the below code: \n\ndef countCharacters(self, words: List[str], chars: str) -> int:\n\n        cnt=0                                                  #variable to count the total number of characters                               \n\n        for word in words:\n            res=[]                                                    #temp array to track the number of characters for the word\n            for i in range(len(word)): \n                if word[i] in chars:\n                    res.append(word[i])\n            if len(res)==len(word): \n                cnt+=len(res) \n        return cnt"
                    },
                    {
                        "username": "guruhegde777",
                        "content": "You are checking if word[ i ] exists in chars without checking the count.\\nFor example if a word has \\'a\\' 3 times but in chars single \\'a\\' is present, then you can\\'t construct a word which has 3 \\'a\\'s with only one \\'a\\'. Hope you understood.  "
                    }
                ]
            },
            {
                "id": 1983369,
                "content": [
                    {
                        "username": "yoo_hoo",
                        "content": "In explaination is mentioned: \"A string is good if it can be formed by characters from chars (each character can only be used once).\"\\n\\nBut in first example we got output 6 because \"cat\" and \"hat\" can be formed. How  you can form those words from chars \"atach\" if each character can be used only once?"
                    },
                    {
                        "username": "wcchuo",
                        "content": "This problem means that each character in `chars` can only be used once for each word in the `words` array, not once for the entire `words` array. At least it didn't mention it.\n\nIn other words, you should consider `chars` as a pool of letters that gets refilled after forming each word, rather than a pool that needs to last for all the words.\n\nSo, in your example, `chars = \"atach\"` can be used to form the word `\"cat\"` because it has one `'c'`, one `'a'`, and one `'t'`. After this, the `chars` string is \"refilled\", so it can be used again to form the word `\"hat\"` because it also has one `'h'`, one `'a'`, and one `'t'`. This is why the total length is `3 + 3 = 6`. \n\nThe key is that the characters are reused for each word in the `words` array, not across all the words.\n\nThe problem description should be edited \"... (each character can only be used once in each `words` iteration)\""
                    },
                    {
                        "username": "quppiehy",
                        "content": "I\\'m also confused by this"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "facing the same problem here?"
                    },
                    {
                        "username": "Md_Saif",
                        "content": "In this test case   [\\n    \\'dyiclysmffuhibgfvapygkorkqllqlvokosagyelotobicwcmebnpznjbirzrzsrtzjxhsfpiwyfhzyonmuabtlwin\\',\\n    \\'ndqeyhhcquplmznwslewjzuyfgklssvkqxmqjpwhrshycmvrb\\',\\n    \\'ulrrbpspyudncdlbkxkrqpivfftrggemkpyjl\\',\\n    \\'boygirdlggnh\\',\\n    \\'xmqohbyqwagkjzpyawsydmdaattthmuvjbzwpyopyafphx\\',\\n    \\'nulvimegcsiwvhwuiyednoxpugfeimnnyeoczuzxgxbqjvegcxeqnjbwnbvowastqhojepisusvsidhqmszbrnynkyop\\',\\n    \\'hiefuovybkpgzygprmndrkyspoiyapdwkxebgsmodhzpx\\',\\n    \\'juldqdzeskpffaoqcyyxiqqowsalqumddcufhouhrskozhlmobiwzxnhdkidr\\',\\n    \\'lnnvsdcrvzfmrvurucrzlfyigcycffpiuoo\\',\\n    \\'oxgaskztzroxuntiwlfyufddl\\',\\n    \\'tfspedteabxatkaypitjfkhkkigdwdkctqbczcugripkgcyfezpuklfqfcsccboarbfbjfrkxp\\',\\n    \\'qnagrpfzlyrouolqquytwnwnsqnmuzphne\\',\\n    \\'eeilfdaookieawrrbvtnqfzcricvhpiv\\',\\n    \\'sisvsjzyrbdsjcwwygdnxcjhzhsxhpceqz\\',\\n    \\'yhouqhjevqxtecomahbwoptzlkyvjexhzcbccusbjjdgcfzlkoqwiwue\\',\\n    \\'hwxxighzvceaplsycajkhynkhzkwkouszwaiuzqcleyflqrxgjsvlegvupzqijbornbfwpefhxekgpuvgiyeudhncv\\',\\n    \\'cpwcjwgbcquirnsazumgjjcltitmeyfaudbnbqhflvecjsupjmgwfbjo\\',\\n    \\'teyygdmmyadppuopvqdodaczob\\',\\n    \\'qaeowuwqsqffvibrtxnjnzvzuuonrkwpysyxvkijemmpdmtnqxwekbpfzs\\',\\n    \\'qqxpxpmemkldghbmbyxpkwgkaykaerhmwwjonrhcsubchs\\',\\n  ],\\n\\nI am getting 47 here on leetcode but when i run my program in local i am getting 0 which is correct so why this is happening here any guesses ??"
                    },
                    {
                        "username": "Teddy-Lin",
                        "content": "return sum([len(word) for word in words if all(word.count(i) <= chars.count(i) for i in word)])"
                    },
                    {
                        "username": "RyanAura",
                        "content": "Whats the point of putting the solution in the discussion."
                    },
                    {
                        "username": "Rushab11",
                        "content": "\n        \n        int len=0;\n        for(int i=0;i<words.size();i++)\n        {\n           string str=words[i];\n           int c=0;\n           for(int k=0;k<str.length();k++)\n           {\n             if(count(chars.begin(),chars.end(),str[k]))\n             {\n                 c++;\n             }\n           }\n           if(c==str.length())\n           {\n               len+=c;\n              \n           }\n           \n\n        }\n        return len;\n    \n\nWhat's Wrong with this Approach ?? Only 10 Test Case Passed"
                    },
                    {
                        "username": "user6808zB",
                        "content": "The below code works for the test cases but fails on the Final Submission when there is the chars of 50 characters and 70 words more than 40 chars each,. Can anyone please give me a suggestion what to modify in the below code: \n\ndef countCharacters(self, words: List[str], chars: str) -> int:\n\n        cnt=0                                                  #variable to count the total number of characters                               \n\n        for word in words:\n            res=[]                                                    #temp array to track the number of characters for the word\n            for i in range(len(word)): \n                if word[i] in chars:\n                    res.append(word[i])\n            if len(res)==len(word): \n                cnt+=len(res) \n        return cnt"
                    },
                    {
                        "username": "guruhegde777",
                        "content": "You are checking if word[ i ] exists in chars without checking the count.\\nFor example if a word has \\'a\\' 3 times but in chars single \\'a\\' is present, then you can\\'t construct a word which has 3 \\'a\\'s with only one \\'a\\'. Hope you understood.  "
                    }
                ]
            },
            {
                "id": 1747924,
                "content": [
                    {
                        "username": "yoo_hoo",
                        "content": "In explaination is mentioned: \"A string is good if it can be formed by characters from chars (each character can only be used once).\"\\n\\nBut in first example we got output 6 because \"cat\" and \"hat\" can be formed. How  you can form those words from chars \"atach\" if each character can be used only once?"
                    },
                    {
                        "username": "wcchuo",
                        "content": "This problem means that each character in `chars` can only be used once for each word in the `words` array, not once for the entire `words` array. At least it didn't mention it.\n\nIn other words, you should consider `chars` as a pool of letters that gets refilled after forming each word, rather than a pool that needs to last for all the words.\n\nSo, in your example, `chars = \"atach\"` can be used to form the word `\"cat\"` because it has one `'c'`, one `'a'`, and one `'t'`. After this, the `chars` string is \"refilled\", so it can be used again to form the word `\"hat\"` because it also has one `'h'`, one `'a'`, and one `'t'`. This is why the total length is `3 + 3 = 6`. \n\nThe key is that the characters are reused for each word in the `words` array, not across all the words.\n\nThe problem description should be edited \"... (each character can only be used once in each `words` iteration)\""
                    },
                    {
                        "username": "quppiehy",
                        "content": "I\\'m also confused by this"
                    },
                    {
                        "username": "Manohar_001",
                        "content": "facing the same problem here?"
                    },
                    {
                        "username": "Md_Saif",
                        "content": "In this test case   [\\n    \\'dyiclysmffuhibgfvapygkorkqllqlvokosagyelotobicwcmebnpznjbirzrzsrtzjxhsfpiwyfhzyonmuabtlwin\\',\\n    \\'ndqeyhhcquplmznwslewjzuyfgklssvkqxmqjpwhrshycmvrb\\',\\n    \\'ulrrbpspyudncdlbkxkrqpivfftrggemkpyjl\\',\\n    \\'boygirdlggnh\\',\\n    \\'xmqohbyqwagkjzpyawsydmdaattthmuvjbzwpyopyafphx\\',\\n    \\'nulvimegcsiwvhwuiyednoxpugfeimnnyeoczuzxgxbqjvegcxeqnjbwnbvowastqhojepisusvsidhqmszbrnynkyop\\',\\n    \\'hiefuovybkpgzygprmndrkyspoiyapdwkxebgsmodhzpx\\',\\n    \\'juldqdzeskpffaoqcyyxiqqowsalqumddcufhouhrskozhlmobiwzxnhdkidr\\',\\n    \\'lnnvsdcrvzfmrvurucrzlfyigcycffpiuoo\\',\\n    \\'oxgaskztzroxuntiwlfyufddl\\',\\n    \\'tfspedteabxatkaypitjfkhkkigdwdkctqbczcugripkgcyfezpuklfqfcsccboarbfbjfrkxp\\',\\n    \\'qnagrpfzlyrouolqquytwnwnsqnmuzphne\\',\\n    \\'eeilfdaookieawrrbvtnqfzcricvhpiv\\',\\n    \\'sisvsjzyrbdsjcwwygdnxcjhzhsxhpceqz\\',\\n    \\'yhouqhjevqxtecomahbwoptzlkyvjexhzcbccusbjjdgcfzlkoqwiwue\\',\\n    \\'hwxxighzvceaplsycajkhynkhzkwkouszwaiuzqcleyflqrxgjsvlegvupzqijbornbfwpefhxekgpuvgiyeudhncv\\',\\n    \\'cpwcjwgbcquirnsazumgjjcltitmeyfaudbnbqhflvecjsupjmgwfbjo\\',\\n    \\'teyygdmmyadppuopvqdodaczob\\',\\n    \\'qaeowuwqsqffvibrtxnjnzvzuuonrkwpysyxvkijemmpdmtnqxwekbpfzs\\',\\n    \\'qqxpxpmemkldghbmbyxpkwgkaykaerhmwwjonrhcsubchs\\',\\n  ],\\n\\nI am getting 47 here on leetcode but when i run my program in local i am getting 0 which is correct so why this is happening here any guesses ??"
                    },
                    {
                        "username": "Teddy-Lin",
                        "content": "return sum([len(word) for word in words if all(word.count(i) <= chars.count(i) for i in word)])"
                    },
                    {
                        "username": "RyanAura",
                        "content": "Whats the point of putting the solution in the discussion."
                    },
                    {
                        "username": "Rushab11",
                        "content": "\n        \n        int len=0;\n        for(int i=0;i<words.size();i++)\n        {\n           string str=words[i];\n           int c=0;\n           for(int k=0;k<str.length();k++)\n           {\n             if(count(chars.begin(),chars.end(),str[k]))\n             {\n                 c++;\n             }\n           }\n           if(c==str.length())\n           {\n               len+=c;\n              \n           }\n           \n\n        }\n        return len;\n    \n\nWhat's Wrong with this Approach ?? Only 10 Test Case Passed"
                    },
                    {
                        "username": "user6808zB",
                        "content": "The below code works for the test cases but fails on the Final Submission when there is the chars of 50 characters and 70 words more than 40 chars each,. Can anyone please give me a suggestion what to modify in the below code: \n\ndef countCharacters(self, words: List[str], chars: str) -> int:\n\n        cnt=0                                                  #variable to count the total number of characters                               \n\n        for word in words:\n            res=[]                                                    #temp array to track the number of characters for the word\n            for i in range(len(word)): \n                if word[i] in chars:\n                    res.append(word[i])\n            if len(res)==len(word): \n                cnt+=len(res) \n        return cnt"
                    },
                    {
                        "username": "guruhegde777",
                        "content": "You are checking if word[ i ] exists in chars without checking the count.\\nFor example if a word has \\'a\\' 3 times but in chars single \\'a\\' is present, then you can\\'t construct a word which has 3 \\'a\\'s with only one \\'a\\'. Hope you understood.  "
                    }
                ]
            }
        ]
    }
]