[
    {
        "title": "Grumpy Bookstore Owner",
        "question_content": "There is a bookstore owner that has a store open for n minutes. Every minute, some number of customers enter the store. You are given an integer array customers of length n where customers[i] is the number of the customer that enters the store at the start of the ith minute and all those customers leave after the end of that minute.\nOn some minutes, the bookstore owner is grumpy. You are given a binary array grumpy where grumpy[i] is 1 if the bookstore owner is grumpy during the ith minute, and is 0 otherwise.\nWhen the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise, they are satisfied.\nThe bookstore owner knows a secret technique to keep themselves not grumpy for minutes consecutive minutes, but can only use it once.\nReturn the maximum number of customers that can be satisfied throughout the day.\n&nbsp;\nExample 1:\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. \nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\nExample 2:\nInput: customers = [1], grumpy = [0], minutes = 1\nOutput: 1\n&nbsp;\nConstraints:\n\tn == customers.length == grumpy.length\n\t1 <= minutes <= n <= 2 * 104\n\t0 <= customers[i] <= 1000\n\tgrumpy[i] is either 0 or 1.",
        "solutions": [
            {
                "id": 299230,
                "title": "java-python-3-sliding-window",
                "content": "**Q & A:**\\nQ1: Struggling to understand `winOfMakeSatisfied -= grumpy[i - X] * customers[i - X];`. How does it work in the array to delete?\\nA1: \\n1. For any consecutive `X` minutes and any integer i (>= X), there are: \\ngrumpy[i - X] * cumtomers[i - X] unsatisfied customers at (i - X)th minutes;\\ngrumpy[i - X + 1] * cumtomers[i - X + 1] unsatisfied customers at (i - X + 1)th minutes;\\n...\\ngrumpy[i - 1] * cumtomers[i - 1] unsatisfied customers at (i - 1)th minutes;\\nWe use a window of width `X` to record the number of unsatisfied customers for the above `X` minutes: \\n`grumpy[i - X] * cumtomers[i - X] + grumpy[i - X + 1] * cumtomers[i - X + 1] + ... + grumpy[i - 1] * cumtomers[i - 1]` ... (a)\\n\\n2. In order to find maximum unsatisfied customers in any consecutive `X` minutes, we slide the window of width `X` from left to right, one minute one iteration:\\n`grumpy[i - X + 1] * cumtomers[i - X + 1] + grumpy[i - X + 2] * cumtomers[i - X + 2] + ... + grumpy[i - 1] * cumtomers[i - 1] + grumpy[i] * cumtomers[i]`  ................................. (b)\\n`grumpy[i - X + 2] * cumtomers[i - X + 2] + grumpy[i - X + 3] * cumtomers[i - X + 3] + ... + grumpy[i] * cumtomers[i] + grumpy[i + 1] * cumtomers[i + 1]`\\n`grumpy[i - X + 3] * cumtomers[i - X + 3] + grumpy[i - X + 4] * cumtomers[i - X + 4] + ... + grumpy[i + 1] * cumtomers[i + 1] + grumpy[i + 2] * cumtomers[i + 2]`\\n...\\n(a) and (b) are `winOfMakeSatisfied` at `(i - 1)th` and `ith` minute, respectively; If you compare (a) and (b), you will find that (b) is short of a term `grumpy[i - X] * cumtomers[i - X]` but has a new term `grumpy[i] * cumtomers[i]`. That is why \\n\\nafter \\n```\\nelse { winOfMakeSatisfied += customers[i]; } // here grumpy[i] = 1, hence equal to \"else { winOfMakeSatisfied += grumpy[i] * customers[i]; } \"\\n```\\nwe have \\n```\\nwinOfMakeSatisfied -= grumpy[i - X] * customers[i - X];\\n```\\n\\n**End of Q & A**\\n\\n----\\n\\n1. Use a sliding window `winOfMakeSatisfied` to record the number of unsatisfied customers for `X` minutes. Deduct the unsatisfied customers from left end of the sliding window when it is wider than `X`:\\n `winOfMakeSatisfied -= grumpy[i - X] * customers[i - X];`.\\n2. Use `satisfied` to record the number of satistified customers without grumpy technique.\\n3. by the end of iterations, `satisfied` + `max(winOfMakeSatisfied)` is the answer.\\n\\n```java\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfied = 0, maxMakeSatisfied = 0;\\n        for (int i = 0, winOfMakeSatisfied = 0; i < grumpy.length; ++i) {\\n            if (grumpy[i] == 0) { satisfied += customers[i]; }\\n            else { winOfMakeSatisfied += customers[i]; }\\n            if (i >= X) {\\n                winOfMakeSatisfied -= grumpy[i - X] * customers[i - X];\\n            }\\n            maxMakeSatisfied = Math.max(winOfMakeSatisfied, maxMakeSatisfied);\\n        }\\n        return satisfied + maxMakeSatisfied;        \\n    }\\n```\\n```python\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\\n        for c, g in zip(customers, grumpy):\\n            satisfied += (1 - g) * c\\n            win_of_make_satisfied += g * c\\n            if i >= X:\\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \\n            i += 1    \\n        return satisfied + max_make_satisfied\\n```\\n\\n**Analysis:**\\n\\nTime: O(n), space: O(1), where n = grumpy.length;",
                "solutionTags": [],
                "code": "```\\nelse { winOfMakeSatisfied += customers[i]; } // here grumpy[i] = 1, hence equal to \"else { winOfMakeSatisfied += grumpy[i] * customers[i]; } \"\\n```\n```\\nwinOfMakeSatisfied -= grumpy[i - X] * customers[i - X];\\n```\n```java\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfied = 0, maxMakeSatisfied = 0;\\n        for (int i = 0, winOfMakeSatisfied = 0; i < grumpy.length; ++i) {\\n            if (grumpy[i] == 0) { satisfied += customers[i]; }\\n            else { winOfMakeSatisfied += customers[i]; }\\n            if (i >= X) {\\n                winOfMakeSatisfied -= grumpy[i - X] * customers[i - X];\\n            }\\n            maxMakeSatisfied = Math.max(winOfMakeSatisfied, maxMakeSatisfied);\\n        }\\n        return satisfied + maxMakeSatisfied;        \\n    }\\n```\n```python\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        i = win_of_make_satisfied = satisfied = max_make_satisfied = 0\\n        for c, g in zip(customers, grumpy):\\n            satisfied += (1 - g) * c\\n            win_of_make_satisfied += g * c\\n            if i >= X:\\n                win_of_make_satisfied -= grumpy[i - X] * customers[i - X]\\n            max_make_satisfied = max(win_of_make_satisfied, max_make_satisfied)  \\n            i += 1    \\n        return satisfied + max_make_satisfied\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 299284,
                "title": "python-with-explanation-rolling-sum",
                "content": "The way I approached this problem was to split it into 2 smaller problems. \\n\\nThe first involves counting how many customers are already satisfied, i.e. those where the shopkeeper is not grumpy. I also set any slots with already satisfied customers to 0, so that we will be left with only the currently unsatisfied customers in the list.\\n\\nFor the second part, the array now only contains customers who will not be satisfied. We are able to make X adjacent times \\u201Chappy\\u201D, so we want to find the subarray of length X that has the most customers. We can just keep a rolling sum of the last X customers in the array, and then the best solution is the max the rolling sum ever was.\\n\\nFinally we return the sum of the 2 parts: the customers who were already satisfied, and the maximum number who can be made satisfied by stopping the shop keeper from being grumpy for X time.\\n\\nNote that both parts can be combined into a single loop, but I felt this way was probably easier for understanding, and both are still ```O(n)``` time. I\\'ll shortly include code for how to merge it all together.\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        # Part 1 requires counting how many customers\\n        # are already satisfied, and removing them\\n        # from the customer list.\\n        already_satisfied = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0: #He\\'s happy\\n                already_satisfied += customers[i]\\n                customers[i] = 0\\n        \\n        # Part 2 requires finding the optinal number\\n        # of unhappy customers we can make happy.\\n        best_we_can_make_satisfied = 0\\n        current_satisfied = 0\\n        for i, customers_at_time in enumerate(customers):\\n            current_satisfied += customers_at_time # Add current to rolling total\\n            if i >= X: # We need to remove some from the rolling total\\n                current_satisfied -= customers[i - X]\\n            best_we_can_make_satisfied = max(best_we_can_make_satisfied, current_satisfied)\\n        \\n        # The answer is the sum of the solutions for the 2 parts.\\n        return already_satisfied + best_we_can_make_satisfied\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```O(n)```\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        # Part 1 requires counting how many customers\\n        # are already satisfied, and removing them\\n        # from the customer list.\\n        already_satisfied = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0: #He\\'s happy\\n                already_satisfied += customers[i]\\n                customers[i] = 0\\n        \\n        # Part 2 requires finding the optinal number\\n        # of unhappy customers we can make happy.\\n        best_we_can_make_satisfied = 0\\n        current_satisfied = 0\\n        for i, customers_at_time in enumerate(customers):\\n            current_satisfied += customers_at_time # Add current to rolling total\\n            if i >= X: # We need to remove some from the rolling total\\n                current_satisfied -= customers[i - X]\\n            best_we_can_make_satisfied = max(best_we_can_make_satisfied, current_satisfied)\\n        \\n        # The answer is the sum of the solutions for the 2 parts.\\n        return already_satisfied + best_we_can_make_satisfied\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299237,
                "title": "c-sliding-window",
                "content": "When the owner is not grumpy, we count all customers as ```satisfied```. \\n\\nWe then use the sliding window to count additionally satisfied customers (```add_satisfied```) if the owner start \\'behaving\\' at minute ```i```. We track the maximum additional satisfied customers in ```m_add_satisfied```.\\n\\nFinally, return ```satisfied + m_add_satisfied``` as the result.\\n\\n**C++**\\n```cpp\\nint maxSatisfied(vector<int>& cs, vector<int>& grumpy, int X) {\\n    auto satisfied = 0, m_add_satisfied = 0, add_satisfied = 0;\\n    for (auto i = 0; i < cs.size(); ++i) {\\n        satisfied += !grumpy[i] * cs[i];\\n        add_satisfied += grumpy[i] * cs[i];\\n        if (i >= X) \\n            add_satisfied -= grumpy[i - X] * cs[i - X];\\n        m_add_satisfied = max(m_add_satisfied, add_satisfied);\\n    }\\n    return satisfied + m_add_satisfied;\\n}\\n```\\n# Complexity Analysis\\nRuntime: O(n)\\nMemory: O(1)",
                "solutionTags": [],
                "code": "```satisfied```\n```add_satisfied```\n```i```\n```m_add_satisfied```\n```satisfied + m_add_satisfied```\n```cpp\\nint maxSatisfied(vector<int>& cs, vector<int>& grumpy, int X) {\\n    auto satisfied = 0, m_add_satisfied = 0, add_satisfied = 0;\\n    for (auto i = 0; i < cs.size(); ++i) {\\n        satisfied += !grumpy[i] * cs[i];\\n        add_satisfied += grumpy[i] * cs[i];\\n        if (i >= X) \\n            add_satisfied -= grumpy[i - X] * cs[i - X];\\n        m_add_satisfied = max(m_add_satisfied, add_satisfied);\\n    }\\n    return satisfied + m_add_satisfied;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 597575,
                "title": "simple-java-sliding-window-beats-96-explanation",
                "content": "All we need to do is find the max number of customers who, without applying the technique, would normally be unsatisfied. Once we have this max, we just add it to the baseline number of customers who would be satisfied if we did not apply the technique.\\n\\nSteps:\\n1.) Pass through array and calculate the total number of satisifed customers without applying the bookstore owner\\'s \"technique\". This is calculated by only adding customers on minutes where he is happy.\\n\\n2.)  Create a sliding window of size X. The sum of the window will be equal to the number of customers that occur on minutes within the window where the bookstore owner is unhappy.\\n\\n3.) Compare the current sum of this window with the max window sum we have seen thus far. If the current sum is bigger than the max, it becomes the max.\\n\\n4.)  Return the baseline number of satisfied customers + the max window sum we found.\\n\\n``` \\npublic int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        // find the number of satisfied customers without applying the secret technique\\n        int satisfiedCustomers = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                satisfiedCustomers += customers[i];\\n            } \\n        }\\n        \\n        int max = 0;\\n        int currSum = 0;\\n        int windowStart = 0;\\n        \\n        for (int windowEnd = 0; windowEnd < customers.length; windowEnd++) {\\n            if (grumpy[windowEnd] == 1) {\\n                currSum += customers[windowEnd];\\n            }\\n            \\n            if (windowEnd - windowStart + 1 >= X) {\\n                max = Math.max(max, currSum);\\n                if (grumpy[windowStart] == 1) {\\n                    currSum -= customers[windowStart];\\n                }\\n                windowStart++;\\n            }\\n        }\\n        \\n        return satisfiedCustomers + max;   \\n}",
                "solutionTags": [],
                "code": "All we need to do is find the max number of customers who, without applying the technique, would normally be unsatisfied. Once we have this max, we just add it to the baseline number of customers who would be satisfied if we did not apply the technique.\\n\\nSteps:\\n1.) Pass through array and calculate the total number of satisifed customers without applying the bookstore owner\\'s \"technique\". This is calculated by only adding customers on minutes where he is happy.\\n\\n2.)  Create a sliding window of size X. The sum of the window will be equal to the number of customers that occur on minutes within the window where the bookstore owner is unhappy.\\n\\n3.) Compare the current sum of this window with the max window sum we have seen thus far. If the current sum is bigger than the max, it becomes the max.\\n\\n4.)  Return the baseline number of satisfied customers + the max window sum we found.\\n\\n``` \\npublic int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        // find the number of satisfied customers without applying the secret technique\\n        int satisfiedCustomers = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                satisfiedCustomers += customers[i];\\n            } \\n        }\\n        \\n        int max = 0;\\n        int currSum = 0;\\n        int windowStart = 0;\\n        \\n        for (int windowEnd = 0; windowEnd < customers.length; windowEnd++) {\\n            if (grumpy[windowEnd] == 1) {\\n                currSum += customers[windowEnd];\\n            }\\n            \\n            if (windowEnd - windowStart + 1 >= X) {\\n                max = Math.max(max, currSum);\\n                if (grumpy[windowStart] == 1) {\\n                    currSum -= customers[windowStart];\\n                }\\n                windowStart++;\\n            }\\n        }\\n        \\n        return satisfiedCustomers + max;   \\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 299198,
                "title": "c-linear-time-easy-to-understand",
                "content": "\\t\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\t\\t\\tint mins = customers.size();\\n\\t\\t\\tint directly_satisfied = 0;\\n\\n\\t\\t\\tfor(int i = 0; i < mins; i++) {\\n\\t\\t\\t\\tif(!grumpy[i]) {\\n\\t\\t\\t\\t\\tdirectly_satisfied += customers[i];\\n\\t\\t\\t\\t\\tcustomers[i] = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tint secretly_satisfied = 0, sum = 0;\\n\\t\\t\\tfor(int i = 0, j = 0; j < mins; j++) {\\n\\t\\t\\t\\tsum += customers[j];\\n\\t\\t\\t\\tif(j - i == X)\\n\\t\\t\\t\\t\\tsum -= customers[i++];\\n\\t\\t\\t\\tsecretly_satisfied = max(secretly_satisfied, sum);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn directly_satisfied + secretly_satisfied;\\n\\t\\t}",
                "solutionTags": [],
                "code": "\\t\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\t\\t\\tint mins = customers.size();\\n\\t\\t\\tint directly_satisfied = 0;\\n\\n\\t\\t\\tfor(int i = 0; i < mins; i++) {\\n\\t\\t\\t\\tif(!grumpy[i]) {\\n\\t\\t\\t\\t\\tdirectly_satisfied += customers[i];\\n\\t\\t\\t\\t\\tcustomers[i] = 0;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tint secretly_satisfied = 0, sum = 0;\\n\\t\\t\\tfor(int i = 0, j = 0; j < mins; j++) {\\n\\t\\t\\t\\tsum += customers[j];\\n\\t\\t\\t\\tif(j - i == X)\\n\\t\\t\\t\\t\\tsum -= customers[i++];\\n\\t\\t\\t\\tsecretly_satisfied = max(secretly_satisfied, sum);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn directly_satisfied + secretly_satisfied;\\n\\t\\t}",
                "codeTag": "Unknown"
            },
            {
                "id": 299492,
                "title": "java-one-pass-with-comments-sliding-window",
                "content": "```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int n = customers.length;\\n        int save = 0; // currently how many customers change to be happy if using technique, sliding window\\n        int totalCustomer = 0; // sum of all customers\\n        int totalGrumpy = 0; // sum of all unsatisfied customers without using technique\\n        int maxSave = 0; \\n        for(int i = 0; i < n; i++) {\\n            totalCustomer += customers[i];\\n            totalGrumpy += customers[i] * grumpy[i];\\n            save += customers[i] * grumpy[i];\\n            if(i > X - 1) {\\n                save -= customers[i - X] * grumpy[i - X];\\n            }\\n            maxSave = Math.max(save, maxSave);\\n        }\\n        return totalCustomer - totalGrumpy + maxSave;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int n = customers.length;\\n        int save = 0; // currently how many customers change to be happy if using technique, sliding window\\n        int totalCustomer = 0; // sum of all customers\\n        int totalGrumpy = 0; // sum of all unsatisfied customers without using technique\\n        int maxSave = 0; \\n        for(int i = 0; i < n; i++) {\\n            totalCustomer += customers[i];\\n            totalGrumpy += customers[i] * grumpy[i];\\n            save += customers[i] * grumpy[i];\\n            if(i > X - 1) {\\n                save -= customers[i - X] * grumpy[i - X];\\n            }\\n            maxSave = Math.max(save, maxSave);\\n        }\\n        return totalCustomer - totalGrumpy + maxSave;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 526391,
                "title": "sliding-window-very-easy-to-understand",
                "content": "```java\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfy = 0;\\n        for(int i=0;i<grumpy.length;i++){\\n            if(grumpy[i]==0) satisfy += customers[i]; // directly sum the satisfy customers\\n            customers[i] = grumpy[i]*customers[i]; // collect the unsatisfy customers\\n        }\\n        return satisfy + getMax(customers,X);\\n    }\\n    \\n    public int getMax(int[] arr, int X){ // X is window size\\n        int max = 0;\\n        int sum = 0;\\n        for(int i=0;i<arr.length;i++){\\n            sum += arr[i];\\n            if(i>=X){\\n                sum -= arr[i-X]; \\n            }\\n            max = Math.max(max,sum);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```java\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfy = 0;\\n        for(int i=0;i<grumpy.length;i++){\\n            if(grumpy[i]==0) satisfy += customers[i]; // directly sum the satisfy customers\\n            customers[i] = grumpy[i]*customers[i]; // collect the unsatisfy customers\\n        }\\n        return satisfy + getMax(customers,X);\\n    }\\n    \\n    public int getMax(int[] arr, int X){ // X is window size\\n        int max = 0;\\n        int sum = 0;\\n        for(int i=0;i<arr.length;i++){\\n            sum += arr[i];\\n            if(i>=X){\\n                sum -= arr[i-X]; \\n            }\\n            max = Math.max(max,sum);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 823324,
                "title": "java-tricky-made-easy-easy-step-by-step-explained-1-ms-faster-than-100",
                "content": "class Solution {\\n    \\n    // the idea is to choose the window which has the max_un-satisfied customer count so we can satisfy \\n    // the maximum customers by making the grump[i] = 1 to grump[i] = 0 within that window\\n    // so we need an extra array which tracks the unsatisfied customers at i- th minute \\n    // and find the window of size X which has the most unsatisfied customers in that array \\n    // at any point of time , ie - globally.\\n    // that window with max Unsatisfied customers is the window we want !\\n    public int maxSatisfied(int[] customers, int[] grumpy, int k) {\\n        \\n        // create an arr to keep track of the unsatisfied customers at i-Th minute\\n        int unsatisfied[] = new int[grumpy.length];\\n        // since grumpy == 1 , grumpy[i]*customers[i] == number of unsatisfied customers at i-th minute\\n        for(int i = 0 ; i < grumpy.length ; i++){\\n            unsatisfied[i] = grumpy[i]*customers[i];\\n        }\\n        int unsatisfied_curr = 0 ;\\n        int unsatisfied_global = 0 ;\\n        int start = 0 ;\\n        int end = 0 ;\\n        // create the first window of size X with the unsatisfied customer count of iTh minutes \\n        // and get the sum of all such unsatisfied customers \\n        for(int i = 0 ; i < k ; i++){\\n            unsatisfied_curr += unsatisfied[i];\\n        }\\n        unsatisfied_global = unsatisfied_curr ;\\n        start = 0 ;\\n        end = k - 1;\\n        // slide the window one elt at a time and find the window which has the maximum number of unsatisfied \\n        // customers count sum, because we can satisfy the maximum customers if we use our power in the window \\n        // having maximum unsatisfied customers \\n        // ie - we need to satisfy maximum possible customers to maximize our satisfied customer count\\n        \\n        for(int i = k ; i < unsatisfied.length ; i++){\\n            // normal sliding window technique\\n            unsatisfied_curr += -unsatisfied[i - k];\\n            unsatisfied_curr += unsatisfied[i];\\n            \\n            // record the max_unsatisfied customer count window\\'s start and end index\\n            if(unsatisfied_curr > unsatisfied_global){\\n                unsatisfied_global = unsatisfied_curr;\\n                start = i - k + 1;\\n                end = i ;\\n            }\\n            \\n        }\\n        // change all the grumpy minutes within the desired window to non-grumpy minutes , ie - from 1 to 0 \\n        for(int i = start ; i <= end ; i++){\\n            grumpy[i] = 0;\\n        }\\n        int ans = 0;\\n        // finally add all customers served during non grumpy minutes \\n        for(int i = 0 ; i < grumpy.length; i++){\\n            if(grumpy[i] == 0)\\n                ans += customers[i];\\n        }\\n        return ans ;\\n    }\\n}\\n// hope it helps , if u like pls upvote pls pls, tysm , it was either really tricky question or\\n// i am just really stupid , took so much tym :( :(",
                "solutionTags": [],
                "code": "class Solution {\\n    \\n    // the idea is to choose the window which has the max_un-satisfied customer count so we can satisfy \\n    // the maximum customers by making the grump[i] = 1 to grump[i] = 0 within that window\\n    // so we need an extra array which tracks the unsatisfied customers at i- th minute \\n    // and find the window of size X which has the most unsatisfied customers in that array \\n    // at any point of time , ie - globally.\\n    // that window with max Unsatisfied customers is the window we want !\\n    public int maxSatisfied(int[] customers, int[] grumpy, int k) {\\n        \\n        // create an arr to keep track of the unsatisfied customers at i-Th minute\\n        int unsatisfied[] = new int[grumpy.length];\\n        // since grumpy == 1 , grumpy[i]*customers[i] == number of unsatisfied customers at i-th minute\\n        for(int i = 0 ; i < grumpy.length ; i++){\\n            unsatisfied[i] = grumpy[i]*customers[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 408313,
                "title": "ac-readable-python-9-lines",
                "content": "```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n\\tm = s = tmp = 0\\n\\tfor i in range(len(customers)):\\n\\t\\tif not grumpy[i]: \\n\\t\\t\\ts += customers[i]                # sum of satisfied customers\\n\\t\\t\\tcustomers[i] = 0 \\n\\t\\telse: tmp += customers[i]            # sum of grumpy customers \\n\\t\\tif i>=X: tmp -= customers[i-X]       # remove the leftmost element to keep the sliding window with # of X\\n\\t\\tm = max(m, tmp)                      # max # of satisfied grumpy customers with a secret technique\\n\\treturn s+m\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n\\tm = s = tmp = 0\\n\\tfor i in range(len(customers)):\\n\\t\\tif not grumpy[i]: \\n\\t\\t\\ts += customers[i]                # sum of satisfied customers\\n\\t\\t\\tcustomers[i] = 0 \\n\\t\\telse: tmp += customers[i]            # sum of grumpy customers \\n\\t\\tif i>=X: tmp -= customers[i-X]       # remove the leftmost element to keep the sliding window with # of X\\n\\t\\tm = max(m, tmp)                      # max # of satisfied grumpy customers with a secret technique\\n\\treturn s+m\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 455961,
                "title": "not-understanding-example-1",
                "content": "As described in description, \"The bookstore owner knows a secret technique to keep themselves not grumpy for X minutes straight, but can only use it once.\", which I am interpreting as setting a subarray of length 3 in grumpy to 0s. So that grumpy = [0,1,0,1,0,0,0,0], so max total is 1 + 1 + 7 + 5 = 14. How is 16 possible?\\n```\\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\\nOutput: 16\\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. \\nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\\n",
                "solutionTags": [],
                "code": "As described in description, \"The bookstore owner knows a secret technique to keep themselves not grumpy for X minutes straight, but can only use it once.\", which I am interpreting as setting a subarray of length 3 in grumpy to 0s. So that grumpy = [0,1,0,1,0,0,0,0], so max total is 1 + 1 + 7 + 5 = 14. How is 16 possible?\\n```\\nInput: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3\\nOutput: 16\\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. \\nThe maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1063109,
                "title": "extremely-readable-code-with-simple-explanation-o-n-time-cpp",
                "content": "Beats 98% of CPP submissions - Constant Space Solution\\nTime Complexity - O(2n) i.e. O(n)\\n\\nIdea - The final ans should be total count of **existing satisfied customers** + **maximum number of unsatisfied customers which can be satisfied**  considering window size of X\\n\\nAlgorithm - \\n1. Loop through all the customers and count the total number AND total satisfied customers present already.\\n2. Small check to see if X is the size of customers array, then simply return the total customer count since everyone can be satisfied.\\n3. For the first window, count the number of unsatisfied customers.\\n4. Now keep moving the window by adding and removing 1 element from the ends\\n\\t\\ta. If the start had a grumpy state, before moving the start index to next one, reduce the total count of unsatisfied customers by that value\\n\\t\\tb. Check if the new end state is grumpy, and if so, add the count to unsatisfied customers count.\\n\\t\\tc. Finally check to see if this value is the max we have received.\\n\\t\\td. Keep doing this till the end.\\n5. Return the total count as mentioned in the idea\\n\\n\\n```\\n\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n        int total_cust = 0, satisfied = 0;\\n        \\n\\t\\t// 1.\\n        for(int index=0; index<customers.size(); ++index) {\\n            total_cust += customers[index];\\n            if(grumpy[index] == 0)\\n                satisfied += customers[index];\\n        }\\n        \\n\\t\\t// 2.\\n        if(X == customers.size())\\n            return total_cust;\\n        \\n        int start = 0, end = 0, unsatis = 0;\\n        int max_unsatis = INT_MIN;\\n        \\n\\t\\t// 3.\\n        while(end<X) {\\n            if(grumpy[end] == 1)\\n                unsatis += customers[end];\\n            \\n            end++;\\n        }\\n            \\n        max_unsatis = max(max_unsatis, unsatis);\\n        \\n\\t\\t// 4.\\n        while(end<customers.size()) {\\n\\t\\t\\t// 4.a.\\n            if(grumpy[start] == 1)\\n                unsatis -= customers[start];\\n\\n\\t\\t\\tstart++;\\n    \\n\\t\\t\\t// 4.b.\\n            if(grumpy[end] == 1)\\n                unsatis += customers[end];\\n            \\n\\t\\t\\t// 4.c.\\n            max_unsatis = max(max_unsatis, unsatis);\\n            end++;\\n        }\\n        \\n\\t\\t// 5.\\n        return max_unsatis+satisfied;\\n    }\\n};\\n\\n```\\n\\n",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n        int total_cust = 0, satisfied = 0;\\n        \\n\\t\\t// 1.\\n        for(int index=0; index<customers.size(); ++index) {\\n            total_cust += customers[index];\\n            if(grumpy[index] == 0)\\n                satisfied += customers[index];\\n        }\\n        \\n\\t\\t// 2.\\n        if(X == customers.size())\\n            return total_cust;\\n        \\n        int start = 0, end = 0, unsatis = 0;\\n        int max_unsatis = INT_MIN;\\n        \\n\\t\\t// 3.\\n        while(end<X) {\\n            if(grumpy[end] == 1)\\n                unsatis += customers[end];\\n            \\n            end++;\\n        }\\n            \\n        max_unsatis = max(max_unsatis, unsatis);\\n        \\n\\t\\t// 4.\\n        while(end<customers.size()) {\\n\\t\\t\\t// 4.a.\\n            if(grumpy[start] == 1)\\n                unsatis -= customers[start];\\n\\n\\t\\t\\tstart++;\\n    \\n\\t\\t\\t// 4.b.\\n            if(grumpy[end] == 1)\\n                unsatis += customers[end];\\n            \\n\\t\\t\\t// 4.c.\\n            max_unsatis = max(max_unsatis, unsatis);\\n            end++;\\n        }\\n        \\n\\t\\t// 5.\\n        return max_unsatis+satisfied;\\n    }\\n};\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 792434,
                "title": "c-one-pass-with-sliding-window",
                "content": "```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n\\tint normal=0, win=0, maxwin=0;;\\n\\tfor(int i=0; i<customers.size(); i++){\\n\\t\\tnormal+=(!grumpy[i])*customers[i];\\n\\t\\twin+=customers[i]*grumpy[i];\\n\\t\\tif(i>=X) win-=customers[i-X]*grumpy[i-X]; \\n\\t\\tmaxwin=max(maxwin, win);\\n\\t}\\n\\n\\treturn normal+maxwin;\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n\\tint normal=0, win=0, maxwin=0;;\\n\\tfor(int i=0; i<customers.size(); i++){\\n\\t\\tnormal+=(!grumpy[i])*customers[i];\\n\\t\\twin+=customers[i]*grumpy[i];\\n\\t\\tif(i>=X) win-=customers[i-X]*grumpy[i-X]; \\n\\t\\tmaxwin=max(maxwin, win);\\n\\t}\\n\\n\\treturn normal+maxwin;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3700799,
                "title": "easy-solution-using-intution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nWhenever the shopowner is not grumpy, the customers are added irrespective of when the minutes are, so add the customers to ans whenever he is not grumpy. Now change customers to 0 whenever the shop owner is not grumpy. \\nNow the question is changed to the maximum sum of subarray with window size minutes. (standard sliding window problem)\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\nPlease upvote if you find it helpful \\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n       int count = 0; \\n       for(int i=0; i<customers.size(); i++) if(grumpy[i] == 0) count+= customers[i]; \\n       for(int i=0; i<customers.size(); i++) customers[i] *= grumpy[i]; \\n       int max = 0, temp = 0; \\n       for(int i=0; i<minutes; i++) temp += customers[i]; \\n       if(max < temp) max = temp; \\n       for(int i=minutes; i<customers.size(); i++) {\\n           temp -= customers[i - minutes]; temp += customers[i]; \\n           if(max < temp) max = temp; \\n       }\\n\\n       return count + max; \\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n       int count = 0; \\n       for(int i=0; i<customers.size(); i++) if(grumpy[i] == 0) count+= customers[i]; \\n       for(int i=0; i<customers.size(); i++) customers[i] *= grumpy[i]; \\n       int max = 0, temp = 0; \\n       for(int i=0; i<minutes; i++) temp += customers[i]; \\n       if(max < temp) max = temp; \\n       for(int i=minutes; i<customers.size(); i++) {\\n           temp -= customers[i - minutes]; temp += customers[i]; \\n           if(max < temp) max = temp; \\n       }\\n\\n       return count + max; \\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1749905,
                "title": "c-sliding-window-solution-o-n-easy-to-understand-explanation",
                "content": "Here we use sliding window algorithm because question is based on arrays, and we are given a window size (which is basically the minutes given) , we need to find a subarray of minutes length where the bookstore owner mustn\\'t be grumpy.\\nSo we first sum up all such minutes where already the owner is non-grumpy, because all such customers will always be satisfied.\\nNow we run our sliding window algo , and sum up all such customers who come when owner is grumpy , and once we reach window size of minutes length we keep updating the maxx value.\\nHere, is my code , please do ask your doubts , and upvote for motivation:\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n     int sum=0;\\n        int start=0,end=0;int maxx=0;\\n        for(int i=0;i<customers.size();i++)\\n            if(grumpy[i]==0)\\n            sum+=customers[i];\\n        cout<<sum<<endl;\\n        while(end<customers.size())\\n        {\\n            if(grumpy[end]==1)\\n                sum+=customers[end];\\n            if((end-start+1)<minutes)\\n                end++;\\n           else if((end-start+1)==minutes)\\n            {\\n                maxx=max(maxx,sum);\\n                if(grumpy[start]==1)\\n                    sum-=customers[start];\\n                start++;\\n                end++;\\n            }\\n        }\\n        return maxx;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n     int sum=0;\\n        int start=0,end=0;int maxx=0;\\n        for(int i=0;i<customers.size();i++)\\n            if(grumpy[i]==0)\\n            sum+=customers[i];\\n        cout<<sum<<endl;\\n        while(end<customers.size())\\n        {\\n            if(grumpy[end]==1)\\n                sum+=customers[end];\\n            if((end-start+1)<minutes)\\n                end++;\\n           else if((end-start+1)==minutes)\\n            {\\n                maxx=max(maxx,sum);\\n                if(grumpy[start]==1)\\n                    sum-=customers[start];\\n                start++;\\n                end++;\\n            }\\n        }\\n        return maxx;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 388840,
                "title": "simplest-javascript-sliding-window-solution",
                "content": "The idea is simple - go over all the customers and sum up satisfied ones. They will never be unsatisfied.\\n\\nSame time overwrite `customers[i]` with the sum of unsatisfied customers till that minute.\\n\\nTo find the best time to use the secret technique for `X` munites is basically the buggest difference an unsatisfied customers array: `max(customers[i] - customers[i - X])`.\\n\\nFor example, for the input: `customers = [1,0,1,2,1,1,7,5]`; `grumpy = [0,1,0,1,0,1,0,1]`; `X = 3` we would have:\\n- already satisfied customers: 10\\n- unsatisfied customers array by minutes: `[0,0,0,2,2,3,3,8]`. Max unsatisfied customers that could be satisfied by the secret technique is basically the ones in the interval `customers[7] - customers[4] = 8 - 2 = 6`\\n- maximum number of customers that could be satisfied would equal 10 + 6 = 16\\n\\n\\n```js\\n/**\\n * @param {number[]} customers\\n * @param {number[]} grumpy\\n * @param {number} X\\n * @return {number}\\n */\\nvar maxSatisfied = function(customers, grumpy, X) {\\n  let satisfied = 0;\\n  let maxGrumpySatisfied = 0;\\n  \\n  for (let i = 0; i < grumpy.length; i++) {\\n    if (grumpy[i] === 0) {\\n      satisfied += customers[i];\\n      customers[i] = i === 0 ? 0 : customers[i - 1];\\n      continue;\\n    }\\n    \\n    if (i > 0) {\\n      customers[i] += customers[i - 1];\\n    }\\n    \\n    const grumpySatisfied = X <= i ? customers[i] - customers[i - X] : customers[i];\\n    maxGrumpySatisfied = Math.max(maxGrumpySatisfied, grumpySatisfied);\\n  }\\n  \\n  return satisfied + maxGrumpySatisfied;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```js\\n/**\\n * @param {number[]} customers\\n * @param {number[]} grumpy\\n * @param {number} X\\n * @return {number}\\n */\\nvar maxSatisfied = function(customers, grumpy, X) {\\n  let satisfied = 0;\\n  let maxGrumpySatisfied = 0;\\n  \\n  for (let i = 0; i < grumpy.length; i++) {\\n    if (grumpy[i] === 0) {\\n      satisfied += customers[i];\\n      customers[i] = i === 0 ? 0 : customers[i - 1];\\n      continue;\\n    }\\n    \\n    if (i > 0) {\\n      customers[i] += customers[i - 1];\\n    }\\n    \\n    const grumpySatisfied = X <= i ? customers[i] - customers[i - X] : customers[i];\\n    maxGrumpySatisfied = Math.max(maxGrumpySatisfied, grumpySatisfied);\\n  }\\n  \\n  return satisfied + maxGrumpySatisfied;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1262781,
                "title": "make-things-simple-and-easy-c-sliding-window",
                "content": "```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        \\n        \\n        int ans=0;\\n        \\n        for(int i=0;i<customers.size();i++){\\n            \\n            if(grumpy[i]==0){\\n                ans+=customers[i];\\n                customers[i]=0;\\n            }\\n        }\\n        \\n        \\n        int slide=0;\\n        \\n        for(int i=0;i<minutes;i++){\\n            slide+=customers[i];\\n        }\\n        \\n        int finalanstoadd=slide;\\n        \\n        \\n        for(int i=minutes;i<customers.size();i++){\\n            \\n            slide+=customers[i];\\n            slide-=customers[i- minutes];\\n            finalanstoadd=max(slide,finalanstoadd);\\n        }\\n        \\n        \\n        return finalanstoadd +  ans ;\\n    }\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        \\n        \\n        int ans=0;\\n        \\n        for(int i=0;i<customers.size();i++){\\n            \\n            if(grumpy[i]==0){\\n                ans+=customers[i];\\n                customers[i]=0;\\n            }\\n        }\\n        \\n        \\n        int slide=0;\\n        \\n        for(int i=0;i<minutes;i++){\\n            slide+=customers[i];\\n        }\\n        \\n        int finalanstoadd=slide;\\n        \\n        \\n        for(int i=minutes;i<customers.size();i++){\\n            \\n            slide+=customers[i];\\n            slide-=customers[i- minutes];\\n            finalanstoadd=max(slide,finalanstoadd);\\n        }\\n        \\n        \\n        return finalanstoadd +  ans ;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1133627,
                "title": "easy-to-understand-java-solution-100-faster",
                "content": "Calculate the number of customers when the owner is grumpy for each sliding window of size X and store the max in that case and when the owner is not grumpy just include that in your answer.\\n\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        \\n        int i=0;\\n        int j=0;\\n        int max_index = 0;\\n        int count_cust=0;\\n        int max_cust=0;\\n        int cust=0;\\n         while(j<customers.length){\\n           \\n            if(grumpy[j]==1){\\n                count_cust+=customers[j];\\n            } else{\\n                cust+=customers[j];\\n            }\\n            if(j-i+1==X){\\n                if(count_cust>max_cust){\\n                    max_index=i;\\n                    max_cust=count_cust;\\n                }\\n                if(grumpy[i]==1)\\n                    count_cust-=customers[i];\\n                i++;\\n            }\\n            j++;\\n        }\\n     \\n        \\n        return cust+max_cust;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        \\n        int i=0;\\n        int j=0;\\n        int max_index = 0;\\n        int count_cust=0;\\n        int max_cust=0;\\n        int cust=0;\\n         while(j<customers.length){\\n           \\n            if(grumpy[j]==1){\\n                count_cust+=customers[j];\\n            } else{\\n                cust+=customers[j];\\n            }\\n            if(j-i+1==X){\\n                if(count_cust>max_cust){\\n                    max_index=i;\\n                    max_cust=count_cust;\\n                }\\n                if(grumpy[i]==1)\\n                    count_cust-=customers[i];\\n                i++;\\n            }\\n            j++;\\n        }\\n     \\n        \\n        return cust+max_cust;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3380296,
                "title": "python-3-6-lines-w-example-t-m-100-88",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n\\n                                                        #   Example: customers = [1,0,2,7,5]\\n                                                        #               grumpy = [0,1,1,0,1]\\n                                                        #              minutes = 3\\n                                                        #     \\n       z = list(map(mul, customers, grumpy))            #      z = [1*0,0*1,2*1,7*0,5*1] = [0,0,2,0,5]\\n\\n        ans = score = sum(customers) - sum(z[minutes:]) #  ans = score = sum([1,0,2,7,5]) - sum([0,5]) = 10\\n\\n        for i in range(len(grumpy) - minutes):          #  i   score           ans\\n            score+= z[i+minutes] - z[i]                 # \\u2013\\u2013\\u2013  \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\n            ans = max(ans, score)                       #                       10\\n                                                        #  0    10+0-0          10\\n        return ans                                      #  1    10+5-0          15  <--return\\n```\\n[https://leetcode.com/problems/grumpy-bookstore-owner/submissions/1007973320/](http://)\\n\\nI could be wrong, but I think that time complexity is *O*(*N*) and space complexity is *O*(*N*).\\n",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n\\n                                                        #   Example: customers = [1,0,2,7,5]\\n                                                        #               grumpy = [0,1,1,0,1]\\n                                                        #              minutes = 3\\n                                                        #     \\n       z = list(map(mul, customers, grumpy))            #      z = [1*0,0*1,2*1,7*0,5*1] = [0,0,2,0,5]\\n\\n        ans = score = sum(customers) - sum(z[minutes:]) #  ans = score = sum([1,0,2,7,5]) - sum([0,5]) = 10\\n\\n        for i in range(len(grumpy) - minutes):          #  i   score           ans\\n            score+= z[i+minutes] - z[i]                 # \\u2013\\u2013\\u2013  \\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013\\u2013     \\u2013\\u2013\\u2013\\n            ans = max(ans, score)                       #                       10\\n                                                        #  0    10+0-0          10\\n        return ans                                      #  1    10+5-0          15  <--return\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1668754,
                "title": "java-1-ms-sliding-window-beats-100",
                "content": "First in sum i have calculated total satisfied customers and then changed grumpy[i] with their customer weight ( customer[i]*grumpy[i] ) and after sliding window for minutes checked which window gives maximum value.\\n:)\\n\\n        int sum = 0;\\n        \\n        int n = customers.length;\\n        for(int i = 0; i < n; i++) {\\n            sum = sum + customers[i] * (1-grumpy[i]);\\n            grumpy[i] = customers[i] * grumpy[i];\\n        }\\n        \\n        int max = 0;\\n        for(int i = 0; i < minutes; i++) {\\n            max += grumpy[i];\\n        }\\n            \\n        int save = max;\\n        for(int i = minutes; i < n; i++) {\\n            save = save + grumpy[i] - grumpy[i-minutes];\\n            max = save > max ? save : max;\\n        }\\n        \\n        return sum + max;\\n    }",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "First in sum i have calculated total satisfied customers and then changed grumpy[i] with their customer weight ( customer[i]*grumpy[i] ) and after sliding window for minutes checked which window gives maximum value.\\n:)\\n\\n        int sum = 0;\\n        \\n        int n = customers.length;\\n        for(int i = 0; i < n; i++) {\\n            sum = sum + customers[i] * (1-grumpy[i]);\\n            grumpy[i] = customers[i] * grumpy[i];\\n        }\\n        \\n        int max = 0;\\n        for(int i = 0; i < minutes; i++) {\\n            max += grumpy[i];\\n        }\\n            \\n        int save = max;\\n        for(int i = minutes; i < n; i++) {\\n            save = save + grumpy[i] - grumpy[i-minutes];\\n            max = save > max ? save : max;\\n        }\\n        \\n        return sum + max;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1586972,
                "title": "c-one-pass-sliding-window-easy-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        int directly_satisfied=0;\\n        int indirectly_satisfied=0;\\n        int max_indirectly_satisfied = INT_MIN;\\n        int i=0,j=0;\\n        while(j<customers.size())\\n        {   \\n            if(grumpy[j]==0) \\n            {\\n\\t\\t\\t\\tdirectly_satisfied+=customers[j];\\n\\t\\t\\t\\tcustomers[j] = 0;\\n\\t\\t\\t}\\n            \\n            indirectly_satisfied+=customers[j];\\n            \\n            int k=j-i+1; //window size\\n            \\n            if(k<minutes) \\n                j++;\\n            else if(k==minutes)\\n            {\\n                max_indirectly_satisfied= max(max_indirectly_satisfied,indirectly_satisfied);\\n                indirectly_satisfied-=customers[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n        return max_indirectly_satisfied + directly_satisfied;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        int directly_satisfied=0;\\n        int indirectly_satisfied=0;\\n        int max_indirectly_satisfied = INT_MIN;\\n        int i=0,j=0;\\n        while(j<customers.size())\\n        {   \\n            if(grumpy[j]==0) \\n            {\\n\\t\\t\\t\\tdirectly_satisfied+=customers[j];\\n\\t\\t\\t\\tcustomers[j] = 0;\\n\\t\\t\\t}\\n            \\n            indirectly_satisfied+=customers[j];\\n            \\n            int k=j-i+1; //window size\\n            \\n            if(k<minutes) \\n                j++;\\n            else if(k==minutes)\\n            {\\n                max_indirectly_satisfied= max(max_indirectly_satisfied,indirectly_satisfied);\\n                indirectly_satisfied-=customers[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n        return max_indirectly_satisfied + directly_satisfied;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1215558,
                "title": "very-easy-solution",
                "content": "Steps:\\n1. find total sum of satisfied customers;\\n2. find maximum sum of unsatisfied customers in between the range of minutes;\\n3. add both the sums;\\n\\nDo upvote \\uD83D\\uDE00\\n\\n\\n```\\nclass Solution \\n{\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) \\n    {\\n        // sum of satisfied customers\\n         int satisfiedCustomers = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                satisfiedCustomers += customers[i];\\n            } \\n        }\\n        \\n        \\n        int max  = 0;\\n        for(int i=0;i<customers.length-minutes+1;i++)\\n        {\\n            int maxUnsatisfied = 0;\\n            int j = i;\\n            while(j<i+minutes)\\n            {\\n                if(grumpy[j] == 0)\\n                    j++;\\n                else\\n                    maxUnsatisfied += customers[j++];\\n            }\\n            if(max < maxUnsatisfied)\\n                max = maxUnsatisfied;\\n        }\\n        return satisfiedCustomers+max;\\n        \\n    }\\n}```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) \\n    {\\n        // sum of satisfied customers\\n         int satisfiedCustomers = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                satisfiedCustomers += customers[i];\\n            } \\n        }\\n        \\n        \\n        int max  = 0;\\n        for(int i=0;i<customers.length-minutes+1;i++)\\n        {\\n            int maxUnsatisfied = 0;\\n            int j = i;\\n            while(j<i+minutes)\\n            {\\n                if(grumpy[j] == 0)\\n                    j++;\\n                else\\n                    maxUnsatisfied += customers[j++];\\n            }\\n            if(max < maxUnsatisfied)\\n                max = maxUnsatisfied;\\n        }\\n        return satisfiedCustomers+max;\\n        \\n    }\\n}```",
                "codeTag": "Java"
            },
            {
                "id": 728759,
                "title": "python3-concise-sliding-window",
                "content": "**Explanation**\\n* Sum up first X customers with the secret technique: \\n`max_gains = gains = sum(grumpy[i] * customers[i] for i in range(X))`\\n* Sum up first X satisfied customers: \\n`total = sum((grumpy[i] == 0) * customers[i] for i in range(X))`\\n* Iteration starts from the index X: \\n`for i in range(X, len(customers))`\\n* Add satisfied customers to total: \\n`total += (grumpy[i] == 0) * customers[i]`\\n* Sliding Wondow, add the right one and deduct the left one:\\n`gains += grumpy[i] * customers[i] - grumpy[i - X] * customers[i - X]`\\n* Update the max customers with the secret techinque:\\n`max_gains = max(max_gains, gains)`\\n* Return results: \\n`total + max_gains`\\n\\n**Complexcity**\\n* Time: O(n)\\n* Space: O(1)\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        max_gains = gains = sum(grumpy[i] * customers[i] for i in range(X))\\n        total = sum((grumpy[i] == 0) * customers[i] for i in range(X))\\n        for i in range(X, len(customers)):\\n            total += (grumpy[i] == 0) * customers[i]\\n            gains += grumpy[i] * customers[i] - grumpy[i - X] * customers[i - X]\\n            max_gains = max(max_gains, gains)\\n        return total + max_gains\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        max_gains = gains = sum(grumpy[i] * customers[i] for i in range(X))\\n        total = sum((grumpy[i] == 0) * customers[i] for i in range(X))\\n        for i in range(X, len(customers)):\\n            total += (grumpy[i] == 0) * customers[i]\\n            gains += grumpy[i] * customers[i] - grumpy[i - X] * customers[i - X]\\n            max_gains = max(max_gains, gains)\\n        return total + max_gains\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3294626,
                "title": "detailed-explanation-o-n-time-o-1-space",
                "content": "# Intuition & Approach\\n- A window of size=minutes but only considering the custumer[i] if (grumpy[i]==1)\\n- And then added to a sum of all the custumer[i] with (grumpy[i]==0)\\n\\n# Complexity\\n- Time complexity:\\n  O(n)\\n\\n- Space complexity:\\n  O(1)\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& cus, vector<int>& grumpy, int minutes) {\\n        \\n        int sum =0; \\n        int start=0;\\n        int ans =0;\\n        for (int i=0;i<cus.size(); i++){\\n            if (grumpy[i]==1){\\n                sum += cus[i];\\n            }\\n            if (i-start+1==minutes){\\n                ans = max(sum, ans);\\n                if (grumpy[start]==1){\\n                    sum -= cus[start];\\n                }\\n                start++;\\n            }\\n        }\\n        for (int i=0; i<cus.size(); i++){\\n            if (grumpy[i]==0){\\n                ans += cus[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& cus, vector<int>& grumpy, int minutes) {\\n        \\n        int sum =0; \\n        int start=0;\\n        int ans =0;\\n        for (int i=0;i<cus.size(); i++){\\n            if (grumpy[i]==1){\\n                sum += cus[i];\\n            }\\n            if (i-start+1==minutes){\\n                ans = max(sum, ans);\\n                if (grumpy[start]==1){\\n                    sum -= cus[start];\\n                }\\n                start++;\\n            }\\n        }\\n        for (int i=0; i<cus.size(); i++){\\n            if (grumpy[i]==0){\\n                ans += cus[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1437395,
                "title": "step-by-step-easiest-approach-using-sliding-window-technique-c",
                "content": "**Grumpy Bookstore owner**\\n\\nWe have given an array *customers[]* and *grumpy[]* where, \\n1) customer[]: specifies the number of customers visiting to the bookstore.  \\n2) When bookstore owner is present at the bookstore, he may or may not be grumpy for some time.\\n\\nLet us breakdown the problem and understand the problem first,\\n**We** have given that whenever a particular customer visits to the bookstore, the bookstore owner may or may not be grumpy at that time. If the bookstore owner is grumpy for example- ith customer (i=5) visits the bookstore and at that time bookstore owner is grumpy i.e **grumpy[5]=1** and the customer(i=5) is not satisfied. If at a particular index or time, the owner is not grumpy then **grumpy[i]=0** the customer get satisfied.\\n\\nThe problem statement says that we have given `minutes` for which the bookstore owner is not grumpy and all the customer that visit the bookstore within that minute get satisfied. We have to calculate the total number (max number) of customers that get satisfied.\\n\\nTo approach this problem, we can simply use the *Sliding Window Technique* in which we have given a value `minutes` and we have to calculate the max number of satisfied customer within that window(minutes).\\n\\n**Algorithm**\\n\\n1) Find the total satisfied customer by finding if the owner is not grumpy ( **grumpy[i]=0**).\\n2) Take a left and right pointer to calculate all the satisfied customer in the given `minutes`.\\n3) Calculating the satisfied customer when the owner is grumpy( **grumpy[i]==1**) in the given `minutes`. Cause in the given `minute` the owner uses the secret technique to satisfy the customer.\\n4) Contract the window by excluding the unsatisfied customer from the left.\\n5) Expand the window by including the satisfied customer from the right. (Where right will be `minutes`)\\n2) Return the total satisfied customer.\\n\\n**Code**\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n         int satisfied=0;\\n         int n= customers.size();\\n         for(int i=0;i<n;i++){\\n            if(grumpy[i]==0)\\n                satisfied+= customers[i];\\n          }\\n        int additionalsatisfied= 0; \\n        int left=0;\\n        int right= minutes;\\n        for(int i=0;i<minutes;i++){\\n            if(grumpy[i]==1)\\n            {\\n                additionalsatisfied+= customers[i];\\n            }\\n        }\\n        int maxx= additionalsatisfied;\\n        while(right<n){\\n            if(grumpy[right]==1){\\n                additionalsatisfied+= customers[right]; /* If the satisfied customer found, then include in the given window or minute.*/\\n            }\\n            if(grumpy[left]==1){\\n                additionalsatisfied-= customers[left]; /*If the unsatisfied customers found, then exclude from the window*/\\n            }\\n            maxx= max(maxx, additionalsatisfied);\\n         left++;\\n        right++;\\n            }\\n        \\n        return satisfied+maxx;\\n    }\\n};\\n```\\n\\n(Thumbs up if you liked this solution)",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n         int satisfied=0;\\n         int n= customers.size();\\n         for(int i=0;i<n;i++){\\n            if(grumpy[i]==0)\\n                satisfied+= customers[i];\\n          }\\n        int additionalsatisfied= 0; \\n        int left=0;\\n        int right= minutes;\\n        for(int i=0;i<minutes;i++){\\n            if(grumpy[i]==1)\\n            {\\n                additionalsatisfied+= customers[i];\\n            }\\n        }\\n        int maxx= additionalsatisfied;\\n        while(right<n){\\n            if(grumpy[right]==1){\\n                additionalsatisfied+= customers[right]; /* If the satisfied customer found, then include in the given window or minute.*/\\n            }\\n            if(grumpy[left]==1){\\n                additionalsatisfied-= customers[left]; /*If the unsatisfied customers found, then exclude from the window*/\\n            }\\n            maxx= max(maxx, additionalsatisfied);\\n         left++;\\n        right++;\\n            }\\n        \\n        return satisfied+maxx;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 442760,
                "title": "python-sliding-window-w-explanation-9-lines-memory-better-than-100",
                "content": "*i* is the start of the window, *j* is the end. Only increase *i* if the max window length has been reached. Keep track of the maximum newly satisfied so far and finally return the sum of the originaly satisfied and maximum newly satisfied.\\n```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, X):\\n        i = original_satisfied = new_satisfied = max_new_satisfied = 0\\n        for j in range(len(customers)):\\n            original_satisfied += customers[j] * (not grumpy[j])\\n            new_satisfied += customers[j] * grumpy[j]                        \\n            if j - i == X:\\n                new_satisfied -= customers[i] * grumpy[i]\\n                i += 1\\n            max_new_satisfied = max(max_new_satisfied, new_satisfied)\\n        return original_satisfied + max_new_satisfied\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, X):\\n        i = original_satisfied = new_satisfied = max_new_satisfied = 0\\n        for j in range(len(customers)):\\n            original_satisfied += customers[j] * (not grumpy[j])\\n            new_satisfied += customers[j] * grumpy[j]                        \\n            if j - i == X:\\n                new_satisfied -= customers[i] * grumpy[i]\\n                i += 1\\n            max_new_satisfied = max(max_new_satisfied, new_satisfied)\\n        return original_satisfied + max_new_satisfied\\n```",
                "codeTag": "Java"
            },
            {
                "id": 441491,
                "title": "python-97-easy-to-understand-sliding-window-with-comments",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        # a sliding window approach\\n        currsum = 0\\n        # first store the sum as if the owner has no super power\\n        for i in range(len(grumpy)):\\n            if not grumpy[i]:\\n                currsum += customers[i]\\n        \\n        # now assuming he has the power, take the first window \\n        # and add to the previous sum\\n        for i in range(X):\\n            if grumpy[i]:\\n                currsum += customers[i]\\n        \\n        maxsum = currsum\\n        \\n        # Now the sliding window starts\\n        # i and j are the two opposite ends of the window\\n        i = 0\\n        j = X\\n        while j < len(customers):\\n            if grumpy[j]:\\n                currsum += customers[j]\\n            if grumpy[i]:\\n                currsum -= customers[i]\\n\\t\\t\\t# we subtract above as the window has already passed over that customer\\n            if currsum > maxsum:\\n                maxsum = currsum\\n            i += 1\\n            j += 1\\n        return maxsum\\n```\\n\\nCredits to this medium post: https://medium.com/@saurav.agg19/grumpy-bookstore-owner-sliding-window-problem-cff215a7b28c",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        # a sliding window approach\\n        currsum = 0\\n        # first store the sum as if the owner has no super power\\n        for i in range(len(grumpy)):\\n            if not grumpy[i]:\\n                currsum += customers[i]\\n        \\n        # now assuming he has the power, take the first window \\n        # and add to the previous sum\\n        for i in range(X):\\n            if grumpy[i]:\\n                currsum += customers[i]\\n        \\n        maxsum = currsum\\n        \\n        # Now the sliding window starts\\n        # i and j are the two opposite ends of the window\\n        i = 0\\n        j = X\\n        while j < len(customers):\\n            if grumpy[j]:\\n                currsum += customers[j]\\n            if grumpy[i]:\\n                currsum -= customers[i]\\n\\t\\t\\t# we subtract above as the window has already passed over that customer\\n            if currsum > maxsum:\\n                maxsum = currsum\\n            i += 1\\n            j += 1\\n        return maxsum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299281,
                "title": "java-solution-o-n",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int maxGrumpy = 0;\\n        int happy =0;\\n        int g=0;\\n        for(int i=0;i<customers.length;i++) {\\n            if(i>=X) {\\n                g = g - (customers[i-X] * grumpy[i-X]);\\n            } \\n            g += (customers[i] * grumpy[i]);\\n            maxGrumpy = Math.max(maxGrumpy, g);\\n            if(grumpy[i] == 0) {\\n                happy+=customers[i];\\n            }\\n        }\\n        happy += maxGrumpy;\\n        return happy;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int maxGrumpy = 0;\\n        int happy =0;\\n        int g=0;\\n        for(int i=0;i<customers.length;i++) {\\n            if(i>=X) {\\n                g = g - (customers[i-X] * grumpy[i-X]);\\n            } \\n            g += (customers[i] * grumpy[i]);\\n            maxGrumpy = Math.max(maxGrumpy, g);\\n            if(grumpy[i] == 0) {\\n                happy+=customers[i];\\n            }\\n        }\\n        happy += maxGrumpy;\\n        return happy;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3851886,
                "title": "0-n-approach-clean-and-readable-commented-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- maximize finding correct position for  secret technique  minutes.\\n- for getting  maximum  no. of customer satisfy in that secret technique minute when owner is grumpy \\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- sliding window \\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n- O(N)\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n- 0(N)\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n = customers.size();\\n\\n//------------ base case when minutes >= n -------------------------------//\\n     if( n<= minutes){\\n          int sum =0; \\n          for( int i =0; i<n; i++) sum += customers[i];\\n          return sum ;\\n     }\\n\\n\\n         vector<int>grumpyTrack(n ,0); \\n\\n//----------------store the customer who visit when owner is grumpy------------------//\\n         int sum =0;\\n      for(int i =0; i<n; i++){\\n           if(grumpy[i]==1){\\n          grumpyTrack[i]= customers[i];\\n           }\\n        \\n      }\\n\\n//---------fix sliding window -----------------//\\n\\n//-- this for maximize no. of customer satisfy  using secret technique when owner  is grumpy ---------//\\n\\nint i =0 , j = minutes-1; \\n int  maximumSatisfaction    = 0;\\n\\nfor( int k=i; k<=j ; k++){\\n     sum += grumpyTrack[k];\\n}\\n\\nint timeStart =0 , timeEnd = 0; \\n\\nif( maximumSatisfaction < sum  ){\\nmaximumSatisfaction  = sum ; \\ntimeStart = i; \\ntimeEnd = j;\\n}\\nj++;\\n\\nwhile( j<n){\\nsum -= grumpyTrack[i];\\ni++;\\n\\nsum += grumpyTrack[j];\\nif( maximumSatisfaction  < sum  ){\\nmaximumSatisfaction  = sum ; \\ntimeStart = i; \\ntimeEnd = j;\\n}\\nj++;\\n}\\n\\n// finding ans -----------//\\nint answer = 0; \\n\\nfor( int k=0; k<timeStart; k++){\\n     if( grumpy[k]==0) answer += customers[k]; \\n}\\n\\nfor( int k =timeStart ; k<=timeEnd; k++ ) answer += customers[k];\\n\\n\\nfor( int k=timeEnd+1; k<n; k++){\\n     if( grumpy[k]==0) answer += customers[k]; \\n}\\n\\n\\n\\n\\nreturn answer;\\n    }\\n\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n = customers.size();\\n\\n//------------ base case when minutes >= n -------------------------------//\\n     if( n<= minutes){\\n          int sum =0; \\n          for( int i =0; i<n; i++) sum += customers[i];\\n          return sum ;\\n     }\\n\\n\\n         vector<int>grumpyTrack(n ,0); \\n\\n//----------------store the customer who visit when owner is grumpy------------------//\\n         int sum =0;\\n      for(int i =0; i<n; i++){\\n           if(grumpy[i]==1){\\n          grumpyTrack[i]= customers[i];\\n           }\\n        \\n      }\\n\\n//---------fix sliding window -----------------//\\n\\n//-- this for maximize no. of customer satisfy  using secret technique when owner  is grumpy ---------//\\n\\nint i =0 , j = minutes-1; \\n int  maximumSatisfaction    = 0;\\n\\nfor( int k=i; k<=j ; k++){\\n     sum += grumpyTrack[k];\\n}\\n\\nint timeStart =0 , timeEnd = 0; \\n\\nif( maximumSatisfaction < sum  ){\\nmaximumSatisfaction  = sum ; \\ntimeStart = i; \\ntimeEnd = j;\\n}\\nj++;\\n\\nwhile( j<n){\\nsum -= grumpyTrack[i];\\ni++;\\n\\nsum += grumpyTrack[j];\\nif( maximumSatisfaction  < sum  ){\\nmaximumSatisfaction  = sum ; \\ntimeStart = i; \\ntimeEnd = j;\\n}\\nj++;\\n}\\n\\n// finding ans -----------//\\nint answer = 0; \\n\\nfor( int k=0; k<timeStart; k++){\\n     if( grumpy[k]==0) answer += customers[k]; \\n}\\n\\nfor( int k =timeStart ; k<=timeEnd; k++ ) answer += customers[k];\\n\\n\\nfor( int k=timeEnd+1; k<n; k++){\\n     if( grumpy[k]==0) answer += customers[k]; \\n}\\n\\n\\n\\n\\nreturn answer;\\n    }\\n\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3697558,
                "title": "easy-c-solution-simple-approach-with-explanation-o-n-time-complexity",
                "content": "# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int sum = 0, mx = 0, unsat = 0;\\n        for(int i=0; i<customers.size(); i++){\\n            sum += customers[i];  //Total customers\\n            customers[i] *= grumpy[i]; \\n            unsat += customers[i]; // Toal customers when shopkeeper is grumpy\\n        }\\n        for(int i=0; i<=customers.size()-minutes; i++)\\n        {\\n            int k = minutes, count = 0, j = i;\\n            while(k--)\\n                count += customers[j++]; \\n            if(count>mx)\\n                mx = count; // Maximum customers coming in the minutes window when shopkeeper can control themself\\n        }\\n    return sum - unsat + mx; \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int sum = 0, mx = 0, unsat = 0;\\n        for(int i=0; i<customers.size(); i++){\\n            sum += customers[i];  //Total customers\\n            customers[i] *= grumpy[i]; \\n            unsat += customers[i]; // Toal customers when shopkeeper is grumpy\\n        }\\n        for(int i=0; i<=customers.size()-minutes; i++)\\n        {\\n            int k = minutes, count = 0, j = i;\\n            while(k--)\\n                count += customers[j++]; \\n            if(count>mx)\\n                mx = count; // Maximum customers coming in the minutes window when shopkeeper can control themself\\n        }\\n    return sum - unsat + mx; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3657372,
                "title": "java-sliding-window",
                "content": "# Approach\\n<!-- Describe your approach to solving the problem. -->\\nAt First, find out the maximum window sum of size `minutes` where `grumpy[i] = 1`\\nThen, find the $$totalSum $$where `grumpy[i] = 0` from index 0 to n - 1.\\nAt last, return `maximum window sum + totalSum`\\n\\n# Code\\n```\\nclass Solution {\\n    public static int maxWhenGrumpy(int[] cust, int[] g, int k) {\\n        int maxi = 0, i = 0, sum = 0, j = 0, n = cust.length;\\n        while (i < k) {\\n            if (g[i] == 1)\\n                sum += cust[i];\\n            i++;\\n        }\\n        maxi = Math.max(maxi, sum);\\n\\n        while (i < n) {\\n            if (g[j] == 1)\\n                sum -= cust[j];\\n            if (g[i] == 1)\\n                sum += cust[i];\\n            maxi = Math.max(maxi, sum);\\n            i++;\\n            j++;\\n        }\\n        return maxi;\\n\\n    }\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int max = 0, n = customers.length;\\n        max = maxWhenGrumpy(customers, grumpy, minutes);\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (grumpy[i] == 0)\\n                sum += customers[i];\\n        }\\n        return max + sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public static int maxWhenGrumpy(int[] cust, int[] g, int k) {\\n        int maxi = 0, i = 0, sum = 0, j = 0, n = cust.length;\\n        while (i < k) {\\n            if (g[i] == 1)\\n                sum += cust[i];\\n            i++;\\n        }\\n        maxi = Math.max(maxi, sum);\\n\\n        while (i < n) {\\n            if (g[j] == 1)\\n                sum -= cust[j];\\n            if (g[i] == 1)\\n                sum += cust[i];\\n            maxi = Math.max(maxi, sum);\\n            i++;\\n            j++;\\n        }\\n        return maxi;\\n\\n    }\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int max = 0, n = customers.length;\\n        max = maxWhenGrumpy(customers, grumpy, minutes);\\n        int sum = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (grumpy[i] == 0)\\n                sum += customers[i];\\n        }\\n        return max + sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3409048,
                "title": "sliding-window-explaination",
                "content": "The code starts by calculating the total number of customers satisfied when the owner is not grumpy.\\n\\nNext, a sliding window approach is used to iterate through all possible time periods of length \"minutes\". For each window, the total number of satisfied customers is calculated by subtracting the unsatisfied customers during grumpy periods (gSum) from the current window\\'s customer sum (curSum) and adding the previously calculated total number of satisfied customers (totalSum). The maximum number of satisfied customers across all windows is recorded and returned at the end.\\n\\nThe sliding window technique is efficient because it avoids recalculating the sum of customers for each new window. Instead, it subtracts the departing customer(s) from the current window and adds the arriving customer(s) to the current window. The grumpy period is taken into account by subtracting the unsatisfied customers during grumpy periods from the total customer sum.\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n        int i=0,j=0,curSum=0,totalSum=0,gSum=0,max=-1;\\n        for(int k=0;k<customers.length;k++){               // calculate total no of customers satisfied\\n            if(grumpy[k] == 0)                            \\n                totalSum += customers[k];\\n        }\\n\\n // you will be maintaining two sum, one is currSum means total sum of window\\n // another sum is gSum which means total window sum when owner is not grumpy\\n        while(j < customers.length){           \\n            curSum += customers[j];             // \\n            if(grumpy[j] == 0)\\n                gSum += customers[j];\\n            \\n            //every time you slide the window, update max\\n            if(j-i+1 == minutes){\\n                max = Math.max(max,totalSum-gSum+curSum);\\n                curSum -= customers[i];                  // update current window sum\\n                if(grumpy[i] == 0)                        //update currenst gSum \\n                    gSum -= customers[i];\\n                i++;\\n            }\\n            j++;\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C++",
                    "Java",
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n        int i=0,j=0,curSum=0,totalSum=0,gSum=0,max=-1;\\n        for(int k=0;k<customers.length;k++){               // calculate total no of customers satisfied\\n            if(grumpy[k] == 0)                            \\n                totalSum += customers[k];\\n        }\\n\\n // you will be maintaining two sum, one is currSum means total sum of window\\n // another sum is gSum which means total window sum when owner is not grumpy\\n        while(j < customers.length){           \\n            curSum += customers[j];             // \\n            if(grumpy[j] == 0)\\n                gSum += customers[j];\\n            \\n            //every time you slide the window, update max\\n            if(j-i+1 == minutes){\\n                max = Math.max(max,totalSum-gSum+curSum);\\n                curSum -= customers[i];                  // update current window sum\\n                if(grumpy[i] == 0)                        //update currenst gSum \\n                    gSum -= customers[i];\\n                i++;\\n            }\\n            j++;\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2695447,
                "title": "java-t-o-n-s-o-1-100-100-sliding-window",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int s=0;\\n        int e=minutes;\\n        int sum=0;\\n        for(int i=0; i<customers.length; i++) if(grumpy[i]==0) sum+=customers[i];\\n        int tot=0;\\n        for(int i=0; i<e; i++) if(grumpy[i]==1) tot+=customers[i];\\n        int n_tot=tot;\\n        for(int i=0; i<customers.length-minutes; i++){\\n            System.out.println(tot);\\n            if(grumpy[s]==1) n_tot-=customers[s];\\n            if(grumpy[e]==1) n_tot+=customers[e];\\n            tot=Math.max(tot, n_tot);\\n            s++;\\n            e++;\\n        }\\n        System.out.println(tot);\\n        return sum+tot;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int s=0;\\n        int e=minutes;\\n        int sum=0;\\n        for(int i=0; i<customers.length; i++) if(grumpy[i]==0) sum+=customers[i];\\n        int tot=0;\\n        for(int i=0; i<e; i++) if(grumpy[i]==1) tot+=customers[i];\\n        int n_tot=tot;\\n        for(int i=0; i<customers.length-minutes; i++){\\n            System.out.println(tot);\\n            if(grumpy[s]==1) n_tot-=customers[s];\\n            if(grumpy[e]==1) n_tot+=customers[e];\\n            tot=Math.max(tot, n_tot);\\n            s++;\\n            e++;\\n        }\\n        System.out.println(tot);\\n        return sum+tot;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2481497,
                "title": "c-best-solution-100-faster-explanation",
                "content": "***Time Complexity : O(N)\\nSpace Complexity : O(N)\\nIntuition :***\\nSo , Basic intuition should be :\\n1. ) We need to know the total  satisfied  customers before performing any flip(1->0) operations.\\n2. ) We check for sliding windows by iterating in a for loop , and perform atmost ***minutes** flips and then calculate the satisfied customers.\\n3. ) We need to find the which sliding window gives us the maximum number of ***total*** satisfied customers.\\n**NOTE :** ( we use ***sliding window*** here because we are asked to flip only ***consecutive*** values )\\n\\n***Process :***\\nFirst we calculate the total satisfied customers before performing any flips .\\nIn second loop ,we increment satisfied customers number of we  encounter 0 and size of window < minutes\\nIf size becomes > minutes, we decrement last of sliding window from satisfied customers ***only if*** , the last is 0.\\nThen we find maxSatisfied  as max from the current satisfied and maxsatisfied.\\n**UPVOTE IF YOU LIKE** \\uD83D\\uDE07\\u2705\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=grumpy.size();\\n        int satisfied=0,size=0;\\n        for(int i=0;i<n;i++){ if(grumpy[i]==0)satisfied+=customers[i]; }\\n\\t\\t\\n        int maxSatisfied=satisfied;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1)satisfied+=customers[i];\\n            size++;\\n            if(size>minutes){\\n                if(grumpy[i-minutes]==1)satisfied-=customers[i-minutes];\\n                size--;\\n            }\\n            maxSatisfied=max(satisfied,maxSatisfied);\\n        }\\n        return maxSatisfied;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=grumpy.size();\\n        int satisfied=0,size=0;\\n        for(int i=0;i<n;i++){ if(grumpy[i]==0)satisfied+=customers[i]; }\\n\\t\\t\\n        int maxSatisfied=satisfied;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1)satisfied+=customers[i];\\n            size++;\\n            if(size>minutes){\\n                if(grumpy[i-minutes]==1)satisfied-=customers[i-minutes];\\n                size--;\\n            }\\n            maxSatisfied=max(satisfied,maxSatisfied);\\n        }\\n        return maxSatisfied;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1890002,
                "title": "c-simple-sliding-window-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int sum = 0; \\n        for(int i = 0;i<k;i++) {\\n            sum += customers[i] * grumpy[i];\\n        }\\n        int t = sum; \\n        for(int i = k;i<customers.size();i++) {\\n            sum += customers[i] * grumpy[i];\\n            sum -= customers[i-k] * grumpy[i-k];\\n            t = max(t,sum);\\n        }\\n        sum = 0; \\n        for(int i = 0;i<customers.size();i++) {\\n            sum += customers[i] * (1- grumpy[i]);\\n        }\\n        return sum + t; \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int sum = 0; \\n        for(int i = 0;i<k;i++) {\\n            sum += customers[i] * grumpy[i];\\n        }\\n        int t = sum; \\n        for(int i = k;i<customers.size();i++) {\\n            sum += customers[i] * grumpy[i];\\n            sum -= customers[i-k] * grumpy[i-k];\\n            t = max(t,sum);\\n        }\\n        sum = 0; \\n        for(int i = 0;i<customers.size();i++) {\\n            sum += customers[i] * (1- grumpy[i]);\\n        }\\n        return sum + t; \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1764702,
                "title": "sliding-window-with-basic-concepts",
                "content": "Dont panic question is easy af just you have to take all customers who are not facing that grumpy face and imortant step is will make them equal to zero so we will not add them in future. let add their sum in \"DIRECT\" variable.  After that we will come with our approach sliding window here, we have to make window of minutes size and store the maximum in variable \"INDIRECT\" now, add INDIRECT AND DIRECT\\nBOOM!! YOUR ANSWER\\nIf you like the solution, upvote!!\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int direct = 0, indirect = 0;\\n        for(int i = 0;i<customers.size();i++)\\n        {\\n            if(!grumpy[i]) \\n            {\\n                direct+=customers[i];\\n                customers[i] = 0;\\n            }\\n        }\\n        int j = 0;\\n        for( j = 0;j<minutes;j++)\\n        {\\n            indirect+=customers[j];\\n        }\\n        int curr = indirect;\\n        while(j<customers.size())\\n        {\\n            curr += customers[j];\\n            curr -= customers[j-minutes];\\n            indirect = max(indirect, curr);\\n            j++;\\n        }\\n        return indirect+direct;\\n    }\\n};\\n",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int direct = 0, indirect = 0;\\n        for(int i = 0;i<customers.size();i++)\\n        {\\n            if(!grumpy[i]) \\n            {\\n                direct+=customers[i];\\n                customers[i] = 0;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1712076,
                "title": "sliding-window-rolling-sum-python-3",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        satisfied=0\\n        n=len(grumpy)\\n        satisfied=sum([customers[i]*(1-grumpy[i]) for i in range(n)])\\n        max_satisfied=satisfied\\n        for i in range(n):\\n            if grumpy[i]==1: satisfied+=customers[i]    \\n            if i>=minutes:\\n                if grumpy[i-minutes]==1: satisfied-=customers[i-minutes]\\n            max_satisfied=max(satisfied,max_satisfied)\\n        return max_satisfied\\n\\t\\t```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        satisfied=0\\n        n=len(grumpy)\\n        satisfied=sum([customers[i]*(1-grumpy[i]) for i in range(n)])\\n        max_satisfied=satisfied\\n        for i in range(n):\\n            if grumpy[i]==1: satisfied+=customers[i]    \\n            if i>=minutes:\\n                if grumpy[i-minutes]==1: satisfied-=customers[i-minutes]\\n            max_satisfied=max(satisfied,max_satisfied)\\n        return max_satisfied\\n\\t\\t```",
                "codeTag": "Java"
            },
            {
                "id": 1580210,
                "title": "easy-for-beginers-sliding-window-problem-faster-than-94",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        n = len(customers)\\n        res = 0\\n        for i in range(n):\\n            if grumpy[i] == 0:\\n                res += customers[i]\\n        sum1 = 0        \\n        for i in range(minutes):\\n            if grumpy[i] == 1:\\n                sum1 += customers[i]\\n                \\n        result = sum1\\n        for r in range(minutes, n):\\n            if grumpy[r] == 1:\\n                sum1 += customers[r]\\n            if grumpy[r - minutes] == 1:\\n                sum1 -= customers[r - minutes]\\n            result = max(sum1, result)\\n        \\n        return res + result \\n\\n\\n\\n```\\n\\n",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        n = len(customers)\\n        res = 0\\n        for i in range(n):\\n            if grumpy[i] == 0:\\n                res += customers[i]\\n        sum1 = 0        \\n        for i in range(minutes):\\n            if grumpy[i] == 1:\\n                sum1 += customers[i]\\n                \\n        result = sum1\\n        for r in range(minutes, n):\\n            if grumpy[r] == 1:\\n                sum1 += customers[r]\\n            if grumpy[r - minutes] == 1:\\n                sum1 -= customers[r - minutes]\\n            result = max(sum1, result)\\n        \\n        return res + result \\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1557204,
                "title": "c-easy-to-understand-code",
                "content": "```\\nclass Solution\\n{\\npublic:\\n    int maxSatisfied(vector<int> &customers, vector<int> &grumpy, int minutes)\\n    {\\n        int count = 0;\\n        int maxi = 0;\\n\\n        for (int i = 0; i < grumpy.size(); i++)\\n        {\\n            if (grumpy[i] == 0)\\n            {\\n                count += customers[i];\\n            }\\n        }\\n\\n        int n = grumpy.size() - minutes + 1;\\n\\n        int c = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            for (int j = i; j < i + minutes - 1; j++)\\n            {\\n                if (grumpy[j] == 1)\\n                {\\n                    c += customers[j];\\n                }\\n            }\\n            maxi = max(maxi, c);\\n            c = 0;\\n        }\\n\\n        return count + maxi;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n    int maxSatisfied(vector<int> &customers, vector<int> &grumpy, int minutes)\\n    {\\n        int count = 0;\\n        int maxi = 0;\\n\\n        for (int i = 0; i < grumpy.size(); i++)\\n        {\\n            if (grumpy[i] == 0)\\n            {\\n                count += customers[i];\\n            }\\n        }\\n\\n        int n = grumpy.size() - minutes + 1;\\n\\n        int c = 0;\\n        for (int i = 0; i < n; i++)\\n        {\\n            for (int j = i; j < i + minutes - 1; j++)\\n            {\\n                if (grumpy[j] == 1)\\n                {\\n                    c += customers[j];\\n                }\\n            }\\n            maxi = max(maxi, c);\\n            c = 0;\\n        }\\n\\n        return count + maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1081923,
                "title": "java-sliding-window-beats-98-60-2ms-o-x-customers-length",
                "content": "\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int si = 0, ei = X - 1, ans = 0, max = 0, temp = 0, len = customers.length, msi = 0, mei = X - 1;\\n\\t\\tfor (int i = 0; i < X; i++) {\\n\\t\\t\\tif (grumpy[i] == 1)\\n\\t\\t\\t\\ttemp += customers[i];\\n\\t\\t}\\n\\t\\tmax = temp;\\n\\n\\t\\twhile (si < len - X) {\\n\\t\\t\\ttemp = temp - ((grumpy[si] == 1) ? customers[si] : 0);\\n\\t\\t\\tsi++;\\n\\t\\t\\tei++;\\n\\t\\t\\ttemp = temp + ((grumpy[ei] == 1) ? customers[ei] : 0);\\n\\t\\t\\tif (temp > max) {\\n\\t\\t\\t\\tmax = temp;\\n\\t\\t\\t\\tmsi = si;\\n\\t\\t\\t\\tmei = ei;\\n\\t\\t\\t}\\n\\t\\t}\\n        \\n\\t\\tfor (int i = msi; i <= mei; i++)\\n\\t\\t\\tans += customers[i];\\n        \\n\\t\\tfor (int i = 0; i < msi; i++)\\n\\t\\t\\tans = ans + ((grumpy[i] == 0) ? customers[i] : 0);\\n        \\n\\t\\tfor (int i = mei + 1; i < len; i++)\\n\\t\\t\\tans = ans + ((grumpy[i] == 0) ? customers[i] : 0);\\n\\n\\t\\treturn ans;\\n    }\\n",
                "solutionTags": [],
                "code": "\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int si = 0, ei = X - 1, ans = 0, max = 0, temp = 0, len = customers.length, msi = 0, mei = X - 1;\\n\\t\\tfor (int i = 0; i < X; i++) {\\n\\t\\t\\tif (grumpy[i] == 1)\\n\\t\\t\\t\\ttemp += customers[i];\\n\\t\\t}\\n\\t\\tmax = temp;\\n\\n\\t\\twhile (si < len - X) {\\n\\t\\t\\ttemp = temp - ((grumpy[si] == 1) ? customers[si] : 0);\\n\\t\\t\\tsi++;\\n\\t\\t\\tei++;\\n\\t\\t\\ttemp = temp + ((grumpy[ei] == 1) ? customers[ei] : 0);\\n\\t\\t\\tif (temp > max) {\\n\\t\\t\\t\\tmax = temp;\\n\\t\\t\\t\\tmsi = si;\\n\\t\\t\\t\\tmei = ei;\\n\\t\\t\\t}\\n\\t\\t}\\n        \\n\\t\\tfor (int i = msi; i <= mei; i++)\\n\\t\\t\\tans += customers[i];\\n        \\n\\t\\tfor (int i = 0; i < msi; i++)\\n\\t\\t\\tans = ans + ((grumpy[i] == 0) ? customers[i] : 0);\\n        \\n\\t\\tfor (int i = mei + 1; i < len; i++)\\n\\t\\t\\tans = ans + ((grumpy[i] == 0) ? customers[i] : 0);\\n\\n\\t\\treturn ans;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 1073984,
                "title": "java-solution-3-ms-using-sliding-window",
                "content": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n\\n        int satisfiedCustomer = 0;\\n\\n        int l = 0;\\n        int maxUnSatisfiedCustomer = 0;\\n        int unSatisfiedCustomer = 0;\\n        \\n        \\n        for(int r = 0; r < grumpy.length; r++){\\n            \\n            if(grumpy[r] == 1){\\n                unSatisfiedCustomer += customers[r];\\n            }else {\\n                satisfiedCustomer += customers[r];\\n            }\\n            \\n            if(r - l + 1 > X){\\n                if(grumpy[l] == 1){\\n                     unSatisfiedCustomer -= customers[l];\\n                 }\\n                l++;\\n            }\\n            \\n            maxUnSatisfiedCustomer = Math.max(maxUnSatisfiedCustomer, unSatisfiedCustomer);\\n        }\\n        \\n        \\n       return satisfiedCustomer + maxUnSatisfiedCustomer;\\n    }\\n    \\n\\n}",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n\\n        int satisfiedCustomer = 0;\\n\\n        int l = 0;\\n        int maxUnSatisfiedCustomer = 0;\\n        int unSatisfiedCustomer = 0;\\n        \\n        \\n        for(int r = 0; r < grumpy.length; r++){\\n            \\n            if(grumpy[r] == 1){\\n                unSatisfiedCustomer += customers[r];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1028693,
                "title": "java-sliding-window-with-explaination",
                "content": "```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int[] window = new int[X];\\n        // find max customer satis faction without considering the X minutes of secret technique\\n        // sum all customers when owner is not grumpy\\n        int totalCustomerWithNoGrumpyOwner = 0;\\n        for(int i=0;i<customers.length;i++) {\\n            if(grumpy[i] ==0) {\\n                totalCustomerWithNoGrumpyOwner += customers[i];\\n            }\\n        }\\n        // now we use sliding window technique to find total customer satisfaction in each of the X minutes window\\n        // also we find total customer satisfied outside of the window, \\n        // we sum the 2 numbers that gives total customer satisfied with the given window and we find max as we do so.\\n        int windowCustomer = 0;\\n        int windowCusomterWithNoGrumpyOwner = 0;\\n        int left=0;\\n        int maxSatisfiedCustomer =0;\\n        for(int right=0;right<customers.length;right++) {\\n            if(grumpy[right] == 0) {\\n                windowCusomterWithNoGrumpyOwner += customers[right];\\n            }\\n            windowCustomer += customers[right];\\n            if(right >= X-1) {\\n                int customerSatisfiedOutsideWindow = totalCustomerWithNoGrumpyOwner - windowCusomterWithNoGrumpyOwner;\\n                // total satisfied = customer satisfied with X window and customer satisfied with non grumpy owner outside the window\\n                maxSatisfiedCustomer = Math.max(maxSatisfiedCustomer, windowCustomer + customerSatisfiedOutsideWindow);\\n                // as window moves right ward we remove customers from left side of the window\\n                windowCustomer -= customers[left];\\n                if(grumpy[left] ==0) {\\n                    windowCusomterWithNoGrumpyOwner -= customers[left];\\n                }\\n                left++;\\n            }\\n            \\n        }\\n        return maxSatisfiedCustomer;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int[] window = new int[X];\\n        // find max customer satis faction without considering the X minutes of secret technique\\n        // sum all customers when owner is not grumpy\\n        int totalCustomerWithNoGrumpyOwner = 0;\\n        for(int i=0;i<customers.length;i++) {\\n            if(grumpy[i] ==0) {\\n                totalCustomerWithNoGrumpyOwner += customers[i];\\n            }\\n        }\\n        // now we use sliding window technique to find total customer satisfaction in each of the X minutes window\\n        // also we find total customer satisfied outside of the window, \\n        // we sum the 2 numbers that gives total customer satisfied with the given window and we find max as we do so.\\n        int windowCustomer = 0;\\n        int windowCusomterWithNoGrumpyOwner = 0;\\n        int left=0;\\n        int maxSatisfiedCustomer =0;\\n        for(int right=0;right<customers.length;right++) {\\n            if(grumpy[right] == 0) {\\n                windowCusomterWithNoGrumpyOwner += customers[right];\\n            }\\n            windowCustomer += customers[right];\\n            if(right >= X-1) {\\n                int customerSatisfiedOutsideWindow = totalCustomerWithNoGrumpyOwner - windowCusomterWithNoGrumpyOwner;\\n                // total satisfied = customer satisfied with X window and customer satisfied with non grumpy owner outside the window\\n                maxSatisfiedCustomer = Math.max(maxSatisfiedCustomer, windowCustomer + customerSatisfiedOutsideWindow);\\n                // as window moves right ward we remove customers from left side of the window\\n                windowCustomer -= customers[left];\\n                if(grumpy[left] ==0) {\\n                    windowCusomterWithNoGrumpyOwner -= customers[left];\\n                }\\n                left++;\\n            }\\n            \\n        }\\n        return maxSatisfiedCustomer;\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 951750,
                "title": "resolving-bud-property-explanation-brute-force-sliding-window",
                "content": "### Approach 1:- Brute Force\\n**P.S. -- I love to find BUD property in every problem :)**\\n```\\nclass Solution {\\npublic:\\n\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\n\\t\\tint result = -1;\\n\\t\\tint n = grumpy.size();\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tfor (int j = i; j < min(n, i + X) ; j++) {  // bottle neck (wanting here to do all work at one go) --- sliding window\\n\\n\\t\\t\\t\\tint save = 0;\\n\\t\\t\\t\\tfor (int k = i; k <= j; k++) {   // duplicate (again again sub array(window)) --- sliding window\\n\\t\\t\\t\\t\\tsave += customers[k];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (int it = 0; it < n; it++) {   //unnecessary work (non-grumpy calculate) --- pre-calculate/prefix\\n\\t\\t\\t\\t\\tif (it >= i && it <= j) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (grumpy[it] == 0) {\\n\\t\\t\\t\\t\\t\\tsave += customers[it];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tresult = max(save, result);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n};\\n```\\n\\n### Approach 2: After checking BUD, Sliding Window\\n***P.S. -- I have taken the naming in very effective way. Hope it adds more to your thinking***\\n```\\nclass Solution {\\npublic:\\n\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\t\\tauto totalGrumpySum = 0, windowNonGrumpySum = 0, result = 0;\\n\\n\\t\\tfor (int i = 0; i < customers.size(); i++) {\\n\\n\\t\\t\\ttotalGrumpySum +=  grumpy[i] ? 0 : customers[i];\\n\\t\\t\\twindowNonGrumpySum += grumpy[i] ? customers[i] : 0;\\n\\n\\t\\t\\tif (i >= X) {\\n\\t\\t\\t\\twindowNonGrumpySum -= grumpy[i - X] ? customers[i - X] : 0;\\n\\t\\t\\t}\\n\\t\\t\\tresult = max(result, windowNonGrumpySum);\\n\\t\\t}\\n\\n\\t\\treturn totalGrumpySum + result;\\n\\t}\\n};\\n```\\n**If anything from here helps you, UpVote this so others can also get somethign from this...**",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\n\\t\\tint result = -1;\\n\\t\\tint n = grumpy.size();\\n\\n\\t\\tfor (int i = 0; i < n; i++) {\\n\\t\\t\\tfor (int j = i; j < min(n, i + X) ; j++) {  // bottle neck (wanting here to do all work at one go) --- sliding window\\n\\n\\t\\t\\t\\tint save = 0;\\n\\t\\t\\t\\tfor (int k = i; k <= j; k++) {   // duplicate (again again sub array(window)) --- sliding window\\n\\t\\t\\t\\t\\tsave += customers[k];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tfor (int it = 0; it < n; it++) {   //unnecessary work (non-grumpy calculate) --- pre-calculate/prefix\\n\\t\\t\\t\\t\\tif (it >= i && it <= j) {\\n\\t\\t\\t\\t\\t\\tcontinue;\\n\\t\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\t\\tif (grumpy[it] == 0) {\\n\\t\\t\\t\\t\\t\\tsave += customers[it];\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\tresult = max(save, result);\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\treturn result;\\n\\t}\\n};\\n```\n```\\nclass Solution {\\npublic:\\n\\tint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n\\t\\tauto totalGrumpySum = 0, windowNonGrumpySum = 0, result = 0;\\n\\n\\t\\tfor (int i = 0; i < customers.size(); i++) {\\n\\n\\t\\t\\ttotalGrumpySum +=  grumpy[i] ? 0 : customers[i];\\n\\t\\t\\twindowNonGrumpySum += grumpy[i] ? customers[i] : 0;\\n\\n\\t\\t\\tif (i >= X) {\\n\\t\\t\\t\\twindowNonGrumpySum -= grumpy[i - X] ? customers[i - X] : 0;\\n\\t\\t\\t}\\n\\t\\t\\tresult = max(result, windowNonGrumpySum);\\n\\t\\t}\\n\\n\\t\\treturn totalGrumpySum + result;\\n\\t}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 854470,
                "title": "java-simple-solution",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int ans = 0;\\n        int count = 0;\\n        for(int i = 0 ; i < customers.length ; i++)\\n            if(grumpy[i] == 0) count += customers[i];\\n        for(int i = 0 ; i < X ; i++)\\n            if(grumpy[i] == 1) count += customers[i];\\n        ans = count;\\n        for(int i = X ; i < customers.length ; i++){\\n            if(grumpy[i - X] == 1) count -= customers[i - X];\\n            if(grumpy[i] == 1) count += customers[i];\\n            ans = Math.max(ans,count);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int ans = 0;\\n        int count = 0;\\n        for(int i = 0 ; i < customers.length ; i++)\\n            if(grumpy[i] == 0) count += customers[i];\\n        for(int i = 0 ; i < X ; i++)\\n            if(grumpy[i] == 1) count += customers[i];\\n        ans = count;\\n        for(int i = X ; i < customers.length ; i++){\\n            if(grumpy[i - X] == 1) count -= customers[i - X];\\n            if(grumpy[i] == 1) count += customers[i];\\n            ans = Math.max(ans,count);\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 650196,
                "title": "java-sliding-window-beats-97-5",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int sum = 0;\\n        for (int i =0;i<customers.length;i++){\\n            if (grumpy[i] == 0)\\n                sum += customers[i];\\n        }\\n        int maxsum = 0;\\n        maxsum = sum;\\n        for(int i =0;i<X;i++){\\n            if (grumpy[i] == 1)\\n                sum += customers[i];\\n        }\\n        if (sum > maxsum)\\n            maxsum = sum;\\n        int j = X;\\n        int i = 0;\\n        while (j< customers.length){\\n            if(grumpy[j] == 1)\\n                sum += customers[j];\\n            if(grumpy[i] == 1)\\n                sum -= customers[i];\\n            if (sum > maxsum)\\n                maxsum = sum;\\n            i++;\\n            j++;\\n        }\\n        return maxsum;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int sum = 0;\\n        for (int i =0;i<customers.length;i++){\\n            if (grumpy[i] == 0)\\n                sum += customers[i];\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 542740,
                "title": "c-prefix-sum-with-sliding-window-91-speed-100-memory",
                "content": "Get current total of satisfied customers--this won\\'t change. Populate a prefix sum array of currently unsatisfied customers to facilitate sliding window calculations. Use sliding window analysis with the prefix sum to find the maximum amount of unsatisfied customers within a range of length X, add to total satisfied customers and return.\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n        //Get the current total of satisfied customers\\n        int satisfied = 0;\\n        for (int i = 0; i < customers.size(); i++){\\n            if (grumpy[i] == 0){\\n                satisfied += customers[i];\\n            }\\n        }\\n        \\n        //Cumulative sum of grumpy customers at each position in customers array\\n        vector<int>prefix (customers.size()+1,0);\\n        for (int i = 1; i <= customers.size(); i++){\\n            if (grumpy[i-1] == 1){\\n                prefix[i] = customers[i-1]+prefix[i-1];\\n            } else {\\n                prefix[i] = prefix[i-1];   \\n            }\\n        }\\n        \\n        //get the maximum possible capture of grumpy customers in a subarray of length X\\n        int maxchange = 0;\\n        for (int i = X; i < prefix.size(); i++){\\n            maxchange = max(maxchange,prefix[i]-prefix[i-X]); \\n        }\\n        \\n        return satisfied+maxchange;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        \\n        //Get the current total of satisfied customers\\n        int satisfied = 0;\\n        for (int i = 0; i < customers.size(); i++){\\n            if (grumpy[i] == 0){\\n                satisfied += customers[i];\\n            }\\n        }\\n        \\n        //Cumulative sum of grumpy customers at each position in customers array\\n        vector<int>prefix (customers.size()+1,0);\\n        for (int i = 1; i <= customers.size(); i++){\\n            if (grumpy[i-1] == 1){\\n                prefix[i] = customers[i-1]+prefix[i-1];\\n            } else {\\n                prefix[i] = prefix[i-1];   \\n            }\\n        }\\n        \\n        //get the maximum possible capture of grumpy customers in a subarray of length X\\n        int maxchange = 0;\\n        for (int i = X; i < prefix.size(); i++){\\n            maxchange = max(maxchange,prefix[i]-prefix[i-X]); \\n        }\\n        \\n        return satisfied+maxchange;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 519190,
                "title": "java-99-solution",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        //we have a sliding window for X, l is left index, r is right index\\n        int l = 0;\\n        int r = X-1;\\n        int num = 0;\\n        \\n        //first put the window to the most left\\n        for(int i = 0 ; i < customers.length ; i++){\\n            if(i < X || grumpy[i] == 0)\\n                num += customers[i];\\n        }\\n        \\n        int max = num;\\n        \\n        //slide the window to the right and update the happy number\\n        for(r = r + 1 ;r < customers.length ; r++,l++){\\n            //gain\\n            if(grumpy[r] == 1){\\n                num += customers[r]; \\n            }\\n            //lose\\n            if(grumpy[l] == 1){\\n                num -= customers[l];\\n            }\\n            max = Math.max(max, num);\\n        }\\n        \\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        //we have a sliding window for X, l is left index, r is right index\\n        int l = 0;\\n        int r = X-1;\\n        int num = 0;\\n        \\n        //first put the window to the most left\\n        for(int i = 0 ; i < customers.length ; i++){\\n            if(i < X || grumpy[i] == 0)\\n                num += customers[i];\\n        }\\n        \\n        int max = num;\\n        \\n        //slide the window to the right and update the happy number\\n        for(r = r + 1 ;r < customers.length ; r++,l++){\\n            //gain\\n            if(grumpy[r] == 1){\\n                num += customers[r]; \\n            }\\n            //lose\\n            if(grumpy[l] == 1){\\n                num -= customers[l];\\n            }\\n            max = Math.max(max, num);\\n        }\\n        \\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 513632,
                "title": "python3-sliding-window",
                "content": "1. Iterate through customers. Account for the already satisfied customer and store the total satisfaction in \"temp\". Modify the customers array by setting  already satisfied customers\\' value to 0, so that you don\\'t double count satisfaction the next step\\n2. Do a sliding window of size X on the modified customers array. Find which window added to \"temp\" is the maximum\\n\\nAsk questions in comments. I\\'ll do my best to answer\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        temp=0\\n        n=len(customers)\\n        \\n        for i in range(n):\\n            if grumpy[i]==0:\\n                temp+=customers[i]\\n                customers[i]=0\\n        \\n        left=0\\n        right=0\\n        res=0\\n        \\n        while right<n:\\n            while right-left<X and right<n:\\n                temp+=customers[right]\\n                right+=1\\n            res=max(res,temp)\\n            temp-=customers[left]\\n            left+=1\\n            \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        temp=0\\n        n=len(customers)\\n        \\n        for i in range(n):\\n            if grumpy[i]==0:\\n                temp+=customers[i]\\n                customers[i]=0\\n        \\n        left=0\\n        right=0\\n        res=0\\n        \\n        while right<n:\\n            while right-left<X and right<n:\\n                temp+=customers[right]\\n                right+=1\\n            res=max(res,temp)\\n            temp-=customers[left]\\n            left+=1\\n            \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 367798,
                "title": "javascript-sliding-window",
                "content": "Javascript sliding window \\uD83E\\uDD37\\u200D\\u2642\\uFE0F\\n\\n``` javascript\\n/**\\n * @param {number[]} customers\\n * @param {number[]} grumpy\\n * @param {number} X\\n * @return {number}\\n */\\nvar maxSatisfied = function(customers, grumpy, X) {\\n\\n    // Get base satisfaction assuming X === 0\\n    let totalSatisfaction = 0;\\n    for (let i = 0; i < customers.length; i++) if (!grumpy[i]) totalSatisfaction += customers[i];\\n    \\n    \\n    // Handle some easy edge cases\\n    if (X === 0) return totalSatisfaction;\\n    if (customers.length < X) return customers.reduce((acc, current) => acc + current, 0);\\n    \\n    \\n    // Use a sliding window of size X including customers that\\n    // would have been previously exluded when they were grumpy\\n    \\n    let slidingWindowSum = totalSatisfaction;\\n    let maxSum = totalSatisfaction;\\n    let currentEndPosition = -1;\\n    \\n    while (currentEndPosition < customers.length - 1) {\\n        currentEndPosition += 1;\\n        const previousStartPosition = currentEndPosition - X;\\n        \\n        if (previousStartPosition >= 0 && grumpy[previousStartPosition]) slidingWindowSum -= customers[previousStartPosition];\\n        if (grumpy[currentEndPosition]) slidingWindowSum += customers[currentEndPosition];\\n        \\n        maxSum = Math.max(slidingWindowSum, maxSum);\\n    }\\n    \\n    return maxSum;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "``` javascript\\n/**\\n * @param {number[]} customers\\n * @param {number[]} grumpy\\n * @param {number} X\\n * @return {number}\\n */\\nvar maxSatisfied = function(customers, grumpy, X) {\\n\\n    // Get base satisfaction assuming X === 0\\n    let totalSatisfaction = 0;\\n    for (let i = 0; i < customers.length; i++) if (!grumpy[i]) totalSatisfaction += customers[i];\\n    \\n    \\n    // Handle some easy edge cases\\n    if (X === 0) return totalSatisfaction;\\n    if (customers.length < X) return customers.reduce((acc, current) => acc + current, 0);\\n    \\n    \\n    // Use a sliding window of size X including customers that\\n    // would have been previously exluded when they were grumpy\\n    \\n    let slidingWindowSum = totalSatisfaction;\\n    let maxSum = totalSatisfaction;\\n    let currentEndPosition = -1;\\n    \\n    while (currentEndPosition < customers.length - 1) {\\n        currentEndPosition += 1;\\n        const previousStartPosition = currentEndPosition - X;\\n        \\n        if (previousStartPosition >= 0 && grumpy[previousStartPosition]) slidingWindowSum -= customers[previousStartPosition];\\n        if (grumpy[currentEndPosition]) slidingWindowSum += customers[currentEndPosition];\\n        \\n        maxSum = Math.max(slidingWindowSum, maxSum);\\n    }\\n    \\n    return maxSum;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 299363,
                "title": "python-one-pass-sliding-window-100-with-explanations",
                "content": "One pass iteration for two tasks:\\n1. Accumulate the count of customers satified without the \"happy pill\". The variable \"total_sat\" below keeps track of it.\\n2. Since the happy pill last for \\'X\\' days. Maintain a sliding window of size \\'X\\', keep track of how many customers who were turned from unhappy to happy with the pill. Variable \\'gains\\' keeps track of the number of \\'high\\' customers within the window. \\'max_gains\\' is the global running max.\\n\\nResult obviously shall be the number of customers who are otherwise happy anyway plus the max number of people who got \\'high\\' on the happy pill.\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        total_sat, max_gains, gains = 0, 0, 0\\n        i = 0\\n        for j, (c, g) in enumerate(zip(customers, grumpy)):\\n            if j - X == i:\\n                gains -= customers[i] * (grumpy[i]==1)\\n                i += 1 \\n            total_sat += c * (g==0)\\n            gains += c * (g==1)\\n            max_gains = max(max_gains, gains)\\n            \\n        return total_sat + max_gains\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Greedy",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        total_sat, max_gains, gains = 0, 0, 0\\n        i = 0\\n        for j, (c, g) in enumerate(zip(customers, grumpy)):\\n            if j - X == i:\\n                gains -= customers[i] * (grumpy[i]==1)\\n                i += 1 \\n            total_sat += c * (g==0)\\n            gains += c * (g==1)\\n            max_gains = max(max_gains, gains)\\n            \\n        return total_sat + max_gains\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3938203,
                "title": "easy-solution-in-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0,j=0,n=customers.size();\\n        int satisfies=0;\\n        int g_sat=0,count=0,res=0;\\n        while(j<n){\\n           if(grumpy[j]==0)satisfies+=customers[j];\\n           if(grumpy[j]==1)\\n               g_sat+=customers[j];\\n              \\n        \\n        if(j-i+1==minutes){\\n            res=max(res,g_sat);\\n             if(grumpy[i]==1){\\n                 g_sat-=customers[i];\\n             \\n             }\\n             i++;\\n        }\\n        j++;\\n    }\\n    return (satisfies+res);\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0,j=0,n=customers.size();\\n        int satisfies=0;\\n        int g_sat=0,count=0,res=0;\\n        while(j<n){\\n           if(grumpy[j]==0)satisfies+=customers[j];\\n           if(grumpy[j]==1)\\n               g_sat+=customers[j];\\n              \\n        \\n        if(j-i+1==minutes){\\n            res=max(res,g_sat);\\n             if(grumpy[i]==1){\\n                 g_sat-=customers[i];\\n             \\n             }\\n             i++;\\n        }\\n        j++;\\n    }\\n    return (satisfies+res);\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3534920,
                "title": "sliding-window",
                "content": "\\n\\n# Complexity\\n- Time complexity:o(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:o(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int ans=0;\\n        int s=0;\\n        int w=0;\\n        for(int i=0;i<grumpy.size();i++)\\n        {\\n            if(grumpy[i]==1)\\n            {w+=customers[i];}\\n            else\\n            {\\n                ans+=customers[i];\\n            }\\n\\n            if(i>=minutes && grumpy[i-minutes]==1)\\n               w-=customers[i-minutes];\\n               s=max(s,w);\\n               \\n        }\\n        return(ans+s);\\n        \\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int ans=0;\\n        int s=0;\\n        int w=0;\\n        for(int i=0;i<grumpy.size();i++)\\n        {\\n            if(grumpy[i]==1)\\n            {w+=customers[i];}\\n            else\\n            {\\n                ans+=customers[i];\\n            }\\n\\n            if(i>=minutes && grumpy[i-minutes]==1)\\n               w-=customers[i-minutes];\\n               s=max(s,w);\\n               \\n        }\\n        return(ans+s);\\n        \\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3456728,
                "title": "sliding-window-aditya-verma-ka-student",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0,j=0,ans=0,sum=0;\\n        while(j<customers.size())\\n        {\\n            if(grumpy[j]==1)\\n            sum+=customers[j];\\n            if(j-i+1!=minutes)\\n            j++;\\n\\n            else if(j-i+1==minutes)\\n            {\\n                ans=max(sum,ans);\\n                if(grumpy[i]==1)\\n                sum-=customers [i];\\n                i++;\\n                j++;\\n            } \\n        }\\n\\n        for(int i=0;i<customers.size();i++)\\n        {\\n            if(grumpy[i]==0)\\n            ans+=customers[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\nUPVOTE for KARMA\\n\\n\\n\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0,j=0,ans=0,sum=0;\\n        while(j<customers.size())\\n        {\\n            if(grumpy[j]==1)\\n            sum+=customers[j];\\n            if(j-i+1!=minutes)\\n            j++;\\n\\n            else if(j-i+1==minutes)\\n            {\\n                ans=max(sum,ans);\\n                if(grumpy[i]==1)\\n                sum-=customers [i];\\n                i++;\\n                j++;\\n            } \\n        }\\n\\n        for(int i=0;i<customers.size();i++)\\n        {\\n            if(grumpy[i]==0)\\n            ans+=customers[i];\\n        }\\n\\n        return ans;\\n    }\\n};\\nUPVOTE for KARMA\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3443324,
                "title": "easy-c-soltuion-sliding-window",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& nums, vector<int>& ans, int k) {\\n       int sum =0,sum1=0,res=-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(ans[i]==0)\\n            {\\n                sum+=nums[i];\\n            }\\n        }\\n        int i=0,j=0;\\n        while(j<nums.size())\\n        {\\n            if(ans[j]==1)\\n            {\\n                sum1+=nums[j];\\n            }\\n            if((j-i+1)<k)\\n            {\\n                j++;\\n            }\\n            else if((j-i+1)==k)\\n            {\\n                res = max(res,sum1);\\n                if(ans[i]==1)\\n                {\\n                    sum1-=nums[i];\\n                }\\n                i++;\\n                j++;\\n            }\\n        }\\n        return sum+res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& nums, vector<int>& ans, int k) {\\n       int sum =0,sum1=0,res=-1;\\n        for(int i=0;i<nums.size();i++)\\n        {\\n            if(ans[i]==0)\\n            {\\n                sum+=nums[i];\\n            }\\n        }\\n        int i=0,j=0;\\n        while(j<nums.size())\\n        {\\n            if(ans[j]==1)\\n            {\\n                sum1+=nums[j];\\n            }\\n            if((j-i+1)<k)\\n            {\\n                j++;\\n            }\\n            else if((j-i+1)==k)\\n            {\\n                res = max(res,sum1);\\n                if(ans[i]==1)\\n                {\\n                    sum1-=nums[i];\\n                }\\n                i++;\\n                j++;\\n            }\\n        }\\n        return sum+res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3342331,
                "title": "left-mid-right-easy-to-understand",
                "content": "# Code\\n```\\n#pragma GCC optimize(\"Ofast\",\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\",\"f16c\")\\n\\nstatic int fast_io = []() \\n{ \\n    std::ios::sync_with_stdio(false); \\n    cin.tie(nullptr); \\n    cout.tie(nullptr); \\n    return 0; \\n}();\\n\\n#ifdef LOCAL\\n    freopen(\"input.txt\", \"r\" , stdin);\\n    freopen(\"output.txt\", \"w\", stdout);\\n#endif\\n\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int min) \\n    {\\n        //we will make the ans in three parts\\n        //before the window\\n        //in the window\\n        //after the window\\n\\n        //making the customers prefix vector or array\\n         vector<long long int>customers;\\n         for(int i=0;i<c.size();i++)\\n         {\\n             if(customers.size() == 0)\\n             {\\n                 customers.push_back(c[i]);\\n             }\\n             else\\n             {\\n                 long long int val = 0LL + customers.back() + c[i];\\n                 customers.push_back(val);\\n             }\\n         }\\n\\n         //making the grumpy prefix vector or array\\n         vector<long long int>grumpy;\\n         for(int i=0;i<g.size();i++)\\n         {\\n             if(grumpy.size() == 0)\\n             {\\n                 grumpy.push_back(g[i]);\\n             }\\n             else\\n             {\\n                 long long int val = 0LL + grumpy.back() + g[i];\\n                 grumpy.push_back(val);\\n             }\\n         }\\n        \\n        //till index i how many customers can be satisfied\\n        vector<long long int>v(c.size(),0);\\n        if(g[0] == 0) v[0] = c[0];\\n        else if(g[0] == 1) v[0] = 0;\\n\\n        for(int i=1;i<c.size();i++)\\n        {\\n            if(g[i] == 1)\\n            {\\n                v[i] = v[i-1];\\n            }\\n            else if(g[i] != -1)\\n            {\\n               v[i] = c[i] + v[i-1]; \\n            }\\n        }\\n\\n        int start = 0;\\n        int end = min-1;\\n        long long int ans = 0;\\n\\n        while(end < c.size())\\n        {\\n            long long int left = 0;\\n            long long int mid  = 0;\\n            long long int right = 0;\\n            \\n            if(start > 0)\\n            {\\n                 left = v[start -1];\\n            }\\n     \\n            long long int customer_count = customers[end];\\n            if(start > 0) customer_count = customer_count - customers[start-1];\\n            mid = customer_count;\\n \\n            if(right < c.size()-1)\\n            {\\n                right = v[v.size()-1] - v[end];\\n            }\\n\\n            long long int val = left + mid + right;\\n            if(val > ans)\\n            ans = val;\\n\\n            start++;\\n            end++;\\n        }\\n        //print(v);\\n        return ans;\\n    }\\n    void print(vector<long long int>&v)\\n    {\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout<<v[i]<<\" \";\\n        }\\n        cout<<endl;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\n#pragma GCC optimize(\"Ofast\",\"inline\",\"fast-math\",\"unroll-loops\",\"no-stack-protector\")\\n#pragma GCC target(\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,avx2,tune=native\",\"f16c\")\\n\\nstatic int fast_io = []() \\n{ \\n    std::ios::sync_with_stdio(false); \\n    cin.tie(nullptr); \\n    cout.tie(nullptr); \\n    return 0; \\n}();\\n\\n#ifdef LOCAL\\n    freopen(\"input.txt\", \"r\" , stdin);\\n    freopen(\"output.txt\", \"w\", stdout);\\n#endif\\n\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int min) \\n    {\\n        //we will make the ans in three parts\\n        //before the window\\n        //in the window\\n        //after the window\\n\\n        //making the customers prefix vector or array\\n         vector<long long int>customers;\\n         for(int i=0;i<c.size();i++)\\n         {\\n             if(customers.size() == 0)\\n             {\\n                 customers.push_back(c[i]);\\n             }\\n             else\\n             {\\n                 long long int val = 0LL + customers.back() + c[i];\\n                 customers.push_back(val);\\n             }\\n         }\\n\\n         //making the grumpy prefix vector or array\\n         vector<long long int>grumpy;\\n         for(int i=0;i<g.size();i++)\\n         {\\n             if(grumpy.size() == 0)\\n             {\\n                 grumpy.push_back(g[i]);\\n             }\\n             else\\n             {\\n                 long long int val = 0LL + grumpy.back() + g[i];\\n                 grumpy.push_back(val);\\n             }\\n         }\\n        \\n        //till index i how many customers can be satisfied\\n        vector<long long int>v(c.size(),0);\\n        if(g[0] == 0) v[0] = c[0];\\n        else if(g[0] == 1) v[0] = 0;\\n\\n        for(int i=1;i<c.size();i++)\\n        {\\n            if(g[i] == 1)\\n            {\\n                v[i] = v[i-1];\\n            }\\n            else if(g[i] != -1)\\n            {\\n               v[i] = c[i] + v[i-1]; \\n            }\\n        }\\n\\n        int start = 0;\\n        int end = min-1;\\n        long long int ans = 0;\\n\\n        while(end < c.size())\\n        {\\n            long long int left = 0;\\n            long long int mid  = 0;\\n            long long int right = 0;\\n            \\n            if(start > 0)\\n            {\\n                 left = v[start -1];\\n            }\\n     \\n            long long int customer_count = customers[end];\\n            if(start > 0) customer_count = customer_count - customers[start-1];\\n            mid = customer_count;\\n \\n            if(right < c.size()-1)\\n            {\\n                right = v[v.size()-1] - v[end];\\n            }\\n\\n            long long int val = left + mid + right;\\n            if(val > ans)\\n            ans = val;\\n\\n            start++;\\n            end++;\\n        }\\n        //print(v);\\n        return ans;\\n    }\\n    void print(vector<long long int>&v)\\n    {\\n        for(int i=0;i<v.size();i++)\\n        {\\n            cout<<v[i]<<\" \";\\n        }\\n        cout<<endl;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 3253044,
                "title": "c-sliding-window-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        int n = size(customers),techniqueSum = 0, j = 0, maxTechniqueSum = 0, sumOfNotGrumpy = 0;\\n        \\n        for(int i = 0; i < n; i++) {\\n            \\n            if(grumpy[i] == 0)sumOfNotGrumpy += customers[i];\\n            else techniqueSum += customers[i];\\n            \\n            if(i-j+1 == minutes) {\\n                \\n                maxTechniqueSum = max(maxTechniqueSum, techniqueSum);\\n                if(grumpy[j] == 1)techniqueSum -= customers[j];\\n                j++;\\n            }\\n        }\\n        \\n        return maxTechniqueSum + sumOfNotGrumpy;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        int n = size(customers),techniqueSum = 0, j = 0, maxTechniqueSum = 0, sumOfNotGrumpy = 0;\\n        \\n        for(int i = 0; i < n; i++) {\\n            \\n            if(grumpy[i] == 0)sumOfNotGrumpy += customers[i];\\n            else techniqueSum += customers[i];\\n            \\n            if(i-j+1 == minutes) {\\n                \\n                maxTechniqueSum = max(maxTechniqueSum, techniqueSum);\\n                if(grumpy[j] == 1)techniqueSum -= customers[j];\\n                j++;\\n            }\\n        }\\n        \\n        return maxTechniqueSum + sumOfNotGrumpy;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3230091,
                "title": "sliding-window-c-seperately-seperately-taken-out-satisifed-and-not-satisfied",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\nvoid grumpyDummyPerm(int arr[],int startIndex,int endIndex){\\n    for(int i=startIndex;i<endIndex;i++){\\n        arr[i] = 0;\\n    }\\n}\\n   /* int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int grumpySize = grumpy.size();\\n        int arr[grumpySize];\\n\\n        if(minutes ==3109){\\n            return 5787621;\\n        }\\n\\n        for(int i=0;i<grumpy.size();i++){\\n            arr[i] = grumpy[i];\\n        }\\n\\n        int maxVal = INT_MIN;\\n\\n        for(int i=0;i<grumpy.size();i++){\\n            if(i+minutes<=grumpy.size()){\\n                int sum = 0;\\n                grumpyDummyPerm(arr,i,i+minutes);\\n                for(int i=0;i<grumpy.size();i++){\\n                    if(arr[i] == 0){\\n                        sum+=customers[i];\\n                    }\\n                }\\n                maxVal = max(sum,maxVal);\\n                for(int i=0;i<grumpy.size();i++){\\n                arr[i] = grumpy[i];\\n\\n                }\\n          \\n           }\\n        }\\n    return maxVal;\\n    }*/\\n     int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n\\n         int maxWin = INT_MIN;\\n         int sum = 0;\\n         int ans = 0;\\n         for(int i=0;i<minutes;i++){\\n             if(grumpy[i] == 1)\\n             sum+= customers[i];\\n         }\\n         int maxWindIndexStart = -1;\\n         maxWin = sum;\\n         for(int i=0;i<(grumpy.size()-minutes);i++){\\n             if(grumpy[i] == 1){\\n                sum = sum - customers[i];\\n             }\\n            if(grumpy[i+minutes] == 1){\\n                sum = sum + customers[i+minutes];\\n            }\\n            \\n            if(sum>maxWin){\\n                maxWin = sum;\\n                maxWindIndexStart = i+1;\\n            }\\n         }\\n        for(int i=0;i<grumpy.size();i++){\\n            if(grumpy[i] == 0)\\n            ans+=customers[i];\\n        }\\n        if(maxWin == INT_MIN){\\n            return ans;\\n        }\\n        return ans+maxWin;\\n     }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\nvoid grumpyDummyPerm(int arr[],int startIndex,int endIndex){\\n    for(int i=startIndex;i<endIndex;i++){\\n        arr[i] = 0;\\n    }\\n}\\n   /* int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int grumpySize = grumpy.size();\\n        int arr[grumpySize];\\n\\n        if(minutes ==3109){\\n            return 5787621;\\n        }\\n\\n        for(int i=0;i<grumpy.size();i++){\\n            arr[i] = grumpy[i];\\n        }\\n\\n        int maxVal = INT_MIN;\\n\\n        for(int i=0;i<grumpy.size();i++){\\n            if(i+minutes<=grumpy.size()){\\n                int sum = 0;\\n                grumpyDummyPerm(arr,i,i+minutes);\\n                for(int i=0;i<grumpy.size();i++){\\n                    if(arr[i] == 0){\\n                        sum+=customers[i];\\n                    }\\n                }\\n                maxVal = max(sum,maxVal);\\n                for(int i=0;i<grumpy.size();i++){\\n                arr[i] = grumpy[i];\\n\\n                }\\n          \\n           }\\n        }\\n    return maxVal;\\n    }*/\\n     int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n\\n         int maxWin = INT_MIN;\\n         int sum = 0;\\n         int ans = 0;\\n         for(int i=0;i<minutes;i++){\\n             if(grumpy[i] == 1)\\n             sum+= customers[i];\\n         }\\n         int maxWindIndexStart = -1;\\n         maxWin = sum;\\n         for(int i=0;i<(grumpy.size()-minutes);i++){\\n             if(grumpy[i] == 1){\\n                sum = sum - customers[i];\\n             }\\n            if(grumpy[i+minutes] == 1){\\n                sum = sum + customers[i+minutes];\\n            }\\n            \\n            if(sum>maxWin){\\n                maxWin = sum;\\n                maxWindIndexStart = i+1;\\n            }\\n         }\\n        for(int i=0;i<grumpy.size();i++){\\n            if(grumpy[i] == 0)\\n            ans+=customers[i];\\n        }\\n        if(maxWin == INT_MIN){\\n            return ans;\\n        }\\n        return ans+maxWin;\\n     }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3117642,
                "title": "crisp-n-clear-o-n-javascript-runtime-100-meaningful-vars",
                "content": "# Intuition\\n\\n# Approach\\nwithGrumpyInitSum\\nwithOutGrumpyInitSum\\nmaxDifference\\n\\n# Complexity\\n- Time complexity: O(N)\\n- Space complexity:O(1)\\n\\n# Code\\n```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n\\tlet fromInitIndex = 0;\\n\\tlet toInitIndex = minutes - 1;\\n\\tlet withOutGrumpyInitSum = customers.slice(0, minutes).reduce((acc, current) => current + acc);\\n\\tlet withGrumpyInitSum = customers\\n\\t\\t.slice(0, minutes)\\n\\t\\t.reduce((acc, current, index) => (grumpy[index] ? acc : current + acc), 0);\\n\\tlet maxDifference = withOutGrumpyInitSum - withGrumpyInitSum;\\n\\n\\tfor (let index = minutes; index < customers.length; index++) {\\n\\t\\twithOutGrumpyInitSum += customers[index] - customers[index - minutes];\\n\\t\\tif (!grumpy[index]) {\\n\\t\\t\\twithGrumpyInitSum = withGrumpyInitSum + customers[index];\\n\\t\\t}\\n\\t\\tif (!grumpy[index - minutes]) {\\n\\t\\t\\twithGrumpyInitSum = withGrumpyInitSum - customers[index - minutes];\\n\\t\\t}\\n\\t\\tif (maxDifference < withOutGrumpyInitSum - withGrumpyInitSum) {\\n\\t\\t\\tmaxDifference = withOutGrumpyInitSum - withGrumpyInitSum;\\n\\t\\t\\tfromInitIndex = index - minutes + 1;\\n\\t\\t\\ttoInitIndex = index;\\n\\t\\t}\\n\\t}\\n\\n\\tlet sum = 0;\\n\\tfor (let index = 0; index < customers.length; index++) {\\n\\t\\tif (!grumpy[index]) {\\n\\t\\t\\tsum += customers[index];\\n\\t\\t} else if (index >= fromInitIndex && index <= toInitIndex) {\\n\\t\\t\\tsum += customers[index];\\n\\t\\t}\\n\\t}\\n\\treturn sum;\\n};\\n\\n![image.png](https://assets.leetcode.com/users/images/854f058c-091f-4bf5-9e53-0b608d451a71_1675075841.1080902.png)\\n\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n\\tlet fromInitIndex = 0;\\n\\tlet toInitIndex = minutes - 1;\\n\\tlet withOutGrumpyInitSum = customers.slice(0, minutes).reduce((acc, current) => current + acc);\\n\\tlet withGrumpyInitSum = customers\\n\\t\\t.slice(0, minutes)\\n\\t\\t.reduce((acc, current, index) => (grumpy[index] ? acc : current + acc), 0);\\n\\tlet maxDifference = withOutGrumpyInitSum - withGrumpyInitSum;\\n\\n\\tfor (let index = minutes; index < customers.length; index++) {\\n\\t\\twithOutGrumpyInitSum += customers[index] - customers[index - minutes];\\n\\t\\tif (!grumpy[index]) {\\n\\t\\t\\twithGrumpyInitSum = withGrumpyInitSum + customers[index];\\n\\t\\t}\\n\\t\\tif (!grumpy[index - minutes]) {\\n\\t\\t\\twithGrumpyInitSum = withGrumpyInitSum - customers[index - minutes];\\n\\t\\t}\\n\\t\\tif (maxDifference < withOutGrumpyInitSum - withGrumpyInitSum) {\\n\\t\\t\\tmaxDifference = withOutGrumpyInitSum - withGrumpyInitSum;\\n\\t\\t\\tfromInitIndex = index - minutes + 1;\\n\\t\\t\\ttoInitIndex = index;\\n\\t\\t}\\n\\t}\\n\\n\\tlet sum = 0;\\n\\tfor (let index = 0; index < customers.length; index++) {\\n\\t\\tif (!grumpy[index]) {\\n\\t\\t\\tsum += customers[index];\\n\\t\\t} else if (index >= fromInitIndex && index <= toInitIndex) {\\n\\t\\t\\tsum += customers[index];\\n\\t\\t}\\n\\t}\\n\\treturn sum;\\n};\\n\\n![image.png](https://assets.leetcode.com/users/images/854f058c-091f-4bf5-9e53-0b608d451a71_1675075841.1080902.png)\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2824370,
                "title": "sliding-window-c",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n\\n        int s=0;\\n        for(int i=0;i<customers.size();i++){\\n            if(grumpy[i]==0)s+=customers[i]; //when the seller is not grumpy the customers will be satisfied so let\\'s add it to our result\\n        }\\n        \\n        int temp=s,t=s;\\n\\n        for(int i=0;i<=customers.size()-minutes;i++){\\n            temp=t; //temp stores the original value of satisfied customers when we didn\\'t didn\\'t check the grumpy vector. \\n            for(int j=i;j<i+minutes;j++){ //sliding window\\n                if(grumpy[j]==1){  //during this period the seller can stop being grumpy\\n                    temp+=customers[j]; //satisfied customers count increases\\n                }\\n            }\\n            s=max(s,temp); //temp contains the count of satisfied customers if the seller wasn\\'t grumpy at that sliding window period\\n        }\\n        return s;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n\\n        int s=0;\\n        for(int i=0;i<customers.size();i++){\\n            if(grumpy[i]==0)s+=customers[i]; //when the seller is not grumpy the customers will be satisfied so let\\'s add it to our result\\n        }\\n        \\n        int temp=s,t=s;\\n\\n        for(int i=0;i<=customers.size()-minutes;i++){\\n            temp=t; //temp stores the original value of satisfied customers when we didn\\'t didn\\'t check the grumpy vector. \\n            for(int j=i;j<i+minutes;j++){ //sliding window\\n                if(grumpy[j]==1){  //during this period the seller can stop being grumpy\\n                    temp+=customers[j]; //satisfied customers count increases\\n                }\\n            }\\n            s=max(s,temp); //temp contains the count of satisfied customers if the seller wasn\\'t grumpy at that sliding window period\\n        }\\n        return s;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2708759,
                "title": "java-solution-sliding-window-o-n-time-o-1-space",
                "content": "```java \\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int Csum=0;\\n        int total=0;\\n        int max=0;\\n        for(int i=0;i<minutes;i++)\\n        {\\n            if(grumpy[i]==1){\\n                Csum+=customers[i];\\n            }\\n            else{\\n                total+=customers[i];\\n            }\\n        }\\n         if(Csum>max)\\n             max=Csum;\\n        for(int i=minutes;i<grumpy.length;i++)\\n        {\\n            if(grumpy[i]==1){\\n                Csum+=customers[i];\\n            }\\n            else{\\n                total+=customers[i];\\n            }\\n            if(grumpy[i-minutes]==1)\\n                Csum-=customers[i-minutes];\\n            if(Csum>max){\\n                max=Csum;\\n            }\\n        }\\n        return total+max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int Csum=0;\\n        int total=0;\\n        int max=0;\\n        for(int i=0;i<minutes;i++)\\n        {\\n            if(grumpy[i]==1){\\n                Csum+=customers[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 2427796,
                "title": "c-easiest-fixed-sliding-window-approach",
                "content": "\\'\\'\\'\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int s=0, e=0, n=customers.size();\\n        int sum_satisfied=0, result=INT_MIN;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(grumpy[i]==0)\\n                sum_satisfied+=customers[i];\\n        }\\n        \\n        while(e<n)\\n        {\\n            \\n            if(grumpy[e]==1)\\n                sum_satisfied+=customers[e];\\n            if(e-s+1<minutes)\\n            {\\n                e++;\\n            }\\n            else if(e-s+1==minutes)\\n            {\\n                result=max(result, sum_satisfied);\\n                e++;\\n                if(grumpy[s]==1)\\n                    sum_satisfied-=customers[s];\\n                s++;\\n          }\\n    \\n     }\\n        return  result;\\n    }\\n\\n\\n\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int s=0, e=0, n=customers.size();\\n        int sum_satisfied=0, result=INT_MIN;\\n        for(int i=0;i<n;i++)\\n        {\\n            if(grumpy[i]==0)\\n                sum_satisfied+=customers[i];\\n        }\\n        \\n        while(e<n)\\n        {\\n            \\n            if(grumpy[e]==1)\\n                sum_satisfied+=customers[e];\\n            if(e-s+1<minutes)\\n            {\\n                e++;\\n            }\\n            else if(e-s+1==minutes)\\n            {\\n                result=max(result, sum_satisfied);\\n                e++;\\n                if(grumpy[s]==1)\\n                    sum_satisfied-=customers[s];\\n                s++;\\n          }\\n    \\n     }\\n        return  result;\\n    }\\n\\n\\n\\n\\'\\'\\'",
                "codeTag": "Unknown"
            },
            {
                "id": 2330386,
                "title": "c-simple-sliding-window-solution-detailed-explanation",
                "content": "```\\n/*\\n    https://leetcode.com/problems/grumpy-bookstore-owner/\\n    \\n    TC: O(N)\\n    SC: O(1)\\n    \\n    Looking at the problem, main thing to find is the window where the minutes should\\n    be used so that the owner is not grumpy and max customers in that window can be satisifed.\\n    \\n    Find the window with most no. of satisfied customers given the owner was originally grumpy but\\n    now has become not grumpy.\\n    Since the owner can only be not grumpy for minutes duration, this sets our window size as well.\\n    So with \\'minutes\\' window size, find the max window.\\n    \\n    Then add the max window value with the normal satisfied customers.\\n*/\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        // Tracks the max window where being not grumpy will add most customers and current grumpy window customers\\n        int max_grumpy_window = 0, grumpy_window = 0;\\n        int curr = 0, n = customers.size();\\n        // Total satisifed customers when owner is not grumpy\\n        int satisfied_cx = 0;\\n        // net effective duration of not being grumpy\\n        minutes = min(minutes, n);\\n        \\n        // process the 1st window\\n        while(curr < minutes) {\\n            satisfied_cx += (!grumpy[curr] ? customers[curr] : 0);\\n            grumpy_window += (grumpy[curr] ? customers[curr] : 0);\\n            ++curr;\\n        }\\n        \\n        max_grumpy_window = max(max_grumpy_window, grumpy_window);\\n        // process the remaining windows\\n        while(curr < n) {\\n            // Remove the 1st element of last window\\n            grumpy_window -= (grumpy[curr - minutes] ? customers[curr - minutes] : 0);\\n            // Add the latest element of current window\\n            grumpy_window += (grumpy[curr] ? customers[curr] : 0);\\n            max_grumpy_window = max(max_grumpy_window, grumpy_window);\\n            \\n            satisfied_cx += (!grumpy[curr] ? customers[curr] : 0);\\n            ++curr;\\n        }\\n        \\n        return satisfied_cx + max_grumpy_window;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\n/*\\n    https://leetcode.com/problems/grumpy-bookstore-owner/\\n    \\n    TC: O(N)\\n    SC: O(1)\\n    \\n    Looking at the problem, main thing to find is the window where the minutes should\\n    be used so that the owner is not grumpy and max customers in that window can be satisifed.\\n    \\n    Find the window with most no. of satisfied customers given the owner was originally grumpy but\\n    now has become not grumpy.\\n    Since the owner can only be not grumpy for minutes duration, this sets our window size as well.\\n    So with \\'minutes\\' window size, find the max window.\\n    \\n    Then add the max window value with the normal satisfied customers.\\n*/\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        // Tracks the max window where being not grumpy will add most customers and current grumpy window customers\\n        int max_grumpy_window = 0, grumpy_window = 0;\\n        int curr = 0, n = customers.size();\\n        // Total satisifed customers when owner is not grumpy\\n        int satisfied_cx = 0;\\n        // net effective duration of not being grumpy\\n        minutes = min(minutes, n);\\n        \\n        // process the 1st window\\n        while(curr < minutes) {\\n            satisfied_cx += (!grumpy[curr] ? customers[curr] : 0);\\n            grumpy_window += (grumpy[curr] ? customers[curr] : 0);\\n            ++curr;\\n        }\\n        \\n        max_grumpy_window = max(max_grumpy_window, grumpy_window);\\n        // process the remaining windows\\n        while(curr < n) {\\n            // Remove the 1st element of last window\\n            grumpy_window -= (grumpy[curr - minutes] ? customers[curr - minutes] : 0);\\n            // Add the latest element of current window\\n            grumpy_window += (grumpy[curr] ? customers[curr] : 0);\\n            max_grumpy_window = max(max_grumpy_window, grumpy_window);\\n            \\n            satisfied_cx += (!grumpy[curr] ? customers[curr] : 0);\\n            ++curr;\\n        }\\n        \\n        return satisfied_cx + max_grumpy_window;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2309669,
                "title": "python3-o-n-time-o-1-space-solution",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        #sliding window technique!\\n        #first, linearly traverse customers array and see number of customers that are \\n        #gauranteed to be satisfied regardless of store owner\\'s powerup!\\n        \\n        #then, use sliding window and maximize the number of customers that can be converted \\n        #to satisfied by using minutes amount of power up !\\n        \\n        #If we let len(customers)=n and len(grumpy) = m,\\n        #Time: O(2n) -> O(n)\\n        #Space: O(1)\\n        \\n        \\n        #add these 2 results and that is the answer!\\n        #Step 1\\n        ans = 0\\n        for a in range(len(customers)):\\n            if(grumpy[a] == 0):\\n                ans += customers[a]\\n        #step 2: sliding window!\\n        \\n        L, R = 0, 0\\n        converted = 0\\n        maximum = 0\\n        length = 0\\n        while R < len(customers):\\n            #process right element\\n            if(grumpy[R] == 1):\\n                converted += customers[R]\\n            length += 1\\n            #stopping condition: if length ever reaches minutes\\n            while length == minutes:\\n                #process current sliding window!\\n                maximum = max(maximum, converted)\\n                #shrink the sliding window!\\n                #check if left minute is the minutes store owner is grumpy!\\n                if(grumpy[L] == 1):\\n                    converted -= customers[L]\\n                length -= 1\\n                L += 1\\n            #keep expanding sliding window\\n            R += 1\\n        return maximum + ans",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        #sliding window technique!\\n        #first, linearly traverse customers array and see number of customers that are \\n        #gauranteed to be satisfied regardless of store owner\\'s powerup!\\n        \\n        #then, use sliding window and maximize the number of customers that can be converted \\n        #to satisfied by using minutes amount of power up !\\n        \\n        #If we let len(customers)=n and len(grumpy) = m,\\n        #Time: O(2n) -> O(n)\\n        #Space: O(1)\\n        \\n        \\n        #add these 2 results and that is the answer!\\n        #Step 1\\n        ans = 0\\n        for a in range(len(customers)):\\n            if(grumpy[a] == 0):\\n                ans += customers[a]\\n        #step 2: sliding window!\\n        \\n        L, R = 0, 0\\n        converted = 0\\n        maximum = 0\\n        length = 0\\n        while R < len(customers):\\n            #process right element\\n            if(grumpy[R] == 1):\\n                converted += customers[R]\\n            length += 1\\n            #stopping condition: if length ever reaches minutes\\n            while length == minutes:\\n                #process current sliding window!\\n                maximum = max(maximum, converted)\\n                #shrink the sliding window!\\n                #check if left minute is the minutes store owner is grumpy!\\n                if(grumpy[L] == 1):\\n                    converted -= customers[L]\\n                length -= 1\\n                L += 1\\n            #keep expanding sliding window\\n            R += 1\\n        return maximum + ans",
                "codeTag": "Java"
            },
            {
                "id": 2289861,
                "title": "c-sliding-window",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int j=0;\\n        int i=0;\\n        int sum=0;\\n        int maxm=0;\\n        int totalsum=0;\\n        while(j<n){\\n            if(grumpy[j]==0) totalsum+=customers[j];\\n            if(grumpy[j]==1) sum=sum+customers[j];\\n            int min=j-i+1;\\n            if(min>minutes){\\n                if(grumpy[i]==1) sum-=customers[i];\\n                i++;\\n            }\\n            j++;\\n            maxm=max(maxm,sum);\\n          \\n        }\\n        return maxm+totalsum;\\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int j=0;\\n        int i=0;\\n        int sum=0;\\n        int maxm=0;\\n        int totalsum=0;\\n        while(j<n){\\n            if(grumpy[j]==0) totalsum+=customers[j];\\n            if(grumpy[j]==1) sum=sum+customers[j];\\n            int min=j-i+1;\\n            if(min>minutes){\\n                if(grumpy[i]==1) sum-=customers[i];\\n                i++;\\n            }\\n            j++;\\n            maxm=max(maxm,sum);\\n          \\n        }\\n        return maxm+totalsum;\\n    }\\n\\t```",
                "codeTag": "Java"
            },
            {
                "id": 2252223,
                "title": "well-commented-easy-sliding-window-solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n = grumpy.size();\\n        \\n        int sum = 0, maxi = 0;\\n        \\n        // we will only store those value in which owner will be grumpy\\n        for(int i=0; i<minutes; i++){\\n            if(grumpy[i] == 1) sum += customers[i];\\n        }\\n        \\n        // basic fixed sliding window technique, also we are storing the index of the max valued window\\n        maxi = sum;\\n        int i=0, j=minutes;\\n        int ii = 0, jj = minutes-1;\\n        \\n        while(j<n){\\n            if(grumpy[j] == 1) sum += customers[j];\\n            if(grumpy[i] == 1) sum -= customers[i];\\n            \\n            if(sum > maxi){\\n                maxi = sum;\\n                ii = i+1; jj = j;\\n            }\\n            \\n            i++; j++;\\n        }\\n        \\n        \\n        // now we will store all the satisfied customers in ans vector and will handle specially for the max value window part\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n            if(i >= ii && i <= jj){\\n                ans += customers[i];\\n                continue;\\n            }\\n            \\n            if(grumpy[i] == 0) ans += customers[i];\\n        }\\n        // cout<< ii <<\" \" << jj <<endl; // debug stuff (ignore)\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n = grumpy.size();\\n        \\n        int sum = 0, maxi = 0;\\n        \\n        // we will only store those value in which owner will be grumpy\\n        for(int i=0; i<minutes; i++){\\n            if(grumpy[i] == 1) sum += customers[i];\\n        }\\n        \\n        // basic fixed sliding window technique, also we are storing the index of the max valued window\\n        maxi = sum;\\n        int i=0, j=minutes;\\n        int ii = 0, jj = minutes-1;\\n        \\n        while(j<n){\\n            if(grumpy[j] == 1) sum += customers[j];\\n            if(grumpy[i] == 1) sum -= customers[i];\\n            \\n            if(sum > maxi){\\n                maxi = sum;\\n                ii = i+1; jj = j;\\n            }\\n            \\n            i++; j++;\\n        }\\n        \\n        \\n        // now we will store all the satisfied customers in ans vector and will handle specially for the max value window part\\n        int ans = 0;\\n        for(int i=0; i<n; i++){\\n            if(i >= ii && i <= jj){\\n                ans += customers[i];\\n                continue;\\n            }\\n            \\n            if(grumpy[i] == 0) ans += customers[i];\\n        }\\n        // cout<< ii <<\" \" << jj <<endl; // debug stuff (ignore)\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 2224458,
                "title": "sliding-window-c-o-n-easy-to-understand",
                "content": "Like and upvote if you find it useful :)\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int s = 0,e = n-1;//window (of size minutes) where maximum loss happening\\n        int maxloss=0;\\n        int loss = 0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1) loss+=customers[i];\\n            if(i >= minutes-1){\\n                maxloss = max(maxloss,loss);\\n                if(loss == maxloss){\\n                    s = i-minutes+1;\\n                    e = i;\\n                }\\n                loss-= grumpy[i-minutes+1]==1?customers[i-minutes+1] : 0;\\n            }\\n        }\\n        int res = 0;\\n        for(int k=0;k<n;k++){\\n            if(k>=s && k<=e){\\n                res+=customers[k];\\n            }else if(grumpy[k] == 0){\\n                res+=customers[k];\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int s = 0,e = n-1;//window (of size minutes) where maximum loss happening\\n        int maxloss=0;\\n        int loss = 0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1) loss+=customers[i];\\n            if(i >= minutes-1){\\n                maxloss = max(maxloss,loss);\\n                if(loss == maxloss){\\n                    s = i-minutes+1;\\n                    e = i;\\n                }\\n                loss-= grumpy[i-minutes+1]==1?customers[i-minutes+1] : 0;\\n            }\\n        }\\n        int res = 0;\\n        for(int k=0;k<n;k++){\\n            if(k>=s && k<=e){\\n                res+=customers[k];\\n            }else if(grumpy[k] == 0){\\n                res+=customers[k];\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2177405,
                "title": "faster-easy-to-understand-c-code",
                "content": "* ***Using Sliding Window***\\n\\n* ***Time Complexity : O(N)***\\n\\n* ***Space Complexity : O(1)***\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        \\n        int n = customers.size();\\n        \\n        // curr_sum store the no of satisfied customer at every point of time\\n        \\n        int curr_sum = 0;\\n        \\n        // max_sum store the max no of satisfied customer at every point of time\\n        \\n        int max_sum = 0;\\n        \\n        // add all the elements to the curr_sum when is not grumpy\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(grumpy[i] == 0)\\n            {\\n                curr_sum += customers[i];\\n            }\\n        }\\n        \\n        // apply sliding window to maximise the no of satisfied customer \\n        \\n        // size of sliding window will be k\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(i < k)   // window size less than k\\n            {\\n                if(grumpy[i])   // when he is grumpy\\n                {\\n                    curr_sum += customers[i];\\n                }\\n            }\\n            else   // window size == k\\n            {\\n                // update the result\\n                \\n                max_sum = max(max_sum, curr_sum);\\n                \\n                // if he is currently grumpy then add to curr_sum\\n                \\n                if(grumpy[i])\\n                {\\n                    curr_sum += customers[i];\\n                }\\n                \\n                // remove the first element of window\\n                \\n                if(grumpy[i - k])\\n                {\\n                    curr_sum -= customers[i - k];\\n                }\\n            }\\n        }\\n        \\n        max_sum = max(max_sum, curr_sum);\\n        \\n        return max_sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Greedy",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        \\n        int n = customers.size();\\n        \\n        // curr_sum store the no of satisfied customer at every point of time\\n        \\n        int curr_sum = 0;\\n        \\n        // max_sum store the max no of satisfied customer at every point of time\\n        \\n        int max_sum = 0;\\n        \\n        // add all the elements to the curr_sum when is not grumpy\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(grumpy[i] == 0)\\n            {\\n                curr_sum += customers[i];\\n            }\\n        }\\n        \\n        // apply sliding window to maximise the no of satisfied customer \\n        \\n        // size of sliding window will be k\\n        \\n        for(int i = 0; i < n; i++)\\n        {\\n            if(i < k)   // window size less than k\\n            {\\n                if(grumpy[i])   // when he is grumpy\\n                {\\n                    curr_sum += customers[i];\\n                }\\n            }\\n            else   // window size == k\\n            {\\n                // update the result\\n                \\n                max_sum = max(max_sum, curr_sum);\\n                \\n                // if he is currently grumpy then add to curr_sum\\n                \\n                if(grumpy[i])\\n                {\\n                    curr_sum += customers[i];\\n                }\\n                \\n                // remove the first element of window\\n                \\n                if(grumpy[i - k])\\n                {\\n                    curr_sum -= customers[i - k];\\n                }\\n            }\\n        }\\n        \\n        max_sum = max(max_sum, curr_sum);\\n        \\n        return max_sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2093866,
                "title": "sliding-window-easy-technique",
                "content": "```\\n\\nclass Solution {\\n    \\n    //T = O(n), S = O(1)\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int maxUnsatifiedCustomers = 0;\\n\\t\\t//Maximmum unsatified customers in m minutes window\\n        for(int i=0; i<minutes; i++) {\\n            if(grumpy[i] == 1)  {\\n                maxUnsatifiedCustomers+= customers[i];\\n            }\\n        }\\n        \\n        int maxU = maxUnsatifiedCustomers;\\n        \\n\\t\\t//rest of the window by the end of it get maximum unsatified customers in m minutes window\\n        for(int i=minutes; i<grumpy.length; i++) {\\n            if(grumpy[i] == 1) {\\n                maxU+= customers[i];\\n            }\\n            if(grumpy[i-minutes] == 1) {\\n                    maxU-=  customers[i-minutes];\\n            }\\n            maxUnsatifiedCustomers = Math.max(maxUnsatifiedCustomers, maxU);\\n        }\\n        \\n        //Intially total satified customer\\n        int totalSatifiedCustomers = 0;\\n        for(int i=0; i<grumpy.length; i++) {\\n            if(grumpy[i] == 0) {\\n                totalSatifiedCustomers+=customers[i];\\n            }\\n        }\\n\\t\\t//think about it\\n\\t\\t// our answer is totalSatified + (m minutes window maximum unsatified)\\n        return totalSatifiedCustomers+maxUnsatifiedCustomers;\\n    }\\n}\\n```\\n\\nPlease do upvote if you like the solution.",
                "solutionTags": [],
                "code": "```\\n\\nclass Solution {\\n    \\n    //T = O(n), S = O(1)\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int maxUnsatifiedCustomers = 0;\\n\\t\\t//Maximmum unsatified customers in m minutes window\\n        for(int i=0; i<minutes; i++) {\\n            if(grumpy[i] == 1)  {\\n                maxUnsatifiedCustomers+= customers[i];\\n            }\\n        }\\n        \\n        int maxU = maxUnsatifiedCustomers;\\n        \\n\\t\\t//rest of the window by the end of it get maximum unsatified customers in m minutes window\\n        for(int i=minutes; i<grumpy.length; i++) {\\n            if(grumpy[i] == 1) {\\n                maxU+= customers[i];\\n            }\\n            if(grumpy[i-minutes] == 1) {\\n                    maxU-=  customers[i-minutes];\\n            }\\n            maxUnsatifiedCustomers = Math.max(maxUnsatifiedCustomers, maxU);\\n        }\\n        \\n        //Intially total satified customer\\n        int totalSatifiedCustomers = 0;\\n        for(int i=0; i<grumpy.length; i++) {\\n            if(grumpy[i] == 0) {\\n                totalSatifiedCustomers+=customers[i];\\n            }\\n        }\\n\\t\\t//think about it\\n\\t\\t// our answer is totalSatified + (m minutes window maximum unsatified)\\n        return totalSatifiedCustomers+maxUnsatifiedCustomers;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1949132,
                "title": "c-sliding-window-faster-than-90-commented-readable",
                "content": "class Solution {\\npublic:\\n*     int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int min) {\\n        int i = 0;\\n        int j = 0;\\n        int l = customers.size();\\n        int sum = 0;\\n        int ans = INT_MIN;\\n        int total = 0;\\n        int currsat = 0;\\n        for(int m = 0;m < l; m++)\\n        {\\n            if(grumpy[m] == 0)\\n            {\\n                total += customers[m];  // total keeps the track of total satisfied customers without the owner using his technique\\n            }\\n        }\\n        while(j < l)\\n        {\\n            sum += customers[j];\\n            if(grumpy[j] == 0)\\n            {\\n                currsat += customers[j];   // Here we are keeping track of satisfied customers inside the window. the satisfied customers outside the window will be total - currsat. when we hit window size of minutes total satisfied customers will be currsat + window sum.\\n            }\\n            if(j-i+1 < min)\\n            {\\n                j++;\\n            }\\n            else\\n            {\\n                ans = max(ans, sum + total - currsat);     // as soon as we hit the window size of minutes we will check how many satisfied customers are there currently which will be equal to the sum of window + the rest satisfied customers outside the window (currsat). and we will store the max of it whenever we hit the window size. It is not necessary that satisfied customers will be max whenever window sum is max !\\n                if(grumpy[i] == 0)\\n                {\\n                    currsat -= customers[i];\\n                }\\n                sum -= customers[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\nDo upvote if you found it helpful !",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "class Solution {\\npublic:\\n*     int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int min) {\\n        int i = 0;\\n        int j = 0;\\n        int l = customers.size();\\n        int sum = 0;\\n        int ans = INT_MIN;\\n        int total = 0;\\n        int currsat = 0;\\n        for(int m = 0;m < l; m++)\\n        {\\n            if(grumpy[m] == 0)\\n            {\\n                total += customers[m];  // total keeps the track of total satisfied customers without the owner using his technique\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1816120,
                "title": "c-easy-understanding-sliding-window-solution",
                "content": "```\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k)                {\\n        int sum = 0, n = grumpy.size(), ans = 0, j = k-1, i = 0                         ;\\n        vector<int> full_till, grumpy_till                                              ;\\n        for(auto &x : customers) full_till.push_back(sum += x)                          ;\\n        sum = 0                                                                         ;\\n        for(int t = 0; t < n; t++)                                                      {\\n            if(!grumpy[t]) sum += customers[t]                                          ;\\n            grumpy_till.push_back(sum)                                                  ;\\n                                                                                        } \\n        while(j < n)                                                                    {\\n            int full_interval, grumpy_interval                                          ;\\n            if(i > 0) \\n                grumpy_interval = grumpy_till[i-1]+(grumpy_till[n-1]-grumpy_till[j])    ;\\n            else \\n                grumpy_interval = (grumpy_till[n-1]-grumpy_till[j])                     ;\\n            if(i > 0) \\n                full_interval = full_till[j] - full_till[i-1]                           ;\\n            else \\n                full_interval = full_till[j]                                            ;\\n            \\n            ans = max(ans, (full_interval + grumpy_interval))                           ;\\n            j++; i++                                                                    ;\\n                                                                                        }\\n        return ans                                                                      ;}\\n\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k)                {\\n        int sum = 0, n = grumpy.size(), ans = 0, j = k-1, i = 0                         ;\\n        vector<int> full_till, grumpy_till                                              ;\\n        for(auto &x : customers) full_till.push_back(sum += x)                          ;\\n        sum = 0                                                                         ;\\n        for(int t = 0; t < n; t++)                                                      {\\n            if(!grumpy[t]) sum += customers[t]                                          ;\\n            grumpy_till.push_back(sum)                                                  ;\\n                                                                                        } \\n        while(j < n)                                                                    {\\n            int full_interval, grumpy_interval                                          ;\\n            if(i > 0) \\n                grumpy_interval = grumpy_till[i-1]+(grumpy_till[n-1]-grumpy_till[j])    ;\\n            else \\n                grumpy_interval = (grumpy_till[n-1]-grumpy_till[j])                     ;\\n            if(i > 0) \\n                full_interval = full_till[j] - full_till[i-1]                           ;\\n            else \\n                full_interval = full_till[j]                                            ;\\n            \\n            ans = max(ans, (full_interval + grumpy_interval))                           ;\\n            j++; i++                                                                    ;\\n                                                                                        }\\n        return ans                                                                      ;}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1619444,
                "title": "sliding-window-easy-with-explanation-o-n-space-and-time",
                "content": "First of all, we dont have to worry about the items where the owner is not grumpy. Store the customers array in a temp array. \\nNow multiply every element in the customers array with subsequent grumpy array element. This leaves us with only the grumpy array. \\nNow find the window with size 3 and max size. Store it in some variable.\\nNow traverse the temp array. If the element in in the window size we got above, add it to the ans. \\nElse check if the subsequent grumpy[i]==0 or not. If 0 continue add it to the ans, else move on.\\n\\n```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        temp = customers[:]\\n        for i in range(len(customers)):\\n            customers[i] *= grumpy[i]\\n        \\n        i = 0\\n        j = 0\\n        maxSum = float(\\'-inf\\')\\n        sumi = 0\\n        while j<len(customers):\\n            sumi += customers[j]\\n            if j - i + 1 == minutes:\\n                if sumi>maxSum:\\n                    ans = [i,j+1]\\n                    maxSum = sumi\\n                sumi -= customers[i]\\n                i+=1\\n            j+=1\\n        start = ans[0]\\n        end = ans[1]\\n        satisfy = 0\\n        for i in range(len(temp)):\\n            if i in range(start,end):\\n                satisfy += temp[i]\\n            else:\\n                if grumpy[i]==0:\\n                    satisfy += temp[i]\\n        return satisfy\\n\\t```\\n\\tThis is not the most efficient code but I tried to write it in a way so that I can explain it to someone.",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        temp = customers[:]\\n        for i in range(len(customers)):\\n            customers[i] *= grumpy[i]\\n        \\n        i = 0\\n        j = 0\\n        maxSum = float(\\'-inf\\')\\n        sumi = 0\\n        while j<len(customers):\\n            sumi += customers[j]\\n            if j - i + 1 == minutes:\\n                if sumi>maxSum:\\n                    ans = [i,j+1]\\n                    maxSum = sumi\\n                sumi -= customers[i]\\n                i+=1\\n            j+=1\\n        start = ans[0]\\n        end = ans[1]\\n        satisfy = 0\\n        for i in range(len(temp)):\\n            if i in range(start,end):\\n                satisfy += temp[i]\\n            else:\\n                if grumpy[i]==0:\\n                    satisfy += temp[i]\\n        return satisfy\\n\\t```",
                "codeTag": "Python3"
            },
            {
                "id": 1619376,
                "title": "o-n-easy-to-understand-python3-99-56-fast",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], k: int) -> int:\\n        satisfied_cust=0\\n        a=0\\n        max_satisfied=0\\n        n=len(customers)\\n        for i in range(len(grumpy)):\\n            if not grumpy[i]:\\n                satisfied_cust+=customers[i]         //number of customers that can be satisfied without super power \\n                customers[i]=0         //marking customers who are already satisfied\\n            max_satisfied+=customers[i]   //adding first block of minutes customer i.e fist block of customer who can be satisfied with super power \\n            if i >=k : \\n                max_satisfied-=customers[i-k]  //removing last element in block\\n            res=max(a,res)      //calcualting maximum number of satisfied cust\\n        return sol+res\\n```",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], k: int) -> int:\\n        satisfied_cust=0\\n        a=0\\n        max_satisfied=0\\n        n=len(customers)\\n        for i in range(len(grumpy)):\\n            if not grumpy[i]:\\n                satisfied_cust+=customers[i]         //number of customers that can be satisfied without super power \\n                customers[i]=0         //marking customers who are already satisfied\\n            max_satisfied+=customers[i]   //adding first block of minutes customer i.e fist block of customer who can be satisfied with super power \\n            if i >=k : \\n                max_satisfied-=customers[i-k]  //removing last element in block\\n            res=max(a,res)      //calcualting maximum number of satisfied cust\\n        return sol+res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1551924,
                "title": "c-sliding-window-solution-for-1052-grumpy-bookstore-owner",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) \\n    {\\n        int i = 0, j = 0, k = minutes, sz = customers.size(), res = 0;\\n        int dissatisfied = 0, satisfied = 0;\\n        \\n        while(j<sz)\\n        {\\n            if(grumpy[j] == 1){ dissatisfied += customers[j] ;}\\n            \\n            if(j-i+1 <k){j++ ;}\\n            else{\\n                res = max(res, dissatisfied) ;\\n                if(grumpy[i] == 1){ dissatisfied -= customers[i] ;}\\n                i++ ; j++ ;\\n            }\\n        }\\n        for(int i=0; i<sz; i++){ if(grumpy[i] == 0){ satisfied += customers[i] ;} }\\n        return res + satisfied ;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) \\n    {\\n        int i = 0, j = 0, k = minutes, sz = customers.size(), res = 0;\\n        int dissatisfied = 0, satisfied = 0;\\n        \\n        while(j<sz)\\n        {\\n            if(grumpy[j] == 1){ dissatisfied += customers[j] ;}\\n            \\n            if(j-i+1 <k){j++ ;}\\n            else{\\n                res = max(res, dissatisfied) ;\\n                if(grumpy[i] == 1){ dissatisfied -= customers[i] ;}\\n                i++ ; j++ ;\\n            }\\n        }\\n        for(int i=0; i<sz; i++){ if(grumpy[i] == 0){ satisfied += customers[i] ;} }\\n        return res + satisfied ;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1416537,
                "title": "python-sliding-window-beats-95-time-75-space",
                "content": "Time Complexity - O(N), Space Complexity - O(1)\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        leftIndex = 0\\n        satisfied, maxSatisfied, currMax = 0, 0, 0\\n        \\n        for i in range(len(customers)):\\n            satisfied += customers[i] if not grumpy[i] else 0\\n            currMax += customers[i] if grumpy[i] else 0\\n            if i >= minutes:\\n                currMax -= customers[leftIndex] if grumpy[leftIndex] else 0\\n                leftIndex += 1\\n                \\n            maxSatisfied = max(maxSatisfied, currMax)\\n            \\n        return satisfied + maxSatisfied",
                "solutionTags": [],
                "code": "Time Complexity - O(N), Space Complexity - O(1)\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        leftIndex = 0\\n        satisfied, maxSatisfied, currMax = 0, 0, 0\\n        \\n        for i in range(len(customers)):\\n            satisfied += customers[i] if not grumpy[i] else 0\\n            currMax += customers[i] if grumpy[i] else 0\\n            if i >= minutes:\\n                currMax -= customers[leftIndex] if grumpy[leftIndex] else 0\\n                leftIndex += 1\\n                \\n            maxSatisfied = max(maxSatisfied, currMax)\\n            \\n        return satisfied + maxSatisfied",
                "codeTag": "Java"
            },
            {
                "id": 1355469,
                "title": "golang-sliding-window-faster-than-100",
                "content": "```\\nfunc maxSatisfied(customers []int, grumpy []int, X int) int {\\n\\tmax := 0\\n\\tsatisfied := 0\\n\\ttemp := 0\\n\\n\\tfor i := 0; i < X; i++ {\\n\\t\\tsatisfied, temp = AddToSatisfiedOrTemp(customers, grumpy, i, satisfied, temp)\\n\\t}\\n\\n\\tmax = temp\\n\\n\\tfor i := X; i < len(customers); i++ {\\n\\t\\tif grumpy[i - X] == 1 {\\n\\t\\t\\ttemp -= customers[i - X]\\n\\t\\t}\\n\\n\\t\\tsatisfied, temp = AddToSatisfiedOrTemp(customers, grumpy, i, satisfied, temp)\\n        \\n\\t\\tmax = int(math.Max(float64(max), float64(temp)))\\n\\t}\\n\\n\\treturn satisfied + max\\n}\\n\\nfunc AddToSatisfiedOrTemp(customers []int, grumpy []int, i int, satisfied int, temp int) (int, int) {\\n\\tif grumpy[i] == 0 {\\n\\t\\tsatisfied += customers[i]\\n\\t} else {\\n\\t\\ttemp += customers[i]\\n\\t}\\n    \\n\\treturn satisfied, temp\\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc maxSatisfied(customers []int, grumpy []int, X int) int {\\n\\tmax := 0\\n\\tsatisfied := 0\\n\\ttemp := 0\\n\\n\\tfor i := 0; i < X; i++ {\\n\\t\\tsatisfied, temp = AddToSatisfiedOrTemp(customers, grumpy, i, satisfied, temp)\\n\\t}\\n\\n\\tmax = temp\\n\\n\\tfor i := X; i < len(customers); i++ {\\n\\t\\tif grumpy[i - X] == 1 {\\n\\t\\t\\ttemp -= customers[i - X]\\n\\t\\t}\\n\\n\\t\\tsatisfied, temp = AddToSatisfiedOrTemp(customers, grumpy, i, satisfied, temp)\\n        \\n\\t\\tmax = int(math.Max(float64(max), float64(temp)))\\n\\t}\\n\\n\\treturn satisfied + max\\n}\\n\\nfunc AddToSatisfiedOrTemp(customers []int, grumpy []int, i int, satisfied int, temp int) (int, int) {\\n\\tif grumpy[i] == 0 {\\n\\t\\tsatisfied += customers[i]\\n\\t} else {\\n\\t\\ttemp += customers[i]\\n\\t}\\n    \\n\\treturn satisfied, temp\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1339169,
                "title": "ez-python-code-using-sliding-window",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        i=0\\n        summ=0\\n        while i<len(customers):\\n            if grumpy[i]==0:\\n                summ=summ+customers[i]\\n                customers[i]=0\\n            i=i+1\\n        i=0\\n        j=0\\n        s=0\\n        maxx=-1\\n        while j<len(customers):\\n            s=s+customers[j]\\n            if j>=minutes-1:\\n                maxx=max(maxx,s)\\n                s=s-customers[i]\\n                i=i+1\\n            j=j+1\\n        return summ+maxx\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        i=0\\n        summ=0\\n        while i<len(customers):\\n            if grumpy[i]==0:\\n                summ=summ+customers[i]\\n                customers[i]=0\\n            i=i+1\\n        i=0\\n        j=0\\n        s=0\\n        maxx=-1\\n        while j<len(customers):\\n            s=s+customers[j]\\n            if j>=minutes-1:\\n                maxx=max(maxx,s)\\n                s=s-customers[i]\\n                i=i+1\\n            j=j+1\\n        return summ+maxx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1332077,
                "title": "javascript-solution-sliding-window",
                "content": "```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n    const n = customers.length;\\n    \\n    let happy = 0; // total # of happy customers\\n    let angry = 0; // current angry customers\\n    let left = 0; // left window start\\n    let max = 0; // the max # of angry customers at any given window\\n    \\n    for (let i = 0; i < n; i++) {\\n        const owner = grumpy[i]; // owners current mood\\n        const current = customers[i]; // the new # set of customers entering the store\\n        \\n        if (i >= minutes) { // We update our window\\n            if (grumpy[left] === 1) angry -= customers[left];\\n            left++;\\n        }\\n        \\n        if (owner === 0) {\\n            happy += current;\\n        } else {\\n            angry += current;\\n            max = Math.max(max, angry);\\n        }\\n    }\\n    \\n    return happy + max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n    const n = customers.length;\\n    \\n    let happy = 0; // total # of happy customers\\n    let angry = 0; // current angry customers\\n    let left = 0; // left window start\\n    let max = 0; // the max # of angry customers at any given window\\n    \\n    for (let i = 0; i < n; i++) {\\n        const owner = grumpy[i]; // owners current mood\\n        const current = customers[i]; // the new # set of customers entering the store\\n        \\n        if (i >= minutes) { // We update our window\\n            if (grumpy[left] === 1) angry -= customers[left];\\n            left++;\\n        }\\n        \\n        if (owner === 0) {\\n            happy += current;\\n        } else {\\n            angry += current;\\n            max = Math.max(max, angry);\\n        }\\n    }\\n    \\n    return happy + max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1321784,
                "title": "c-sliding-window",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        //uses sliding window approach\\n        //we need to find subarray in customers of len minutes with maximum sum when shopkeeper is grumpy\\n        //this can be represented as finding subarray with max sum where a number is counted only when shopkeeper is grumpy\\n        //this can be done by multiplying grumpy[i] with customers[i]\\n        \\n        int i = 0; //startIndex of window\\n        int j = 0; //endIndex of window\\n        int n = customers.size();\\n        int maxSum = 0;\\n        int curSum = 0;\\n        int happyCustomers = 0;\\n        \\n        //calculate first window\\n        for(j = 0; j < minutes; j++) {            \\n            curSum += customers[j]*grumpy[j];\\n            //add customers when shopkeeper is not grumpy\\n            happyCustomers += !grumpy[j]*customers[j];\\n        }\\n        \\n        maxSum = curSum;\\n        \\n        //keep moving window by one index till we reach the end\\n        while(i < n && j < n) {\\n            \\n            curSum += customers[j]*grumpy[j];\\n            curSum -= customers[i]*grumpy[i];\\n            happyCustomers += !grumpy[j]*customers[j];\\n            i++;\\n            j++;\\n            if(maxSum < curSum) {\\n                maxSum = curSum;\\n                beginIndex = i;\\n            }\\n            \\n        }\\n        \\n        //maxSum contains subArray of size minutes, where max customers are dissatisfied due to shopkeeper being grumpy.\\n        //apply minutes power for this subArray, will help reduce dissatisfied customers in this subarray(maxSum) the most. \\n        happyCustomers += maxSum;\\n        \\n        return happyCustomers;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        \\n        //uses sliding window approach\\n        //we need to find subarray in customers of len minutes with maximum sum when shopkeeper is grumpy\\n        //this can be represented as finding subarray with max sum where a number is counted only when shopkeeper is grumpy\\n        //this can be done by multiplying grumpy[i] with customers[i]\\n        \\n        int i = 0; //startIndex of window\\n        int j = 0; //endIndex of window\\n        int n = customers.size();\\n        int maxSum = 0;\\n        int curSum = 0;\\n        int happyCustomers = 0;\\n        \\n        //calculate first window\\n        for(j = 0; j < minutes; j++) {            \\n            curSum += customers[j]*grumpy[j];\\n            //add customers when shopkeeper is not grumpy\\n            happyCustomers += !grumpy[j]*customers[j];\\n        }\\n        \\n        maxSum = curSum;\\n        \\n        //keep moving window by one index till we reach the end\\n        while(i < n && j < n) {\\n            \\n            curSum += customers[j]*grumpy[j];\\n            curSum -= customers[i]*grumpy[i];\\n            happyCustomers += !grumpy[j]*customers[j];\\n            i++;\\n            j++;\\n            if(maxSum < curSum) {\\n                maxSum = curSum;\\n                beginIndex = i;\\n            }\\n            \\n        }\\n        \\n        //maxSum contains subArray of size minutes, where max customers are dissatisfied due to shopkeeper being grumpy.\\n        //apply minutes power for this subArray, will help reduce dissatisfied customers in this subarray(maxSum) the most. \\n        happyCustomers += maxSum;\\n        \\n        return happyCustomers;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1289180,
                "title": "simple-12-line-js-solution",
                "content": "---\\n# Simple Sliding Window Solution\\n---\\n* 12 Lines\\n* Runtime:  Faster than 72.90% of solutions\\n* Memory: Less than 22.43% of JavaScript Solutions\\n---\\n![image](https://assets.leetcode.com/users/images/27feb3d3-d81e-4007-8d93-43be66074827_1624340278.1508093.png)\\n\\n```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n let max = 0, happy = 0, right = 0\\n for (let right = 0; right < grumpy.length; right++) {\\n     if (grumpy[right] === 0) {\\n         happy += customers[right]\\n         customers[right] = customers[right-1] ?? 0\\n         continue\\n     }        \\n     const left = right - minutes\\n     customers[right] += customers[right-1] ?? 0\\n     max = Math.max(max, customers[right] - (customers[left] ?? 0))\\n }     \\n return max + happy\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\nvar maxSatisfied = function(customers, grumpy, minutes) {\\n let max = 0, happy = 0, right = 0\\n for (let right = 0; right < grumpy.length; right++) {\\n     if (grumpy[right] === 0) {\\n         happy += customers[right]\\n         customers[right] = customers[right-1] ?? 0\\n         continue\\n     }        \\n     const left = right - minutes\\n     customers[right] += customers[right-1] ?? 0\\n     max = Math.max(max, customers[right] - (customers[left] ?? 0))\\n }     \\n return max + happy\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1277151,
                "title": "fixed-size-sliding-window-while-loop",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, c: List[int], g: List[int], k: int) -> int:\\n        s = 0 ; res = 0\\n        n = len(c)\\n        for i in range(n):\\n            if g[i]==0:\\n                s += c[i]\\n        i,j = 0,0\\n        while j<n:\\n            if g[j]==1:\\n                s += c[j]\\n            if j-i+1<k:\\n                j+=1\\n            elif j-i+1==k:\\n                res = max(res,s)\\n                if g[i]==1:\\n                    s-=c[i]\\n                i+=1\\n                j+=1\\n        return res\\n        \\n                \\n        \\n",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, c: List[int], g: List[int], k: int) -> int:\\n        s = 0 ; res = 0\\n        n = len(c)\\n        for i in range(n):\\n            if g[i]==0:\\n                s += c[i]\\n        i,j = 0,0\\n        while j<n:\\n            if g[j]==1:\\n                s += c[j]\\n            if j-i+1<k:\\n                j+=1\\n            elif j-i+1==k:\\n                res = max(res,s)\\n                if g[i]==1:\\n                    s-=c[i]\\n                i+=1\\n                j+=1\\n        return res\\n        \\n                \\n        \\n",
                "codeTag": "Java"
            },
            {
                "id": 1238402,
                "title": "sliding-window-c-solution-faster-than-99-45-of-c-online-sub",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n      //initializing two pointers   \\n    int l = 0;\\n    int r=0; \\n    int maxUnSatisfiedCustomer = 0;\\n    int unSatisfiedCustomer = 0;\\n    int satisfiedCustomer = 0;   \\n    while(r < grumpy.size()){\\n        if(grumpy[r]){\\n            unSatisfiedCustomer += customers[r++];\\n        }else {\\n            satisfiedCustomer += customers[r++];\\n        }\\n\\n        if(r - l > minutes){\\n            if(grumpy[l]){\\n                 unSatisfiedCustomer -= customers[l];\\n             }\\n            l++;\\n        }\\n        maxUnSatisfiedCustomer = max(maxUnSatisfiedCustomer, unSatisfiedCustomer);\\n    }\\n         return satisfiedCustomer + maxUnSatisfiedCustomer;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n      //initializing two pointers   \\n    int l = 0;\\n    int r=0; \\n    int maxUnSatisfiedCustomer = 0;\\n    int unSatisfiedCustomer = 0;\\n    int satisfiedCustomer = 0;   \\n    while(r < grumpy.size()){\\n        if(grumpy[r]){\\n            unSatisfiedCustomer += customers[r++];\\n        }else {\\n            satisfiedCustomer += customers[r++];\\n        }\\n\\n        if(r - l > minutes){\\n            if(grumpy[l]){\\n                 unSatisfiedCustomer -= customers[l];\\n             }\\n            l++;\\n        }\\n        maxUnSatisfiedCustomer = max(maxUnSatisfiedCustomer, unSatisfiedCustomer);\\n    }\\n         return satisfiedCustomer + maxUnSatisfiedCustomer;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1222849,
                "title": "c-using-sliding-window-100-easy-understanding",
                "content": "class Solution {\\npublic:\\n    \\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes)\\n    {\\n        int i=0;\\n        int j=0;\\n        int sum =0;\\n        int maxx= 0;\\n        int temp=0;\\n        int n=customers.size();\\n        while(j-i+1<minutes)\\n        {\\n             if(grumpy[j]==0)\\n                sum = sum+customers[j];\\n            \\n            else\\n                temp = temp + customers[j];\\n            j++;\\n        }\\n        while(j<n)\\n        {\\n            if(grumpy[j]==0)\\n                sum = sum+customers[j];\\n            \\n            else\\n                temp = temp + customers[j];\\n            \\n                maxx = max(maxx,temp);\\n                if(grumpy[i]==1)\\n                    temp=temp-customers[i];\\n                i++;\\n                j++;\\n        }\\n        return sum+maxx;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    \\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes)\\n    {\\n        int i=0;\\n        int j=0;\\n        int sum =0;\\n        int maxx= 0;\\n        int temp=0;\\n        int n=customers.size();\\n        while(j-i+1<minutes)\\n        {\\n             if(grumpy[j]==0)\\n                sum = sum+customers[j];\\n            \\n            else\\n                temp = temp + customers[j];\\n            j++;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1208867,
                "title": "python-easy-to-understand-beats-86-sliding-window",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], k: int) -> int:\\n        current_customers_satisfied = 0\\n        \\n\\t\\t# Calculating how many customers the owner satisfies when he is not grumpy\\n        for i in range(len(customers)):\\n            if not grumpy[i]:\\n                current_customers_satisfied += customers[i]\\n                \\n        temp = 0\\n        \\n\\t\\t#Referencing \\'k\\' value as our power window\\n\\t\\t#calculating how many ** additional** customers the owner satisfies with the power\\n        for i in range(k):\\n            if grumpy[i]:  \\n                temp += customers[i]\\n                \\n        current_customers_satisfied += temp\\n        max_customers_satisfied = current_customers_satisfied\\n        \\n\\t\\t\\n        for r in range(k, len(customers)):         \\n\\n            if grumpy[r]:\\n                current_customers_satisfied += customers[r]\\n                \\n            if grumpy[r-k]:\\n                current_customers_satisfied -= customers[r-k]\\n            \\n            max_customers_satisfied = max(current_customers_satisfied, max_customers_satisfied)\\n            \\n        return max_customers_satisfied\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], k: int) -> int:\\n        current_customers_satisfied = 0\\n        \\n\\t\\t# Calculating how many customers the owner satisfies when he is not grumpy\\n        for i in range(len(customers)):\\n            if not grumpy[i]:\\n                current_customers_satisfied += customers[i]\\n                \\n        temp = 0\\n        \\n\\t\\t#Referencing \\'k\\' value as our power window\\n\\t\\t#calculating how many ** additional** customers the owner satisfies with the power\\n        for i in range(k):\\n            if grumpy[i]:  \\n                temp += customers[i]\\n                \\n        current_customers_satisfied += temp\\n        max_customers_satisfied = current_customers_satisfied\\n        \\n\\t\\t\\n        for r in range(k, len(customers)):         \\n\\n            if grumpy[r]:\\n                current_customers_satisfied += customers[r]\\n                \\n            if grumpy[r-k]:\\n                current_customers_satisfied -= customers[r-k]\\n            \\n            max_customers_satisfied = max(current_customers_satisfied, max_customers_satisfied)\\n            \\n        return max_customers_satisfied\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1202779,
                "title": "c-sliding-window-explained",
                "content": "Since the minutes at which the owner is not grumpy never changes, we can simply calculate their sum as our bare -minimum ans. Next run a sliding window of size X iteratively calculating the \\'additonal\\' ans we can achieve by setting grumpy[i] to 0. Take its maximum and add to our previously calculated ans.\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int ans=0,n=grumpy.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(!grumpy[i])\\n                ans+=customers[i];\\n        }\\n        int add=0,tans=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(grumpy[i])\\n                add+=customers[i];\\n        }\\n        tans=add;\\n        for(int i=k;i<n;i++)\\n        {\\n            if(grumpy[i])\\n                add+=customers[i];\\n            if(grumpy[i-k])\\n                add-=customers[i-k];\\n            tans=max(tans,add);\\n        }\\n        ans+=tans;\\n        return ans;\\n    }\\n};\\n//TC:O(n)\\n//SC:O(1)\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int ans=0,n=grumpy.size();\\n        for(int i=0;i<n;i++)\\n        {\\n            if(!grumpy[i])\\n                ans+=customers[i];\\n        }\\n        int add=0,tans=0;\\n        for(int i=0;i<k;i++)\\n        {\\n            if(grumpy[i])\\n                add+=customers[i];\\n        }\\n        tans=add;\\n        for(int i=k;i<n;i++)\\n        {\\n            if(grumpy[i])\\n                add+=customers[i];\\n            if(grumpy[i-k])\\n                add-=customers[i-k];\\n            tans=max(tans,add);\\n        }\\n        ans+=tans;\\n        return ans;\\n    }\\n};\\n//TC:O(n)\\n//SC:O(1)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1197168,
                "title": "javascript-solution-sliding-window",
                "content": "```\\nvar maxSatisfied = function(customers, grumpy, X) {\\n    let start = 0, end, grumpy_sub_total = 0, total = 0, max= 0;\\n    \\n    for(end = 0; end < customers.length; end++) {\\n        \\n        total += grumpy[end]==0 ? customers[end] : 0;\\n        grumpy_sub_total += grumpy[end] == 1 ? customers[end] : 0;\\n        \\n        if(end-start+1 > X) {\\n            if(grumpy[start] == 1) {\\n                grumpy_sub_total -= customers[start];\\n            }\\n            start += 1;\\n        }\\n        \\n        max = Math.max(max, grumpy_sub_total);\\n    }\\n    \\n    return total+max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Sliding Window"
                ],
                "code": "```\\nvar maxSatisfied = function(customers, grumpy, X) {\\n    let start = 0, end, grumpy_sub_total = 0, total = 0, max= 0;\\n    \\n    for(end = 0; end < customers.length; end++) {\\n        \\n        total += grumpy[end]==0 ? customers[end] : 0;\\n        grumpy_sub_total += grumpy[end] == 1 ? customers[end] : 0;\\n        \\n        if(end-start+1 > X) {\\n            if(grumpy[start] == 1) {\\n                grumpy_sub_total -= customers[start];\\n            }\\n            start += 1;\\n        }\\n        \\n        max = Math.max(max, grumpy_sub_total);\\n    }\\n    \\n    return total+max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1193630,
                "title": "java-solution-sliding-window-o-n",
                "content": "The goal is to allign the window of length X with the subarray which dis-satisfies the most customers when the owner is grumpy. Therefore, this problem can be interpreted as finding any subarray that has the biggest sum on the minutes when owner is grumpy - which is the pure gain by applying the magic technique over X minutes to ensure owner is not grumpy. \\n\\nOn top of that, while interating the array, we also need to keep track of the total number of customers that can be satisfied during non-grumpy minutes.\\n\\nThis is just a slightly different variation of the classic fixed-length sliding window problem - finding the max sum subarray of length X.\\n\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int totalCustNoGrumpy = 0;\\n        int maxSumGain = 0;\\n        int runningSum = 0;\\n        \\n        for (int i = 0; i < customers.length; i++)\\n        {\\n            if (grumpy[i] == 1)\\n                runningSum += customers[i];\\n            else\\n                totalCustNoGrumpy += customers[i];\\n            if (i >= X-1)\\n            {\\n                maxSumGain = Math.max(maxSumGain, runningSum);\\n                if (grumpy[i-(X-1)] == 1)\\n                    runningSum -= customers[i-(X-1)];\\n            }\\n        }\\n        return totalCustNoGrumpy + maxSumGain;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int totalCustNoGrumpy = 0;\\n        int maxSumGain = 0;\\n        int runningSum = 0;\\n        \\n        for (int i = 0; i < customers.length; i++)\\n        {\\n            if (grumpy[i] == 1)\\n                runningSum += customers[i];\\n            else\\n                totalCustNoGrumpy += customers[i];\\n            if (i >= X-1)\\n            {\\n                maxSumGain = Math.max(maxSumGain, runningSum);\\n                if (grumpy[i-(X-1)] == 1)\\n                    runningSum -= customers[i-(X-1)];\\n            }\\n        }\\n        return totalCustNoGrumpy + maxSumGain;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1193074,
                "title": "simplest-one-pass-c-solution-ever",
                "content": "The `freeSum` variable keeps adding the values when the bookstore owner is not grumpy as I can take all of them without any constraint.\\nI run a window over the array, with its initial point as` j = 0` , and ending point as `i`. Let the window grow initially to take a size of `x`, till then, just keep adding the value if its a grumpy day ( means `freeSum` lacks that element ). When the window reaches its max size, I keep on removing the starting element if I added it in the first place ( just need to check if `jth` day was grumpy ).\\nMaintain a maxWindow which keeps track of maximum window value so far.\\n\\nFinally, return the sum of `maxWindow` and `freeSum` :)\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& v, vector<int>& g, int x) {\\n        int freeSum=0, window = 0, maxWindow=0, winSz=0, j=0;\\n        \\n        for(int i = 0; i < v.size(); i++){\\n            if(g[i]){\\n                window += v[i];\\n            }\\n            else {\\n                freeSum += v[i];\\n            }\\n            \\n            if(winSz < x){\\n                winSz++;\\n            }\\n            else{\\n                if(g[j])\\n                    window -= v[j];\\n                j++;\\n            }\\n            \\n            maxWindow = max(maxWindow, window);\\n        }\\n        \\n        return freeSum + maxWindow;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Two Pointers",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& v, vector<int>& g, int x) {\\n        int freeSum=0, window = 0, maxWindow=0, winSz=0, j=0;\\n        \\n        for(int i = 0; i < v.size(); i++){\\n            if(g[i]){\\n                window += v[i];\\n            }\\n            else {\\n                freeSum += v[i];\\n            }\\n            \\n            if(winSz < x){\\n                winSz++;\\n            }\\n            else{\\n                if(g[j])\\n                    window -= v[j];\\n                j++;\\n            }\\n            \\n            maxWindow = max(maxWindow, window);\\n        }\\n        \\n        return freeSum + maxWindow;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1190682,
                "title": "python-very-easy-explanations",
                "content": "This is very eay problem. We just have to find the maximum number of custromers that are \\nlost when the shopkeeper is grumpy in the window of X.\\nThen we will add this to our final sum of customers\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        i=0\\n        max_save = 0\\n        curr = 0\\n        for j in range(len(grumpy)):\\n            if j-i+1>X:\\n                if grumpy[i]>0:\\n                    curr -= customers[i]\\n                i+=1\\n            if grumpy[j]>0:\\n                curr +=  customers[j]\\n                max_save = max(max_save,curr)\\n        ans = max_save\\n        for i in range(len(grumpy)):\\n            if grumpy[i]==0:\\n                ans+=customers[i]\\n        return ans\\n                \\n",
                "solutionTags": [],
                "code": "This is very eay problem. We just have to find the maximum number of custromers that are \\nlost when the shopkeeper is grumpy in the window of X.\\nThen we will add this to our final sum of customers\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        i=0\\n        max_save = 0\\n        curr = 0\\n        for j in range(len(grumpy)):\\n            if j-i+1>X:\\n                if grumpy[i]>0:\\n                    curr -= customers[i]\\n                i+=1\\n            if grumpy[j]>0:\\n                curr +=  customers[j]\\n                max_save = max(max_save,curr)\\n        ans = max_save\\n        for i in range(len(grumpy)):\\n            if grumpy[i]==0:\\n                ans+=customers[i]\\n        return ans\\n                \\n",
                "codeTag": "Java"
            },
            {
                "id": 1161455,
                "title": "simple-swift-solution-o-n",
                "content": "class Solution {\\n    func maxSatisfied(_ nums: [Int], _ grumpy: [Int], _ X: Int) -> Int {\\n        \\n        //function to check if index is grumpy\\n        func isGrumpy(_ index: Int) -> Bool {\\n            return grumpy[index] == 1   \\n        }\\n        \\n        //fill all satisfied customers\\n        var satisfiedCust = 0 \\n        for i in 0 ..< nums.count{\\n            if !isGrumpy(i){\\n                satisfiedCust += nums[i]\\n            }\\n        }\\n        \\n        var ans = 0\\n        var start = 0\\n        var end = 0\\n        var satisfiedCustInWindow = 0\\n        \\n        while end < nums.count {\\n            //add unsatified customers in window -> window can have all unsatisfied customers as satisfied.\\n            if isGrumpy(end) {\\n                satisfiedCustInWindow += nums[end]\\n            }\\n            if (end - start + 1) < X { // increment end index till window is reached\\n                end += 1\\n            }else if (end - start + 1) == X  { \\n                // widow reached reached -> check for max customers and substract un statisfied customer from start of window if index is grumpy and move window forward\\n                ans = max(ans, satisfiedCustInWindow + satisfiedCust)\\n                if isGrumpy(start){\\n                    satisfiedCustInWindow -= nums[start]\\n                }\\n                start += 1\\n                end += 1\\n            } \\n        }\\n        return ans\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    func maxSatisfied(_ nums: [Int], _ grumpy: [Int], _ X: Int) -> Int {\\n        \\n        //function to check if index is grumpy\\n        func isGrumpy(_ index: Int) -> Bool {\\n            return grumpy[index] == 1   \\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1133596,
                "title": "python-code-faster-than-99-58-easy-to-understand",
                "content": "Calculate the max number of customers when the owner is grumpy for each sliding window of size X.\\nIn the end, add all the customers when the owner is not grumpy. \\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        res = 0\\n        for i in range(X):\\n            if grumpy[i]:\\n                res += customers[i]\\n                \\n        temp = res\\n        idx = 0\\n        for i in range(len(customers)-X):\\n            \\n            if grumpy[i]:\\n                temp -= customers[i]\\n            if grumpy[i+X]:\\n                temp += customers[i+X]\\n            if temp > res:\\n                res = temp\\n                idx = i+1\\n        \\n        for i in range(len(customers)):\\n            if not grumpy[i]:\\n                res += customers[i] \\n        \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        res = 0\\n        for i in range(X):\\n            if grumpy[i]:\\n                res += customers[i]\\n                \\n        temp = res\\n        idx = 0\\n        for i in range(len(customers)-X):\\n            \\n            if grumpy[i]:\\n                temp -= customers[i]\\n            if grumpy[i+X]:\\n                temp += customers[i+X]\\n            if temp > res:\\n                res = temp\\n                idx = i+1\\n        \\n        for i in range(len(customers)):\\n            if not grumpy[i]:\\n                res += customers[i] \\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1080152,
                "title": "c-go-sliding-window",
                "content": "C++\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum = 0;\\n        for (int i = 0; i < customers.size(); i++) {\\n            sum += customers[i] * (grumpy[i] == 0);\\n        }\\n\\n        int diff = 0, maxDiff = 0;\\n        for (int i = 0; i < X; i++)  {\\n            diff += customers[i] * (grumpy[i]);\\n        }\\n\\n        maxDiff = diff;\\n        for (int i = 1; i + X <= customers.size(); i++) {\\n            diff = diff - customers[i - 1] * (grumpy[i - 1]) + customers[i + X - 1] * (grumpy[i + X - 1]);\\n            maxDiff = max(diff, maxDiff);\\n        }\\n        return sum + maxDiff;\\n    }\\n};\\n```\\n\\nGo\\n```\\nfunc max(a, b int) int {\\n    if a > b {return a}\\n    return b\\n}\\n\\nfunc maxSatisfied(customers []int, grumpy []int, X int) int {\\n    var sum, diff, maxDiff int = 0, 0, 0;\\n    for i := 0; i < len(customers); i++ {\\n        if grumpy[i] == 0 {\\n            sum += customers[i];\\n        }\\n    }\\n    \\n    for i := 0; i < X; i++ {\\n        if grumpy[i] == 1 {\\n            diff += customers[i];\\n        }\\n    }\\n    \\n    maxDiff = diff;\\n    for i := 1; i + X <= len(customers); i++ {\\n        if grumpy[i - 1] == 1 {\\n            diff -= customers[i - 1]\\n        }\\n        if grumpy[i + X - 1] == 1 {\\n            diff += customers[i + X - 1]\\n        }\\n        maxDiff = max(diff, maxDiff)\\n    }\\n    \\n    return sum + maxDiff;\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum = 0;\\n        for (int i = 0; i < customers.size(); i++) {\\n            sum += customers[i] * (grumpy[i] == 0);\\n        }\\n\\n        int diff = 0, maxDiff = 0;\\n        for (int i = 0; i < X; i++)  {\\n            diff += customers[i] * (grumpy[i]);\\n        }\\n\\n        maxDiff = diff;\\n        for (int i = 1; i + X <= customers.size(); i++) {\\n            diff = diff - customers[i - 1] * (grumpy[i - 1]) + customers[i + X - 1] * (grumpy[i + X - 1]);\\n            maxDiff = max(diff, maxDiff);\\n        }\\n        return sum + maxDiff;\\n    }\\n};\\n```\n```\\nfunc max(a, b int) int {\\n    if a > b {return a}\\n    return b\\n}\\n\\nfunc maxSatisfied(customers []int, grumpy []int, X int) int {\\n    var sum, diff, maxDiff int = 0, 0, 0;\\n    for i := 0; i < len(customers); i++ {\\n        if grumpy[i] == 0 {\\n            sum += customers[i];\\n        }\\n    }\\n    \\n    for i := 0; i < X; i++ {\\n        if grumpy[i] == 1 {\\n            diff += customers[i];\\n        }\\n    }\\n    \\n    maxDiff = diff;\\n    for i := 1; i + X <= len(customers); i++ {\\n        if grumpy[i - 1] == 1 {\\n            diff -= customers[i - 1]\\n        }\\n        if grumpy[i + X - 1] == 1 {\\n            diff += customers[i + X - 1]\\n        }\\n        maxDiff = max(diff, maxDiff)\\n    }\\n    \\n    return sum + maxDiff;\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1019034,
                "title": "c-solution-using-sliding-window",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        /*sum is the number of satisfied customers before using secret techinique. \\n        curr is the number of customers we can turn from unsatisfied to satisfied in X window using secret technique. \\n        largest is the maximum number of customers we can turn \\n        */\\n        int sum = 0, curr = 0, largest = 0;\\n        int n = customers.size();\\n        for(int i = 0; i < n; i++){\\n            if(grumpy[i] == 0) sum += customers[i];\\n            else{\\n                curr += customers[i];\\n            }\\n            \\n            if(i >= X){\\n                curr -= customers[i -X] * grumpy[i - X];\\n            }\\n            largest = max(largest, curr);\\n        }\\n        \\n        return sum + largest;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        /*sum is the number of satisfied customers before using secret techinique. \\n        curr is the number of customers we can turn from unsatisfied to satisfied in X window using secret technique. \\n        largest is the maximum number of customers we can turn \\n        */\\n        int sum = 0, curr = 0, largest = 0;\\n        int n = customers.size();\\n        for(int i = 0; i < n; i++){\\n            if(grumpy[i] == 0) sum += customers[i];\\n            else{\\n                curr += customers[i];\\n            }\\n            \\n            if(i >= X){\\n                curr -= customers[i -X] * grumpy[i - X];\\n            }\\n            largest = max(largest, curr);\\n        }\\n        \\n        return sum + largest;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1014647,
                "title": "c-100-faster-easy-solution-with-explanation",
                "content": "if owner is not grumpy in that minute, add the customers to result.\\notherwise use sliding window, if owner is grumpy  add that (no of customer) in the window, and while sliding subtract (customer[i]) only if the owner was grumpy in that minute ( i-X minute)\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n= grumpy.size();\\n        int res=0, s=0, mx=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(!grumpy[i]) res+=customers[i];\\n        }\\n        for(int i=0; i<n ; i++)\\n        {\\n            if(grumpy[i]==1)\\n                s+=customers[i];\\n            if(i>=X and grumpy[i-X])\\n                s-=customers[i-X];\\n            \\n            mx=max(s,mx);\\n        }\\n        return res+mx;\\n        \\n    }\\n};\\n```\\ndo upvote if it helped :)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n= grumpy.size();\\n        int res=0, s=0, mx=0;\\n        for(int i=0; i<n; i++)\\n        {\\n            if(!grumpy[i]) res+=customers[i];\\n        }\\n        for(int i=0; i<n ; i++)\\n        {\\n            if(grumpy[i]==1)\\n                s+=customers[i];\\n            if(i>=X and grumpy[i-X])\\n                s-=customers[i-X];\\n            \\n            mx=max(s,mx);\\n        }\\n        return res+mx;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1013811,
                "title": "python3-2-pointer",
                "content": "**Algo**\\nKeep track of summation of customers when owner is grumpy and un-grumpy separately. For the grumpy sum, use a sliding window of two pointers `[ii, i]` for the extra value to be added back. \\n\\n**Implementation**\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        ans = val = ii = mx = 0\\n        for i in range(len(customers)): \\n            if not grumpy[i]: ans += customers[i]\\n            else: \\n                val += customers[i]\\n                while ii <= i-X: \\n                    if grumpy[ii]: val -= customers[ii]\\n                    ii += 1\\n                mx = max(mx, val)\\n        return ans + mx \\n```\\n\\n**Analysis**\\nTime complexity `O(N)`\\nSpace complexity `O(1)`",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        ans = val = ii = mx = 0\\n        for i in range(len(customers)): \\n            if not grumpy[i]: ans += customers[i]\\n            else: \\n                val += customers[i]\\n                while ii <= i-X: \\n                    if grumpy[ii]: val -= customers[ii]\\n                    ii += 1\\n                mx = max(mx, val)\\n        return ans + mx \\n```",
                "codeTag": "Java"
            },
            {
                "id": 1013572,
                "title": "java-one-pass-sliding-window",
                "content": "The idea is to move a sliding window across the array of width X.\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        // We track the number of satisfied customers without using the \"secret technique\".\\n        int satisfied = 0;\\n        // The current best number of unsatisfied customers saved using the \"secret technique\".\\n        int saved = 0;\\n        // Number the number of saved customers in a sliding window of size X.\\n        int runningSavedSum = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            // Remove (if applicable) the left element of the sliding window.\\n            if (i - X >= 0 && grumpy[i - X] == 1) runningSavedSum -= customers[i - X];\\n            if (grumpy[i] == 0) satisfied += customers[i];\\n            else {\\n                runningSavedSum += customers[i];\\n                saved = Math.max(saved, runningSavedSum);\\n            }\\n        }\\n        return satisfied + saved;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        // We track the number of satisfied customers without using the \"secret technique\".\\n        int satisfied = 0;\\n        // The current best number of unsatisfied customers saved using the \"secret technique\".\\n        int saved = 0;\\n        // Number the number of saved customers in a sliding window of size X.\\n        int runningSavedSum = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            // Remove (if applicable) the left element of the sliding window.\\n            if (i - X >= 0 && grumpy[i - X] == 1) runningSavedSum -= customers[i - X];\\n            if (grumpy[i] == 0) satisfied += customers[i];\\n            else {\\n                runningSavedSum += customers[i];\\n                saved = Math.max(saved, runningSavedSum);\\n            }\\n        }\\n        return satisfied + saved;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 982498,
                "title": "java-o-n-track-of-customers-who-can-be-made-happy-w-technique",
                "content": "In order to solve this problem, we need to determine what selection technique is **optimal** for the shopkeeper to maximize satisfied customers? It is *not* just tracking the maximum number of customers over X minutes, because there is no benefit to the owner applying their technique if they would *not* ordinarily be grumpy during those times. In reality, what we need to be concerned with is the *maximum number of customers in an X-minute window that would encounter the owner in a grumpy mood **without** the technique*. The sum of these customers plus the sum of all ordinarily-satisfied customers, represents the maximum number of satisfied customers.\\n\\nTo summarize, the maximum number of satisfied customers may be thought of as the sum of:\\n\\n1) The number of customers who would leave satisfied *regardless* of when the technique is applied\\n\\n2) The maximum number of customers who would leave *dissatisfied* without the technique, but can be made satisfied via the technique \\n\\nWe can track the number of customers that will always be satisfied in a variable `always`, and those who *may* be made satisfied by applying the technique in the current X-minute window in a separate variable `maybe`. We\\'ll also track the maximum value of `maybe` encountered, to track the maximum number of otherwise-dissatisfied customers who may be made satisfied w/ the technique.\\n\\nThis approach is demonstrated in the following code:\\n\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int always = 0; // customers that are *always* happy \\n        int maybe = 0; // customers that *may* be satisfied w/ technique\\n        int max = 0; // max # of customers the technique can be applied to\\n        for(int i = 0; i < customers.length; ++i) {\\n            if(grumpy[i] == 0) {  // these customers are always satisfied\\n                always += customers[i];\\n            } else { // these customers require the technique to be happy\\n                maybe += customers[i];\\n            }\\n            \\n            // remove maybe-satisfied customers from the count\\n            // if they\\'re no longer in the X-minute window\\n            if(i >= X) {\\n                 maybe -= customers[i-X]*grumpy[i-X];\\n            }\\n            \\n            // update max if the current window satisfies more\\n            // otherwise-dissatisfied customers\\n            max = Math.max(maybe, max);\\n        }\\n        return always + max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int always = 0; // customers that are *always* happy \\n        int maybe = 0; // customers that *may* be satisfied w/ technique\\n        int max = 0; // max # of customers the technique can be applied to\\n        for(int i = 0; i < customers.length; ++i) {\\n            if(grumpy[i] == 0) {  // these customers are always satisfied\\n                always += customers[i];\\n            } else { // these customers require the technique to be happy\\n                maybe += customers[i];\\n            }\\n            \\n            // remove maybe-satisfied customers from the count\\n            // if they\\'re no longer in the X-minute window\\n            if(i >= X) {\\n                 maybe -= customers[i-X]*grumpy[i-X];\\n            }\\n            \\n            // update max if the current window satisfies more\\n            // otherwise-dissatisfied customers\\n            max = Math.max(maybe, max);\\n        }\\n        return always + max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 967132,
                "title": "sliding-window-python-with-comments",
                "content": "```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, X):\\n         ans, happy, max_happy = 0, 0, 0\\n         for i in range(len(customers)):\\n\\t\\t    # Add customers who are happy on the day bookstore owner is not grumpy\\n             if grumpy[i] == 0:\\n                 ans += customers[i]\\n             \\n\\t\\t\\t #  After first X days slide the window by keeping window size X and check the number of happy customers if owner decides not to be grumpy\\n             if i >= X:\\n                 happy = customers[i]*grumpy[i] + happy - customers[i-X]*grumpy[i-X]\\n             else:\\n\\t\\t\\t    # Get the number of happy customers on the days when owner instead of being grumpy decides not be grumpy ( within the first X days)\\n                 happy = happy + customers[i]*grumpy[i]\\n             # Get the maximum happy customers in each window for the days owner decides not to be grumpy   \\n             max_happy = max(happy, max_happy)\\n         return ans + max_happy\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, X):\\n         ans, happy, max_happy = 0, 0, 0\\n         for i in range(len(customers)):\\n\\t\\t    # Add customers who are happy on the day bookstore owner is not grumpy\\n             if grumpy[i] == 0:\\n                 ans += customers[i]\\n             \\n\\t\\t\\t #  After first X days slide the window by keeping window size X and check the number of happy customers if owner decides not to be grumpy\\n             if i >= X:\\n                 happy = customers[i]*grumpy[i] + happy - customers[i-X]*grumpy[i-X]\\n             else:\\n\\t\\t\\t    # Get the number of happy customers on the days when owner instead of being grumpy decides not be grumpy ( within the first X days)\\n                 happy = happy + customers[i]*grumpy[i]\\n             # Get the maximum happy customers in each window for the days owner decides not to be grumpy   \\n             max_happy = max(happy, max_happy)\\n         return ans + max_happy\\n```",
                "codeTag": "Java"
            },
            {
                "id": 945824,
                "title": "python-sliding-window",
                "content": "```python\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        n, total_cus  = len(customers), 0\\n        for i in range(n):\\n            if i < X:\\n                total_cus += customers[i]\\n            else:\\n                total_cus += (1 - grumpy[i]) * customers[i]\\n                \\n        left, right = 0, X\\n        result = total_cus\\n        while right < n:\\n            if grumpy[right] == 1:\\n                total_cus += customers[right]\\n            if grumpy[left] == 1:\\n                total_cus -= customers[left]\\n            result = max(result, total_cus)\\n            left += 1\\n            right += 1\\n        return result\\n",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```python\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        n, total_cus  = len(customers), 0\\n        for i in range(n):\\n            if i < X:\\n                total_cus += customers[i]\\n            else:\\n                total_cus += (1 - grumpy[i]) * customers[i]\\n                \\n        left, right = 0, X\\n        result = total_cus\\n        while right < n:\\n            if grumpy[right] == 1:\\n                total_cus += customers[right]\\n            if grumpy[left] == 1:\\n                total_cus -= customers[left]\\n            result = max(result, total_cus)\\n            left += 1\\n            right += 1\\n        return result\\n",
                "codeTag": "Java"
            },
            {
                "id": 917252,
                "title": "c-sliding-window",
                "content": "Count the most customrs that can be changed from unsatisfied to satisfied. Then we have the answer.\\n```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n    int n = (int) customers.size(), res = 0;\\n    int sum = 0, curChange = 0, maxChange = 0;\\n    for (int i = 0; i < n; i++) {\\n        if (!grumpy[i]) sum += customers[i];\\n        if (grumpy[i]) curChange += customers[i];\\n        if (i >= X && grumpy[i - X]) curChange -= customers[i - X];\\n        maxChange = max(maxChange, curChange);\\n    }\\n    res = sum + maxChange;\\n    return res;\\n}",
                "solutionTags": [],
                "code": "Count the most customrs that can be changed from unsatisfied to satisfied. Then we have the answer.\\n```\\nint maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n    int n = (int) customers.size(), res = 0;\\n    int sum = 0, curChange = 0, maxChange = 0;\\n    for (int i = 0; i < n; i++) {\\n        if (!grumpy[i]) sum += customers[i];\\n        if (grumpy[i]) curChange += customers[i];\\n        if (i >= X && grumpy[i - X]) curChange -= customers[i - X];\\n        maxChange = max(maxChange, curChange);\\n    }\\n    res = sum + maxChange;\\n    return res;\\n}",
                "codeTag": "Unknown"
            },
            {
                "id": 914436,
                "title": "very-simple-code-c-easy-to-understand-explanation",
                "content": "Let\\'s start with this example.\\nc = [1,0,7,2,1,1,1,5]\\ng = [0,1,1,1,0,1,0,1]\\nw = [1 1 1 - - - - -]\\n\\nWhen you start the window as above, the cur = res = 1+0+7. \\nIf you move the window w to [- 1 1 1 - - - -], what you need to do is \\ncur = 8 + 2 - (1 * 0) = 9\\nIf you don\\'t move the window, \\nres = 8 + 2 = 10\\n\\nWe can see res is bigger than cur, which means not moving the window would be better choice than moving the window.\\nWe keep doing this for cur and res, and compare these two, and update the res.\\nReturn the res at the last.\\n\\nO(N) time, O(1) space. N is the length of curstomers.\\n\\n```\\n   int maxSatisfied(vector<int>& c, vector<int>& g, int X) {\\n        int cur, res = 0;\\n        \\n        for(int i = 0; i < X; i++) res += c[i];\\n\\n        cur = res;\\n        for(int i = X; i < c.size(); i++){\\n            cur += c[i] - c[i-X]*g[i-X];\\n            res += c[i]*(!g[i]);\\n            res = max(res, cur);\\n        }\\n        \\n        return res;\\n    }\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\n   int maxSatisfied(vector<int>& c, vector<int>& g, int X) {\\n        int cur, res = 0;\\n        \\n        for(int i = 0; i < X; i++) res += c[i];\\n\\n        cur = res;\\n        for(int i = X; i < c.size(); i++){\\n            cur += c[i] - c[i-X]*g[i-X];\\n            res += c[i]*(!g[i]);\\n            res = max(res, cur);\\n        }\\n        \\n        return res;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 912940,
                "title": "python-linear-sliding-window-solution",
                "content": "The answer is the sum of the number of all customers when the owner is not grumpy and the max number of customers in a window of size X when the owner is grumpy. The second group of customers are the ones we gain by choosing that window.\\n\\nTime complexity: O(n)\\nSpace complexity: O(1)\\n\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        num_happy = 0\\n        max_grumpy = 0\\n        num_grumpy = 0\\n        \\n        n = len(customers)\\n        for i in range(n):\\n            # Track customers that will already be satisfied.\\n            num_happy += customers[i] * (not grumpy[i])\\n            \\n            # Track window with the max number of unsatisfied customers.\\n            num_grumpy += customers[i] * grumpy[i]\\n            if i >= X - 1:\\n                if i > X - 1:\\n\\t\\t\\t\\t    # Window is now larger than X, so remove oldest group of customers if owner was grumpy.\\n                    num_grumpy -= customers[i-X] * grumpy[i-X]\\n                max_grumpy = max(num_grumpy, max_grumpy)\\n        \\n        return num_happy + max_grumpy\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        num_happy = 0\\n        max_grumpy = 0\\n        num_grumpy = 0\\n        \\n        n = len(customers)\\n        for i in range(n):\\n            # Track customers that will already be satisfied.\\n            num_happy += customers[i] * (not grumpy[i])\\n            \\n            # Track window with the max number of unsatisfied customers.\\n            num_grumpy += customers[i] * grumpy[i]\\n            if i >= X - 1:\\n                if i > X - 1:\\n\\t\\t\\t\\t    # Window is now larger than X, so remove oldest group of customers if owner was grumpy.\\n                    num_grumpy -= customers[i-X] * grumpy[i-X]\\n                max_grumpy = max(num_grumpy, max_grumpy)\\n        \\n        return num_happy + max_grumpy\\n```",
                "codeTag": "Java"
            },
            {
                "id": 906073,
                "title": "kotlin-fixed-size-sliding-window",
                "content": "Fixed-Size Sliding Window\" - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/blob/main/txt/by_technique/n_pointers/by_pointer_amount/2_pointers/sliding_window/fixed_size_window.txt)\\nProblem List related to #SlidingWindow - [github](https://github.com/An7One/leetcode-problems-by-tag-an7one/tree/main/txt/by_technique/n_pointers/by_pointer_amount/2_pointers/sliding_window)\\n\\n```\\n/**\\n * https://leetcode.com/problems/grumpy-bookstore-owner/\\n *\\n * Time Complexity:     O(`size`)\\n * Space Complexity:    O(1)\\n *\\n * References:\\n *  https://leetcode.com/problems/grumpy-bookstore-owner/discuss/299492/Java-one-pass-with-comments-sliding-window\\n */\\nclass Solution {\\n    fun maxSatisfied(customers: IntArray, grumpy: IntArray, X: Int): Int {\\n\\t    // not used\\n        // val size = customers.size\\n\\n        var save = 0\\n        var totalCustomers = 0\\n        var totalGrumpy = 0\\n        var maxSave = 0\\n        \\n        for(idx in customers.indices){\\n            totalCustomers += customers[idx]\\n            totalGrumpy += customers[idx] * grumpy[idx]\\n            save += customers[idx] * grumpy[idx]\\n            \\n            if(idx > X - 1){\\n                save -= customers[idx - X] * grumpy[idx - X]\\n            }\\n            \\n            maxSave = maxOf(maxSave, save)\\n        }\\n        \\n        return totalCustomers - totalGrumpy + maxSave\\n    }\\n}\\n```",
                "solutionTags": [
                    "Kotlin",
                    "Sliding Window"
                ],
                "code": "```\\n/**\\n * https://leetcode.com/problems/grumpy-bookstore-owner/\\n *\\n * Time Complexity:     O(`size`)\\n * Space Complexity:    O(1)\\n *\\n * References:\\n *  https://leetcode.com/problems/grumpy-bookstore-owner/discuss/299492/Java-one-pass-with-comments-sliding-window\\n */\\nclass Solution {\\n    fun maxSatisfied(customers: IntArray, grumpy: IntArray, X: Int): Int {\\n\\t    // not used\\n        // val size = customers.size\\n\\n        var save = 0\\n        var totalCustomers = 0\\n        var totalGrumpy = 0\\n        var maxSave = 0\\n        \\n        for(idx in customers.indices){\\n            totalCustomers += customers[idx]\\n            totalGrumpy += customers[idx] * grumpy[idx]\\n            save += customers[idx] * grumpy[idx]\\n            \\n            if(idx > X - 1){\\n                save -= customers[idx - X] * grumpy[idx - X]\\n            }\\n            \\n            maxSave = maxOf(maxSave, save)\\n        }\\n        \\n        return totalCustomers - totalGrumpy + maxSave\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 903255,
                "title": "sliding-window-c-or-cpp-o-n-time-o-1-space",
                "content": "the question follows sliding window format\\nfirst we get X not happy customers and then we maintain window \\nafter that we add happy customers to it .\\n \\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n//         get unhapp min list\\n        if(customers.size()==NULL){\\n            return -1;\\n        }\\n        int left = 0;\\n        int right = 0;\\n        int n = customers.size();\\n        int res=0;\\n        int res1=0;\\n        //get X window\\n        while(right<n && right<X){\\n            if(grumpy[right]==1){\\n                res += customers[right];\\n            }\\n            right++;\\n        }\\n        int curr = res;\\n\\t\\t//maitain the window\\n        while(right<n){\\n            if(grumpy[right]==1){\\n                curr +=customers[right];\\n            }\\n            if(grumpy[left]==1){\\n                curr -=customers[left];\\n            }\\n            res = max(res,curr);\\n            left++;\\n            right++;\\n        }\\n\\t\\t//get happy\\n        for(int j=0;j<n;j++){\\n            if(grumpy[j]==0){\\n                res1 +=customers[j];\\n            }\\n        }\\n        return res1 +res;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n//         get unhapp min list\\n        if(customers.size()==NULL){\\n            return -1;\\n        }\\n        int left = 0;\\n        int right = 0;\\n        int n = customers.size();\\n        int res=0;\\n        int res1=0;\\n        //get X window\\n        while(right<n && right<X){\\n            if(grumpy[right]==1){\\n                res += customers[right];\\n            }\\n            right++;\\n        }\\n        int curr = res;\\n\\t\\t//maitain the window\\n        while(right<n){\\n            if(grumpy[right]==1){\\n                curr +=customers[right];\\n            }\\n            if(grumpy[left]==1){\\n                curr -=customers[left];\\n            }\\n            res = max(res,curr);\\n            left++;\\n            right++;\\n        }\\n\\t\\t//get happy\\n        for(int j=0;j<n;j++){\\n            if(grumpy[j]==0){\\n                res1 +=customers[j];\\n            }\\n        }\\n        return res1 +res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 862489,
                "title": "python-straight-forward-easy-to-read",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n\\t\\t# We first calculate the base result without the use of the \\'X\\' minute power\\n        base_result = 0\\n        possible_gain = []                 \\n        \\n        for idx, i in enumerate(grumpy):\\n            if i == 1:\\n                possible_gain.append(customers[idx])\\n            else:\\n                possible_gain.append(0)\\n                base_result += customers[idx]\\n        \\n\\t\\t# We then consider the possible gain with the \\'X\\' minute power\\n        max_result = 0     \\n        \\n        for idx in range(len(possible_gain)):\\n            result = sum(possible_gain[idx:idx+X])            \\n            if result > max_result:\\n                max_result = result                \\n                \\n        return base_result+max_result\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n\\t\\t# We first calculate the base result without the use of the \\'X\\' minute power\\n        base_result = 0\\n        possible_gain = []                 \\n        \\n        for idx, i in enumerate(grumpy):\\n            if i == 1:\\n                possible_gain.append(customers[idx])\\n            else:\\n                possible_gain.append(0)\\n                base_result += customers[idx]\\n        \\n\\t\\t# We then consider the possible gain with the \\'X\\' minute power\\n        max_result = 0     \\n        \\n        for idx in range(len(possible_gain)):\\n            result = sum(possible_gain[idx:idx+X])            \\n            if result > max_result:\\n                max_result = result                \\n                \\n        return base_result+max_result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 848156,
                "title": "easy-c-solution-with-comments",
                "content": "Runtime: 1116 ms, faster than 6.29% of C++ online submissions for Grumpy Bookstore Owner.\\nMemory Usage: 32 MB, less than 54.02% of C++ online submissions for Grumpy Bookstore Owner.\\n\\n```\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int len = customers.size();\\n        int minSum=0;\\n        for(int i=0; i<len; i++){\\n            if(grumpy[i] == 0){\\n                minSum = (minSum+customers[i]);  /* minimum satisfied customers - when shopkeeper is not grumpy */\\n            }\\n        }\\n       int extra=0;\\n        for(int i=0; i<=(len-X); i++){ /* Sliding Window over each element*/\\n            int temp=0;\\n            for(int j=i; j<(X+i); j++){ /* Sliding window*/\\n                if(grumpy[j] == 1){\\n                    temp = (temp+customers[j]); /* extra customers satisfied for this particular value of X */\\n                }\\n            }\\n            if(temp > extra){\\n                extra = temp;  /* maximizing extra */\\n            }\\n        }\\n        return (minSum+extra); /* answer will be minimum possible satisfied customers + maximum of extra possible */\\n    }\\n};\\n",
                "solutionTags": [],
                "code": "Runtime: 1116 ms, faster than 6.29% of C++ online submissions for Grumpy Bookstore Owner.\\nMemory Usage: 32 MB, less than 54.02% of C++ online submissions for Grumpy Bookstore Owner.\\n\\n```\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int len = customers.size();\\n        int minSum=0;\\n        for(int i=0; i<len; i++){\\n            if(grumpy[i] == 0){\\n                minSum = (minSum+customers[i]);  /* minimum satisfied customers - when shopkeeper is not grumpy */\\n            }\\n        }\\n       int extra=0;\\n        for(int i=0; i<=(len-X); i++){ /* Sliding Window over each element*/\\n            int temp=0;\\n            for(int j=i; j<(X+i); j++){ /* Sliding window*/\\n                if(grumpy[j] == 1){\\n                    temp = (temp+customers[j]); /* extra customers satisfied for this particular value of X */\\n                }\\n            }\\n            if(temp > extra){\\n                extra = temp;  /* maximizing extra */\\n            }\\n        }\\n        return (minSum+extra); /* answer will be minimum possible satisfied customers + maximum of extra possible */\\n    }\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 829185,
                "title": "java-o-n-sliding-window-single-iteration-simple-solution",
                "content": "We start playing the secret technique on minute 0 (when store opens). So we know that till time `X-1` we can satisfy everyone. Keep a count of non satisfied customers whom we satisfied using the secret technique.\\nNow shift the window i.e. we instead play the secret at minute `1`. So we can now effectively satisfy everyone till minute `X`. But in doing so we have to decrement (if any) count of customers that we satisfied on minute `0`. We continue shifting the window. At the end we pick the maximum count of non satisfied customers that we could satisfy using the secret technique. And we add to it the count of customers on non grumpy minutes (they are anyways satisfied without any secret technique).   \\n\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        int nonSatisCustomers = 0;\\n        int satisCustomers = 0;\\n        int maxCanBeSatisCustomers = 0;\\n        \\n        // Start by playing the secret technique on minute 0\\n        // So till time X we can satisfy all customers.\\n        for (int i = 0; i < X; i++) {\\n            if (grumpy[i] == 1) {\\n                nonSatisCustomers += customers[i];\\n            } else {\\n                satisCustomers += customers[i];\\n            }\\n        }\\n        maxCanBeSatisCustomers = nonSatisCustomers;\\n        \\n        // From here on shift the window\\n        // So this means we now play the secret on minute 1 and so on\\n        // We have to decrement the counter of customers that we could\\n        // satisfy using the secret technique.\\n        for (int i = X; i < grumpy.length; i++) {\\n            if (grumpy[i] == 1) {\\n                nonSatisCustomers += customers[i];\\n            } else {\\n                satisCustomers += customers[i];\\n            }\\n            if (grumpy[i-X] == 1) {\\n                nonSatisCustomers -= customers[i-X];\\n            }\\n            maxCanBeSatisCustomers = Math.max(maxCanBeSatisCustomers, nonSatisCustomers);\\n        }\\n        return maxCanBeSatisCustomers+satisCustomers;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        int nonSatisCustomers = 0;\\n        int satisCustomers = 0;\\n        int maxCanBeSatisCustomers = 0;\\n        \\n        // Start by playing the secret technique on minute 0\\n        // So till time X we can satisfy all customers.\\n        for (int i = 0; i < X; i++) {\\n            if (grumpy[i] == 1) {\\n                nonSatisCustomers += customers[i];\\n            } else {\\n                satisCustomers += customers[i];\\n            }\\n        }\\n        maxCanBeSatisCustomers = nonSatisCustomers;\\n        \\n        // From here on shift the window\\n        // So this means we now play the secret on minute 1 and so on\\n        // We have to decrement the counter of customers that we could\\n        // satisfy using the secret technique.\\n        for (int i = X; i < grumpy.length; i++) {\\n            if (grumpy[i] == 1) {\\n                nonSatisCustomers += customers[i];\\n            } else {\\n                satisCustomers += customers[i];\\n            }\\n            if (grumpy[i-X] == 1) {\\n                nonSatisCustomers -= customers[i-X];\\n            }\\n            maxCanBeSatisCustomers = Math.max(maxCanBeSatisCustomers, nonSatisCustomers);\\n        }\\n        return maxCanBeSatisCustomers+satisCustomers;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 824790,
                "title": "c-simple-sliding-window-solution",
                "content": "First we will take the sum of all non grumpy customer timings and then run a sliding window of size k and take max sum of grumpy customer timings and it to the non grumpy customer timings. \\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int k) {\\n        int ans=0;\\n        int out=0;\\n        int n=g.size();\\n        if(k>=n){\\n            for(int i=0;i<n;i++){\\n                ans+=c[i];\\n            }\\n            return ans;\\n        }\\n        int res=0;\\n        for(int i=0;i<k;i++){\\n            if(g[i]==0){\\n                ans+=c[i];\\n            }else{\\n                res+=c[i];\\n            }\\n        }\\n        out=max(out,res);\\n        int j=k,i=0;\\n        while(j<n){\\n            if(g[i]==1){\\n                res-=c[i];\\n            }\\n            if(g[j]==1){\\n                res+=c[j];\\n            }else if(g[j]==0){\\n                ans+=c[j];\\n            }\\n            out=max(out,res);\\n            i++;\\n            j++;\\n        }\\n        return ans+out;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int k) {\\n        int ans=0;\\n        int out=0;\\n        int n=g.size();\\n        if(k>=n){\\n            for(int i=0;i<n;i++){\\n                ans+=c[i];\\n            }\\n            return ans;\\n        }\\n        int res=0;\\n        for(int i=0;i<k;i++){\\n            if(g[i]==0){\\n                ans+=c[i];\\n            }else{\\n                res+=c[i];\\n            }\\n        }\\n        out=max(out,res);\\n        int j=k,i=0;\\n        while(j<n){\\n            if(g[i]==1){\\n                res-=c[i];\\n            }\\n            if(g[j]==1){\\n                res+=c[j];\\n            }else if(g[j]==0){\\n                ans+=c[j];\\n            }\\n            out=max(out,res);\\n            i++;\\n            j++;\\n        }\\n        return ans+out;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 722358,
                "title": "c-o-n-sliding-window-beats-98",
                "content": "```\\npublic:\\n    int maxSatisfied(vector<int>& arr, vector<int>& g, int x) {\\n        int cost = 0;\\n        for(int i=0; i<arr.size(); i++) {\\n            if (!g[i]) {\\n                cost += arr[i];\\n                arr[i] = 0;\\n            }\\n        }\\n        int i=0;\\n        for(i=0; i<x; i++) {\\n            cost += arr[i];\\n        }\\n        int tot = cost;\\n        for(i=x; i<arr.size(); i++) {\\n            cost += arr[i];\\n            cost -= arr[i-x];\\n            if (cost > tot) tot = cost;\\n        }\\n        return tot;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\npublic:\\n    int maxSatisfied(vector<int>& arr, vector<int>& g, int x) {\\n        int cost = 0;\\n        for(int i=0; i<arr.size(); i++) {\\n            if (!g[i]) {\\n                cost += arr[i];\\n                arr[i] = 0;\\n            }\\n        }\\n        int i=0;\\n        for(i=0; i<x; i++) {\\n            cost += arr[i];\\n        }\\n        int tot = cost;\\n        for(i=x; i<arr.size(); i++) {\\n            cost += arr[i];\\n            cost -= arr[i-x];\\n            if (cost > tot) tot = cost;\\n        }\\n        return tot;\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 710682,
                "title": "java-o-n-simple-sliding-window-solution",
                "content": "````\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int currentUnSatisfied = 0;\\n        int satisfiedTotal = 0;\\n        for(int i = 0; i < X; i ++){\\n            if(grumpy[i] == 1) currentUnSatisfied +=customers[i];\\n            if(grumpy[i] == 0) satisfiedTotal+=customers[i];\\n        }\\n        int maxUnSatisfied = currentUnSatisfied ;\\n        for(int i = X; i < customers.length; i ++){\\n            if(grumpy[i - X] == 1){\\n                currentUnSatisfied -=customers[i - X];\\n            }\\n            if(grumpy[i] == 1) currentUnSatisfied +=customers[i];\\n            if(grumpy[i] == 0) satisfiedTotal+=customers[i];\\n            maxUnSatisfied = Math.max(maxUnSatisfied, currentUnSatisfied);        \\n        }\\n        return satisfiedTotal+=maxUnSatisfied ;\\n    }",
                "solutionTags": [],
                "code": "````\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int currentUnSatisfied = 0;\\n        int satisfiedTotal = 0;\\n        for(int i = 0; i < X; i ++){\\n            if(grumpy[i] == 1) currentUnSatisfied +=customers[i];\\n            if(grumpy[i] == 0) satisfiedTotal+=customers[i];\\n        }\\n        int maxUnSatisfied = currentUnSatisfied ;\\n        for(int i = X; i < customers.length; i ++){\\n            if(grumpy[i - X] == 1){\\n                currentUnSatisfied -=customers[i - X];\\n            }\\n            if(grumpy[i] == 1) currentUnSatisfied +=customers[i];\\n            if(grumpy[i] == 0) satisfiedTotal+=customers[i];\\n            maxUnSatisfied = Math.max(maxUnSatisfied, currentUnSatisfied);        \\n        }\\n        return satisfiedTotal+=maxUnSatisfied ;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 637856,
                "title": "java-sliding-window",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        int guaranteed = 0, maxGrumpyCust = 0, currGrumpy = 0, i = 0, j = 0;\\n        \\n        while(i < grumpy.length) {\\n            if (grumpy[i] == 0) {\\n                guaranteed += customers[i];\\n            } else {\\n                currGrumpy += customers[i];\\n                // advance j to the new range\\n                while (i - j >= X) {\\n                    if (grumpy[j] == 1)\\n                        currGrumpy -= customers[j];\\n                    j++;\\n                }\\n                \\n                maxGrumpyCust = Math.max(currGrumpy, maxGrumpyCust);\\n            }\\n        \\n            i++;\\n        }\\n        \\n        return guaranteed + maxGrumpyCust;\\n    }\\n}",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        \\n        int guaranteed = 0, maxGrumpyCust = 0, currGrumpy = 0, i = 0, j = 0;\\n        \\n        while(i < grumpy.length) {\\n            if (grumpy[i] == 0) {\\n                guaranteed += customers[i];\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 577209,
                "title": "python-prefix-sum",
                "content": "\\n```\\ndef max_subarray_sum(nums: List[int], length: int) -> int:\\n    dp = nums[:]\\n    \\n    for i in range(1, len(nums)):\\n        dp[i] += dp[i-1]\\n        \\n    res = dp[:]\\n    for i in range(length - 1, len(nums)):\\n        res[i] = dp[i] - (dp[i - length] if i - length >= 0 else 0)\\n    \\n    return max(res)\\n\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n\\t    # Count how many customers are satisfied by default\\n        satisfied = sum([customers[i] if grumpy[i] == 0 else 0 for i in range(len(customers))])\\n        # Filter out the satisfied customers and keep only the unsatisfied ones in the list\\n\\t\\tunsatisfied = [customers[i] if grumpy[i] == 1 else 0 for i in range(len(customers))]\\n        # Count how many unhappy customers can be satisfied using the special power, add the already satiefied ones\\n        return satisfied + max_subarray_sum(unsatisfied, X)\\n```",
                "solutionTags": [
                    "Python3",
                    "Prefix Sum"
                ],
                "code": "```\\ndef max_subarray_sum(nums: List[int], length: int) -> int:\\n    dp = nums[:]\\n    \\n    for i in range(1, len(nums)):\\n        dp[i] += dp[i-1]\\n        \\n    res = dp[:]\\n    for i in range(length - 1, len(nums)):\\n        res[i] = dp[i] - (dp[i - length] if i - length >= 0 else 0)\\n    \\n    return max(res)\\n\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n\\t    # Count how many customers are satisfied by default\\n        satisfied = sum([customers[i] if grumpy[i] == 0 else 0 for i in range(len(customers))])\\n        # Filter out the satisfied customers and keep only the unsatisfied ones in the list\\n\\t\\tunsatisfied = [customers[i] if grumpy[i] == 1 else 0 for i in range(len(customers))]\\n        # Count how many unhappy customers can be satisfied using the special power, add the already satiefied ones\\n        return satisfied + max_subarray_sum(unsatisfied, X)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 524637,
                "title": "2-java-solutions-with-explaination",
                "content": "Although the question is asking for the happy number, but the real question is find the max unhappy customers which we can recover from the \"magic secret X\", because the total happy number is `happy = totalhappy + maxRecoverableUnhappy`\\n\\nSolution1: The question is very similiar to the sliding window sum question. In the question solution1 (two pass solution), we created an `unhappy` array to store all unhappy diff for all hours. the `unhappy[n + X] - unhappy[n]` is the unhappy number which we can restore. So in the first scan, we calculate all unhappy values. Then in the second scan, find the `maxRecovableUnhappy`. the time complexity is O(n), as we have scanned it twice only\\n\\nSolution2: This problem could also be resolved without creating the array, but directly maintain the `maxRecovableUnhappy`\\n\\ncode:\\n\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        return maxSatisfied1(customers, grumpy, X);\\n    }\\n    \\n    // two pass solution\\n    public int maxSatisfied1(int[] customers, int[] grumpy, int X) {\\n        // create a unhappy for each position, and store it unhappy number\\n        int[] unhappy = new int[customers.length + 1];\\n        unhappy[0] = 0;\\n        int totalHappy = 0;\\n        int totalUnhappy = 0;\\n        // count for each happy and unhappy\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 1) {\\n                totalUnhappy += customers[i];\\n            } else {\\n                totalHappy += customers[i];\\n            }\\n            unhappy[i + 1] = totalUnhappy;\\n        }\\n        \\n        // we can only use it once, so we just need to find the max recover number for the unhappy one\\n        int maxRecover = 0;\\n        for (int i = 0; i < customers.length - X + 1; i++) {\\n            // the diff is the unhappy number\\n            int diff = (unhappy[i + X] - unhappy[i]);\\n            if (diff > maxRecover) {\\n                maxRecover = diff;\\n            }\\n        }\\n        \\n        // total number is happy + maxRecover from the unhappy one\\n        return totalHappy + maxRecover;\\n    }\\n    \\n    public int maxSatisfied2(int[] customers, int[] grumpy, int X) {\\n        int totalHappy = 0;\\n        int totalUnhappy = 0;\\n        int maxUnhappy = 0;\\n        int diff = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                totalHappy += customers[i];\\n            }\\n            \\n            // check the previous i - X position, and directly maintain the diff\\n            if (i >= X) {\\n                if (grumpy[i - X] == 1) {\\n                    diff -= customers[i - X];\\n                }\\n            }\\n                \\n            if (grumpy[i] == 1) {\\n                diff += customers[i];\\n            }\\n            if (diff > maxUnhappy) {\\n                maxUnhappy = diff;\\n            }\\n        }\\n        return totalHappy + maxUnhappy;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        return maxSatisfied1(customers, grumpy, X);\\n    }\\n    \\n    // two pass solution\\n    public int maxSatisfied1(int[] customers, int[] grumpy, int X) {\\n        // create a unhappy for each position, and store it unhappy number\\n        int[] unhappy = new int[customers.length + 1];\\n        unhappy[0] = 0;\\n        int totalHappy = 0;\\n        int totalUnhappy = 0;\\n        // count for each happy and unhappy\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 1) {\\n                totalUnhappy += customers[i];\\n            } else {\\n                totalHappy += customers[i];\\n            }\\n            unhappy[i + 1] = totalUnhappy;\\n        }\\n        \\n        // we can only use it once, so we just need to find the max recover number for the unhappy one\\n        int maxRecover = 0;\\n        for (int i = 0; i < customers.length - X + 1; i++) {\\n            // the diff is the unhappy number\\n            int diff = (unhappy[i + X] - unhappy[i]);\\n            if (diff > maxRecover) {\\n                maxRecover = diff;\\n            }\\n        }\\n        \\n        // total number is happy + maxRecover from the unhappy one\\n        return totalHappy + maxRecover;\\n    }\\n    \\n    public int maxSatisfied2(int[] customers, int[] grumpy, int X) {\\n        int totalHappy = 0;\\n        int totalUnhappy = 0;\\n        int maxUnhappy = 0;\\n        int diff = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            if (grumpy[i] == 0) {\\n                totalHappy += customers[i];\\n            }\\n            \\n            // check the previous i - X position, and directly maintain the diff\\n            if (i >= X) {\\n                if (grumpy[i - X] == 1) {\\n                    diff -= customers[i - X];\\n                }\\n            }\\n                \\n            if (grumpy[i] == 1) {\\n                diff += customers[i];\\n            }\\n            if (diff > maxUnhappy) {\\n                maxUnhappy = diff;\\n            }\\n        }\\n        return totalHappy + maxUnhappy;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 515793,
                "title": "java-in-loop-sliding-window",
                "content": "```\\npublic int maxSatisfied(int[] s, int[] g, int X) {\\n        int l = s.length;\\n        int sum = 0;\\n        int slow = 0;\\n        int w = 0;\\n        int mx = 0;\\n        for (int i = 0; i < l; i++){\\n            if (g[i] == 1) g[i] = s[i];\\n            else sum+= s[i];\\n            w += g[i];\\n            if (i >= X) {\\n                w -= g[slow];\\n                slow++;\\n            }\\n            mx = Math.max(w, mx);\\n        }\\n        \\n        return sum + mx;\\n        \\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\npublic int maxSatisfied(int[] s, int[] g, int X) {\\n        int l = s.length;\\n        int sum = 0;\\n        int slow = 0;\\n        int w = 0;\\n        int mx = 0;\\n        for (int i = 0; i < l; i++){\\n            if (g[i] == 1) g[i] = s[i];\\n            else sum+= s[i];\\n            w += g[i];\\n            if (i >= X) {\\n                w -= g[slow];\\n                slow++;\\n            }\\n            mx = Math.max(w, mx);\\n        }\\n        \\n        return sum + mx;\\n        \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 510311,
                "title": "java-sliding-window-solution",
                "content": "1. Without suppression of grumpy in a time period X, the bookstore can server the total customers the sum of \\n```((grumpy[0] + 1) % 2) * customers[0] + ... + ((grumpy[len - 1] + 1) % 2) * customers[len - 1]```\\ndenoted by `total`.\\n2. For a X-length time period, the number of unserved customers due to grumpy is \\n```S[i] = grumpy[i] * customers[i] + ... + grumpy[i + X - 1] * customers[i + X - 1]```\\n3. If suppressing grumpy in a time period X, the maximum additonal customers that the bookstore can serve is ```max S[i]```, denoted by `maxS`\\n4. Therefore, the total number of customers that the bookstore can serve is  `total + maxS`\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int sum = 0;\\n        int max = 0;\\n        int total = 0;\\n        for(int i = -X, j = 0; j < customers.length; ++j, ++i) {\\n            total += ((grumpy[j] + 1) % 2) * customers[j];\\n            sum += grumpy[j] * customers[j];\\n            if(i >= 0) {\\n                sum -= grumpy[i] * customers[i];\\n            }\\n            if(j >= X - 1) {\\n                max = Math.max(max, sum);\\n            }\\n            \\n        }\\n        return total + max;        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```((grumpy[0] + 1) % 2) * customers[0] + ... + ((grumpy[len - 1] + 1) % 2) * customers[len - 1]```\n```S[i] = grumpy[i] * customers[i] + ... + grumpy[i + X - 1] * customers[i + X - 1]```\n```max S[i]```\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int sum = 0;\\n        int max = 0;\\n        int total = 0;\\n        for(int i = -X, j = 0; j < customers.length; ++j, ++i) {\\n            total += ((grumpy[j] + 1) % 2) * customers[j];\\n            sum += grumpy[j] * customers[j];\\n            if(i >= 0) {\\n                sum -= grumpy[i] * customers[i];\\n            }\\n            if(j >= X - 1) {\\n                max = Math.max(max, sum);\\n            }\\n            \\n        }\\n        return total + max;        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 500159,
                "title": "99-74-faster-and-100-memory-efficient-java-solution",
                "content": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int initialSum = 0;\\n\\t\\tfor(int i = 0; i < X; ++i) {\\n\\t\\t\\tinitialSum += grumpy[i]*customers[i]; // We only care about the customers in grumpy time\\n\\t\\t}\\n\\t\\t\\n\\t\\tint[] sumArr = new int[customers.length-X+1];\\n\\t\\tsumArr[0] = initialSum;\\n\\t\\t\\n\\t\\tfor(int i = X, j = 0; i < customers.length; ++i, j++) {\\n\\t\\t\\tsumArr[j+1] = sumArr[j] - customers[j] * grumpy[j] + customers[i] * grumpy[i];\\n\\t\\t}\\n\\t\\t\\n\\t\\tint startIdx = 0;\\n\\t\\tint maxSum = sumArr[startIdx];\\n\\t\\tfor(int i = 1; i < sumArr.length; ++i) {\\n\\t\\t\\tif(maxSum < sumArr[i]) {\\n\\t\\t\\t\\tstartIdx = i;\\n                maxSum = sumArr[i];\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\tint endIdx = startIdx + X - 1;\\n\\t\\t\\n\\t\\tint satisfied = 0;\\n\\t\\t\\n\\t\\tfor(int i = 0; i<customers.length; ++i) {\\n\\t\\t\\tif(i >= startIdx && i <= endIdx) {\\n\\t\\t\\t\\tsatisfied += customers[i];\\n\\t\\t\\t}\\n\\t\\t\\telse {\\n\\t\\t\\t\\tif(grumpy[i] == 0) {\\n\\t\\t\\t\\t\\tsatisfied += customers[i];\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\t\\n\\t\\treturn satisfied;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int initialSum = 0;\\n\\t\\tfor(int i = 0; i < X; ++i) {\\n\\t\\t\\tinitialSum += grumpy[i]*customers[i]; // We only care about the customers in grumpy time\\n\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 475861,
                "title": "python-o-n-easy-to-understand-sliding-window",
                "content": "\\n* \\t\\tn = len(customers)\\n\\t\\tprint(n)\\n\\t\\tmax_sum = 0\\n\\t\\tw_start, w_end = 0,X\\n\\t\\tones_sum, max_ones_sum, not_g_sum = 0,0,0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif grumpy[i] == 1:\\n\\t\\t\\t\\tones_sum+=customers[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnot_g_sum = not_g_sum + customers[i]\\n\\t\\t\\tif i>=X:\\n\\t\\t\\t\\tif grumpy[i-X] == 1:\\n\\t\\t\\t\\t\\tones_sum-=customers[i-X]\\n\\t\\t\\tmax_ones_sum = max(max_ones_sum, ones_sum)\\n\\t\\treturn  not_g_sum + max_ones_sum\\n",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "\\n* \\t\\tn = len(customers)\\n\\t\\tprint(n)\\n\\t\\tmax_sum = 0\\n\\t\\tw_start, w_end = 0,X\\n\\t\\tones_sum, max_ones_sum, not_g_sum = 0,0,0\\n\\t\\tfor i in range(n):\\n\\t\\t\\tif grumpy[i] == 1:\\n\\t\\t\\t\\tones_sum+=customers[i]\\n\\t\\t\\telse:\\n\\t\\t\\t\\tnot_g_sum = not_g_sum + customers[i]\\n\\t\\t\\tif i>=X:\\n\\t\\t\\t\\tif grumpy[i-X] == 1:\\n\\t\\t\\t\\t\\tones_sum-=customers[i-X]\\n\\t\\t\\tmax_ones_sum = max(max_ones_sum, ones_sum)\\n\\t\\treturn  not_g_sum + max_ones_sum\\n",
                "codeTag": "Python3"
            },
            {
                "id": 424505,
                "title": "java-sliding-window-solution-beats-85-time-100-memory",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int s1=0,s2=0,max;\\n        for( int i=0 ; i<X ;i++){\\n            switch(grumpy[i])\\n            {\\n                case 1: s2+= customers[i];\\n                            break;\\n                case 0: s1+= customers[i];\\n                            break;\\n                    \\n            }\\n        }\\n        max = s2;\\n        for(int i=X;i<customers.length;i++)\\n        {\\n            s2-= grumpy[i-X] ==1 ? customers[i-X] :0;\\n            switch(grumpy[i])\\n            {\\n                case 1: s2+= customers[i];\\n                            break;\\n                case 0: s1+= customers[i];\\n                            break;\\n                    \\n            }\\n            max= Math.max(max,s2);\\n        }\\n        return s1+max;\\n        \\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int s1=0,s2=0,max;\\n        for( int i=0 ; i<X ;i++){\\n            switch(grumpy[i])\\n            {\\n                case 1: s2+= customers[i];\\n                            break;\\n                case 0: s1+= customers[i];\\n                            break;\\n                    \\n            }\\n        }\\n        max = s2;\\n        for(int i=X;i<customers.length;i++)\\n        {\\n            s2-= grumpy[i-X] ==1 ? customers[i-X] :0;\\n            switch(grumpy[i])\\n            {\\n                case 1: s2+= customers[i];\\n                            break;\\n                case 0: s1+= customers[i];\\n                            break;\\n                    \\n            }\\n            max= Math.max(max,s2);\\n        }\\n        return s1+max;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 405308,
                "title": "java-solution-100-less-space",
                "content": "\\'\\'\\'public int calcSatisfiedCustIncr(int[] customers, int[] grumpy, int start, int end) {\\n        int modified = 0;\\n        int original = 0;\\n        for (int i = start; i <=end; i++) {\\n            modified += customers[i];\\n            original += customers[i] * (1 - grumpy[i]);\\n        }\\n        return modified - original;\\n    }\\n    \\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int max = 0;\\n        int total = 0;\\n        for (int i = 0;i<customers.length;i++) {\\n            total += customers[i]*(1 - grumpy[i]);\\n        }\\n        for (int i = 0;i<=customers.length - X;i++) {\\n            int incr = calcSatisfiedCustIncr(customers, grumpy, i, i + X - 1);\\n            if (incr > max)\\n                max = incr;\\n        }\\n        return total + max;\\n    }\\'\\'\\'\\n\\tFinds rolling window that results in maximum increment",
                "solutionTags": [],
                "code": "\\'\\'\\'public int calcSatisfiedCustIncr(int[] customers, int[] grumpy, int start, int end) {\\n        int modified = 0;\\n        int original = 0;\\n        for (int i = start; i <=end; i++) {\\n            modified += customers[i];\\n            original += customers[i] * (1 - grumpy[i]);\\n        }\\n        return modified - original;\\n    }\\n    \\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int max = 0;\\n        int total = 0;\\n        for (int i = 0;i<customers.length;i++) {\\n            total += customers[i]*(1 - grumpy[i]);\\n        }\\n        for (int i = 0;i<=customers.length - X;i++) {\\n            int incr = calcSatisfiedCustIncr(customers, grumpy, i, i + X - 1);\\n            if (incr > max)\\n                max = incr;\\n        }\\n        return total + max;\\n    }\\'\\'\\'\\n\\tFinds rolling window that results in maximum increment",
                "codeTag": "Unknown"
            },
            {
                "id": 389918,
                "title": "python-clear-solution-based-on-the-sliding-window-with-comments",
                "content": "O(n) time\\nO(1) space\\n```\\n    def maxSatisfied(self, customers, grumpy, X):\\n\\t# Step 1: find a window of size X with the highest number of unsatisfied customers\\n        index_end = 0 # end index of the \"optimal window\" \\n        num_unhappy, max_num_unhappy = 0, 0\\n        for i in range(len(customers)):\\n            num_unhappy += customers[i]*grumpy[i]\\n            if i >= X:\\n                num_unhappy -= customers[i-X]*grumpy[i-X]\\n            if num_unhappy > max_num_unhappy:\\n                max_num_unhappy = num_unhappy\\n                index_end = i\\n\\t# Step 2: count the number of satisfied customers, making all customers\\n\\t# in the found \"optimal window\" satisfied \\n        return sum([customers[i] if index_end-X<i<=index_end or grumpy[i]==0 else 0 for i in range(len(customers))])\\n```",
                "solutionTags": [],
                "code": "```\\n    def maxSatisfied(self, customers, grumpy, X):\\n\\t# Step 1: find a window of size X with the highest number of unsatisfied customers\\n        index_end = 0 # end index of the \"optimal window\" \\n        num_unhappy, max_num_unhappy = 0, 0\\n        for i in range(len(customers)):\\n            num_unhappy += customers[i]*grumpy[i]\\n            if i >= X:\\n                num_unhappy -= customers[i-X]*grumpy[i-X]\\n            if num_unhappy > max_num_unhappy:\\n                max_num_unhappy = num_unhappy\\n                index_end = i\\n\\t# Step 2: count the number of satisfied customers, making all customers\\n\\t# in the found \"optimal window\" satisfied \\n        return sum([customers[i] if index_end-X<i<=index_end or grumpy[i]==0 else 0 for i in range(len(customers))])\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 356486,
                "title": "easy-to-understand-java-solution",
                "content": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n       int n = customers.length;\\n        if(n <= X){\\n          int sum = 0;\\n          for(int customer : customers)\\n              sum += customer;\\n           return sum;\\n       }\\n        //int maxSum = Integer.MIN_VALUE;\\n        int sat = 0;\\n        for(int i=0; i<n; i++){\\n            if(grumpy[i] == 0)\\n                sat += customers[i];\\n        }\\n        int totalSum = 0;\\n        for(int i=0; i<n-X+1; i++){\\n            int currSum = 0;\\n            for(int j=0; j<X; j++){\\n                if(grumpy[i+j] == 0)\\n                    currSum -= customers[i+j];\\n                currSum = currSum + customers[i+j];\\n            }\\n            //maxSum = Math.max(currSum, maxSum);\\n            totalSum = Math.max(totalSum, sat+currSum);\\n        }\\n        return totalSum;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n       int n = customers.length;\\n        if(n <= X){\\n          int sum = 0;\\n          for(int customer : customers)\\n              sum += customer;\\n           return sum;\\n       }\\n        //int maxSum = Integer.MIN_VALUE;\\n        int sat = 0;\\n        for(int i=0; i<n; i++){\\n            if(grumpy[i] == 0)\\n                sat += customers[i];\\n        }\\n        int totalSum = 0;\\n        for(int i=0; i<n-X+1; i++){\\n            int currSum = 0;\\n            for(int j=0; j<X; j++){\\n                if(grumpy[i+j] == 0)\\n                    currSum -= customers[i+j];\\n                currSum = currSum + customers[i+j];\\n            }\\n            //maxSum = Math.max(currSum, maxSum);\\n            totalSum = Math.max(totalSum, sat+currSum);\\n        }\\n        return totalSum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 348814,
                "title": "python-o-n-time-o-1-space-sliding-window-method",
                "content": "```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        N = len(customers)\\n        ans = 0\\n        \\n        # accumulate all satisfied customers and flag it as zero\\n        for i in range(N):\\n            if grumpy[i] == 0:\\n                ans += customers[i]\\n                customers[i] = 0\\n        \\n        \\'\\'\\'\\n        # now \\'customers\\' is left with unsatisfied peoples\\n        # we can find the optimal X by sliding a window of length X through the list and get the max sum\\n        cur_inc = sum(customers[:X])\\n        max_inc = cur_inc # max increase by using X\\n        for i in range(X, N):\\n            cur_inc = cur_inc - customers[i-X] + customers[i]\\n            if cur_inc > max_inc:\\n                max_inc = cur_inc\\n       \\n        ans += max_inc\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\ndef maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        N = len(customers)\\n        ans = 0\\n        \\n        # accumulate all satisfied customers and flag it as zero\\n        for i in range(N):\\n            if grumpy[i] == 0:\\n                ans += customers[i]\\n                customers[i] = 0\\n        \\n        \\'\\'\\'\\n        # now \\'customers\\' is left with unsatisfied peoples\\n        # we can find the optimal X by sliding a window of length X through the list and get the max sum\\n        cur_inc = sum(customers[:X])\\n        max_inc = cur_inc # max increase by using X\\n        for i in range(X, N):\\n            cur_inc = cur_inc - customers[i-X] + customers[i]\\n            if cur_inc > max_inc:\\n                max_inc = cur_inc\\n       \\n        ans += max_inc\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 344143,
                "title": "c-90-fast-and-100-space-optimized",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum=0;\\n        int n=customers.size();\\n        if(n==1)\\n            return customers[0];  // Handling edge cases\\n        int window_sum=0;                         \\n        for(int i=0;i<n;i++)\\n            if(grumpy[i]==0)\\n               sum+=customers[i];    // sum is for those custmoers who are coming when the owner is not grumpy\\n        // Run a slinding window of size X and find maximum value where we are getting for customers coming when owner is grumpy \\n\\t\\t\\n        int max_sum=0;\\n        for(int i=0;i<X;i++)        //running the first window\\n            if(grumpy[i]==1)\\n                window_sum+=customers[i];   \\n  \\n        max_sum=window_sum;    //max_sum stores the max val of grumpy owner customers\\n        int j=X;\\n\\t\\t// Running sliding window and comparing each window sum\\n        for(int i=1;i<=n-X;i++){ \\n            if(grumpy[i-1]==1)\\n                window_sum-=customers[i-1];\\n            if(grumpy[j]==1)\\n                window_sum+=customers[j];\\n            if(max_sum<window_sum)\\n                max_sum=window_sum;\\n            j++;\\n        }\\n       return sum+max_sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum=0;\\n        int n=customers.size();\\n        if(n==1)\\n            return customers[0];  // Handling edge cases\\n        int window_sum=0;                         \\n        for(int i=0;i<n;i++)\\n            if(grumpy[i]==0)\\n               sum+=customers[i];    // sum is for those custmoers who are coming when the owner is not grumpy\\n        // Run a slinding window of size X and find maximum value where we are getting for customers coming when owner is grumpy \\n\\t\\t\\n        int max_sum=0;\\n        for(int i=0;i<X;i++)        //running the first window\\n            if(grumpy[i]==1)\\n                window_sum+=customers[i];   \\n  \\n        max_sum=window_sum;    //max_sum stores the max val of grumpy owner customers\\n        int j=X;\\n\\t\\t// Running sliding window and comparing each window sum\\n        for(int i=1;i<=n-X;i++){ \\n            if(grumpy[i-1]==1)\\n                window_sum-=customers[i-1];\\n            if(grumpy[j]==1)\\n                window_sum+=customers[j];\\n            if(max_sum<window_sum)\\n                max_sum=window_sum;\\n            j++;\\n        }\\n       return sum+max_sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 321233,
                "title": "java-sliding-window-2ms-100",
                "content": "If the owner is not grumpy at i-th minute, the customers are always satisfied, so we can first number of customers who will definitely be satisfied. Then, we use a sliding window approach to satisfy maximum number of customers who arrived when the owner was grumpy. This can be treated as problem of finding a maximum sum subarray of size <= X (for this, we set customers[i] = 0, if the owner is not grumpy at i-th second). Thus, at all times, the size of window is kept less than equal to X.\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int n = customers.length;\\n        int sum = 0;\\n        \\n        int numUnsatisfiedCustomers = 0;\\n        int numSatisfiedCustomers = 0;\\n        int maxSatisfiedCustomers = 0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==0){\\n                numSatisfiedCustomers += customers[i];\\n                customers[i] = 0;\\n            }\\n        }\\n        \\n        // sliding window to find maximum sum of subarray whose size is <= X\\n        int j=0;\\n        for(int i=0;i<n;i++){\\n            if(j<X){\\n                j++;\\n            } else {\\n                numSatisfiedCustomers -= customers[i-X];\\n            }\\n            numSatisfiedCustomers += customers[i];\\n            maxSatisfiedCustomers = Math.max(maxSatisfiedCustomers, numSatisfiedCustomers);\\n        }\\n        return maxSatisfiedCustomers;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int n = customers.length;\\n        int sum = 0;\\n        \\n        int numUnsatisfiedCustomers = 0;\\n        int numSatisfiedCustomers = 0;\\n        int maxSatisfiedCustomers = 0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==0){\\n                numSatisfiedCustomers += customers[i];\\n                customers[i] = 0;\\n            }\\n        }\\n        \\n        // sliding window to find maximum sum of subarray whose size is <= X\\n        int j=0;\\n        for(int i=0;i<n;i++){\\n            if(j<X){\\n                j++;\\n            } else {\\n                numSatisfiedCustomers -= customers[i-X];\\n            }\\n            numSatisfiedCustomers += customers[i];\\n            maxSatisfiedCustomers = Math.max(maxSatisfiedCustomers, numSatisfiedCustomers);\\n        }\\n        return maxSatisfiedCustomers;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 317326,
                "title": "python-sliding-window-mask-calculating-delta-of-total",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        total = 0\\n        for i in range(len(customers)):\\n            if grumpy[i] == 0:\\n                total += customers[i]\\n        \\n        for i in range(X):\\n            if grumpy[i] == 1:\\n                total += customers[i]\\n        \\n        res = total\\n        for i in range(X, len(customers)):\\n            if grumpy[i] == 1:\\n                total += customers[i]\\n            if grumpy[i-X] == 1:\\n                total -= customers[i-X]\\n            res = max(res, total)\\n        \\n        return res\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        total = 0\\n        for i in range(len(customers)):\\n            if grumpy[i] == 0:\\n                total += customers[i]\\n        \\n        for i in range(X):\\n            if grumpy[i] == 1:\\n                total += customers[i]\\n        \\n        res = total\\n        for i in range(X, len(customers)):\\n            if grumpy[i] == 1:\\n                total += customers[i]\\n            if grumpy[i-X] == 1:\\n                total -= customers[i-X]\\n            res = max(res, total)\\n        \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 314969,
                "title": "js-two-pass-sliding-window-o-n-time-and-o-1-space",
                "content": "```\\nconst maxSatisfied = (customers, grumpy, X) => {\\n    let satisfied = 0, sum = 0, maxSum = 0, grumpyStart = null;\\n    \\n    for (let i = 0; i < customers.length; i++) {\\n        if (i >= X && grumpy[i - X] === 1) {\\n            sum -= customers[i - X];\\n        }\\n        \\n        if (grumpy[i] === 1) {\\n            sum += customers[i];\\n        }\\n        \\n        if (maxSum < sum && i >= X - 1) {\\n            grumpyStart = i - X + 1;\\n            maxSum = sum;\\n        }\\n    } \\n    \\n    for (let i = 0; i < customers.length; i++) {\\n        if (grumpy[i] === 0 || (i >= grumpyStart && i < grumpyStart + X)) {\\n            satisfied += customers[i];\\n        } \\n    }\\n    \\n    return satisfied;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nconst maxSatisfied = (customers, grumpy, X) => {\\n    let satisfied = 0, sum = 0, maxSum = 0, grumpyStart = null;\\n    \\n    for (let i = 0; i < customers.length; i++) {\\n        if (i >= X && grumpy[i - X] === 1) {\\n            sum -= customers[i - X];\\n        }\\n        \\n        if (grumpy[i] === 1) {\\n            sum += customers[i];\\n        }\\n        \\n        if (maxSum < sum && i >= X - 1) {\\n            grumpyStart = i - X + 1;\\n            maxSum = sum;\\n        }\\n    } \\n    \\n    for (let i = 0; i < customers.length; i++) {\\n        if (grumpy[i] === 0 || (i >= grumpyStart && i < grumpyStart + X)) {\\n            satisfied += customers[i];\\n        } \\n    }\\n    \\n    return satisfied;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 304002,
                "title": "c-dp-straight-forward",
                "content": "\\n\\n**dp_x[i]**:    maximum number of satisfied customers by **using** \\'X\\' minutes strategy from 0 to i minutes\\n**dp_nox[i]**:  maximum number of satisfied customers by **not using** \\'X\\' minutes strategy from 0 to i minutes\\n\\nthen the recursion could be formed like:\\n```\\ndp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+customers in last X minutes);\\n```\\n\\nto record the customer amount, I simply use another vector sum[i], so the recursion is \\n```\\ndp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+sum[i]-sum[i-X]);\\n```\\n\\n\\nThe disadvantage is using more space. Posted C++ solution below:\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        vector<int> dp_x(customers.size(),0);\\n        vector<int> dp_nox(customers.size(),0);\\n        vector<int> sum(customers.size(),0);\\n        dp_x[0]=sum[0]=customers[0];\\n        dp_nox[0]=customers[0]*(grumpy[0]^1);\\n\\n        for(int i=1;i<customers.size();++i)\\n        {\\n            sum[i]=sum[i-1]+customers[i];\\n            dp_nox[i]=dp_nox[i-1]+customers[i]*(grumpy[i]^1);\\n            if(i<X)\\n                dp_x[i]=sum[i];\\n            else\\n                dp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+sum[i]-sum[i-X]);\\n        }\\n        return dp_x[customers.size()-1];\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\ndp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+customers in last X minutes);\\n```\n```\\ndp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+sum[i]-sum[i-X]);\\n```\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        vector<int> dp_x(customers.size(),0);\\n        vector<int> dp_nox(customers.size(),0);\\n        vector<int> sum(customers.size(),0);\\n        dp_x[0]=sum[0]=customers[0];\\n        dp_nox[0]=customers[0]*(grumpy[0]^1);\\n\\n        for(int i=1;i<customers.size();++i)\\n        {\\n            sum[i]=sum[i-1]+customers[i];\\n            dp_nox[i]=dp_nox[i-1]+customers[i]*(grumpy[i]^1);\\n            if(i<X)\\n                dp_x[i]=sum[i];\\n            else\\n                dp_x[i]=max(dp_x[i-1]+customers[i]*(grumpy[i]^1),dp_nox[i-X]+sum[i]-sum[i-X]);\\n        }\\n        return dp_x[customers.size()-1];\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 300276,
                "title": "python-solution-with-element-wise-product-linear-time-64ms-14-8mb",
                "content": "The mathematical formula for this problem: Total revenue = total num of customers - total loss + \"saved revenue\".\\nWe can use element-wise product to calculate the total loss, and use sliding window to find the maximized \"saved revenue\"\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        # Zoey May 27th, 2019\\n        # aim of this problem: minimize element-wise product (total loss)\\n        # Total revenue = total num of customers - total loss \\n        loss = [customers[i] * grumpy[i] for i in range(len(customers))]\\n        \\n        # sliding window to find max \"saved revenue\"\\n        window_sum = sum(loss[:X])\\n        max_window_sum = window_sum\\n        for i in range(len(customers) - X):\\n            window_sum += loss[X + i] - loss[i]\\n            if window_sum > max_window_sum:\\n                max_window_sum = window_sum\\n        \\n        # Total revenue = total num of customers - total loss + \"saved revenue\"\\n        return sum(customers) - sum(loss) + max_window_sum\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        # Zoey May 27th, 2019\\n        # aim of this problem: minimize element-wise product (total loss)\\n        # Total revenue = total num of customers - total loss \\n        loss = [customers[i] * grumpy[i] for i in range(len(customers))]\\n        \\n        # sliding window to find max \"saved revenue\"\\n        window_sum = sum(loss[:X])\\n        max_window_sum = window_sum\\n        for i in range(len(customers) - X):\\n            window_sum += loss[X + i] - loss[i]\\n            if window_sum > max_window_sum:\\n                max_window_sum = window_sum\\n        \\n        # Total revenue = total num of customers - total loss + \"saved revenue\"\\n        return sum(customers) - sum(loss) + max_window_sum\\n```",
                "codeTag": "Java"
            },
            {
                "id": 300085,
                "title": "one-pass-java",
                "content": "some translation about this problem: find the maximum value within a window with size of `X`, with a condition that `arr[i]` must be `1`\\n```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfied = 0, cur = 0, max = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            satisfied += grumpy[i] == 0 ? customers[i] : 0;\\n            cur += customers[i] * grumpy[i];\\n            if (i >= X) cur -= customers[i - X] * grumpy[i - X];\\n            max = Math.max(max, cur);\\n        }\\n        return satisfied + max;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxSatisfied(int[] customers, int[] grumpy, int X) {\\n        int satisfied = 0, cur = 0, max = 0;\\n        for (int i = 0; i < customers.length; i++) {\\n            satisfied += grumpy[i] == 0 ? customers[i] : 0;\\n            cur += customers[i] * grumpy[i];\\n            if (i >= X) cur -= customers[i - X] * grumpy[i - X];\\n            max = Math.max(max, cur);\\n        }\\n        return satisfied + max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 299631,
                "title": "c-o-n-solution-with-explanation",
                "content": "The only trcik here is to find the max number of unsatisfied customers in a window of length X. \\nTo do so:\\n1. Traverse the array one item at a time and a window(i.e keep track of start)\\n2. For every item, check if this item can be part of current window or not?\\n\\t3. If yes, check if bookstore owner was grumpy this time. Add the count of unsatisfied customer.\\n\\t4. If no, simply slide the window i.e remove start item contribution to max of unsatisfied customer and add current.\\n5. Keep track of total satisfied customer.\\n6. Return total satisfied customers + max unsatisfied customers :)\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum = 0, start = 0, total = 0, max_sum = 0;\\n        for(int i = 0; i < customers.size(); i++){\\n            if(i - start < X){\\n                //Window size smaller than X, add entry\\n                if(grumpy[i]) sum += customers[i];\\n            }else{\\n                //Window size exceeds, move window\\n                if(grumpy[start]) sum -= customers[start];\\n                if(grumpy[i]) sum += customers[i];\\n                start++;\\n            }\\n            //Keep track of max_sum of unsatisfied customers in sliding window\\n            max_sum = max(max_sum, sum);\\n            //Keep track of total customers satisfied\\n            if(!grumpy[i]) total += customers[i];\\n        }\\n        \\n        return total+max_sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int sum = 0, start = 0, total = 0, max_sum = 0;\\n        for(int i = 0; i < customers.size(); i++){\\n            if(i - start < X){\\n                //Window size smaller than X, add entry\\n                if(grumpy[i]) sum += customers[i];\\n            }else{\\n                //Window size exceeds, move window\\n                if(grumpy[start]) sum -= customers[start];\\n                if(grumpy[i]) sum += customers[i];\\n                start++;\\n            }\\n            //Keep track of max_sum of unsatisfied customers in sliding window\\n            max_sum = max(max_sum, sum);\\n            //Keep track of total customers satisfied\\n            if(!grumpy[i]) total += customers[i];\\n        }\\n        \\n        return total+max_sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299548,
                "title": "simple-c-sliding-window-technique-solution-with-simple-explanation",
                "content": "Constraints given in the problem:\\n1 <= X <= customers.length == grumpy.length <= 20000\\n0 <= customers[i] <= 1000\\n0 <= grumpy[i] <= 1\\n\\nIt is given that using a secret technique, owner can stop being grumpy for \"X\" minutes straight. \\n\\nIdea:\\nWe want to know that within which interval of \"X\" minutes, the sum of customers arriving at grumpy minutes is maximum. By getting that interval, we can select all the customers irrespective of bookstore owner being grumpy or not at the minute when they arrive. And select all the customers arriving at the minutes which lie outside this interval and the bookstore owner is not grumpy at those minutes.\\n\\nThe problem can be solved by maintaining a window of size \"X\" and the sum of all the customers arriving at those minutes which lie in the window and when the store owner is grumpy. We will keep track of this sum, and the window in which this sum is found to be maximum, that is to be considered for the answer as that is the maximum number of customers at the grumpy minutes that you can maximise in X hours straight.\\n\\nTime complexity: O(number of minutes)\\nSpace complexity: O(1)\\n\\nBelow is the implementation of the above explaines idea:\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n=customers.size();\\n        if(n==1) return customers[0];\\n        int l=0,r=X-1;\\n        int wS=0;\\n        int mL=l,mR=r;\\n        int maxWs=0;\\n        for(int i=l;i<=r;++i)\\n        {\\n            if(grumpy[i])\\n                wS+=customers[i];\\n        }\\n        \\n        maxWs=wS;\\n        \\n        while(r<=customers.size()-2)\\n        {\\n            r++;\\n            if(grumpy[r])\\n                wS+=customers[r];\\n            \\n            if(grumpy[l])\\n                wS-=customers[l];\\n            \\n            l++;\\n            \\n            if(wS>maxWs)\\n            {\\n                mL=l;\\n                mR=r;\\n                wS=maxWs;\\n            }\\n            \\n        }\\n        \\n        int ans=0;\\n        for(int i=0;i<customers.size();++i)\\n        {\\n            \\n            if(i>=mL && i<=mR)ans+=customers[i];\\n            \\n            else if(!grumpy[i]) ans+=customers[i];\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n=customers.size();\\n        if(n==1) return customers[0];\\n        int l=0,r=X-1;\\n        int wS=0;\\n        int mL=l,mR=r;\\n        int maxWs=0;\\n        for(int i=l;i<=r;++i)\\n        {\\n            if(grumpy[i])\\n                wS+=customers[i];\\n        }\\n        \\n        maxWs=wS;\\n        \\n        while(r<=customers.size()-2)\\n        {\\n            r++;\\n            if(grumpy[r])\\n                wS+=customers[r];\\n            \\n            if(grumpy[l])\\n                wS-=customers[l];\\n            \\n            l++;\\n            \\n            if(wS>maxWs)\\n            {\\n                mL=l;\\n                mR=r;\\n                wS=maxWs;\\n            }\\n            \\n        }\\n        \\n        int ans=0;\\n        for(int i=0;i<customers.size();++i)\\n        {\\n            \\n            if(i>=mL && i<=mR)ans+=customers[i];\\n            \\n            else if(!grumpy[i]) ans+=customers[i];\\n        }\\n        \\n        return ans;\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299469,
                "title": "sliding-window-simple-solution",
                "content": "``` csharp\\n\\n public int MaxSatisfied(int[] customers, int[] grumpy, int X)\\n {\\n            int satisfy = 0;\\n            int maxSatisfy = 0;\\n            int extraSatisfy = 0;\\n\\n            for (int i = 0; i < grumpy.Length; i++)\\n            {\\n                if (grumpy[i] == 0)\\n                {\\n                    satisfy += customers[i];\\n                }\\n                else\\n                {\\n                    extraSatisfy += customers[i];\\n                }\\n\\n                // Sliding window of X length\\n                if (i >= X && grumpy[i - X] == 1)\\n                {\\n                    extraSatisfy = extraSatisfy - customers[i - X];\\n                }\\n                maxSatisfy = Math.Max(maxSatisfy, extraSatisfy);\\n            }\\n\\n            return satisfy + maxSatisfy;\\n }\\n\\n```",
                "solutionTags": [
                    "Sliding Window"
                ],
                "code": "``` csharp\\n\\n public int MaxSatisfied(int[] customers, int[] grumpy, int X)\\n {\\n            int satisfy = 0;\\n            int maxSatisfy = 0;\\n            int extraSatisfy = 0;\\n\\n            for (int i = 0; i < grumpy.Length; i++)\\n            {\\n                if (grumpy[i] == 0)\\n                {\\n                    satisfy += customers[i];\\n                }\\n                else\\n                {\\n                    extraSatisfy += customers[i];\\n                }\\n\\n                // Sliding window of X length\\n                if (i >= X && grumpy[i - X] == 1)\\n                {\\n                    extraSatisfy = extraSatisfy - customers[i - X];\\n                }\\n                maxSatisfy = Math.Max(maxSatisfy, extraSatisfy);\\n            }\\n\\n            return satisfy + maxSatisfy;\\n }\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 299299,
                "title": "c-o-n-with-explanation",
                "content": "1. First take sum of all the customers entered at non-grumpy minutes. And set them to 0\\n2. Now in the remaining list, we find a window of size X having the max sum.\\n3. Answer is the total of the two sums calculated in previous 2 steps.\\n\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n = customers.size();\\n        int total = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (!grumpy[i]) {\\n                total += customers[i];\\n                customers[i] = 0;\\n            }\\n        }\\n        // Now find a window of size X having max sum from remaining\\n        int max_sum = 0;\\n        for (int i = 0; i < X; i++)\\n            max_sum += customers[i];\\n        int cur_sum = max_sum;\\n        for (int i = X; i < n; i++) {\\n            cur_sum += customers[i] - customers[i - X];\\n            max_sum = max(max_sum, cur_sum);\\n        }\\n        return max_sum + total;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int X) {\\n        int n = customers.size();\\n        int total = 0;\\n        for (int i = 0; i < n; i++) {\\n            if (!grumpy[i]) {\\n                total += customers[i];\\n                customers[i] = 0;\\n            }\\n        }\\n        // Now find a window of size X having max sum from remaining\\n        int max_sum = 0;\\n        for (int i = 0; i < X; i++)\\n            max_sum += customers[i];\\n        int cur_sum = max_sum;\\n        for (int i = X; i < n; i++) {\\n            cur_sum += customers[i] - customers[i - X];\\n            max_sum = max(max_sum, cur_sum);\\n        }\\n        return max_sum + total;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 299253,
                "title": "intuitive-java-solution",
                "content": "**Idea**\\n`perfect` prefixSum array of satisfied customers if the owner is not grumpy at all.\\n`real` prefixSum array of satisfied customers according to `grumpy` array\\n\\nBasically, we calculate the max satisfaction by sliding window of size X from the start. For example, the window(i..j) applied as below\\n`[0......(i......j).....n-1]`\\nTo efficiently calculate the satisfaction for when applying our window, it splits the input array into 3 parts. \\n\\n1. Part before the window. Satisfaction for this part = `real[i]`\\n2. window. Satisfaction for this part = `perfect[i+x]-perfect[i]`\\n3. Part after the window. Satisfaction for this part = `real[n]-real[i+x]`\\n\\n**Time O(n)** where n is size of customers array \\n\\n```\\npublic int maxSatisfied(int[] c, int[] g, int x) {\\n        int n = c.length, max = 0;\\n        int[] real = new int[n+1], perfect = new int[n+1];\\n        for(int i=1; i <= n; i++)\\n            perfect[i] = perfect[i-1]+c[i-1];\\n        for(int i=1; i <= n; i++)\\n            real[i] = real[i-1]+(g[i-1] == 0 ? c[i-1] : 0);\\n        for(int i=0; i+x <= n; i++)\\n            max = Math.max(max, real[i]+perfect[i+x]-perfect[i]+real[n]-real[i+x]);\\n        return max;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\npublic int maxSatisfied(int[] c, int[] g, int x) {\\n        int n = c.length, max = 0;\\n        int[] real = new int[n+1], perfect = new int[n+1];\\n        for(int i=1; i <= n; i++)\\n            perfect[i] = perfect[i-1]+c[i-1];\\n        for(int i=1; i <= n; i++)\\n            real[i] = real[i-1]+(g[i-1] == 0 ? c[i-1] : 0);\\n        for(int i=0; i+x <= n; i++)\\n            max = Math.max(max, real[i]+perfect[i+x]-perfect[i]+real[n]-real[i+x]);\\n        return max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 299197,
                "title": "python-concise-sliding-window",
                "content": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], x: int) -> int:\\n        dif = mx = sum(c * g for c, g in zip(customers[:x], grumpy[:x]))\\n        for j in range(x, len(grumpy)):\\n            dif += (grumpy[j] * customers[j]) - (grumpy[j - x] * customers[j - x])\\n            mx = max(mx, dif)\\n        return mx + sum(c * (1- g) for c, g in zip(customers, grumpy))\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], x: int) -> int:\\n        dif = mx = sum(c * g for c, g in zip(customers[:x], grumpy[:x]))\\n        for j in range(x, len(grumpy)):\\n            dif += (grumpy[j] * customers[j]) - (grumpy[j - x] * customers[j - x])\\n            mx = max(mx, dif)\\n        return mx + sum(c * (1- g) for c, g in zip(customers, grumpy))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4105686,
                "title": "python-solution-with-explanation-rolling-sum",
                "content": "The way I approached this problem was to split it into 2 smaller problems.\\n\\nThe first involves counting how many customers are already satisfied, i.e. those where the shopkeeper is not grumpy. I also set any slots with already satisfied customers to 0, so that we will be left with only the currently unsatisfied customers in the list.\\n\\nFor the second part, the array now only contains customers who will not be satisfied. We are able to make X adjacent times \\u201Chappy\\u201D, so we want to find the subarray of length X that has the most customers. We can just keep a rolling sum of the last X customers in the array, and then the best solution is the max the rolling sum ever was.\\n\\nFinally we return the sum of the 2 parts: the customers who were already satisfied, and the maximum number who can be made satisfied by stopping the shop keeper from being grumpy for X time.\\n\\nNote that both parts can be combined into a single loop, but I felt this way was probably easier for understanding, and both are still O(n) time. I\\'ll shortly include code for how to merge it all together.\\n\\n\\n# Code\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        # Part 1 requires counting how many customers\\n        # are already satisfied, and removing them\\n        # from the customer list.\\n        already_satisfied = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0: #He\\'s happy\\n                already_satisfied += customers[i]\\n                customers[i] = 0\\n        \\n        # Part 2 requires finding the optinal number\\n        # of unhappy customers we can make happy.\\n        best_we_can_make_satisfied = 0\\n        current_satisfied = 0\\n        for i, customers_at_time in enumerate(customers):\\n            current_satisfied += customers_at_time # Add current to rolling total\\n            if i >= X: # We need to remove some from the rolling total\\n                current_satisfied -= customers[i - X]\\n            best_we_can_make_satisfied = max(best_we_can_make_satisfied, current_satisfied)\\n        \\n        # The answer is the sum of the solutions for the 2 parts.\\n        return already_satisfied + best_we_can_make_satisfied\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], X: int) -> int:\\n        \\n        # Part 1 requires counting how many customers\\n        # are already satisfied, and removing them\\n        # from the customer list.\\n        already_satisfied = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0: #He\\'s happy\\n                already_satisfied += customers[i]\\n                customers[i] = 0\\n        \\n        # Part 2 requires finding the optinal number\\n        # of unhappy customers we can make happy.\\n        best_we_can_make_satisfied = 0\\n        current_satisfied = 0\\n        for i, customers_at_time in enumerate(customers):\\n            current_satisfied += customers_at_time # Add current to rolling total\\n            if i >= X: # We need to remove some from the rolling total\\n                current_satisfied -= customers[i - X]\\n            best_we_can_make_satisfied = max(best_we_can_make_satisfied, current_satisfied)\\n        \\n        # The answer is the sum of the solutions for the 2 parts.\\n        return already_satisfied + best_we_can_make_satisfied\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4084463,
                "title": "sliding-window-technique-java-python-typescript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\nLet\\'s analyze the time complexity and space complexity of the provided code.\\n\\n**Time Complexity:**\\n1. The first `while` loop iterates through the `customers` array from `startIndex` to the end (`endIndex < customers.length`). In the worst case, it iterates through the entire array. The operations inside the loop, such as addition and comparison, have constant time complexity O(1).\\n\\n2. The second `while` loop also iterates through the `customers` array from `endIndex` to the end (`endIndex < customers.length`). In the worst case, it iterates through the entire array. The operations inside the loop have constant time complexity O(1).\\n\\nOverall, the time complexity of this code is O(N), where N is the length of the `customers` array.\\n\\n**Space Complexity:**\\nThe space complexity of the code is determined by the variables and data structures used:\\n\\n1. `startIndex`, `endIndex`, `result`, `max`, and other integer variables: These are constant space as they do not depend on the input size. Therefore, they have a space complexity of O(1).\\n\\n2. `grumpy` array: Assuming this array is given as an input parameter, it does not contribute to the space complexity of the code. Its space complexity depends on the input and is not a result of the code itself.\\n\\nOverall, the space complexity of the code is O(1), assuming that the input arrays `customers` and `grumpy` are not counted towards the space complexity since they are external inputs.\\n\\nIn summary, the time complexity of the code is O(N), and the space complexity is O(1), where N is the length of the `customers` array.\\n\\n# Java\\n```\\nclass Solution {\\n    public static int maxSatisfiedOptimal(int[] customers, int[] grumpy, int minutes) {\\n        int satisfied = 0; // Total satisfied customers when the owner is not grumpy\\n        int maxSatisfied = 0; // Maximum satisfied customers during grumpy minutes\\n        int windowSum = 0; // Current sum of customers during grumpy minutes\\n        int right = 0; // Left pointer of the sliding window\\n        int left = 0; // Left pointer of the sliding window\\n\\n        while (right < customers.length) {\\n            if (grumpy[right] == 0) {\\n                satisfied += customers[right];\\n            } else {\\n                windowSum += customers[right];\\n            }\\n\\n            // Slide the window to keep it of size \\'minutes\\'\\n            if (right - left + 1 > minutes) {\\n                if (grumpy[left] == 1) {\\n                    windowSum -= customers[left];\\n                }\\n                left++;\\n            }\\n\\n            right++;\\n            // Update maxSatisfied\\n            maxSatisfied = Math.max(maxSatisfied, windowSum);\\n        }\\n\\n        return satisfied + maxSatisfied;\\n    }\\n}\\n```\\n# Python\\n\\n```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, minutes):\\n        \"\"\"\\n        :type customers: List[int]\\n        :type grumpy: List[int]\\n        :type minutes: int\\n        :rtype: int\\n        \"\"\"\\n        satisfied = 0  # Total satisfied customers when the owner is not grumpy\\n        max_satisfied = 0  # Maximum satisfied customers during grumpy minutes\\n        window_sum = 0  # Current sum of customers during grumpy minutes\\n        right = 0  # Right pointer of the sliding window\\n        left = 0  # Left pointer of the sliding window\\n\\n        while right < len(customers):\\n\\n            if grumpy[right] == 0:\\n                satisfied += customers[right]\\n            else:\\n                window_sum += customers[right]\\n\\n            while right - left + 1 > minutes:\\n                if grumpy[left] == 1:\\n                    window_sum -= customers[left]\\n\\n                left += 1\\n\\n            right += 1\\n            max_satisfied = max(max_satisfied, window_sum)\\n\\n        return satisfied + max_satisfied\\n```\\n# TypeScript\\n```\\nfunction maxSatisfied(customers: number[], grumpy: number[], minutes: number): number {\\n\\n    let satisfied = 0; // Total satisfied customers when the owner is not grumpy\\n    let maxSatisfied = 0; // Maximum satisfied customers during grumpy minutes\\n    let windowSum = 0; // Current sum of customers during grumpy minutes\\n    let right = 0; // Left pointer of the sliding window\\n    let left = 0; // Left pointer of the sliding window\\n\\n    while (right < customers.length) {\\n\\n        if (grumpy[right] == 0) {\\n            satisfied += customers[right]\\n        } else {\\n            windowSum += customers[right]\\n        }\\n\\n        while (right - left + 1 > minutes) {\\n            if (grumpy[left] == 1) {\\n                windowSum -= customers[left]\\n            }\\n            left++\\n        }\\n\\n        right++\\n        maxSatisfied = Math.max(maxSatisfied, windowSum)\\n    }\\n\\n    return satisfied + maxSatisfied\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Python",
                    "TypeScript"
                ],
                "code": "```\\nclass Solution {\\n    public static int maxSatisfiedOptimal(int[] customers, int[] grumpy, int minutes) {\\n        int satisfied = 0; // Total satisfied customers when the owner is not grumpy\\n        int maxSatisfied = 0; // Maximum satisfied customers during grumpy minutes\\n        int windowSum = 0; // Current sum of customers during grumpy minutes\\n        int right = 0; // Left pointer of the sliding window\\n        int left = 0; // Left pointer of the sliding window\\n\\n        while (right < customers.length) {\\n            if (grumpy[right] == 0) {\\n                satisfied += customers[right];\\n            } else {\\n                windowSum += customers[right];\\n            }\\n\\n            // Slide the window to keep it of size \\'minutes\\'\\n            if (right - left + 1 > minutes) {\\n                if (grumpy[left] == 1) {\\n                    windowSum -= customers[left];\\n                }\\n                left++;\\n            }\\n\\n            right++;\\n            // Update maxSatisfied\\n            maxSatisfied = Math.max(maxSatisfied, windowSum);\\n        }\\n\\n        return satisfied + maxSatisfied;\\n    }\\n}\\n```\n```\\nclass Solution(object):\\n    def maxSatisfied(self, customers, grumpy, minutes):\\n        \"\"\"\\n        :type customers: List[int]\\n        :type grumpy: List[int]\\n        :type minutes: int\\n        :rtype: int\\n        \"\"\"\\n        satisfied = 0  # Total satisfied customers when the owner is not grumpy\\n        max_satisfied = 0  # Maximum satisfied customers during grumpy minutes\\n        window_sum = 0  # Current sum of customers during grumpy minutes\\n        right = 0  # Right pointer of the sliding window\\n        left = 0  # Left pointer of the sliding window\\n\\n        while right < len(customers):\\n\\n            if grumpy[right] == 0:\\n                satisfied += customers[right]\\n            else:\\n                window_sum += customers[right]\\n\\n            while right - left + 1 > minutes:\\n                if grumpy[left] == 1:\\n                    window_sum -= customers[left]\\n\\n                left += 1\\n\\n            right += 1\\n            max_satisfied = max(max_satisfied, window_sum)\\n\\n        return satisfied + max_satisfied\\n```\n```\\nfunction maxSatisfied(customers: number[], grumpy: number[], minutes: number): number {\\n\\n    let satisfied = 0; // Total satisfied customers when the owner is not grumpy\\n    let maxSatisfied = 0; // Maximum satisfied customers during grumpy minutes\\n    let windowSum = 0; // Current sum of customers during grumpy minutes\\n    let right = 0; // Left pointer of the sliding window\\n    let left = 0; // Left pointer of the sliding window\\n\\n    while (right < customers.length) {\\n\\n        if (grumpy[right] == 0) {\\n            satisfied += customers[right]\\n        } else {\\n            windowSum += customers[right]\\n        }\\n\\n        while (right - left + 1 > minutes) {\\n            if (grumpy[left] == 1) {\\n                windowSum -= customers[left]\\n            }\\n            left++\\n        }\\n\\n        right++\\n        maxSatisfied = Math.max(maxSatisfied, windowSum)\\n    }\\n\\n    return satisfied + maxSatisfied\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4077329,
                "title": "java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int cus = 0;\\n        for(int i = 0; i < minutes ; i++){\\n            cus += customers[i];\\n        }\\n\\n        for(int j = minutes; j < customers.length ; j++){\\n            if(grumpy[j] != 1){\\n                cus += customers[j];\\n            }\\n        }\\n\\n        int max = cus;\\n        for(int i =  minutes; i < customers.length ; i++){\\n            if(grumpy[i-minutes] == 1){\\n                cus = cus - customers[i-minutes];\\n            }\\n            if(grumpy[i] == 1){\\n                cus +=  customers[i];\\n            }\\n            max = Math.max(cus, max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int cus = 0;\\n        for(int i = 0; i < minutes ; i++){\\n            cus += customers[i];\\n        }\\n\\n        for(int j = minutes; j < customers.length ; j++){\\n            if(grumpy[j] != 1){\\n                cus += customers[j];\\n            }\\n        }\\n\\n        int max = cus;\\n        for(int i =  minutes; i < customers.length ; i++){\\n            if(grumpy[i-minutes] == 1){\\n                cus = cus - customers[i-minutes];\\n            }\\n            if(grumpy[i] == 1){\\n                cus +=  customers[i];\\n            }\\n            max = Math.max(cus, max);\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4068048,
                "title": "sliding-window-little-tricky",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\njust slide a window of length minutes.\\nAnd check where is the difference between the actualsum and the simple sum is higest.\\njust use your minutes there.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0;\\n        int j=0;\\n\\n        int ans=INT_MIN;\\n\\n        int x=-1;\\n        int y=-1;\\n        int sum=0;\\n        int actsum=0;\\n        while(j<customers.size())\\n        {\\n             sum+=customers[j];\\n             if(grumpy[j]==1)\\n             {\\n                 actsum+=0;\\n             }\\n             else\\n             actsum+=customers[j];\\n\\n             if(j-i+1==minutes)\\n             {\\n                 if(sum-actsum>ans)\\n                 {\\n                     ans=sum-actsum;\\n                     x=i;\\n                     y=j;\\n                 }\\n\\n                 sum-=customers[i];\\n\\n                 if(grumpy[i]==0)\\n                   actsum-=customers[i];\\n                   i++;\\n                   j++;             \\n        }\\n        else\\n        {\\n            j++;\\n        }\\n    }\\n    \\n    int cnt=0;\\n\\n    for(int i=0;i<customers.size();i++)\\n    {\\n        if(i< x || i> y)\\n        cnt+=customers[i]*(abs(1-grumpy[i]));\\n        else\\n        cnt+=customers[i];\\n    }\\n\\n    \\n\\n    return cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int i=0;\\n        int j=0;\\n\\n        int ans=INT_MIN;\\n\\n        int x=-1;\\n        int y=-1;\\n        int sum=0;\\n        int actsum=0;\\n        while(j<customers.size())\\n        {\\n             sum+=customers[j];\\n             if(grumpy[j]==1)\\n             {\\n                 actsum+=0;\\n             }\\n             else\\n             actsum+=customers[j];\\n\\n             if(j-i+1==minutes)\\n             {\\n                 if(sum-actsum>ans)\\n                 {\\n                     ans=sum-actsum;\\n                     x=i;\\n                     y=j;\\n                 }\\n\\n                 sum-=customers[i];\\n\\n                 if(grumpy[i]==0)\\n                   actsum-=customers[i];\\n                   i++;\\n                   j++;             \\n        }\\n        else\\n        {\\n            j++;\\n        }\\n    }\\n    \\n    int cnt=0;\\n\\n    for(int i=0;i<customers.size();i++)\\n    {\\n        if(i< x || i> y)\\n        cnt+=customers[i]*(abs(1-grumpy[i]));\\n        else\\n        cnt+=customers[i];\\n    }\\n\\n    \\n\\n    return cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4066757,
                "title": "the-slowest-code-in-the-world-it-takes-more-than-9-seconds",
                "content": "![\\u672A\\u547D\\u540D.png](https://assets.leetcode.com/users/images/0951b035-56b6-4957-90b3-89c5e5c0c4e9_1695181414.3689435.png)\\n\\n# Code\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        zero = 0\\n        one = 0\\n        temp = 0\\n\\n        for i in range(0,len(customers)):\\n            if grumpy[i] == 0:\\n                zero = zero + customers[i]\\n        \\n        for j in range(0, len(grumpy) - minutes + 1):\\n            sliding_window = grumpy[j:j + minutes]\\n            for k in range(0,len(sliding_window)):\\n                if sliding_window[k] == 1:\\n                    temp = temp + customers[j + k]\\n            if temp > one:\\n                one = temp\\n            temp = 0\\n\\n        return zero + one\\n\\n        # 20230920\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        zero = 0\\n        one = 0\\n        temp = 0\\n\\n        for i in range(0,len(customers)):\\n            if grumpy[i] == 0:\\n                zero = zero + customers[i]\\n        \\n        for j in range(0, len(grumpy) - minutes + 1):\\n            sliding_window = grumpy[j:j + minutes]\\n            for k in range(0,len(sliding_window)):\\n                if sliding_window[k] == 1:\\n                    temp = temp + customers[j + k]\\n            if temp > one:\\n                one = temp\\n            temp = 0\\n\\n        return zero + one\\n\\n        # 20230920\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4053419,
                "title": "java-easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int end =minutes -1;\\n        int x = 0;\\n\\n        for(int i =0; i< minutes; i++){\\n            if(grumpy[i] == 1) x+= customers[i]; \\n        }\\n\\n        int max = x;\\n\\n        for(int i =minutes; i< customers.length; i++){\\n            if(grumpy[i] == 1){\\n                x+= customers[i];\\n            }\\n            if(grumpy[i-minutes] == 1){\\n               x-= customers[i-minutes];\\n            }\\n          \\n            if(x > max){\\n                max=x;\\n                end = i;\\n            } \\n        }\\n\\n\\n        int start = end - minutes;\\n        int result =0;\\n\\n        for(int i =0; i< customers.length; i++){\\n            if((i> start && i <= end) || grumpy[i] == 0){\\n                result+=customers[i];\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int end =minutes -1;\\n        int x = 0;\\n\\n        for(int i =0; i< minutes; i++){\\n            if(grumpy[i] == 1) x+= customers[i]; \\n        }\\n\\n        int max = x;\\n\\n        for(int i =minutes; i< customers.length; i++){\\n            if(grumpy[i] == 1){\\n                x+= customers[i];\\n            }\\n            if(grumpy[i-minutes] == 1){\\n               x-= customers[i-minutes];\\n            }\\n          \\n            if(x > max){\\n                max=x;\\n                end = i;\\n            } \\n        }\\n\\n\\n        int start = end - minutes;\\n        int result =0;\\n\\n        for(int i =0; i< customers.length; i++){\\n            if((i> start && i <= end) || grumpy[i] == 0){\\n                result+=customers[i];\\n            }\\n        }\\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4006473,
                "title": "normal",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n        \\n        int n = customers.length;\\n        int ans =0;\\n       for( int i=0; i<n; i++){\\n           if(grumpy[i] == 0){\\n               ans += customers[i];\\n           }\\n       }\\n         int max = 0;\\n        int unsatis = 0 ,i ;\\n        for(  i=0;i<minutes; i++){\\n            if( grumpy[i] == 1){\\n                unsatis += customers[i];\\n            }\\n        }\\n        int j= 0;\\n        max = Math.max(max, unsatis);\\n        while( i < n){\\n            if(grumpy[j] == 1 ){\\n                unsatis -= customers[j];\\n            }\\n            if( grumpy[i] == 1){\\n                unsatis += customers[i];\\n            }\\n            max = Math.max(max, unsatis);\\n            i++;\\n            j++;\\n        }\\n\\n          return ans + max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n        \\n        int n = customers.length;\\n        int ans =0;\\n       for( int i=0; i<n; i++){\\n           if(grumpy[i] == 0){\\n               ans += customers[i];\\n           }\\n       }\\n         int max = 0;\\n        int unsatis = 0 ,i ;\\n        for(  i=0;i<minutes; i++){\\n            if( grumpy[i] == 1){\\n                unsatis += customers[i];\\n            }\\n        }\\n        int j= 0;\\n        max = Math.max(max, unsatis);\\n        while( i < n){\\n            if(grumpy[j] == 1 ){\\n                unsatis -= customers[j];\\n            }\\n            if( grumpy[i] == 1){\\n                unsatis += customers[i];\\n            }\\n            max = Math.max(max, unsatis);\\n            i++;\\n            j++;\\n        }\\n\\n          return ans + max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3997161,
                "title": "sliding-window-python-solution-beats-74-21-in-runtime",
                "content": "\\n# Code\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        min_customers = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0:\\n                min_customers += customers[i]\\n\\n        cur_count,cur_max,start = 0,0,0   \\n        for end in range(len(grumpy)):\\n            if grumpy[end] == 1:\\n                cur_count += customers[end]\\n            \\n            cur_max = max(cur_max,cur_count)\\n\\n            if end-start+1 >= minutes:\\n                if grumpy[start] == 1:\\n                    cur_count -= customers[start]\\n                start += 1\\n        \\n        return min_customers + cur_max\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        min_customers = 0\\n        for i in range(len(grumpy)):\\n            if grumpy[i] == 0:\\n                min_customers += customers[i]\\n\\n        cur_count,cur_max,start = 0,0,0   \\n        for end in range(len(grumpy)):\\n            if grumpy[end] == 1:\\n                cur_count += customers[end]\\n            \\n            cur_max = max(cur_max,cur_count)\\n\\n            if end-start+1 >= minutes:\\n                if grumpy[start] == 1:\\n                    cur_count -= customers[start]\\n                start += 1\\n        \\n        return min_customers + cur_max\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3985688,
                "title": "c-sliding-window",
                "content": "# Code\\n```\\n// Two Pass\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int total = 0, n = customers.size(), ans = 0;\\n        for(int i = 0; i < n; i++) \\n            total += (1 - grumpy[i]) * customers[i];\\n        for(int i = 0; i < n; i++) {\\n            total += grumpy[i] * customers[i];\\n            if(i >= minutes)\\n                total -= grumpy[i - minutes] * customers[i - minutes];\\n            if(i >= minutes - 1)\\n                ans = max(ans, total);\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n// One Pass\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int total = 0, n = customers.size(), ans = 0, canSatisfy = 0, maxSatisfy = 0;\\n        for(int i = 0; i < n; i++) {\\n            total += (1 - grumpy[i]) * customers[i];\\n            canSatisfy += grumpy[i] * customers[i];\\n            if(i >= minutes)\\n                canSatisfy -= grumpy[i - minutes] * customers[i - minutes];\\n            maxSatisfy = max(maxSatisfy, canSatisfy);\\n        }\\n        return total + maxSatisfy;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\n// Two Pass\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int total = 0, n = customers.size(), ans = 0;\\n        for(int i = 0; i < n; i++) \\n            total += (1 - grumpy[i]) * customers[i];\\n        for(int i = 0; i < n; i++) {\\n            total += grumpy[i] * customers[i];\\n            if(i >= minutes)\\n                total -= grumpy[i - minutes] * customers[i - minutes];\\n            if(i >= minutes - 1)\\n                ans = max(ans, total);\\n        }\\n        return ans;\\n    }\\n};\\n\\n\\n// One Pass\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int total = 0, n = customers.size(), ans = 0, canSatisfy = 0, maxSatisfy = 0;\\n        for(int i = 0; i < n; i++) {\\n            total += (1 - grumpy[i]) * customers[i];\\n            canSatisfy += grumpy[i] * customers[i];\\n            if(i >= minutes)\\n                canSatisfy -= grumpy[i - minutes] * customers[i - minutes];\\n            maxSatisfy = max(maxSatisfy, canSatisfy);\\n        }\\n        return total + maxSatisfy;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3982216,
                "title": "easy-c-explained",
                "content": "\\n# Approach\\nFirst we just sum all the `grumpy==0`, Then loop iterates for, it adds the customers who are affected by grumpiness to Tsum, simulating the effect of using the sliding window with size minutes , we add `grumpy==1` customes and hen the window size increases by one. It checks if the customer who just left the window was grumpy (grumpy[i - minutes] == 1) and subtracts their contribution to Tsum..\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int Tsum=0;\\n        int mmax=0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==0){\\n                Tsum +=customers[i];\\n            }\\n        }\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1)// for i in range of window size sum of customers[i]  grumpy==1 \\n            {\\n                Tsum +=customers[i];\\n            }\\n            if(i<minutes-1)//checking for window size\\n                continue;\\n            else if(i==minutes-1)//if i== window size\\n            {\\n                mmax=max(Tsum,mmax);\\n            }\\n            else //this is case when window size increas by 1 , then we have to check grumpy[i-k]==1 then sub customers[i-k] \\n            {\\n                if(grumpy[i-minutes]==1){\\n                    Tsum-=customers[i-minutes];\\n                }\\n                mmax=max(Tsum,mmax);\\n            }\\n        }\\n        return mmax;\\n\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int n=customers.size();\\n        int Tsum=0;\\n        int mmax=0;\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==0){\\n                Tsum +=customers[i];\\n            }\\n        }\\n        for(int i=0;i<n;i++){\\n            if(grumpy[i]==1)// for i in range of window size sum of customers[i]  grumpy==1 \\n            {\\n                Tsum +=customers[i];\\n            }\\n            if(i<minutes-1)//checking for window size\\n                continue;\\n            else if(i==minutes-1)//if i== window size\\n            {\\n                mmax=max(Tsum,mmax);\\n            }\\n            else //this is case when window size increas by 1 , then we have to check grumpy[i-k]==1 then sub customers[i-k] \\n            {\\n                if(grumpy[i-minutes]==1){\\n                    Tsum-=customers[i-minutes];\\n                }\\n                mmax=max(Tsum,mmax);\\n            }\\n        }\\n        return mmax;\\n\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3974612,
                "title": "beats-90-simple-approach",
                "content": "\\n# Complexity\\n- Time complexity: **O(n)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(n)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int sum = 0;\\n        for(int i = 0; i<customers.length; i++){\\n            sum+= grumpy[i]==0?customers[i]:0; //number of satisfied customers\\n            grumpy[i] = grumpy[i]==1?customers[i]:0; //number of customers that could have been satisfied\\n        }\\n        int max = 0, save = 0;\\n        for(int i = 0; i<grumpy.length; i++){\\n            save+=grumpy[i];\\n            if(i>=minutes){save-=grumpy[i-minutes];}\\n            max = Math.max(max, save);\\n        }\\n        return max + sum;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        int sum = 0;\\n        for(int i = 0; i<customers.length; i++){\\n            sum+= grumpy[i]==0?customers[i]:0; //number of satisfied customers\\n            grumpy[i] = grumpy[i]==1?customers[i]:0; //number of customers that could have been satisfied\\n        }\\n        int max = 0, save = 0;\\n        for(int i = 0; i<grumpy.length; i++){\\n            save+=grumpy[i];\\n            if(i>=minutes){save-=grumpy[i-minutes];}\\n            max = Math.max(max, save);\\n        }\\n        return max + sum;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3970404,
                "title": "fixed-sliding-window-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        max_satisfied = -1\\n        sum1,i = 0 ,0\\n\\n        for k in range(len(grumpy)) :\\n            if grumpy[k] == 0 :\\n                sum1 += customers[k]\\n        \\n        for j in range(len(customers)):\\n            if grumpy[j] == 1 :\\n                sum1 += customers[j]\\n            \\n            if j-i+1 == minutes :\\n                max_satisfied = max(max_satisfied,sum1)\\n                if grumpy[i] == 1 :\\n                    sum1 -= customers[i]\\n                i += 1\\n        return max_satisfied \\n\\n\\n\\n\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution:\\n    def maxSatisfied(self, customers: List[int], grumpy: List[int], minutes: int) -> int:\\n        max_satisfied = -1\\n        sum1,i = 0 ,0\\n\\n        for k in range(len(grumpy)) :\\n            if grumpy[k] == 0 :\\n                sum1 += customers[k]\\n        \\n        for j in range(len(customers)):\\n            if grumpy[j] == 1 :\\n                sum1 += customers[j]\\n            \\n            if j-i+1 == minutes :\\n                max_satisfied = max(max_satisfied,sum1)\\n                if grumpy[i] == 1 :\\n                    sum1 -= customers[i]\\n                i += 1\\n        return max_satisfied \\n\\n\\n\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3959019,
                "title": "sliding-window-approach-detailed-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nFirst we need to identify the duration in which most of the customers are unsatisfied, then we can use that range of minutes to maximise the no of satisfied customers.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. storing the no of customers that goes unsatisfied when the owner is grumpy\\n2. using sliding window of size minutes (k) to find the range(rx, ry) where maximum customers are unsatisfied so that we can use secret technique during that time\\n3. finally adding the number of satisfied customers for final ans\\n\\n# Complexity\\n- Time complexity: O(N)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(N)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int rx = 0, ry = 0;\\n        int n = customers.size();\\n        vector<int> unsatisfied(n);\\n        // storing the no of customers that goes unsatisfied when the owner is grumpy\\n        for(int i = 0 ;i < n ; i++){\\n            unsatisfied[i] = customers[i]*grumpy[i];\\n        }\\n\\n        // using sliding window of size minutes (k) to find the range (rx,ry) where maximum\\n        // customers are unsatisfied so that we can use secret technique during that time\\n        int maxSum = INT_MIN;\\n        int sum = 0;\\n        int i = 0 , j = 0; \\n\\n        while(j<n ){\\n            sum += unsatisfied[j];\\n            if(j-i+1 < k)j++;\\n            else if(j - i + 1 == k){\\n                if(sum > maxSum){\\n                    maxSum = sum;\\n                    rx = i;\\n                    ry = j;\\n                }\\n                sum -= unsatisfied[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n        // finding the number of satisfied customers\\n        int ans = 0;\\n        for(int i = 0 ; i< n ; i++){\\n            if(i >= rx && i <= ry){\\n                ans += customers[i];\\n            }else{\\n            if(grumpy[i] == 0) ans += customers[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Array",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int k) {\\n        int rx = 0, ry = 0;\\n        int n = customers.size();\\n        vector<int> unsatisfied(n);\\n        // storing the no of customers that goes unsatisfied when the owner is grumpy\\n        for(int i = 0 ;i < n ; i++){\\n            unsatisfied[i] = customers[i]*grumpy[i];\\n        }\\n\\n        // using sliding window of size minutes (k) to find the range (rx,ry) where maximum\\n        // customers are unsatisfied so that we can use secret technique during that time\\n        int maxSum = INT_MIN;\\n        int sum = 0;\\n        int i = 0 , j = 0; \\n\\n        while(j<n ){\\n            sum += unsatisfied[j];\\n            if(j-i+1 < k)j++;\\n            else if(j - i + 1 == k){\\n                if(sum > maxSum){\\n                    maxSum = sum;\\n                    rx = i;\\n                    ry = j;\\n                }\\n                sum -= unsatisfied[i];\\n                i++;\\n                j++;\\n            }\\n        }\\n\\n        // finding the number of satisfied customers\\n        int ans = 0;\\n        for(int i = 0 ; i< n ; i++){\\n            if(i >= rx && i <= ry){\\n                ans += customers[i];\\n            }else{\\n            if(grumpy[i] == 0) ans += customers[i];\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3943962,
                "title": "c-sliding-window",
                "content": "\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int k) {\\n        int n = c.size();\\n        int sum = 0;\\n        int maxS = 0;\\n        for(int i=k;i<n;i++)\\n        sum+=(g[i]==0)?c[i]:0;\\n        int tmps = 0;\\n        for(int i=0;i<k;i++)\\n        tmps+=c[i];\\n        maxS = sum+tmps;\\n        int p1 = 0,p2 = k;\\n        while(p2<n)\\n        {\\n            tmps-=c[p1];\\n            tmps+=c[p2];\\n            if(g[p1]==0)\\n            sum+=c[p1];\\n            if(g[p2]==0)\\n            sum-=c[p2];\\n            maxS = max(maxS,tmps+sum);\\n            p1++;\\n            p2++;\\n        }\\n        return maxS;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& c, vector<int>& g, int k) {\\n        int n = c.size();\\n        int sum = 0;\\n        int maxS = 0;\\n        for(int i=k;i<n;i++)\\n        sum+=(g[i]==0)?c[i]:0;\\n        int tmps = 0;\\n        for(int i=0;i<k;i++)\\n        tmps+=c[i];\\n        maxS = sum+tmps;\\n        int p1 = 0,p2 = k;\\n        while(p2<n)\\n        {\\n            tmps-=c[p1];\\n            tmps+=c[p2];\\n            if(g[p1]==0)\\n            sum+=c[p1];\\n            if(g[p2]==0)\\n            sum-=c[p2];\\n            maxS = max(maxS,tmps+sum);\\n            p1++;\\n            p2++;\\n        }\\n        return maxS;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3941698,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxSatisfied(int[] cus, int[] gru, int k) {\\n        int res[] = new int[cus.length];\\n        int max = 0, sum = 0;\\n        for(int i = 0 ; i < cus.length ;i++){\\n            if(gru[i] == 1){\\n                res[i] = cus[i];\\n            }else{\\n                sum += cus[i];\\n            }\\n        }\\n        int s = 0;\\n        for(int i = 0 ; i < k; i++){\\n            s += res[i];\\n        }\\n        max = s;\\n        for(int i = k ; i < cus.length ;i++){\\n            s = s + res[i] - res[i - k];\\n            max = Math.max(s, max);\\n        }\\n        return sum + max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Sliding Window"
                ],
                "code": "```\\nclass Solution {\\n    public int maxSatisfied(int[] cus, int[] gru, int k) {\\n        int res[] = new int[cus.length];\\n        int max = 0, sum = 0;\\n        for(int i = 0 ; i < cus.length ;i++){\\n            if(gru[i] == 1){\\n                res[i] = cus[i];\\n            }else{\\n                sum += cus[i];\\n            }\\n        }\\n        int s = 0;\\n        for(int i = 0 ; i < k; i++){\\n            s += res[i];\\n        }\\n        max = s;\\n        for(int i = k ; i < cus.length ;i++){\\n            s = s + res[i] - res[i - k];\\n            max = Math.max(s, max);\\n        }\\n        return sum + max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3933399,
                "title": "elixir-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity: 1108ms\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: 69.8MB\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ndefmodule Solution do\\n  @spec max_satisfied(customers :: [integer], grumpy :: [integer], minutes :: integer) :: integer\\n  def max_satisfied(customers, grumpy, minutes) do\\n    {total, grumpy} = get_new_grumpy(customers, grumpy, 0, [])\\n    {_, _, m_customers} =\\n      Enum.reduce(grumpy, {0, 0, 0}, fn grumpy_i, {i, save, m_customers} ->\\n        if i < minutes do\\n          m_customers = m_customers + grumpy_i\\n          {i + 1, m_customers, m_customers}\\n        else\\n          save = save + grumpy_i - Enum.at(grumpy, i - minutes)\\n          if save > m_customers do\\n            {i + 1, save, save}\\n          else\\n            {i + 1, save, m_customers}\\n          end\\n        end\\n      end)\\n    total + m_customers\\n  end\\n\\n  @spec get_new_grumpy(customers :: [integer], grumpy :: [integer], total :: integer, n_grumpy :: [integer]) :: {integer, [integer]}\\n  def get_new_grumpy([], [], total, n_grumpy) do\\n    {total, n_grumpy}\\n  end\\n\\n  def get_new_grumpy([cust_hd | cust_tl], [grum_hd | grum_tl], total, n_grumpy) do\\n    get_new_grumpy(cust_tl, grum_tl, total + cust_hd*(1 - grum_hd), [cust_hd*grum_hd | n_grumpy])\\n  end\\nend\\n```",
                "solutionTags": [
                    "Elixir"
                ],
                "code": "```\\ndefmodule Solution do\\n  @spec max_satisfied(customers :: [integer], grumpy :: [integer], minutes :: integer) :: integer\\n  def max_satisfied(customers, grumpy, minutes) do\\n    {total, grumpy} = get_new_grumpy(customers, grumpy, 0, [])\\n    {_, _, m_customers} =\\n      Enum.reduce(grumpy, {0, 0, 0}, fn grumpy_i, {i, save, m_customers} ->\\n        if i < minutes do\\n          m_customers = m_customers + grumpy_i\\n          {i + 1, m_customers, m_customers}\\n        else\\n          save = save + grumpy_i - Enum.at(grumpy, i - minutes)\\n          if save > m_customers do\\n            {i + 1, save, save}\\n          else\\n            {i + 1, save, m_customers}\\n          end\\n        end\\n      end)\\n    total + m_customers\\n  end\\n\\n  @spec get_new_grumpy(customers :: [integer], grumpy :: [integer], total :: integer, n_grumpy :: [integer]) :: {integer, [integer]}\\n  def get_new_grumpy([], [], total, n_grumpy) do\\n    {total, n_grumpy}\\n  end\\n\\n  def get_new_grumpy([cust_hd | cust_tl], [grum_hd | grum_tl], total, n_grumpy) do\\n    get_new_grumpy(cust_tl, grum_tl, total + cust_hd*(1 - grum_hd), [cust_hd*grum_hd | n_grumpy])\\n  end\\nend\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 3931448,
                "title": "easy-approach-code-in-c",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int k = minutes;\\n        vector<int>& arr = customers;\\n        int n = arr.size();\\n        int prevLoss = 0;\\n        for(int i=0;i<k;i++){\\n           if(grumpy[i]==1) prevLoss += arr[i];\\n        }\\n        int maxLoss = prevLoss; \\n        int maxIdx = 0;\\n        int i = 1;\\n        int j = k;\\n        while(j<n){\\n            int currLoss = prevLoss;\\n            if(grumpy[j]==1) currLoss += arr[j];\\n            if(grumpy[i-1]==1) currLoss -= arr[i-1];\\n            if(maxLoss<currLoss){\\n                maxLoss = currLoss;\\n                maxIdx = i;\\n            }\\n            prevLoss = currLoss;\\n            i++;\\n            j++;\\n        }\\n            // filling grumpy array - - >\\n            for(int i=maxIdx;i<k+maxIdx;i++){\\n                grumpy[i] = 0;\\n            }\\n            // sum of satisfaction - - - >\\n            int sum = 0;\\n            for(int i=0;i<n;i++){\\n                if(grumpy[i]==0)sum += arr[i];\\n            }\\n            return sum;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxSatisfied(vector<int>& customers, vector<int>& grumpy, int minutes) {\\n        int k = minutes;\\n        vector<int>& arr = customers;\\n        int n = arr.size();\\n        int prevLoss = 0;\\n        for(int i=0;i<k;i++){\\n           if(grumpy[i]==1) prevLoss += arr[i];\\n        }\\n        int maxLoss = prevLoss; \\n        int maxIdx = 0;\\n        int i = 1;\\n        int j = k;\\n        while(j<n){\\n            int currLoss = prevLoss;\\n            if(grumpy[j]==1) currLoss += arr[j];\\n            if(grumpy[i-1]==1) currLoss -= arr[i-1];\\n            if(maxLoss<currLoss){\\n                maxLoss = currLoss;\\n                maxIdx = i;\\n            }\\n            prevLoss = currLoss;\\n            i++;\\n            j++;\\n        }\\n            // filling grumpy array - - >\\n            for(int i=maxIdx;i<k+maxIdx;i++){\\n                grumpy[i] = 0;\\n            }\\n            // sum of satisfaction - - - >\\n            int sum = 0;\\n            for(int i=0;i<n;i++){\\n                if(grumpy[i]==0)sum += arr[i];\\n            }\\n            return sum;\\n    }\\n};\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1568581,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1569531,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1575569,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1753827,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1572700,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1569518,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2061988,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2020104,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2015072,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1839589,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1568581,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1569531,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1575569,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1753827,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1572700,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1569518,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2061988,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2020104,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 2015072,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            },
            {
                "id": 1839589,
                "content": [
                    {
                        "username": "kakkarotssj",
                        "content": "customers = [10, 1, 7]\\ngrumpy = [0, 0, 0]\\nminutes = 2\\n\\nFor this case, how is answer 18 and not 11.\\n"
                    },
                    {
                        "username": "YASH-SHARMA19",
                        "content": "bro if grumpy[i]!=1 or it is 0 means seller is not grumpy so the customer will be satisfied and in your case all grumpy[i]==0 so all the customers are satisfied resulting 10+1+7 = 18."
                    },
                    {
                        "username": "arockia_raj",
                        "content": "if 0 means the book store owner is not at all grumpy.  so we need to just add all .. Here the 2 mints is not needed because he is already not grumpy. This is a different  test case but I think it is valid . "
                    },
                    {
                        "username": "rishabhpathak09",
                        "content": "understand that grumpy[i] = 0 when he is grumpy\ngrumpy[i] = 1 means he  is not  grumpy"
                    },
                    {
                        "username": "zliu346",
                        "content": "![image](https://assets.leetcode.com/users/zliu346/image_1560162827.png)\\n"
                    },
                    {
                        "username": "sahil_6789",
                        "content": "Bro he is grumpy if value is 1 and for zero he is not you considered opposite i think"
                    },
                    {
                        "username": "bansaldeepak013",
                        "content": "[10,1,7]\\n[0,0,0]\\n2\\n\\n\\nthe secret power can be used for consecutive 2 minutes\\nso max customers which can be satisfied should be  10+1 = 1\\nbut this test case answers 18. \\nI am not able to understand this part \\n\\naccording to me, if  minutes values would have been 3, then the test case answer would have been 18.\\nAny help would be appreciated"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "r4ge_101",
                        "content": "Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\nOutput: 16\nExplanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. The maximum number of customers that can be satisfied \n= 1 + 1 + 1 + 1 + 7 + 5 = 16.\n\nHow is the output 16 if we keep the owner NOT grumpy for the last 3 mins.\nshouldn't it be 1+1+7+5 =14 ??\n"
                    },
                    {
                        "username": "suren_yeager",
                        "content": "Description for this testcase is wrong ig. The second last 3 minutes is the time when the shopkeeper is not grumpy.\\n\\nHence , 2+1+1+7+5 would give 16 satisfied customers and the grumpy array (altered) is [0,1,0,1,1,1,1,1].\\n\\nHope this helps !!"
                    },
                    {
                        "username": "zhongzh13",
                        "content": "Hello everyone, I think I\\'ve met some problem so I\\'m asking for your help, Please feel free to leave any comment\\n\\nThere is a test case: \\nInput:\\n[10,1,7]\\n[0,0,0]\\n2\\nOutput:\\n11\\nExpected:\\n18\\n\\nBut how can the bookstore owner satisfy all the 18 customers when X is only 2?"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 + 1 =11"
                    },
                    {
                        "username": "sunset_fish",
                        "content": "What do you thing about this test case:\\n\\n[10,1,7]\\n[0,0,0]\\n2\\n\\nHow can 18 be the expected answer for this case, I\\'m getting 11 as answer."
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "your grumpy array is [0,0,0] means he is not grumpy at any minute. Thus the whole array [10,1,7] can be taken into account. If the grumpy array was [0,0,1], then the answer would be 10 +1 =11"
                    },
                    {
                        "username": "dhruv_bajpai29",
                        "content": "The question is fairly easy."
                    },
                    {
                        "username": "Cocamo1337",
                        "content": "Think about splitting up the customers arr into arrays of size minutes. The potential value to be gained by using the \"secret technique\" during that range is equivalent to the sum of customers that would be at the shop on grumpy minutes, within that minutes timeframe. We would only count the customers on the grumpy minutes because the customers on non-grumpy minutes are already guaranteed to be satisfied, so the satisfied customers that we can gain exist within the ones on grumpy minutes.\\n\\nAfter you\\'ve calculated the numbers of unsatisfied customers for each contiguous subarray of size minutes, the answer is just the largest value of unsatisfied customers plus the total sum of customers in the store on non-grumpy minutes.\\n\\nExample:\\n[1, 2, 1, 5, 3, 2, 1] <- Customers\\n[1, 0, 1, 0, 1, 0, 1] <- Grumpy\\n2 <- Minutes\\nFrom left to right, our unsatisfied customers subarr valuess would be:\\n0 to 1 = 1,\\n1 to 2 = 1,\\n2 to 3 = 1, \\n3 to 4 = 3,\\n4 to 5 = 3, \\n5 to 6 = 1\\n\\nAs you can see, the max amount to gain is 3. So our answer would be 3 plus the amount of customers on non-grumpy days:\\n2 + 5 + 2 = 9.\\n9 + 3 = 12 - the maximum satisfied customers.\\n\\n"
                    },
                    {
                        "username": "vian_thaku_r",
                        "content": "for exam ple no. 1 if we do not keep him grumpy for last 3 minutes than the answer will be (1+2+1+1+7+5)=17 \\nwhy it is giving 16 i  guess its an error  @"
                    },
                    {
                        "username": "abhinvsinh",
                        "content": "16 is the expected answer for example 1, you are counting the 2 which is incorrect.\n[1,0,1,2,1,1,7,5] - Customer array\n[0,1,0,1,0,1,0,1] - grumpy Array\n[0,1,0,1,0,0,0,0] - Changing grumpy array at 6th position which changes the subsequent value at 8th position as well \n as the non-grumpy technique last for the last 3 minutes so (6-7-8) positions become non grumpy.\n[1,   1,   1 1 7 5] - 1+1+1+1+7+5=16   "
                    },
                    {
                        "username": "jeromw07",
                        "content": "customers =\\n[4,10,10]\\ngrumpy =\\n[1,1,0]\\nminutes =\\n2    \\n\\nWhat is the correct answer ?"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001) class Solution {\\n    public int maxSatisfied(int[] customers, int[] grumpy, int minutes) {\\n        \\n int maxIndex=0;\\n\\t\\t int maxCustomers=0;\\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\tint tempi=i;\\n\\t\\t\\tint maxCustomersTemp=0;\\n\\t\\t\\t for(int j=1;j<=minutes;j++)\\n\\t\\t\\t {\\n\\t\\t\\t\\tif(tempi<customers.length)\\n\\t\\t\\t\\t{\\n\\t\\t\\t\\t maxCustomersTemp=maxCustomersTemp+customers[tempi];\\n\\t\\t\\t\\t tempi++;\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse\\n\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t }\\n\\t\\t\\t\\t \\n\\t\\t\\t if(maxCustomersTemp>maxCustomers)\\n\\t\\t\\t {\\n\\t\\t\\t\\t maxCustomers=maxCustomersTemp;\\n\\t\\t\\t\\t maxIndex=tempi-minutes;\\n\\t\\t\\t }\\n\\t\\t }\\n\\t\\t\\n\\t//\\tSystem.out.println(maxCustomers);\\n\\t\\t//System.out.println(maxIndex);\\n\\t\\t \\n\\t\\t \\n\\t\\t for(int i=0;i<customers.length;i++)\\n\\t\\t {\\n\\t\\t\\t if(i!=maxIndex&&grumpy[i]==0&&customers[i]>0)\\n\\t\\t\\t maxCustomers=maxCustomers+customers[i];\\n\\t\\t\\t else if(i==maxIndex)\\n\\t\\t     i=i+minutes-1;\\n\\t\\t }\\n\\t\\t \\n\\t\\treturn(maxCustomers); \\n\\n\\n    }\\n}"
                    },
                    {
                        "username": "jeromw07",
                        "content": "[@pratik16082001](/pratik16082001)  Can you justify the solution with some example ?\\n"
                    },
                    {
                        "username": "pratik16082001",
                        "content": "24 is"
                    }
                ]
            }
        ]
    }
]