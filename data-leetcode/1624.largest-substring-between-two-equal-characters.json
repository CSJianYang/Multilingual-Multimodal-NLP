[
    {
        "title": "Largest Substring Between Two Equal Characters",
        "question_content": "Given a string s, return the length of the longest substring between two equal characters, excluding the two characters. If there is no such substring return -1.\nA substring is a contiguous sequence of characters within a string.\n&nbsp;\nExample 1:\n\nInput: s = \"aa\"\nOutput: 0\nExplanation: The optimal substring here is an empty substring between the two 'a's.\nExample 2:\n\nInput: s = \"abca\"\nOutput: 2\nExplanation: The optimal substring here is \"bc\".\n\nExample 3:\n\nInput: s = \"cbzxy\"\nOutput: -1\nExplanation: There are no characters that appear twice in s.\n\n&nbsp;\nConstraints:\n\n\t1 <= s.length <= 300\n\ts contains only lowercase English letters.",
        "solutions": [
            {
                "id": 899464,
                "title": "java-python-3-one-pass-o-n-11-4-liners-w-brief-explanation-and-analysis",
                "content": "Loop through the input string `s`\\n1. Store the first index of the substring between same characters;\\n2. If current character seen before, compute the length of the sustring between them and update the max length; \\n```java\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] indices = new int[26];\\n        int maxLen = -1;\\n        for (int i = 0; i < s.length(); ++i) {\\n            int idx = s.charAt(i) - \\'a\\';\\n            if (indices[idx] > 0) {\\n                maxLen = Math.max(maxLen, i - indices[idx]);\\n            }else {\\n                indices[idx] = i + 1;\\n            }\\n        }\\n        return maxLen;\\n    }\\n```\\n```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maxLen, indices = -1, {}\\n        for i, c in enumerate(s):\\n            maxLen = max(maxLen, i - indices.setdefault(c, i + 1))\\n        return maxLen        \\n```\\n@StefanPochmann\\'s solution:\\n```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        return max(map(sub, count(), map({}.setdefault, s, count(1))))\\n```\\n**Analysis:**\\n\\nTime: `O(n)`, space: `O(1)`, where `n = s.length()`.",
                "solutionTags": [],
                "code": "```java\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] indices = new int[26];\\n        int maxLen = -1;\\n        for (int i = 0; i < s.length(); ++i) {\\n            int idx = s.charAt(i) - \\'a\\';\\n            if (indices[idx] > 0) {\\n                maxLen = Math.max(maxLen, i - indices[idx]);\\n            }else {\\n                indices[idx] = i + 1;\\n            }\\n        }\\n        return maxLen;\\n    }\\n```\n```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maxLen, indices = -1, {}\\n        for i, c in enumerate(s):\\n            maxLen = max(maxLen, i - indices.setdefault(c, i + 1))\\n        return maxLen        \\n```\n```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        return max(map(sub, count(), map({}.setdefault, s, count(1))))\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 899779,
                "title": "c-minimalizm",
                "content": "```cpp\\nint maxLengthBetweenEqualCharacters(string s) {\\n    int idx[26] = {}, res = -1;\\n    for (auto i = 0; i < s.size(); ++i) {\\n        if (idx[s[i] - \\'a\\'] == 0)\\n            idx[s[i] - \\'a\\'] = i + 1;\\n        res = max(res, i - idx[s[i] - \\'a\\']);\\n    }\\n    return res;\\n}\\n```",
                "solutionTags": [],
                "code": "```cpp\\nint maxLengthBetweenEqualCharacters(string s) {\\n    int idx[26] = {}, res = -1;\\n    for (auto i = 0; i < s.size(); ++i) {\\n        if (idx[s[i] - \\'a\\'] == 0)\\n            idx[s[i] - \\'a\\'] = i + 1;\\n        res = max(res, i - idx[s[i] - \\'a\\']);\\n    }\\n    return res;\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 905287,
                "title": "1624-python-3-fast-functional-one-liner-explained",
                "content": "For each character `ch` that occurs in `s` one or more times the length of the longest contained substring equals to `s.rfind(ch) - s.find(ch) -1`. If a character occurs only once at position `x` this expression equals to ` x - x - 1 = -1`. The solution is largest of all longest contained substring lengths for the elements of `set(s)`:\\n```\\nclass SolutionI:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        return max(s.rfind(ch) - s.find(ch) - 1 for ch in set(s))\\n```\\n\\nTime complexity: **O(n)**; Space complexity: **O(1)**",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass SolutionI:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        return max(s.rfind(ch) - s.find(ch) - 1 for ch in set(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899573,
                "title": "c-one-pass-map-solution-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        std::unordered_map<char, int> mp; // key: character, value: least index of character in s\\n        int len = -1;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(mp.count(s[i])) len = max(len, i - mp[s[i]] - 1);\\n            else mp[s[i]] = i;\\n        }\\n        return len;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        std::unordered_map<char, int> mp; // key: character, value: least index of character in s\\n        int len = -1;\\n        for(int i = 0; i < s.length(); i++) {\\n            if(mp.count(s[i])) len = max(len, i - mp[s[i]] - 1);\\n            else mp[s[i]] = i;\\n        }\\n        return len;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899540,
                "title": "python3-via-dictionary",
                "content": "Memoize the first occurrence of a character. \\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans = -1\\n        seen = {}\\n        for i, c in enumerate(s): \\n            if c in seen: ans = max(ans, i - seen[c] - 1)\\n            seen.setdefault(c, i)\\n        return ans \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans = -1\\n        seen = {}\\n        for i, c in enumerate(s): \\n            if c in seen: ans = max(ans, i - seen[c] - 1)\\n            seen.setdefault(c, i)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3123638,
                "title": "simple-java-solution-hashmap-o-n-time-with-explanation",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n- Store each char along with their position in a HashMap.\\n- If a char occurs again, calc their index diffrences.\\n- return the max difference.\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(min(n, k))\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        HashMap<Character,Integer> hm=new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(hm.containsKey(c))\\n                res=Math.max(res,i-hm.get(c)-1);\\n            else\\n                hm.put(c,i);\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        HashMap<Character,Integer> hm=new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(hm.containsKey(c))\\n                res=Math.max(res,i-hm.get(c)-1);\\n            else\\n                hm.put(c,i);\\n        }\\n\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899503,
                "title": "one-pass-hashmap-solution-and-o-1-space-solution",
                "content": "We can use a HashMap (or an array, but it is the same idea behind) to store the **first time** occurence index. \\nIf we meet the same character again, we can calculate the length and compare to the final result. That is it! :)\\n\\n**Solution 1: *O(n)* time and *O(n)* space complexity**\\n```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res = -1;\\n        char[] ch = s.toCharArray();\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for (int i=0 ; i<s.length(); i++) {\\n            if (map.containsKey(ch[i])) {\\n                res = Math.max(res, i - 1 - map.get(ch[i]));\\n            } else {\\n                map.put(ch[i], i);\\n            }\\n        }\\n        return res;\\n    }\\n```\\n\\n**Solution 2 (inspired by pgmreddy): O(n^2) time and *O(1)* space complexity**\\n```\\n    public int maxLengthBetweenEqualCharacters(String s) {        \\n        int res = -1;   \\n        int len = s.length();\\n        for (int i=0; i<len; i++){\\n            char c = s.charAt(i);\\n            int firstPos = s.indexOf(c); // The time complexity of indexOf() is O(n)!\\n            int lastPos = s.lastIndexOf(c); // The time complexity of lastIndexOf() is O(n)!\\n            res = Math.max(res, lastPos - firstPos - 1);\\n        }   \\n        return res; \\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res = -1;\\n        char[] ch = s.toCharArray();\\n        HashMap<Character, Integer> map = new HashMap<>();\\n        for (int i=0 ; i<s.length(); i++) {\\n            if (map.containsKey(ch[i])) {\\n                res = Math.max(res, i - 1 - map.get(ch[i]));\\n            } else {\\n                map.put(ch[i], i);\\n            }\\n        }\\n        return res;\\n    }\\n```\n```\\n    public int maxLengthBetweenEqualCharacters(String s) {        \\n        int res = -1;   \\n        int len = s.length();\\n        for (int i=0; i<len; i++){\\n            char c = s.charAt(i);\\n            int firstPos = s.indexOf(c); // The time complexity of indexOf() is O(n)!\\n            int lastPos = s.lastIndexOf(c); // The time complexity of lastIndexOf() is O(n)!\\n            res = Math.max(res, lastPos - firstPos - 1);\\n        }   \\n        return res; \\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1173173,
                "title": "python3-simple-and-readable-solution",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans = [-1]\\n        \\n        for i in set(s):\\n            if(s.count(i) >= 2):\\n                ans.append(s.rindex(i) - s.index(i) - 1 )\\n        \\n        return max(ans)\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans = [-1]\\n        \\n        for i in set(s):\\n            if(s.count(i) >= 2):\\n                ans.append(s.rindex(i) - s.index(i) - 1 )\\n        \\n        return max(ans)\\n```",
                "codeTag": "Java"
            },
            {
                "id": 954851,
                "title": "java-faster-solution-0m-100-using-lastindexof",
                "content": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\tint max = -1;\\n\\t\\tfor (int i = 0; i < s.length(); i++) {\\n\\t\\t\\tint lastIndex= s.lastIndexOf(s.charAt(i));\\n\\t\\t\\tif(lastIndex != i) \\n\\t\\t\\t\\tmax = Math.max(max, lastIndex - (i+1));\\n\\t\\t}\\n\\t\\treturn max;\\n    }\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\tint max = -1;\\n\\t\\tfor (int i = 0; i < s.length(); i++) {\\n\\t\\t\\tint lastIndex= s.lastIndexOf(s.charAt(i));\\n\\t\\t\\tif(lastIndex != i) \\n\\t\\t\\t\\tmax = Math.max(max, lastIndex - (i+1));\\n\\t\\t}\\n\\t\\treturn max;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899732,
                "title": "python3-one-pass-o-n-solution-large-substring-between-two-equal-characters",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        last, ans = {}, -1 \\n        for i, c in enumerate(s):\\n            if c not in last:\\n                last[c] = i\\n            else:\\n                ans = max(ans, i - last[c] - 1)\\n        return ans \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        last, ans = {}, -1 \\n        for i, c in enumerate(s):\\n            if c not in last:\\n                last[c] = i\\n            else:\\n                ans = max(ans, i - last[c] - 1)\\n        return ans \\n```",
                "codeTag": "Java"
            },
            {
                "id": 899484,
                "title": "java-map-solution",
                "content": "```java\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int ans = -1;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch  = s.charAt(i);\\n            if (map.containsKey(ch)) {\\n                ans = Math.max(ans, i - 1 - map.get(ch));\\n            }\\n            else {\\n                map.put(ch, i);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int ans = -1;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch  = s.charAt(i);\\n            if (map.containsKey(ch)) {\\n                ans = Math.max(ans, i - 1 - map.get(ch));\\n            }\\n            else {\\n                map.put(ch, i);\\n            }\\n        }\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899458,
                "title": "python-easy",
                "content": "```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        lastSeen = dict()\\n        maxDist = -1\\n        for index, char in enumerate(s):\\n            if char not in lastSeen:\\n                lastSeen[char] = index\\n            else:\\n                maxDist = max(index - lastSeen[char], maxDist)\\n                \\n        return maxDist - 1 if maxDist > -1 else -1\\n        \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        lastSeen = dict()\\n        maxDist = -1\\n        for index, char in enumerate(s):\\n            if char not in lastSeen:\\n                lastSeen[char] = index\\n            else:\\n                maxDist = max(index - lastSeen[char], maxDist)\\n                \\n        return maxDist - 1 if maxDist > -1 else -1\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 2424643,
                "title": "yet-another-python-solution-o-n",
                "content": "1. Create a map to keep the first occurrence of the character in the string ```s```.\\n2. If the next character is already on the map - we update the max distance.\\n\\nComplexity O(N) - one loop\\nMemory: at first sight, it is also O(N). But if the number of characters is limited by the English alphabet, then to store the map we need only O(26) which is O(1).\\n\\n*Please upvote if you like for motivation and karma :)*\\n\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        \\n        charToID = dict()\\n        maxDist = -1\\n        \\n        for i, ch in enumerate(s):\\n            if ch not in charToID:\\n                charToID[ch] = i\\n            else:\\n                maxDist = max(maxDist, i - charToID[ch] -1)\\n        \\n        return maxDist\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```s```\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        \\n        charToID = dict()\\n        maxDist = -1\\n        \\n        for i, ch in enumerate(s):\\n            if ch not in charToID:\\n                charToID[ch] = i\\n            else:\\n                maxDist = max(maxDist, i - charToID[ch] -1)\\n        \\n        return maxDist\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1389937,
                "title": "c-simple-and-short-one-pass-solution-0ms-faster-than-100",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> v(26, -1);\\n        int maxi = -1;\\n        \\n        for (int i = 0; i < s.size(); i++) {\\n            if (v[s[i] - \\'a\\'] == -1) v[s[i] - \\'a\\'] = i;\\n            else maxi = max(maxi, abs(v[s[i] - \\'a\\'] - i) - 1);      \\n        }\\n        \\n        return maxi;\\n    }\\n};\\n```\\n**Like it? please upvote!**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> v(26, -1);\\n        int maxi = -1;\\n        \\n        for (int i = 0; i < s.size(); i++) {\\n            if (v[s[i] - \\'a\\'] == -1) v[s[i] - \\'a\\'] = i;\\n            else maxi = max(maxi, abs(v[s[i] - \\'a\\'] - i) - 1);      \\n        }\\n        \\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1389939,
                "title": "python-solutiun-via-dictionary-faster-than-100",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        dict = {}\\n        result = -1\\n        for i, c in enumerate(s):\\n            if c in dict:\\n                result = max(result, i - dict[c] - 1)\\n            else:\\n                dict[c] = i\\n        return result\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        dict = {}\\n        result = -1\\n        for i, c in enumerate(s):\\n            if c in dict:\\n                result = max(result, i - dict[c] - 1)\\n            else:\\n                dict[c] = i\\n        return result\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1144788,
                "title": "c-clean-solutions-and-comparison-between-o-26-n-time-o-1-space-vs-o-n-time-o-26-space",
                "content": "Hey, well the goal is to go by the letter and find it\\'s end points. We can do that using two pointers: O(26*N) time || O(1) space \\n\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ret = -1, l, r;\\n        for (int i = \\'a\\'; i <= \\'z\\'; i++) {\\n            l = 0, r = s.size() - 1;\\n            while (l < r && s[l] != i) l++;\\n            while (l < r && s[r] != i) r--;\\n            ret = max(ret, r - l - 1);\\n        }\\n        return ret;\\n    }\\n};\\n```\\nThe solution above is good for memory, but time is probably more important (most of the time) than extra 26 memory.\\n\\nThe best solution (timewise) is to remember first encounter of a letter and use it to calculate our answer: O(N) time || O(26) space\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int m[26] = {};\\n        int ret = -1;\\n        for (int i = 0; i < s.size(); i++) {\\n            int j = m[s[i] - \\'a\\'];\\n            if (j != 0)\\n                ret = max(ret, i - j);\\n            else \\n                m[s[i] - \\'a\\'] = i + 1;\\n        }\\n        return ret;\\n    }\\n};\\n```\\nOr the same but more unreadable: O(N) time || O(123) space\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int m[123] = {}, ret = -1;\\n        for (int i = 0; i < s.size(); ret = max(ret, i - m[s[i++]])) \\n            if (m[s[i]] == 0)\\n                m[s[i]] = i + 1;\\n        return ret;\\n    }\\n};\\n```\\nNote: m[123] is such a nice array, it is easy to type 123 and you don\\'t have to substact anything from letters as it includes letters up to \\'z\\' (Also includes uppercase letters, of course, but useless for this problem).",
                "solutionTags": [
                    "C",
                    "Two Pointers"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ret = -1, l, r;\\n        for (int i = \\'a\\'; i <= \\'z\\'; i++) {\\n            l = 0, r = s.size() - 1;\\n            while (l < r && s[l] != i) l++;\\n            while (l < r && s[r] != i) r--;\\n            ret = max(ret, r - l - 1);\\n        }\\n        return ret;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int m[26] = {};\\n        int ret = -1;\\n        for (int i = 0; i < s.size(); i++) {\\n            int j = m[s[i] - \\'a\\'];\\n            if (j != 0)\\n                ret = max(ret, i - j);\\n            else \\n                m[s[i] - \\'a\\'] = i + 1;\\n        }\\n        return ret;\\n    }\\n};\\n```\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int m[123] = {}, ret = -1;\\n        for (int i = 0; i < s.size(); ret = max(ret, i - m[s[i++]])) \\n            if (m[s[i]] == 0)\\n                m[s[i]] = i + 1;\\n        return ret;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 900314,
                "title": "java-easy-3-lines-just-one-loop-using-indexof-lastindexof-100",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) { \\n    int max_len = -1;          \\n    for ( char ch : s.toCharArray()){\\n        max_len = Math.max(max_len, s.lastIndexOf(ch) - s.indexOf(ch)-1); // to exclude the 2 chars .   \\n    }   \\n    return(max_len); \\n }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) { \\n    int max_len = -1;          \\n    for ( char ch : s.toCharArray()){\\n        max_len = Math.max(max_len, s.lastIndexOf(ch) - s.indexOf(ch)-1); // to exclude the 2 chars .   \\n    }",
                "codeTag": "Java"
            },
            {
                "id": 899501,
                "title": "java-brute-force-solution",
                "content": "Java Easy Solution\\n``` \\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int count = 0;\\n    \\t int ans = -1;\\n    \\t for (int i = 0; i < s.length()-1; i++) {\\n\\t\\t\\tfor (int j = i+1; j < s.length(); j++) {\\n\\t\\t\\t\\tif(s.charAt(i)==s.charAt(j)) {\\n\\t\\t\\t\\t\\tcount = j-i-1;\\n\\t\\t\\t\\t\\tif(ans<count) {\\n\\t\\t\\t\\t\\t\\tans = count;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n    }\\n\\t```\\n\\t",
                "solutionTags": [
                    "Java"
                ],
                "code": "``` \\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int count = 0;\\n    \\t int ans = -1;\\n    \\t for (int i = 0; i < s.length()-1; i++) {\\n\\t\\t\\tfor (int j = i+1; j < s.length(); j++) {\\n\\t\\t\\t\\tif(s.charAt(i)==s.charAt(j)) {\\n\\t\\t\\t\\t\\tcount = j-i-1;\\n\\t\\t\\t\\t\\tif(ans<count) {\\n\\t\\t\\t\\t\\t\\tans = count;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn ans;\\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 3033179,
                "title": "naive-brute-force-c-approach",
                "content": "# Complexity\\n- Time complexity:O(n^2)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ans=-1,x;\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                if(s[i]==s[j])\\n                    x=j-i-1;\\n                    ans=max(ans,x);\\n                    }\\n                }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ans=-1,x;\\n        for(int i=0;i<s.length();i++){\\n            for(int j=i+1;j<s.length();j++){\\n                if(s[i]==s[j])\\n                    x=j-i-1;\\n                    ans=max(ans,x);\\n                    }\\n                }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2776961,
                "title": "simple-python-string-matching-easy",
                "content": "Keep track of the indices of the characters in hashmap and do a difference of the maximum\\n\\n* PLEASE UPVOTE IF THIS METHOD IS USEFUL !\\n\\n# Code\\n```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        dic = dict()\\n        maxer=-1\\n        for i,val in enumerate(s):\\n            if val in dic:\\n                diff=i-dic[val]-1\\n                maxer = max(maxer,diff)\\n            else:\\n                dic[val]=i\\n        return maxer\\n```",
                "solutionTags": [
                    "Python",
                    "String",
                    "String Matching"
                ],
                "code": "```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        dic = dict()\\n        maxer=-1\\n        for i,val in enumerate(s):\\n            if val in dic:\\n                diff=i-dic[val]-1\\n                maxer = max(maxer,diff)\\n            else:\\n                dic[val]=i\\n        return maxer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1893535,
                "title": "100-faster-hashing-unordered-map",
                "content": "100% FASTER || O(N) SOLUTION\\nSimply storing index of first occrance and then maintining a vector containig all substring ending with that char. At last we find max length substring\\n\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char,pair<int,int>>mp;    // idx, count\\n        int i, j=0 , n=s.size();\\n        vector<string> ans;       // substrings\\n        for(i=0 ; i<n ; i++ ){\\n            if(mp.find(s[i])==mp.end()){\\n                mp[s[i]]={i,1};\\n            }\\n            else {\\n                j=mp[s[i]].first;\\n                ans.push_back(s.substr(j+1,i-j-1));\\n            }\\n        }\\n        if(ans.size()==0) return -1;\\n        int sz=INT_MIN;\\n        for( auto ss: ans){\\n            int t= ss.size();\\n            sz=max(sz,t);\\n        }\\n        return sz;\\n    }",
                "solutionTags": [],
                "code": "100% FASTER || O(N) SOLUTION\\nSimply storing index of first occrance and then maintining a vector containig all substring ending with that char. At last we find max length substring\\n\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char,pair<int,int>>mp;    // idx, count\\n        int i, j=0 , n=s.size();\\n        vector<string> ans;       // substrings\\n        for(i=0 ; i<n ; i++ ){\\n            if(mp.find(s[i])==mp.end()){\\n                mp[s[i]]={i,1};\\n            }\\n            else {\\n                j=mp[s[i]].first;\\n                ans.push_back(s.substr(j+1,i-j-1));\\n            }\\n        }\\n        if(ans.size()==0) return -1;\\n        int sz=INT_MIN;\\n        for( auto ss: ans){\\n            int t= ss.size();\\n            sz=max(sz,t);\\n        }\\n        return sz;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 1263585,
                "title": "java-o-n-time-and-o-1-space",
                "content": "```class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int maxLength = -1;\\n        int[] indexStore = new int[26]; // Array with constant length of 26\\n        Arrays.fill(indexStore, -1); //fill array with -1 for all not found chars\\n        \\n        for(int i = 0; i < s.length(); i++ ) {\\n            if(indexStore[s.charAt(i) - \\'a\\'] != -1) { // check if char was previously found\\n                int length = i - indexStore[s.charAt(i) - \\'a\\'] - 1;\\n                maxLength = Math.max(maxLength, length);\\n            } else {\\n                indexStore[s.charAt(i) - \\'a\\'] = i; //put index of char replacing -1\\n            }\\n        }\\n        \\n        return maxLength;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int maxLength = -1;\\n        int[] indexStore = new int[26]; // Array with constant length of 26\\n        Arrays.fill(indexStore, -1); //fill array with -1 for all not found chars\\n        \\n        for(int i = 0; i < s.length(); i++ ) {\\n            if(indexStore[s.charAt(i) - \\'a\\'] != -1) { // check if char was previously found\\n                int length = i - indexStore[s.charAt(i) - \\'a\\'] - 1;\\n                maxLength = Math.max(maxLength, length);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1185385,
                "title": "js-easy-to-understand-for-beginners-as-well",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    \\n    const map = new Map();\\n    let max=-1;\\n    for(let i=0;i<s.length;i++){\\n\\n        if(map.has(s[i])){\\n            max=Math.max(max,i-(map.get(s[i])+1))\\n        }else{\\n            map.set(s[i],i)    \\n        }\\n        \\n    }\\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    \\n    const map = new Map();\\n    let max=-1;\\n    for(let i=0;i<s.length;i++){\\n\\n        if(map.has(s[i])){\\n            max=Math.max(max,i-(map.get(s[i])+1))\\n        }else{\\n            map.set(s[i],i)    \\n        }\\n        \\n    }\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 902667,
                "title": "php-one-pass-solution-o-n-0ms-faster-than-100-00",
                "content": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function maxLengthBetweenEqualCharacters($s) {\\n        $map = [];\\n        $max = -1;\\n\\n        foreach (str_split($s) as $i => $ch)\\n            if (!isset($map[$ch])) {\\n                $map[$ch] = $i;\\n            } elseif ($i - $map[$ch] - 1 > $max) {\\n                $max = $i - $map[$ch] - 1;\\n            }\\n\\n        return $max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "PHP"
                ],
                "code": "```\\nclass Solution {\\n\\n    /**\\n     * @param String $s\\n     * @return Integer\\n     */\\n    function maxLengthBetweenEqualCharacters($s) {\\n        $map = [];\\n        $max = -1;\\n\\n        foreach (str_split($s) as $i => $ch)\\n            if (!isset($map[$ch])) {\\n                $map[$ch] = $i;\\n            } elseif ($i - $map[$ch] - 1 > $max) {\\n                $max = $i - $map[$ch] - 1;\\n            }\\n\\n        return $max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899492,
                "title": "javascript-hashmap",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let map = new Map();//map {char: index}\\n    let maxDist = -1;\\n    for (let i = 0; i < s.length; i++){\\n        let ch = s.charAt(i);\\n        if (!map.has(ch)){\\n            map.set(ch, i);\\n        } else {\\n            let lastIdx = map.get(ch);\\n            let dist = i-lastIdx-1 // excluding duplicate letters\\n            maxDist = Math.max(maxDist, dist);\\n        }\\n    }\\n    return maxDist;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let map = new Map();//map {char: index}\\n    let maxDist = -1;\\n    for (let i = 0; i < s.length; i++){\\n        let ch = s.charAt(i);\\n        if (!map.has(ch)){\\n            map.set(ch, i);\\n        } else {\\n            let lastIdx = map.get(ch);\\n            let dist = i-lastIdx-1 // excluding duplicate letters\\n            maxDist = Math.max(maxDist, dist);\\n        }\\n    }\\n    return maxDist;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968801,
                "title": "easy-to-understand-100-beats-c",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        unordered_map<char,int>mp;\\n        int ans = -1;\\n\\n        for(int i =0;i<s.size();i++){\\n\\n            if(mp.find(s[i])!=mp.end()){\\n                ans = max(ans,i-mp[s[i]]-1);\\n            }\\n            else{\\n                mp[s[i]]=i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        unordered_map<char,int>mp;\\n        int ans = -1;\\n\\n        for(int i =0;i<s.size();i++){\\n\\n            if(mp.find(s[i])!=mp.end()){\\n                ans = max(ans,i-mp[s[i]]-1);\\n            }\\n            else{\\n                mp[s[i]]=i;\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3775215,
                "title": "best-java-solution-in-run-time",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nAs the string can contain only lower case alphabets make an Array of length 26 \\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Run a loop to read char of the string and store index of each alphabet at their first occurance in the Array.\\n2. On second occurance of any char subtract it\\'s index by first index of the same.\\n3. Compare the value with max which has default value -1.\\n4. if the value is greator than max update max value with the same.\\n5. Return max.\\n6. Do Upvote if you got it. Thanks\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(n)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n\\n        int n = s.length();\\n\\n        int arr[] = new int [26];\\n        int max = -1;\\n\\n        for(int i = 0; i < n; i++){\\n            int idx = s.charAt(i) - \\'a\\';\\n            if( arr[idx] > 0){\\n                max = Math.max(max, i - arr[idx]);\\n            }else{\\n                arr[idx] = i + 1;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n\\n        int n = s.length();\\n\\n        int arr[] = new int [26];\\n        int max = -1;\\n\\n        for(int i = 0; i < n; i++){\\n            int idx = s.charAt(i) - \\'a\\';\\n            if( arr[idx] > 0){\\n                max = Math.max(max, i - arr[idx]);\\n            }else{\\n                arr[idx] = i + 1;\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2871327,
                "title": "59ms-runtime-beats-98-direct-solution-beginner-friendly",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = -Infinity\\n    for (let i = 0; i < s.length; i++) {\\n        for (let j = s.length - 1; j > i; j--) {\\n            if (s[i] == s[j]) {\\n                max = Math.max(max, j - i - 1)\\n                break;\\n            }\\n        }\\n    }\\n    if (max == -Infinity) return -1\\n    return max\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = -Infinity\\n    for (let i = 0; i < s.length; i++) {\\n        for (let j = s.length - 1; j > i; j--) {\\n            if (s[i] == s[j]) {\\n                max = Math.max(max, j - i - 1)\\n                break;\\n            }\\n        }\\n    }\\n    if (max == -Infinity) return -1\\n    return max\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2747693,
                "title": "c-easy-short",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n   int maxLengthBetweenEqualCharacters(string s) {\\n    int idx[26] = {}, res = -1;\\n    for (auto i = 0; i < s.size(); ++i) {\\n        if (idx[s[i] - \\'a\\'] == 0)\\n            idx[s[i] - \\'a\\'] = i + 1;\\n        res = max(res, i - idx[s[i] - \\'a\\']);\\n    }\\n    return res;\\n}\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n   int maxLengthBetweenEqualCharacters(string s) {\\n    int idx[26] = {}, res = -1;\\n    for (auto i = 0; i < s.size(); ++i) {\\n        if (idx[s[i] - \\'a\\'] == 0)\\n            idx[s[i] - \\'a\\'] = i + 1;\\n        res = max(res, i - idx[s[i] - \\'a\\']);\\n    }\\n    return res;\\n}\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2505756,
                "title": "o-n-just-by-one-pointer-and-indexof",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int end = s.length()-1;\\n        int res=-1;\\n        while(end>=0){\\n            int a = s.indexOf(s.charAt(end));\\n            if(a!=end)\\n                res = Math.max(res, end-a-1);\\n            end--;\\n        }\\n        return res;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int end = s.length()-1;\\n        int res=-1;\\n        while(end>=0){\\n            int a = s.indexOf(s.charAt(end));\\n            if(a!=end)\\n                res = Math.max(res, end-a-1);\\n            end--;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2462880,
                "title": "simple-approach",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n       int largest= -1;\\n        for(int i=0; i<s.length(); i++){\\n            char current_ch= s.charAt(i);\\n            int lastIndex = s.lastIndexOf(current_ch); // give last index of current_index;\\n            if(lastIndex!=i){\\n                largest=Math.max(largest,lastIndex-i-1);\\n            }\\n        }\\n            \\n        return largest;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n       int largest= -1;\\n        for(int i=0; i<s.length(); i++){\\n            char current_ch= s.charAt(i);\\n            int lastIndex = s.lastIndexOf(current_ch); // give last index of current_index;\\n            if(lastIndex!=i){\\n                largest=Math.max(largest,lastIndex-i-1);\\n            }\\n        }\\n            \\n        return largest;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1854792,
                "title": "java-solution",
                "content": "```java\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        for(int i=97;i<123;i++)\\n        {\\n            max= Math.max(s.lastIndexOf((char)i)-s.indexOf((char)i)-1,max);\\n        }\\n        return max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        for(int i=97;i<123;i++)\\n        {\\n            max= Math.max(s.lastIndexOf((char)i)-s.indexOf((char)i)-1,max);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 1803578,
                "title": "c-0ms-short-concise-solution-constant-space",
                "content": "**Please do upvote if you liked my approach. It is a great motivation to write more such solutions :)**\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n        int hash[26] = {0};\\n        int ans = -1;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(hash[s[i]-\\'a\\'] == 0)\\n                hash[s[i]-\\'a\\'] = i+1;\\n            else\\n                ans = max(ans, i-hash[s[i]-\\'a\\']);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n        int hash[26] = {0};\\n        int ans = -1;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            if(hash[s[i]-\\'a\\'] == 0)\\n                hash[s[i]-\\'a\\'] = i+1;\\n            else\\n                ans = max(ans, i-hash[s[i]-\\'a\\']);\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1685279,
                "title": "stressful",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\tint mx = -1;\\n\\t\\tchar[] arr = s.toCharArray() ;\\n\\t\\tfor(int i=0 ;i<arr.length ;i++) {\\n\\t\\t\\tString str = s.substring(i+1) ;\\n\\t\\t\\tint temp = str.lastIndexOf(s.charAt(i)) ;\\n\\t\\t\\t\\tmx = Math.max(mx ,  temp) ;\\n\\t\\t}\\n\\t\\treturn mx ;\\n    }\\n    \\n}\\n\\n```\\n\\n/*\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\tint max = -1;\\n\\t\\tfor (int i = 0; i < s.length(); i++) {\\n\\t\\t\\tint lastIndex= s.lastIndexOf(s.charAt(i));\\n\\t\\t\\tif(lastIndex != i) \\n\\t\\t\\t\\tmax = Math.max(max, lastIndex - (i+1));\\n\\t\\t}\\n\\t\\treturn max;\\n   }\\n\\n*/",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\tint mx = -1;\\n\\t\\tchar[] arr = s.toCharArray() ;\\n\\t\\tfor(int i=0 ;i<arr.length ;i++) {\\n\\t\\t\\tString str = s.substring(i+1) ;\\n\\t\\t\\tint temp = str.lastIndexOf(s.charAt(i)) ;\\n\\t\\t\\t\\tmx = Math.max(mx ,  temp) ;\\n\\t\\t}\\n\\t\\treturn mx ;\\n    }\\n    \\n}\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1633649,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int min[]=new int[26];\\n        int max[]=new int[26];\\n        for(int i=0;i<s.length();i++) max[s.charAt(i)-97]=i;\\n        for(int i=s.length()-1;i>=0;i--) min[s.charAt(i)-97]=i;\\n        int ans=Integer.MIN_VALUE;\\n        for(int i=0;i<26;i++) ans=Math.max(ans,max[i]-min[i]-1);\\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int min[]=new int[26];\\n        int max[]=new int[26];\\n        for(int i=0;i<s.length();i++) max[s.charAt(i)-97]=i;\\n        for(int i=s.length()-1;i>=0;i--) min[s.charAt(i)-97]=i;\\n        int ans=Integer.MIN_VALUE;\\n        for(int i=0;i<26;i++) ans=Math.max(ans,max[i]-min[i]-1);\\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1319447,
                "title": "c-beginner-friendly-highly-readable-code",
                "content": "**PLZ UPVOTE IF YOU LIKED IT**\\n\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char,int> umap;\\n        int ans=-1;\\n        \\n        for(int i=0;i<s.size();i++){\\n            char c=s[i];\\n            if(umap.find(c)!=umap.end())\\n\\t\\t\\t   ans=max(ans,i-umap[c]-1);\\n            else \\n\\t\\t\\t   umap[c]=i;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char,int> umap;\\n        int ans=-1;\\n        \\n        for(int i=0;i<s.size();i++){\\n            char c=s[i];\\n            if(umap.find(c)!=umap.end())\\n\\t\\t\\t   ans=max(ans,i-umap[c]-1);\\n            else \\n\\t\\t\\t   umap[c]=i;\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1232083,
                "title": "java-2-solution-brute-force-optimized",
                "content": "**Brute Force**\\n```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int max = 0;\\n        boolean flag = false; \\n        for(int i = 0;i<s.length();i++){\\n            int cm = 0;\\n          for(int j = i+1;j<s.length();j++){\\n            if(s.charAt(i)==s.charAt(j)){\\n                 cm = j - i - 1;\\n                 flag = true;\\n            }\\n          }\\n          max = Math.max(max,cm);\\n        }\\n      if(flag == false) return -1;\\n      return max;\\n    }\\n```\\n**Optimized**\\n```\\nclass Solution {\\n    static class Pair{\\n          int fo;  //first occurrence\\n          int lo;  //last occurrence\\n      \\n        public Pair(int fo, int lo){\\n              this.fo = fo;\\n              this.lo = lo;\\n        }\\n    }\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Pair freq[] = new Pair[26];\\n        int max = 0;\\n        boolean flag = false;\\n        for(int i = 0;i<s.length();i++){\\n           char c = s.charAt(i);\\n           if(freq[c-\\'a\\'] != null){\\n             freq[c-\\'a\\'] = new Pair(freq[c-\\'a\\'].fo,i);\\n             flag = true;\\n             int size = freq[c-\\'a\\'].lo - freq[c-\\'a\\'].fo - 1;\\n             max = Math.max(max,size);\\n           }\\n          else{\\n             freq[c-\\'a\\'] = new Pair(i,i);\\n          }\\n          \\n        }\\n      if(flag == false) return -1;\\n      return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int max = 0;\\n        boolean flag = false; \\n        for(int i = 0;i<s.length();i++){\\n            int cm = 0;\\n          for(int j = i+1;j<s.length();j++){\\n            if(s.charAt(i)==s.charAt(j)){\\n                 cm = j - i - 1;\\n                 flag = true;\\n            }\\n          }\\n          max = Math.max(max,cm);\\n        }\\n      if(flag == false) return -1;\\n      return max;\\n    }\\n```\n```\\nclass Solution {\\n    static class Pair{\\n          int fo;  //first occurrence\\n          int lo;  //last occurrence\\n      \\n        public Pair(int fo, int lo){\\n              this.fo = fo;\\n              this.lo = lo;\\n        }\\n    }\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Pair freq[] = new Pair[26];\\n        int max = 0;\\n        boolean flag = false;\\n        for(int i = 0;i<s.length();i++){\\n           char c = s.charAt(i);\\n           if(freq[c-\\'a\\'] != null){\\n             freq[c-\\'a\\'] = new Pair(freq[c-\\'a\\'].fo,i);\\n             flag = true;\\n             int size = freq[c-\\'a\\'].lo - freq[c-\\'a\\'].fo - 1;\\n             max = Math.max(max,size);\\n           }\\n          else{\\n             freq[c-\\'a\\'] = new Pair(i,i);\\n          }\\n          \\n        }\\n      if(flag == false) return -1;\\n      return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1205094,
                "title": "java-solution-using-indexof-lastindexof-storing-spaces-in-arraylist-and-return-max-from-list",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        if(s.length()==0){\\n            return -1;\\n        }\\n        ArrayList<Integer> space=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n        char a=s.charAt(i);\\n        int ind=s.indexOf(a,0);\\n        int last=s.lastIndexOf(a);\\n            if(ind==-1)\\n            space.add(ind);\\n        else\\n            space.add(last-(i+1));\\n        }\\n        return Collections.max(space);\\n        }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        if(s.length()==0){\\n            return -1;\\n        }\\n        ArrayList<Integer> space=new ArrayList<>();\\n        for(int i=0;i<s.length();i++){\\n        char a=s.charAt(i);\\n        int ind=s.indexOf(a,0);\\n        int last=s.lastIndexOf(a);\\n            if(ind==-1)\\n            space.add(ind);\\n        else\\n            space.add(last-(i+1));\\n        }\\n        return Collections.max(space);\\n        }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1144948,
                "title": "python-solution-easy",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        \\n        d = defaultdict(list)\\n\\n        for i,char in enumerate(s):\\n            d[char].append(i)\\n\\n        temp = -1\\n        for indices in d.values():\\n            diff = indices[-1] - indices[0] - 1\\n            if diff > temp:\\n                temp = diff\\n                \\n        return temp\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        \\n        d = defaultdict(list)\\n\\n        for i,char in enumerate(s):\\n            d[char].append(i)\\n\\n        temp = -1\\n        for indices in d.values():\\n            diff = indices[-1] - indices[0] - 1\\n            if diff > temp:\\n                temp = diff\\n                \\n        return temp\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1110836,
                "title": "js-two-pointer",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = -1\\n    for(var i =0 ; i <s.length; i++){\\n        for(var j = s.length-1; j>i ;j--){\\n            if(s[j]===s[i]){\\n                max = Math.max(max, j-i-1)\\n                break\\n            }\\n        }\\n    }\\n    return max\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = -1\\n    for(var i =0 ; i <s.length; i++){\\n        for(var j = s.length-1; j>i ;j--){\\n            if(s[j]===s[i]){\\n                max = Math.max(max, j-i-1)\\n                break\\n            }\\n        }\\n    }\\n    return max\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1046821,
                "title": "python-solution",
                "content": "```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        d = {}\\n        for i, k in enumerate(s):\\n            if k not in d:\\n                d[k] = [i,i]\\n            else:\\n                d[k][1] = i\\n                \\n        return max([i[1] - i[0] - 1 for i in d.values()])\\n                \\n            \\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```\\nclass Solution(object):\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        \"\"\"\\n        :type s: str\\n        :rtype: int\\n        \"\"\"\\n        d = {}\\n        for i, k in enumerate(s):\\n            if k not in d:\\n                d[k] = [i,i]\\n            else:\\n                d[k][1] = i\\n                \\n        return max([i[1] - i[0] - 1 for i in d.values()])\\n                \\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 981856,
                "title": "java-5-lines-of-cade-beats-100",
                "content": "Runtime: 0 ms, faster than 100.00% of Java online submissions for Largest Substring Between Two Equal Characters.\\nMemory Usage: 36.8 MB, less than 67.32% of Java online submissions for Largest Substring Between Two Equal Characters.\\n\\n```\\n\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n\\tint[] arr = new int[26];\\n\\tint max = -1;\\n\\tfor(int i = 0 ; i < s.length() ; i++) arr[s.charAt(i) - \\'a\\'] = i; \\n\\tfor(int i = 0 ; i < s.length() ; i++) max = Math.max((arr[s.charAt(i) -\\'a\\'] - i - 1),max);\\n\\treturn max;\\n}\\n\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\n\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n\\tint[] arr = new int[26];\\n\\tint max = -1;\\n\\tfor(int i = 0 ; i < s.length() ; i++) arr[s.charAt(i) - \\'a\\'] = i; \\n\\tfor(int i = 0 ; i < s.length() ; i++) max = Math.max((arr[s.charAt(i) -\\'a\\'] - i - 1),max);\\n\\treturn max;\\n}\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 934860,
                "title": "python-3-dict-24-ms-explained",
                "content": "Use a dict to store the array index;\\nIterate the dict values, find the max difference among the chars that appear more than once.\\n~~~\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        mydict = collections.defaultdict(list)\\n        result = -1\\n        for index, char in enumerate(s):\\n            mydict[char].append(index)\\n        for key, value in mydict.items():\\n            if len(value) > 1:\\n                tmp = value[-1] - value[0] - 1\\n                result = max(tmp, result)\\n        return result\\n~~~",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "Use a dict to store the array index;\\nIterate the dict values, find the max difference among the chars that appear more than once.\\n~~~\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        mydict = collections.defaultdict(list)\\n        result = -1\\n        for index, char in enumerate(s):\\n            mydict[char].append(index)\\n        for key, value in mydict.items():\\n            if len(value) > 1:\\n                tmp = value[-1] - value[0] - 1\\n                result = max(tmp, result)\\n        return result\\n~~~",
                "codeTag": "Java"
            },
            {
                "id": 915445,
                "title": "java-o-n-time-and-o-1-space",
                "content": "**Approach** - \\n\\n1. Store the first occurrence of each character\\n2. On every next occurrence of the character, compute the length of the substring and update the max.\\n\\n**Space** - O(1)\\n\\n**Time** - O(n)\\n\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] first = new int[26];\\n        Arrays.fill(first, -1);\\n        int max = -1;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch = s.charAt(i);\\n            if (first[ch - \\'a\\'] != -1)\\n                max = Math.max(i - first[ch - \\'a\\'] - 1, max);\\n            else\\n                first[ch - \\'a\\'] = i;\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] first = new int[26];\\n        Arrays.fill(first, -1);\\n        int max = -1;\\n\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch = s.charAt(i);\\n            if (first[ch - \\'a\\'] != -1)\\n                max = Math.max(i - first[ch - \\'a\\'] - 1, max);\\n            else\\n                first[ch - \\'a\\'] = i;\\n        }\\n\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 911933,
                "title": "python-three-liner-solution-beats-98-in-time-using-dictionary",
                "content": "![image](https://assets.leetcode.com/users/images/6bfa6ff4-f4c7-47e5-9895-78a5aa19729c_1603773123.650697.png)\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        letter,res  = defaultdict(list),[]\\n        for i in range(len(s)):letter[s[i]].append(i)\\n        for j in letter.values():res.append(j[-1]-j[0]-1)\\n        return max(res)\\n       \\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        letter,res  = defaultdict(list),[]\\n        for i in range(len(s)):letter[s[i]].append(i)\\n        for j in letter.values():res.append(j[-1]-j[0]-1)\\n        return max(res)\\n       \\n```",
                "codeTag": "Java"
            },
            {
                "id": 903369,
                "title": "c-faster-than-100-easy-understanding",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> mp(26,0);\\n        int maxi=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(mp[s[i]-\\'a\\']) \\n\\t\\t\\t     maxi=max(maxi,(i-mp[s[i]-\\'a\\']));\\n            else \\n\\t\\t\\t     mp[s[i]-\\'a\\']=i+1; \\n        }\\n        return maxi;\\n    }\\n};\\n```\\n**Feel free to ask any question in the comment section.**\\nI hope that you\\'ve found the solution useful.\\nIn that case, **please do upvote and encourage me** to on my quest to document all leetcode problems\\uD83D\\uDE03\\nHappy Coding :)\\n",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> mp(26,0);\\n        int maxi=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(mp[s[i]-\\'a\\']) \\n\\t\\t\\t     maxi=max(maxi,(i-mp[s[i]-\\'a\\']));\\n            else \\n\\t\\t\\t     mp[s[i]-\\'a\\']=i+1; \\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 900399,
                "title": "go-one-pass-map-0ms-2mb",
                "content": "```\\nfunc maxLengthBetweenEqualCharacters(s string) int {\\n    seen := make(map[rune]int)\\n    maxlen := -1\\n    \\n    for i,r := range s {\\n        if j,ok := seen[r]; ok {\\n            d := i - j - 1\\n            if d > maxlen {\\n                maxlen = d\\n            }\\n        } else {\\n            seen[r] = i\\n        }\\n    }\\n    return maxlen    \\n}\\n```",
                "solutionTags": [
                    "Go"
                ],
                "code": "```\\nfunc maxLengthBetweenEqualCharacters(s string) int {\\n    seen := make(map[rune]int)\\n    maxlen := -1\\n    \\n    for i,r := range s {\\n        if j,ok := seen[r]; ok {\\n            d := i - j - 1\\n            if d > maxlen {\\n                maxlen = d\\n            }\\n        } else {\\n            seen[r] = i\\n        }\\n    }\\n    return maxlen    \\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 900287,
                "title": "kt-js-py3-cpp-map-concise-verbose-solutions",
                "content": "**Synopsis:**\\n\\nUse a `\\uD83D\\uDDFA` map `m` to store the index `i` of each character `c` in the input string `s`.\\n\\nAn astute observer will notice the concise solutions use the map `m` to track the right-most index `i` of each character `c` in `s` while the verbose solutions use the map `m` to track the left-most index `i` of each character `c` in `s`.\\n\\n**`\\uD83D\\uDCDD` Notes:**\\n* The solutions below are in reverse chronological order, ie. I dervied the concise solutions from the verbose solutions.\\n* The \"concise\" C++ solution showcases how C++ poorly expresses \"concise\" functional programming syntax via mutable lambdas\\n\\n---\\n\\n**`\\u2B50\\uFE0F` Concise Solutions:** (multi-pass)\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun maxLengthBetweenEqualCharacters(s: String): Int {\\n        var m = mutableMapOf<Char, Int>()\\n        s.forEachIndexed { i, c -> m[c] = i }\\n        return s.mapIndexed{ i, c -> m[c]!! - i - 1 }.max()!!  // -1 for (i..j) non-inclusive\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet maxLengthBetweenEqualCharacters = (s, m = new Map()) => {\\n    s.split(\\'\\').forEach((c, i) => m.set(c, i));\\n    return Math.max(...s.split(\\'\\').map((c, i) => m.get(c) - i - 1));  // -1 for (i..j) non-inclusive\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str, best = -1) -> int:\\n        m = {c: i for i, c in enumerate(s)}\\n        return max([m[c] - i - 1 for i, c in enumerate(s)])  # -1 for (i..j) non-inclusive\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Map = unordered_map<char, int>;\\n    int maxLengthBetweenEqualCharacters(string s, Map m = {}, VI cand = {}) {\\n        for_each(s.begin(), s.end(), [i = -1, &m](auto c) mutable { m[c] = ++i; });\\n        transform(s.begin(), s.end(), back_inserter(cand), [i = -1, &m](auto c) mutable { return m[c] - ++i - 1; });  // -1 for (i..j) non-inclusive\\n        return *max_element(cand.begin(), cand.end());\\n    }\\n};\\n```\\n\\n\\n---\\n\\n**`\\u2B50\\uFE0F` Verbose Solutions:** (single-pass)\\n\\n*Kotlin*\\n```\\nclass Solution {\\n    fun maxLengthBetweenEqualCharacters(s: String): Int {\\n        var best = -1\\n        var m = mutableMapOf<Char, Int>()\\n        s.forEachIndexed { i, c ->\\n            if (m.contains(c))\\n                best = maxOf(best, i - m[c]!! - 1)  // -1 for (i..j) non-inclusive\\n            else\\n                m[c] = i\\n        }\\n        return best\\n    }\\n}\\n```\\n\\n*Javascript*\\n```\\nlet maxLengthBetweenEqualCharacters = (s, m = new Map(), best = -1) => {\\n    s.split(\\'\\').forEach((c, i) => {\\n        if (m.has(c))\\n            best = Math.max(best, i - m.get(c) - 1);  // -1 for (i..j) non-inclusive\\n        else\\n            m.set(c, i);\\n    });\\n    return best;\\n};\\n```\\n\\n*Python3*\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str, best = -1) -> int:\\n        m = {}\\n        for i, c in enumerate(s):\\n            if c in m:\\n                best = max(best, i - m[c] - 1)  # -1 for (i..j) non-inclusive\\n            else:\\n                m[c] = i\\n        return best\\n```\\n\\n*C++*\\n```\\nclass Solution {\\npublic:\\n    using Map = unordered_map<char, int>;\\n    int maxLengthBetweenEqualCharacters(string s, Map m = {}, int best = -1) {\\n        int N = s.size();\\n        for (auto i{ 0 }; i < N; ++i)\\n            if (m.find(s[i]) != m.end())\\n                best = max(best, i - m[s[i]] - 1);  // -1 for (i..j) non-inclusive\\n            else\\n                m[s[i]] = i;\\n        return best;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    fun maxLengthBetweenEqualCharacters(s: String): Int {\\n        var m = mutableMapOf<Char, Int>()\\n        s.forEachIndexed { i, c -> m[c] = i }\\n        return s.mapIndexed{ i, c -> m[c]!! - i - 1 }.max()!!  // -1 for (i..j) non-inclusive\\n    }\\n}\\n```\n```\\nlet maxLengthBetweenEqualCharacters = (s, m = new Map()) => {\\n    s.split(\\'\\').forEach((c, i) => m.set(c, i));\\n    return Math.max(...s.split(\\'\\').map((c, i) => m.get(c) - i - 1));  // -1 for (i..j) non-inclusive\\n};\\n```\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str, best = -1) -> int:\\n        m = {c: i for i, c in enumerate(s)}\\n        return max([m[c] - i - 1 for i, c in enumerate(s)])  # -1 for (i..j) non-inclusive\\n```\n```\\nclass Solution {\\npublic:\\n    using VI = vector<int>;\\n    using Map = unordered_map<char, int>;\\n    int maxLengthBetweenEqualCharacters(string s, Map m = {}, VI cand = {}) {\\n        for_each(s.begin(), s.end(), [i = -1, &m](auto c) mutable { m[c] = ++i; });\\n        transform(s.begin(), s.end(), back_inserter(cand), [i = -1, &m](auto c) mutable { return m[c] - ++i - 1; });  // -1 for (i..j) non-inclusive\\n        return *max_element(cand.begin(), cand.end());\\n    }\\n};\\n```\n```\\nclass Solution {\\n    fun maxLengthBetweenEqualCharacters(s: String): Int {\\n        var best = -1\\n        var m = mutableMapOf<Char, Int>()\\n        s.forEachIndexed { i, c ->\\n            if (m.contains(c))\\n                best = maxOf(best, i - m[c]!! - 1)  // -1 for (i..j) non-inclusive\\n            else\\n                m[c] = i\\n        }\\n        return best\\n    }\\n}\\n```\n```\\nlet maxLengthBetweenEqualCharacters = (s, m = new Map(), best = -1) => {\\n    s.split(\\'\\').forEach((c, i) => {\\n        if (m.has(c))\\n            best = Math.max(best, i - m.get(c) - 1);  // -1 for (i..j) non-inclusive\\n        else\\n            m.set(c, i);\\n    });\\n    return best;\\n};\\n```\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str, best = -1) -> int:\\n        m = {}\\n        for i, c in enumerate(s):\\n            if c in m:\\n                best = max(best, i - m[c] - 1)  # -1 for (i..j) non-inclusive\\n            else:\\n                m[c] = i\\n        return best\\n```\n```\\nclass Solution {\\npublic:\\n    using Map = unordered_map<char, int>;\\n    int maxLengthBetweenEqualCharacters(string s, Map m = {}, int best = -1) {\\n        int N = s.size();\\n        for (auto i{ 0 }; i < N; ++i)\\n            if (m.find(s[i]) != m.end())\\n                best = max(best, i - m[s[i]] - 1);  // -1 for (i..j) non-inclusive\\n            else\\n                m[s[i]] = i;\\n        return best;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899474,
                "title": "basic-traversal-of-the-string",
                "content": "Strore the largest result in the answer after every iteration.\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int size = s.length(),ans=-1,diff=-1;\\n        for(int i=0;i<size-1;i++){\\n            for(int j=size-1;j>i;j--){\\n                if(s[i]==s[j]){\\n                    diff = j-i-1;  \\n                    ans = max(diff,ans);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int size = s.length(),ans=-1,diff=-1;\\n        for(int i=0;i<size-1;i++){\\n            for(int j=size-1;j>i;j--){\\n                if(s[i]==s[j]){\\n                    diff = j-i-1;  \\n                    ans = max(diff,ans);\\n                }\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3996295,
                "title": "solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        a=[]\\n        for i in range(0,len(s)-1) :\\n            b=0\\n            for j in range(i+1,len(s)) :\\n                if s[j]==s[i] :\\n                    b=j-i-1\\n                    a.append(b)\\n        return max(a) if len(a)>0 else -1\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        a=[]\\n        for i in range(0,len(s)-1) :\\n            b=0\\n            for j in range(i+1,len(s)) :\\n                if s[j]==s[i] :\\n                    b=j-i-1\\n                    a.append(b)\\n        return max(a) if len(a)>0 else -1\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3381775,
                "title": "java-fastest-solution-with-hash-table-implementation",
                "content": "# Complexity\\n- Time complexity:O(n) -> n is length of input string\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[][] table = new int[26][2];\\n        int max = 0;\\n\\n        for(int i = 0; i < s.length(); i++){\\n            int ind = i+1;\\n            int c = s.charAt(i)-\\'a\\';\\n\\n            if(table[c][0] == 0) table[c][0] = ind;\\n            else table[c][1] = ind;\\n        }\\n\\n        for(int i = 0; i < 26; i++)\\n            if(table[i][0] * table[i][1] != 0)\\n              max = Math.max(max, table[i][1] - table[i][0]);\\n        \\n        return max-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[][] table = new int[26][2];\\n        int max = 0;\\n\\n        for(int i = 0; i < s.length(); i++){\\n            int ind = i+1;\\n            int c = s.charAt(i)-\\'a\\';\\n\\n            if(table[c][0] == 0) table[c][0] = ind;\\n            else table[c][1] = ind;\\n        }\\n\\n        for(int i = 0; i < 26; i++)\\n            if(table[i][0] * table[i][1] != 0)\\n              max = Math.max(max, table[i][1] - table[i][0]);\\n        \\n        return max-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3376010,
                "title": "python-solution-with-explanation-beats-94-49",
                "content": "\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        # setup to keep necessary vars in memory\\n        set_s, len_s = set(s), len(s)\\n\\n        # checking if there is no such substring\\n        if len(set_s) == len_s:\\n            return -1\\n\\n        # final check for largest substing between two equal characters\\n        le = 0\\n        for i in set_s:\\n            if s.count(i) > 1:\\n\\n                # checking a lenght of a substring\\n                cou = len_s - s[::-1].index(i) - s.index(i) - 2\\n                if cou > le:\\n                    le = cou\\n                    \\n        # yay we made it\\n        return le\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        # setup to keep necessary vars in memory\\n        set_s, len_s = set(s), len(s)\\n\\n        # checking if there is no such substring\\n        if len(set_s) == len_s:\\n            return -1\\n\\n        # final check for largest substing between two equal characters\\n        le = 0\\n        for i in set_s:\\n            if s.count(i) > 1:\\n\\n                # checking a lenght of a substring\\n                cou = len_s - s[::-1].index(i) - s.index(i) - 2\\n                if cou > le:\\n                    le = cou\\n                    \\n        # yay we made it\\n        return le\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3339646,
                "title": "basic-and-easy-java-program",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max=-1;\\n      for(int i=0;i<s.length();i++){\\n          for(int j=s.length()-1;j>i;j--){\\n              if(s.charAt(i)==s.charAt(j)){\\n              max=Math.max(max,((j-i)-1));\\n              }\\n          }\\n      }\\n       return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max=-1;\\n      for(int i=0;i<s.length();i++){\\n          for(int j=s.length()-1;j>i;j--){\\n              if(s.charAt(i)==s.charAt(j)){\\n              max=Math.max(max,((j-i)-1));\\n              }\\n          }\\n      }\\n       return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3095011,
                "title": "python-c-simple-solution-o-n-both-beats-90",
                "content": "# C# Code\\n```\\npublic class Solution {\\n    public int MaxLengthBetweenEqualCharacters(string s) {\\n        Dictionary<char, int> Map = new Dictionary<char, int>();\\n        int res = -1;\\n        for(int i= 0;i<s.Length;i++)\\n        {\\n            if(Map.ContainsKey(s[i]))\\n            {\\n                if (i - Map[s[i]] > res)\\n                {\\n                    res = i - Map[s[i]];\\n                }\\n            }\\n            else\\n            {\\n                Map.Add(s[i], i+1);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n\\n```\\n\\n# Python Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        Map = {}\\n        res = -1\\n        for i in range(len(s)):\\n            if s[i] in Map:\\n                res = max(i - Map[s[i]],res)\\n            else:\\n                Map[s[i]] = i + 1\\n        return res\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaxLengthBetweenEqualCharacters(string s) {\\n        Dictionary<char, int> Map = new Dictionary<char, int>();\\n        int res = -1;\\n        for(int i= 0;i<s.Length;i++)\\n        {\\n            if(Map.ContainsKey(s[i]))\\n            {\\n                if (i - Map[s[i]] > res)\\n                {\\n                    res = i - Map[s[i]];\\n                }\\n            }\\n            else\\n            {\\n                Map.Add(s[i], i+1);\\n            }\\n        }\\n        return res;\\n    }\\n}\\n\\n```\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        Map = {}\\n        res = -1\\n        for i in range(len(s)):\\n            if s[i] in Map:\\n                res = max(i - Map[s[i]],res)\\n            else:\\n                Map[s[i]] = i + 1\\n        return res\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3070816,
                "title": "java-onepass-hashmap-solution-easy-to-understand",
                "content": "# HashTable\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        HashMap<Character,Integer> map=new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(map.containsKey(c)){\\n                res=Math.max(res,i-map.get(c)-1);\\n            }\\n            else{\\n                map.put(c,i);\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```\\n# Slightly Improve Running Time (Beats 100%)\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        int[] map=new int[26];\\n        Arrays.fill(map,-1);\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(map[c-\\'a\\']==-1){\\n                map[c-\\'a\\']=i;\\n            }\\n            else{\\n                res=Math.max(res,i-map[c-\\'a\\']-1);\\n            }\\n        }\\n        return res;\\n\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        HashMap<Character,Integer> map=new HashMap<>();\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(map.containsKey(c)){\\n                res=Math.max(res,i-map.get(c)-1);\\n            }\\n            else{\\n                map.put(c,i);\\n            }\\n        }\\n\\n        return res;\\n    }\\n}\\n```\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res=-1;\\n        int[] map=new int[26];\\n        Arrays.fill(map,-1);\\n        for(int i=0;i<s.length();i++){\\n            char c=s.charAt(i);\\n            if(map[c-\\'a\\']==-1){\\n                map[c-\\'a\\']=i;\\n            }\\n            else{\\n                res=Math.max(res,i-map[c-\\'a\\']-1);\\n            }\\n        }\\n        return res;\\n\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3033199,
                "title": "hashing-solution-c",
                "content": "# Complexity\\n- Time complexity:O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int v[26];\\n        memset(v,-1,sizeof v);\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1){\\n                v[s[i]-\\'a\\']=i;\\n            }\\n            int res=i-v[s[i]-\\'a\\']-1;\\n            ans=max(ans,res);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int v[26];\\n        memset(v,-1,sizeof v);\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1){\\n                v[s[i]-\\'a\\']=i;\\n            }\\n            int res=i-v[s[i]-\\'a\\']-1;\\n            ans=max(ans,res);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2751968,
                "title": "c-very-easy-0-ms-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int n=s.length();\\n        int len=0;\\n        unordered_map<char,int>mp;\\n        int maxlen=-1;\\n        for(int i=0;i<n;i++)\\n            mp[s[i]]++;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(mp[s[i]]!=1)\\n            {\\n                for(int j=n-1;j>i;j--)\\n                {\\n                    if(s[j]==s[i])\\n                    {\\n                        maxlen=max(maxlen,j-i-1);\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int n=s.length();\\n        int len=0;\\n        unordered_map<char,int>mp;\\n        int maxlen=-1;\\n        for(int i=0;i<n;i++)\\n            mp[s[i]]++;\\n        for(int i=0;i<n-1;i++)\\n        {\\n            if(mp[s[i]]!=1)\\n            {\\n                for(int j=n-1;j>i;j--)\\n                {\\n                    if(s[j]==s[i])\\n                    {\\n                        maxlen=max(maxlen,j-i-1);\\n                        break;\\n                    }\\n                }\\n            }\\n            \\n        }\\n        return maxlen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2728479,
                "title": "solution-in-c",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int a[26] = {0}, b[26] = {0}, ans = -1;\\n        for(int i = 0; i < 26; i++) {\\n            a[i] = 1000;\\n            b[i] = -1;\\n        }\\n        for(int i = 0; i < s.size(); i++) {\\n            a[s[i] - \\'a\\'] = min(a[s[i] - \\'a\\'], i);\\n            b[s[i] - \\'a\\'] = max(b[s[i] - \\'a\\'], i);\\n        }\\n        for(int i = 0; i < 26; i++) {\\n            ans = max(ans, b[i] - a[i] - 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int a[26] = {0}, b[26] = {0}, ans = -1;\\n        for(int i = 0; i < 26; i++) {\\n            a[i] = 1000;\\n            b[i] = -1;\\n        }\\n        for(int i = 0; i < s.size(); i++) {\\n            a[s[i] - \\'a\\'] = min(a[s[i] - \\'a\\'], i);\\n            b[s[i] - \\'a\\'] = max(b[s[i] - \\'a\\'], i);\\n        }\\n        for(int i = 0; i < 26; i++) {\\n            ans = max(ans, b[i] - a[i] - 1);\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2705307,
                "title": "simple-approach-using-hashing-o-n-time",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n       unordered_map<char,int>mp;\\n       int ans=-1;\\n       for(int i=0;i<s.length();i++)\\n       {\\n          char ch = s[i];\\n          if(mp.find(ch)!=mp.end())    //also found previously\\n          {\\n             ans=max(ans,i-mp[ch]-1);\\n          }\\n          else\\n          {\\n             mp[ch]=i;\\t\\n          }\\t\\n       }         \\n       return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n       unordered_map<char,int>mp;\\n       int ans=-1;\\n       for(int i=0;i<s.length();i++)\\n       {\\n          char ch = s[i];\\n          if(mp.find(ch)!=mp.end())    //also found previously\\n          {\\n             ans=max(ans,i-mp[ch]-1);\\n          }\\n          else\\n          {\\n             mp[ch]=i;\\t\\n          }\\t\\n       }         \\n       return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2698026,
                "title": "c-easy-understanding-o-n-hashmap",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char , vector<int>>g;\\n        for(int i = 0 ; i  <s.size() ; i ++){\\n             g[s[i]].push_back(i);\\n        }\\n        int d =-1;\\n        for(auto i  :g){\\n            vector<int>v = i.second;\\n           int n = v.size();\\n            \\n            if(n > 1){\\n                d = max(d , v[n-1]-v[0] - 1);\\n            }\\n        }\\n        return d;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char , vector<int>>g;\\n        for(int i = 0 ; i  <s.size() ; i ++){\\n             g[s[i]].push_back(i);\\n        }\\n        int d =-1;\\n        for(auto i  :g){\\n            vector<int>v = i.second;\\n           int n = v.size();\\n            \\n            if(n > 1){\\n                d = max(d , v[n-1]-v[0] - 1);\\n            }\\n        }\\n        return d;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2675565,
                "title": "simple-approach-using-hashing-o-n-time",
                "content": "\\n\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<vector<int>>v(26,vector<int>(2,-1));\\n        for(int i=0;i<s.length();i++){\\n            if(v[s[i]-97][0]==-1){\\n                v[s[i]-97][0]=i;\\n            }else{\\n                v[s[i]-97][1]=i;\\n            }\\n        }\\n        int res=INT_MIN;\\n        for(int i=0;i<26;i++){\\n            int curr=(v[i][1]-v[i][0]+1)-2;\\n            res=max(res,curr);\\n\\n        }\\n        return res;\\n\\n        \\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<vector<int>>v(26,vector<int>(2,-1));\\n        for(int i=0;i<s.length();i++){\\n            if(v[s[i]-97][0]==-1){\\n                v[s[i]-97][0]=i;\\n            }else{\\n                v[s[i]-97][1]=i;\\n            }\\n        }\\n        int res=INT_MIN;\\n        for(int i=0;i<26;i++){\\n            int curr=(v[i][1]-v[i][0]+1)-2;\\n            res=max(res,curr);\\n\\n        }\\n        return res;\\n\\n        \\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2618472,
                "title": "0-ms-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int sz=-1;\\n        \\n        for(int i=0;i<s.length();i++){\\n            char ch=s[i];int j=i+1;\\n            for( j=i+1;j<s.length();j++){\\n                if(s[j]==ch){\\n                   sz=max(sz,(j-i-1));\\n                }\\n            }\\n                \\n        }\\n        \\n        return sz;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int sz=-1;\\n        \\n        for(int i=0;i<s.length();i++){\\n            char ch=s[i];int j=i+1;\\n            for( j=i+1;j<s.length();j++){\\n                if(s[j]==ch){\\n                   sz=max(sz,(j-i-1));\\n                }\\n            }\\n                \\n        }\\n        \\n        return sz;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2269658,
                "title": "easy-java-solution-using-hashmap",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        HashMap<Character,Integer> hmap = new HashMap<>();\\n        int res=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            if(hmap.containsKey(ch))\\n                res=Math.max(res,i-1-hmap.get(ch));\\n            else\\n                hmap.put(ch,i);\\n        }\\n        return res;\\n    }\\n}",
                "solutionTags": [
                    "Java"
                ],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        HashMap<Character,Integer> hmap = new HashMap<>();\\n        int res=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            char ch = s.charAt(i);\\n            if(hmap.containsKey(ch))\\n                res=Math.max(res,i-1-hmap.get(ch));\\n            else\\n                hmap.put(ch,i);\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 2218649,
                "title": "js-solution-with-set",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {    \\n    let set = new Set();\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        let letter = s[i];\\n        for(let j = i+1; j < s.length; j++) {\\n            if( s[j] == s[i] ) {\\n                set.add(((j-1) - (i+1)) + 1); //calculate the length and add to our set\\n            }\\n        }\\n    }\\n    \\n    if( set.size > 0 ) {\\n        return Math.max(...set);\\n    }\\n    \\n    return -1;    \\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "Ordered Set"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {    \\n    let set = new Set();\\n    \\n    for(let i = 0; i < s.length; i++) {\\n        let letter = s[i];\\n        for(let j = i+1; j < s.length; j++) {\\n            if( s[j] == s[i] ) {\\n                set.add(((j-1) - (i+1)) + 1); //calculate the length and add to our set\\n            }\\n        }\\n    }\\n    \\n    if( set.size > 0 ) {\\n        return Math.max(...set);\\n    }\\n    \\n    return -1;    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 2210080,
                "title": "very-intuitive-simplest-logic",
                "content": "**The logic is simple, whenever you encounter a character first time, store the character and its index in hashMap. When you encounter it second time, obviously its an answer. So just update the answer values. \\nUltimately if all the characters have just one occurence, it means map size equates the string size, so return -1 else return answer\\n\\n**Now you don\\'t need to store index of second or any further occurence, because you need largest substring, and largest can be obtained just by first occurence . **\\n**\\n\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int ans = 0;\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(hm.containsKey(s.charAt(i)))\\n             ans = Math.max(ans, i-(int)hm.get(s.charAt(i))-1);\\n            else \\n             hm.put(s.charAt(i),i);\\n        }\\n        if(hm.size()==s.length())\\n            return -1;\\n        return ans;\\n        \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int ans = 0;\\n        HashMap<Character,Integer> hm = new HashMap<>();\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(hm.containsKey(s.charAt(i)))\\n             ans = Math.max(ans, i-(int)hm.get(s.charAt(i))-1);\\n            else \\n             hm.put(s.charAt(i),i);\\n        }\\n        if(hm.size()==s.length())\\n            return -1;\\n        return ans;\\n        \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 2064085,
                "title": "java-easy-solution-count-first-character-and-compare",
                "content": "```java\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] freq = new int[26];\\n        Arrays.fill(freq,-1);\\n        int maxLength = -1;\\n        for(int i = 0; i < s.length(); i++){\\n            if(freq[s.charAt(i) - \\'a\\']  == -1){\\n                freq[s.charAt(i) - \\'a\\'] = i;\\n            }else{\\n                int val = i - freq[s.charAt(i) - \\'a\\'] -1;\\n                maxLength = Math.max(maxLength,val);\\n            }\\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```java\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] freq = new int[26];\\n        Arrays.fill(freq,-1);\\n        int maxLength = -1;\\n        for(int i = 0; i < s.length(); i++){\\n            if(freq[s.charAt(i) - \\'a\\']  == -1){\\n                freq[s.charAt(i) - \\'a\\'] = i;\\n            }else{\\n                int val = i - freq[s.charAt(i) - \\'a\\'] -1;\\n                maxLength = Math.max(maxLength,val);\\n            }\\n        }\\n        return maxLength;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1728347,
                "title": "simple-solution-with-map-60-ms-faster-than-100-00-of-javascript-online-submissions",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let result = -1;\\n    const map = new Map();\\n    for (let i = 0; i < s.length; i++) {\\n        if (map.has(s.charAt(i))) {\\n            result = Math.max(result, i - map.get(s.charAt(i)))\\n        } else {\\n            map.set(s.charAt(i), i + 1);\\n        }\\n    }\\n    return result;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let result = -1;\\n    const map = new Map();\\n    for (let i = 0; i < s.length; i++) {\\n        if (map.has(s.charAt(i))) {\\n            result = Math.max(result, i - map.get(s.charAt(i)))\\n        } else {\\n            map.set(s.charAt(i), i + 1);\\n        }\\n    }\\n    return result;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1695948,
                "title": "3-lines-simple-c-solution-with-o-1-space-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        if(s.size()==0)return -1;\\n        int ans = -1;\\n        for(int i = 0;i<s.size();i++) {\\n            char ch = s[i];\\n            int pos = s.find_last_of(ch,s.size());  //This function is used to find the last position of the char in the string\\n            if(pos != string::npos){\\n                int diff = pos-i-1;\\n                ans = max(ans,diff);\\n            }  \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        if(s.size()==0)return -1;\\n        int ans = -1;\\n        for(int i = 0;i<s.size();i++) {\\n            char ch = s[i];\\n            int pos = s.find_last_of(ch,s.size());  //This function is used to find the last position of the char in the string\\n            if(pos != string::npos){\\n                int diff = pos-i-1;\\n                ans = max(ans,diff);\\n            }  \\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1689384,
                "title": "java-1ms-explanations",
                "content": "```\\nclass Solution {\\n    /** Algorithm\\n        1. Parse s and for each character, store its first appearance index in an array[] firstPositions \\n        2. If firstPos[char - \\'a\\'] of current char already exists, determine the length i - firstPos, matching it against the maxLength known so far.\\n        3. Return maxLength -1, to compensate for the length deduction of the 2 characters\\n    */\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] firstPositions = new int[26];\\n        int maxLength = 0;\\n        // fill the array with -1 to flag that the first position has not been filled yet\\n        Arrays.fill(firstPositions, -1);\\n        int codePoint;\\n        for (int i = 0; i < s.length(); i++) {\\n            codePoint = s.charAt(i) - \\'a\\';\\n            // if first position has not been filled, fill it\\n            if (firstPositions[codePoint] < 0) {\\n                firstPositions[codePoint] = i;\\n            } else { // else, if firstPos already exists, determine the langth and compare with maxLength\\n                maxLength = Math.max(maxLength, i - firstPositions[codePoint]);\\n            }\\n        }\\n        return maxLength - 1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    /** Algorithm\\n        1. Parse s and for each character, store its first appearance index in an array[] firstPositions \\n        2. If firstPos[char - \\'a\\'] of current char already exists, determine the length i - firstPos, matching it against the maxLength known so far.\\n        3. Return maxLength -1, to compensate for the length deduction of the 2 characters\\n    */\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] firstPositions = new int[26];\\n        int maxLength = 0;\\n        // fill the array with -1 to flag that the first position has not been filled yet\\n        Arrays.fill(firstPositions, -1);\\n        int codePoint;\\n        for (int i = 0; i < s.length(); i++) {\\n            codePoint = s.charAt(i) - \\'a\\';\\n            // if first position has not been filled, fill it\\n            if (firstPositions[codePoint] < 0) {\\n                firstPositions[codePoint] = i;\\n            } else { // else, if firstPos already exists, determine the langth and compare with maxLength\\n                maxLength = Math.max(maxLength, i - firstPositions[codePoint]);\\n            }\\n        }\\n        return maxLength - 1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1685287,
                "title": "c",
                "content": "\\'\\'\\'\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        int max_len = -1 , current_len = -1  ;\\n       \\n        for(int i=0 ; i<s.length() ; i++)\\n        {\\n            for(int j=0 ; j<s.length() ; j++ )\\n            {\\n                if(s[i]==s[j])\\n                {\\n                    current_len = i-j-1 ;    \\n                    max_len = max(current_len , max_len); \\n                }\\n            }\\n        }\\n        return max_len ;  \\n        \\n    }\\n};\\n\\'\\'\\'",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        int max_len = -1 , current_len = -1  ;\\n       \\n        for(int i=0 ; i<s.length() ; i++)\\n        {\\n            for(int j=0 ; j<s.length() ; j++ )\\n            {\\n                if(s[i]==s[j])\\n                {\\n                    current_len = i-j-1 ;    \\n                    max_len = max(current_len , max_len); \\n                }",
                "codeTag": "Java"
            },
            {
                "id": 1685069,
                "title": "simple-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n       int arr[26]={0},m=-1;\\n        for(int i=0;i<s.size();i++){\\n         if(arr[s[i]-\\'a\\']==0)\\n           arr[s[i]-\\'a\\']=i+1;\\n        else  m= max(m,i-arr[s[i]-\\'a\\']);}\\n        return m;\\n    }\\n};```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n       int arr[26]={0},m=-1;\\n        for(int i=0;i<s.size();i++){\\n         if(arr[s[i]-\\'a\\']==0)\\n           arr[s[i]-\\'a\\']=i+1;\\n        else  m= max(m,i-arr[s[i]-\\'a\\']);}\\n        return m;\\n    }\\n};```",
                "codeTag": "Java"
            },
            {
                "id": 1600735,
                "title": "easy-c-map-hashmap-solution",
                "content": "```c++\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char, vector<int>> god;\\n        int pos = 0;\\n        for(auto it: s) {\\n            god[it].push_back(pos++);\\n        }\\n        \\n        int ans = -1;\\n        for (auto it: god) {\\n            auto vec = it.second;\\n            if (vec.size() > 1) {\\n                ans = max(ans, vec[vec.size()-1] - vec[0] - 1); \\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```c++\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char, vector<int>> god;\\n        int pos = 0;\\n        for(auto it: s) {\\n            god[it].push_back(pos++);\\n        }\\n        \\n        int ans = -1;\\n        for (auto it: god) {\\n            auto vec = it.second;\\n            if (vec.size() > 1) {\\n                ans = max(ans, vec[vec.size()-1] - vec[0] - 1); \\n            }\\n        }\\n        \\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1413886,
                "title": "c-solution-i-taught-myself-how-to-do-the-sliding-window-thing-d",
                "content": "I legit have no idea how to make one optimally, I just went with whatever made the most sense to me after trying out a couple of things on notepad. My notes:\\n\\n```\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                           ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                          ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n ^                          ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n ^                         ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                         ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n  ^                         ^ ANSWER=25\\n```\\n\\nAs it turns out, it was much more efficient than I thought it would be!\\n\\nRuntime: 0ms (100% faster)\\nMemory: 6.2 MB (98.86% smaller)\\n\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string inputString) {\\n        size_t left(0), right(inputString.length() - 1), mode(0), distance(0), journey(0);\\n\\n        while (left != right) {\\n            if (inputString[left] == inputString[right]) {\\n                return (right - 1) - left;\\n            }\\n\\n            switch (mode) {\\n                case 0: // Shrink window\\n                    right--;\\n                    distance++;\\n\\n                    mode++;\\n                    break;\\n                case 1: // Shift window right\\n                    if (journey == distance) {\\n                        journey = 0;\\n\\n                        mode++;\\n                    } else {\\n                        right++;\\n                        left++;\\n\\n                        journey++;\\n                    }\\n                    break;\\n                case 2: // Shift window left\\n                    if (journey == distance) {\\n                        journey = 0;\\n\\n                        mode = 0;\\n                    } else {\\n                        right--;\\n                        left--;\\n\\n                        journey++;\\n                    }\\n                    break;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C",
                    "Sliding Window"
                ],
                "code": "```\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                           ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                          ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n ^                          ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n ^                         ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n^                         ^\\n\\nakjshdkjhfkjhsdkjhsdkjfhlkjhj\\n  ^                         ^ ANSWER=25\\n```\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string inputString) {\\n        size_t left(0), right(inputString.length() - 1), mode(0), distance(0), journey(0);\\n\\n        while (left != right) {\\n            if (inputString[left] == inputString[right]) {\\n                return (right - 1) - left;\\n            }\\n\\n            switch (mode) {\\n                case 0: // Shrink window\\n                    right--;\\n                    distance++;\\n\\n                    mode++;\\n                    break;\\n                case 1: // Shift window right\\n                    if (journey == distance) {\\n                        journey = 0;\\n\\n                        mode++;\\n                    } else {\\n                        right++;\\n                        left++;\\n\\n                        journey++;\\n                    }\\n                    break;\\n                case 2: // Shift window left\\n                    if (journey == distance) {\\n                        journey = 0;\\n\\n                        mode = 0;\\n                    } else {\\n                        right--;\\n                        left--;\\n\\n                        journey++;\\n                    }\\n                    break;\\n            }\\n        }\\n\\n        return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1412608,
                "title": "java-solution-with-logic",
                "content": "```\\n/* \\nTo get the maximum length we need to store the first occurance of the character in the array initial position with 0.\\nFor the first character of s, the position becomes 0,  So we need to represent differntly. Thus i used i + 1.\\n*/\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        int[] pos = new int[26]; //Stores the first occurance of the character.\\n        int index;\\n        \\n        for (int i = 0; i < s.length(); i++)\\n        {\\n            index = s.charAt(i) - \\'a\\';\\n            if (pos[index] > 0)\\n            {\\n                max = Math.max(max, i - pos[index]);\\n            } \\n            else \\n            {\\n                pos[index] = i + 1;\\n            }\\n            \\n        }\\n        \\n        return max;\\n    }\\n}",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        int[] pos = new int[26]; //Stores the first occurance of the character.\\n        int index;\\n        \\n        for (int i = 0; i < s.length(); i++)\\n        {\\n            index = s.charAt(i) - \\'a\\';\\n            if (pos[index] > 0)\\n            {\\n                max = Math.max(max, i - pos[index]);\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 1355311,
                "title": "python-reverse-string",
                "content": "```python\\ndef maxLengthBetweenEqualCharacters(self, s):\\n\\n\\t# Edge case - All characters are unique\\n\\tif len(s) == len(set(s)): return -1\\n\\n\\tcounts, s_prime, result = collections.Counter(s), s[::-1], 0\\n\\n\\tfor k, v in [i for i in counts.items() if i[1] >= 2]:\\n\\t\\ti, j = s.index(k), len(s) - s_prime.index(k) - 1\\n\\t\\tresult = max(result, j-i-1)\\n\\n\\treturn result\\n```",
                "solutionTags": [
                    "Python",
                    "Python3",
                    "String"
                ],
                "code": "```python\\ndef maxLengthBetweenEqualCharacters(self, s):\\n\\n\\t# Edge case - All characters are unique\\n\\tif len(s) == len(set(s)): return -1\\n\\n\\tcounts, s_prime, result = collections.Counter(s), s[::-1], 0\\n\\n\\tfor k, v in [i for i in counts.items() if i[1] >= 2]:\\n\\t\\ti, j = s.index(k), len(s) - s_prime.index(k) - 1\\n\\t\\tresult = max(result, j-i-1)\\n\\n\\treturn result\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 1236005,
                "title": "simple-java-solution-o-n-and-o-1-space",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n     if(s.length()==1)\\n       return -1;\\n     if(s.length()==2 && s.charAt(0)==s.charAt(1))\\n       return 0;\\n      int max=-1;\\n      for(int i=0;i<s.length();i++)\\n      {\\n        int last=s.lastIndexOf(s.charAt(i));\\n        if(i!=last)\\n          max=Math.max((last-i-1),max);\\n      }\\n      return max;\\n    }\\n}\\n",
                "solutionTags": [],
                "code": "class Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n     if(s.length()==1)\\n       return -1;\\n     if(s.length()==2 && s.charAt(0)==s.charAt(1))\\n       return 0;\\n      int max=-1;\\n      for(int i=0;i<s.length();i++)\\n      {\\n        int last=s.lastIndexOf(s.charAt(i));\\n        if(i!=last)\\n          max=Math.max((last-i-1),max);\\n      }",
                "codeTag": "Java"
            },
            {
                "id": 1220886,
                "title": "100-pass-results-and-very-easy",
                "content": "class Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n       int mx=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            for(int j=s.size()-1;j>=0;j--)\\n            {\\n               if(s[i]==s[j])\\n               {\\n                    mx=max(mx,j-i-1);\\n                   break;\\n               }\\n            }\\n        }\\n        return mx;\\n    }\\n};",
                "solutionTags": [
                    "C"
                ],
                "code": "class Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n       int mx=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            for(int j=s.size()-1;j>=0;j--)\\n            {\\n               if(s[i]==s[j])\\n               {\\n                    mx=max(mx,j-i-1);\\n                   break;\\n               }",
                "codeTag": "Java"
            },
            {
                "id": 1220092,
                "title": "simple-c-sol-0ms-and-100-faster-commented",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<vector<int>> v(26,vector<int>(2,-1));\\n        //v[i][0] stores the first occurance of a letter\\n        //v[i][1] stores the second occurance of a letter\\n        int res=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(v[s[i]-\\'a\\'][0]==-1)\\n            {\\n                //first occurance\\n                v[s[i]-\\'a\\'][0]=i;\\n            }\\n            else{\\n                //second occurance\\n                v[s[i]-\\'a\\'][1]=i;\\n                res=max(v[s[i]-\\'a\\'][1]-v[s[i]-\\'a\\'][0]-1,res);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<vector<int>> v(26,vector<int>(2,-1));\\n        //v[i][0] stores the first occurance of a letter\\n        //v[i][1] stores the second occurance of a letter\\n        int res=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(v[s[i]-\\'a\\'][0]==-1)\\n            {\\n                //first occurance\\n                v[s[i]-\\'a\\'][0]=i;\\n            }\\n            else{\\n                //second occurance\\n                v[s[i]-\\'a\\'][1]=i;\\n                res=max(v[s[i]-\\'a\\'][1]-v[s[i]-\\'a\\'][0]-1,res);\\n            }\\n        }\\n        return res;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1211682,
                "title": "simple-c-solution-100-0ms",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s)\\n    {\\n        int maxi=-1;\\n        vector<int>vec(26,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(vec[s[i]-\\'a\\']!=-1)\\n            {\\n              maxi=max(maxi,i-vec[s[i]-\\'a\\']-1);  \\n            }\\n            else\\n            {\\n               vec[s[i]-\\'a\\']=i;   \\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s)\\n    {\\n        int maxi=-1;\\n        vector<int>vec(26,-1);\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(vec[s[i]-\\'a\\']!=-1)\\n            {\\n              maxi=max(maxi,i-vec[s[i]-\\'a\\']-1);  \\n            }\\n            else\\n            {\\n               vec[s[i]-\\'a\\']=i;   \\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1206755,
                "title": "javascript-simple-solution",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    \\n     // 2. brute force\\n    // get the difference between the starting index stored in map\\n    // Time complexity O(N)\\n    // Space complexity O(N) - We can have space complexity O(1) , if we use the fixed Array of size 26\\n\\t// let arr = new Array(26).fill(0) this will be constant time.\\n\\t\\n\\t\\n    let map = new Map();\\n    \\n    let max = -1;\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        // check if it exists in the map.\\n        if (map.has(s[i])) {\\n            \\n            // if its present, get the latest index from map value.\\n            // and calculate max\\n            let val = map.get(s[i]);\\n            max = Math.max(max, i - val - 1);\\n            \\n        } else {\\n            // else update the latest index of element.\\n            map.set(s[i], i);\\n        }\\n    }\\n    \\n    return max;\\n    \\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    \\n     // 2. brute force\\n    // get the difference between the starting index stored in map\\n    // Time complexity O(N)\\n    // Space complexity O(N) - We can have space complexity O(1) , if we use the fixed Array of size 26\\n\\t// let arr = new Array(26).fill(0) this will be constant time.\\n\\t\\n\\t\\n    let map = new Map();\\n    \\n    let max = -1;\\n    \\n    for (let i = 0; i < s.length; i++) {\\n        // check if it exists in the map.\\n        if (map.has(s[i])) {\\n            \\n            // if its present, get the latest index from map value.\\n            // and calculate max\\n            let val = map.get(s[i]);\\n            max = Math.max(max, i - val - 1);\\n            \\n        } else {\\n            // else update the latest index of element.\\n            map.set(s[i], i);\\n        }\\n    }\\n    \\n    return max;\\n    \\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1196270,
                "title": "solution-in-java-100-faster",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        //To find the first occurance(index)\\n        int[] index=new int[26];\\n        int res=-1;\\n        \\n        for(int idx=0;idx<s.length();idx++){\\n            //find the diff of first occurance & current occurance\\n            if(index[s.charAt(idx)-\\'a\\']>0)\\n                res=Math.max(res,idx-index[s.charAt(idx)-\\'a\\']);\\n            else\\n                index[s.charAt(idx)-\\'a\\']=idx+1;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```\\nPlease **upvote**, if you like the solution:)",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        //To find the first occurance(index)\\n        int[] index=new int[26];\\n        int res=-1;\\n        \\n        for(int idx=0;idx<s.length();idx++){\\n            //find the diff of first occurance & current occurance\\n            if(index[s.charAt(idx)-\\'a\\']>0)\\n                res=Math.max(res,idx-index[s.charAt(idx)-\\'a\\']);\\n            else\\n                index[s.charAt(idx)-\\'a\\']=idx+1;\\n        }\\n        \\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1171574,
                "title": "c-o-n-time-complexity-o-26-space-complexity-100-faster",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {     \\n        vector<int> v(26,-1);\\n        int max = -1;\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            int val = s[i] -\\'a\\';\\n            if(v[val] != -1)\\n            {\\n                if(i - v[val] - 1 > max)\\n                    max = i - v[val] -1;\\n                \\n            }\\n            else\\n            {\\n                v[val] = i;\\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {     \\n        vector<int> v(26,-1);\\n        int max = -1;\\n        for(int i = 0;i<s.size();i++)\\n        {\\n            int val = s[i] -\\'a\\';\\n            if(v[val] != -1)\\n            {\\n                if(i - v[val] - 1 > max)\\n                    max = i - v[val] -1;\\n                \\n            }\\n            else\\n            {\\n                v[val] = i;\\n            }\\n        }\\n        return max;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1142168,
                "title": "rust-0ms-o-n-short-hash-map-iterator-solutions",
                "content": "Using a hash map:\\n\\n```\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        let mut map = std::collections::HashMap::new();\\n        s.chars().enumerate().for_each(|(i, c)| {\\n            map.entry(c).or_insert((i as i32 + 1, 0)).1 = i as i32 - 1;\\n        });\\n        map.into_iter()\\n            .map(|(_, (i, j))| j - i + 1)\\n            .max()\\n            .unwrap_or(-1)\\n    }\\n}\\n```\\n\\nTime complexity: `O(n)`.\\nExtra-space complexity: `O(26) == O(1)`.\\n\\n---\\n\\nUsing Rust\\'s iterators:\\n\\n```\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        let s = s.as_bytes();\\n        (b\\'a\\'..=b\\'z\\')\\n            .map(|c| {\\n                let i = (0..s.len()).find(|&i| s[i] == c).unwrap_or(0) + 1;\\n                let j = (0..s.len()).rev().find(|&i| s[i] == c).unwrap_or(0) - 1;\\n                j as i32 - i as i32 + 1\\n            })\\n            .max()\\n            .unwrap()\\n    }\\n}\\n```\\n\\nTime complexity: `O(26 * 2 * n) == O(n)`.\\nExtra-space complexity: `O(1)`.",
                "solutionTags": [
                    "Rust"
                ],
                "code": "```\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        let mut map = std::collections::HashMap::new();\\n        s.chars().enumerate().for_each(|(i, c)| {\\n            map.entry(c).or_insert((i as i32 + 1, 0)).1 = i as i32 - 1;\\n        });\\n        map.into_iter()\\n            .map(|(_, (i, j))| j - i + 1)\\n            .max()\\n            .unwrap_or(-1)\\n    }\\n}\\n```\n```\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        let s = s.as_bytes();\\n        (b\\'a\\'..=b\\'z\\')\\n            .map(|c| {\\n                let i = (0..s.len()).find(|&i| s[i] == c).unwrap_or(0) + 1;\\n                let j = (0..s.len()).rev().find(|&i| s[i] == c).unwrap_or(0) - 1;\\n                j as i32 - i as i32 + 1\\n            })\\n            .max()\\n            .unwrap()\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1135535,
                "title": "easily-readable-solution-in-python",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maxd = -1\\n        for i in s:\\n            maxd = max(maxd,len(s)-s[::-1].index(i)-s.index(i)-2)\\n        return(maxd)",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maxd = -1\\n        for i in s:\\n            maxd = max(maxd,len(s)-s[::-1].index(i)-s.index(i)-2)\\n        return(maxd)",
                "codeTag": "Java"
            },
            {
                "id": 1085268,
                "title": "java-easy-solution-100-faster",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] arr = new int[26]; // create an array of 26 length\\n        Arrays.fill(arr, -1); // fill the array with -1;\\n        \\n        int ans = -1;\\n        for(int i=0; i<s.length(); i++){\\n            if(arr[s.charAt(i) - \\'a\\'] == -1){  // if the character comes first time, save first occurance of that character\\n                arr[s.charAt(i) - \\'a\\'] = i;\\n            }else{\\n                int temp = i-arr[s.charAt(i) - \\'a\\']-1; // if it comes again then calculate the length of substring in between\\n                if(temp > ans) ans = temp;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] arr = new int[26]; // create an array of 26 length\\n        Arrays.fill(arr, -1); // fill the array with -1;\\n        \\n        int ans = -1;\\n        for(int i=0; i<s.length(); i++){\\n            if(arr[s.charAt(i) - \\'a\\'] == -1){  // if the character comes first time, save first occurance of that character\\n                arr[s.charAt(i) - \\'a\\'] = i;\\n            }else{\\n                int temp = i-arr[s.charAt(i) - \\'a\\']-1; // if it comes again then calculate the length of substring in between\\n                if(temp > ans) ans = temp;\\n            }\\n        }\\n        \\n        return ans;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1077914,
                "title": "c-solution-beats-100-easy-to-understand",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> fre(26);\\n        for(auto ch :s)\\n            fre[ch-\\'a\\']++;\\n        int ans =-1;\\n        for(int i=0;i<26;i++){\\n            if(fre[i]>=2){ // if frequency is greater than or equal to 2 then search the first position from start and end of that char ... that will be substring that starting and ending with same char\\n                int l=0;\\n                int h = s.size()-1;\\n                while(s[l]!= char(i+\\'a\\'))\\n                    l++;\\n                while(s[h]!=char(i+\\'a\\'))\\n                    h--;\\n                // cout<<l<<\" \"<<h<<endl;\\n                ans = max(ans , h-l-1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```\\n\\n**happy coding**",
                "solutionTags": [
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int> fre(26);\\n        for(auto ch :s)\\n            fre[ch-\\'a\\']++;\\n        int ans =-1;\\n        for(int i=0;i<26;i++){\\n            if(fre[i]>=2){ // if frequency is greater than or equal to 2 then search the first position from start and end of that char ... that will be substring that starting and ending with same char\\n                int l=0;\\n                int h = s.size()-1;\\n                while(s[l]!= char(i+\\'a\\'))\\n                    l++;\\n                while(s[h]!=char(i+\\'a\\'))\\n                    h--;\\n                // cout<<l<<\" \"<<h<<endl;\\n                ans = max(ans , h-l-1);\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "C++"
            },
            {
                "id": 1043598,
                "title": "js-clean-solution-76ms-with-lastindexof",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = 0;\\n\\n    for(let i = 0;i < s.length;i++){\\n        let last = s.lastIndexOf(s[i]);\\n\\t\\t\\n        if(i !== last) max = Math.max(max,last - i);\\n    }\\n\\n    return max - 1\\n};\\n```\\n\\nTime: 76ms\\nSpace: 37.8MB\\nPlease let me know if you have any suggestions!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let max = 0;\\n\\n    for(let i = 0;i < s.length;i++){\\n        let last = s.lastIndexOf(s[i]);\\n\\t\\t\\n        if(i !== last) max = Math.max(max,last - i);\\n    }\\n\\n    return max - 1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1028984,
                "title": "faster-than-97-09-of-javascript-online-submissions",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n\\tlet diffArr=[]\\n\\ts=s.split(\\'\\')\\n    for(let i=0;i<s.length;i++){\\n\\t\\t\\n\\t\\tlet curpos=s.indexOf(s[i])\\n\\t\\tlet tmp=s[i]\\n\\t\\ts[i]=0\\n\\t\\tif(s.lastIndexOf(tmp)>0 && curpos!=s.lastIndexOf(tmp)) \\n\\t\\t\\tdiffArr.push(s.lastIndexOf(tmp)-curpos-1)\\n\\t\\tconsole.log(s.indexOf(tmp),curpos)\\n\\t}\\n\\tconsole.log(diffArr)\\n\\tif(diffArr.length)\\n\\t\\treturn Math.max(...diffArr)\\n\\telse\\n\\t\\treturn -1\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n\\tlet diffArr=[]\\n\\ts=s.split(\\'\\')\\n    for(let i=0;i<s.length;i++){\\n\\t\\t\\n\\t\\tlet curpos=s.indexOf(s[i])\\n\\t\\tlet tmp=s[i]\\n\\t\\ts[i]=0\\n\\t\\tif(s.lastIndexOf(tmp)>0 && curpos!=s.lastIndexOf(tmp)) \\n\\t\\t\\tdiffArr.push(s.lastIndexOf(tmp)-curpos-1)\\n\\t\\tconsole.log(s.indexOf(tmp),curpos)\\n\\t}\\n\\tconsole.log(diffArr)\\n\\tif(diffArr.length)\\n\\t\\treturn Math.max(...diffArr)\\n\\telse\\n\\t\\treturn -1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 1027924,
                "title": "c-speed-mem-o-n-o-1",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int letter[26] = {};\\n        int max_cnt = -1;\\n        \\n        for(int i=0; i< s.size(); i++){\\n            \\n            int idx = s[i]-\\'a\\';\\n            \\n            // letter appears for the first time in s\\n            if(letter[idx] == 0)\\n                letter[idx] = i+1;\\n            \\n            else\\n                max_cnt = max(max_cnt, i-letter[idx]); \\n        }\\n        \\n        return max_cnt;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int letter[26] = {};\\n        int max_cnt = -1;\\n        \\n        for(int i=0; i< s.size(); i++){\\n            \\n            int idx = s[i]-\\'a\\';\\n            \\n            // letter appears for the first time in s\\n            if(letter[idx] == 0)\\n                letter[idx] = i+1;\\n            \\n            else\\n                max_cnt = max(max_cnt, i-letter[idx]); \\n        }\\n        \\n        return max_cnt;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 1016623,
                "title": "easy-clear-solution-python-3",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        occ=dict()\\n        mx=-1\\n        for i in range(0,len(s)):\\n            if s[i] in occ.keys():\\n                if i-occ[s[i]]-1>mx:\\n                    mx=i-occ[s[i]]-1\\n            else:\\n                occ.update({s[i]:i})\\n        return mx\\n```",
                "solutionTags": [
                    "Python",
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        occ=dict()\\n        mx=-1\\n        for i in range(0,len(s)):\\n            if s[i] in occ.keys():\\n                if i-occ[s[i]]-1>mx:\\n                    mx=i-occ[s[i]]-1\\n            else:\\n                occ.update({s[i]:i})\\n        return mx\\n```",
                "codeTag": "Java"
            },
            {
                "id": 959944,
                "title": "pyhton3-one-pass-beat-99-94",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans=-1\\n        seen={}\\n        for i,j in enumerate(s):\\n            if j in seen:\\n                ans=max(ans,i-seen[j]-1)\\n            else:\\n                seen[j]=i\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans=-1\\n        seen={}\\n        for i,j in enumerate(s):\\n            if j in seen:\\n                ans=max(ans,i-seen[j]-1)\\n            else:\\n                seen[j]=i\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 950346,
                "title": "javascript-solution",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    const n = s.length;\\n    const start = new Array(26).fill(-1);\\n    let max = -1;\\n    \\n    for (let i = 0; i < n; i++) {\\n        const index = s.charAt(i).charCodeAt(0) - 97;\\n        \\n        if (start[index] === -1) start[index] = i;\\n        else max = Math.max(max, i - start[index] - 1);        \\n    }\\n    \\n    return max;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    const n = s.length;\\n    const start = new Array(26).fill(-1);\\n    let max = -1;\\n    \\n    for (let i = 0; i < n; i++) {\\n        const index = s.charAt(i).charCodeAt(0) - 97;\\n        \\n        if (start[index] === -1) start[index] = i;\\n        else max = Math.max(max, i - start[index] - 1);        \\n    }\\n    \\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 946685,
                "title": "java-solution-o-n",
                "content": "```\\nclass Solution {\\n\\t\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\t\\tint[] lastIndex = new int[26];\\n\\t\\t\\tboolean visited[] = new boolean[26];    \\n\\t\\t\\tfor(int i = 0; i < s.length(); i++) {\\n\\t\\t\\t\\tlastIndex[s.charAt(i) - \\'a\\'] = i;\\n\\t\\t\\t\\tif(!visited[s.charAt(i) - \\'a\\']){\\n\\t\\t\\t\\t\\tvisited[s.charAt(i) - \\'a\\'] = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tint max = Integer.MIN_VALUE;    \\n\\t\\t\\tfor(int i = 0; i < s.length(); i++){\\n\\t\\t\\t\\tif(visited[s.charAt(i) - \\'a\\']){\\n\\t\\t\\t\\t\\tmax = Math.max(max, lastIndex[s.charAt(i) - \\'a\\'] - i);\\n\\t\\t\\t\\t\\tvisited[s.charAt(i) - \\'a\\'] = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} \\n\\t\\t\\treturn max == Integer.MIN_VALUE ? -1 : max-1;\\n\\t\\t}\\n\\t}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n\\t\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\t\\tint[] lastIndex = new int[26];\\n\\t\\t\\tboolean visited[] = new boolean[26];    \\n\\t\\t\\tfor(int i = 0; i < s.length(); i++) {\\n\\t\\t\\t\\tlastIndex[s.charAt(i) - \\'a\\'] = i;\\n\\t\\t\\t\\tif(!visited[s.charAt(i) - \\'a\\']){\\n\\t\\t\\t\\t\\tvisited[s.charAt(i) - \\'a\\'] = true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\tint max = Integer.MIN_VALUE;    \\n\\t\\t\\tfor(int i = 0; i < s.length(); i++){\\n\\t\\t\\t\\tif(visited[s.charAt(i) - \\'a\\']){\\n\\t\\t\\t\\t\\tmax = Math.max(max, lastIndex[s.charAt(i) - \\'a\\'] - i);\\n\\t\\t\\t\\t\\tvisited[s.charAt(i) - \\'a\\'] = false;\\n\\t\\t\\t\\t}\\n\\t\\t\\t} \\n\\t\\t\\treturn max == Integer.MIN_VALUE ? -1 : max-1;\\n\\t\\t}\\n\\t}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 942229,
                "title": "python3-clean-solution-using-two-pointer-approach",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        n = len(s) - 1\\n        max_sub = 0\\n        found = False\\n        for i in range(n):\\n            left = i\\n            right = n\\n            \\n            while left < right:\\n                if s[left] != s[right]:\\n                    right -=1\\n                elif s[left] == s[right]:\\n                    found = True\\n                    max_sub = max(max_sub,(right-left)-1)\\n                    break\\n        if not found:\\n            return -1\\n        return max_sub\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        n = len(s) - 1\\n        max_sub = 0\\n        found = False\\n        for i in range(n):\\n            left = i\\n            right = n\\n            \\n            while left < right:\\n                if s[left] != s[right]:\\n                    right -=1\\n                elif s[left] == s[right]:\\n                    found = True\\n                    max_sub = max(max_sub,(right-left)-1)\\n                    break\\n        if not found:\\n            return -1\\n        return max_sub\\n```",
                "codeTag": "Java"
            },
            {
                "id": 940979,
                "title": "java-2-for-loop-0ms",
                "content": "```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int len = s.length();\\n        int largest = -1;        \\n        for (int i = 0; i < len; i++) {            \\n            for (int j = len-1; j > i+largest+1; j--) {                \\n                if (s.charAt(i) == s.charAt(j)) {\\n                    largest = j-i-1;\\n                    break;\\n                }\\n            }\\n        }\\n        return largest;\\n    }\\n",
                "solutionTags": [],
                "code": "```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int len = s.length();\\n        int largest = -1;        \\n        for (int i = 0; i < len; i++) {            \\n            for (int j = len-1; j > i+largest+1; j--) {                \\n                if (s.charAt(i) == s.charAt(j)) {\\n                    largest = j-i-1;\\n                    break;\\n                }\\n            }\\n        }\\n        return largest;\\n    }\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 932279,
                "title": "clean-javascript-solution",
                "content": "```\\n// time O(n) space O(n)\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    const map = {}\\n    let maxDiff = 0\\n    let firstIndex = 0\\n    let lastIndex = 0\\n    \\n    for(let i=0; i<s.length; i++) {\\n        const letter = s[i]\\n        \\n        if(map[letter]) {\\n            map[letter] = {\\n                value: map[letter].value + 1,\\n                indices: [...map[letter].indices, i]\\n            }\\n        } else {\\n            map[letter] = {\\n                value: 1,\\n                indices: [i]\\n            }\\n        }\\n    }\\n\\n    for(const key in map) {\\n        if(map[key].value >= 2) {\\n            const firstIdx = map[key].indices[0]\\n            const lastIdx = map[key].indices[map[key].indices.length - 1]\\n            const diff = lastIdx - firstIdx\\n            maxDiff = Math.max(maxDiff, diff)  \\n        }\\n    }\\n    \\n    return maxDiff - 1\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// time O(n) space O(n)\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    const map = {}\\n    let maxDiff = 0\\n    let firstIndex = 0\\n    let lastIndex = 0\\n    \\n    for(let i=0; i<s.length; i++) {\\n        const letter = s[i]\\n        \\n        if(map[letter]) {\\n            map[letter] = {\\n                value: map[letter].value + 1,\\n                indices: [...map[letter].indices, i]\\n            }\\n        } else {\\n            map[letter] = {\\n                value: 1,\\n                indices: [i]\\n            }\\n        }\\n    }\\n\\n    for(const key in map) {\\n        if(map[key].value >= 2) {\\n            const firstIdx = map[key].indices[0]\\n            const lastIdx = map[key].indices[map[key].indices.length - 1]\\n            const diff = lastIdx - firstIdx\\n            maxDiff = Math.max(maxDiff, diff)  \\n        }\\n    }\\n    \\n    return maxDiff - 1\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 928482,
                "title": "java-faster-then-100-linear-easy-with-dictionary",
                "content": "```\\nclass Solution {\\n    \\n    private static final int VAL_A = (int) \\'a\\';\\n    private static final int VAL_Z = (int) \\'z\\';\\n    private static final int NOT_FOUND = -1;\\n    \\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        var alphabet = new int[VAL_Z - VAL_A + 1];\\n        Arrays.fill(alphabet, NOT_FOUND);\\n        \\n        var result = NOT_FOUND;\\n        for (int i = 0; i < s.length(); i++) {\\n            var alphabetIdx = s.charAt(i) - VAL_A;\\n            if (alphabet[alphabetIdx] == NOT_FOUND) {\\n                alphabet[alphabetIdx] = i;\\n                continue;\\n            }\\n            \\n            var distance = i - (alphabet[alphabetIdx] + 1);\\n            if (distance > result) {\\n                result = distance;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    \\n    private static final int VAL_A = (int) \\'a\\';\\n    private static final int VAL_Z = (int) \\'z\\';\\n    private static final int NOT_FOUND = -1;\\n    \\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        var alphabet = new int[VAL_Z - VAL_A + 1];\\n        Arrays.fill(alphabet, NOT_FOUND);\\n        \\n        var result = NOT_FOUND;\\n        for (int i = 0; i < s.length(); i++) {\\n            var alphabetIdx = s.charAt(i) - VAL_A;\\n            if (alphabet[alphabetIdx] == NOT_FOUND) {\\n                alphabet[alphabetIdx] = i;\\n                continue;\\n            }\\n            \\n            var distance = i - (alphabet[alphabetIdx] + 1);\\n            if (distance > result) {\\n                result = distance;\\n            }\\n        }\\n        \\n        return result;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 924382,
                "title": "c-easy-code-with-explanation-o-n-solution",
                "content": "\\tclass Solution {\\n\\tpublic:\\n\\t\\tint maxLengthBetweenEqualCharacters(string s) {\\n\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\tunordered_map<char,int> m; // used to store the end position of different character\\n\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\n\\t\\t\\t\\tchar ch = s[i];\\n\\n\\t\\t\\t\\tif(m.count(ch))  // if current char is already present, then update the last position\\n\\t\\t\\t\\t\\tm[ch] = i;\\n\\t\\t\\t\\telse             //if not present, then add in hash-map\\n\\t\\t\\t\\t\\tm[ch] = i;\\n\\n\\t\\t\\t}\\n\\n\\t\\t\\tint maxAns = INT_MIN;\\n\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\n\\t\\t\\t\\tchar curr_char = s[i]; \\n\\n\\t\\t\\t\\tint end_position_of_curr_char = m[curr_char];\\n\\n\\t\\t\\t\\tint len = end_position_of_curr_char - i - 1;\\n\\n\\t\\t\\t\\tmaxAns = max(maxAns,len);\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn maxAns;\\n\\n\\t\\t}\\n\\t};",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint maxLengthBetweenEqualCharacters(string s) {\\n\\n\\t\\t\\tint n = s.length();\\n\\t\\t\\tunordered_map<char,int> m; // used to store the end position of different character\\n\\n\\t\\t\\tfor(int i=0;i<n;i++){\\n\\n\\t\\t\\t\\tchar ch = s[i];\\n\\n\\t\\t\\t\\tif(m.count(ch))  // if current char is already present, then update the last position\\n\\t\\t\\t\\t\\tm[ch] = i;\\n\\t\\t\\t\\telse             //if not present, then add in hash-map\\n\\t\\t\\t\\t\\tm[ch] = i;\\n\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 921826,
                "title": "easy-c-solution",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int mx = INT_MIN;\\n        bool flag = false;\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            for(int j = i + 1; j < s.length(); j++)\\n            {\\n                int dis = 0;\\n                if(s[j] == s[i])\\n                {\\n                    dis = j - i - 1;\\n                    flag = true;\\n                }\\n                mx = max(mx, dis);\\n            }\\n        }\\n        if(flag)\\n            return mx;\\n        else\\n            return -1;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int mx = INT_MIN;\\n        bool flag = false;\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            for(int j = i + 1; j < s.length(); j++)\\n            {\\n                int dis = 0;\\n                if(s[j] == s[i])\\n                {\\n                    dis = j - i - 1;\\n                    flag = true;\\n                }\\n                mx = max(mx, dis);\\n            }\\n        }\\n        if(flag)\\n            return mx;\\n        else\\n            return -1;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 901761,
                "title": "o-n-time-o-1-space-java-100",
                "content": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] firstOccurrence = new int[26];\\n        Arrays.fill(firstOccurrence,-1);\\n        int max = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n            if(firstOccurrence[c - \\'a\\'] == -1)\\n            {\\n                firstOccurrence[c - \\'a\\'] = i;\\n            }\\n            else\\n            {\\n                max = Math.max(max, i-firstOccurrence[c - \\'a\\']);\\n            }\\n        }\\n        \\n        return max-1;\\n    }",
                "solutionTags": [],
                "code": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] firstOccurrence = new int[26];\\n        Arrays.fill(firstOccurrence,-1);\\n        int max = 0;\\n        \\n        for(int i=0; i<s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n            if(firstOccurrence[c - \\'a\\'] == -1)\\n            {\\n                firstOccurrence[c - \\'a\\'] = i;\\n            }\\n            else\\n            {\\n                max = Math.max(max, i-firstOccurrence[c - \\'a\\']);\\n            }\\n        }\\n        \\n        return max-1;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 901746,
                "title": "python-28ms-14mb",
                "content": "IDEA: iterate over the string and save the first and last appearances of each relevant letter in dictionary\\nat the same time save the the greatest distance and update if relevant.\\n\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        first = dict()\\n        second = dict()\\n        ans = -1\\n        for i in range(len(s)):\\n            if s[i] in first:\\n                second[s[i]] = i\\n                if i - first[s[i]] - 1 > ans:\\n                    ans = i - first[s[i]] - 1\\n            else:\\n                first[s[i]] = i\\n        return ans\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        first = dict()\\n        second = dict()\\n        ans = -1\\n        for i in range(len(s)):\\n            if s[i] in first:\\n                second[s[i]] = i\\n                if i - first[s[i]] - 1 > ans:\\n                    ans = i - first[s[i]] - 1\\n            else:\\n                first[s[i]] = i\\n        return ans\\n```",
                "codeTag": "Java"
            },
            {
                "id": 900934,
                "title": "rust-0ms-100",
                "content": "```rust\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        use std::collections::HashMap;\\n\\n        let mut ans = -1;\\n        let mut map = HashMap::<char, i32>::new();\\n        for (i, ch) in s.chars().enumerate() {\\n            let entry = map.entry(ch).or_insert(-1);\\n            if *entry == -1 {\\n                *entry = i as i32;\\n            } else {\\n                ans = std::cmp::max(ans, i as i32 - *entry - 1);\\n            }\\n        }\\n        ans\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"aa\".to_owned()),\\n            0\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_02() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"abca\".to_owned()),\\n            2\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_03() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"cbzxy\".to_owned()),\\n            -1\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_04() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"cabbac\".to_owned()),\\n            4\\n        );\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```rust\\nimpl Solution {\\n    pub fn max_length_between_equal_characters(s: String) -> i32 {\\n        use std::collections::HashMap;\\n\\n        let mut ans = -1;\\n        let mut map = HashMap::<char, i32>::new();\\n        for (i, ch) in s.chars().enumerate() {\\n            let entry = map.entry(ch).or_insert(-1);\\n            if *entry == -1 {\\n                *entry = i as i32;\\n            } else {\\n                ans = std::cmp::max(ans, i as i32 - *entry - 1);\\n            }\\n        }\\n        ans\\n    }\\n}\\n\\n#[cfg(test)]\\nmod tests {\\n    use super::*;\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"aa\".to_owned()),\\n            0\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_02() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"abca\".to_owned()),\\n            2\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_03() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"cbzxy\".to_owned()),\\n            -1\\n        );\\n    }\\n\\n    #[test]\\n    fn test_max_length_between_equal_characters_04() {\\n        assert_eq!(\\n            Solution::max_length_between_equal_characters(\"cabbac\".to_owned()),\\n            4\\n        );\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 900643,
                "title": "c-java-faster-than-100-and-100-memory-easy-to-understand",
                "content": "if you like it please up vote\\n\\nC++\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int res = -1;\\n        map<char,int> map;\\n        \\n        for(int i =0;i<s.length();i++){\\n            if(map.count(s[i])){\\n                res = max(res,i-1-map[s[i]]);\\n            }\\n            else map[s[i]] = i;\\n        }\\n        return res;\\n        \\n    }\\n};\\n```\\n\\nJava\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res = -1;\\n        Map<Character,Integer> map = new HashMap<>();\\n        for(int i =0;i<s.length();i++){\\n            if(map.containsKey(s.charAt(i))){\\n                res = Math.max(res,i-1-map.get(s.charAt(i)));\\n            }\\n            else map.put(s.charAt(i),i);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int res = -1;\\n        map<char,int> map;\\n        \\n        for(int i =0;i<s.length();i++){\\n            if(map.count(s[i])){\\n                res = max(res,i-1-map[s[i]]);\\n            }\\n            else map[s[i]] = i;\\n        }\\n        return res;\\n        \\n    }\\n};\\n```\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int res = -1;\\n        Map<Character,Integer> map = new HashMap<>();\\n        for(int i =0;i<s.length();i++){\\n            if(map.containsKey(s.charAt(i))){\\n                res = Math.max(res,i-1-map.get(s.charAt(i)));\\n            }\\n            else map.put(s.charAt(i),i);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 900526,
                "title": "java-c-python-clean-concise-code-hashmap-approach",
                "content": "**Java**\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        HashMap<Character, Integer> hm = new HashMap<>();\\n        int length = s.length(), max = -1;\\n        for(int i = 0; i < length; i += 1) {\\n            char ch = s.charAt(i);\\n            if(hm.containsKey(ch)) {\\n                max = Math.max(max, (i - hm.get(ch)));\\n            }else {\\n                hm.put(ch, i + 1);\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n```\\n**C++**\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char, int> umap;\\n        int length = s.length(), maxLen = -1;\\n        for(int i = 0; i < length; i += 1) {\\n            char ch = s[i];\\n            if(umap.count(ch) == 1) {\\n                maxLen = max(maxLen, (i - umap[ch]));\\n            }else {\\n                umap[ch] = i + 1;\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n};\\n```\\n**Python**\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        max_length = -1\\n        hm = {}\\n        for i in range(len(s)):\\n            if s[i] in hm:\\n                max_length = max(max_length, (i  - hm[s[i]]))\\n            else:\\n                hm[s[i]] = i + 1\\n        return max_length;\\n```\\n**If you like it then please upvote my post**",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        HashMap<Character, Integer> hm = new HashMap<>();\\n        int length = s.length(), max = -1;\\n        for(int i = 0; i < length; i += 1) {\\n            char ch = s.charAt(i);\\n            if(hm.containsKey(ch)) {\\n                max = Math.max(max, (i - hm.get(ch)));\\n            }else {\\n                hm.put(ch, i + 1);\\n            }\\n        }\\n        \\n        return max;\\n    }\\n}\\n```\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        unordered_map<char, int> umap;\\n        int length = s.length(), maxLen = -1;\\n        for(int i = 0; i < length; i += 1) {\\n            char ch = s[i];\\n            if(umap.count(ch) == 1) {\\n                maxLen = max(maxLen, (i - umap[ch]));\\n            }else {\\n                umap[ch] = i + 1;\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n};\\n```\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        max_length = -1\\n        hm = {}\\n        for i in range(len(s)):\\n            if s[i] in hm:\\n                max_length = max(max_length, (i  - hm[s[i]]))\\n            else:\\n                hm[s[i]] = i + 1\\n        return max_length;\\n```",
                "codeTag": "Java"
            },
            {
                "id": 900313,
                "title": "java-simple-solution-using-array-o-n-with-explanation",
                "content": "Create a bucket to store the first occurance of every unique character in the string. While traversing the string, calculate the max distance between every occurance and first occurance of the characters.\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] bucket = new int[26];\\n        Arrays.fill(bucket, -1);\\n        int res = -1;\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(bucket[c - \\'a\\'] == -1) \\n                bucket[c - \\'a\\'] = i;\\n            else \\n                res = Math.max(res, (i - bucket[c - \\'a\\']) - 1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int[] bucket = new int[26];\\n        Arrays.fill(bucket, -1);\\n        int res = -1;\\n        for(int i=0; i<s.length(); i++) {\\n            char c = s.charAt(i);\\n            if(bucket[c - \\'a\\'] == -1) \\n                bucket[c - \\'a\\'] = i;\\n            else \\n                res = Math.max(res, (i - bucket[c - \\'a\\']) - 1);\\n        }\\n        return res;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899763,
                "title": "c-simple-o-n-using-hashmap",
                "content": "int maxLengthBetweenEqualCharacters(string s)   {\\n\\n        unordered_map<char,int> uMap;\\n        int max = -1;\\n        for(int i=0; i < s.size(); i++)\\n        {\\n            if (uMap.count(s[i])) {\\n                if(i-uMap[s[i]]-1 > max)\\n                    max = i-uMap[s[i]]-1;\\n            } else {\\n                uMap[s[i]]=i;\\n            }\\n        }\\n        return max;\\n    }",
                "solutionTags": [],
                "code": "int maxLengthBetweenEqualCharacters(string s)   {\\n\\n        unordered_map<char,int> uMap;\\n        int max = -1;\\n        for(int i=0; i < s.size(); i++)\\n        {\\n            if (uMap.count(s[i])) {\\n                if(i-uMap[s[i]]-1 > max)\\n                    max = i-uMap[s[i]]-1;\\n            } else {\\n                uMap[s[i]]=i;\\n            }\\n        }\\n        return max;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 899755,
                "title": "java-simple-o-n-loop",
                "content": "```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int ml = -1, l = s.length();  // ml, maxlen\\n        int[] left = new int[26];\\n        Arrays.fill(left, -1);\\n        for (int i = 0; i < l; i++) {\\n            int d = s.charAt(i) - \\'a\\';\\n            if (left[d] == -1)  left[d] = i;\\n            else ml = Math.max(ml, i - left[d] - 1);\\n        }\\n        return ml;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int ml = -1, l = s.length();  // ml, maxlen\\n        int[] left = new int[26];\\n        Arrays.fill(left, -1);\\n        for (int i = 0; i < l; i++) {\\n            int d = s.charAt(i) - \\'a\\';\\n            if (left[d] == -1)  left[d] = i;\\n            else ml = Math.max(ml, i - left[d] - 1);\\n        }\\n        return ml;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899726,
                "title": "java-store-the-first-index",
                "content": "```\\n\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] chars = new int[26];\\n        int ans = -1, i = 0;\\n        Arrays.fill(chars, -1);\\n        for(int c : s.toCharArray()){\\n            int index = (int)(c - \\'a\\');\\n            if(chars[index] == -1){\\n                chars[index] = i;\\n            } else {\\n                ans = Math.max(ans, i - chars[index] - 1);\\n            }\\n            i++;\\n        }\\n        return ans;\\n    }\\n```",
                "solutionTags": [],
                "code": "```\\n\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] chars = new int[26];\\n        int ans = -1, i = 0;\\n        Arrays.fill(chars, -1);\\n        for(int c : s.toCharArray()){\\n            int index = (int)(c - \\'a\\');\\n            if(chars[index] == -1){\\n                chars[index] = i;\\n            } else {\\n                ans = Math.max(ans, i - chars[index] - 1);\\n            }\\n            i++;\\n        }\\n        return ans;\\n    }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899639,
                "title": "1624-largest-substring-between-two-equal-characters-javascript-solution",
                "content": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {      \\n    let res = -1;\\n    let map = {};\\n    \\n    for (let i = 0; i < s.length; i++) {    \\n        map[s[i]] = i;\\n    }\\n    \\n    for (let i = 0; i < s.length; i++)  {\\n        res = Math.max(res, map[s[i]] - i - 1);\\n    }\\n    return res;\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar maxLengthBetweenEqualCharacters = function(s) {      \\n    let res = -1;\\n    let map = {};\\n    \\n    for (let i = 0; i < s.length; i++) {    \\n        map[s[i]] = i;\\n    }\\n    \\n    for (let i = 0; i < s.length; i++)  {\\n        res = Math.max(res, map[s[i]] - i - 1);\\n    }\\n    return res;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899636,
                "title": "python-hashmap-solution",
                "content": "```python\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        res, seen = -1, {}\\n        \\n        for i, l in enumerate(s):\\n            if l in seen:\\n                res = max(res, i - seen[l] - 1)\\n            if l not in seen:\\n                seen[l] = i\\n            \\n        return res\\n```",
                "solutionTags": [
                    "Python"
                ],
                "code": "```python\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        res, seen = -1, {}\\n        \\n        for i, l in enumerate(s):\\n            if l in seen:\\n                res = max(res, i - seen[l] - 1)\\n            if l not in seen:\\n                seen[l] = i\\n            \\n        return res\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899622,
                "title": "java-o-n-easy-to-understand",
                "content": "1 use HashMap to record the index list of each char\\n2 for each char key of HashMap, calculate the first and last index of current char to update ans\\n\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character, List<Integer>> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch = s.charAt(i);\\n            map.putIfAbsent(ch, new ArrayList<>());\\n            map.get(ch).add(i);\\n        }\\n        \\n        int maxLen = -1;\\n        for (char key: map.keySet()) {\\n            if (map.get(key).size() >= 2) {\\n                List<Integer> index = map.get(key);\\n                maxLen = Math.max(maxLen, index.get(index.size() - 1) - index.get(0) - 1);\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character, List<Integer>> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char ch = s.charAt(i);\\n            map.putIfAbsent(ch, new ArrayList<>());\\n            map.get(ch).add(i);\\n        }\\n        \\n        int maxLen = -1;\\n        for (char key: map.keySet()) {\\n            if (map.get(key).size() >= 2) {\\n                List<Integer> index = map.get(key);\\n                maxLen = Math.max(maxLen, index.get(index.size() - 1) - index.get(0) - 1);\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899619,
                "title": "java-solution",
                "content": "\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        int res = -1;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)){\\n                res = Math.max(res, i - map.get(c) - 1);\\n            }\\n            map.putIfAbsent(c, i);\\n        }\\n        return res;\\n    }",
                "solutionTags": [],
                "code": "\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character, Integer> map = new HashMap<>();\\n        int res = -1;\\n        for(int i=0;i<s.length();i++){\\n            char c = s.charAt(i);\\n            if(map.containsKey(c)){\\n                res = Math.max(res, i - map.get(c) - 1);\\n            }\\n            map.putIfAbsent(c, i);\\n        }\\n        return res;\\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 899616,
                "title": "c-o-n-time-and-o-1-space-one-pass",
                "content": "We will use `unordered_map` but since we will at max store only 26 keys, technically the space complexity is O(1). You can also use vector of length 26\\n\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int maxLen = -1;\\n        int n = s.size();\\n        unordered_map<char, int> seen;\\n        \\n        for(int i = 0; i < n; ++i) {\\n            char curr = s[i];\\n            \\n            if(seen.find(curr) != seen.end()) \\n                maxLen = max(maxLen, i - seen[curr] - 1);\\n            else \\n                seen[curr] = i;\\n        }\\n        \\n        return maxLen;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++",
                    "C"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int maxLen = -1;\\n        int n = s.size();\\n        unordered_map<char, int> seen;\\n        \\n        for(int i = 0; i < n; ++i) {\\n            char curr = s[i];\\n            \\n            if(seen.find(curr) != seen.end()) \\n                maxLen = max(maxLen, i - seen[curr] - 1);\\n            else \\n                seen[curr] = i;\\n        }\\n        \\n        return maxLen;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899601,
                "title": "python-java-solution",
                "content": "\\tclass Solution:\\n\\t\\tdef maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n\\t\\t\\td = {}\\n\\t\\t\\tres = -1\\n\\t\\t\\tfor i in range(len(s)):\\n\\t\\t\\t\\tif s[i] not in d:\\n\\t\\t\\t\\t\\td[s[i]] = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tres = max(res, i - d[s[i]] - 1)\\n\\t\\t\\treturn res\\n\\t\\t\\t\\n\\t\\t\\t\\n\\tclass Solution {\\n\\t\\tpublic int maxLengthBetweenEqualCharacters(String s) {\\n\\t\\t\\tHashMap <Character, Integer> idx = new HashMap<>();\\n\\t\\t\\tint res = -1;\\n\\t\\t\\tfor (int i = 0; i < s.length(); i ++){\\n\\t\\t\\t\\tif (!idx.containsKey(s.charAt(i))){\\n\\t\\t\\t\\t\\tidx.put(s.charAt(i), i);\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse{\\n\\t\\t\\t\\t\\tres = Math.max(res, i - idx.get(s.charAt(i)) - 1);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn res;\\n\\t\\t}\\n\\t}",
                "solutionTags": [],
                "code": "class Solution:\\n\\t\\tdef maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n\\t\\t\\td = {}",
                "codeTag": "Java"
            },
            {
                "id": 899587,
                "title": "java-no-map-solution",
                "content": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n       int n = s.length(); \\n        int res = -1; \\n          \\n        for (int i = 0; i < n - 1; i++) \\n            for (int j = i + 1; j < n; j++) \\n                if (s.charAt(i) == s.charAt(j)) \\n                    res = Math.max(res,  Math.abs(j - i - 1)); \\n                           \\n        return res; \\n    }",
                "solutionTags": [],
                "code": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n       int n = s.length(); \\n        int res = -1; \\n          \\n        for (int i = 0; i < n - 1; i++) \\n            for (int j = i + 1; j < n; j++) \\n                if (s.charAt(i) == s.charAt(j)) \\n                    res = Math.max(res,  Math.abs(j - i - 1)); \\n                           \\n        return res; \\n    }",
                "codeTag": "Unknown"
            },
            {
                "id": 899576,
                "title": "c-o-n-time-o-1-space",
                "content": "idea: Record the minimum index of that letter\\n\\t\\n\\tclass Solution {\\n\\tpublic:\\n\\t\\tint maxLengthBetweenEqualCharacters(string s) {\\n\\t\\t\\tint l = -1;\\n\\t\\t\\tint n = s.size();\\n\\t\\t\\tvector<int> ind(26, n);\\n\\t\\t\\tfor(int i = 0; i < n; ++i){\\n\\t\\t\\t\\tind[s[i]-\\'a\\'] = min(i, ind[s[i]-\\'a\\']);\\n\\t\\t\\t\\tl = max(l, i-ind[s[i]-\\'a\\']-1);\\n\\t\\t\\t}\\n\\t\\t\\treturn l;\\n\\t\\t}\\n\\t};",
                "solutionTags": [],
                "code": "class Solution {\\n\\tpublic:\\n\\t\\tint maxLengthBetweenEqualCharacters(string s) {\\n\\t\\t\\tint l = -1;\\n\\t\\t\\tint n = s.size();\\n\\t\\t\\tvector<int> ind(26, n);\\n\\t\\t\\tfor(int i = 0; i < n; ++i){\\n\\t\\t\\t\\tind[s[i]-\\'a\\'] = min(i, ind[s[i]-\\'a\\']);\\n\\t\\t\\t\\tl = max(l, i-ind[s[i]-\\'a\\']-1);\\n\\t\\t\\t}",
                "codeTag": "Java"
            },
            {
                "id": 899559,
                "title": "java-simple",
                "content": "```\\nint ch1[]=new int[26];\\n           int max=-1;\\n        for(int i=0;i<s.length();i++){\\n            if(ch1[s.charAt(i)-\\'a\\']>0){\\n                max=Math.max(max,i-ch1[s.charAt(i)-\\'a\\']);\\n                }\\n             else \\n               ch1[s.charAt(i)-\\'a\\']=i+1;\\n        }\\n      \\n        return max;\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nint ch1[]=new int[26];\\n           int max=-1;\\n        for(int i=0;i<s.length();i++){\\n            if(ch1[s.charAt(i)-\\'a\\']>0){\\n                max=Math.max(max,i-ch1[s.charAt(i)-\\'a\\']);\\n                }\\n             else \\n               ch1[s.charAt(i)-\\'a\\']=i+1;\\n        }\\n      \\n        return max;\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899525,
                "title": "c-o-n-time-o-1-space-solution-beats-100",
                "content": "```\\nclass Solution \\n{\\n    public:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n        int result=-1;\\n        int a[26][2];\\n        for(int i=0;i<26;i++) a[i][0]=-1,a[i][1]=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(a[s[i]-\\'a\\'][0]==-1) a[s[i]-\\'a\\'][0]=i;\\n            a[s[i]-\\'a\\'][1]=i;\\n        }\\n        for(int i=0;i<26;i++) result=max(result,a[i][1]-a[i][0]-1);\\n        return result;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution \\n{\\n    public:\\n    int maxLengthBetweenEqualCharacters(string s) \\n    {\\n        int result=-1;\\n        int a[26][2];\\n        for(int i=0;i<26;i++) a[i][0]=-1,a[i][1]=-1;\\n        for(int i=0;i<s.length();i++)\\n        {\\n            if(a[s[i]-\\'a\\'][0]==-1) a[s[i]-\\'a\\'][0]=i;\\n            a[s[i]-\\'a\\'][1]=i;\\n        }\\n        for(int i=0;i<26;i++) result=max(result,a[i][1]-a[i][0]-1);\\n        return result;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899523,
                "title": "python-6-lines-solution",
                "content": "```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans, d = -1, {}\\n        for end, c in enumerate(s):\\n            if c in d:\\n                ans = max(ans, end-d[c]-1)\\n            d.setdefault(c, end)\\n        return ans\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```python\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        ans, d = -1, {}\\n        for end, c in enumerate(s):\\n            if c in d:\\n                ans = max(ans, end-d[c]-1)\\n            d.setdefault(c, end)\\n        return ans\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 899504,
                "title": "python-map",
                "content": "\\tclass Solution(object):\\n\\t\\tdef maxLengthBetweenEqualCharacters(self, s):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type s: str\\n\\t\\t\\t:rtype: int\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tmaps = {}\\n\\t\\t\\tres = -1\\n\\t\\t\\tfor i in range(len(s)):\\n\\t\\t\\t\\tif s[i] not in maps:\\n\\t\\t\\t\\t\\tmaps[s[i]] = i\\n\\t\\t\\t\\telse:\\n\\t\\t\\t\\t\\tres = max(res, i - maps[s[i]] - 1)\\n\\t\\t\\treturn res",
                "solutionTags": [],
                "code": "class Solution(object):\\n\\t\\tdef maxLengthBetweenEqualCharacters(self, s):\\n\\t\\t\\t\"\"\"\\n\\t\\t\\t:type s: str\\n\\t\\t\\t:rtype: int\\n\\t\\t\\t\"\"\"\\n\\t\\t\\tmaps = {}",
                "codeTag": "Java"
            },
            {
                "id": 899500,
                "title": "easy-to-understand-python3-solution",
                "content": "```\\ndef maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        charSet = []\\n        res = float(\\'-inf\\')\\n\\t\\t\\n        for r in range(len(s)):\\n            l = 0\\n            for i in charSet:\\n                l += 1\\n                if i == s[r]:\\n                    res = max(res, r - l)\\n    \\n            charSet.append(s[r])\\n        \\n        if res != float(\\'-inf\\'):\\n            return res\\n        \\n        return -1\\n```",
                "solutionTags": [],
                "code": "```\\ndef maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        charSet = []\\n        res = float(\\'-inf\\')\\n\\t\\t\\n        for r in range(len(s)):\\n            l = 0\\n            for i in charSet:\\n                l += 1\\n                if i == s[r]:\\n                    res = max(res, r - l)\\n    \\n            charSet.append(s[r])\\n        \\n        if res != float(\\'-inf\\'):\\n            return res\\n        \\n        return -1\\n```",
                "codeTag": "Python3"
            },
            {
                "id": 899497,
                "title": "c-easy",
                "content": "````\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int>v(26,-1);\\n        int maxi=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1)\\n                v[s[i]-\\'a\\']=i;\\n            else{\\n                maxi=max(i-v[s[i]-\\'a\\']-1,maxi);\\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "solutionTags": [],
                "code": "````\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        vector<int>v(26,-1);\\n        int maxi=-1;\\n        for(int i=0;i<s.size();i++){\\n            if(v[s[i]-\\'a\\']==-1)\\n                v[s[i]-\\'a\\']=i;\\n            else{\\n                maxi=max(i-v[s[i]-\\'a\\']-1,maxi);\\n            }\\n        }\\n        return maxi;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899483,
                "title": "c-simple-brute-force",
                "content": "Simple, straight forward solution. \\n```\\nclass Solution\\n{\\npublic:\\n  int maxLengthBetweenEqualCharacters(string s)\\n  {\\n    int size = s.length();\\n    int answer = -1;\\n    for (int i = 0; i < size - 1; i++)\\n    {\\n      for (int j = i + 1; j < size; j++)\\n      {\\n        if (s[i] == s[j])\\n        {\\n          answer = max(answer, j - i - 1);\\n        }\\n      }\\n    }\\n    return answer;\\n  }\\n};\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution\\n{\\npublic:\\n  int maxLengthBetweenEqualCharacters(string s)\\n  {\\n    int size = s.length();\\n    int answer = -1;\\n    for (int i = 0; i < size - 1; i++)\\n    {\\n      for (int j = i + 1; j < size; j++)\\n      {\\n        if (s[i] == s[j])\\n        {\\n          answer = max(answer, j - i - 1);\\n        }\\n      }\\n    }\\n    return answer;\\n  }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899481,
                "title": "java-o-n-2",
                "content": "```\\n\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int longest = -1;\\n        \\n        for(int i = 0; i < s.length() - 1; i++)\\n        {\\n            for(int j = i + 1; j < s.length(); j++)\\n            {\\n                if(s.charAt(i) == s.charAt(j))\\n                {\\n                    int dist = j - i - 1;\\n                    longest = Math.max(longest, dist);\\n                }\\n            }\\n        }\\n        \\n        return longest;\\n    }\\n\\t\\n\\t```",
                "solutionTags": [],
                "code": "```\\n\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int longest = -1;\\n        \\n        for(int i = 0; i < s.length() - 1; i++)\\n        {\\n            for(int j = i + 1; j < s.length(); j++)\\n            {\\n                if(s.charAt(i) == s.charAt(j))\\n                {\\n                    int dist = j - i - 1;\\n                    longest = Math.max(longest, dist);\\n                }\\n            }\\n        }\\n        \\n        return longest;\\n    }\\n\\t\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 899478,
                "title": "javascirpt-map-solution",
                "content": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let map = new Map();\\n    let max = -1;\\n    for(let i=0; i<s.length; i++){\\n        if(map.has(s.charAt(i))){\\n            max = Math.max(max, i - map.get(s.charAt(i)) - 1);\\n        }else{\\n            map.set(s.charAt(i), i);\\n        }\\n    }\\n    return max;\\n};\\n```",
                "solutionTags": [],
                "code": "```\\n/**\\n * @param {string} s\\n * @return {number}\\n */\\nvar maxLengthBetweenEqualCharacters = function(s) {\\n    let map = new Map();\\n    let max = -1;\\n    for(let i=0; i<s.length; i++){\\n        if(map.has(s.charAt(i))){\\n            max = Math.max(max, i - map.get(s.charAt(i)) - 1);\\n        }else{\\n            map.set(s.charAt(i), i);\\n        }\\n    }\\n    return max;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 899469,
                "title": "java-easy-o-n-solution",
                "content": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] arr=new int[26];\\n        Arrays.fill(arr,-1);\\n        int ans=-1;\\n        for(int i=0;i<s.length();i++){\\n            \\n            if(arr[s.charAt(i)-\\'a\\']>=0){\\n                ans=Math.max(ans,i-arr[s.charAt(i)-\\'a\\']-1);\\n            }else{\\n                arr[s.charAt(i)-\\'a\\']=i;\\n            }\\n        }\\n        \\n       return ans; \\n    }\\n\\t```",
                "solutionTags": [],
                "code": "```\\npublic int maxLengthBetweenEqualCharacters(String s) {\\n        int[] arr=new int[26];\\n        Arrays.fill(arr,-1);\\n        int ans=-1;\\n        for(int i=0;i<s.length();i++){\\n            \\n            if(arr[s.charAt(i)-\\'a\\']>=0){\\n                ans=Math.max(ans,i-arr[s.charAt(i)-\\'a\\']-1);\\n            }else{\\n                arr[s.charAt(i)-\\'a\\']=i;\\n            }\\n        }\\n        \\n       return ans; \\n    }\\n\\t```",
                "codeTag": "Unknown"
            },
            {
                "id": 899453,
                "title": "c-easy-o-n",
                "content": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ans = -1;\\n        map<char, int> mp;\\n        if(s.length() == 1){\\n            return -1;\\n        }\\n        \\n        for(int i=0; i<s.length(); i++) {\\n            if(mp.find(s[i]) != mp.end()){\\n\\t\\t\\t\\t// Char occurred before, find difference between current occurence and first occurence.\\n\\t\\t\\t\\t// Is the difference greater than previous differences?\\n                ans = max(ans, (i-mp[s[i]]-1));\\n            } else {\\n\\t\\t\\t\\t// First occurence of char. Store \\'char\\'->index_of_first_occurrence.\\n                mp[s[i]] = i;\\n            }\\n        }        \\n        return ans;\\n    }\\n};",
                "solutionTags": [],
                "code": "class Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int ans = -1;\\n        map<char, int> mp;\\n        if(s.length() == 1){\\n            return -1;\\n        }",
                "codeTag": "Java"
            },
            {
                "id": 899449,
                "title": "java-on-easy-to-understand",
                "content": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = 0;\\n        boolean found = false;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (map.containsKey(c)) {\\n                found = true;\\n                max = Math.max(max, i - map.get(c) - 1);\\n            } else {\\n                map.put(c, i);\\n            }\\n        }\\n        return found ? max : -1;\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = 0;\\n        boolean found = false;\\n        Map<Character, Integer> map = new HashMap<>();\\n        for (int i = 0; i < s.length(); i++) {\\n            char c = s.charAt(i);\\n            if (map.containsKey(c)) {\\n                found = true;\\n                max = Math.max(max, i - map.get(c) - 1);\\n            } else {\\n                map.put(c, i);\\n            }\\n        }\\n        return found ? max : -1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 899445,
                "title": "swift-12ms",
                "content": "```\\nclass Solution {\\n    func maxLengthBetweenEqualCharacters(_ s: String) -> Int {\\n        var maxLength = -1\\n        var lastSeenIndex = [Character:Int]()\\n        \\n        for (i,s) in s.enumerated(){\\n            if let lastIndex = lastSeenIndex[s]{\\n                maxLength = max(maxLength, i - lastIndex - 1)\\n            }else{\\n                lastSeenIndex[s] = i\\n            }\\n        }\\n        \\n        return maxLength\\n    }\\n}\\n```",
                "solutionTags": [],
                "code": "```\\nclass Solution {\\n    func maxLengthBetweenEqualCharacters(_ s: String) -> Int {\\n        var maxLength = -1\\n        var lastSeenIndex = [Character:Int]()\\n        \\n        for (i,s) in s.enumerated(){\\n            if let lastIndex = lastSeenIndex[s]{\\n                maxLength = max(maxLength, i - lastIndex - 1)\\n            }else{\\n                lastSeenIndex[s] = i\\n            }\\n        }\\n        \\n        return maxLength\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4078955,
                "title": "easy-cpp-solution-beats-100-in-runtime-beginner-friendly",
                "content": "![image.png](https://assets.leetcode.com/users/images/998a1866-85bc-4079-a042-9d60e73b2ca4_1695443349.404541.png)\\n\\n# Intution\\n- To reduce the search space, we have used map to process only those char which are appearing more than once in the string.\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char, int> mp;\\n        for(auto i : s) mp[i]++;\\n        int sz = s.length();\\n        int ans = -1;\\n        for(auto i : mp){\\n            if(i.second > 1){\\n                int st=0, j=sz-1;\\n                while(st<sz && s[st] != i.first) st++;\\n                while(j > st && s[j] != i.first) j--;\\n                ans = max(ans, (j-st-1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        map<char, int> mp;\\n        for(auto i : s) mp[i]++;\\n        int sz = s.length();\\n        int ans = -1;\\n        for(auto i : mp){\\n            if(i.second > 1){\\n                int st=0, j=sz-1;\\n                while(st<sz && s[st] != i.first) st++;\\n                while(j > st && s[j] != i.first) j--;\\n                ans = max(ans, (j-st-1));\\n            }\\n        }\\n        return ans;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4063111,
                "title": "very-simple-easy-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        x=set(s)\\n        x=list(x)\\n        b=[]\\n        for i in range(len(x)):\\n            a=[]\\n            for j in range(len(s)):\\n                if x[i]==s[j]:\\n                    a.append(j)\\n            if len(a)>=2:\\n                b.append(max(a)-min(a))\\n        if len(b)==0:\\n            return -1\\n        else:\\n            return max(b)-1\\n\\n        \\n        \\n\\n\\n\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        x=set(s)\\n        x=list(x)\\n        b=[]\\n        for i in range(len(x)):\\n            a=[]\\n            for j in range(len(s)):\\n                if x[i]==s[j]:\\n                    a.append(j)\\n            if len(a)>=2:\\n                b.append(max(a)-min(a))\\n        if len(b)==0:\\n            return -1\\n        else:\\n            return max(b)-1\\n\\n        \\n        \\n\\n\\n\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4062571,
                "title": "easy-understandable-solution-100-beats",
                "content": "\\n# Code\\n```\\nclass Solution {\\n//TC:- O(2*n)\\n//SC:- O(26*2)\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int [][] cnt = new int[26][2];\\n\\n        for(int i=0; i<s.length(); i++){\\n            int ascii = s.charAt(i)-\\'a\\';\\n\\n            if(cnt[ascii][0] == 0) {\\n                cnt[ascii][0] = i+1;\\n            }\\n            else {\\n                cnt[ascii][1] = i+1;\\n            }\\n        }\\n\\n        int res = 0;\\n        for(int i=0; i<26; i++){\\n            if(cnt[i][0]*cnt[i][1] != 0)\\n                res = Math.max(res, cnt[i][1]-cnt[i][0]);\\n        }\\n\\n        return res-1;\\n\\n/*\\n\\n//TC:- O(n2)\\n//SC:- O(1)\\n        int res=Integer.MIN_VALUE;\\n        for(int i=0; i<s.length(); i++){\\n            for(int j=s.length()-1; j>=0; j--){\\n                if(s.charAt(i)==s.charAt(j)){\\n                    res= Math.max(res, j-i-1);\\n                }\\n            }\\n        }\\n        return res==Integer.MIN_VALUE?-1:res;\\n\\n*/\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution {\\n//TC:- O(2*n)\\n//SC:- O(26*2)\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int [][] cnt = new int[26][2];\\n\\n        for(int i=0; i<s.length(); i++){\\n            int ascii = s.charAt(i)-\\'a\\';\\n\\n            if(cnt[ascii][0] == 0) {\\n                cnt[ascii][0] = i+1;\\n            }\\n            else {\\n                cnt[ascii][1] = i+1;\\n            }\\n        }\\n\\n        int res = 0;\\n        for(int i=0; i<26; i++){\\n            if(cnt[i][0]*cnt[i][1] != 0)\\n                res = Math.max(res, cnt[i][1]-cnt[i][0]);\\n        }\\n\\n        return res-1;\\n\\n/*\\n\\n//TC:- O(n2)\\n//SC:- O(1)\\n        int res=Integer.MIN_VALUE;\\n        for(int i=0; i<s.length(); i++){\\n            for(int j=s.length()-1; j>=0; j--){\\n                if(s.charAt(i)==s.charAt(j)){\\n                    res= Math.max(res, j-i-1);\\n                }\\n            }\\n        }\\n        return res==Integer.MIN_VALUE?-1:res;\\n\\n*/\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4056257,
                "title": "cpp-using-hashmap-100-faster",
                "content": "\\tclass Solution {\\n\\tpublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        map<char,int>mp;\\n        map<char, int>mp1;\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(mp[s[i]]==0 && mp1[s[i]]==0)\\n            {\\n                mp1[s[i]]++;\\n                mp[s[i]]=i;\\n            }\\n            else\\n            {\\n                \\n                ans=max(i-mp[s[i]]-1, ans);\\n            }\\n        }\\n        return ans;\\n        \\n    }\\n};",
                "solutionTags": [
                    "C++"
                ],
                "code": "class Solution {\\n\\tpublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        map<char,int>mp;\\n        map<char, int>mp1;\\n        int ans=-1;\\n        for(int i=0;i<s.size();i++)\\n        {\\n            if(mp[s[i]]==0 && mp1[s[i]]==0)\\n            {\\n                mp1[s[i]]++;\\n                mp[s[i]]=i;\\n            }",
                "codeTag": "Java"
            },
            {
                "id": 4053313,
                "title": "88-runtime-94-memory-using-dicrionary-simple-solution",
                "content": "![image.png](https://assets.leetcode.com/users/images/0fbceba9-91bb-4ab5-ac6a-c759db5e859b_1694899657.6070325.png)\\n# Complexity\\n- Time complexity: O(n)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(n)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        d, result = {}, -1\\n\\n        for idx, chr in enumerate(s):\\n            if chr in d: d[chr] = d[chr][0], idx\\n            else: d[chr] = idx, 0\\n\\n        for idx, val in d.values():\\n            if val: result = max(result, val - idx - 1)\\n\\n        return result\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        d, result = {}, -1\\n\\n        for idx, chr in enumerate(s):\\n            if chr in d: d[chr] = d[chr][0], idx\\n            else: d[chr] = idx, 0\\n\\n        for idx, val in d.values():\\n            if val: result = max(result, val - idx - 1)\\n\\n        return result\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4036923,
                "title": "easy-to-understand-python3-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        if len(set(s)) == len(s):\\n            return -1\\n        \\n        m = 0\\n        s = list(s)\\n        \\n        for i in range(len(s)):\\n            if s[i+1:].count(s[i]) >= 1:\\n                idx = s[::-1].index(s[i])\\n                m = max(m, ((len(s)-1)-idx)-i-1)\\n        \\n        return m\\n        \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        if len(set(s)) == len(s):\\n            return -1\\n        \\n        m = 0\\n        s = list(s)\\n        \\n        for i in range(len(s)):\\n            if s[i+1:].count(s[i]) >= 1:\\n                idx = s[::-1].index(s[i])\\n                m = max(m, ((len(s)-1)-idx)-i-1)\\n        \\n        return m\\n        \\n```",
                "codeTag": "Java"
            },
            {
                "id": 4033240,
                "title": "simple-and-clear-solution",
                "content": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        dic = {}\\n        return max(i-dic.setdefault(ch, i)-1 for i, ch in enumerate(s))\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        dic = {}\\n        return max(i-dic.setdefault(ch, i)-1 for i, ch in enumerate(s))\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4019666,
                "title": "kotlin-simple-one-liner",
                "content": "```\\nfun maxLengthBetweenEqualCharacters(s: String) = (\\'a\\'..\\'z\\').maxOf { s.lastIndexOf(it) - s.indexOf(it) - 1 }\\n```",
                "solutionTags": [],
                "code": "```\\nfun maxLengthBetweenEqualCharacters(s: String) = (\\'a\\'..\\'z\\').maxOf { s.lastIndexOf(it) - s.indexOf(it) - 1 }\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4018475,
                "title": "essay-java-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        for(int i=0; i<s.length(); i++){\\n            for(int j=s.length()-1; j>=0; j--){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    max  = Math.max(max, j-i-1);\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        int max = -1;\\n        for(int i=0; i<s.length(); i++){\\n            for(int j=s.length()-1; j>=0; j--){\\n                if(s.charAt(i) == s.charAt(j)){\\n                    max  = Math.max(max, j-i-1);\\n                }\\n            }\\n        }\\n        return max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4008286,
                "title": "easy-solution-using-map-in-java-beats-80-47",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character,Integer> map = new HashMap<>();\\n        int max = Integer.MIN_VALUE;\\n\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n            if(map.containsKey(c))\\n            {\\n                max = Math.max(max, i-map.get(c)-1);\\n            }\\n            else map.put(c, i);\\n        }\\n        return max == Integer.MIN_VALUE ? -1 : max;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        Map<Character,Integer> map = new HashMap<>();\\n        int max = Integer.MIN_VALUE;\\n\\n        for(int i = 0; i < s.length(); i++)\\n        {\\n            char c = s.charAt(i);\\n            if(map.containsKey(c))\\n            {\\n                max = Math.max(max, i-map.get(c)-1);\\n            }\\n            else map.put(c, i);\\n        }\\n        return max == Integer.MIN_VALUE ? -1 : max;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007755,
                "title": "a-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nfunction maxLengthBetweenEqualCharacters(s: string): number {\\n        let l = -1;\\n        s.split(\\'\\').forEach(c => l = Math.max(l, s.lastIndexOf(c) - s.indexOf(c) - 1));\\n        return l;\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\nfunction maxLengthBetweenEqualCharacters(s: string): number {\\n        let l = -1;\\n        s.split(\\'\\').forEach(c => l = Math.max(l, s.lastIndexOf(c) - s.indexOf(c) - 1));\\n        return l;\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4007746,
                "title": "simple-c-beats-95",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\npublic class Solution {\\n    public int MaxLengthBetweenEqualCharacters(string s) {\\n        int l = -1;\\n        s.ToList().ForEach(c => l = Math.Max(l, s.LastIndexOf(c) - s.IndexOf(c) - 1));\\n        return l;\\n    }\\n}\\n```",
                "solutionTags": [
                    "C#"
                ],
                "code": "```\\npublic class Solution {\\n    public int MaxLengthBetweenEqualCharacters(string s) {\\n        int l = -1;\\n        s.ToList().ForEach(c => l = Math.Max(l, s.LastIndexOf(c) - s.IndexOf(c) - 1));\\n        return l;\\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4007696,
                "title": "using-split-beats-98-17-of-users-with-python3",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        l=-1\\n        for x in set(s):\\n            _s = s.split(x)\\n            if len(_s) > 2:\\n                l = max(l, len(s) - len(_s[0]) -len(_s[-1]) -2)\\n        return l\\n            \\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        l=-1\\n        for x in set(s):\\n            _s = s.split(x)\\n            if len(_s) > 2:\\n                l = max(l, len(s) - len(_s[0]) -len(_s[-1]) -2)\\n        return l\\n            \\n```",
                "codeTag": "Java"
            },
            {
                "id": 3984765,
                "title": "solved-using-bruteforce-and-optimal-way",
                "content": "# Intuition\\nThe problem asks to find longest substring between two equal chars. Hence, we need to find the index of first and last char and calculate len of substring. \\n\\n# Approach\\nThis problem can be solved using two ways. First one is very simple brute force where I use two pointers to iterate on strings and find the longest substring however it is not optimal way.\\n\\nMost of the cases, you can reduce one loop by using auxiliary space so in second approach I tried to use the arrays to store index for each char and if char found again,  use the previous and new index to update length. This way we will find the max Length.\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n     return usingAuxilarySpace(s);\\n    }\\n\\n    public int usingAuxilarySpace(String s) {\\n        int maxLen = -1;\\n        int[] store = new int[26]; // Array with constant length of 26\\n        Arrays.fill(store, -1); //fill array with -1 for all not found chars\\n        \\n        for(int i = 0; i < s.length(); i++ ) {\\n            if(store[s.charAt(i) - \\'a\\'] != -1) { // check if char was previously found\\n                int len = i - store[s.charAt(i) - \\'a\\'] - 1;\\n                maxLen = Math.max(maxLen, len);\\n            } else {\\n                store[s.charAt(i) - \\'a\\'] = i; //put index of char replacing -1\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n\\n    public int usingBruteForce(String s) {\\n        int maxLen = -1;\\n\\n        for (int i = 0; i < s.length() - 1 ; i++) {\\n            for (int j = i+1; j < s.length(); j++) {\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    int len = j - i - 1; \\n                    maxLen = Math.max(maxLen, len);\\n                }\\n            }\\n        }\\n        return maxLen; \\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n     return usingAuxilarySpace(s);\\n    }\\n\\n    public int usingAuxilarySpace(String s) {\\n        int maxLen = -1;\\n        int[] store = new int[26]; // Array with constant length of 26\\n        Arrays.fill(store, -1); //fill array with -1 for all not found chars\\n        \\n        for(int i = 0; i < s.length(); i++ ) {\\n            if(store[s.charAt(i) - \\'a\\'] != -1) { // check if char was previously found\\n                int len = i - store[s.charAt(i) - \\'a\\'] - 1;\\n                maxLen = Math.max(maxLen, len);\\n            } else {\\n                store[s.charAt(i) - \\'a\\'] = i; //put index of char replacing -1\\n            }\\n        }\\n        \\n        return maxLen;\\n    }\\n\\n    public int usingBruteForce(String s) {\\n        int maxLen = -1;\\n\\n        for (int i = 0; i < s.length() - 1 ; i++) {\\n            for (int j = i+1; j < s.length(); j++) {\\n                if (s.charAt(i) == s.charAt(j)) {\\n                    int len = j - i - 1; \\n                    maxLen = Math.max(maxLen, len);\\n                }\\n            }\\n        }\\n        return maxLen; \\n    }\\n}\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3983001,
                "title": "python-solution",
                "content": "\\'\\'\\'\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maximum_diff=-1\\n        \\n        for first in range(len(s)):\\n            for second in range(len(s)-1,first,-1):\\n                if s[first]== s[second]:\\n                    maximum_diff=max(maximum_diff,second-first-1)\\n        return(maximum_diff)\\n   \\'\\'\\'",
                "solutionTags": [],
                "code": "\\'\\'\\'\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        maximum_diff=-1\\n        \\n        for first in range(len(s)):\\n            for second in range(len(s)-1,first,-1):\\n                if s[first]== s[second]:\\n                    maximum_diff=max(maximum_diff,second-first-1)\\n        return(maximum_diff)\\n   \\'\\'\\'",
                "codeTag": "Java"
            },
            {
                "id": 3980255,
                "title": "simple-c-solution-utilizing-a-hash-map",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe question asks for the length of the longest substring between two equal characters, excluding the two characters themselves. The longest substring between two characters would be determined by the greatest distance between their occurrences within the string. Find the first occurrence and last occurrence of each and every character and determine the largest value among those.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nChoose an appropriate data structure or container, such as a map or vector, based on your requirements. Utilize a map to achieve a search complexity of $O(1)$. In this container (let\\'s call it mp), store the last position of each character (i.e., ***mp[s[i]] = i***). Subsequently, iterate through the string once more. For each encountered character, retrieve its last recorded position from the mp container, calculate the difference between the current character\\'s index and its last occurrence\\'s index, and then compare this difference with the value stored in max_count. Update max_count with the larger of the two values (i.e., max_count = max(difference, max_count)). The final result will be the maximum value stored in max_count after this process.\\n\\n# Complexity\\n- Time complexity: $O(n)$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe dominant factors contributing to the time complexity are the two loops.\\nThe other constant time operations are insignificant compared to the loops.\\nThus, the overall time complexity of the given code is $O(n)$, where \\'n\\' is the length of the input string.\\nTo summarize, the time complexity of the provided code is $O(n)$, where \\'n\\' is the length of the input string.\\n\\n- Space complexity: $ O(n) $\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity due to the integer variables (max_count and loop variables) is $O(1)$.\\nThe space complexity due to the unordered map mp is $O(n)$ in the worst case, where n is the length of the input string.\\nTherefore, the final space complexity of the code is $O(n)$ in the worst case, considering the space required for the unordered map.\\n\\n# Code\\n```\\n\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int max_count = INT_MIN;\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<size(s);i++) {\\n            mp[s[i]] = i;\\n        }\\n        for(int i=0;i<size(s);i++) {\\n            max_count = max(max_count, mp[s[i]]-i-1);\\n        }\\n        return max_count==INT_MIN?-1:max_count;\\n    }\\n};\\n\\n\\n```\\n",
                "solutionTags": [
                    "C++",
                    "Hash Table"
                ],
                "code": "```\\n\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        int max_count = INT_MIN;\\n        unordered_map<char,int> mp;\\n        for(int i=0;i<size(s);i++) {\\n            mp[s[i]] = i;\\n        }\\n        for(int i=0;i<size(s);i++) {\\n            max_count = max(max_count, mp[s[i]]-i-1);\\n        }\\n        return max_count==INT_MIN?-1:max_count;\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3969185,
                "title": "python-2-approaches-general-one-line-beats-90-hashmap",
                "content": "# General approach:\\n\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        d = {}\\n        maxim = -1\\n        for i, char in enumerate(s):\\n            if char in d:\\n                if i-d[char]-1 > maxim:\\n                    maxim = i-d[char]-1\\n            else:\\n                d[char] = i\\n        return maxim\\n\\n```\\n\\n# One line overcomplicated code (just for fun). Trying to update a hashmap in just one line is real hell:\\n\\n\\n```\\nreturn max(filter(lambda x: isinstance(x, int),  {i-d[char]-1 if char in d else (d.update({char:i})) for i, char in enumerate(s)}|{-1})) if (d:={0:0}) else None\\n\\n```",
                "solutionTags": [
                    "Python3",
                    "Hash Table",
                    "String"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n        d = {}\\n        maxim = -1\\n        for i, char in enumerate(s):\\n            if char in d:\\n                if i-d[char]-1 > maxim:\\n                    maxim = i-d[char]-1\\n            else:\\n                d[char] = i\\n        return maxim\\n\\n```\n```\\nreturn max(filter(lambda x: isinstance(x, int),  {i-d[char]-1 if char in d else (d.update({char:i})) for i, char in enumerate(s)}|{-1})) if (d:={0:0}) else None\\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3942587,
                "title": "chebrolu-s-short-and-clean-c-solution-faster-than-100",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nRephrase the question. It can be told as if \" which two simliar characters are farthest apart in the string \".\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- Take a map and add the entries of new characters into it\\n- If an entry exists, then we have a possible substring between them so find out the number of characters between them and update the maxSubStringLength.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n $$O(n)$$\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n $$O(n)$$\\n# Code\\n```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        unordered_map <char,int> characterOccurance;\\n\\n        int maxSubstringLength = -1;\\n\\n        for( int i=0; i<s.size() ; i++) {\\n            if ( characterOccurance.find(s[i]) == characterOccurance.end() ) {\\n                characterOccurance[s[i]] = i;\\n            } \\n            else {\\n                maxSubstringLength = max(maxSubstringLength,i - characterOccurance[s[i]] -1);\\n            }\\n        }\\n\\n        return maxSubstringLength;\\n    }\\n};\\n```",
                "solutionTags": [
                    "C++"
                ],
                "code": "```\\nclass Solution {\\npublic:\\n    int maxLengthBetweenEqualCharacters(string s) {\\n        \\n        unordered_map <char,int> characterOccurance;\\n\\n        int maxSubstringLength = -1;\\n\\n        for( int i=0; i<s.size() ; i++) {\\n            if ( characterOccurance.find(s[i]) == characterOccurance.end() ) {\\n                characterOccurance[s[i]] = i;\\n            } \\n            else {\\n                maxSubstringLength = max(maxSubstringLength,i - characterOccurance[s[i]] -1);\\n            }\\n        }\\n\\n        return maxSubstringLength;\\n    }\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3928827,
                "title": "beats-96-with-a-linear-tm-and-constant-memory-complexity-python",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\nO(n)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n\\n        temp_size=0\\n        final_size=-1\\n        \\n        my_dict={}\\n        for i , nm in enumerate(s):\\n            if nm in my_dict:\\n                temp_size=i-my_dict[nm] -1\\n                final_size=max(temp_size, final_size)\\n            else:\\n                my_dict[nm]=i\\n\\n        return final_size\\n\\n        \\n        \\n\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s: str) -> int:\\n\\n        temp_size=0\\n        final_size=-1\\n        \\n        my_dict={}\\n        for i , nm in enumerate(s):\\n            if nm in my_dict:\\n                temp_size=i-my_dict[nm] -1\\n                final_size=max(temp_size, final_size)\\n            else:\\n                my_dict[nm]=i\\n\\n        return final_size\\n\\n        \\n        \\n\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927597,
                "title": "simple-intuitive-o-n-python-solution",
                "content": "# Complexity\\n- Time complexity: O(n)\\n\\nJust save the letter index. That\\'s all\\n\\n# Code\\n```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        dic = {}\\n        for i in range(len(s)):\\n            if s[i] not in dic: dic[s[i]] = []\\n            dic[s[i]].append(i)\\n        \\n        answer = -1\\n        for letter in dic:\\n            if len(dic[letter]) > 1:\\n                start, end = dic[letter][0], dic[letter][-1]\\n                count = end - start - 1\\n                answer = max(answer, count)\\n        return answer\\n```",
                "solutionTags": [
                    "Python3"
                ],
                "code": "```\\nclass Solution:\\n    def maxLengthBetweenEqualCharacters(self, s):\\n        dic = {}\\n        for i in range(len(s)):\\n            if s[i] not in dic: dic[s[i]] = []\\n            dic[s[i]].append(i)\\n        \\n        answer = -1\\n        for letter in dic:\\n            if len(dic[letter]) > 1:\\n                start, end = dic[letter][0], dic[letter][-1]\\n                count = end - start - 1\\n                answer = max(answer, count)\\n        return answer\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3927372,
                "title": "java-solution-simple-100-0ms",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int [] arr = new int[26];\\n\\n    for(int i=0; i<arr.length; i++){\\n        int i1=s.indexOf(i+\\'a\\');\\n        int i2=s.lastIndexOf(i+\\'a\\');\\n        if(i1 != -1 && i1 != i2)\\n            arr[i]=i2-i1;\\n        } \\n\\n        int a=0;\\n        for(int i=0; i<26; i++)\\n          a=Math.max(a,arr[i]);\\n    \\n         \\n\\n\\n         return a-1;\\n    }\\n}\\n```",
                "solutionTags": [
                    "Java"
                ],
                "code": "```\\nclass Solution {\\n    public int maxLengthBetweenEqualCharacters(String s) {\\n        \\n        int [] arr = new int[26];\\n\\n    for(int i=0; i<arr.length; i++){\\n        int i1=s.indexOf(i+\\'a\\');\\n        int i2=s.lastIndexOf(i+\\'a\\');\\n        if(i1 != -1 && i1 != i2)\\n            arr[i]=i2-i1;\\n        } \\n\\n        int a=0;\\n        for(int i=0; i<26; i++)\\n          a=Math.max(a,arr[i]);\\n    \\n         \\n\\n\\n         return a-1;\\n    }\\n}\\n```",
                "codeTag": "Java"
            }
        ],
        "discussions": [
            {
                "id": 1574689,
                "content": [
                    {
                        "username": "mchen2",
                        "content": "Can we? --Seriously asking\\nIf can\\'t, why not?"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Find a way to store the indexes of the same characters and you\\'re good to go"
                    }
                ]
            },
            {
                "id": 2050632,
                "content": [
                    {
                        "username": "mchen2",
                        "content": "Can we? --Seriously asking\\nIf can\\'t, why not?"
                    },
                    {
                        "username": "aiyappa18",
                        "content": "Find a way to store the indexes of the same characters and you\\'re good to go"
                    }
                ]
            }
        ]
    }
]