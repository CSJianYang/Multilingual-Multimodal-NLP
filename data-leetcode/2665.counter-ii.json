[
    {
        "title": "Counter II",
        "question_content": "Write a function&nbsp;createCounter. It should accept an initial integer&nbsp;init. It should return an object with three functions.\nThe three functions are:\n\n\tincrement()&nbsp;increases&nbsp;the current value by 1 and then returns it.\n\tdecrement()&nbsp;reduces the current value by 1 and then returns it.\n\treset()&nbsp;sets the current value to&nbsp;init&nbsp;and then returns it.\n\n&nbsp;\nExample 1:\n\nInput: init = 5, calls = [\"increment\",\"reset\",\"decrement\"]\nOutput: [6,5,4]\nExplanation:\nconst counter = createCounter(5);\ncounter.increment(); // 6\ncounter.reset(); // 5\ncounter.decrement(); // 4\n\nExample 2:\n\nInput: init = 0, calls = [\"increment\",\"increment\",\"decrement\",\"reset\",\"reset\"]\nOutput: [1,2,1,0,0]\nExplanation:\nconst counter = createCounter(0);\ncounter.increment(); // 1\ncounter.increment(); // 2\ncounter.decrement(); // 1\ncounter.reset(); // 0\ncounter.reset(); // 0\n\n&nbsp;\nConstraints:\n\n\t-1000 <= init <= 1000\n\t0 <= calls.length <= 1000\n\tcalls[i] is one of \"increment\", \"decrement\" and&nbsp;\"reset\"",
        "solutions": [
            {
                "id": 3494650,
                "title": "day3-o-1-solving-it-in-3-different-ways-and-which-one-is-the-best-way",
                "content": "From the question we can decipher that we need to have three functions `increment(), decrement() and reset()`. Now let\\'s think which one will be appropriate method to solve this question.\\n***\\n## 1. Using Traditional Function\\n* A **traditional function** is defined using the `function` keyword. It can be a **named function** or an **anonymous function** assigned to a variable. \\n* In the following code we have created three functions  `increment()`, `decrement()` and `reset()` using the `function` keyword. Inside this function we need to do the appropriate operation that was instructed in the question i.e. for `increment()` we need to return the `currentvalue+1`, similarly in `decrement()` we need to return the `currentvalue-1` and in `reset()` we need to assign `originalvalue` to the `currentvalue`.\\n```\\nvar createCounter = function(init) {\\n  let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n};\\n```\\n**Time and Space: O(1)**\\n***\\n## 2. Using Arrow Function\\n* An **arrow function** is a shorter syntax for defining functions, introduced in ES6. \\n* It uses the **=> syntax** instead of the function keyword, and has some differences in behavior compared to traditional functions, such as **inheriting** the `this` value from the **surrounding context**\\n* For better understanding please read this posts : **Arrow function**(6min read) by **[@Jatin](https://leetcode.com/problems/create-hello-world-function/discuss/3486895/DAY(O(1))-Why-you-should-prefer-arrow-function-syntax!)** and **Closure on Counter-1**(8min read) problem by **[@Jatin](https://leetcode.com/problems/counter/discuss/3491300/Day2O(1)greaterUnderstanding-Closure-in-easy-way-and-its-practical-uses!!)**\\n\\n```\\nvar createCounter = function(init) {\\n    let presentCount = init\\n    return {\\n        increment:()=> ++presentCount,\\n        decrement:()=> --presentCount,\\n        reset:()=> presentCount = init,\\n    }\\n};\\n```\\n**Time and Space: O(1)**\\n***\\n## 3. Using Class\\n* A **class** is a template for creating objects with a set of properties and methods.\\n* In `ES6`, `classes` were introduced as syntactic sugar over the prototype-based inheritance model but shortly after that It **provided a way to support inheritance and can have static methods and properties, getters and setters, and more**. Thus they provided a way to write object-oriented code in a more concise and organized way.\\n\\n* In the following example the `Couter` is the name of the class.\\n\\t*  The constructor method is a special method that is called when an **object is created based on the class**.\\n\\t*  It initializes the object with properties `init` and `presentCount`. The `increment()`, `decrement()`and `reset()` method are regular methods that can be **called on an instance** of the `Counter` class to get the output\\n\\t* To create an object based on a class we use the `new` operator i.e. we create an object called `createCounter` based on the `Counter` class, passing in the `init` value as **arguments to the constructor**.\\n\\n```\\nclass Counter {\\n  constructor(init) {\\n    this.init = init;\\n    this.presentCount = init;\\n  }\\n\\n  increment() {\\n    this.presentCount += 1;\\n    return this.presentCount;\\n  }\\n\\n  decrement() {\\n    this.presentCount -= 1;\\n    return this.presentCount;\\n  }\\n\\n  reset() {\\n    this.presentCount = this.init;\\n    return this.presentCount;\\n  }\\n}\\n\\nvar createCounter = function(init) {\\n  return new Counter(init);\\n};\\n```\\n**Time and Space: O(1)**\\n***\\n## In conclusion which one is the better way??\\n* **Classes** are useful for creating objects with shared behavior.\\n*  **Traditional functions** are useful for reusable chunks of code\\n*   **Arrow functions** are useful for short, concise functions or when preserving the value of `this` is important.\\n* Thus, I believe that classes are the best way to implement this types of problems in real life as they give flexibility of scaling with the shared behaviour properties. \\n***\\nYou can support this article by upvoitng \\u2B06\\u2B06!!\\n***\\nHere\\'s my [github link](https://github.com/Jatin-Shihora) where I keep my solutions.\\n***",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n  let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n};\\n```\n```\\nvar createCounter = function(init) {\\n    let presentCount = init\\n    return {\\n        increment:()=> ++presentCount,\\n        decrement:()=> --presentCount,\\n        reset:()=> presentCount = init,\\n    }\\n};\\n```\n```\\nclass Counter {\\n  constructor(init) {\\n    this.init = init;\\n    this.presentCount = init;\\n  }\\n\\n  increment() {\\n    this.presentCount += 1;\\n    return this.presentCount;\\n  }\\n\\n  decrement() {\\n    this.presentCount -= 1;\\n    return this.presentCount;\\n  }\\n\\n  reset() {\\n    this.presentCount = this.init;\\n    return this.presentCount;\\n  }\\n}\\n\\nvar createCounter = function(init) {\\n  return new Counter(init);\\n};\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3495319,
                "title": "2665-counter-ii-level-up-your-javascript-skills-with-these-intuitive-implementations",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n>The `createCounter` function creates a counter object that can be used to keep track of a count and perform operations on it. The returned object has three methods: `increment`, `decrement`, and `reset`, which respectively increase the count by 1, decrease the count by 1, and reset the count to its initial value.\\n\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n>The `createCounter` function uses a closure to create a private `count` variable that is initialized to either the provided `init` value or 0 if no value is provided. It then defines three inner functions (`increment`, `decrement`, and `reset`) that operate on this count variable and return its new value. Finally, it returns an object containing these three functions as properties, providing a public interface for manipulating the count.\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n>The `createCounter` function has a space complexity of O(1) as it creates a fixed number of variables (count, increment, decrement, reset) that are not dependent on the size of the input\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n>Each instance of the counter object created by `createCounter` has a space complexity of O(1) as well, as it only contains three function properties and the count variable, which are all fixed-size.\\n\\n\\n# Code\\n```Javascript []\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let count = init || 0; // initialize count to 0 or given value\\n\\n  const increment = function() {\\n    count++;\\n    return count;\\n  };\\n\\n  const decrement = function() {\\n    count--;\\n    return count;\\n  };\\n\\n  const reset = function() {\\n    count = init || 0;\\n    return count;\\n  };\\n\\n  return { increment, decrement, reset };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n``` typescript []\\ninterface Counter {\\n  increment(): number;\\n  decrement(): number;\\n  reset(): number;\\n}\\n\\nconst createCounter = (init: number = 0): Counter => {\\n  let count: number = init;\\n\\n  const increment = (): number => {\\n    count++;\\n    return count;\\n  };\\n\\n  const decrement = (): number => {\\n    count--;\\n    return count;\\n  };\\n\\n  const reset = (): number => {\\n    count = init;\\n    return count;\\n  };\\n\\n  return { increment, decrement, reset };\\n};\\n\\nconst counter: Counter = createCounter(5);\\n\\nconsole.log(counter.increment()); // 6\\nconsole.log(counter.reset()); // 5\\nconsole.log(counter.decrement()); // 4\\n\\n```\\n![image.png](https://assets.leetcode.com/users/images/b427e686-2e5d-469a-8e7a-db5140022a6b_1677715904.0948765.png)\\n# Please Upvote\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\\n\\n> ##### There are several ways to implement a counter object with increment, decrement, and reset functionality in JavaScript. Here are a few alternative approaches:\\n\\n1. Using an ES6 class\\n```\\nclass Counter {\\n  constructor(init = 0) {\\n    this.count = init;\\n  }\\n\\n  increment() {\\n    return ++this.count;\\n  }\\n\\n  decrement() {\\n    return --this.count;\\n  }\\n\\n  reset() {\\n    this.count = 0;\\n    return this.count;\\n  }\\n}\\n```\\n>Here, we define a `Counter` class with a constructor that takes an optional `init` parameter (defaulting to 0). We also define three methods (`increment`, `decrement`, and `reset`) that modify the `count` property and return its new value.\\n\\n\\n2. Using an object literal\\n```\\nconst counter = {\\n  count: 0,\\n  increment() {\\n    return ++this.count;\\n  },\\n  decrement() {\\n    return --this.count;\\n  },\\n  reset() {\\n    this.count = 0;\\n    return this.count;\\n  }\\n};\\n\\n```\\n>Here, we define an object literal with a `count` property and three methods (`increment`, `decrement`, and `reset`) that modify the `count` property and return its new value.\\n3. Using a factory function\\n```\\nfunction createCounter(init = 0) {\\n  let count = init;\\n\\n  return {\\n    increment() {\\n      return ++count;\\n    },\\n    decrement() {\\n      return --count;\\n    },\\n    reset() {\\n      count = 0;\\n      return count;\\n    }\\n  };\\n}\\n```\\n>Here, we define a `createCounter` factory function that returns an object with three methods (`increment`, `decrement`, and `reset`) that modify a private `count` variable and return its new value.\\n\\n# Important topic to Learn\\n```\\n1. Closures: A closure is a function that has access to variables in\\n its outer lexical environment. The original implementation of the \\n`createCounter` function uses a closure to create a private `count`\\n variable that is shared by the `increment`, `decrement`, and `reset`\\n functions. Understanding closures is essential for writing clean \\nand efficient JavaScript code.\\n\\n2. Object-oriented programming (OOP): OOP is a programming paradigm \\nthat uses objects and classes to encapsulate data and behavior. The \\nES6 class-based implementation of the counter object demonstrates\\nhow to define a class with properties and methods, while the object \\nliteral and factory function approaches use object-based programming \\nto define a set of related methods.\\n\\n3. JavaScript syntax: Understanding basic JavaScript syntax is \\nessential for writing clean and readable code. The original \\nimplementation and alternative approaches use different syntax \\nelements, such as arrow functions, default parameter values, and \\nobject destructuring, that are common in modern JavaScript code.\\n\\n4. DOM manipulation: If you\\'re interested in front-end web \\ndevelopment, you\\'ll need to learn how to manipulate the Document \\nObject Model (DOM) using JavaScript. You can use a counter object to \\nupdate the text content or attributes of a HTML element in response \\nto user events, such as button clicks or key presses.\\n\\n```\\n\\n\\n\\n# Please Comment\\uD83D\\uDC4D\\uD83D\\uDC4D\\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```\\n",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```Javascript []\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let count = init || 0; // initialize count to 0 or given value\\n\\n  const increment = function() {\\n    count++;\\n    return count;\\n  };\\n\\n  const decrement = function() {\\n    count--;\\n    return count;\\n  };\\n\\n  const reset = function() {\\n    count = init || 0;\\n    return count;\\n  };\\n\\n  return { increment, decrement, reset };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\n``` typescript []\\ninterface Counter {\\n  increment(): number;\\n  decrement(): number;\\n  reset(): number;\\n}\\n\\nconst createCounter = (init: number = 0): Counter => {\\n  let count: number = init;\\n\\n  const increment = (): number => {\\n    count++;\\n    return count;\\n  };\\n\\n  const decrement = (): number => {\\n    count--;\\n    return count;\\n  };\\n\\n  const reset = (): number => {\\n    count = init;\\n    return count;\\n  };\\n\\n  return { increment, decrement, reset };\\n};\\n\\nconst counter: Counter = createCounter(5);\\n\\nconsole.log(counter.increment()); // 6\\nconsole.log(counter.reset()); // 5\\nconsole.log(counter.decrement()); // 4\\n\\n```\n```\\nThanks for visiting my solution.\\uD83D\\uDE0A Keep Learning\\nPlease give my solution an upvote! \\uD83D\\uDC4D\\nIt\\'s a simple way to show your appreciation and\\nkeep me motivated. Thank you! \\uD83D\\uDE0A\\n```\n```\\nclass Counter {\\n  constructor(init = 0) {\\n    this.count = init;\\n  }\\n\\n  increment() {\\n    return ++this.count;\\n  }\\n\\n  decrement() {\\n    return --this.count;\\n  }\\n\\n  reset() {\\n    this.count = 0;\\n    return this.count;\\n  }\\n}\\n```\n```\\nconst counter = {\\n  count: 0,\\n  increment() {\\n    return ++this.count;\\n  },\\n  decrement() {\\n    return --this.count;\\n  },\\n  reset() {\\n    this.count = 0;\\n    return this.count;\\n  }\\n};\\n\\n```\n```\\nfunction createCounter(init = 0) {\\n  let count = init;\\n\\n  return {\\n    increment() {\\n      return ++count;\\n    },\\n    decrement() {\\n      return --count;\\n    },\\n    reset() {\\n      count = 0;\\n      return count;\\n    }\\n  };\\n}\\n```\n```\\n1. Closures: A closure is a function that has access to variables in\\n its outer lexical environment. The original implementation of the \\n`createCounter` function uses a closure to create a private `count`\\n variable that is shared by the `increment`, `decrement`, and `reset`\\n functions. Understanding closures is essential for writing clean \\nand efficient JavaScript code.\\n\\n2. Object-oriented programming (OOP): OOP is a programming paradigm \\nthat uses objects and classes to encapsulate data and behavior. The \\nES6 class-based implementation of the counter object demonstrates\\nhow to define a class with properties and methods, while the object \\nliteral and factory function approaches use object-based programming \\nto define a set of related methods.\\n\\n3. JavaScript syntax: Understanding basic JavaScript syntax is \\nessential for writing clean and readable code. The original \\nimplementation and alternative approaches use different syntax \\nelements, such as arrow functions, default parameter values, and \\nobject destructuring, that are common in modern JavaScript code.\\n\\n4. DOM manipulation: If you\\'re interested in front-end web \\ndevelopment, you\\'ll need to learn how to manipulate the Document \\nObject Model (DOM) using JavaScript. You can use a counter object to \\nupdate the text content or attributes of a HTML element in response \\nto user events, such as button clicks or key presses.\\n\\n```\n```\\nThanks for visiting my solution comment below if you like it.\\uD83D\\uDE0A\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494506,
                "title": "solutions-in-javascript-and-typescript",
                "content": "# Approach\\n- You can use Prefix Increment/Decrement syntax to replace += 1 and -= 1. This syntax allows you to increment or decrement a number and return it at the same time.\\n- To combine the initialization of currentCount and its return, you can assign its initial value in the same line that you return it. In JavaScript, when you assign a value to a variable, it returns that value automatically. \\n- To make the code more concise, you can switch from function syntax to arrow syntax when defining the functions.\\n# Complexity\\n- Time complexity: **O(1)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n<iframe src=\"https://leetcode.com/playground/RbpZLA8F/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "# Approach\\n- You can use Prefix Increment/Decrement syntax to replace += 1 and -= 1. This syntax allows you to increment or decrement a number and return it at the same time.\\n- To combine the initialization of currentCount and its return, you can assign its initial value in the same line that you return it. In JavaScript, when you assign a value to a variable, it returns that value automatically. \\n- To make the code more concise, you can switch from function syntax to arrow syntax when defining the functions.\\n# Complexity\\n- Time complexity: **O(1)**\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: **O(1)**\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n<iframe src=\"https://leetcode.com/playground/RbpZLA8F/shared\" frameBorder=\"0\" width=\"700\" height=\"300\"></iframe>",
                "codeTag": "Unknown"
            },
            {
                "id": 3485377,
                "title": "closure-3-lines",
                "content": "# Approach\\n```\\nfunction createCounter(init) {\\n    let value = init;\\n\\n    return {\\n        increment: () => ++value,\\n        decrement: () => --value,\\n        reset: () => value = init,\\n    }\\n};\\n```\\n\\n**NOTE #1:** Using the prefix increment/decrement updates `value` befure returing it.\\n\\n**NOTE #2:** When assigmnent used as return value, assignment is performed first, then the value of the variable to the left is returned.\\n\\n# Complexity\\n- Time complexity: $$O(1)$$ on each call\\n\\n- Space complexity: $$O(1)$$\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nfunction createCounter(init) {\\n    let value = init;\\n\\n    return {\\n        increment: () => ++value,\\n        decrement: () => --value,\\n        reset: () => value = init,\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3484246,
                "title": "straight-forward-o-1",
                "content": "# Intuition\\nJust do it.\\n\\n# Approach\\nJust do it.\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    c = i = init\\n\\n    function increment() {\\n        return ++c\\n    }\\n\\n    function decrement() {\\n        return --c\\n    }\\n\\n    function reset() {\\n        return c = i\\n    }\\n    return {increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    c = i = init\\n\\n    function increment() {\\n        return ++c\\n    }\\n\\n    function decrement() {\\n        return --c\\n    }\\n\\n    function reset() {\\n        return c = i\\n    }\\n    return {increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494507,
                "title": "closure-counter-object-in-javascript",
                "content": "The `createCounter` function returns an object with three methods: `increment`, `decrement`, and `reset`.\\n\\nWhen `createCounter` is called with an initial value init, it creates a closure over a local variable count, which is initialized to init.\\n\\nThe increment method increases the value of count by `1`, and then returns the new value of count. The decrement method decreases the value of count by `1`, and then returns the new value of `count`. The `reset` method sets the value of count back to the initial value init, and then returns the new value of count.\\n\\nBecause each method is defined within the same closure, they all have access to the same `count` variable, and can modify it as needed.\\n\\nThis implementation allows you to create multiple independent counters, each with their own initial value and independent count variable.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = (init) => {\\n  let count = init;\\n\\n  return {\\n    increment: () => {\\n      count++;\\n      return count;\\n    },\\n\\n    decrement: () => {\\n      count--;\\n      return count;\\n    },\\n\\n    reset: () => {\\n      count = init;\\n      return count;\\n    }\\n  };\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = (init) => {\\n  let count = init;\\n\\n  return {\\n    increment: () => {\\n      count++;\\n      return count;\\n    },\\n\\n    decrement: () => {\\n      count--;\\n      return count;\\n    },\\n\\n    reset: () => {\\n      count = init;\\n      return count;\\n    }\\n  };\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494783,
                "title": "o-1-easy-solution-98-commented-with-examples",
                "content": "This code defines a function createCounter that takes an initial value init as a parameter and returns an object that contains three methods: **increment**, **decrement**, and **reset**.\\n\\nThe ans variable is initialized with the value of init. This variable is defined inside the **createCounter** function, so it is only accessible within the scope of the returned object.\\n\\n\\n* The  **increment**  method is an arrow function that **increments** the ans variable and returns its new value. The decrement method is also an arrow function that decrements the ans variable and returns its new value. Both these methods use the increment and decrement operators ++ and --, respectively.\\n\\n* The **reset** method is an arrow function that assigns the ans variable the value of init, effectively resetting the counter to its original value.\\n\\n* The **returned** object contains these three methods, and these methods can be used to manipulate the ans variable in different ways. For example, you can use the **increment** and **decrement** methods to increase or ***decrease*** the value of the counter, respectively, while the reset method can be used to reset the counter to its initial value.\\n\\nYou can create multiple counter objects with different initial values by calling the **createCounter** function with different init values.\\n\\n***Here is an example of it*** \\n```\\n// create a counter object starting from 5\\nconst counter = createCounter(5);\\n\\n// increment the counter by 1\\nconsole.log(counter.increment()); // output: 6\\n\\n// decrement the counter by 2\\nconsole.log(counter.decrement()); // output: 5\\nconsole.log(counter.decrement()); // output: 4\\n\\n// reset the counter to its initial value\\ncounter.reset();\\nconsole.log(counter.increment()); // output: 5\\n\\n```\\nIn this example, we create a counter object starting from the value 5 using the ***createCounter function***. We then use the increment method to increase the counter by 1 and print the result to the console, which outputs 6. We then use the ***decrement*** method twice to decrease the counter by 2 and print the results to the console, which outputs 5 and 4, respectively. Finally, we use the reset method to reset the counter to its initial value and then use the ***increment method*** to increase the counter by 1 and print the result to the console, which outputs 5.\\n\\n```\\n\\nvar createCounter = function(init) {\\n    var ans = init;\\n\\n    return {\\n        increment: () => ++ans,\\n        decrement: () => --ans,\\n        reset: () => ans = init,\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// create a counter object starting from 5\\nconst counter = createCounter(5);\\n\\n// increment the counter by 1\\nconsole.log(counter.increment()); // output: 6\\n\\n// decrement the counter by 2\\nconsole.log(counter.decrement()); // output: 5\\nconsole.log(counter.decrement()); // output: 4\\n\\n// reset the counter to its initial value\\ncounter.reset();\\nconsole.log(counter.increment()); // output: 5\\n\\n```\n```\\n\\nvar createCounter = function(init) {\\n    var ans = init;\\n\\n    return {\\n        increment: () => ++ans,\\n        decrement: () => --ans,\\n        reset: () => ans = init,\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3493336,
                "title": "my-createcounter",
                "content": "<!-- # Intuition -->\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n<!-- # Approach -->\\n<!-- Describe your approach to solving the problem. -->\\n\\n<!-- # Complexity\\n- Time complexity: -->\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n<!-- - Space complexity: -->\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  const counter = {\\n    c: init,\\n    t: init,\\n    increment() {\\n      return ++this.c;\\n    },\\n    reset() {\\n      this.c = this.t;\\n      return this.c;\\n    },\\n    decrement() {\\n      return --this.c;\\n    }\\n  };\\n  \\n  return counter;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  const counter = {\\n    c: init,\\n    t: init,\\n    increment() {\\n      return ++this.c;\\n    },\\n    reset() {\\n      this.c = this.t;\\n      return this.c;\\n    },\\n    decrement() {\\n      return --this.c;\\n    }\\n  };\\n  \\n  return counter;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495296,
                "title": "easy-to-understand-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let c=init;\\n    return{\\n        increment:function(){\\n            c++;\\n          return c;\\n        },\\n       decrement:function(){\\n           c--;\\n           return c;\\n       },\\n       reset:function(){\\n           c=init;\\n           return c;\\n       }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let c=init;\\n    return{\\n        increment:function(){\\n            c++;\\n          return c;\\n        },\\n       decrement:function(){\\n           c--;\\n           return c;\\n       },\\n       reset:function(){\\n           c=init;\\n           return c;\\n       }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495271,
                "title": "javascript-day-3-of-30-days-challange",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    let resetVal = init;\\n\\n    let obj = {\\n        increment : () => ++counter,\\n        decrement : () => --counter,\\n        reset : () => counter = resetVal\\n    }\\n\\n    return obj;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    let resetVal = init;\\n\\n    let obj = {\\n        increment : () => ++counter,\\n        decrement : () => --counter,\\n        reset : () => counter = resetVal\\n    }\\n\\n    return obj;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3596195,
                "title": "easiest-full-explanation",
                "content": "# Intuition\\nYou\\'re probbably thinking , damn that\\'s an easy problem. I just have to return 3 objects in a function. Well , not really .\\n\\nThe following leetcode problem is a practice on whats called\\n# Factory Method ( FM ) Design Pattern .\\nKeep reading I\\'ll explain in Depth and provide a solution\\n\\n# Approach\\nLet\\'s Solve this Problem using FM.\\n\\n# **Definition : What\\'s with the Factory Method ?**\\n1. It\\'s a creational Design Pattern : It allows us to create and return different objects\\n2. It provides a way to encapsulate the object creation process within a function.\\n# Use Cases : Why do we need it and what\\'s its advantages ?\\n\\n- To Organize our Code\\n- To provide Flexibility\\n- Saves time and the effort of duplication\\n\\n# STILL CONFUSED ? LET\\'S BREAK IT DOWN EVEN MORE AND LOOK AT OUR EXAMPLE IN THIS LEETCODE PROBLEM\\n\\nIn our code snippet , the \\'createCounter\\' function is a factory method . This factory method creates a counter object , let\\'s explore what\\'s happening :\\n\\n- When we call createCounter and pass an initial value, it returns an object.\\n- The returned object allows us to perform operations on the counter, such as incrementing, decrementing, and resetting its value.\\n- This way, we can create multiple independent counters by invoking the createCounter function with different initial values.\\n# NOW IT\\'S TIME FOR A RECAP\\n\\nThe factory method is like a special function that creates and gives you objects. Instead of directly creating objects yourself, you use this function, which knows how to create the objects you need.\\nThe factory function knows how to create the objects and returns them to you.\\n\\n# To create and use the Factory Method Design pattern we :\\n- Define a factory function\\n- Create a new instance of the desired object inside our function\\n- Return the created object\\n\\n\\nNow that\\'s it , hope you liked my explanation . Remmember to always look deep behind the problem itself and understand the entire Concept Hope I helped , Kindly upvote If I did : )\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function(init) {\\n    let n = init;\\n    return{\\n        increment: () => n+=1, decrement: () => n-=1, reset: () => (n=init),\\n    }\\n};\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function(init) {\\n    let n = init;\\n    return{\\n        increment: () => n+=1, decrement: () => n-=1, reset: () => (n=init),\\n    }\\n};\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497509,
                "title": "javascript-object-simplest-solution",
                "content": "```\\nvar createCounter = function(init) {\\n  var count = init;\\n  return {\\n    increment: () => {return ++count}, \\n    decrement: () => {return --count}, \\n    reset: () => {return count = init}\\n  };\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n  var count = init;\\n  return {\\n    increment: () => {return ++count}, \\n    decrement: () => {return --count}, \\n    reset: () => {return count = init}\\n  };\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494911,
                "title": "sort-easy-and-conscise-solution-using-closure-property-of-javascript",
                "content": "# Code\\n```\\nvar createCounter = function(init) {\\n    let curr = init;\\n    return { increment:()=>++curr, reset:()=>curr=init, decrement:()=>--curr};\\n};\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    let curr = init;\\n    return { increment:()=>++curr, reset:()=>curr=init, decrement:()=>--curr};\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494625,
                "title": "easily-explained-in-3-step-javascript",
                "content": "# Intuition\\nIncrese and Decrese the value by `+1` and `-1`.\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n1) In increment function use pre-increment function to increment the value at that step.\\n2) In decrement function use pre-decrement function to decrement the value ar that step.\\n3) Reset function is very important -> You should save your `init` value in a `variable`. When calling reset function make sure you first reset your `init` and then return.\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n- $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n- $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n``` JavaSript []\\nvar createCounter = function(init) {\\n    i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "``` JavaSript []\\nvar createCounter = function(init) {\\n    i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494525,
                "title": "direct-solution-beats-96",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count=init;\\n    return{\\n        increment :()=>++count,\\n        decrement :()=> --count,\\n        reset : ()=>count = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count=init;\\n    return{\\n        increment :()=>++count,\\n        decrement :()=> --count,\\n        reset : ()=>count = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497875,
                "title": "day-3-30-days-js-challenge-best-editorial-everything-explained-easy-to-understand",
                "content": "# Intuition\\nThe intuition behind this code is to create a counter object that allows you to perform three actions: $$increment$$ the counter by $$1$$, $$decrement$$ the counter by $$1$$, and $$reset$$ the counter to its initial value.\\n\\n# Approach\\nThe approach used in the code is to create a closure. The variable $$ans$$ is declared within the $$createCounter()$$ function and is assigned the initial value $$init$$. The returned object contains three functions that have access to this $$ans$$ variable through closure.\\n\\nHere\\'s an explanation of each function:\\n\\n1.$$increment()$$: This function increments the $$ans$$ variable by $$1$$ using the pre-increment operator $$(++)$$. It returns the incremented value of $$ans$$.\\n2.$$decrement()$$: This function decrements the $$ans$$ variable by $$1$$ using the pre-decrement operator $$(--)$$. It returns the decremented value of $$ans$$.\\n3.$$reset()$$: This function assigns the $$init$$ value to the $$ans$$ variable, effectively resetting it to its initial value. It does not return any value.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity of the $$increment()$$ and $$decrement()$$ functions is $$O(1)$$ because they only involve a single arithmetic operation. The $$reset()$$ function also has a time complexity of $$O(1)$$ as it simply assigns a value to a variable.\\n\\n- Space complexity:\\nThe space complexity of the code is $$O(1)$$ because it does not use any additional data structures that grow with the input. The $$ans$$ variable and the returned object are the only variables created, and they occupy constant space regardless of the input value.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    //creating ans variable\\n    var ans = init;\\n    //returning object to a function\\n    return{\\n        increment: () => ++ans,\\n        decrement: () => --ans,\\n        reset: () => ans = init\\n    }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n$$Please \\\\space Upvote \\\\space the \\\\space Solution \\\\space if \\\\space you \\\\space liked \\\\space it...$$\\n![abc.png](https://assets.leetcode.com/users/images/8a68ea47-48e3-4005-965a-37385eb8b506_1683488530.294573.png)\\n\\n$$Thank \\\\space you \\\\space so \\\\space much...$$\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    //creating ans variable\\n    var ans = init;\\n    //returning object to a function\\n    return{\\n        increment: () => ++ans,\\n        decrement: () => --ans,\\n        reset: () => ans = init\\n    }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3497177,
                "title": "js-simplest-solution",
                "content": "# Complexity\\n- Time complexity:\\n$$O(1)$$\\n\\n- Space complexity:\\n$$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param { number } init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function(init) {\\n    let state = init\\n    return {\\n        increment: () => ++state,\\n        decrement: () => --state,\\n        reset: () => state = init,\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param { number } init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function(init) {\\n    let state = init\\n    return {\\n        increment: () => ++state,\\n        decrement: () => --state,\\n        reset: () => state = init,\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495324,
                "title": "beginner-friendly-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   let count = init;\\n\\n  return {\\n    increment() {\\n      count += 1;\\n      return count;\\n    },\\n    decrement() {\\n      count -= 1;\\n      return count;\\n    },\\n    reset() {\\n      count = init;\\n      return count;\\n    }\\n  };  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   let count = init;\\n\\n  return {\\n    increment() {\\n      count += 1;\\n      return count;\\n    },\\n    decrement() {\\n      count -= 1;\\n      return count;\\n    },\\n    reset() {\\n      count = init;\\n      return count;\\n    }\\n  };  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494774,
                "title": "java-script-solution-for-counter-ii-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nThe createCounter function initializes and returns a new Counter object with an initial value passed as a parameter.\\n\\nThe Counter class has the following methods:\\n\\nincrement(): Increases the current count by 1 and returns the updated count.\\ndecrement(): Decreases the current count by 1 and returns the updated count.\\nreset(): Resets the current count to the initial value and returns the new count.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- The createCounter function takes an initial value as a parameter and returns a new instance of the Counter class, initializing it with the initial value.\\n- The Counter class maintains two properties: init, which stores the initial value passed to the constructor, and currentCount, which stores the current count.\\n- The increment method increases the currentCount by 1 and returns the updated count.\\n- The decrement method decreases the currentCount by 1 and returns the updated count.\\n- The reset method resets the currentCount to the init value and returns the new count.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nThe time complexity of each method (increment, decrement, reset) is O(1) since the operations involve simple arithmetic and assignment, which take constant time.\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nThe space complexity is O(1) because the counter object stores a constant number of variables (init and currentCount), regardless of the number of operations performed.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    return new Counter(init);\\n};\\nclass Counter {\\n  constructor(init) {\\n    this.init = init;\\n    this.currentCount = init;\\n  }\\n\\n  increment() {\\n    this.currentCount += 1;\\n    return this.currentCount;\\n  }\\n\\n  decrement() {\\n    this.currentCount -= 1;\\n    return this.currentCount;\\n  }\\n\\n  reset() {\\n    this.currentCount = this.init;\\n    return this.currentCount;\\n  }\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    return new Counter(init);\\n};\\nclass Counter {\\n  constructor(init) {\\n    this.init = init;\\n    this.currentCount = init;\\n  }\\n\\n  increment() {\\n    this.currentCount += 1;\\n    return this.currentCount;\\n  }\\n\\n  decrement() {\\n    this.currentCount -= 1;\\n    return this.currentCount;\\n  }\\n\\n  reset() {\\n    this.currentCount = this.init;\\n    return this.currentCount;\\n  }\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3494538,
                "title": "simple-solution-create-functions-and-return-object-of-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n// let val= init;\\nvar createCounter = function(init) {\\n    i=init;\\n    function increment(){\\n        i++;\\n        return i;\\n    }\\n    function decrement(){\\n        i--;\\n        return i;\\n    }\\n    function reset(){\\n        i=init;\\n        return i;\\n    }\\n    let obj={\\n        increment,\\n        decrement,\\n        reset\\n    };\\n    return obj;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n// let val= init;\\nvar createCounter = function(init) {\\n    i=init;\\n    function increment(){\\n        i++;\\n        return i;\\n    }\\n    function decrement(){\\n        i--;\\n        return i;\\n    }\\n    function reset(){\\n        i=init;\\n        return i;\\n    }\\n    let obj={\\n        increment,\\n        decrement,\\n        reset\\n    };\\n    return obj;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3886292,
                "title": "short-and-easy-approach",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3835122,
                "title": "easy-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let value = init;\\n    \\n    return {\\n        increment: () => ++value,\\n        decrement: () => --value,\\n        reset: () => value = init, \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let value = init;\\n    \\n    return {\\n        increment: () => ++value,\\n        decrement: () => --value,\\n        reset: () => value = init, \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3823102,
                "title": "javascript",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3640241,
                "title": "javascript-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const value=init;\\n    return {\\n        increment: ()=> {\\n            return ++init\\n        },\\n        decrement: ()=>{\\n           return --init\\n        },\\n        reset: ()=> {\\n            init=value\\n            return value\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const value=init;\\n    return {\\n        increment: ()=> {\\n            return ++init\\n        },\\n        decrement: ()=>{\\n           return --init\\n        },\\n        reset: ()=> {\\n            init=value\\n            return value\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3567010,
                "title": "day-3-of-js-challenge-beats-92-04-easy-solution-using-arrow-functions",
                "content": "# Intuition\\nWe use arrow function inorder to print the output according to the different functions given.\\nIncrement - we add 1 to the value\\nDecrement - we subtract 1 from the value\\nreset - we print the original value\\n\\n# Approach\\nwe have declared 3 arrow functions that perform the necessary action and return the value.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n    return{\\n    increment: () => { current+=1; return current;},\\n    decrement: () => { current-=1; return current;},\\n    reset: () => { current=init; return current},\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\nKindly upvote if you found it helpful! Happy learning!",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n    return{\\n    increment: () => { current+=1; return current;},\\n    decrement: () => { current-=1; return current;},\\n    reset: () => { current=init; return current},\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3504421,
                "title": "typescript-very-fast-solution-easy-to-understand",
                "content": "# Intuition\\n<!-- Beats 90%. -->\\n\\n# Approach\\n<!-- Beats 90%. -->\\n\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let _init = init;\\n    return {\\n        increment: () => ++_init,\\n        decrement: () => --_init,\\n        reset: () => _init = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let _init = init;\\n    return {\\n        increment: () => ++_init,\\n        decrement: () => --_init,\\n        reset: () => _init = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3501381,
                "title": "my-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n let current = init;\\n\\n  function increment() {\\n    return ++current;\\n  }\\n\\n  function decrement() {\\n    return --current;\\n  }\\n\\n  function reset() {\\n    current = init;\\n    return current;\\n  }\\n\\n  return { increment, decrement, reset };    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n let current = init;\\n\\n  function increment() {\\n    return ++current;\\n  }\\n\\n  function decrement() {\\n    return --current;\\n  }\\n\\n  function reset() {\\n    current = init;\\n    return current;\\n  }\\n\\n  return { increment, decrement, reset };    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3496974,
                "title": "easy-javascript-solution",
                "content": "# Approach\\nThe createCounter function returns an object with three functions: increment, decrement, and reset. These functions have access to a count variable that is initialized to the value of init. Each function modifies the count variable and returns the new value.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    return {\\n        increment: function(){\\n            count++;\\n            return count;\\n        },\\n        decrement: function(){\\n            count--;\\n            return count;\\n        },\\n        reset: function(){\\n            count = init;\\n            return count;\\n        }\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    return {\\n        increment: function(){\\n            count++;\\n            return count;\\n        },\\n        decrement: function(){\\n            count--;\\n            return count;\\n        },\\n        reset: function(){\\n            count = init;\\n            return count;\\n        }\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3496313,
                "title": "javascript-beats-81-4-if-you-believe-leetcode",
                "content": "# Intuition\\n\\nIt is based on LeetCode hint. LeetCode Hint tells you directly that you need to return the JavaScript object. Based on this knowledge I have decided to try to return JSON that will have an arrow functions depending on the keywords. \\n\\nAnd that was the solution! :)\\n\\n# Complexity\\n- Time complexity: $$O(1)$$\\n\\n- Space complexity: $$O(1)$$\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n\\n\\n    return {\\n        increment: () => {\\n            num++;\\n            return num;\\n        },\\n        reset: () => {\\n            num = init;\\n            return num;\\n        },\\n        decrement: () => {\\n            num--;\\n            return num;\\n        }\\n    }    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n\\n\\n    return {\\n        increment: () => {\\n            num++;\\n            return num;\\n        },\\n        reset: () => {\\n            num = init;\\n            return num;\\n        },\\n        decrement: () => {\\n            num--;\\n            return num;\\n        }\\n    }    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3496058,
                "title": "closure-3-lines-in-javascript-100",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        \\n        let count = init\\n        return{increment: () => ++count,\\n        decrement: () => --count,\\n        reset: () => count = init,\\n        }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        \\n        let count = init\\n        return{increment: () => ++count,\\n        decrement: () => --count,\\n        reset: () => count = init,\\n        }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495786,
                "title": "easy-approach",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var n=init\\n    return{\\n        increment:()=>++n,\\n        decrement:()=>--n,\\n        reset:()=>n=init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var n=init\\n    return{\\n        increment:()=>++n,\\n        decrement:()=>--n,\\n        reset:()=>n=init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495385,
                "title": "js-o-o",
                "content": "\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentCount = init\\n    return {\\n        increment: function() {\\n            currentCount += 1;\\n            return currentCount;\\n        },\\n        decrement: function() {\\n            currentCount -= 1;\\n            return currentCount;\\n        },\\n        reset: function() {\\n            currentCount = init;\\n            return currentCount;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentCount = init\\n    return {\\n        increment: function() {\\n            currentCount += 1;\\n            return currentCount;\\n        },\\n        decrement: function() {\\n            currentCount -= 1;\\n            return currentCount;\\n        },\\n        reset: function() {\\n            currentCount = init;\\n            return currentCount;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495368,
                "title": "simple-javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nIncrement, increases the value and return it,\\nDecrement, decreases the value and return it,\\nReset, return the actual value\\n\\n\\n# Complexity\\n- Time complexity: O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    \\n    function increment () {\\n        return ++count\\n    }\\n    function decrement() {\\n        return --count\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    \\n    function increment () {\\n        return ++count\\n    }\\n    function decrement() {\\n        return --count\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3495310,
                "title": "easy-simple-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var counter = init;\\n    return {\\n        increment : ()=>{\\n            counter++;\\n            return counter;\\n        },\\n        decrement : ()=>{\\n            counter--;\\n            return counter;\\n        },\\n        reset : ()=> {\\n            counter = init;\\n            return counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var counter = init;\\n    return {\\n        increment : ()=>{\\n            counter++;\\n            return counter;\\n        },\\n        decrement : ()=>{\\n            counter--;\\n            return counter;\\n        },\\n        reset : ()=> {\\n            counter = init;\\n            return counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494785,
                "title": "day-3-happy-coding",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n//  * @param {integer} init\\n//  * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    function increment(){\\n        count++;\\n        return count;\\n    }\\n    function decrement(){\\n        count--;\\n        return count;\\n    }\\n    function reset(){\\n        count = init;\\n        return count;\\n    }\\n    return { increment, decrement, reset };\\n};\\n    \\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n//  * @param {integer} init\\n//  * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    function increment(){\\n        count++;\\n        return count;\\n    }\\n    function decrement(){\\n        count--;\\n        return count;\\n    }\\n    function reset(){\\n        count = init;\\n        return count;\\n    }\\n    return { increment, decrement, reset };\\n};\\n    \\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494767,
                "title": "how-to-approach-this-problem-three-line-typescript-code-o-1-closure",
                "content": "# Intuition\\nFor solving thing problem we are going to use closure concept. As we go through the problem, two thing is sure ->\\n\\nWe need to store starting init value in variable because when we implement reset function we need them that value.\\n\\nAnd also store current value, which will change when we call increment or decrement or reset function.\\n\\n# Approach\\n1. We are going to create two variable which will store init value and current value.\\n2. After that we will create three function increment, decrement, rest.\\n3. return these function.\\n\\n# Complexity\\n- Time complexity:\\nWe are not performing any special type of operation which depend on user input. Then we can say Time Complexity is $$O(1)$$\\n\\n- Space complexity:\\nWe are just creating two variable and it\\'s not depend user how many time call this function. Then we can Space Complexity is $$O(1)$$\\n\\n# Code\\nJavascript\\n```javascript\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const resetValue = init;\\n    let value = init;\\n    const increment = () => ++value;\\n    const decrement = () => --value;\\n    const reset = () => (value = resetValue);\\n    return {increment,decrement,reset};\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\nTypescript\\n```typescript\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    const resetValue = init;\\n    let currentValue = init;\\n    return {\\n        increment: (): number => ++currentValue,\\n        decrement: (): number => --currentValue,\\n        reset: (): number => currentValue = resetValue,\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```javascript\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const resetValue = init;\\n    let value = init;\\n    const increment = () => ++value;\\n    const decrement = () => --value;\\n    const reset = () => (value = resetValue);\\n    return {increment,decrement,reset};\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\n```typescript\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    const resetValue = init;\\n    let currentValue = init;\\n    return {\\n        increment: (): number => ++currentValue,\\n        decrement: (): number => --currentValue,\\n        reset: (): number => currentValue = resetValue,\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494668,
                "title": "simple-easy-solution-with-explanation",
                "content": "\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nYou can take a temp variable, assign it to the value of init. Then write 3 function as increment() which will increment the value by 1, reset() the will reset the value back to original, and decrement() which will decrement the value by 1. And then finaly return the temp variable; \\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n      let temp=init;\\n    return {\\n        increment(){\\n            return ++temp;\\n        },\\n        decrement(){\\n            return --temp;\\n        },\\n        reset(){\\n            temp=init;\\n            return temp;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n      let temp=init;\\n    return {\\n        increment(){\\n            return ++temp;\\n        },\\n        decrement(){\\n            return --temp;\\n        },\\n        reset(){\\n            temp=init;\\n            return temp;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494562,
                "title": "easy-js-solution-with-explain-closure",
                "content": "# Intuition\\nThe goal of the problem is to create a constructor function that returns an object with methods for incrementing, decrementing, and resetting a counter value. Closures allow maintaining state between function calls.\\n\\n# Approach\\n1. Create a createCounter function with an init argument, which will initialize the starting value of the counter.\\n2. Inside the createCounter function, create a counter variable and set its value equal to init.\\n3. Return an object with increment, decrement, and reset methods, which modify the counter value accordingly and return it.\\n4. Use closure to retain the counter value between function calls.\\n\\n# Complexity\\n- Time and space complexity:\\n- O(1) - bcs it\\'s just simple math\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function () {\\n            return ++counter;\\n        },\\n        decrement: function () {\\n            return --counter;\\n        },\\n        reset: function () {\\n            counter = init;\\n            return counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function () {\\n            return ++counter;\\n        },\\n        decrement: function () {\\n            return --counter;\\n        },\\n        reset: function () {\\n            counter = init;\\n            return counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3494501,
                "title": "closure-easy-to-understand-implementation",
                "content": "\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    const increment = () => {\\n        count++;\\n        return count;\\n    }\\n\\n    const decrement = () => {\\n        count--;\\n        return count;\\n    }\\n\\n    const reset = () => {\\n        count = init;\\n        return count;\\n    }\\n\\n    return {increment, decrement, reset};\\n\\n};\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    const increment = () => {\\n        count++;\\n        return count;\\n    }\\n\\n    const decrement = () => {\\n        count--;\\n        return count;\\n    }\\n\\n    const reset = () => {\\n        count = init;\\n        return count;\\n    }\\n\\n    return {increment, decrement, reset};\\n\\n};\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3488461,
                "title": "javascript-solution",
                "content": "\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count=init;\\n    return {\\n        increment(){\\n            return ++count;\\n        },\\n        decrement(){\\n            return --count;\\n        },\\n        reset(){\\n            count=init;\\n            return count;\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count=init;\\n    return {\\n        increment(){\\n            return ++count;\\n        },\\n        decrement(){\\n            return --count;\\n        },\\n        reset(){\\n            count=init;\\n            return count;\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3486119,
                "title": "class-based-implementation",
                "content": "\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\n class Counter {\\n     constructor(init){\\n         this.initVal = init;\\n         this.val = this.initVal;\\n     }\\n\\n     increment(){\\n         return this.val+=1;\\n     }\\n\\n     decrement(){\\n         return this.val-=1;\\n     }\\n\\n     reset(){\\n         return this.val = this.initVal;\\n     }\\n }\\nvar createCounter = function(init) {\\n    return new Counter(init);\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\n class Counter {\\n     constructor(init){\\n         this.initVal = init;\\n         this.val = this.initVal;\\n     }\\n\\n     increment(){\\n         return this.val+=1;\\n     }\\n\\n     decrement(){\\n         return this.val-=1;\\n     }\\n\\n     reset(){\\n         return this.val = this.initVal;\\n     }\\n }\\nvar createCounter = function(init) {\\n    return new Counter(init);\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 3484840,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  const original = init\\n  const increment = () => ++init\\n  const decrement = () => --init\\n  const reset = () => init = original\\n\\n  return { increment, decrement, reset }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  const original = init\\n  const increment = () => ++init\\n  const decrement = () => --init\\n  const reset = () => init = original\\n\\n  return { increment, decrement, reset }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4098752,
                "title": "clean-and-easy-approach-step-wise-explanation",
                "content": "# Intuition\\nStep 1 : First read the question.\\nStep 2 : It says return an object so we use \"return {}\", curly braces are symbol of object literals.\\nStep 3 : Now an object consists of key-value pairs so, our \\'key\\' will be the \\'function name\\' and value will be the function implementation.\\nStep 4 : For the code of function implementation just follow what question demands like increment, decrement or reset.\\n\\n# Code\\n```\\nvar createCounter = function(init) {\\n    var temp = init;\\n    return {\\n        increment : function(){\\n            return ++temp;\\n        },\\n        decrement : function(){\\n            return --temp;\\n        },\\n        reset : function(){\\n            temp = init;\\n            return temp;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    var temp = init;\\n    return {\\n        increment : function(){\\n            return ++temp;\\n        },\\n        decrement : function(){\\n            return --temp;\\n        },\\n        reset : function(){\\n            temp = init;\\n            return temp;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4097956,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var x=init;\\n    var calls={\\n         reset:function(){\\n             init=x;\\n            return init;\\n        },\\n        increment:function(){\\n    init++;\\n          return init;\\n        },\\n        decrement:function(){\\n           init--;\\n            return init;\\n        },\\n    }\\n    return calls;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var x=init;\\n    var calls={\\n         reset:function(){\\n             init=x;\\n            return init;\\n        },\\n        increment:function(){\\n    init++;\\n          return init;\\n        },\\n        decrement:function(){\\n           init--;\\n            return init;\\n        },\\n    }\\n    return calls;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4096443,
                "title": "counter-ii-javascript-solution-by-bharadwaj",
                "content": "# Approach\\nFunctional\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    }\\n};\\n\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    }\\n};\\n\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4095973,
                "title": "easy-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const initialValue = init;\\n    let currentValue = init;\\n    const increment = ()  => {\\n      currentValue += 1;\\n      return currentValue;\\n    }\\n    const decrement = ()  => {\\n      currentValue -= 1;\\n      return currentValue;\\n    }\\n    const reset = ()  => {\\n      currentValue = initialValue;\\n      return currentValue;\\n    }\\n\\n    return {increment,decrement,reset};\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const initialValue = init;\\n    let currentValue = init;\\n    const increment = ()  => {\\n      currentValue += 1;\\n      return currentValue;\\n    }\\n    const decrement = ()  => {\\n      currentValue -= 1;\\n      return currentValue;\\n    }\\n    const reset = ()  => {\\n      currentValue = initialValue;\\n      return currentValue;\\n    }\\n\\n    return {increment,decrement,reset};\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094618,
                "title": "operation-counter-2",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   const currentNum = init\\n   return {\\n    increment: ()=>{\\n        return init+=1\\n    },\\n    decrement: ()=>{\\n        return init-=1\\n    },\\n    reset: ()=>{\\n        return init = currentNum\\n    }\\n   }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   const currentNum = init\\n   return {\\n    increment: ()=>{\\n        return init+=1\\n    },\\n    decrement: ()=>{\\n        return init-=1\\n    },\\n    reset: ()=>{\\n        return init = currentNum\\n    }\\n   }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4094075,
                "title": "simple-solution",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n- understanding sub functions much better\\n- had to use temp: function() {} instead of temp: () => {}\\n- maybe it has something to do with arrow functions not taking in this.x?\\n\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = (init) => {\\n    return {\\n        x : init,\\n        increment: function() {\\n            this.x++;\\n            return this.x;\\n        },\\n        decrement: function()  {\\n            this.x--;\\n            return this.x;\\n        },\\n        reset: function() {\\n            this.x = init;\\n            return init;\\n        }\\n\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = (init) => {\\n    return {\\n        x : init,\\n        increment: function() {\\n            this.x++;\\n            return this.x;\\n        },\\n        decrement: function()  {\\n            this.x--;\\n            return this.x;\\n        },\\n        reset: function() {\\n            this.x = init;\\n            return init;\\n        }\\n\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4091297,
                "title": "counter-ii",
                "content": "# Intuition\\nhere is a JavaScript function to create a counter object with three functions: increment(), decrement(), and reset():\\n# Approach\\nTo use the createCounter() function, simply pass in the initial value of the counter as an argument. The function will return a counter object with three functions: increment(), decrement(), and reset().\\n\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nfunction createCounter(init) {\\n  class Counter {\\n    constructor(init) {\\n      this.value = init;\\n    }\\n\\n    increment() {\\n      this.value += 1;\\n      return this.value;\\n    }\\n\\n    decrement() {\\n      this.value -= 1;\\n      return this.value;\\n    }\\n\\n    reset() {\\n      this.value = init;\\n      return this.value;\\n    }\\n  }\\n\\n  return new Counter(init);\\n}\\n\\n const counter = createCounter(5)\\n  counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n\\nFor example, the following code creates a counter object with an initial value of 5:\\n\\n```\\n const counter = createCounter(5)\\n```\\nYou can then use the increment(), decrement(), and reset() functions to modify the value of the counter:\\n\\n```\\n  counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n```\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nfunction createCounter(init) {\\n  class Counter {\\n    constructor(init) {\\n      this.value = init;\\n    }\\n\\n    increment() {\\n      this.value += 1;\\n      return this.value;\\n    }\\n\\n    decrement() {\\n      this.value -= 1;\\n      return this.value;\\n    }\\n\\n    reset() {\\n      this.value = init;\\n      return this.value;\\n    }\\n  }\\n\\n  return new Counter(init);\\n}\\n\\n const counter = createCounter(5)\\n  counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\n```\\n const counter = createCounter(5)\\n```\n```\\n  counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4090026,
                "title": "short-and-easy-approach",
                "content": "\\n```\\nvar createCounter = function(init) {\\n    var initialVal = init;\\n    var currVal = init;\\n    return {\\n        increment : function(){\\n            return ++currVal;\\n        },\\n        decrement : function(){\\n            return --currVal;\\n        },\\n        reset : function(){\\n            currVal = initialVal;\\n            return currVal;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    var initialVal = init;\\n    var currVal = init;\\n    return {\\n        increment : function(){\\n            return ++currVal;\\n        },\\n        decrement : function(){\\n            return --currVal;\\n        },\\n        reset : function(){\\n            currVal = initialVal;\\n            return currVal;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088922,
                "title": "counter2-with-constraints",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    \\n    function increment () {\\n        return ++count\\n    }\\n    function decrement() {\\n        return --count\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n    \\n    function increment () {\\n        return ++count\\n    }\\n    function decrement() {\\n        return --count\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088908,
                "title": "counter-with-constraints",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        let count= init\\n        if (-1000 <= init <= 1000){\\n             return {\\n                 increment:()=> ++count,\\n                 reset:()=> count=init,\\n                 decrement:()=>--count\\n             }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        let count= init\\n        if (-1000 <= init <= 1000){\\n             return {\\n                 increment:()=> ++count,\\n                 reset:()=> count=init,\\n                 decrement:()=>--count\\n             }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4088021,
                "title": "easy-and-the-shortest",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:  O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function (init) {\\n  // Creating variable\\n  let currentCount = init;\\n  // return an object\\n  return {\\n    // increment\\n    increment: () => (currentCount += 1),\\n    // decrement\\n    decrement: () => (currentCount -= 1),\\n    // reset\\n    reset: () => (currentCount = init),\\n  };\\n};\\n\\nconst counter = createCounter(5);\\nconsole.log(\\n  counter.increment(), // 6\\n  counter.reset(), // 5\\n  counter.decrement()\\n); // 4;\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = function (init) {\\n  // Creating variable\\n  let currentCount = init;\\n  // return an object\\n  return {\\n    // increment\\n    increment: () => (currentCount += 1),\\n    // decrement\\n    decrement: () => (currentCount -= 1),\\n    // reset\\n    reset: () => (currentCount = init),\\n  };\\n};\\n\\nconst counter = createCounter(5);\\nconsole.log(\\n  counter.increment(), // 6\\n  counter.reset(), // 5\\n  counter.decrement()\\n); // 4;\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4087506,
                "title": "neercode",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let n = init;\\n    return{\\n        increment: () => n+=1, decrement: () => n-=1, reset: () => (n=init),\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let n = init;\\n    return{\\n        increment: () => n+=1, decrement: () => n-=1, reset: () => (n=init),\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4084932,
                "title": "my-code",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let val = init;\\n    return {\\n      increment: () => ++val,\\n       decrement: () => --val,\\n       reset: () => val = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let val = init;\\n    return {\\n      increment: () => ++val,\\n       decrement: () => --val,\\n       reset: () => val = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4083797,
                "title": "counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    function increment(){\\n        return ++count;\\n    }\\n\\n    function decrement(){\\n        return --count;\\n    }\\n\\n    function reset() {\\n        count = init;\\n        return count;\\n    }\\n\\n    return{\\n        increment : increment,\\n        decrement : decrement,\\n        reset : reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    function increment(){\\n        return ++count;\\n    }\\n\\n    function decrement(){\\n        return --count;\\n    }\\n\\n    function reset() {\\n        count = init;\\n        return count;\\n    }\\n\\n    return{\\n        increment : increment,\\n        decrement : decrement,\\n        reset : reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077733,
                "title": "counter2-simple-solution",
                "content": "# Intuition\\nThe goal of this problem is to create a counter object that has three functions: increment(), decrement(), and reset(). These functions should manipulate and return the current value of the counter based on an initial value provided when creating the counter object.\\n\\n# Approach\\nThe approach involves creating a counter object using a JavaScript function. This function takes an initial value init as a parameter and returns an object with three methods:\\n\\n-increment(): This method increases the current value of the counter by 1 and then returns the updated value.\\n\\n-decrement(): This method decreases the current value of the counter by 1 and then returns the updated value.\\n\\n-reset(): This method resets the current value of the counter to its initial value provided during object creation and returns the initial value.\\n\\nTo achieve this, we store the initial value in a separate variable (initial) inside the closure of the returned object, and the other methods (increment, decrement, and reset) manipulate and access this init value.\\n\\n# Complexity\\nThe time complexity of the increment() and decrement() methods is O(1) since they only involve simple arithmetic operations.\\n\\nThe reset() method is also O(1) because it involves a single assignment operation.\\n\\n# Space complexity:\\nThe space complexity is O(1) as we\\'re only storing a constant number of variables (init and initial) regardless of the input size.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var initial = init;\\n  return {\\n    increment: function() {\\n      init++;\\n      return init;\\n    },\\n\\n    decrement: function() {\\n      init--;\\n      return init;\\n    },\\n\\n    reset: function() {\\n      init = initial\\n      return init;\\n    }\\n  };\\n};\\n \\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var initial = init;\\n  return {\\n    increment: function() {\\n      init++;\\n      return init;\\n    },\\n\\n    decrement: function() {\\n      init--;\\n      return init;\\n    },\\n\\n    reset: function() {\\n      init = initial\\n      return init;\\n    }\\n  };\\n};\\n \\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4077426,
                "title": "i-love-this-tests",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var count = init;\\n    \\n    function increment(){\\n         count++;\\n         return count;\\n    }\\n\\n     function decrement(){\\n          count--;\\n         return  count;\\n    }\\n\\n    function reset(){\\n         count= init;\\n     return count\\n    }\\n\\nreturn {\\n    increment,\\n    decrement,\\n    reset }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var count = init;\\n    \\n    function increment(){\\n         count++;\\n         return count;\\n    }\\n\\n     function decrement(){\\n          count--;\\n         return  count;\\n    }\\n\\n    function reset(){\\n         count= init;\\n     return count\\n    }\\n\\nreturn {\\n    increment,\\n    decrement,\\n    reset }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4074243,
                "title": "it-is-solve-very-simple",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072862,
                "title": "counter-problem-in-java-script-use-method-channing",
                "content": "# Intuition\\nIn this proble we have to make the three method \\n\\n# Approach\\nhere we return and object of method which have properties of function \\n\\n# Complexity\\n- Time complexity:  O(1)\\n\\n- Space complexity: O(1)\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    return {\\n        no: init,\\n        increment : function(){\\n            this.no +=1;\\n            return this.no\\n        },\\n        decrement : function(){\\n            this.no -=1;\\n            return this.no\\n        },\\nreset : function(){\\n    this.no = init\\n     return this.no\\n        }\\n    }\\n};\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    return {\\n        no: init,\\n        increment : function(){\\n            this.no +=1;\\n            return this.no\\n        },\\n        decrement : function(){\\n            this.no -=1;\\n            return this.no\\n        },\\nreset : function(){\\n    this.no = init\\n     return this.no\\n        }\\n    }\\n};\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4072359,
                "title": "2665-counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\nvar createCounter = function(init) {\\n    const resetVal = init;\\n    return {\\n        increment : () => ++init,\\n        decrement: () => --init,\\n        reset: () => init = resetVal,\\n    }\\n};\\nconst counter = createCounter(5)\\n console.log(counter.increment()); // 6\\n console.log(counter.reset()); // 5\\n console.log(counter.decrement()); // 4\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    const resetVal = init;\\n    return {\\n        increment : () => ++init,\\n        decrement: () => --init,\\n        reset: () => init = resetVal,\\n    }\\n};\\nconst counter = createCounter(5)\\n console.log(counter.increment()); // 6\\n console.log(counter.reset()); // 5\\n console.log(counter.decrement()); // 4\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069493,
                "title": "2665-counter-ii-answer",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var currentVal = init;\\n    const objThree = {\\n      increment: (() => {\\n        return init = init + 1\\n      }),\\n      decrement: (() => {\\n        return init = init - 1\\n      }),\\n      reset: (() => {\\n        return init = currentVal\\n      }), \\n    }\\n    \\n    return objThree;\\n};\\n\\n\\n\\nconst counter = createCounter(5)\\ncounter.increment(); // 6\\ncounter.reset(); // 5\\ncounter.decrement(); // 4\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var currentVal = init;\\n    const objThree = {\\n      increment: (() => {\\n        return init = init + 1\\n      }),\\n      decrement: (() => {\\n        return init = init - 1\\n      }),\\n      reset: (() => {\\n        return init = currentVal\\n      }), \\n    }\\n    \\n    return objThree;\\n};\\n\\n\\n\\nconst counter = createCounter(5)\\ncounter.increment(); // 6\\ncounter.reset(); // 5\\ncounter.decrement(); // 4\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4069044,
                "title": "counter-ii-js-solution",
                "content": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init\\n    function increment(){\\n        num += 1\\n        return num\\n    }\\n    function reset(){\\n        num = init\\n        return num\\n    }\\n    function decrement(){\\n        num -= 1\\n        return num\\n    }\\n    return { increment, reset, decrement }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init\\n    function increment(){\\n        num += 1\\n        return num\\n    }\\n    function reset(){\\n        num = init\\n        return num\\n    }\\n    function decrement(){\\n        num -= 1\\n        return num\\n    }\\n    return { increment, reset, decrement }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */",
                "codeTag": "Unknown"
            },
            {
                "id": 4068200,
                "title": "2-easy-ways",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   \\n    let count = init;\\n\\n    // const increment = () => ++count\\n    // const decrement = () => --count\\n    // const reset = () => {\\n    //   count = init\\n    //   return init\\n    // }\\n    // return { increment, decrement, reset}\\n\\n    \\n    //*****OR**** */\\n\\n    return {\\n      increment: () => ++count,\\n      decrement: () => --count,\\n      reset: () => count = init\\n      }\\n\\n  }\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   \\n    let count = init;\\n\\n    // const increment = () => ++count\\n    // const decrement = () => --count\\n    // const reset = () => {\\n    //   count = init\\n    //   return init\\n    // }\\n    // return { increment, decrement, reset}\\n\\n    \\n    //*****OR**** */\\n\\n    return {\\n      increment: () => ++count,\\n      decrement: () => --count,\\n      reset: () => count = init\\n      }\\n\\n  }\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4067001,
                "title": "beginner-friendly-javascript-solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        let value = init;\\n        return {\\n        increment: () => {\\n            return ++value;\\n        },\\n        decrement: () => {\\n            return --value;\\n        },\\n        reset: () => {\\n            value = init;\\n            return value\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n        let value = init;\\n        return {\\n        increment: () => {\\n            return ++value;\\n        },\\n        decrement: () => {\\n            return --value;\\n        },\\n        reset: () => {\\n            value = init;\\n            return value\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4062017,
                "title": "counter-ii-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let x = init\\n    return {\\n            reset : () =>{\\n            return x = init;\\n        },\\n        increment : () =>{\\n            return ++x ;\\n        },\\n        decrement : () =>{\\n            return --x ;\\n        }, \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let x = init\\n    return {\\n            reset : () =>{\\n            return x = init;\\n        },\\n        increment : () =>{\\n            return ++x ;\\n        },\\n        decrement : () =>{\\n            return --x ;\\n        }, \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060644,
                "title": "arrow-function-to-createcounter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentCount = init;\\n    return {\\n        increment: () => currentCount += 1,\\n        decrement: () => currentCount -= 1,\\n        reset: () => currentCount = init\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentCount = init;\\n    return {\\n        increment: () => currentCount += 1,\\n        decrement: () => currentCount -= 1,\\n        reset: () => currentCount = init\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4060321,
                "title": "74-beats",
                "content": "# Intuition\\n74% beats\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let numbers = init;\\n    return{\\n        increment: ()=>{\\n            // numbers++;\\n            return ++numbers;\\n        },\\n        decrement: ()=>{\\n            // numbers--;\\n            return --numbers;\\n        },\\n        reset: ()=>{\\n            // numbers = init;\\n            return (numbers = init);\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let numbers = init;\\n    return{\\n        increment: ()=>{\\n            // numbers++;\\n            return ++numbers;\\n        },\\n        decrement: ()=>{\\n            // numbers--;\\n            return --numbers;\\n        },\\n        reset: ()=>{\\n            // numbers = init;\\n            return (numbers = init);\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4057660,
                "title": "good-to-remember-the-difference-between-pre-post-increment-decrement",
                "content": "# Code\\n```\\nconst createCounter = (init) => {\\n  let CurrentInit = init;\\n  return {\\n    increment: () => ++CurrentInit,\\n    decrement: () => --CurrentInit,\\n    reset: () => CurrentInit = init,\\n  };\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nconst createCounter = (init) => {\\n  let CurrentInit = init;\\n  return {\\n    increment: () => ++CurrentInit,\\n    decrement: () => --CurrentInit,\\n    reset: () => CurrentInit = init,\\n  };\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055906,
                "title": "solution-with-easy-peasy-explanation",
                "content": "# Intuition\\nFor the very basic steps, you know that you need to increment init, decrement init and then have it stored in another variable so you can reset it.\\n\\n# Approach\\n2 concepts are useful here. First is closure, which means that when a function is called from inside another function, the variables of the outer functions are retained in further calls, in simpler terms, it will remember. So here, you can be carefree about accessing init variable. \\n\\nNext is Pass by Value, by default in JS, primitive data types are passed by value, so you can easily create a new variable called \"og\" (stand for original) in this case and use that to reset init. There you go, easy peasy now that you know the concepts. Happy Coding!\\n\\n# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\no(1)\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nlet createCounter = function(init) {\\n    const og = init\\n    return {\\n        increment : function(){\\n            init++\\n            return init\\n        },\\n        decrement : ()=>{\\n             init--\\n             return init\\n            \\n        },\\n        reset : ()=>{\\n            init = og\\n            return init\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nlet createCounter = function(init) {\\n    const og = init\\n    return {\\n        increment : function(){\\n            init++\\n            return init\\n        },\\n        decrement : ()=>{\\n             init--\\n             return init\\n            \\n        },\\n        reset : ()=>{\\n            init = og\\n            return init\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055875,
                "title": "2665-counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let curent = init;\\n    return{\\n        increment:() => ++init,\\n        decrement:() => --init,\\n        reset:() =>  init = curent\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let curent = init;\\n    return{\\n        increment:() => ++init,\\n        decrement:() => --init,\\n        reset:() =>  init = curent\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4055237,
                "title": "counter-object-implementation-with-javascript",
                "content": "# Intuition\\nThe problem is to create a counter object that can be initialized with an initial value and provides methods to increment, decrement, and reset the counter.\\n\\n# Approach\\nI have implemented a closure-based approach to create the counter object. The `createCounter` function takes an initial value (`init`) and returns an object with three methods: `increment`, `decrement`, and `reset`. These methods allow manipulating the counter value as per the requirements.\\n\\n# Complexity\\n- Time complexity:\\nThe time complexity for each of the methods (`increment`, `decrement`, and `reset`) is O(1) because they involve simple arithmetic operations and assignment, which take constant time.\\n\\n\\n- Space complexity:\\nThe space complexity of the counter object created by `createCounter` is O(1). It only stores the current counter value and a few functions, which do not depend on the size of the input.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n\\n  return {\\n    increment: () => ++current,\\n    decrement: () => --current,\\n    reset: () => {\\n      current = init;\\n      return current;\\n    }\\n  };\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n\\n  return {\\n    increment: () => ++current,\\n    decrement: () => --current,\\n    reset: () => {\\n      current = init;\\n      return current;\\n    }\\n  };\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4054209,
                "title": "easy-approch",
                "content": "# Intuition\\nThe problem is asking us to create a counter object that can increment, decrement, and reset a value. The initial value of the counter is provided as an argument when creating the counter object.\\n\\n# Approach\\nWe can approach this problem by creating a closure in JavaScript. We initialize a variable `num` with the provided initial value (`init`) and return an object with three functions: `increment`, `decrement`, and `reset`. These functions modify and return the `num` variable accordingly.\\n\\n- `increment` function: This function increments the `num` variable by 1 and returns the new value.\\n- `decrement` function: This function decrements the `num` variable by 1 and returns the new value.\\n- `reset` function: This function sets the `num` variable back to its initial value (`init`) and returns that value.\\n\\n# Complexity\\n- Time complexity: All three operations (increment, decrement, reset) have a time complexity of O(1) because they involve simple arithmetic operations on a single variable.\\n- Space complexity: The space complexity is O(1) as we only use a single variable `num` and a few function references.\\n\\n# Code\\n```javascript\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: function() {\\n            return ++num;\\n        },\\n        decrement: function() {\\n            return --num;\\n        },\\n        reset: function() {\\n            num = init;\\n            return num;\\n        }\\n    }\\n};\\n\\n/**\\n * Example usage:\\n * const counter = createCounter(5);\\n * console.log(counter.increment()); // Output: 6\\n * console.log(counter.reset());     // Output: 5\\n * console.log(counter.decrement()); // Output: 4\\n */\\n```\\n\\nYou can create a counter object with an initial value, use the `increment`, `decrement`, and `reset` functions as shown in the example usage, and observe how the counter behaves.",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: function() {\\n            return ++num;\\n        },\\n        decrement: function() {\\n            return --num;\\n        },\\n        reset: function() {\\n            num = init;\\n            return num;\\n        }\\n    }\\n};\\n\\n/**\\n * Example usage:\\n * const counter = createCounter(5);\\n * console.log(counter.increment()); // Output: 6\\n * console.log(counter.reset());     // Output: 5\\n * console.log(counter.decrement()); // Output: 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4047863,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var count = init\\n    return {\\n        increment:() => {\\n            count++\\n            return count\\n        },\\n        decrement:() => {\\n            count--\\n            return count\\n        },\\n        reset:() => {\\n            count = init\\n            return count\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var count = init\\n    return {\\n        increment:() => {\\n            count++\\n            return count\\n        },\\n        decrement:() => {\\n            count--\\n            return count\\n        },\\n        reset:() => {\\n            count = init\\n            return count\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4046850,
                "title": "creating-a-counter-object-in-javascript-with-pre-increment-pre-decrement-and-reset-functions",
                "content": "# Intuition\\n<!-- Provide a brief description of your initial thoughts and strategies for solving this problem. -->\\n\\nThe goal of this problem is to create a counter object that can be incremented, decremented, and reset to its initial value. To achieve this, we can use a closure in JavaScript to encapsulate the current value of the counter.\\n\\n# Approach\\n<!-- Describe the approach you took to solve the problem. -->\\n\\nI used a closure to create a `createCounter` function that takes an initial value and returns an object with three methods:\\n1. `increment`: Increments the counter by 1 using pre-increment.\\n2. `decrement`: Decrements the counter by 1 using pre-decrement.\\n3. `reset`: Resets the counter to its initial value and returns the reset value.\\n\\nUsing pre-increment and pre-decrement ensures that the counter is updated before returning the new value, providing the desired behavior.\\n\\nAdditionally, I chose to reset the counter to its initial value first and then return the reset value in the `reset` method. This design choice simplifies the usage of the `reset` function. By resetting first, you can immediately access the reset value without the need for additional steps. This aligns with the principle of making functions as straightforward and predictable as possible.\\n\\n# Complexity\\n- Time complexity: O(1)\\n  - The time complexity of each method (increment, decrement, and reset) is O(1) because they involve simple arithmetic operations that take a constant amount of time.\\n\\n- Space complexity: O(1)\\n  - The space complexity of the `createCounter` function is O(1) because it only creates a single object with three methods and a single variable (`currentValue`) regardless of the input.\\n\\n# Code\\n```javascript\\n/**\\n * @param {integer} init - The initial value of the counter.\\n * @return {Object} - An object with increment, decrement, and reset methods.\\n */\\nvar createCounter = function (init) {\\n    let currentValue = init; // Initialize the currentValue with the provided initial value.\\n    return {\\n        increment: () => ++currentValue, // Increment the currentValue and return the new value using pre-increment.\\n        decrement: () => --currentValue, // Decrement the currentValue and return the new value using pre-decrement.\\n        reset: () => {\\n            currentValue = init; // Reset the currentValue to the initial value first.\\n            return currentValue; // Return the reset value.\\n        }\\n    }\\n};\\n\\n// Example usage:\\nconst counter = createCounter(5);\\nconsole.log(counter.increment()); // Output: 6\\nconsole.log(counter.reset()); // Output: 5\\nconsole.log(counter.decrement()); // Output: 4\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\n<!-- Provide a brief description of your initial thoughts and strategies for solving this problem. -->\\n\\nThe goal of this problem is to create a counter object that can be incremented, decremented, and reset to its initial value. To achieve this, we can use a closure in JavaScript to encapsulate the current value of the counter.\\n\\n# Approach\\n<!-- Describe the approach you took to solve the problem. -->\\n\\nI used a closure to create a `createCounter` function that takes an initial value and returns an object with three methods:\\n1. `increment`: Increments the counter by 1 using pre-increment.\\n2. `decrement`: Decrements the counter by 1 using pre-decrement.\\n3. `reset`: Resets the counter to its initial value and returns the reset value.\\n\\nUsing pre-increment and pre-decrement ensures that the counter is updated before returning the new value, providing the desired behavior.\\n\\nAdditionally, I chose to reset the counter to its initial value first and then return the reset value in the `reset` method. This design choice simplifies the usage of the `reset` function. By resetting first, you can immediately access the reset value without the need for additional steps. This aligns with the principle of making functions as straightforward and predictable as possible.\\n\\n# Complexity\\n- Time complexity: O(1)\\n  - The time complexity of each method (increment, decrement, and reset) is O(1) because they involve simple arithmetic operations that take a constant amount of time.\\n\\n- Space complexity: O(1)\\n  - The space complexity of the `createCounter` function is O(1) because it only creates a single object with three methods and a single variable (`currentValue`) regardless of the input.\\n\\n# Code\\n```javascript\\n/**\\n * @param {integer} init - The initial value of the counter.\\n * @return {Object} - An object with increment, decrement, and reset methods.\\n */\\nvar createCounter = function (init) {\\n    let currentValue = init; // Initialize the currentValue with the provided initial value.\\n    return {\\n        increment: () => ++currentValue, // Increment the currentValue and return the new value using pre-increment.\\n        decrement: () => --currentValue, // Decrement the currentValue and return the new value using pre-decrement.\\n        reset: () => {\\n            currentValue = init; // Reset the currentValue to the initial value first.\\n            return currentValue; // Return the reset value.\\n        }\\n    }\\n};\\n\\n// Example usage:\\nconst counter = createCounter(5);\\nconsole.log(counter.increment()); // Output: 6\\nconsole.log(counter.reset()); // Output: 5\\nconsole.log(counter.decrement()); // Output: 4\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 4044929,
                "title": "counter-ii-using-pre-increment",
                "content": "\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1. Take an object as return statement\\n2. Have three **Key:Value** pairs, having names increment, decrement, reset\\n3. Use **Pre increment to first execute the operation and then return value** rather than preincrement\\n\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentVal = init\\n    return {\\n        increment: () => ++presentVal,\\n        decrement: () => --presentVal,\\n        reset: () => presentVal = init\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentVal = init\\n    return {\\n        increment: () => ++presentVal,\\n        decrement: () => --presentVal,\\n        reset: () => presentVal = init\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4041750,
                "title": "easy-approach",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let value = init\\n    \\n    return {\\n        reset: () => value = init,\\n        increment: () => ++value,\\n        decrement: () => --value\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let value = init\\n    \\n    return {\\n        reset: () => value = init,\\n        increment: () => ++value,\\n        decrement: () => --value\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4040316,
                "title": "simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentVal = init;\\n    return {\\n        increment: () => {\\n            return ++currentVal;\\n        },\\n        decrement: () => {\\n            return --currentVal;\\n        },\\n        reset: () => {\\n            currentVal = init;\\n            return currentVal;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentVal = init;\\n    return {\\n        increment: () => {\\n            return ++currentVal;\\n        },\\n        decrement: () => {\\n            return --currentVal;\\n        },\\n        reset: () => {\\n            currentVal = init;\\n            return currentVal;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4039671,
                "title": "counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\n   var createCounter = function(init) {\\n       let i = init;\\n  return {\\n      increment() {\\n          return ++i;\\n      },\\ndecrement() {\\n          return --i;\\n      },\\n       reset(){\\n            i = init;\\n            return i;\\n        }\\n\\n  }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\n   var createCounter = function(init) {\\n       let i = init;\\n  return {\\n      increment() {\\n          return ++i;\\n      },\\ndecrement() {\\n          return --i;\\n      },\\n       reset(){\\n            i = init;\\n            return i;\\n        }\\n\\n  }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4038154,
                "title": "simple-and-easy-to-understand",
                "content": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  let n = init;\\n  return {\\n    increment: () => {\\n      return ++n;\\n    },\\n    decrement: () => {\\n      return --n;\\n    },\\n    reset: () => {\\n      n = init;\\n      return n;\\n    }\\n  }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n  let n = init;\\n  return {\\n    increment: () => {\\n      return ++n;\\n    },\\n    decrement: () => {\\n      return --n;\\n    },\\n    reset: () => {\\n      n = init;\\n      return n;\\n    }\\n  }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037426,
                "title": "javascript-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let original = init\\n    return {\\n        increment() {\\n            init++\\n            return init\\n        },\\n        reset() {\\n            init = original\\n            return init\\n        },\\n        decrement() {\\n            init--\\n            return init\\n        },\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let original = init\\n    return {\\n        increment() {\\n            init++\\n            return init\\n        },\\n        reset() {\\n            init = original\\n            return init\\n        },\\n        decrement() {\\n            init--\\n            return init\\n        },\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4037329,
                "title": "easy-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let x = init;\\n    function increment() {\\n        x = x+1;\\n        return x\\n    };\\n    function decrement() {\\n        x = x-1;\\n        return x\\n    };\\n\\n    function reset(){\\n        x = init;\\n        return x\\n    };\\n\\n    return { increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let x = init;\\n    function increment() {\\n        x = x+1;\\n        return x\\n    };\\n    function decrement() {\\n        x = x-1;\\n        return x\\n    };\\n\\n    function reset(){\\n        x = init;\\n        return x\\n    };\\n\\n    return { increment, decrement, reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4035108,
                "title": "simple-js-solution",
                "content": "```\\nvar createCounter = function(init) {\\n    var val = init;\\n    return {\\n        increment: () => {\\n            return ++val;\\n        },\\n        decrement: () => {\\n            return --val;\\n        },\\n        reset: () => {\\n            val = init;\\n            return val;\\n        }\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    var val = init;\\n    return {\\n        increment: () => {\\n            return ++val;\\n        },\\n        decrement: () => {\\n            return --val;\\n        },\\n        reset: () => {\\n            val = init;\\n            return val;\\n        }\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034990,
                "title": "much-easiest-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let a=init;\\n    function increment(){\\n        return ++a\\n    }\\n    function decrement(){\\n        return --a\\n    }\\n    function reset(){\\n        return a=init\\n    }\\n    return{increment,decrement,reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let a=init;\\n    function increment(){\\n        return ++a\\n    }\\n    function decrement(){\\n        return --a\\n    }\\n    function reset(){\\n        return a=init\\n    }\\n    return{increment,decrement,reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034374,
                "title": "js-simple-solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nfunction createCounter(init) {\\n    let startNumber = init;\\n\\n    return {\\n        increment: () => startNumber += 1,\\n        decrement: () => startNumber -= 1,\\n        reset: () => startNumber = init,\\n    }\\n};\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nfunction createCounter(init) {\\n    let startNumber = init;\\n\\n    return {\\n        increment: () => startNumber += 1,\\n        decrement: () => startNumber -= 1,\\n        reset: () => startNumber = init,\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4034021,
                "title": "js-soln",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    const x = init;\\n    return {\\n        increment: function() {\\n            return ++init;\\n        },\\n        decrement: function() {\\n            return --init;\\n        },\\n        reset: function() {\\n            init = x;\\n            return init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    const x = init;\\n    return {\\n        increment: function() {\\n            return ++init;\\n        },\\n        decrement: function() {\\n            return --init;\\n        },\\n        reset: function() {\\n            init = x;\\n            return init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4033889,
                "title": "counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let original=init\\n    let value=init\\n    return {\\n        increment:()=>{\\n            value+=1\\n            return value\\n        },\\n        reset:()=>{\\n            value=original\\n            return value\\n        },\\n        decrement:()=>{\\n            value-=1\\n            return value\\n        }\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let original=init\\n    let value=init\\n    return {\\n        increment:()=>{\\n            value+=1\\n            return value\\n        },\\n        reset:()=>{\\n            value=original\\n            return value\\n        },\\n        decrement:()=>{\\n            value-=1\\n            return value\\n        }\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4029317,
                "title": "outplay-99-69-memory",
                "content": "# Approach\\n`inc` increased and returned init\\n`dec` decreased and returned init\\n`reset` converted init to the og value\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let c=init;\\n    return {\\n        increment:()=> ++init,\\n        decrement:()=>--init,\\n        reset:()=>init=c\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let c=init;\\n    return {\\n        increment:()=> ++init,\\n        decrement:()=>--init,\\n        reset:()=>init=c\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4027377,
                "title": "best-js-ts-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let num = init;\\n    return {\\n        \"increment\": () => ++num,\\n        \"decrement\": () => --num,\\n        \"reset\": () => {num = init; return init}\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let num = init;\\n    return {\\n        \"increment\": () => ++num,\\n        \"decrement\": () => --num,\\n        \"reset\": () => {num = init; return init}\\n    }\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4025475,
                "title": "counter",
                "content": "# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n$$O(1)$$\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    let currVal = init;\\n    return {\\n        increment: () => {\\n            currVal++;\\n            return currVal;\\n        },\\n        reset: () => {\\n            currVal = init;\\n            return currVal;\\n        },\\n        decrement: () => {\\n            currVal--;\\n            return currVal;\\n        }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    let currVal = init;\\n    return {\\n        increment: () => {\\n            currVal++;\\n            return currVal;\\n        },\\n        reset: () => {\\n            currVal = init;\\n            return currVal;\\n        },\\n        decrement: () => {\\n            currVal--;\\n            return currVal;\\n        }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4022641,
                "title": "counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init;\\n\\n  function increment() {\\n    return ++presentCount;\\n  }\\n\\n  function decrement() {\\n      return --presentCount;\\n  }\\n\\n  function reset() {\\n      return (presentCount = init);\\n  }\\n\\n  return { increment, decrement, reset };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4021430,
                "title": "simple-solution-for-beginners",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentValue = init;\\n    return {\\n        increment: () => {\\n            currentValue = currentValue + 1;\\n            return currentValue;\\n        },\\n        decrement: () => {\\n            currentValue = currentValue - 1;\\n            return currentValue;\\n        },\\n        reset: () => {\\n            currentValue = init;\\n            return currentValue;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentValue = init;\\n    return {\\n        increment: () => {\\n            currentValue = currentValue + 1;\\n            return currentValue;\\n        },\\n        decrement: () => {\\n            currentValue = currentValue - 1;\\n            return currentValue;\\n        },\\n        reset: () => {\\n            currentValue = init;\\n            return currentValue;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4021108,
                "title": "best-way-for-reset-function",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let a= init;\\n    return{\\n        increment : function(){\\n            return ++a;\\n        },\\n        reset : function(){\\n            a= init;\\n            return a;\\n        },\\n        decrement : function(){\\n            return --a;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let a= init;\\n    return{\\n        increment : function(){\\n            return ++a;\\n        },\\n        reset : function(){\\n            a= init;\\n            return a;\\n        },\\n        decrement : function(){\\n            return --a;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020985,
                "title": "solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    class Count {\\n            constructor() {\\n                this.init = init;\\n            }\\n\\n            increment() {\\n                this.init++;\\n                return this.init;\\n            }\\n\\n            decrement() {\\n                this.init--;\\n                return this.init;\\n            }\\n\\n            reset() {\\n                this.init = init;\\n                return this.init;\\n            }\\n        }\\n\\n    return new Count;\\n};\\n\\nconst counter = new createCounter(10);\\nconsole.log(counter.increment());\\nconsole.log(counter.reset());\\nconsole.log(counter.decrement());\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    class Count {\\n            constructor() {\\n                this.init = init;\\n            }\\n\\n            increment() {\\n                this.init++;\\n                return this.init;\\n            }\\n\\n            decrement() {\\n                this.init--;\\n                return this.init;\\n            }\\n\\n            reset() {\\n                this.init = init;\\n                return this.init;\\n            }\\n        }\\n\\n    return new Count;\\n};\\n\\nconst counter = new createCounter(10);\\nconsole.log(counter.increment());\\nconsole.log(counter.reset());\\nconsole.log(counter.decrement());\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Java"
            },
            {
                "id": 4020606,
                "title": "solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var counter=init;\\n    return{\\n        increment:function(){\\n            return ++counter;\\n        },\\n        reset:function(){\\n            counter=init;\\n            return counter;\\n        },\\n        decrement:function(){\\n            return --counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var counter=init;\\n    return{\\n        increment:function(){\\n            return ++counter;\\n        },\\n        reset:function(){\\n            counter=init;\\n            return counter;\\n        },\\n        decrement:function(){\\n            return --counter;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4020054,
                "title": "counter-using-ts-and-js-fully-explained",
                "content": "# Approach\\n1- capture init (integer) and store it in a new variable\\n2- storing in new variable helps you reset the state to orignal else you will end up in getting the wring answer.\\n3- then on each function return the expected result \\n4- for information newVal+=1 === newVal++\\n5- REad the commented code also\\n6- there you see how we are storing simple integer in array\\n7- thats it...\\n\\n# TYPESCRIPT\\n\\n# Code\\n```ts\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let newVal = init;\\n    function increment (){\\n        return newVal +=1\\n    }\\n    function decrement (){\\n        return newVal -=1\\n    }\\n    function reset (){\\n        newVal = init;\\n        return newVal\\n    }\\n\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n```\\n\\n# JAVASCRIPT\\n\\n# Code\\n```js\\nconst createCounter = (init) => {\\n  let newVal  = init\\n  function increase() {    \\n    return newVal+=1;\\n  }\\n  function decrease() {\\n    return newVal-=1;\\n  }\\n  function reset() {    \\n    newVal= init\\n    return init;\\n  }\\n\\n  return {\\n    increase,\\n    decrease,\\n    reset,\\n  };\\n};\\n/*\\nconst init = 0;\\nconst counter = createCounter(init);\\nconst result = [];\\nresult.push(counter.increase());\\nresult.push(counter.increase());\\nresult.push(counter.decrease());\\nresult.push(counter.reset());\\nresult.push(counter.reset());\\nconsole.log(\"\\uD83D\\uDE80 ~ file: app.js:26 ~ result:\", result) -->\\n*/\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```ts\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let newVal = init;\\n    function increment (){\\n        return newVal +=1\\n    }\\n    function decrement (){\\n        return newVal -=1\\n    }\\n    function reset (){\\n        newVal = init;\\n        return newVal\\n    }\\n\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n```\n```js\\nconst createCounter = (init) => {\\n  let newVal  = init\\n  function increase() {    \\n    return newVal+=1;\\n  }\\n  function decrease() {\\n    return newVal-=1;\\n  }\\n  function reset() {    \\n    newVal= init\\n    return init;\\n  }\\n\\n  return {\\n    increase,\\n    decrease,\\n    reset,\\n  };\\n};\\n/*\\nconst init = 0;\\nconst counter = createCounter(init);\\nconst result = [];\\nresult.push(counter.increase());\\nresult.push(counter.increase());\\nresult.push(counter.decrease());\\nresult.push(counter.reset());\\nresult.push(counter.reset());\\nconsole.log(\"\\uD83D\\uDE80 ~ file: app.js:26 ~ result:\", result) -->\\n*/\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4016831,
                "title": "simplest-code",
                "content": "\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    \\n    function reset () {\\n        counter = init\\n        return counter\\n    }\\n\\n    return {\\n        increment: ()=> ++counter,\\n        decrement: ()=> --counter,\\n        reset: ()=> reset()\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter = init;\\n    \\n    function reset () {\\n        counter = init\\n        return counter\\n    }\\n\\n    return {\\n        increment: ()=> ++counter,\\n        decrement: ()=> --counter,\\n        reset: ()=> reset()\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4014396,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = (init) => {\\n    let count = init;\\n\\n    const increment = () => {\\n        count++;\\n        return count;\\n    }\\n\\n    const decrement = () => {\\n        count--;\\n        return count;\\n    }\\n\\n    const reset = () => {\\n        count = init;\\n        return count;\\n    }\\n\\n    return {\\n       increment,\\n       decrement,\\n       reset\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nconst createCounter = (init) => {\\n    let count = init;\\n\\n    const increment = () => {\\n        count++;\\n        return count;\\n    }\\n\\n    const decrement = () => {\\n        count--;\\n        return count;\\n    }\\n\\n    const reset = () => {\\n        count = init;\\n        return count;\\n    }\\n\\n    return {\\n       increment,\\n       decrement,\\n       reset\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4013390,
                "title": "javascript-detailed-explaination-easy-to-understand",
                "content": "# Intuition\\nThe `createCounter` function is designed to create a counter object with an initial value `init`. This counter object has three methods: `increment`, `decrement`, and `reset`, which respectively increase the value by 1, decrease the value by 1, and reset the value to the initial `init`.\\n\\n# Approach\\nWe have implemented the `createCounter` function that returns an object with three methods:\\n1. `increment()`: This method increments the `value` property of the counter object by 1 and then returns the updated value.\\n\\n2. `decrement()`: This method decrements the `value` property of the counter object by 1 and then returns the updated value.\\n\\n3. `reset()`: This method sets the `value` property of the counter object back to the initial `init` value and then returns the updated value.\\n\\nWe\\'ve used the `this` keyword to access the `value` property within each method.\\n\\n# Complexity\\n- Time complexity: All three methods, `increment`, `decrement`, and `reset`, have constant time complexity, i.e., O(1), as they perform simple value updates.\\n\\n- Space complexity: The `createCounter` function returns an object with three methods, but their memory usage is negligible. Therefore, the space complexity is also O(1).\\n\\n# Code\\n```javascript\\n/**\\n * @param {integer} init\\n * @return {Object}\\n */\\nvar createCounter = function(init) {\\n    return {\\n        value: init,\\n        increment() {\\n            return ++this.value;\\n        },\\n        decrement() {\\n            return --this.value;\\n        },\\n        reset() {\\n            this.value = init;\\n            return this.value;\\n        }\\n    };\\n};\\n\\n// Example usages:\\nconst counter1 = createCounter(5);\\nconsole.log(counter1.increment()); // 6\\nconsole.log(counter1.reset()); // 5\\nconsole.log(counter1.decrement()); // 4\\n\\nconst counter2 = createCounter(0);\\nconsole.log(counter2.increment()); // 1\\nconsole.log(counter2.increment()); // 2\\nconsole.log(counter2.decrement()); // 1\\nconsole.log(counter2.reset()); // 0\\nconsole.log(counter2.reset()); // 0\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```javascript\\n/**\\n * @param {integer} init\\n * @return {Object}\\n */\\nvar createCounter = function(init) {\\n    return {\\n        value: init,\\n        increment() {\\n            return ++this.value;\\n        },\\n        decrement() {\\n            return --this.value;\\n        },\\n        reset() {\\n            this.value = init;\\n            return this.value;\\n        }\\n    };\\n};\\n\\n// Example usages:\\nconst counter1 = createCounter(5);\\nconsole.log(counter1.increment()); // 6\\nconsole.log(counter1.reset()); // 5\\nconsole.log(counter1.decrement()); // 4\\n\\nconst counter2 = createCounter(0);\\nconsole.log(counter2.increment()); // 1\\nconsole.log(counter2.increment()); // 2\\nconsole.log(counter2.decrement()); // 1\\nconsole.log(counter2.reset()); // 0\\nconsole.log(counter2.reset()); // 0\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4012651,
                "title": "counter-ii-in-js",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let rs = init, curr = init;\\n    var op = {\\n        \"increment\": function() {\\n            return ++curr;\\n        },\\n        \"decrement\": function() {\\n            return --curr;\\n        },\\n        \"reset\": function() {\\n            curr = rs;\\n            return curr;\\n        }\\n    };\\n    return op;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let rs = init, curr = init;\\n    var op = {\\n        \"increment\": function() {\\n            return ++curr;\\n        },\\n        \"decrement\": function() {\\n            return --curr;\\n        },\\n        \"reset\": function() {\\n            curr = rs;\\n            return curr;\\n        }\\n    };\\n    return op;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4010139,
                "title": "object-return",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let restore=init;\\n    return {\\n        increment:()=>{\\n        return restore+=1;\\n        },\\n        decrement:()=>{\\n         return restore-=1;\\n        },\\n        reset:()=>{\\n         return restore=init;\\n\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let restore=init;\\n    return {\\n        increment:()=>{\\n        return restore+=1;\\n        },\\n        decrement:()=>{\\n         return restore-=1;\\n        },\\n        reset:()=>{\\n         return restore=init;\\n\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4009954,
                "title": "simple-solution-with-explanation",
                "content": "# Explanation\\n\\nBy Looking at the example, we know createCounter should return an object that has three attributes i.e. `increment`, `decrement`, and `reset`. Since `reset` has to reset the value to the initial value passed, we should create a reference to the initial value before we increase or decrease.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n     let initVal = init;\\n\\n  return {\\n    increment: () => {\\n      return ++initVal;\\n    },\\n    reset: () => {\\n      initVal = init;\\n      return initVal;\\n    },\\n    decrement: () => {\\n      return --initVal;\\n    },\\n  };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n     let initVal = init;\\n\\n  return {\\n    increment: () => {\\n      return ++initVal;\\n    },\\n    reset: () => {\\n      initVal = init;\\n      return initVal;\\n    },\\n    decrement: () => {\\n      return --initVal;\\n    },\\n  };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006921,
                "title": "easy-must-check-this",
                "content": "# Intuition\\nWe need function that  returns an object with three methods: increment, decrement, and reset. When you call these methods, they perform the respective operations and return the updated current value.\\n\\n# Approach\\nThis function returns an object with three methods: increment, decrement, and reset. When you call these methods, they perform the respective operations and return the updated current value.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   let currentValue = init;\\n return {\\n    increment: function () {\\n      currentValue++;\\n      return currentValue;\\n    },\\n    decrement: function () {\\n      currentValue--;\\n      return currentValue;\\n    },\\n    reset: function () {\\n      currentValue = init;\\n      return currentValue;\\n    },\\n\\n   } \\n};\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n![killlakill-upvote.gif](https://assets.leetcode.com/users/images/ef409f66-3cf5-4d30-a804-afa8f9af9870_1693939067.415885.gif)",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   let currentValue = init;\\n return {\\n    increment: function () {\\n      currentValue++;\\n      return currentValue;\\n    },\\n    decrement: function () {\\n      currentValue--;\\n      return currentValue;\\n    },\\n    reset: function () {\\n      currentValue = init;\\n      return currentValue;\\n    },\\n\\n   } \\n};\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4006827,
                "title": "2-simple-and-easy-javascript-solution",
                "content": "# Code\\n1st approach -->\\n```\\n// Runtime 59ms Beats 67.12% of users\\n// Memory 44.28MB Beats 81.87% of users\\nvar createCounter = function(init) {\\n    let num = init;\\n    let obj = {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    }\\n    \\n    return obj;\\n};\\n\\n```\\n2nd approach -->\\n```\\n// Runtime 50ms Beats 94.63% of users\\n// Memory 44.10MB Beats 91.99% of users\\nlet createCounter = function(init) {\\n    let i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n// Runtime 59ms Beats 67.12% of users\\n// Memory 44.28MB Beats 81.87% of users\\nvar createCounter = function(init) {\\n    let num = init;\\n    let obj = {\\n        increment: () => num = num + 1,\\n        reset: () => num = init,\\n        decrement: () => num = num - 1\\n    }\\n    \\n    return obj;\\n};\\n\\n```\n```\\n// Runtime 50ms Beats 94.63% of users\\n// Memory 44.10MB Beats 91.99% of users\\nlet createCounter = function(init) {\\n    let i = init;\\n    function increment(){\\n        return ++init;\\n    }\\n    function decrement(){\\n        return --init;\\n    }\\n    function reset(){\\n        init = i;\\n        return init;\\n    }\\n    return{increment, decrement, reset}\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4005439,
                "title": "this-is-simple-here-we-are-setting-a-value-and-then-increment-and-decrement-using-arrow-functions",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n     let i=0;\\n     return{\\n          increment:()=>init + ++i,\\n          decrement:()=>init + --i,\\n          reset:()=> {i=0;\\n          return init ;\\n          }\\n          \\n     }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n     let i=0;\\n     return{\\n          increment:()=>init + ++i,\\n          decrement:()=>init + --i,\\n          reset:()=> {i=0;\\n          return init ;\\n          }\\n          \\n     }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4004243,
                "title": "counter-using-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n\\n    //store the initial value on another value in case of reset function\\n\\n    let initval = init\\n\\n    //the required functions \\n\\n    return {\\n        increment: ()=> ++init,\\n        decrement : () => --init,\\n        reset: ()=> init = initval\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n\\n    //store the initial value on another value in case of reset function\\n\\n    let initval = init\\n\\n    //the required functions \\n\\n    return {\\n        increment: ()=> ++init,\\n        decrement : () => --init,\\n        reset: ()=> init = initval\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 4000896,
                "title": "javascript-method-chaining",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->can Do using method chaining approach.\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let newInt = init;\\n    return {\\n        increment: ()=> {\\nnewInt+=1;\\n            return newInt;\\n        },\\n        reset:()=>{\\n           newInt=init;\\n            return newInt;\\n        },\\n        decrement: ()=>{\\n            newInt-=1;\\n            return newInt;\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let newInt = init;\\n    return {\\n        increment: ()=> {\\nnewInt+=1;\\n            return newInt;\\n        },\\n        reset:()=>{\\n           newInt=init;\\n            return newInt;\\n        },\\n        decrement: ()=>{\\n            newInt-=1;\\n            return newInt;\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3999105,
                "title": "normal-day-in-developers-life",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let cnt = init ;\\n    return {\\n        increment(){\\n            return ++cnt\\n        },\\n        decrement(){\\n            return --cnt\\n        },\\n        reset(){\\n            return cnt = init\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let cnt = init ;\\n    return {\\n        increment(){\\n            return ++cnt\\n        },\\n        decrement(){\\n            return --cnt\\n        },\\n        reset(){\\n            return cnt = init\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998338,
                "title": "3-lines-javascript-code-for-solution",
                "content": "\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let temp = init;\\n    return{\\n        increment: () => init+=1,\\n        decrement:() => init-=1,\\n        reset: () => init = temp\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let temp = init;\\n    return{\\n        increment: () => init+=1,\\n        decrement:() => init-=1,\\n        reset: () => init = temp\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3998099,
                "title": "to-the-point-and-straight-to-question",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let n=init; \\n    let count={increment : function inc(){\\n       return ++n;\\n    },decrement : function dec(){\\n     return --n;\\n\\n    },\\n    reset : function reset(){\\n        return (n=init);\\n    }}\\n    return count;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let n=init; \\n    let count={increment : function inc(){\\n       return ++n;\\n    },decrement : function dec(){\\n     return --n;\\n\\n    },\\n    reset : function reset(){\\n        return (n=init);\\n    }}\\n    return count;\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3997967,
                "title": "counter-ii-solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current_count =init;\\n    return {\\n        increment:function(){\\n            return ++current_count;\\n        },\\n        decrement:function(){\\n            return --current_count;\\n        },\\n        reset:function(){\\n            return (current_count =init);\\n        }\\n\\n    }\\n}\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current_count =init;\\n    return {\\n        increment:function(){\\n            return ++current_count;\\n        },\\n        decrement:function(){\\n            return --current_count;\\n        },\\n        reset:function(){\\n            return (current_count =init);\\n        }\\n\\n    }\\n}\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996340,
                "title": "ok",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    \\n    let counter= init;\\n    const object = {\\n        \\n        increment:function(){\\n            counter++;\\n            return counter;\\n        },\\n        reset:function(){\\n            counter= init;\\n            return counter;\\n        },\\n        decrement:function(){\\n            counter--;\\n            return counter;\\n        }\\n    \\n    }\\n        \\n      return object;  \\n    \\n};\\n\\ntry{\\n const counter = createCounter(5)\\n  counter.increment(); // 6\\n counter.reset(); // 5\\n  counter.decrement(); // 4\\n}catch(e){\\n    console.log(e.message)\\n}\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    \\n    let counter= init;\\n    const object = {\\n        \\n        increment:function(){\\n            counter++;\\n            return counter;\\n        },\\n        reset:function(){\\n            counter= init;\\n            return counter;\\n        },\\n        decrement:function(){\\n            counter--;\\n            return counter;\\n        }\\n    \\n    }\\n        \\n      return object;  \\n    \\n};\\n\\ntry{\\n const counter = createCounter(5)\\n  counter.increment(); // 6\\n counter.reset(); // 5\\n  counter.decrement(); // 4\\n}catch(e){\\n    console.log(e.message)\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3996231,
                "title": "javascript-easy-to-understand-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let initialValue = init;\\n    return {\\n        increment: ()=>{\\n            init = init+1\\n            return init \\n        },\\n        decrement: ()=> {\\n            init = init-1\\n            return init \\n        },\\n        reset: ()=> {\\n            init = initialValue\\n            return init \\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let initialValue = init;\\n    return {\\n        increment: ()=>{\\n            init = init+1\\n            return init \\n        },\\n        decrement: ()=> {\\n            init = init-1\\n            return init \\n        },\\n        reset: ()=> {\\n            init = initialValue\\n            return init \\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3990723,
                "title": "easy-and-simple-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num+1,\\n        reset: () => num = init,\\n        decrement: () => num = num-1\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init;\\n    return {\\n        increment: () => num = num+1,\\n        reset: () => num = init,\\n        decrement: () => num = num-1\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985409,
                "title": "ans-2665",
                "content": "\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    function increment () {\\n        return ++count\\n\\n    }\\n    function decrement() {\\n         return --count\\n\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }   \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let count = init;\\n\\n    function increment () {\\n        return ++count\\n\\n    }\\n    function decrement() {\\n         return --count\\n\\n    }\\n    function reset () {\\n        return count = init;\\n    }\\n    return {\\n        increment, decrement, reset\\n    }   \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3985110,
                "title": "counter-ii",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    let current = init\\n    return {\\n        increment: function () {\\n            current += 1;\\n            return current;\\n        },\\n        decrement: function () {\\n            current -= 1;\\n            return current;\\n        },\\n        reset: function () {\\n            current = init;\\n            return current;\\n        }\\n    }\\n};\\n",
                "solutionTags": [
                    "JavaScript",
                    "Array",
                    "Math"
                ],
                "code": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n    let current = init\\n    return {\\n        increment: function () {\\n            current += 1;\\n            return current;\\n        },\\n        decrement: function () {\\n            current -= 1;\\n            return current;\\n        },\\n        reset: function () {\\n            current = init;\\n            return current;\\n        }\\n    }\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3982547,
                "title": "javascript-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nI have to keep the `init` value for `reset`.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\nFirst, I stored the `init` value in `n`. And I implement three functions. In particular, I include initialization process in `reset()`.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n\\n    let n = init;\\n\\n    return {\\n        increment(){\\n            return ++n;\\n        },\\n        decrement(){\\n            return --n;\\n        },\\n        reset(){\\n            return n = init;\\n        }\\n    }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n\\n    let n = init;\\n\\n    return {\\n        increment(){\\n            return ++n;\\n        },\\n        decrement(){\\n            return --n;\\n        },\\n        reset(){\\n            return n = init;\\n        }\\n    }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3982004,
                "title": "use-the-some-variable-for-the-storing-the-value-before-the-return-statement",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    general=init\\n    return {\\n        increment: () => {\\n            general++\\n            return general;\\n        }, reset : ()=>{\\n            general=init;\\n            return general;\\n        },\\n        decrement: () => {\\n              general--\\n             \\n             return general\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    general=init\\n    return {\\n        increment: () => {\\n            general++\\n            return general;\\n        }, reset : ()=>{\\n            general=init;\\n            return general;\\n        },\\n        decrement: () => {\\n              general--\\n             \\n             return general\\n        }\\n        \\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3981724,
                "title": "js-beats-78-of-coders-simplest-easiest-optimal-solution-using-arrow-function",
                "content": "# Complexity\\n- Time complexity:\\nO(1)\\n\\n- Space complexity:\\nO(1)\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let pre = init;\\n    return {\\n        increment: () => ++pre,\\n        decrement: () => --pre,\\n        reset: () => pre = init\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let pre = init;\\n    return {\\n        increment: () => ++pre,\\n        decrement: () => --pre,\\n        reset: () => pre = init\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3979308,
                "title": "johnny",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n    let totalCalls = 0;\\n    const initFix = init;\\n    if(-1000 <= init || init <= 1000){\\n        if(++totalCalls > 1000){ return \"total calls not to exceed 1000\"; }\\n        return {\\n            increment: function(){\\n                return ++current;\\n            }, \\n            decrement: function(){\\n                return --current;\\n            }, \\n            reset: function (){\\n                current = initFix;\\n                return current;\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let current = init;\\n    let totalCalls = 0;\\n    const initFix = init;\\n    if(-1000 <= init || init <= 1000){\\n        if(++totalCalls > 1000){ return \"total calls not to exceed 1000\"; }\\n        return {\\n            increment: function(){\\n                return ++current;\\n            }, \\n            decrement: function(){\\n                return --current;\\n            }, \\n            reset: function (){\\n                current = initFix;\\n                return current;\\n            }\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978873,
                "title": "simple-solution",
                "content": "\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let r=init;\\n    return {\\n        increment:function(){\\n            return ++r;\\n        },\\n        reset:function(){\\n            r=init;\\n            return r;\\n        },\\n        decrement:function(){\\n            return --r;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let r=init;\\n    return {\\n        increment:function(){\\n            return ++r;\\n        },\\n        reset:function(){\\n            r=init;\\n            return r;\\n        },\\n        decrement:function(){\\n            return --r;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3978183,
                "title": "nice",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nlet i = init\\n    return {\\n    increment: ()=>{\\n   return ++i\\n    },\\n    decrement: ()=>{\\n    return --i\\n    },\\n    reset: ()=>{\\n    return i = init\\n    }}};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nlet i = init\\n    return {\\n    increment: ()=>{\\n   return ++i\\n    },\\n    decrement: ()=>{\\n    return --i\\n    },\\n    reset: ()=>{\\n    return i = init\\n    }}};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977579,
                "title": "counter-ii-object",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nvar curr=init;\\n  return{\\n        increment:()=>{\\n               return curr+=1;\\n\\n        },\\n         decrement:()=>{\\n               return  curr=curr-1\\n         },\\n         reset:()=>{\\n               return  curr=init\\n         }\\n\\n  }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nvar curr=init;\\n  return{\\n        increment:()=>{\\n               return curr+=1;\\n\\n        },\\n         decrement:()=>{\\n               return  curr=curr-1\\n         },\\n         reset:()=>{\\n               return  curr=init\\n         }\\n\\n  }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3977571,
                "title": "counter-ii-object",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nvar curr=init;\\n  return{\\n        increment:()=>{\\n               return curr+=1;\\n\\n        },\\n         decrement:()=>{\\n               return  curr=curr-1\\n         },\\n         reset:()=>{\\n               return  curr=init\\n         }\\n\\n  }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\nvar curr=init;\\n  return{\\n        increment:()=>{\\n               return curr+=1;\\n\\n        },\\n         decrement:()=>{\\n               return  curr=curr-1\\n         },\\n         reset:()=>{\\n               return  curr=init\\n         }\\n\\n  }  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3973195,
                "title": "concept-of-closures-and-objects-in-js",
                "content": "# Intuition\\nremember:\\nIn closures we have the referece to the parent variables.\\nwithin the object in three methods one by one, we are not copying the value and making the change,instead the change is made to the original value, as we are pointing to the same varibale.\\n\\nNeed to make two variables to keep track of the values, one for the reset value, at any  point of time, we can reset the current value to reset value.\\n```\\nlet resetVal = init;\\nlet value = resetVal;\\n// manipulate the value , increment it, decrement, whatever logic you perform, once there is a need to reset it to its initial ,\\nsimply // do this\\nvalue = resetVal;\\n```\\n# Approach\\ndefine three methods:\\n```\\nfunction increment (){...}\\nfunction decrement (){...}\\nfunction reset (){...}\\n```\\nand just return the object with these three methods:\\n```\\nreturn {\\nincrement: increment,\\ndecrement: decrement,\\nreset: reset\\n};\\n```\\ndo not be confuse here, because we are just passing the reference to the methods in the object.\\n\\nHope it helps, if yes, please upvote.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let resetVal = init; \\n    let value = resetVal; \\n\\n    function increment(){\\n        return ++value;    \\n    }\\n    function reset(){\\n        value = resetVal; \\n        return value; \\n    }\\n    function decrement(){\\n        return --value; \\n    }\\n    return {\\n        increment: increment,\\n        decrement: decrement,\\n        reset: reset\\n    };\\n};\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nlet resetVal = init;\\nlet value = resetVal;\\n// manipulate the value , increment it, decrement, whatever logic you perform, once there is a need to reset it to its initial ,\\nsimply // do this\\nvalue = resetVal;\\n```\n```\\nfunction increment (){...}\\nfunction decrement (){...}\\nfunction reset (){...}\\n```\n```\\nreturn {\\nincrement: increment,\\ndecrement: decrement,\\nreset: reset\\n};\\n```\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let resetVal = init; \\n    let value = resetVal; \\n\\n    function increment(){\\n        return ++value;    \\n    }\\n    function reset(){\\n        value = resetVal; \\n        return value; \\n    }\\n    function decrement(){\\n        return --value; \\n    }\\n    return {\\n        increment: increment,\\n        decrement: decrement,\\n        reset: reset\\n    };\\n};\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972407,
                "title": "clean-easy-solution",
                "content": "# Approach\\nStore the original variable separately which will be called upon reset.\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nconst createCounter = (init: number): ReturnObj => {\\n    let val = init\\n    return {\\n        increment: () => ++val,\\n        decrement: () => --val,\\n        reset: () => val = init,\\n    }\\n};\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nconst createCounter = (init: number): ReturnObj => {\\n    let val = init\\n    return {\\n        increment: () => ++val,\\n        decrement: () => --val,\\n        reset: () => val = init,\\n    }\\n};\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3972132,
                "title": "solution-using-this",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n\\treturn {\\n\\t\\tinit: init,\\n\\t\\tincrement: function () {\\n\\t\\t\\treturn (this.init = this.init + 1)\\n\\t\\t},\\n\\t\\treset: function () {\\n\\t\\t\\treturn (this.init = init)\\n\\t\\t},\\n\\t\\tdecrement: function () {\\n\\t\\t\\treturn (this.init = this.init - 1)\\n\\t\\t},\\n\\t}\\n}\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function (init) {\\n\\treturn {\\n\\t\\tinit: init,\\n\\t\\tincrement: function () {\\n\\t\\t\\treturn (this.init = this.init + 1)\\n\\t\\t},\\n\\t\\treset: function () {\\n\\t\\t\\treturn (this.init = init)\\n\\t\\t},\\n\\t\\tdecrement: function () {\\n\\t\\t\\treturn (this.init = this.init - 1)\\n\\t\\t},\\n\\t}\\n}\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3968582,
                "title": "js-solution-with-prefix-increment-and-decrement",
                "content": "\\n# Code\\n```\\nvar createCounter = function(init) {\\n    let result = init;\\n    return {\\n        increment: function() {\\n            return ++result;\\n        },\\n        decrement: function() {\\n            return --result;\\n        },\\n        reset: function() {\\n            result = init;\\n            return result;   \\n        }\\n    }\\n};\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\nvar createCounter = function(init) {\\n    let result = init;\\n    return {\\n        increment: function() {\\n            return ++result;\\n        },\\n        decrement: function() {\\n            return --result;\\n        },\\n        reset: function() {\\n            result = init;\\n            return result;   \\n        }\\n    }\\n};\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3966413,
                "title": "concise-and-modern-code",
                "content": "# Intuition\\nThe Thought was simple to use as minimum statements as possible.\\n\\n# Approach\\nUsed the modern arrow function syntax with increment operators.\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const resetValue = init;\\n    return {\\n        increment: () => ++init,\\n        decrement: () => --init,\\n        reset: () => {\\n            init = resetValue;\\n            return init;\\n        },\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const resetValue = init;\\n    return {\\n        increment: () => ++init,\\n        decrement: () => --init,\\n        reset: () => {\\n            init = resetValue;\\n            return init;\\n        },\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3964317,
                "title": "counter",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init\\n    return {\\n   increment: () => num = num + 1,\\n    reset: () => num = init,\\n    decrement: () => num = num - 1\\n}\\n};\\n\\n\\n const counter = createCounter(5)\\n counter.increment(); // 6\\n counter.reset(); // 5\\n counter.decrement(); // 4\\n\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let num = init\\n    return {\\n   increment: () => num = num + 1,\\n    reset: () => num = init,\\n    decrement: () => num = num - 1\\n}\\n};\\n\\n\\n const counter = createCounter(5)\\n counter.increment(); // 6\\n counter.reset(); // 5\\n counter.decrement(); // 4\\n\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963953,
                "title": "simple-ts",
                "content": "# Code\\n```\\ninterface ReturnObj {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nconst createCounter = (init: number): ReturnObj => {\\n    const initCopy = init\\n\\n    return {\\n        increment: () => ++init,\\n        decrement: () => --init,\\n        reset: () => {\\n            init = initCopy\\n            return init\\n        }\\n    }\\n}\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ninterface ReturnObj {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nconst createCounter = (init: number): ReturnObj => {\\n    const initCopy = init\\n\\n    return {\\n        increment: () => ++init,\\n        decrement: () => --init,\\n        reset: () => {\\n            init = initCopy\\n            return init\\n        }\\n    }\\n}\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3963436,
                "title": "solution",
                "content": "# Intuition\\nmy first leetcode code that actually worked lol, i am sorry if its not upto the mark\\n# Code\\n\\nvar createCounter = function(init,cur) {\\n    cur=init\\n    return{\\n        increment: ()=>{\\n            return init=init+1;\\n        },\\n        decrement: ()=>{\\n            return init=init-1;\\n        },\\n        reset: ()=>{\\n            return init= cur;\\n        }\\n\\n    }\\n    \\n};\\n\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\nmy first leetcode code that actually worked lol, i am sorry if its not upto the mark\\n# Code\\n\\nvar createCounter = function(init,cur) {\\n    cur=init\\n    return{\\n        increment: ()=>{\\n            return init=init+1;\\n        },\\n        decrement: ()=>{\\n            return init=init-1;\\n        },\\n        reset: ()=>{\\n            return init= cur;\\n        }\\n\\n    }\\n    \\n};\\n\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3959373,
                "title": "simple-solution-to-this-problem",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let val = init;\\n    return {\\n        increment : () => {\\n            return ++val;\\n        },\\n        decrement : () => {\\n            return --val;\\n        },\\n        reset : () => {\\n            return val = init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let val = init;\\n    return {\\n        increment : () => {\\n            return ++val;\\n        },\\n        decrement : () => {\\n            return --val;\\n        },\\n        reset : () => {\\n            return val = init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3957960,
                "title": "counter-ii-solution",
                "content": "# Intuition\\nincrement(): Increase the current value by 1 and then return it.\\ndecrement(): Decrease the current value by 1 and then return it.\\nreset(): Set the current value to the initial value (init) and then return it.\\nKeeping these actions in mind, it\\'s important to note that the initial value of init needs to be preserved for the reset() operation. To achieve this, we can initialize a separate variable, count, with the initial value. This variable will be used to maintain the current value during the increment and decrement operations.\\n\\nBefore seeing the solution keep in mind the this Intution part and try again you can do it. it\\'s easy \\n\\n\\n# Approach\\nTo approach this problem, it\\'s helpful to read the provided instructions carefully and translate them into a step-by-step process for each of the required methods: increment(), decrement(), and reset().\\n\\n\\n# Complexity\\nTime complexity: O(1) - Each method performs a constant number of operations regardless of the input value.\\n\\nSpace complexity: O(1) - The additional space used is independent of the input and remains constant.\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\nlet createCounter = function(init) {\\n    let count = init;\\n    return {\\n        increment(){\\n            return ++count;\\n\\n        },\\n        decrement(){\\n            return --count;\\n\\n        },\\n        reset(){\\n          count = init;\\n          return count;\\n         \\n        },\\n    }\\n\\n    \\n     \\n };\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\n\\nlet createCounter = function(init) {\\n    let count = init;\\n    return {\\n        increment(){\\n            return ++count;\\n\\n        },\\n        decrement(){\\n            return --count;\\n\\n        },\\n        reset(){\\n          count = init;\\n          return count;\\n         \\n        },\\n    }\\n\\n    \\n     \\n };\\n\\n\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3949017,
                "title": "javascript-simple-solution",
                "content": "# Complexity\\n- Time complexity: $$O(1)$$\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity: $$O(1)$$\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init\\n    return {\\n        increment:()=> ++presentCount,\\n        decrement:()=> --presentCount,\\n        reset:()=> presentCount = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let presentCount = init\\n    return {\\n        increment:()=> ++presentCount,\\n        decrement:()=> --presentCount,\\n        reset:()=> presentCount = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3947272,
                "title": "solution-using-es6-style",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter=init\\n    const increment=()=>{\\n        counter+=1;\\n    return counter\\n    }\\n    const decrement=()=>{\\n        counter-=1;\\n        return counter}\\n    const reset=()=>{counter=init\\n    return counter}\\n    return {increment,decrement,reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let counter=init\\n    const increment=()=>{\\n        counter+=1;\\n    return counter\\n    }\\n    const decrement=()=>{\\n        counter-=1;\\n        return counter}\\n    const reset=()=>{counter=init\\n    return counter}\\n    return {increment,decrement,reset}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3945454,
                "title": "easy-approach",
                "content": "# Intuition\\n If you know chaining it would be child play really\\n# Approach\\nApproach see down what its actually asking then accordingly you do the task\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const originalValue = init;\\n    return{\\n        increment: ()=>{\\n            return ++init;\\n        },\\n        reset: ()=>{\\n            return init = originalValue; \\n        },\\n        decrement: ()=>{\\n            return --init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    const originalValue = init;\\n    return{\\n        increment: ()=>{\\n            return ++init;\\n        },\\n        reset: ()=>{\\n            return init = originalValue; \\n        },\\n        decrement: ()=>{\\n            return --init;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944911,
                "title": "counter-js",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let totalcount = init;\\n    increment = () => {\\n        totalcount++;\\n        return totalcount;\\n    }\\n    decrement = () => {\\n        totalcount--;\\n        return totalcount;\\n    }\\n     \\n    reset =() => {\\n        totalcount = init;\\n        return totalcount;\\n    }\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let totalcount = init;\\n    increment = () => {\\n        totalcount++;\\n        return totalcount;\\n    }\\n    decrement = () => {\\n        totalcount--;\\n        return totalcount;\\n    }\\n     \\n    reset =() => {\\n        totalcount = init;\\n        return totalcount;\\n    }\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944645,
                "title": "test",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    const start = init;\\n    return {\\n        increment: () => {\\n            init += 1\\n            return init\\n        },\\n        decrement: () => {\\n            return init -= 1\\n        },\\n        reset: () => {\\n            init = start\\n             return init\\n        }\\n    }\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    const start = init;\\n    return {\\n        increment: () => {\\n            init += 1\\n            return init\\n        },\\n        decrement: () => {\\n            return init -= 1\\n        },\\n        reset: () => {\\n            init = start\\n             return init\\n        }\\n    }\\n}\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3944435,
                "title": "30-days-of-javascript-counter-beats-95",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var curr = init;\\n    return{\\n        increment: function(){\\n            curr = curr + 1;\\n            return curr;\\n        },\\n        decrement: function(){\\n            curr--;\\n            return curr;\\n        },\\n        reset: function(){\\n            curr = init;\\n            return curr;\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```\\n**PLEASE UpVOTE**",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    var curr = init;\\n    return{\\n        increment: function(){\\n            curr = curr + 1;\\n            return curr;\\n        },\\n        decrement: function(){\\n            curr--;\\n            return curr;\\n        },\\n        reset: function(){\\n            curr = init;\\n            return curr;\\n        }\\n    }\\n    \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3943389,
                "title": "easy-to-understand-solution",
                "content": "# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let i = init;\\n  reset=()=>{\\n    i = init\\n    return i;\\n  }\\n  \\n  increment = () => ++i;\\n  decrement = () => --i;\\n  \\n  return {increment,decrement,reset};  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n  let i = init;\\n  reset=()=>{\\n    i = init\\n    return i;\\n  }\\n  \\n  increment = () => ++i;\\n  decrement = () => --i;\\n  \\n  return {increment,decrement,reset};  \\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3942062,
                "title": "simplest-solution-in-javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:O(1)\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   const original = init;\\n    let value = init;\\n\\n    return {\\n        increment: function() {\\n            return ++value;\\n        },\\n        decrement: function() {\\n            return --value;\\n        },\\n        reset: function() {\\n            value = original;\\n            return original;\\n        }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n   const original = init;\\n    let value = init;\\n\\n    return {\\n        increment: function() {\\n            return ++value;\\n        },\\n        decrement: function() {\\n            return --value;\\n        },\\n        reset: function() {\\n            value = original;\\n            return original;\\n        }\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3940454,
                "title": "clean-solution",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let current = Number(init);\\n\\n    const increment = () => ++current;\\n\\n    const decrement = () => --current;\\n\\n    const reset = () => {\\n        current = Number(init);\\n        return init;\\n    }\\n\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript",
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let current = Number(init);\\n\\n    const increment = () => ++current;\\n\\n    const decrement = () => --current;\\n\\n    const reset = () => {\\n        current = Number(init);\\n        return init;\\n    }\\n\\n    return {\\n        increment,\\n        decrement,\\n        reset\\n    };\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3937735,
                "title": "2665-javascript-solution-for-counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let val=init;\\n    function increment(){\\n        val++;\\n        return val\\n    }\\n    function decrement(){\\n        val--;\\n        return val\\n    }\\n    function reset(){\\n        val=init;\\n        return val\\n    }\\n    return{\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let val=init;\\n    function increment(){\\n        val++;\\n        return val\\n    }\\n    function decrement(){\\n        val--;\\n        return val\\n    }\\n    function reset(){\\n        val=init;\\n        return val\\n    }\\n    return{\\n        increment,\\n        decrement,\\n        reset\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3936285,
                "title": "30-days-of-javascript-counter-ii",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\nStore a copy of initial value into a variable and update according to the functions requirments.\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n1) First Make a Variable named currentValue to store initial value\\n2) in functions return block, create three function increment, decrement and reset.\\n3) Now Follow The Problem requirment and update and return currentValue in functions.\\n4) In reset, Reset the currentValue to it\\'s initial value\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentValue = init;\\n    return{\\n        increment: function(){\\n            currentValue = currentValue + 1;\\n            return currentValue;\\n        },\\n        decrement: function(){\\n            currentValue--;\\n            return currentValue;\\n        },\\n        reset: function(){\\n            currentValue = init\\n            return currentValue;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let currentValue = init;\\n    return{\\n        increment: function(){\\n            currentValue = currentValue + 1;\\n            return currentValue;\\n        },\\n        decrement: function(){\\n            currentValue--;\\n            return currentValue;\\n        },\\n        reset: function(){\\n            currentValue = init\\n            return currentValue;\\n        }\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3924517,
                "title": "javascript",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n/**\\n * @param {integer} init                                \\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    // let val = init\\n    // let count = 0\\n    // console.log(count++)\\n    let val = init\\n   return{\\n       increment:()=>{\\n           return ++init\\n       },\\n       decrement:()=>{\\n           return --init\\n       },\\n       reset:()=>{\\n           return init = val\\n       }\\n   }\\n\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init                                \\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    // let val = init\\n    // let count = 0\\n    // console.log(count++)\\n    let val = init\\n   return{\\n       increment:()=>{\\n           return ++init\\n       },\\n       decrement:()=>{\\n           return --init\\n       },\\n       reset:()=>{\\n           return init = val\\n       }\\n   }\\n\\n\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3923237,
                "title": "typescript-minimalistic-code",
                "content": "# Code\\n```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let val = init;\\n    return {\\n        increment: () => ++val,\\n        decrement: () => --val,\\n        reset: () => val = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "TypeScript"
                ],
                "code": "```\\ntype ReturnObj = {\\n    increment: () => number,\\n    decrement: () => number,\\n    reset: () => number,\\n}\\n\\nfunction createCounter(init: number): ReturnObj {\\n    let val = init;\\n    return {\\n        increment: () => ++val,\\n        decrement: () => --val,\\n        reset: () => val = init,\\n    }\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3920972,
                "title": "beginner-friendly-approach",
                "content": "# Intuition\\nuse a const to store value of init for reset function. we can directly increment or decrement the value of init and reset the value using the const we declared.\\n# Complexity\\nbeats 80% in both time complexity and space complexity.\\n# Code\\n```\\n\\nvar createCounter = function(init) {\\n    const a=init;\\n    return{\\n        increment: ()=> ++init,\\n        reset: ()=> init=a,\\n        decrement: ()=>--init\\n        }\\n};\\n",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "# Intuition\\nuse a const to store value of init for reset function. we can directly increment or decrement the value of init and reset the value using the const we declared.\\n# Complexity\\nbeats 80% in both time complexity and space complexity.\\n# Code\\n```\\n\\nvar createCounter = function(init) {\\n    const a=init;\\n    return{\\n        increment: ()=> ++init,\\n        reset: ()=> init=a,\\n        decrement: ()=>--init\\n        }\\n};\\n",
                "codeTag": "Unknown"
            },
            {
                "id": 3916749,
                "title": "shortest-and-easiest-way",
                "content": "# Intuition\\n<!-- Describe your first thoughts on how to solve this problem. -->\\n\\n# Approach\\n<!-- Describe your approach to solving the problem. -->\\n\\n# Complexity\\n- Time complexity:\\n<!-- Add your time complexity here, e.g. $$O(n)$$ -->\\n\\n- Space complexity:\\n<!-- Add your space complexity here, e.g. $$O(n)$$ -->\\n\\n# Code\\n```\\n\\nvar createCounter = function(init) {\\n let num = init;\\n   return {\\n       increment: ()=>{\\n           return ++num ;\\n       },\\n       reset: ()=>{\\n           return num = init;\\n       },\\n         decrement: ()=>{\\n           return --num;\\n       },\\n         \\n   } \\n};\\n\\n\\n  const counter = createCounter(5)\\n counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n \\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n\\nvar createCounter = function(init) {\\n let num = init;\\n   return {\\n       increment: ()=>{\\n           return ++num ;\\n       },\\n       reset: ()=>{\\n           return num = init;\\n       },\\n         decrement: ()=>{\\n           return --num;\\n       },\\n         \\n   } \\n};\\n\\n\\n  const counter = createCounter(5)\\n counter.increment(); // 6\\n  counter.reset(); // 5\\n  counter.decrement(); // 4\\n \\n```",
                "codeTag": "Unknown"
            },
            {
                "id": 3916350,
                "title": "easy-javascript-solution",
                "content": "> If you like vote up\\n\\n# Code\\n```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let i=init;\\n    function increment(){\\n        i++\\n        return i;\\n    }\\n    function reset(){\\n        i=init\\n        return init\\n    }\\n    function decrement(){\\n        i--\\n        return i\\n    }\\n    return {\"increment\":increment,\"reset\":reset,\"decrement\":decrement}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "solutionTags": [
                    "JavaScript"
                ],
                "code": "```\\n/**\\n * @param {integer} init\\n * @return { increment: Function, decrement: Function, reset: Function }\\n */\\nvar createCounter = function(init) {\\n    let i=init;\\n    function increment(){\\n        i++\\n        return i;\\n    }\\n    function reset(){\\n        i=init\\n        return init\\n    }\\n    function decrement(){\\n        i--\\n        return i\\n    }\\n    return {\"increment\":increment,\"reset\":reset,\"decrement\":decrement}\\n};\\n\\n/**\\n * const counter = createCounter(5)\\n * counter.increment(); // 6\\n * counter.reset(); // 5\\n * counter.decrement(); // 4\\n */\\n```",
                "codeTag": "Unknown"
            }
        ],
        "discussions": [
            {
                "id": 1882561,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1885855,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886327,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2037503,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886326,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886103,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1885727,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2069468,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2024731,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2003921,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1882561,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1885855,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886327,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2037503,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886326,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1886103,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1885727,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2069468,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2024731,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 2003921,
                "content": [
                    {
                        "username": "najwer23",
                        "content": "Variables declared inside a closure are not garbage collected! \\n\\nAnd it is important in SPA and nodeJS server\\n\\n"
                    },
                    {
                        "username": "devvrat02",
                        "content": "Yes it is"
                    },
                    {
                        "username": "disturbedbrown1",
                        "content": "Finally got a chance to use the pre increment and decrement operators outside of school somewhere. \\uD83C\\uDF1F"
                    },
                    {
                        "username": "harshitdongre043",
                        "content": "Just Read it twice easy \\nThe three functions are:\\n\\nincrement() increases the current value by 1 and then returns it.\\ndecrement() reduces the current value by 1 and then returns it.\\nreset() sets the current value to init and then returns it.\\n "
                    },
                    {
                        "username": "jaya_p",
                        "content": "var createCounter = function(init) {\n    let count = init\n    \n         function increment(){\n             count++;\n             return count;\n        }\n\n         function decrement(){\n              count--;\n             return  count;\n        }\n\n        function reset(){\n             count= init;\n         return count\n        }\n\n    return {\n        increment,\n        decrement,\n        reset }\n};\n\n var counter = createCounter(0);\n\n counter.increment(); \n counter.increment();\n counter.decrement();\n counter.reset(); \n counter.reset(); \n\n var counter2 = createCounter(5);\n counter2.increment(); \n counter2.reset(); \n counter2.decrement(); \n\n\n\n"
                    },
                    {
                        "username": "MohitAhlawat",
                        "content": "nice to see you can use object function as class function"
                    },
                    {
                        "username": "cJayesh",
                        "content": "Can someone explain how reset is returning currentCount in reset()\\n\\n `var createCounter = function(init) {\\n  let currentCount = init;\\n  return {\\n    increment: () => ++currentCount,\\n    decrement: () => --currentCount,\\n    reset: () => (currentCount = init),\\n  }\\n};`"
                    },
                    {
                        "username": "NaiNonTH",
                        "content": "[@happybarnwal007](/happybarnwal007) Keep in mind, the \\'init\\' value is not constant, which means it can be affected with the increment and decrement functions"
                    },
                    {
                        "username": "happybarnwal007",
                        "content": "[@Mister_CK](/Mister_CK) why is it necessary to do currentCount=init and why  not directly return the init in reset. Its showing error if i am doing directly"
                    },
                    {
                        "username": "cJayesh",
                        "content": "[@Mister_CK](/Mister_CK) Thanks!"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "when you use an arrow function without accolades like :\\n```\\nreset: () => (currentCount = init), \\n```\\nthe return is implied, so it\\'s equivalent to:\\n```\\nreset: () =>{ return (currentCount = init) }, \\n```\\nFurthermore, `currentCount = init` returns the value of init. \\nLastly, you don\\'t need the parentheses, so you can do it like:\\n```\\nreset: () => currentCount = init,\\n```"
                    },
                    {
                        "username": "AiyanFaras",
                        "content": "can anybody explain whats wong with my code?\\n \\nvar counter = {\\n        \"increment\": function(){\\n            return cur+1;\\n        },\\n        \"decrement\": function(){\\n            return cur-1;\\n        },\\n        \"reset\": function(){\\n            cur =init;\\n            return cur;\\n        }}\\n        return counter;"
                    },
                    {
                        "username": "SukhrobCode",
                        "content": "Hi \\uD83D\\uDD90\\n var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: () => ++counter,\\n        decrement: () => --counter,\\n        reset: () => (counter = init),\\n    }\\n}"
                    },
                    {
                        "username": "AshutoshPatel028",
                        "content": "[@Mister_CK](/Mister_CK) what does increment : in front of function mean in jS???\\n"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "firstly, you don't want to use \"\", change it to just `increment: function`\nsecondly, you are returning cur+1. But you are not actually changing cur. So if you do a multiple operations of increment, the value will always be the original + 1.\nWhat you want to do is to change the value of cur and return that, like:\n```\nincrement: function(){\nreturn cur = cur+1;\n},\n```\nEven smoother would be to use pre/post-increment operator, this is functionally equivalent, it just looks nicer:\n```\nincrement: function(){\nreturn ++cur;\n},\n```\nnote that the ++ comes in front of the cur, because you want to first increment and then return the incremented value. \nAlso if you don't use { } you don't need to add return and you can put it on one line if you make it an arrow function like this:\n```\nincrement: () => ++cur,\n```\nps: if you put three backticks (```) on a separate line above and below your code snippet, it gets formatted nicely like this."
                    },
                    {
                        "username": "hossien014",
                        "content": "to much esey"
                    },
                    {
                        "username": "Umarwaru",
                        "content": "Is this not the proper way to use methods? I thought it methods would work for this problem. \\n\\n```\\nvar createCounter = function(init) {\\n\\n    if (init <= -1000 || init >= 1000)\\n    return;\\n\\t\\t\\n    const counter = {\\n\\t\\t\\n        increment:  (init) => {\\n            return init++\\n        },\\n\\t\\t\\t\\t\\n        decrement: (init) => {\\n            return init--\\n        },\\n\\t\\t\\t\\t\\n        reset: (init) => {\\n            return init\\n        }\\n\\t\\t\\t\\t\\n    }\\n};\\n```"
                    },
                    {
                        "username": "Gamal_mohamed_2001",
                        "content": "What is the wrong with my code:\\nvar createCounter = function(init) {\\n    return {\\n        increment: () =>  init + 1  ,\\n        decrement: () =>  init - 1,\\n         reset: () =>   init,\\n    }\\n};"
                    },
                    {
                        "username": "Mister_CK",
                        "content": "you need to store a value in a variable that you can increment, so that it remains there between function calls, now you are using whatever value init is every time. You need something like the output I have here\\n```\\nvar createCounter = function(init) {\\n    let output = init\\n    return {\\n        increment: () => ++output,\\n        decrement:() => --output, \\n        reset: () => output = init\\n    }    \\n\\n};\\n```"
                    }
                ]
            },
            {
                "id": 1989045,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1984897,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1976245,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1966499,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1936923,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1915150,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1912508,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1886460,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1886012,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            },
            {
                "id": 1885922,
                "content": [
                    {
                        "username": "praneshkamthe2919",
                        "content": "pre-increment / decrement for this solution, pre updates the value first and then gives the updated value, post increment/decrement returns the value then increments / decrements. "
                    },
                    {
                        "username": "user7069l",
                        "content": "why my solution is only working for the second case?\\n\\n ```var createCounter = function(init) {\\n    let counter = init;\\n    return {\\n        increment: function(){\\n            counter++;\\n            return counter;\\n        },\\n        decrement: function(){\\n            counter--;\\n            return counter;\\n        },\\n        reset: function(){\\n            return init;\\n        }\\n    }\\n};\\n"
                    },
                    {
                        "username": "user9957jV",
                        "content": "reset: function(){\\n           counter = init;\\n           return init;\\n       }\\n\\nPlease add this. This will work."
                    },
                    {
                        "username": "ercanK",
                        "content": "Your `reset` function is not correct. \"`reset()` sets the current value to `init` and then returns it.\", i.e. after reset, current value should restart from `init`."
                    },
                    {
                        "username": "Shaik_Aman_Sayer",
                        "content": "You are not alone who messed up this problem and regret later. just store that init somewhere and manipulate it!"
                    },
                    {
                        "username": "saikiranchikkala20",
                        "content": "var createcounter=function(init){\\nlet count=init\\nfunction increment(){\\n    return ++count\\n   \\n}\\nfunction decrement(){\\n    return --count\\n}\\nfunction reset( ){\\n    count=init\\n    return count;\\n}\\n\\nreturn{\\n    increment:increment,\\n    decrement:decrement,\\n    reset:reset,\\n}\\n}\\n\\ncan someone explain whats wrong in this?"
                    },
                    {
                        "username": "pokerboy_leet",
                        "content": "Day - 4 \\uD83D\\uDE05"
                    },
                    {
                        "username": "user7117Is",
                        "content": "How can I understand weird behavior of this code:\\nvar createCounter = function(init) {\\n    const counter={\\n        currentCount:init,\\n        increment:()=>++this.currentCount,\\n        decrement:()=>--this.currentCount,\\n        reset:()=>this.currentCount=init\\n    }\\n    return counter\\n};\\n\\nI understand exposing currentCount is a problem, which I realised a bit later. But now I am interested in understanding its behavior"
                    },
                    {
                        "username": "mishamio",
                        "content": "would it be possible to solve it for fn with an arbitrary number of parameters? I got stuck for a while here cuz I thought that it was the requirement."
                    },
                    {
                        "username": "VaseemBhai",
                        "content": "I\\'ve received these kinds of counter related questions during my interviews. It\\'s like a starter question to test waters I guess.."
                    },
                    {
                        "username": "Code_Sagar",
                        "content": "Hey Guys Done Day 3 \\uD83D\\uDE01\\n.\\n.\\nHint : \\nval = init\\nStep 1 : pre increment\\nStep 2 : pre decrement\\nStep 3 : initialize with val"
                    },
                    {
                        "username": "devvrat02",
                        "content": "If a person worked on redux or created apis then they are using this regularly in a way.  "
                    }
                ]
            }
        ]
    }
]